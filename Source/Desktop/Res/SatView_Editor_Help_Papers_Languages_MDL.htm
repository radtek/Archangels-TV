<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Mimics Description Language (MDL)</title>
<link rel="stylesheet" type="text/css" href="resources/styles.css">
<![if lte IE 8]>
<link rel="stylesheet" type="text/css" href="resources/iefix.css">
<![endif]>
<![if gt IE 8]>
<link rel="stylesheet" type="text/css" href="resources/ie.css">
<![endif]>
<script src="resources/behaviors.js" type="text/javascript"></script>
</head>

<body style="margin: 0 0 0 0;" background="images/background.jpg" onload="FP_callJS('onRecalcLayout()')">
<img id="PageTemplate" src="images/template.png" alt="" style="position: absolute; left: 0px; top: 0px; width: 880px; height: 660px; border: none; outline: none;">
<img id="PageFloater" src="images/templatebackground.png" alt="" style="position: absolute; left: 39px; top: 659px; width: 803px; height: auto; background-image: url('images/templatebackground.png'); background-repeat: repeat-y; display: none;">
<img id="PageApplication" src="images/application.png" alt="" style="position: absolute; left: 50px; top: 90px; border: none; outline: none;">
<div id="PageTitle" style="position: absolute; left: 295px; top: 84px; width: 545px; height: 22px;">
	<span class="StandardTitleTextStyle" style="width: 545px;">Mimics Description Language (MDL)</span>
</div>
<div id="PageContents" style="position: absolute; left: 40px; top: 114px; width: 800px; height: auto; z-index: 1;">
	<div id="PageHeader" style="position: relative; left: 0px; top: 0px; width: 550px; height: auto; float: right;">
		<p class="StandardSummaryTitleStyle" style="position: relative; width: auto; height: auto; margin-left: 5px; margin-top: 10px; margin-bottom: 0px; text-indent: 0px; float: left;">SUMMARY</p>
		<div id="PageVersionSection" style="position: relative; left: 0px; top: 0px; width: auto; height: auto; float: right;">
			<span class="StandardVersionTextStyle" style="position: relative; width: auto; height: auto; margin-left: 5px; margin-right: 10px; float: right;">
			<!--webbot bot="Timestamp" S-Type="EDITED" S-Format="%A, %B %d, %Y" startspan -->Saturday, October 10, 2015<!--webbot bot="Timestamp" endspan i-checksum="670" --><br>Version 1.0</span>
		</div>
		<div id="PageSummarySection" style="position: relative; left: 0px; top: 0px; width: auto; height: auto; margin-top: 2px; float: left;">
			<div id="PageSummaryBox" style="position: relative; left: 0px; top: 0px; width: 538px; height: auto; border: 1px solid #FFFF00; background: #FFFFDD; margin-right: 5px; float: left;">
				<p class="StandardSummaryTextStyle" style="position: relative; left: 0px; top: 0px; width: auto; height: auto; margin-left: 5px; margin-top: 0px; margin-right: 5px; margin-bottom: 0px; padding-top: 2px; padding-bottom: 2px; float: left;">The <i>Mimics Description Language</i> (MDL) is the programming language of SatView™ developed to ease the description of the dynamic behavior of <i>Mimics Displays</i> (MMD). The animation of mimics objects is defined through individual procedures for each of those. The MDL supports an extended set of keywords (compared to the DPL) in order to control the execution of the procedures.<br>All information is subject to change without notice and does not represent a commitment on the part of <span class="CompanyNameTextStyle" style="font-size: 12px;">Binary Space</span>.</p>
			</div>
		</div>
	</div>
	<div id="PageText" style="position: relative; left: 0px; top: 0px; width: 800px; height: auto; margin-bottom: 10px; float: left;">
		<div id="HowDoISection" style="margin-left: 20px; margin-top: 20px; margin-right: 5px; display: none;">
			<p class="StandardListTitleTextStyle">How do I...</p>
			<table border="0" cellpadding="0" cellspacing="0">
				<tr>
					<td valign="top"><img src="images/expandbutton.png" width="11" height="11" alt="Click to expand/collapse" style="margin-left: 10px; margin-top: 4px; margin-right: 5px; cursor: pointer;" onclick="onClickListItem(event)"></td><td valign="top"><p class="StandardListExpandableItemTextStyle" style="margin-top: 2px; cursor: pointer;" onclick="onClickListItem(event)"></p>
						<div style="margin-bottom: 10px; display: block;">
							<img src="images/collapsebutton.png" alt="">
							<div style="position: relative; left: 0px; top: 0px; width: auto; height: auto; border: 1px solid #9BAFDE; background: #D9E9FE; z-index: 2;">
								<ol class="StandardListItemTextStyle" style="margin-left: 32px; margin-top: 2px; margin-right: 5px; margin-bottom: 2px; padding-left: 0px;">
								</ol>
							</div>
						</div>
					</td>
				</tr>
			</table>
		</div>
		<p class="StandardListTitleTextStyle" style="margin-left: 20px; margin-top: 20px; margin-bottom: 2px;">Contents</p>
		<ul class="StandardListTitleTextStyle" style="list-style-type: none; margin-left: 20px; margin-top: 2px; margin-right: 5px; margin-bottom: 20px; padding-left: 0px; font-size: 14px;">
			<li>1. <a href="#Introduction" style="color: #072C61;">Introduction</a></li>
			<li>2. <a href="#Syntax" style="color: #072C61;">Syntax</a></li>
			<li>3. <a href="#Library" style="color: #072C61;">Library</a></li>
			<li>4. <a href="#Samples" style="color: #072C61;">Samples</a></li>
		</ul>
		<p class="StandardListTitleTextStyle" style="margin-left: 20px; margin-top: 0px; margin-bottom: 2px; font-size: 13px;">Document Change Log</p>
		<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 20px; margin-top: 0px; margin-bottom: 20px;">
			<tr>
				<td width="50" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Issue</font></b></p></td>
				<td width="75" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Revision</font></b></p></td>
				<td width="125" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Date</font></b></p></td>
				<td width="75" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Affected</font></b></p></td>
				<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Reason</font></b></p></td>
			</tr>
			<tr>
				<td width="50" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">1</p></td>
				<td width="75" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">1</p></td>
				<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">May 2000</p></td>
				<td width="100" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">All</p></td>
				<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">New document</p></td>
			</tr>
			<tr>
				<td width="50" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">1</p></td>
				<td width="75" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">2</p></td>
				<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">September 2001</p></td>
				<td width="100" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Chapter 2</p></td>
				<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Introduction of the '<span class="MDLKeyword">VOLATILE</span>' keyword for non-initialized parameters</p></td>
			</tr>
			<tr>
				<td width="50" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">1</p></td>
				<td width="75" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">3</p></td>
				<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">August 2004</p></td>
				<td width="100" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Chapter 3</p></td>
				<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changed parameter status identifiers</p></td>
			</tr>
			<tr>
				<td width="50" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">1</p></td>
				<td width="75" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">4</p></td>
				<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">September 2005</p></td>
				<td width="100" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Chapter 3.2.9.</p></td>
				<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">New mimics object (Image)</p></td>
			</tr>
			<tr>
				<td width="50" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">1</p></td>
				<td width="75" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">5</p></td>
				<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">August 2008</p></td>
				<td width="100" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Chapter 3.1.</p></td>
				<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Added support for bandwidth measurement</p></td>
			</tr>
			<tr>
				<td width="50" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">1</p></td>
				<td width="75" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">6</p></td>
				<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">May 2011</p></td>
				<td width="100" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Chapter 3.1.</p></td>
				<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">New telemetry data function '<b>GetPastValueTime</b>'</p></td>
			</tr>
			<tr>
				<td width="50" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">1</p></td>
				<td width="75" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">7</p></td>
				<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">January 2016</p></td>
				<td width="100" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Chapter 3.3.</p></td>
				<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Added satellite tracking, pass &amp; interlink functions</p></td>
			</tr>
		</table>
		<p class="StandardListTitleTextStyle" style="margin-left: 20px; margin-top: 0px; margin-bottom: 2px; font-size: 13px;">Table of Figures</p>
		<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 20px; margin-top: 0px; margin-bottom: 20px;">
			<tr>
				<td width="125" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Figure</font></b></p></td>
				<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Description</font></b></p></td>
			</tr>
			<tr>
				<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">&nbsp;</p></td>
				<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">&nbsp;</p></td>
			</tr>
		</table>
		<p class="StandardListTitleTextStyle" style="margin-left: 20px; margin-top: 0px; margin-bottom: 2px; font-size: 13px;">Legend</p>
		<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 20px; margin-top: 0px; margin-bottom: 40px;">
			<tr>
				<td width="125" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Mnemonic</font></b></p></td>
				<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Description</font></b></p></td>
			</tr>
			<tr>
				<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">&nbsp;</p></td>
				<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">&nbsp;</p></td>
			</tr>
		</table>
		<ul class="StandardListTitleTextStyle" style="list-style-type: none; margin-left: 20px; margin-top: 20px; margin-bottom: 2px; margin-right: 5px; padding-left: 0px; font-size: 14px;">
			<li>
				<p style="margin-bottom: 2px;">1. <a name="Introduction">Introduction</a></p>
				<p class="StandardTableItemTextStyle" style="margin-top: 0px; margin-bottom: 0px;">The <i>Mimics Description Language</i> (MDL) is the programming language of SatView™ developed to ease the description of the dynamic behavior of mimics displays. It is an extension of the <i>Microsoft® Foundation Classes</i> (MFC). The associated library provides access to all kind of information related to telemetry data and grants extensive control over mimics objects.</p>
			</li>
			<li>
				<p style="margin-top: 15px; margin-bottom: 2px;">2. <a name="Syntax">Syntax</a></p>
				<p class="StandardTableItemTextStyle" style="margin-top: 0px; margin-bottom: 0px;">The source code of a mimics display always consists of one or more procedures, each of them associated to a mimics object. The procedures are executed automatically whenever one of the parameters used inside is updated. It is also possible to control the update behavior programmatically.</p>
				<p class="StandardListItemTextStyle" style="margin-top: 4px; margin-right: 10px; margin-bottom: 2px;">The syntax looks as follows:</p>
				<div style="padding-left: 5px; padding-top: 5px; padding-right: 5px; padding-bottom: 5px; border: 1px solid #9BAFDE; background: #D7E7FE;">
					<table class="MDLKeyword">
						<tr>
							<td style="width: 250px;">
								<p style="margin-left: 10px; margin-top: 0px; margin-bottom: 0px;"><span class="MDLKeyword">MIMICS OBJECT</span> <span class="StandardListItemTextStyle" style="color: red;"><b>'<i>N<sub><span style="font-size: 10px; line-height: 16px;">i</span></sub></i>'</b></span></p>
								<p style="margin-left: 10px; margin-top: -2px; margin-right: 10px; margin-bottom: 0px;">[<span class="MDLKeyword">PARAMETERS</span> <span class="StandardListItemTextStyle" style="color: green;"><i><b>P<sub><span style="font-size: 10px; line-height: 16px;">i</span></sub></b></i></span>...<span class="StandardListItemTextStyle" style="color: green;"><i><b>P<sub><span style="font-size: 10px; line-height: 16px;">j</span></sub></b></i></span>]</p>
								<p style="margin-left: 10px; margin-top: -2px; margin-right: 10px; margin-bottom: 0px;">[<span class="MDLKeyword">VOLATILE</span> <span class="StandardListItemTextStyle" style="color: olive;"><i><b>P<sub><span style="font-size: 10px; line-height: 16px;">k</span></sub></b></i></span>...<span class="StandardListItemTextStyle" style="color: olive;"><i><b>P<sub><span style="font-size: 10px; line-height: 16px;">l</span></sub></b></i></span>]</p>
								<p style="margin-left: 10px; margin-top: -2px; margin-right: 10px; margin-bottom: 0px;">[<span class="MDLKeyword">AUTOTRIGGER</span> | <span class="MDLKeyword">NOAUTOTRIGGER</span>]</p>
								<p style="margin-left: 10px; margin-top: -2px; margin-right: 10px; margin-bottom: 5px;"><span class="MDLKeyword">BEGIN</span></p>
								<p style="margin-left: 20px; margin-top: -2px; margin-right: 10px; margin-bottom: 0px;"><span class="MDLCode"><i><b>MDL Code</b></i></span></p>
								<p style="margin-left: 10px; margin-top: 3px; margin-right: 10px; margin-bottom: 0px;"><span class="MDLKeyword">END</span></p>
							</td>
							<td>
								<table class="StandardTableStyle" cellpadding="0" cellspacing="0" style="margin-left: 50px; margin-top: 5px; margin-bottom: 0px;">
									<tr>
										<td width="20" class="StandardTableItemTextStyle" valign="top"><p style="margin: 0 4; color: #072C61;"><u>Notation</u>:</p></td>
										<td class="StandardTableItemTextStyle" valign="top"><p style="margin: 0 4 color: #072C61;"><b>&nbsp;</b></p></td>
									</tr>
									<tr style="margin-top: -4px;">
										<td class="StandardTableItemTextStyle" valign="top"><p style="margin: 0 4; color: red;"><i><b>N<sub><span style="font-size: 10px; line-height: 16px;">i</span></sub></b></i></p></td>
										<td class="StandardTableItemTextStyle" valign="top"><p style="margin: 0 4">The name of the mimics object procedure.</p></td>
									</tr>
									<tr>
										<td class="StandardTableItemTextStyle" valign="top"><p style="margin: -2 4 0 4; color: green;"><i><b>P<sub><span style="font-size: 10px; line-height: 16px;">i</span></sub></b></i></p></td>
										<td class="StandardTableItemTextStyle" valign="top"><p style="margin: -2 4 0 4;">The tag of a telemetry parameter.<br>A parameter declaration can be preceded by the keyword <span class="DPLKeyword">STATIC</span> which has the effect that the mimics object procedure is not executed even if the declared parameter is updated.</p></td>
									</tr>
									<tr>
										<td class="StandardTableItemTextStyle" valign="top"><p style="margin: -2 4 0 4;"><b>[<i>x</i>]</b></p></td>
										<td class="StandardTableItemTextStyle" valign="top"><p style="margin: -2 4 0 4;"><i><b>x</b></i> occurs zero times or once.</p></td>
									</tr>
									<tr>
										<td class="StandardTableItemTextStyle" valign="top"><p style="margin: 2 4 0 4;"><b>{<i>x</i>}</b></p></td>
										<td class="StandardTableItemTextStyle" valign="top"><p style="margin: 2 4 0 4"><i><b>x</b></i> occurs zero or more times.</p></td>
									</tr>
								</table>
							</td>
						</tr>
					</table>
				</div>
				<p class="StandardListItemTextStyle" style="margin-top: 5px; margin-bottom: 0px;">By using the <span class="MDLKeyword">VOLATILE</span> keyword the subsequent enumerated telemetry parameters are not checked whether or not they are initialized (i.e. do have a value). Each of the specified parameters must be contained in the list declared with the <span class="MDLKeyword">PARAMETERS</span> keyword and may have a random value. By default, the procedure is not executed whenever one of the parameters <span class="StandardListItemTextStyle" style="line-height: 12px; color: green;"><i><b>P<sub><span style="font-size: 10px; line-height: 16px;">i</span></sub></b></i></span>...<span class="StandardListItemTextStyle" style="color: green;"><i><b>P<sub><span style="font-size: 10px; line-height: 16px;">j</span></sub></b></i></span> has no value.<br>With the <span class="MDLKeyword">VOLATILE</span> keyword specified, the calculation in the procedure is performed although one or more of the parameters <span class="StandardListItemTextStyle" style="line-height: 12px; color: olive;"><i><b>P<sub><span style="font-size: 10px; line-height: 16px;">k</span></sub></b></i></span>...<span class="StandardListItemTextStyle" style="color: olive;"><i><b>P<sub><span style="font-size: 10px; line-height: 16px;">l</span></sub></b></i></span> have no (or a random) value. The keywords <span class="MDLKeyword">AUTOTRIGGER</span> or <span class="MDLKeyword">NOAUTOTRIGGER</span> control the execution of the procedure. The first one checks the parameters used in the procedure in order to decide whether an update should take place or not whereas the second one forces a recalculation at the occurrence of every telemetry packet of format.</p>
			</li>
			<li>
				<p style="margin-top: 15px; margin-bottom: 2px;">3. <a name="Library">Library</a></p>
				<p class="StandardTableItemTextStyle" style="margin-top: 2px; margin-bottom: 2px;">Various library functions supported by the MDL provide easy access to the telemetry data characteristics and allow full control over the various mimics objects. The library is grouped into functions related to the control of mimics objects and others providing support in the area of telemetry data processing.</p>
				<p class="StandardListTitleTextStyle" style="margin-top: 4px; margin-bottom: 2px; font-size: 13px"><b>3.1. Telemetry Functions</b></p>
				<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 0px; margin-top: 0px; margin-bottom: 10px;">
					<tr>
						<td width="350" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Function</font></b></p></td>
						<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Description</font></b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CString <b>GetTMUnitTag(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the identifier of the telemetry unit that is currently processed.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The function returns the name of the telemetry packet if the Packet Telemetry Standard (CCSDS 102.0-B-2) is supported. For a telemetry format based standard, it results in a string with the syntax: 'FORMAT: <i>n</i>' where <i>n</i> is the frame number.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CTimeTag <b>GetTMUnitTime(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the time of the telemetry packet (or format).<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The time identifies the moment when the telemetry packet (or format) was received on ground including eventual corrections to compensate any delays caused by the ground segment.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">UINT <b>GetTMUnitID(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the identifier of the telemetry unit or of the format.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The function returns the On-Board Reference Time (OBRT) of the telemetry packet if the Packet Telemetry Standard (CCSDS 102.0-B-2) is supported. For a telemetry format based standard, it returns the number known as format counter.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">BOOL <b>GetTMUnitData(</b>INT <i>nBytePos</i>,<br>&nbsp;&nbsp;BYTE <i>&amp;nValue</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the value of a byte at the specified location <i>nBytePos</i> (&ge; 0) in the variable <i>nValue</i>.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The function returns TRUE if the specified location is valid, FALSE otherwise.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">BOOL <b>GetTMUnitData(</b>INT <i>nBytePos</i>,<br>&nbsp;&nbsp;INT <i>nBitPos</i>,<br>&nbsp;&nbsp;INT <i>nLength</i>,<br>&nbsp;&nbsp;ULONGLONG &amp;<i>nValue</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the value of data at the specified location <i>nBytePos</i> (&ge; 0), <i>nBitPos</i> (0 &le; <i>nBitPos</i> &lt; 8), <i>nLength</i> (1 &le; nLength &le; 64) in the variable <i>nValue</i>.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The function returns TRUE if the specified location is valid, FALSE otherwise.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">WORD <b>GetTMUnitQuality(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the data quality indication of the telemetry packet or format. It may be a combination of one or more of the following values:<br>&nbsp;&nbsp;<b>TMUNIT_DATAQUALITY_GOOD</b><br>&nbsp;&nbsp;<b>TMUNIT_DATAQUALITY_BAD</b><br>&nbsp;&nbsp;<b>TMUNIT_SEQUENCEQUALITY_GOOD</b><br>&nbsp;&nbsp;<b>TMUNIT_SEQUENCEQUALITY_BAD</b><br>&nbsp;&nbsp;<b>TMUNIT_TIMECORRELATION_GOOD</b><br>&nbsp;&nbsp;<b>TMUNIT_TIMECORRELATION_BAD</b><br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The value <b>TMUNIT_DATAQUALITY_NONE</b> is returned in case of an error.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;"><i>type-specifier</i> <b>GetValue(</b><i>parameter-tag</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the current (calibrated) value of the telemetry parameter <i>parameter-tag</i>.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>If the parameter occurs more than once within a telemetry packet or format, the function returns the value of the first occurrence.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;"><i>type-specifier</i> <b>GetValue(</b><i>parameter-tag</i>,<br>&nbsp;&nbsp;INT <i>nOccurrence</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the current (calibrated) value of the telemetry parameter <i>parameter-tag</i> at the occurrence specified by <i>nOccurrence</i> (&ge; 0).<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>If an illegal occurrence number is specified the function returns 0.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;"><i>type-specifier</i> <b>GetRawValue(</b><i>parameter-tag</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the current raw value of the telemetry parameter <i>parameter-tag</i>.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>If the parameter occurs more than once within a telemetry packet or format, the function returns the value of the first occurrence.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;"><i>type-specifier</i> <b>GetRawValue(</b><i>parameter-tag</i>,<br>&nbsp;&nbsp;INT <i>nOccurrence</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the current raw value of the telemetry parameter <i>parameter-tag</i> at the occurrence specified by <i>nOccurrence</i> (&ge; 0).<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>If an illegal occurrence number is specified the function returns 0.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CTimeTag <b>GetValueTime(</b><i>parameter-tag</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the time associated with the value of telemetry parameter <i>parameter-tag</i>.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>If the parameter occurs more than once within a telemetry packet or format, the function returns the time of the first occurrence.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CTimeTag <b>GetValueTime(</b><i>parameter-tag</i>,<br>&nbsp;&nbsp;INT <i>nOccurrence</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the time associated with the value of telemetry parameter <i>parameter-tag</i> at the occurrence specified by <i>nOccurrence</i> (&ge; 0).<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>If an illegal occurrence number is specified the function returns 0.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;"><i>type-specifier</i> <b>GetPastValue(</b><i>parameter-tag</i>,<br>&nbsp;&nbsp;INT <i>nSample</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns a past (calibrated) value of the telemetry parameter <i>parameter-tag</i>. The variable <i>nSample</i> specifies how many samples in the past the value should be from.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>If a parameter occurs more than once within a telemetry packet or format, each occurrence is counted as a sample.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;"><i>type-specifier</i> <b>GetPastRawValue(</b><i>parameter-tag</i>,<br>&nbsp;&nbsp;INT <i>nSample</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns a past raw value of the telemetry parameter <i>parameter-tag</i>. The variable <i>nSample</i> specifies how many samples in the past the value should be from.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>If a parameter occurs more than once within a telemetry packet or format, each occurrence is counted as a sample.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CTimeTag <b>GetPastValueTime(</b><i>parameter-tag</i>,<br>&nbsp;&nbsp;INT <i>nSample</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the time associated with a past value of telemetry parameter <i>parameter-tag</i>. The variable <i>nSample</i> specifies how many samples in the past the value should be from.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>If a parameter occurs more than once within a telemetry unit, each occurrence is counted as a sample.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;"><i>type-specifier</i> <b>CalculateValueAverage(</b><i>parameter-tag</i>,<br>&nbsp;&nbsp;INT <i>nSamples</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the raw average value of the last <i>nSamples</i> samples of the telemetry parameter <i>parameter-tag</i>.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>If less than <i>nSamples</i> samples have been collected, the function returns a floating average of the samples already encountered.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">UINT <b>GetStatus(</b><i>parameter-tag</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the status of the telemetry parameter <i>parameter-tag</i> which may be a combination of the following values:<br>&nbsp;&nbsp;<b>TMPARAMETER_STATUS_GOOD</b><br>&nbsp;&nbsp;<b>TMPARAMETER_STATUS_BAD</b><br>&nbsp;&nbsp;<b>TMPARAMETER_STATUS_NOLIMIT</b><br>&nbsp;&nbsp;<b>TMPARAMETER_STATUS_SOFTLIMIT</b><br>&nbsp;&nbsp;<b>TMPARAMETER_STATUS_HARDLIMIT</b><br>&nbsp;&nbsp;<b>TMPARAMETER_STATUS_DELTALIMIT</b><br>&nbsp;&nbsp;<b>TMPARAMETER_STATUS_VALID</b><br>&nbsp;&nbsp;<b>TMPARAMETER_STATUS_INVALID</b><br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The value <b>TMPARAMETER_STATUS_NONE</b> is returned if the parameter has no value.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">UINT <b>GetStatus(</b><i>parameter-tag</i>,<br>&nbsp;&nbsp;INT <i>nOccurrence</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the status of the telemetry parameter <i>parameter-tag</i> at the occurrence specified by <i>nOccurrence</i> (&ge; 0).<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The value <b>TMPARAMETER_STATUS_NONE</b> is returned if the parameter has no value or an illegal occurrence number was specified.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">double <b>GetTotalTMBandwidth(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the total amount of bits per second available for the telemetry data (including the protocol overhead for the telemetry unit).<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>A value of <b>NAN</b> is returned when no bandwidth information is available.<br>Use the macro BOOL <b>isnan(</b>double <i>f</i><b>)</b> to check for that result.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">double <b>GetAvailableTMBandwidth(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the currently unused bandwidth as a floating-point number between 0 and 1.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>A value of <b>NAN</b> is returned when no bandwidth information or measurement is available.<br>Use the macro BOOL <b>isnan(</b>double <i>f</i><b>)</b> to check for that result.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">double <b>GetMaxDiagnosticTMBandwidth(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the maximum of bits per second currently available for diagnostic purposes, dumps or reports.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>A value of <b>NAN</b> is returned when no bandwidth information is available.<br>Use the macro BOOL <b>isnan(</b>double <i>f</i><b>)</b> to check for that result.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">double <b>GetAvailableDiagnosticTMBandwidth(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the bandwidth currently available for diagnostic purposes, dumps or reports as a number between 0 and 1.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>A value of <b>NAN</b> is returned when no bandwidth information or measurement is available.<br>Use the macro BOOL <b>isnan(</b>double <i>f</i><b>)</b> to check for that result.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CTimeTag <b>GetLastTMBandwidthMeasurementTime(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the time of the last bandwidth measurement.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>A time equal to 0 is returned when no bandwidth information or measurement is available.</p></td>
					</tr>
				</table>
				<p class="StandardListTitleTextStyle" style="margin-top: 4px; margin-bottom: 0px; font-size: 13px"><b>3.2. Mimics Object Functions</b></p>
				<p class="StandardTableItemTextStyle" style="margin-top: 2px; margin-bottom: 2px;">Each type of mimics object has its own set of functions allowing its animation.</p>
				<p class="StandardTableItemTextStyle" style="margin-top: 5px; margin-bottom: 2px;"><b>3.2.1. Common Functions (available for all types of mimics objects)</b></p>
				<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 0px; margin-top: 0px; margin-bottom: 10px;">
					<tr>
						<td width="350" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Function</font></b></p></td>
						<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Description</font></b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetPosition(</b>CONST RECT &amp;<i>rect</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Moves the mimics object to the specified position.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CRect <b>GetPosition(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the current position of the mimics object.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The returned position is always normalized i.e. it does not take into account any possible rotation.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>FlipHorizontal(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Flips the mimics object versus its vertical axis.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>FlipVertical(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Flips the mimics object versus its horizontal axis.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>Rotate(</b>double <i>fAngle</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Rotates the mimics object <i>fAngle</i> degrees in the counter-clockwise direction.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>Show(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Shows the mimics object if it previously was hidden.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>Hide(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Hides the mimics object.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">BOOL <b>IsVisible(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Checks if the mimics object is currently visible.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">BOOL <b>Blink(</b>INT <i>nInterval</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Starts blinking the mimics object with an interval of <i>nInterval</i> milliseconds.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>Set <i>nInterval</i> to 0 in order to stop the blinking.</p></td>
					</tr>
				</table>
				<p class="StandardTableItemTextStyle" style="margin-top: 4px; margin-bottom: 2px;"><b>3.2.2. Line Functions</b></p>
				<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 0px; margin-top: 0px; margin-bottom: 10px;">
					<tr>
						<td width="350" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Function</font></b></p></td>
						<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Description</font></b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>Solid(</b>void<b>)</b><br>VOID <b>Dash(</b>void<b>)</b><br>VOID <b>Dot(</b>void<b>)</b><br>VOID <b>DashDot(</b>void<b>)</b><br>VOID <b>DashDotDot(</b>void<b>)</b><br>BOOL <b>IsSolid(</b>void<b>)</b><br>BOOL <b>IsDashed(</b>void<b>)</b><br>BOOL <b>IsDotted(</b>void<b>)</b><br>BOOL <b>IsDashDotted(</b>void<b>)</b><br>BOOL <b>IsDashDotDotted(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes the style of the line or checks for a certain style.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>Cross(</b>BOOL <i>bEnable</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Adds or removes a crossing symbol to the line.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">BOOL <b>SetCrossPt(</b>double <i>fPt</i>)<br>BOOL <b>GetCrossPt(</b>double *<i>fPt</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Positions the crossing symbol on the line or returns the position of it.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>A value of 0.0 for <i>fPt</i> sets the crossing symbol at the left most position of the line, a value of 1.0 moves it to the right most position. The functions return FALSE if the crossing symbol is not enabled or if <i>fPt</i> &lt; 0.0 or <i>fPt</i> &gt; 1.0.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">BOOL <b>IsCross(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Checks if a crossing symbol is positioned on the line.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>Arrow(</b>BOOL <i>bEnable</i><b>)</b><br>VOID <b>DoubleArrow(</b>BOOL <i>bEnable</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Adds or removes a (double) arrow symbol to or from a line.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">BOOL <b>IsArrow(</b>void<b>)</b><br>BOOL <b>IsDoubleArrow(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Checks if a (double) arrow symbol is positioned on the line.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the color of the line.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetThickness(</b>INT <i>nWidth</i>)<br>INT <b>GetThickness(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the thickness (in pixels) of the line.</p></td>
					</tr>
				</table>
				<p class="StandardTableItemTextStyle" style="margin-top: 4px; margin-bottom: 2px;"><b>3.2.3. Arc Functions</b></p>
				<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 0px; margin-top: 0px; margin-bottom: 10px;">
					<tr>
						<td width="350" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Function</font></b></p></td>
						<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Description</font></b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetBorderSize(</b>INT <i>nSize</i><b>)</b><br>INT <b>GetBorderSize(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the size (in pixels) of the arc border.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetBorderStyle(</b>INT <i>nStyle</i><b>)</b><br>INT <b>GetBorderStyle(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the style of the arc border.<br>Valid styles are:<br>&nbsp;&nbsp;<b>PS_SOLID</b><br>&nbsp;&nbsp;<b>PS_DASH</b><br>&nbsp;&nbsp;<b>PS_DOT</b><br>&nbsp;&nbsp;<b>PS_DASHDOT</b><br>&nbsp;&nbsp;<b>PS_DASHDOTDOT</b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetBorderColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetBorderColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the color of the arc border.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetInteriorColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetInteriorColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the interior color of the arc.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetInteriorHatch(</b>INT <i>nHatch</i>,COLORREF <i>nColor</i><b>)</b><br>BOOL <b>GetInteriorHatch(</b>INT &amp;<i>nHatch</i>,COLORREF &amp;<i>nColor</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the interior hatch of the arc together with its color.<br>Possible values for <i>nHatch</i> are:<br>&nbsp;&nbsp;<b>HT_SOLID</b><br>&nbsp;&nbsp;<b>HT_HORIZONTAL</b><br>&nbsp;&nbsp;<b>HT_VERTICAL</b><br>&nbsp;&nbsp;<b>HT_BDIAGONAL</b><br>&nbsp;&nbsp;<b>HT_FDIAGONAL</b><br>&nbsp;&nbsp;<b>HT_CROSS</b><br>&nbsp;&nbsp;<b>HT_DIAGCROSS</b><br>&nbsp;&nbsp;<b>HT_LPOINTS</b><br>&nbsp;&nbsp;<b>HT_MPOINTS</b><br>&nbsp;&nbsp;<b>HT_HPOINTS</b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetRadials(</b>double <i>fRadial1</i>,doube <i>fRadial2</i><b>)</b><br>BOOL <b>GetRadials(</b>double &amp;<i>fRadial1</i>,double &amp;<i>fRadial2</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the radial limitations of the arc.<br>The valid range is 0.0 &le; <i>fRadial1,2</i> &le; 2*PI.</p></td>
					</tr>
				</table>
				<p class="StandardTableItemTextStyle" style="margin-top: 4px; margin-bottom: 2px;"><b>3.2.4. Circle Functions</b></p>
				<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 0px; margin-top: 0px; margin-bottom: 10px;">
					<tr>
						<td width="350" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Function</font></b></p></td>
						<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Description</font></b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetBorderSize(</b>INT <i>nSize</i><b>)</b><br>INT <b>GetBorderSize(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the size (in pixels) of the circle border.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetBorderStyle(</b>INT <i>nStyle</i><b>)</b><br>INT <b>GetBorderStyle(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the style of the circle border.<br>Valid styles are:<br>&nbsp;&nbsp;<b>PS_SOLID</b><br>&nbsp;&nbsp;<b>PS_DASH</b><br>&nbsp;&nbsp;<b>PS_DOT</b><br>&nbsp;&nbsp;<b>PS_DASHDOT</b><br>&nbsp;&nbsp;<b>PS_DASHDOTDOT</b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetBorderColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetBorderColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the color of the circle border.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetInteriorColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetInteriorColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the interior color of the circle.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetInteriorHatch(</b>INT <i>nHatch</i>,COLORREF <i>nColor</i><b>)</b><br>BOOL <b>GetInteriorHatch(</b>INT &amp;<i>nHatch</i>,COLORREF &amp;<i>nColor</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the interior hatch of the circle together with its color.<br>Possible values for <i>nHatch</i> are:<br>&nbsp;&nbsp;<b>HT_SOLID</b><br>&nbsp;&nbsp;<b>HT_HORIZONTAL</b><br>&nbsp;&nbsp;<b>HT_VERTICAL</b><br>&nbsp;&nbsp;<b>HT_BDIAGONAL</b><br>&nbsp;&nbsp;<b>HT_FDIAGONAL</b><br>&nbsp;&nbsp;<b>HT_CROSS</b><br>&nbsp;&nbsp;<b>HT_DIAGCROSS</b><br>&nbsp;&nbsp;<b>HT_LPOINTS</b><br>&nbsp;&nbsp;<b>HT_MPOINTS</b><br>&nbsp;&nbsp;<b>HT_HPOINTS</b></p></td>
					</tr>
				</table>
				<p class="StandardTableItemTextStyle" style="margin-top: 4px; margin-bottom: 2px;"><b>3.2.5. Rectangle Functions</b></p>
				<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 0px; margin-top: 0px; margin-bottom: 10px;">
					<tr>
						<td width="350" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Function</font></b></p></td>
						<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Description</font></b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetBorderSize(</b>INT <i>nSize</i><b>)</b><br>INT <b>GetBorderSize(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the size (in pixels) of the rectangle border.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetBorderStyle(</b>INT <i>nStyle</i><b>)</b><br>INT <b>GetBorderStyle(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the style of the rectangle border.<br>Valid styles are:<br>&nbsp;&nbsp;<b>PS_SOLID</b><br>&nbsp;&nbsp;<b>PS_DASH</b><br>&nbsp;&nbsp;<b>PS_DOT</b><br>&nbsp;&nbsp;<b>PS_DASHDOT</b><br>&nbsp;&nbsp;<b>PS_DASHDOTDOT</b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetBorderColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetBorderColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the color of the rectangle border.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetInteriorColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetInteriorColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the interior color of the rectangle.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetInteriorHatch(</b>INT <i>nHatch</i>,COLORREF <i>nColor</i><b>)</b><br>BOOL <b>GetInteriorHatch(</b>INT &amp;<i>nHatch</i>,COLORREF &amp;<i>nColor</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the interior hatch of the rectangle together with its color.<br>Possible values for <i>nHatch</i> are:<br>&nbsp;&nbsp;<b>HT_SOLID</b><br>&nbsp;&nbsp;<b>HT_HORIZONTAL</b><br>&nbsp;&nbsp;<b>HT_VERTICAL</b><br>&nbsp;&nbsp;<b>HT_BDIAGONAL</b><br>&nbsp;&nbsp;<b>HT_FDIAGONAL</b><br>&nbsp;&nbsp;<b>HT_CROSS</b><br>&nbsp;&nbsp;<b>HT_DIAGCROSS</b><br>&nbsp;&nbsp;<b>HT_LPOINTS</b><br>&nbsp;&nbsp;<b>HT_MPOINTS</b><br>&nbsp;&nbsp;<b>HT_HPOINTS</b></p></td>
					</tr>
				</table>
				<p class="StandardTableItemTextStyle" style="margin-top: 4px; margin-bottom: 2px;"><b>3.2.6. Triangle Functions</b></p>
				<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 0px; margin-top: 0px; margin-bottom: 10px;">
					<tr>
						<td width="350" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Function</font></b></p></td>
						<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Description</font></b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetBorderSize(</b>INT <i>nSize</i><b>)</b><br>INT <b>GetBorderSize(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the size (in pixels) of the triangle border.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetBorderStyle(</b>INT <i>nStyle</i><b>)</b><br>INT <b>GetBorderStyle(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the style of the triangle border.<br>Valid styles are:<br>&nbsp;&nbsp;<b>PS_SOLID</b><br>&nbsp;&nbsp;<b>PS_DASH</b><br>&nbsp;&nbsp;<b>PS_DOT</b><br>&nbsp;&nbsp;<b>PS_DASHDOT</b><br>&nbsp;&nbsp;<b>PS_DASHDOTDOT</b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetBorderColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetBorderColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the color of the triangle border.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetInteriorColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetInteriorColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the interior color of the triangle.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetInteriorHatch(</b>INT <i>nHatch</i>,COLORREF <i>nColor</i><b>)</b><br>BOOL <b>GetInteriorHatch(</b>INT &amp;<i>nHatch</i>,COLORREF &amp;<i>nColor</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the interior hatch of the triangle together with its color.<br>Possible values for <i>nHatch</i> are:<br>&nbsp;&nbsp;<b>HT_SOLID</b><br>&nbsp;&nbsp;<b>HT_HORIZONTAL</b><br>&nbsp;&nbsp;<b>HT_VERTICAL</b><br>&nbsp;&nbsp;<b>HT_BDIAGONAL</b><br>&nbsp;&nbsp;<b>HT_FDIAGONAL</b><br>&nbsp;&nbsp;<b>HT_CROSS</b><br>&nbsp;&nbsp;<b>HT_DIAGCROSS</b><br>&nbsp;&nbsp;<b>HT_LPOINTS</b><br>&nbsp;&nbsp;<b>HT_MPOINTS</b><br>&nbsp;&nbsp;<b>HT_HPOINTS</b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetEdges(</b>double <span style="line-height: 12px;"><i>x<sub><span style="font-size: 10px; line-height: 16px;">1</span></sub></i>,double <i>y<sub><span style="font-size: 10px; line-height: 16px;">1</span></sub></i></span>,<br>&nbsp;&nbsp;double <span style="line-height:12px;"><i>x<sub><span style="font-size: 10px; line-height: 16px;">2</span></sub></i>,double <i>y<sub><span style="font-size: 10px; line-height: 16px;">2</span></sub></i></span>,<br>&nbsp;&nbsp;double <i>x<sub><span style="font-size: 10px; line-height: 16px;">3</span></sub></i>,double <i>y<sub><span style="font-size: 10px; line-height: 16px;">3</span></sub></i><b>)</b><br>VOID <b>GetEdges(</b>double &amp;<span style="line-height: 12px;"><i>x<sub><span style="font-size: 10px; line-height: 16px;">1</span></sub></i>,double &amp;<i>y<sub><span style="font-size: 10px; line-height: 16px;">1</span></sub></i></span>,<br>&nbsp;&nbsp;double &amp;<span style="line-height:12px;"><i>x<sub><span style="font-size: 10px; line-height: 16px;">2</span></sub></i>,double &amp;<i>y<sub><span style="font-size: 10px; line-height: 16px;">2</span></sub></i></span>,<br>&nbsp;&nbsp;double &amp;<i>x<sub><span style="font-size: 10px; line-height: 16px;">3</span></sub></i>,double &amp;<i>y<sub><span style="font-size: 10px; line-height: 16px;">3</span></sub></i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the edge points of the triangle.<br>Valid ranges are: 0.0 &le; <span style="line-height: 12px;"><i>x<sub><span style="font-size: 10px; line-height: 16px;">i</span></sub></i>,<i>y<sub><span style="font-size: 10px; line-height: 16px;">i</span></sub></i></span> &le; 1.0.<br>Example:<br>&nbsp;&nbsp;(<span style="line-height: 12px;">x<sub><span style="font-size: 10px; line-height: 16px;">1</span></sub>,y<sub><span style="font-size: 10px; line-height: 16px;">1</span></sub></span>)=(0.0,1.0)<br>&nbsp;&nbsp;(<span style="line-height: 12px;">x<sub><span style="font-size: 10px; line-height: 16px;">2</span></sub>,y<sub><span style="font-size: 10px; line-height: 16px;">2</span></sub></span>)=(1.0,1.0)<br>&nbsp;&nbsp;(x<sub><span style="font-size: 10px; line-height: 16px;">3</span></sub>,y<sub><span style="font-size: 10px; line-height: 16px;">3</span></sub>)=(0.5,0,0)<br>The above points draw a symmetrical triangle with the peak looking towards the top of the screen.</p></td>
					</tr>
				</table>
				<p class="StandardTableItemTextStyle" style="margin-top: 4px; margin-bottom: 2px;"><b>3.2.7. Switch Functions</b></p>
				<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 0px; margin-top: 0px; margin-bottom: 10px;">
					<tr>
						<td width="350" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Function</font></b></p></td>
						<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Description</font></b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the color of the switch.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>This function affects all parts of a switch.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetFrameColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetFrameColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the color of the switch frame.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetInteriorFrameColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetInteriorFrameColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the color inside the switch frame.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetCenterColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetCenterColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the color of the switch center frame.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetInteriorCenterColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetInteriorCenterColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the color inside the switch center frame.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetBarColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetBarColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the color of the switch bar.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetStubsColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetStubsColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the color of the switch stubs.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetThickness(</b>INT <i>nWidth</i><b>)</b><br>INT <b>GetThickness(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the thickness (in pixels) of the switch.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>This function affects all parts of a switch.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetFrameThickness(</b>INT <i>nWidth</i><b>)</b><br>INT <b>GetFrameThickness(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the width (in pixels) of the switch frame.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetCenterThickness(</b>INT <i>nWidth</i><b>)</b><br>INT <b>GetCenterThickness(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the width (in pixels) of the switch center frame.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetBarThickness(</b>INT <i>nWidth</i><b>)</b><br>INT <b>GetBarThickness(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the width (in pixels) of the switch bar.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetStubsThickness(</b>INT <i>nWidth</i><b>)</b><br>INT <b>GetStubsThickness(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the width (in pixels) of the switch stubs.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>Open(</b>void<b>)</b><br>BOOL <b>IsOpen(</b>void<b>)</b><br>BOOL <b>IsClosed(</b>void<b>)</b><br>VOID <b>Close(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Opens or closes the switch and checks for either state.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>Pos1(</b>void<b>)</b><br>BOOL <b>IsPos1(</b>void<b>)</b><br>VOID <b>Pos2(</b>void<b>)</b><br>BOOL <b>IsPos2(</b>void<b>)</b><br>VOID <b>Pos3(</b>void<b>)</b><br>BOOL <b>IsPos3(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Moves the switch into one of the specified positions or checks for a certain one.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>Broken(</b>void<b>)</b><br>BOOL <b>IsBroken(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Shows the switch in a broken state.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>A switch in a broken state has no toggle bar. One of the above functions must be used to return to a normal state.</p></td>
					</tr>
				</table>
				<p class="StandardTableItemTextStyle" style="margin-top: 4px; margin-bottom: 2px;"><b>3.2.8. Text Functions</b></p>
				<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 0px; margin-top: 0px; margin-bottom: 10px;">
					<tr>
						<td width="350" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Function</font></b></p></td>
						<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Description</font></b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetText(</b>LPCTSTR <i>pszText</i><b>)</b><br>CString <b>GetText(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the text label.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetMode(</b>INT <i>nMode</i><b>)</b><br>INT <b>GetMode(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the background mode.<br>Valid values for <i>nMode</i> are:<br>&nbsp;&nbsp;<b>TRANSPARENT</b><br>&nbsp;&nbsp;<b>OPAQUE</b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the color of the text label.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetBackgroundColor(</b>COLORREF <i>nColor</i><b>)</b><br>COLORREF <b>GetBackgroundColor(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the background color of the text label.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>Specifying a background color is only useful when using the <b>OPAQUE</b> background mode.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">BOOL <b>SetFont(</b>CONST LOGFONT *<i>pFont</i><b>)</b><br>BOOL <b>GetFont(</b>LOGFONT *<i>pFont</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the font of the text label.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>AlignLeft(</b>void<b>)</b><br>VOID <b>AlignCenter(</b>void<b>)</b><br>VOID <b>AlignRight(</b>void<b>)</b><br>VOID <b>AlignVertical(</b>BOOL <i>bEnable</i><b>)</b><br>BOOL <b>IsLeftAligned(</b>void<b>)</b><br>BOOL <b>IsCenterAligned(</b>void<b>)</b><br>BOOL <b>IsRightAligned(</b>void<b>)</b><br>BOOL <b>IsVerticalAligned(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Aligns a text label to the left, center, right or centers it vertically and checks for a certain alignment.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>LeftToRightReading(</b>void<b>)</b><br>VOID <b>TopToBottomReading(</b>void<b>)</b><br>BOOL <b>IsLeftToRightReading(</b>void<b>)</b><br>BOOL <b>IsTopToBottomReading(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Draws the text label horizontally or vertically (one character below the other) and checks for a certain reading.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetTabChars(</b>INT <i>nChars</i><b>)</b><br>INT <b>GetTabChars(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the number of characters between TABs.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>WrapWords(</b>BOOL <i>bEnable</i><b>)</b><br>BOOL <b>IsWrappingWords(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Enables or disables the word wrapping mode and checks if this mode is on or not.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SingleLine(</b>BOOL <i>bEnable</i><b>)</b><br>BOOL <b>IsSingleLine(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Limits the text label to one line and checks if this limitation is enabled or not.</p></td>
					</tr>
				</table>
				<p class="StandardTableItemTextStyle" style="margin-top: 4px; margin-bottom: 2px;"><b>3.2.9. Image Functions</b></p>
				<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 0px; margin-top: 0px; margin-bottom: 10px;">
					<tr>
						<td width="350" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Function</font></b></p></td>
						<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Description</font></b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetFileName(</b>LPCTSTR <i>pszFileName</i><b>)</b><br>CString <b>GetFileName(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the file name of the associated image.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetImageOrigin(</b>CONST POINT &amp;<i>pt</i><b>)</b><br>CPoint <b>GetImageOrigin(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the offset of the image.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetImageSize(</b>CONST SIZE &amp;<i>size</i><b>)</b><br>CSize <b>GetImageSize(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the current size (in percent) of the image.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>A setting of '<i>size</i>.cx = 100' and '<i>size</i>.cy = 100' indicates the original size.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">VOID <b>SetImageTransparency(</b>BYTE <i>nFactor</i><b>)</b><br>BYTE <b>GetImageTransparency(</b>void<b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Changes or returns the transparency of the image.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>A factor of 255 means full opacity and 0 complete transparency (invisible).</p></td>
					</tr>
				</table>
				<p class="StandardListTitleTextStyle" style="margin-top: 4px; margin-bottom: 0px; font-size: 13px"><b>3.3. Satellite Tracking, Pass &amp; Interlink Functions</b></p>
				<p class="StandardTableItemTextStyle" style="margin-top: 2px; margin-bottom: 2px;">An extensive interface is provided by the MDL to support satellite tracking, location pass predictions as well as satellite interlink calculations.</p>
				<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 0px; margin-top: 0px; margin-bottom: 5px;">
					<tr>
						<td width="350" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Function</font></b></p></td>
						<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Description</font></b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">BOOL <b>CalculateSpacecraftOrbit(</b>CSpacecraft *<i>pSpacecraft</i>,<br>&nbsp;&nbsp;CONST CTimeKey &<i>tTime</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Calculates the orbit characteristics of the spacecraft specified by <i>Spacecraft</i>.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The <i>Spacecraft</i> argument must be initialized with the name and NORAD number of the spacecraft those orbit characteristics should be calculated.<br>Consult the 'Data Types' table below for more information about the 'CSpacecraft' class.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">BOOL <b>CalculateSpacecraftState(</b>CONST CSpacecraft<br>&nbsp;&nbsp;*<i>pSpacecraft</i>,CONST CTimeKey &<i>tTime</i>,CSpacecraftState<br>&nbsp;&nbsp;&<i>cState</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Calculates the position &amp; velocity vector (relative to the Sun) of the spacecraft specified by <i>Spacecraft</i>.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The <i>Spacecraft</i> argument must be initialized with at least the name of the spacecraft those state vector should be calculated. The NORAD number must only be supplied for Earth-centric spacecraft.<br>Consult the 'Data Types' table below for more information about the 'CSpacecraft' and 'CSpacecraftState' class.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">BOOL <b>CalculateSpacecraftPasses(</b>CSpacecraftPasses &<i>pPasses</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Calculates the pass periods over one or multiple locations for one or more spacecraft.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The argument <i>pPasses</i> must be initialized before calling this function (as demonstrated in the sample below).</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">BOOL <b>CalculateSpacecraftInterlinks(</b>CSpacecraftInterlinks<br>&nbsp;&nbsp;&<i>pInterlinks</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Calculates the interlink periods between two or three spacecraft.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The argument <i>pInterlinks</i> must be initialized before calling this function (as demonstrated in the sample below).</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">double <b>CalculateSpacecraftOrbitLongitude(</b>LPCTSTR<br>&nbsp;&nbsp;<i>pszSpacecraft</i>,UINT <i>nNORADID</i>,CONST CTimeKey &<i>tTime</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the longitude of the specified spacecraft &lt;<i>pszSpacecraft</i>,<i>nNORADID</i>&gt; at the time <i>tTime</i>.</p><img src="images/note.gif" alt="" style="margin-left: 4px; margin-top: 4px; margin-right: 4px;">Note:<ul class="StandardListItemTextStyle" style="list-style-type: disc; margin-left: 20px; margin-top: 0px; margin-right: 4px; margin-bottom: 0px; padding-left: 0px;"><li>This function is available for Earth-centric spacecraft only</li><li>The parameter <i>tTime</i> must be within an interval of a few days from current real-time in order to guarantee a precise result</li><li>The returned longitude will be between 0...360 degrees</li></ul><table class="StandardTableItemTextStyle" cellpadding="0" cellspacing="0" style="margin-top: 0px; margin-left: 4px; margin-right: 4px; margin-bottom: 2px;"><tr><td valign="top" style="width: 75px; border-bottom: 1px #072C61 solid;"><b>Argument</b></td><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Type</b></td><td valign="top" style="border-bottom: 1px #072C61 solid"><b>Description</b></td></tr><tr><td valign="top"><i>pszSpacecraft</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of spacecraft.</td></tr><tr><td valign="top"><i>nNORADID</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the specified spacecraft.</td></tr><tr><td valign="top"><i>tTime</i></td><td valign="top">CTimeKey &lt;in&gt;</td><td valign="top">The time for which the longitude should be calculated.</td></tr></table></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">double <b>CalculateSpacecraftOrbitLatitude(</b>LPCTSTR<br>&nbsp;&nbsp;<i>pszSpacecraft</i>,UINT <i>nNORADID</i>,CONST CTimeKey &<i>tTime</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the latitude of the specified spacecraft &lt;<i>pszSpacecraft</i>,<i>nNORADID</i>&gt; at the time <i>tTime</i>.</p><img src="images/note.gif" alt="" style="margin-left: 4px; margin-top: 4px; margin-right: 4px;">Note:<ul class="StandardListItemTextStyle" style="list-style-type: disc; margin-left: 20px; margin-top: 0px; margin-right: 4px; margin-bottom: 0px; padding-left: 0px;"><li>This function is available for Earth-centric spacecraft only</li><li>The parameter <i>tTime</i> must be within an interval of a few days from current real-time in order to guarantee a precise result</li><li>The returned latitude will be between -90...90 degrees</li></ul><table class="StandardTableItemTextStyle" cellpadding="0" cellspacing="0" style="margin-left: 4px; margin-right: 4px; margin-bottom: 2px;"><tr><td valign="top" style="width: 75px; border-bottom: 1px #072C61 solid;"><b>Argument</b></td><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Type</b></td><td valign="top" style="border-bottom: 1px #072C61 solid"><b>Description</b></td></tr><tr><td valign="top"><i>pszSpacecraft</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of spacecraft.</td></tr><tr><td valign="top"><i>nNORADID</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the specified spacecraft.</td></tr><tr><td valign="top"><i>tTime</i></td><td valign="top">CTimeKey &lt;in&gt;</td><td valign="top">The time for which the latitude should be calculated.</td></tr></table></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">double <b>CalculateSpacecraftOrbitAltitude(</b>LPCTSTR<br>&nbsp;&nbsp;<i>pszSpacecraft</i>,UINT <i>nNORADID</i>,CONST CTimeKey &<i>tTime</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the altitude of the specified spacecraft &lt;<i>pszSpacecraft</i>,<i>nNORADID</i>&gt; at the time <i>tTime</i>.</p><img src="images/note.gif" alt="" style="margin-left: 4px; margin-top: 4px; margin-right: 4px;">Note:<ul class="StandardListItemTextStyle" style="list-style-type: disc; margin-left: 20px; margin-top: 0px; margin-right: 4px; margin-bottom: 0px; padding-left: 0px;"><li>This function is available for Earth-centric spacecraft only</li><li>The parameter <i>tTime</i> must be within an interval of a few days from current real-time in order to guarantee a precise result</li><li>The returned altitude will be &gt; 0 km</li></ul><table class="StandardTableItemTextStyle" cellpadding="0" cellspacing="0" style="margin-left: 4px; margin-right: 4px; margin-bottom: 2px;"><tr><td valign="top" style="width: 75px; border-bottom: 1px #072C61 solid;"><b>Argument</b></td><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Type</b></td><td valign="top" style="border-bottom: 1px #072C61 solid"><b>Description</b></td></tr><tr><td valign="top"><i>pszSpacecraft</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of spacecraft.</td></tr><tr><td valign="top"><i>nNORADID</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the specified spacecraft.</td></tr><tr><td valign="top"><i>tTime</i></td><td valign="top">CTimeKey &lt;in&gt;</td><td valign="top">The time for which the altitude should be calculated.</td></tr></table></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">double <b>CalculateSpacecraftOrbitVelocity(</b>LPCTSTR<br>&nbsp;&nbsp;<i>pszSpacecraft</i>,UINT <i>nNORADID</i>,CONST CTimeKey &<i>tTime</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the velocity of the specified spacecraft &lt;<i>pszSpacecraft</i>,<i>nNORADID</i>&gt; at the time <i>tTime</i>.</p><img src="images/note.gif" alt="" style="margin-left: 4px; margin-top: 4px; margin-right: 4px;">Note:<ul class="StandardListItemTextStyle" style="list-style-type: disc; margin-left: 20px; margin-top: 0px; margin-right: 4px; margin-bottom: 0px; padding-left: 0px;"><li>This function is available for Earth-centric spacecraft only</li><li>The parameter <i>tTime</i> must be within an interval of a few days from current real-time in order to guarantee a precise result</li><li>The returned velocity will be &gt; 0 km/s</li></ul><table class="StandardTableItemTextStyle" cellpadding="0" cellspacing="0" style="margin-left: 4px; margin-right: 4px; margin-bottom: 2px;"><tr><td valign="top" style="width: 75px; border-bottom: 1px #072C61 solid;"><b>Argument</b></td><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Type</b></td><td valign="top" style="border-bottom: 1px #072C61 solid"><b>Description</b></td></tr><tr><td valign="top"><i>pszSpacecraft</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of spacecraft.</td></tr><tr><td valign="top"><i>nNORADID</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the specified spacecraft.</td></tr><tr><td valign="top"><i>tTime</i></td><td valign="top">CTimeKey &lt;in&gt;</td><td valign="top">The time for which the velocity should be calculated.</td></tr></table></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">CSpacecraftPosition <b>CalculateSpacecraftPosition(</b>LPCTSTR<br>&nbsp;&nbsp;<i>pszSpacecraft</i>,UINT <i>nNORADID</i>,CONST CTimeKey &<i>tTime</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the position (relative to the Sun) of the specified spacecraft &lt;<i>pszSpacecraft</i>,<i>nNORADID</i>&gt; at the time <i>tTime</i>.</p><img src="images/note.gif" alt="" style="margin-left: 4px; margin-top: 4px; margin-right: 4px;">Note:<ul class="StandardListItemTextStyle" style="list-style-type: disc; margin-left: 20px; margin-top: 0px; margin-right: 4px; margin-bottom: 0px; padding-left: 0px;"><li>For Earth-centric spacecraft (<i>nNORADID</i> &lt;&gt; 0) the parameter <i>tTime</i> must be within an interval of a few days from current real-time in order to guarantee a precise result</li><li>The returned position will be returned in form of the class 'CSpacecraftPosition'; its members <i>m_x</i>, <i>m_y</i>, <i>m_z</i> contain the position coordinates in km</li></ul><table class="StandardTableItemTextStyle" cellpadding="0" cellspacing="0" style="margin-left: 4px; margin-right: 4px; margin-bottom: 2px;"><tr><td valign="top" style="width: 75px; border-bottom: 1px #072C61 solid;"><b>Argument</b></td><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Type</b></td><td valign="top" style="border-bottom: 1px #072C61 solid"><b>Description</b></td></tr><tr><td valign="top"><i>pszSpacecraft</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of spacecraft.</td></tr><tr><td valign="top"><i>nNORADID</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the specified spacecraft.</td></tr><tr><td valign="top"><i>tTime</i></td><td valign="top">CTimeKey &lt;in&gt;</td><td valign="top">The time for which the position (relative to the Sun) should be calculated.</td></tr></table></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">CSpacecraftVelocity <b>CalculateSpacecraftVelocity(</b>LPCTSTR<br>&nbsp;&nbsp;<i>pszSpacecraft</i>,UINT <i>nNORADID</i>,CONST CTimeKey &<i>tTime</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the velocity (relative to the Sun) of the specified spacecraft &lt;<i>pszSpacecraft</i>,<i>nNORADID</i>&gt; at the time <i>tTime</i>.</p><img src="images/note.gif" alt="" style="margin-left: 4px; margin-top: 4px; margin-right: 4px;">Note:<ul class="StandardListItemTextStyle" style="list-style-type: disc; margin-left: 20px; margin-top: 0px; margin-right: 4px; margin-bottom: 0px; padding-left: 0px;"><li>For Earth-centric spacecraft (<i>nNORADID</i> &lt;&gt; 0) the parameter <i>tTime</i> must be within an interval of a few days from current real-time in order to guarantee a precise result</li><li>The returned velocity will be returned in form of the class 'CSpacecraftVelocity'; its members <i>m_x</i>, <i>m_y</i>, <i>m_z</i> contain the velocity coordinates in km/s</li></ul><table class="StandardTableItemTextStyle" cellpadding="0" cellspacing="0" style="margin-left: 4px; margin-right: 4px; margin-bottom: 2px;"><tr><td valign="top" style="width: 75px; border-bottom: 1px #072C61 solid;"><b>Argument</b></td><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Type</b></td><td valign="top" style="border-bottom: 1px #072C61 solid"><b>Description</b></td></tr><tr><td valign="top"><i>pszSpacecraft</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of spacecraft.</td></tr><tr><td valign="top"><i>nNORADID</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the specified spacecraft.</td></tr><tr><td valign="top"><i>tTime</i></td><td valign="top">CTimeKey &lt;in&gt;</td><td valign="top">The time for which the velocity (relative to the Sun) should be calculated.</td></tr></table></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">TIMETAG <b>CalculateSpacecraftPassStartTime(</b>LPCTSTR<br>&nbsp;&nbsp;<i>pszSpacecraft</i>,UINT <i>nNORADID</i>,LPCTSTR <i>pszLocation</i>,double<br>&nbsp;&nbsp;<i>fLocationLongitude</i>,double <i>fLocationLatitude</i>,double<br>&nbsp;&nbsp;<i>fLocationAltitude</i>,CONST CTimeKey &<i>tStartTime</i>,CONST<br>&nbsp;&nbsp;CTimeSpan &<i>tInterval</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the begin of the next pass over the location &lt;<i>pszLocation</i>,<i>fLocationLongitude</i>,<i>fLocationLatitude</i>,<i>fLocationAltitude</i>&gt; of the specified spacecraft &lt;<i>pszSpacecraft</i>,<i>nNORADID</i>&gt; after the time <i>tStartTime</i> and within the subsequent <i>tInterval</i> interval.</p><img src="images/note.gif" alt="" style="margin-left: 4px; margin-top: 4px; margin-right: 4px;">Note:<ul class="StandardListItemTextStyle" style="list-style-type: disc; margin-left: 20px; margin-top: 0px; margin-right: 4px; margin-bottom: 0px; padding-left: 0px;"><li>This function is available for Earth-centric spacecraft only</li><li>The parameter <i>tStartTime</i> must be within an interval of a few days from current real-time in order to guarantee a precise result</li></ul><table class="StandardTableItemTextStyle" cellpadding="0" cellspacing="0" style="margin-left: 4px; margin-right: 4px; margin-bottom: 2px;"><tr><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Argument</b></td><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Type</b></td><td valign="top" style="border-bottom: 1px #072C61 solid"><b>Description</b></td></tr><tr><td valign="top"><i>pszSpacecraft</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of spacecraft.</td></tr><tr><td valign="top"><i>nNORADID</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the specified spacecraft.</td></tr><tr><td valign="top"><i>pszLocation</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of pass-over location.</td></tr><tr><td valign="top"><i>fLocationLongitude</i></td><td valign="top">double &lt;in&gt;</td><td valign="top">The longitude (deg) of the pass-over location.</td></tr><tr><td valign="top"><i>fLocationLatitude</i></td><td valign="top">double &lt;in&gt;</td><td valign="top">The latitude (deg) of the pass-over location.</td></tr><tr><td valign="top"><i>fLocationAltitude</i></td><td valign="top">double &lt;in&gt;</td><td valign="top">The altitude (km) of the pass-over location.</td></tr><tr><td valign="top"><i>tStartTime</i></td><td valign="top">CTimeKey &lt;in&gt;</td><td valign="top">Specifies the start time to be used to calculate the next pass over the specified location.</td></tr><tr><td valign="top"><i>tInterval</i></td><td valign="top">CTimeSpan &lt;in&gt;</td><td valign="top">Specifies the interval to be used to calculate the next pass over the specified location.</td></tr></table></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">TIMETAG <b>CalculateSpacecraftPassStopTime(</b>LPCTSTR<br>&nbsp;&nbsp;<i>pszSpacecraft</i>,UINT <i>nNORADID</i>,LPCTSTR <i>pszLocation</i>,double<br>&nbsp;&nbsp;<i>fLocationLongitude</i>,double <i>fLocationLatitude</i>,double<br>&nbsp;&nbsp;<i>fLocationAltitude</i>,CONST CTimeKey &<i>tStartTime</i>,CONST<br>&nbsp;&nbsp;CTimeSpan &<i>tInterval</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the end of the next pass over the location &lt;<i>pszLocation</i>,<i>fLocationLongitude</i>,<i>fLocationLatitude</i>,<i>fLocationAltitude</i>&gt; of the specified spacecraft &lt;<i>pszSpacecraft</i>,<i>nNORADID</i>&gt; after the time <i>tStartTime</i> and within the subsequent <i>tInterval</i> interval.</p><img src="images/note.gif" alt="" style="margin-left: 4px; margin-top: 4px; margin-right: 4px;">Note:<ul class="StandardListItemTextStyle" style="list-style-type: disc; margin-left: 20px; margin-top: 0px; margin-right: 4px; margin-bottom: 0px; padding-left: 0px;"><li>This function is available for Earth-centric spacecraft only</li><li>The parameter <i>tStartTime</i> must be within an interval of a few days from current real-time in order to guarantee a precise result</li></ul><table class="StandardTableItemTextStyle" cellpadding="0" cellspacing="0" style="margin-left: 4px; margin-right: 4px; margin-bottom: 2px;"><tr><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Argument</b></td><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Type</b></td><td valign="top" style="border-bottom: 1px #072C61 solid"><b>Description</b></td></tr><tr><td valign="top"><i>pszSpacecraft</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of spacecraft.</td></tr><tr><td valign="top"><i>nNORADID</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the specified spacecraft.</td></tr><tr><td valign="top"><i>pszLocation</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of pass-over location.</td></tr><tr><td valign="top"><i>fLocationLongitude</i></td><td valign="top">double &lt;in&gt;</td><td valign="top">The longitude (deg) of the pass-over location.</td></tr><tr><td valign="top"><i>fLocationLatitude</i></td><td valign="top">double &lt;in&gt;</td><td valign="top">The latitude (deg) of the pass-over location.</td></tr><tr><td valign="top"><i>fLocationAltitude</i></td><td valign="top">double &lt;in&gt;</td><td valign="top">The altitude (km) of the pass-over location.</td></tr><tr><td valign="top"><i>tStartTime</i></td><td valign="top">CTimeKey &lt;in&gt;</td><td valign="top">Specifies the start time to be used to calculate the next pass over the specified location.</td></tr><tr><td valign="top"><i>tInterval</i></td><td valign="top">CTimeSpan &lt;in&gt;</td><td valign="top">Specifies the interval to be used to calculate the next pass over the specified location.</td></tr></table></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">TIMETAG <b>CalculateSpacecraftInterlinkStartTime(</b>LPCTSTR<br>&nbsp;&nbsp;<i>pszSpacecraftA</i>,UINT <i>nNORADIDA</i>,LPCTSTR <i>pszSpacecraftB</i>,<br>&nbsp;&nbsp;UINT <i>nNORADIDB</i>,CONST CTimeKey &<i>tStartTime</i>,CONST<br>&nbsp;&nbsp;CTimeSpan &<i>tInterval</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the begin of the next interlink session between the spacecraft &lt;<i>pszSpacecraftA</i>,<i>nNORADIDA</i>&gt; and &lt;<i>pszSpacecraftB</i>,<i>nNORADIDB</i>&gt; after the time <i>tStartTime</i> and within the subsequent <i>tInterval</i> interval.</p><img src="images/note.gif" alt="" style="margin-left: 4px; margin-top: 4px; margin-right: 4px;">Note:<ul class="StandardListItemTextStyle" style="list-style-type: disc; margin-left: 20px; margin-top: 0px; margin-right: 4px; margin-bottom: 0px; padding-left: 0px;"><li>This function is available for Earth-centric spacecraft only</li><li>The parameter <i>tStarTime</i> must be within an interval of a few days from current real-time in order to guarantee a precise result</li></ul><table class="StandardTableItemTextStyle" cellpadding="0" cellspacing="0" style="margin-left: 4px; margin-right: 4px; margin-bottom: 2px;"><tr><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Argument</b></td><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Type</b></td><td valign="top" style="border-bottom: 1px #072C61 solid"><b>Description</b></td></tr><tr><td valign="top"><i>pszSpacecraftA</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of first spacecraft.</td></tr><tr><td valign="top"><i>nNORADIDA</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the first spacecraft.</td></tr><tr><td valign="top"><i>pszSpacecraftB</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of second spacecraft.</td></tr><tr><td valign="top"><i>nNORADIDB</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the second spacecraft.</td></tr><tr><td valign="top"><i>tStartTime</i></td><td valign="top">CTimeKey &lt;in&gt;</td><td valign="top">Specifies the start time to be used to calculate the next interlink session.</td></tr><tr><td valign="top"><i>tInterval</i></td><td valign="top">CTimeSpan &lt;in&gt;</td><td valign="top">Specifies the interval to be used to calculate the next interlink session.</td></tr></table></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">TIMETAG <b>CalculateSpacecraftInterlinkStopTime(</b>LPCTSTR<br>&nbsp;&nbsp;<i>pszSpacecraftA</i>,UINT <i>nNORADIDA</i>,LPCTSTR <i>pszSpacecraftB</i>,<br>&nbsp;&nbsp;UINT <i>nNORADIDB</i>,CONST CTimeKey &<i>tStartTime</i>,CONST<br>&nbsp;&nbsp;CTimeSpan &<i>tInterval</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the end of the next interlink session between the spacecraft &lt;<i>pszSpacecraftA</i>,<i>nNORADIDA</i>&gt; and &lt;<i>pszSpacecraftB</i>,<i>nNORADIDB</i>&gt; after the time <i>tStartTime</i> and within the subsequent <i>tInterval</i> interval.</p><img src="images/note.gif" alt="" style="margin-left: 4px; margin-top: 4px; margin-right: 4px;">Note:<ul class="StandardListItemTextStyle" style="list-style-type: disc; margin-left: 20px; margin-top: 0px; margin-right: 4px; margin-bottom: 0px; padding-left: 0px;"><li>This function is available for Earth-centric spacecraft only</li><li>The parameter <i>tStartTime</i> must be within an interval of a few days from current real-time in order to guarantee a precise result</li></ul><table class="StandardTableItemTextStyle" cellpadding="0" cellspacing="0" style="margin-left: 4px; margin-right: 4px; margin-bottom: 2px;"><tr><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Argument</b></td><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Type</b></td><td valign="top" style="border-bottom: 1px #072C61 solid"><b>Description</b></td></tr><tr><td valign="top"><i>pszSpacecraftA</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of first spacecraft.</td></tr><tr><td valign="top"><i>nNORADIDA</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the first spacecraft.</td></tr><tr><td valign="top"><i>pszSpacecraftB</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of second spacecraft.</td></tr><tr><td valign="top"><i>nNORADIDB</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the second spacecraft.</td></tr><tr><td valign="top"><i>tStartTime</i></td><td valign="top">CTimeKey &lt;in&gt;</td><td valign="top">Specifies the start time to be used to calculate the next interlink session.</td></tr><tr><td valign="top"><i>tInterval</i></td><td valign="top">CTimeSpan &lt;in&gt;</td><td valign="top">Specifies the interval to be used to calculate the next interlink session.</td></tr></table></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">TIMETAG <b>CalculateSpacecraftRelaidInterlinkStartTime(</b><br>&nbsp;&nbsp;LPCTSTR <i>pszSpacecraftA</i>,UINT <i>nNORADIDA</i>,LPCTSTR<br>&nbsp;&nbsp;<i>pszSpacecraftVia</i>,UINT <i>nNORADIDVia</i>,LPCTSTR<br>&nbsp;&nbsp;<i>pszSpacecraftB</i>,UINT <i>nNORADIDB</i>,CONST CTimeKey<br>&nbsp;&nbsp;&<i>tStartTime</i>,CONST CTimeSpan &<i>tInterval</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the begin of the next interlink session between the spacecraft &lt;<i>pszSpacecraftA</i>,<i>nNORADIDA</i>&gt; and &lt;<i>pszSpacecraftB</i>,<i>nNORADIDB</i>&gt; via the relais &lt;<i>pszSpacecraftVia</i>,<i>nNORADIDVia</i>&gt; after the time <i>tStartTime</i> and within the subsequent <i>tInterval</i> interval.</p><img src="images/note.gif" alt="" style="margin-left: 4px; margin-top: 4px; margin-right: 4px;">Note:<ul class="StandardListItemTextStyle" style="list-style-type: disc; margin-left: 20px; margin-top: 0px; margin-right: 4px; margin-bottom: 0px; padding-left: 0px;"><li>This function is available for Earth-centric spacecraft only</li><li>The parameter <i>tStartTime</i> must be within an interval of a few days from current real-time in order to guarantee a precise result</li></ul><table class="StandardTableItemTextStyle" cellpadding="0" cellspacing="0" style="margin-left: 4px; margin-right: 4px; margin-bottom: 2px;"><tr><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Argument</b></td><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Type</b></td><td valign="top" style="border-bottom: 1px #072C61 solid"><b>Description</b></td></tr><tr><td valign="top"><i>pszSpacecraftA</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of first spacecraft.</td></tr><tr><td valign="top"><i>nNORADIDA</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the first spacecraft.</td></tr><tr><td valign="top"><i>pszSpacecraftVia</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of relais spacecraft.</td></tr><tr><td valign="top"><i>nNORADIDVia</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the relais spacecraft.</td></tr><tr><td valign="top"><i>pszSpacecraftB</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of second spacecraft.</td></tr><tr><td valign="top"><i>nNORADIDB</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the second spacecraft.</td></tr><tr><td valign="top"><i>tStartTime</i></td><td valign="top">CTimeKey &lt;in&gt;</td><td valign="top">Specifies the start time to be used to calculate the next interlink session.</td></tr><tr><td valign="top"><i>tInterval</i></td><td valign="top">CTimeSpan &lt;in&gt;</td><td valign="top">Specifies the interval to be used to calculate the next interlink session.</td></tr></table></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">TIMETAG <b>CalculateSpacecraftRelaidInterlinkStopTime(</b><br>&nbsp;&nbsp;LPCTSTR <i>pszSpacecraftA</i>,UINT <i>nNORADIDA</i>,LPCTSTR<br>&nbsp;&nbsp;<i>pszSpacecraftVia</i>,UINT <i>nNORADIDVia</i>,LPCTSTR<br>&nbsp;&nbsp;<i>pszSpacecraftB</i>,UINT <i>nNORADIDB</i>,CONST CTimeKey<br>&nbsp;&nbsp;&<i>tStartTime</i>,CONST CTimeSpan &<i>tInterval</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Returns the end of the next interlink session between the spacecraft &lt;<i>pszSpacecraftA</i>,<i>nNORADIDA</i>&gt; and &lt;<i>pszSpacecraftB</i>,<i>nNORADIDB</i>&gt; via the relais &lt;<i>pszSpacecraftVia</i>,<i>nNORADIDVia</i>&gt; after the time <i>tStartTime</i> and within the subsequent <i>tInterval</i> interval.</p><img src="images/note.gif" alt="" style="margin-left: 4px; margin-top: 4px; margin-right: 4px;">Note:<ul class="StandardListItemTextStyle" style="list-style-type: disc; margin-left: 20px; margin-top: 0px; margin-right: 4px; margin-bottom: 0px; padding-left: 0px;"><li>This function is available for Earth-centric spacecraft only</li><li>The parameter <i>tStartTime</i> must be within an interval of a few days from current real-time in order to guarantee a precise result</li></ul><table class="StandardTableItemTextStyle" cellpadding="0" cellspacing="0" style="margin-left: 4px; margin-right: 4px; margin-bottom: 2px;"><tr><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Argument</b></td><td valign="top" style="width: 100px; border-bottom: 1px #072C61 solid;"><b>Type</b></td><td valign="top" style="border-bottom: 1px #072C61 solid"><b>Description</b></td></tr><tr><td valign="top"><i>pszSpacecraftA</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of first spacecraft.</td></tr><tr><td valign="top"><i>nNORADIDA</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the first spacecraft.</td></tr><tr><td valign="top"><i>pszSpacecraftVia</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of relais spacecraft.</td></tr><tr><td valign="top"><i>nNORADIDVia</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the relais spacecraft.</td></tr><tr><td valign="top"><i>pszSpacecraftB</i></td><td valign="top">LPCTSTR &lt;in&gt;</td><td valign="top">The name of second spacecraft.</td></tr><tr><td valign="top"><i>nNORADIDB</i></td><td valign="top">UINT &lt;in&gt;</td><td valign="top">The NORAD identifier of the second spacecraft.</td></tr><tr><td valign="top"><i>tStartTime</i></td><td valign="top">CTimeKey &lt;in&gt;</td><td valign="top">Specifies the start time to be used to calculate the next interlink session.</td></tr><tr><td valign="top"><i>tInterval</i></td><td valign="top">CTimeSpan &lt;in&gt;</td><td valign="top">Specifies the interval to be used to calculate the next interlink session.</td></tr></table></td>
					</tr>
				</table>
				<p class="StandardListItemTextStyle" style="margin-top: 0px; margin-bottom: 8px;"><img src="images/note.gif" alt="" style="margin-right: 4px;">Note:<br>All satellite tracking, pass &amp; interlink functions cannot be tested within the SatView™ Editor; they all return 'NAN' (for 'double' data types) and '0' (for 'TIMETAG' data types). When executed within the SatView™ Desktop, the satellite tracking sub-system must be enabled for these functions to return valid results. Furthermore, it must be ensured that access to the Internet is guaranteed.</p>
				<p class="StandardListTitleTextStyle" style="margin-top: 4px; margin-bottom: 2px; font-size: 13px"><b>Helper Functions:</b></p>
				<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 0px; margin-top: 0px; margin-bottom: 10px;">
					<tr>
						<td width="350" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Function</font></b></p></td>
						<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Description</font></b></p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CString <b>ConvertToText(</b>INT <i>nValue</i><b>)</b><br>CString <b>ConvertToText(</b>UINT <i>nValue</i><b>)</b><br>CString <b>ConvertToText(</b>double <i>fValue</i><b>)</b></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Converts a numerical value into a string.<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The default number of significant digits for floating point numbers is 8.</p></td>
					</tr>
					<tr>
						<td width="350" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CString <b>ConvertToText(</b>double <i>fValue</i>,INT <i>nDigits</i><b>)</b><br></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Converts a floating point value into a string with a maximum of <i>nDigits</i> significant digits.</p></td>
					</tr>
				</table>
				<p class="StandardListTitleTextStyle" style="margin-left: 0px; margin-top: 0px; margin-bottom: 2px; font-size: 13px">Data Types:</p>
				<table class="StandardTableStyle" border="2" bordercolor="#072C61" cellpadding="0" cellspacing="0" style="width: 776px; margin-left: 0px; margin-top: 0px; margin-bottom: 20px;">
					<tr>
						<td width="125" bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Identifier</font></b></p></td>
						<td bgcolor="#072C61" class="StandardTableTitleTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 2 4"><b><font color="#FFFFFF">Description</font></b></p></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;"><i>type-specifier</i></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Depending on the data type of the telemetry parameter <span class="StandardListItemTextStyle" style="color: green;"><i><b>P<sub><span style="font-size: 10px; line-height: 16px;">i</span></sub></b></i></span> it is either an UINT, INT, double or CString.</p></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;"><i>parameter-tag</i></p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">Tag of the telemetry parameter <span class="StandardListItemTextStyle" style="color: green;"><i><b>P<sub><span style="font-size: 10px; line-height: 16px;">i</span></sub></b></i></span>.</p></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CSpacecraft</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing a spacecraft (incl. its orbit characteristics).<br>The following member functions are available:</p><div style="margin-left: 4px; margin-top: 2px; margin-right: 4px; margin-bottom: 1px">VOID <b>SetName(</b>LPCTSTR <i>pszName</i><b>)</b><br>CString <b>GetName()</b> CONST<br>VOID <b>SetNumber(</b>UINT <i>nNumber</i><b>)</b><br>UINT <b>GetNumber()</b> CONST<br>CTimeKey <b>GetOrbitPosition(</b>double &<i>fLongitude</i>,double &<i>fLatitude</i>,double &<i>fAltitude</i>,double &<i>fSpeed</i><b>)</b> CONST<br>CTimeKey <b>GetTLEEpoch()</b> CONST<br>double <b>GetOrbitInclination()</b> CONST<br>double <b>GetOrbitEccentricity()</b> CONST<br>double <b>GetOrbitRAAN()</b> CONST<br>double <b>GetOrbitArgPerigee()</b> CONST<br>double <b>GetOrbitBStar()</b> CONST<br>double <b>GetOrbitDrag()</b> CONST<br>double <b>GetOrbitMeanAnomaly()</b> CONST<br>double <b>GetOrbitMajorAxis()</b> CONST<br>double <b>GetOrbitMinorAxis()</b> CONST<br>double <b>GetOrbitPerigee()</b> CONST<br>double <b>GetOrbitApogee()</b> CONST<br>double <b>GetOrbitMeanMotion()</b> CONST<br>double <b>GetOrbitPeriod()</b> CONST<br>double <b>GetLaunchTime()</b> CONST<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>Only the first four functions are available for non Earth-centric spacecraft.</div></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CSpacecraftState</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing the position &amp; velocity vector of a spacecraft (relative to the Sun for all non Earth-centric ones).<br>The following member functions are available:</p><div style="margin-left: 4px; margin-top: 2px; margin-right: 4px; margin-bottom: 1px">CSpacecraftPosition <b>GetPosition()</b> CONST<br>CSpacecraftVelocity <b>GetVelocity()</b> CONST</div></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CSpacecraftPosition</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing the position of a spacecraft (relative to the Sun for all non Earth-centric ones).<br>The following member properties are available:</p><div style="margin-left: 4px; margin-top: 2px; margin-right: 4px; margin-bottom: 1px">double <b>m_x</b><br>double <b>m_y</b><br>double <b>m_z</b></div></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CSpacecraftVelocity</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing the velocity of a spacecraft (relative to the Sun for all non Earth-centric ones).<br>The following member properties are available:</p><div style="margin-left: 4px; margin-top: 2px; margin-right: 4px; margin-bottom: 1px">double <b>m_x</b><br>double <b>m_y</b><br>double <b>m_z</b></div></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CSpacecraftPasses</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing a collection of 'CSpacecraftPass' items.<br>Consult the <i>Microsoft® Foundation Class</i> (MFC) documentation (see the 'CPtrArray' class).</p></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CSpacecraftPass</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing the properties of a spacecraft pass over one or multiple locations.<br>The following member functions are available:</p><div style="margin-left: 4px; margin-top: 2px; margin-right: 4px; margin-bottom: 1px">VOID <b>SetName(</b>LPCTSTR <i>pszName</i><b>)</b><br>CString <b>GetName()</b> CONST<br>VOID <b>SetSpacecraft(</b>LPCTSTR <i>pszName</i>,UINT <i>nNumber</i><b>)</b><br>CString <b>GetSpacecraft(</b>UINT &<i>nNumber</i><b>)</b> CONST<br>CString <b>GetSpacecraft()</b> CONST<br>BOOL <b>SetLocations(</b>CONST CSpacecraftPassLocations &<i>pLocations</i><b>)</b><br>INT <b>GetLocations(</b>CSpacecraftPassLocations &<i>pLocations</i><b>)</b> CONST<br>VOID <b>SetTimeInterval(</b>CONST CTimeKey &<i>tStartTime</i>,CONST CTimeSpan &<i>tDuration</i><b>)</b><br>BOOL <b>GetTimeInterval(</b>CTimeKey &t<i>StartTime</i>,CTimeSpan &<i>tDuration</i><b>)</b> CONST<br>VOID <b>Enable(</b>BOOL <i>bEnable</i>=TRUE<b>)</b><br>BOOL <b>IsEnabled()</b> CONST</div></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CSpacecraftPassLocations</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing a collection of 'CSpacecraftPassLocation' items.<br>Consult the <i>Microsoft® Foundation Class</i> (MFC) documentation (see the 'CPtrArray' class).</p></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CSpacecraftPassLocation</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing the properties of a location.<br>The following member functions are available:</p><div style="margin-left: 4px; margin-top: 2px; margin-right: 4px; margin-bottom: 1px">VOID <b>SetName(</b>LPCTSTR <i>pszName</i><b>)</b><br>CString <b>GetName()</b> CONST<br>VOID <b>SetLongitude(</b>double <i>fLongitude</i><b>)</b><br>double <b>GetLongitude()</b> CONST<br>VOID <b>SetLatitude(</b>double <i>fLatitude</i><b>)</b><br>double <b>GetLatitude()</b> CONST<br>VOID <b>SetAltitude(</b>double <i>fAltitude</i><b>)</b><br>double <b>GetAltitude()</b> CONST<br>INT <b>GetLinkPeriods(</b>CSpacecraftPassPeriods &<i>pPeriods</i><b>)</b> CONST</div></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CSpacecraftPassPeriods</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing a collection of 'CSpacecraftPassPeriod' items.<br>Consult the <i>Microsoft® Foundation Class</i> (MFC) documentation (see the 'CPtrArray' class).</p></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CSpacecraftPassPeriod</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing the properties of a spacecraft location pass-over period.<br>The following member functions are available:</p><div style="margin-left: 4px; margin-top: 2px; margin-right: 4px; margin-bottom: 1px">BOOL <b>GetPeriod(</b>CTimeKey &<i>tStartTime</i>,CTimeKey &<i>tMaxTime</i>,CTimeKey &<i>tStopTime</i><b>)</b> CONST<br>CTimeSpan <b>GetPeriodDuration()</b> CONST<br>CTimeKey <b>GetStartTime()</b> CONST<br>CTimeKey <b>GetMaximumTime()</b> CONST<br>CTimeKey <b>GetStopTime()</b> CONST<br>VOID <b>GetDirection(</b>PassPhase <i>nPhase</i>,double &<i>fAzimuth</i>,double &<i>fElevation</i><b>)</b> CONST<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The argument <i>nPhase</i> can have one of the following values: 'Start' (=0), 'Maximum' (=1) or 'End' (=2).</div></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CSpacecraftInterlinks</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing a collection of 'CSpacecraftInterlink' items.<br>Consult the <i>Microsoft® Foundation Class</i> (MFC) documentation (see the 'CPtrArray' class).</p></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CSpacecraftInterlink</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing the properties of a spacecraft interlink.<br>The following member functions are available:</p><div style="margin-left: 4px; margin-top: 2px; margin-right: 4px; margin-bottom: 1px">VOID <b>SetName(</b>LPCTSTR <i>pszName</i><b>)</b><br>CString <b>GetName()</b> CONST<br>VOID <b>SetSpacecraftA(</b>LPCTSTR <i>pszName</i>,UINT <i>nNumber</i><b>)</b><br>CString <b>GetSpacecraftA(</b>UINT &<i>nNumber</i><b>)</b> CONST<br>CString <b>GetSpacecraftA()</b> CONST<br>VOID <b>SetSpacecraftVia(</b>LPCTSTR <i>pszName</i>,UINT <i>nNumber</i><b>)</b><br>CString <b>GetSpacecraftVia(</b>UINT &<i>nNumber</i><b>)</b> CONST<br>CString <b>GetSpacecraftVia()</b> CONST<br>VOID <b>SetSpacecraftB(</b>LPCTSTR <i>pszName</i>,UINT <i>nNumber</i><b>)</b><br>CString <b>GetSpacecraftB(</b>UINT &<i>nNumber</i><b>)</b> CONST<br>CString <b>GetSpacecraftB()</b> CONST<br>VOID <b>SetTimeInterval(</b>CONST CTimeKey &<i>tStartTime</i>,CONST CTimeSpan &<i>tDuration</i><b>)</b><br>BOOL <b>GetTimeInterval(</b>CTimeKey &<i>tStartTime</i>,CTimeSpan &<i>tDuration</i><b>)</b> CONST<br>INT <b>GetLinkPeriods(</b>CSpacecraftInterlinkPeriods &<i>pPeriods</i><b>)</b> CONST<br>VOID <b>Enable(</b>BOOL <i>bEnable</i>=TRUE<b>)</b><br>BOOL <b>IsEnabled()</b> CONST</div></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CSpacecraftInterlinkPeriods</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing a collection of 'CSpacecraftInterlinkPeriod' items.<br>Consult the <i>Microsoft® Foundation Class</i> (MFC) documentation (see the 'CPtrArray' class).</p></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CSpacecraftInterlinkPeriod</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing the properties of a spacecraft interlink period.<br>The following member functions are available:</p><div style="margin-left: 4px; margin-top: 2px; margin-right: 4px; margin-bottom: 1px">BOOL <b>GetPeriod(</b>CTimeKey &<i>tStartTime</i>,CTimeKey &<i>tStopTime</i><b>)</b> CONST<br>CTimeSpan <b>GetPeriodDuration()</b> CONST<br>CTimeKey <b>GetStartTime()</b> CONST<br>CTimeKey <b>GetStopTime()</b> CONST<br>VOID <b>GetDirection(</b>InterlinkOrigin <i>nOrigin</i>,InterlinkPhase <i>nPhase</i>,double &<i>fAzimuth</i>,double &<i>fElevation</i><b>)</b> CONST<br><img src="images/note.gif" alt="" style="margin-top: 4px; margin-right: 4px;">Note:<br>The argument <i>nOrigin</i> can have one of the following values: 'SpacecraftA' (=0) or 'SpacecraftB' (=1).<br><i>nPhase</i> can be either 'Start' (=0) or 'End' (=1).</div></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CString</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing a string.<br>Consult the <i>Microsoft® Foundation Class</i> (MFC) documentation.</p></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CTimeTag<br>TIMETAG</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing an absolute time in microseconds since January 1, 1970.<br>Consult the <i>Microsoft® Foundation Class</i> (MFC) documentation (see the 'CTime' class).</p></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CTimeKey<br>TIMEKEY</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing an absolute time in seconds since January 1, 1970.<br>Consult the <i>Microsoft® Foundation Class</i> (MFC) documentation (see the 'CTime' class).</p></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CTimeSpan</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing a time interval in seconds.<br>Consult the <i>Microsoft® Foundation Class</i> (MFC) documentation.</p></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CRect</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing a rectangle.<br>Consult the <i>Microsoft® Foundation Class</i> (MFC) documentation.</p></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CPoint</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing a 2-dimensional point.<br>Consult the <i>Microsoft® Foundation Class</i> (MFC) documentation.</p></td>
					</tr>
					<tr>
						<td width="125" class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4;">CSize</p></td>
						<td class="StandardTableItemTextStyle" bordercolor="#072C61" valign="top"><p style="margin: 1 4">A class representing a 2-dimensional size.<br>Consult the <i>Microsoft® Foundation Class</i> (MFC) documentation.</p></td>
					</tr>
				</table>
			</li>
			<li>
				<p style="margin-top: 15px; margin-bottom: 2px;">4. <a name="Samples">Samples</a></p>
				<div style="padding-left: 5px; padding-top: 5px; padding-right: 5px; padding-bottom: 5px; border: 1px solid #9BAFDE; background: #D7E7FE;">
					<span class="MDLKeyword">MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'RKTS Switch'</span><br>PARAMETERS&nbsp;&nbsp;<span style="color: green;">S351</span>,<span style="color: green;">S352</span>;<br>BEGIN<br><span class="MDLCode">&nbsp;&nbsp;<b>if</b> <b>(!GetRawValue(</b>S351<b>)</b> &amp;&amp; <b>GetRawValue(</b>S352<b>))</b> <b>Pos1()</b>;<br>&nbsp;&nbsp;<b>else if</b> <b>(GetRawValue(</b>S351<b>)</b> &amp;&amp; !<b>GetRawValue(</b>S352<b>))</b> <b>Pos3()</b>;<br>&nbsp;&nbsp;<b>else</b> <b>Broken()</b>;</span><br>END<br><br>MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'OBS MODE Text'</span><br>PARAMETERS&nbsp;&nbsp;<span style="color: green;">G201</span>;<br>BEGIN<br><span class="MDLCode">&nbsp;&nbsp;<b>SetText(</b>G201<b>)</b>;</span><br>END<br><br>MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'BEACON A'</span><br>PARAMETERS&nbsp;&nbsp;<span style="color: green;">G217</span>;<br>BEGIN<br><span class="MDLCode">&nbsp;&nbsp;<b>if</b> <b>(GetStatus(</b>G217<b>)</b> &amp; TMPARAMETER_STATUS_VALID)<br>&nbsp;&nbsp;<b>{</b><br>&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(!GetRawValue(</b>G217<b>))</b> <b>SetInteriorColor(</b>RGB(255,255,255)<b>)</b>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b> <b>SetInteriorColor(</b>RGB(0,128,0)<b>)</b>;<br>&nbsp;&nbsp;<b>}</b><br>&nbsp;&nbsp;<b>else</b> <b>SetInteriorColor(</b>RGB(255,255,255)<b>)</b>;</span><br>END<br><br>MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'POINTER'</span><br>PARAMETERS&nbsp;&nbsp;<span style="color: green;">S112</span>;<br>BEGIN<br><span class="MDLCode">&nbsp;&nbsp;<b>if</b> <b>(</b>S112 &gt; 10<b>)</b> <b>Rotate(</b>10.0<b>)</b>;<br>&nbsp;&nbsp;<b>else</b> <b>Rotate(</b>-10.0<b>)</b>;</span><br>END</span>
				</div>
			</li>
			<li>
				<p class="StandardTableItemTextStyle" style="margin-top: 6px; margin-bottom: 0px;">The following sample illustrates the use of the satellite tracking, pass &amp; interlink functions:</p>
				<img src="images/mmdsatellitesinterface.jpg" style="margin-left: auto; margin-top: 4px; margin-right: auto; margin-bottom: 4px; display: block; border: 1px solid #072C61" />
				<div style="padding-left: 5px; padding-top: 5px; padding-right: 5px; padding-bottom: 5px; border: 1px solid #9BAFDE; background: #D7E7FE;">
					<span class="MDLKeyword">MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'Current Time (UTC)'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(GetTMUnitTime()</b> > 0<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(GetTMUnitTime().FormatGmt(</b>TEXT("%Y.%j.%H:%M:%S UTC")<b>))</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ISS Longitude'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fSpeed;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fAltitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLatitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLongitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraft&nbsp;&nbsp;cSpacecraft;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetNumber(</b>25544<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetName(</b>TEXT("ISS (ZAYRA)")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftOrbit(</b>&cSpacecraft,<b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>cSpacecraft.<b>GetOrbitPosition(</b>fLongitude,fLatitude,fAltitude,fSpeed<b>)</b> == <b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(ConvertToText(</b>fLongitude,6<b>)</b>+TEXT(" deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xx deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xx deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ISS Latitude'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fSpeed;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fAltitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLatitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLongitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraft&nbsp;&nbsp;cSpacecraft;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetNumber(</b>25544<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetName(</b>TEXT("ISS (ZAYRA)")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftOrbit(</b>&cSpacecraft,<b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>cSpacecraft.<b>GetOrbitPosition(</b>fLongitude,fLatitude,fAltitude,fSpeed<b>)</b> == <b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(ConvertToText(</b>fLatitude,6<b>)</b>+TEXT(" deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xx deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xx deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ISS Altitude'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fSpeed;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fAltitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLatitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLongitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraft&nbsp;&nbsp;cSpacecraft;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetNumber(</b>25544<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetName(</b>TEXT("ISS (ZAYRA)")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftOrbit(</b>&cSpacecraft,<b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>cSpacecraft.<b>GetOrbitPosition(</b>fLongitude,fLatitude,fAltitude,fSpeed<b>)</b> == <b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(ConvertToText(</b>fAltitude,6<b>)</b>+TEXT(" km")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xxx km")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xxx km")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ISS Velocity'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fSpeed;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fAltitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLatitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLongitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraft&nbsp;&nbsp;cSpacecraft;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetNumber(</b>25544<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetName(</b>TEXT("ISS (ZAYRA)")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftOrbit(</b>&cSpacecraft,<b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>cSpacecraft.<b>GetOrbitPosition(</b>fLongitude,fLatitude,fAltitude,fSpeed<b>)</b> == <b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(ConvertToText(</b>fSpeed,6<b>)</b>+TEXT(" km/s")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xxx km/s")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xxx km/s")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'Hubble Longitude'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fSpeed;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fAltitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLatitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLongitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraft&nbsp;&nbsp;cSpacecraft;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetNumber(</b>20580<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetName(</b>TEXT("Hubble")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftOrbit(</b>&cSpacecraft,<b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>cSpacecraft.<b>GetOrbitPosition(</b>fLongitude,fLatitude,fAltitude,fSpeed<b>)</b> == <b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(ConvertToText(</b>fLongitude,6<b>)</b>+TEXT(" deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xx deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xx deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'Hubble Latitude'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fSpeed;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fAltitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLatitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLongitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraft&nbsp;&nbsp;cSpacecraft;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetNumber(</b>20580<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetName(</b>TEXT("Hubble")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftOrbit(</b>&cSpacecraft,<b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>cSpacecraft.<b>GetOrbitPosition(</b>fLongitude,fLatitude,fAltitude,fSpeed<b>)</b> == <b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(ConvertToText(</b>fLatitude,6<b>)</b>+TEXT(" deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xx deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xx deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'Hubble Altitude'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fSpeed;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fAltitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLatitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLongitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraft&nbsp;&nbsp;cSpacecraft;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetNumber(</b>20580<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetName(</b>TEXT("Hubble")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftOrbit(</b>&cSpacecraft,<b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>cSpacecraft.<b>GetOrbitPosition(</b>fLongitude,fLatitude,fAltitude,fSpeed<b>)</b> == <b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(ConvertToText(</b>fAltitude,6<b>)</b>+TEXT(" km")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xxx km")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xxx km")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'Hubble Velocity'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fSpeed;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fAltitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLatitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLongitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraft&nbsp;&nbsp;cSpacecraft;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetNumber(</b>20580<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetName(</b>TEXT("Hubble")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftOrbit(</b>&cSpacecraft,<b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>cSpacecraft.<b>GetOrbitPosition(</b>fLongitude,fLatitude,fAltitude,fSpeed<b>)</b> == <b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(ConvertToText(</b>fSpeed,6<b>)</b>+TEXT(" km/s")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xxx km/s")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xxx km/s")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ARTEMIS Longitude'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fSpeed;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fAltitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLatitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLongitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraft&nbsp;&nbsp;cSpacecraft;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetNumber(</b>26863<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetName(</b>TEXT("ARTEMIS")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftOrbit(</b>&cSpacecraft,<b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>cSpacecraft.<b>GetOrbitPosition(</b>fLongitude,fLatitude,fAltitude,fSpeed<b>)</b> == <b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(ConvertToText(</b>fLongitude,6<b>)</b>+TEXT(" deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xx deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xx deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ARTEMIS Latitude'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fSpeed;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fAltitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLatitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLongitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraft&nbsp;&nbsp;cSpacecraft;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetNumber(</b>26863<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetName(</b>TEXT("ARTEMIS")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftOrbit(</b>&cSpacecraft,<b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>cSpacecraft.<b>GetOrbitPosition(</b>fLongitude,fLatitude,fAltitude,fSpeed<b>)</b> == <b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(ConvertToText(</b>fLatitude,6<b>)</b>+TEXT(" deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xx deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xx deg")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ARTEMIS Altitude'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fSpeed;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fAltitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLatitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLongitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraft&nbsp;&nbsp;cSpacecraft;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetNumber(</b>26863<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetName(</b>TEXT("ARTEMIS")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftOrbit(</b>&cSpacecraft,<b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>cSpacecraft.<b>GetOrbitPosition(</b>fLongitude,fLatitude,fAltitude,fSpeed<b>)</b> == <b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(ConvertToText(</b>fAltitude,6<b>)</b>+TEXT(" km")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xxx km")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xxx km")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ARTEMIS Velocity'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fSpeed;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fAltitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLatitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;fLongitude;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraft&nbsp;&nbsp;cSpacecraft;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetNumber(</b>26863<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;cSpacecraft.<b>SetName(</b>TEXT("ARTEMIS")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftOrbit(</b>&cSpacecraft,<b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>cSpacecraft.<b>GetOrbitPosition(</b>fLongitude,fLatitude,fAltitude,fSpeed<b>)</b> == <b>GetTMUnitTime()</b>.GetTimeInSeconds()<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(ConvertToText(</b>fSpeed,6<b>)</b>+TEXT(" km/s")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xxx km/s")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("xxx.xxx km/s")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ISS Pass Start Time'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPass&nbsp;&nbsp;*pPass;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPasses&nbsp;&nbsp;pPasses;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassPeriod&nbsp;&nbsp;*pPassPeriod;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassPeriods&nbsp;&nbsp;pPassPeriods;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassLocation&nbsp;&nbsp;*pPassLocation;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassLocations&nbsp;&nbsp;pPassLocations;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tPassStartTime=0;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tPassStopTime=0;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(GetTMUnitTime()</b>.GetTimeInSeconds()&nbsp;&gt;&nbsp;tPassStopTime.GetTime())&nbsp;<span style="color: green;">// Prevent unnecessary calculations</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPassLocation = new CSpacecraftPassLocation)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetName(</b>TEXT("Zurich")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetLongitude(</b>8.5500025<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetLatitude(</b>47.367347<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetAltitude(</b>0.425<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>pPassLocations.<b>Add(</b>pPassLocation<b>)</b>&nbsp;&ge;&nbsp;0<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPass = new CSpacecraftPass)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetName(</b>TEXT("ISS Pass over Zurich")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetSpacecraft(</b>TEXT("ISS (ZAYRA)"),25544<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetLocations(</b>pPassLocations<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetTimeInterval(GetTMUnitTime()</b>.GetTimeInSeconds(),86400<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>Enable()</b>;&nbsp;<span style="color: green;">// Enable the calculation of the pass period</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>pPasses.<b>Add(</b>pPass<b>)</b>&nbsp;&ge;&nbsp;0<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftPasses(</b>pPasses<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPass = pPasses.<b>GetAt(</b>0<b>)</b>)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPassLocation = (pPass-><b>GetLocations(</b>pPassLocations<b>)</b>&nbsp;&gt;&nbsp;0<b>)</b> ? pPassLocations.<b>GetAt(</b>0<b>)</b>:(CSpacecraftPassLocation *) NULL)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPassPeriod = (pPassLocation-><b>GetLinkPeriods(</b>pPassPeriods<b>)</b>&nbsp;&gt;&nbsp;0<b>)</b> ? pPassPeriods.<b>GetAt(</b>0<b>)</b>:(CSpacecraftPassPeriod *) NULL)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>(tPassStartTime = pPassPeriod-><b>GetStartTime()</b>).FormatGmt(TEXT("%Y.%j.%H:%M:%S UTC"))<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tPassStopTime = pPassPeriod-><b>GetStopTime()</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>delete</b> pPass;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>delete</b> pPassLocation;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ISS Pass End Time'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPass&nbsp;&nbsp;*pPass;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPasses&nbsp;&nbsp;pPasses;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassPeriod&nbsp;&nbsp;*pPassPeriod;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassPeriods&nbsp;&nbsp;pPassPeriods;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassLocation&nbsp;&nbsp;*pPassLocation;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassLocations&nbsp;&nbsp;pPassLocations;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tPassStartTime=0;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tPassStopTime=0;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(GetTMUnitTime()</b>.GetTimeInSeconds()&nbsp;&gt;&nbsp;tPassStopTime.GetTime())&nbsp;<span style="color: green;">// Prevent unnecessary calculations</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPassLocation = new CSpacecraftPassLocation)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetName(</b>TEXT("Zurich")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetLongitude(</b>8.5500025<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetLatitude(</b>47.367347<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetAltitude(</b>0.425<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>pPassLocations.<b>Add(</b>pPassLocation<b>)</b>&nbsp;&ge;&nbsp;0<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPass = new CSpacecraftPass)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetName(</b>TEXT("ISS Pass over Zurich")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetSpacecraft(</b>TEXT("ISS (ZAYRA)"),25544<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetLocations(</b>pPassLocations<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetTimeInterval(GetTMUnitTime()</b>.GetTimeInSeconds(),86400<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>Enable()</b>;&nbsp;<span style="color: green;">// Enable the calculation of the pass period</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>pPasses.<b>Add(</b>pPass<b>)</b>&nbsp;&ge;&nbsp;0<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftPasses(</b>pPasses<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPass = pPasses.<b>GetAt(</b>0<b>)</b>)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPassLocation = (pPass-><b>GetLocations(</b>pPassLocations<b>)</b>&nbsp;&gt;&nbsp;0<b>)</b> ? pPassLocations.<b>GetAt(</b>0<b>)</b>:(CSpacecraftPassLocation *) NULL)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPassPeriod = (pPassLocation-><b>GetLinkPeriods(</b>pPassPeriods<b>)</b>&nbsp;&gt;&nbsp;0<b>)</b> ? pPassPeriods.<b>GetAt(</b>0<b>)</b>:(CSpacecraftPassPeriod *) NULL)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tPassStartTime = pPassPeriod-><b>GetStartTime()</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>(tPassStopTime = pPassPeriod-><b>GetStopTime()</b>).FormatGmt(TEXT("%Y.%j.%H:%M:%S UTC"))<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>delete</b> pPass;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>delete</b> pPassLocation;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'Hubble Pass Start Time'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPass&nbsp;&nbsp;*pPass;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPasses&nbsp;&nbsp;pPasses;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassPeriod&nbsp;&nbsp;*pPassPeriod;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassPeriods&nbsp;&nbsp;pPassPeriods;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassLocation&nbsp;&nbsp;*pPassLocation;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassLocations&nbsp;&nbsp;pPassLocations;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tPassStartTime=0;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tPassStopTime=0;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(GetTMUnitTime()</b>.GetTimeInSeconds()&nbsp;&gt;&nbsp;tPassStopTime.GetTime())&nbsp;<span style="color: green;">// Prevent unnecessary calculations</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPassLocation = new CSpacecraftPassLocation)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetName(</b>TEXT("Zurich")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetLongitude(</b>8.5500025<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetLatitude(</b>47.367347<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetAltitude(</b>0.425<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>pPassLocations.<b>Add(</b>pPassLocation<b>)</b>&nbsp;&ge;&nbsp;0<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPass = new CSpacecraftPass)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetName(</b>TEXT("ISS Pass over Zurich")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetSpacecraft(</b>TEXT("Hubble"),20580<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetLocations(</b>pPassLocations<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetTimeInterval(GetTMUnitTime()</b>.GetTimeInSeconds(),86400<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>Enable()</b>;&nbsp;<span style="color: green;">// Enable the calculation of the pass period</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>pPasses.<b>Add(</b>pPass<b>)</b>&nbsp;&ge;&nbsp;0<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftPasses(</b>pPasses<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPass = pPasses.<b>GetAt(</b>0<b>)</b>)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPassLocation = (pPass-><b>GetLocations(</b>pPassLocations<b>)</b>&nbsp;&gt;&nbsp;0<b>)</b> ? pPassLocations.<b>GetAt(</b>0<b>)</b>:(CSpacecraftPassLocation *) NULL)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPassPeriod = (pPassLocation-><b>GetLinkPeriods(</b>pPassPeriods<b>)</b>&nbsp;&gt;&nbsp;0<b>)</b> ? pPassPeriods.<b>GetAt(</b>0<b>)</b>:(CSpacecraftPassPeriod *) NULL)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>(tPassStartTime = pPassPeriod-><b>GetStartTime()</b>).FormatGmt(TEXT("%Y.%j.%H:%M:%S UTC"))<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tPassStopTime = pPassPeriod-><b>GetStopTime()</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>delete</b> pPass;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>delete</b> pPassLocation;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'Hubble Pass End Time'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPass&nbsp;&nbsp;*pPass;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPasses&nbsp;&nbsp;pPasses;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassPeriod&nbsp;&nbsp;*pPassPeriod;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassPeriods&nbsp;&nbsp;pPassPeriods;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassLocation&nbsp;&nbsp;*pPassLocation;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftPassLocations&nbsp;&nbsp;pPassLocations;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tPassStartTime=0;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tPassStopTime=0;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(GetTMUnitTime()</b>.GetTimeInSeconds()&nbsp;&gt;&nbsp;tPassStopTime.GetTime())&nbsp;<span style="color: green;">// Prevent unnecessary calculations</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPassLocation = new CSpacecraftPassLocation)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetName(</b>TEXT("Zurich")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetLongitude(</b>8.5500025<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetLatitude(</b>47.367347<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPassLocation-><b>SetAltitude(</b>0.425<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>pPassLocations.<b>Add(</b>pPassLocation<b>)</b>&nbsp;&ge;&nbsp;0<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPass = new CSpacecraftPass)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetName(</b>TEXT("ISS Pass over Zurich")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetSpacecraft(</b>TEXT("Hubble"),20580<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetLocations(</b>pPassLocations<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>SetTimeInterval(GetTMUnitTime()</b>.GetTimeInSeconds(),86400<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pPass-><b>Enable()</b>;&nbsp;<span style="color: green;">// Enable the calculation of the pass period</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>pPasses.<b>Add(</b>pPass<b>)</b>&nbsp;&ge;&nbsp;0<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftPasses(</b>pPasses<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPass = pPasses.<b>GetAt(</b>0<b>)</b>)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPassLocation = (pPass-><b>GetLocations(</b>pPassLocations<b>)</b>&nbsp;&gt;&nbsp;0<b>)</b> ? pPassLocations.<b>GetAt(</b>0<b>)</b>:(CSpacecraftPassLocation *) NULL)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pPassPeriod = (pPassLocation-><b>GetLinkPeriods(</b>pPassPeriods<b>)</b>&nbsp;&gt;&nbsp;0<b>)</b> ? pPassPeriods.<b>GetAt(</b>0<b>)</b>:(CSpacecraftPassPeriod *) NULL)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tPassStartTime = pPassPeriod-><b>GetStartTime()</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>(tPassStopTime = pPassPeriod-><b>GetStopTime()</b>).FormatGmt(TEXT("%Y.%j.%H:%M:%S UTC"))<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>delete</b> pPass;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>delete</b> pPassLocation;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ISS-ARTEMIS Interlink Start Time'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlink&nbsp;&nbsp;*pInterlink;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinks&nbsp;&nbsp;pInterlinks;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinkPeriod&nbsp;&nbsp;*pInterlinkPeriod;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinkPeriods&nbsp;&nbsp;pInterlinkPeriods;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tInterlinkStartTime=0;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tInterlinkStopTime=0;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(GetTMUnitTime()</b>.GetTimeInSeconds()&nbsp;&gt;&nbsp;tInterlinkStopTime.GetTime())&nbsp;<span style="color: green;">// Prevent unnecessary calculations</span>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlink = new CSpacecraftInterlink)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetName(</b>TEXT("ISS-ARTEMIS Interlink")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetSpacecraftA(</b>TEXT("ISS (ZAYRA)"),25544<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetSpacecraftB(</b>TEXT("ARTEMIS"),26863<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetTimeInterval(GetTMUnitTime()</b>.GetTimeInSeconds(),86400<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>Enable()</b>;&nbsp;<span style="color: green;">// Enable the calculation of the interlink session</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>pInterlinks.<b>Add(</b>pInterlink<b>)</b>&nbsp;&ge;&nbsp;0<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftInterlinks(</b>pInterlinks<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlink = pInterlinks.<b>GetAt(</b>0<b>)</b>)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlinkPeriod = (pInterlink-><b>GetLinkPeriods(</b>pInterlinkPeriods<b>)</b>&nbsp;&gt;&nbsp;0) ? pInterlinkPeriods.<b>GetAt(</b>0<b>)</b>:(CSpacecraftInterlinkPeriod *) NULL)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>(tInterlinkStartTime = pInterlinkPeriod-><b>GetStartTime()</b>).FormatGmt(TEXT("%Y.%j.%H:%M:%S UTC"))<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tInterlinkStopTime = pInterlinkPeriod-><b>GetStopTime()</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>delete</b> pInterlink;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ISS-ARTEMIS Interlink End Time'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlink&nbsp;&nbsp;*pInterlink;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinks&nbsp;&nbsp;pInterlinks;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinkPeriod&nbsp;&nbsp;*pInterlinkPeriod;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinkPeriods&nbsp;&nbsp;pInterlinkPeriods;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tInterlinkStartTime=0;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tInterlinkStopTime=0;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(GetTMUnitTime()</b>.GetTimeInSeconds()&nbsp;&gt;&nbsp;tInterlinkStopTime.GetTime())&nbsp;<span style="color: green;">// Prevent unnecessary calculations</span>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlink = new CSpacecraftInterlink)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetName(</b>TEXT("ISS-ARTEMIS Interlink")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetSpacecraftA(</b>TEXT("ISS (ZAYRA)"),25544<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetSpacecraftB(</b>TEXT("ARTEMIS"),26863<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetTimeInterval(GetTMUnitTime()</b>.GetTimeInSeconds(),86400<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>Enable()</b>;&nbsp;<span style="color: green;">// Enable the calculation of the interlink session</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>pInterlinks.<b>Add(</b>pInterlink<b>)</b>&nbsp;&ge;&nbsp;0<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftInterlinks(</b>pInterlinks<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlink = pInterlinks.<b>GetAt(</b>0<b>)</b>)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlinkPeriod = (pInterlink-><b>GetLinkPeriods(</b>pInterlinkPeriods<b>)</b>&nbsp;&gt;&nbsp;0) ? pInterlinkPeriods.<b>GetAt(</b>0<b>)</b>:(CSpacecraftInterlinkPeriod *) NULL)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tInterlinkStartTime = pInterlinkPeriod-><b>GetStartTime()</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>(tInterlinkStopTime = pInterlinkPeriod-><b>GetStopTime()</b>).FormatGmt(TEXT("%Y.%j.%H:%M:%S UTC"))<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>delete</b> pInterlink;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ARTEMIS-Hubble Interlink Start Time'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlink&nbsp;&nbsp;*pInterlink;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinks&nbsp;&nbsp;pInterlinks;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinkPeriod&nbsp;&nbsp;*pInterlinkPeriod;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinkPeriods&nbsp;&nbsp;pInterlinkPeriods;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tInterlinkStartTime=0;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tInterlinkStopTime=0;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(GetTMUnitTime()</b>.GetTimeInSeconds()&nbsp;&gt;&nbsp;tInterlinkStopTime.GetTime())&nbsp;<span style="color: green;">// Prevent unnecessary calculations</span>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlink = new CSpacecraftInterlink)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetName(</b>TEXT("ARTEMIS-Hubble Interlink")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetSpacecraftA(</b>TEXT("ARTEMIS"),26863<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetSpacecraftB(</b>TEXT("Hubble"),20580<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetTimeInterval(GetTMUnitTime()</b>.GetTimeInSeconds(),86400<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>Enable()</b>;&nbsp;<span style="color: green;">// Enable the calculation of the interlink session</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>pInterlinks.<b>Add(</b>pInterlink<b>)</b>&nbsp;&ge;&nbsp;0<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftInterlinks(</b>pInterlinks<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlink = pInterlinks.<b>GetAt(</b>0<b>)</b>)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlinkPeriod = (pInterlink-><b>GetLinkPeriods(</b>pInterlinkPeriods<b>)</b>&nbsp;&gt;&nbsp;0) ? pInterlinkPeriods.<b>GetAt(</b>0<b>)</b>:(CSpacecraftInterlinkPeriod *) NULL)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>(tInterlinkStartTime = pInterlinkPeriod-><b>GetStartTime()</b>).FormatGmt(TEXT("%Y.%j.%H:%M:%S UTC"))<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tInterlinkStopTime = pInterlinkPeriod-><b>GetStopTime()</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>delete</b> pInterlink;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ARTEMIS-Hubble Interlink End Time'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlink&nbsp;&nbsp;*pInterlink;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinks&nbsp;&nbsp;pInterlinks;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinkPeriod&nbsp;&nbsp;*pInterlinkPeriod;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinkPeriods&nbsp;&nbsp;pInterlinkPeriods;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tInterlinkStartTime=0;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tInterlinkStopTime=0;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(GetTMUnitTime()</b>.GetTimeInSeconds()&nbsp;&gt;&nbsp;tInterlinkStopTime.GetTime())&nbsp;<span style="color: green;">// Prevent unnecessary calculations</span>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlink = new CSpacecraftInterlink)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetName(</b>TEXT("ARTEMIS-Hubble Interlink")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetSpacecraftA(</b>TEXT("ARTEMIS"),26863<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetSpacecraftB(</b>TEXT("Hubble"),20580<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetTimeInterval(GetTMUnitTime()</b>.GetTimeInSeconds(),86400<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>Enable()</b>;&nbsp;<span style="color: green;">// Enable the calculation of the interlink session</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>pInterlinks.<b>Add(</b>pInterlink<b>)</b>&nbsp;&ge;&nbsp;0<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftInterlinks(</b>pInterlinks<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlink = pInterlinks.<b>GetAt(</b>0<b>)</b>)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlinkPeriod = (pInterlink-><b>GetLinkPeriods(</b>pInterlinkPeriods<b>)</b>&nbsp;&gt;&nbsp;0) ? pInterlinkPeriods.<b>GetAt(</b>0<b>)</b>:(CSpacecraftInterlinkPeriod *) NULL)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tInterlinkStartTime = pInterlinkPeriod-><b>GetStartTime()</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>(tInterlinkStopTime = pInterlinkPeriod-><b>GetStopTime()</b>).FormatGmt(TEXT("%Y.%j.%H:%M:%S UTC"))<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>delete</b> pInterlink;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetText(</b>TEXT("YYYY.ddd.HH:MM:SS UTC")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ISS-ARTEMIS Link Line'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlink&nbsp;&nbsp;*pInterlink;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinks&nbsp;&nbsp;pInterlinks;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinkPeriod&nbsp;&nbsp;*pInterlinkPeriod;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinkPeriods&nbsp;&nbsp;pInterlinkPeriods;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tInterlinkStartTime=0;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tInterlinkStopTime=0;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(GetTMUnitTime()</b>.GetTimeInSeconds()&nbsp;&gt;&nbsp;tInterlinkStopTime.GetTime())&nbsp;<span style="color: green;">// Prevent unnecessary calculations</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlink = new CSpacecraftInterlink)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetName(</b>TEXT("ISS-ARTEMIS Interlink")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetSpacecraftA(</b>TEXT("ISS (ZAYRA)"),25544<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetSpacecraftB(</b>TEXT("ARTEMIS"),26863<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetTimeInterval(GetTMUnitTime()</b>.GetTimeInSeconds(),86400<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>Enable()</b>;&nbsp;<span style="color: green;">// Enable the calculation of the interlink session</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>pInterlinks.<b>Add(</b>pInterlink<b>)</b>&nbsp;&ge;&nbsp;0<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftInterlinks(</b>pInterlinks<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlink = pInterlinks.<b>GetAt(</b>0<b>)</b>)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlinkPeriod = (pInterlink-><b>GetLinkPeriods(</b>pInterlinkPeriods<b>)</b>&nbsp;&gt;&nbsp;0) ? pInterlinkPeriods.<b>GetAt(</b>0<b>)</b>:(CSpacecraftInterlinkPeriod *) NULL)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tInterlinkStartTime = pInterlinkPeriod-><b>GetStartTime()</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tInterlinkStopTime = pInterlinkPeriod-><b>GetStopTime()</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetColor(</b>RGB(192,192,192)<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetColor(</b>RGB(192,192,192)<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetColor(</b>RGB(192,192,192)<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetColor(</b>RGB(192,192,192)<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>delete</b> pInterlink;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetColor(</b>RGB(192,192,192)<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>SetColor((GetTMUnitTime()</b>.GetTimeInSeconds()&nbsp;&ge;&nbsp;tInterlinkStartTime.<b>GetTime()</b>&nbsp;&amp;&amp;&nbsp;<b>GetTMUnitTime()</b>.GetTimeInSeconds()&nbsp;&le;&nbsp;tInterlinkStopTime.<b>GetTime()</b>&nbsp;&amp;&amp;&nbsp;tInterlinkStartTime&nbsp;&gt;&nbsp;0) ? RGB(255,0,0):RGB(192,192,192)<b>)</b>;<br></span>
						END<br><br>
						MIMICS OBJECT&nbsp;&nbsp;<span style="color: red;">'ARTEMIS-Hubble Link Line'</span><br>
						BEGIN<br>
						<span class="MDLCode">&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlink&nbsp;&nbsp;*pInterlink;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinks&nbsp;&nbsp;pInterlinks;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinkPeriod&nbsp;&nbsp;*pInterlinkPeriod;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;CSpacecraftInterlinkPeriods&nbsp;&nbsp;pInterlinkPeriods;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tInterlinkStartTime=0;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;CTimeKey&nbsp;&nbsp;tInterlinkStopTime=0;<br><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(GetTMUnitTime()</b>.GetTimeInSeconds()&nbsp;&gt;&nbsp;tInterlinkStopTime.GetTime())&nbsp;<span style="color: green;">// Prevent unnecessary calculations</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlink = new CSpacecraftInterlink)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetName(</b>TEXT("ARTEMIS-Hubble Interlink")<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetSpacecraftA(</b>TEXT("ARTEMIS"),26863<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetSpacecraftB(</b>TEXT("Hubble"),20580<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>SetTimeInterval(GetTMUnitTime()</b>.GetTimeInSeconds(),86400<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pInterlink-><b>Enable()</b>;&nbsp;<span style="color: green;">// Enable the calculation of the interlink session</span><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>pInterlinks.<b>Add(</b>pInterlink<b>)</b>&nbsp;&ge;&nbsp;0<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(CalculateSpacecraftInterlinks(</b>pInterlinks<b>))</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlink = pInterlinks.<b>GetAt(</b>0<b>)</b>)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>if</b> <b>(</b>(pInterlinkPeriod = (pInterlink-><b>GetLinkPeriods(</b>pInterlinkPeriods<b>)</b>&nbsp;&gt;&nbsp;0) ? pInterlinkPeriods.<b>GetAt(</b>0<b>)</b>:(CSpacecraftInterlinkPeriod *) NULL)<b>)</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tInterlinkStartTime = pInterlinkPeriod-><b>GetStartTime()</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tInterlinkStopTime = pInterlinkPeriod-><b>GetStopTime()</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetColor(</b>RGB(192,192,192)<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetColor(</b>RGB(192,192,192)<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetColor(</b>RGB(192,192,192)<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetColor(</b>RGB(192,192,192)<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>delete</b> pInterlink;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>else</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>{</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>SetColor(</b>RGB(192,192,192)<b>)</b>;<br>
						&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>}</b><br>
						&nbsp;&nbsp;&nbsp;&nbsp;<b>SetColor((GetTMUnitTime()</b>.GetTimeInSeconds()&nbsp;&ge;&nbsp;tInterlinkStartTime.<b>GetTime()</b>&nbsp;&amp;&amp;&nbsp;<b>GetTMUnitTime()</b>.GetTimeInSeconds()&nbsp;&le;&nbsp;tInterlinkStopTime.<b>GetTime()</b>&nbsp;&amp;&amp;&nbsp;tInterlinkStartTime&nbsp;&gt;&nbsp;0) ? RGB(255,0,0):RGB(192,192,192)<b>)</b>;<br></span>
						END<br>
					</span>
				</div>
			</li>
		</ul>
	</div>
	<img id="PageFooter" src="images/templatebottom.png" alt="" style="position: relative; left: -1px; top: 0px;">
</div>
</body>

</html>