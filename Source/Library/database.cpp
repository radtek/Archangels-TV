// DATABASE.CPP : Database Related Interface Definition.
//
// This is a part of the SatView(TM) spacecraft operating system.
// Copyright© 1992-2016 by BINARY SPACE, Switzerland.
// All rights reserved.
//
// This source code contains the definition of the database related
// interface.
//
/**********************************************************************
* Modifications:                                                     *
*====================================================================*
* Date       | Release | Comments                                    *
*------------|---------|---------------------------------------------*
* 1998/04/08 | 1.00.00 | Initial creation. [AW]                      *
**********************************************************************/

#include "SatView.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif



/////////////////////////////////////////////////////////////////////////////
// CDatabaseVersion

CDatabaseVersion::CDatabaseVersion() : CObject()
{
	return;
}

VOID CDatabaseVersion::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseVersion::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseVersion::SetDomain(LPCTSTR pszDomain)
{
	m_szDomain = pszDomain;
}

CString CDatabaseVersion::GetDomain() CONST
{
	return m_szDomain;
}

VOID CDatabaseVersion::SetComment(LPCTSTR pszComment)
{
	m_szComment = pszComment;
}

CString CDatabaseVersion::GetComment() CONST
{
	return m_szComment;
}

VOID CDatabaseVersion::SetRelease(LPCTSTR pszRelease)
{
	m_szRelease = pszRelease;
}

CString CDatabaseVersion::GetRelease() CONST
{
	return m_szRelease;
}

VOID CDatabaseVersion::SetIssue(LPCTSTR pszIssue)
{
	m_szIssue = pszIssue;
}

CString CDatabaseVersion::GetIssue() CONST
{
	return m_szIssue;
}

VOID CDatabaseVersion::Copy(CONST CDatabaseVersion *pVersion)
{
	m_szName = pVersion->m_szName;
	m_szDomain = pVersion->m_szDomain;
	m_szComment = pVersion->m_szComment;
	m_szRelease = pVersion->m_szRelease;
	m_szIssue = pVersion->m_szIssue;
}

BOOL CDatabaseVersion::Compare(CONST CDatabaseVersion *pVersion) CONST
{
	return((pVersion->m_szName == m_szName  &&  pVersion->m_szDomain == m_szDomain  &&  pVersion->m_szComment == m_szComment  &&  pVersion->m_szRelease == m_szRelease  &&  pVersion->m_szIssue == m_szIssue) ? TRUE : FALSE);
}

BOOL CDatabaseVersion::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDomain = (m_szDomain.GetLength() + 1)*sizeof(TCHAR);
	sData.cbComment = (m_szComment.GetLength() + 1)*sizeof(TCHAR);
	sData.cbRelease = (m_szRelease.GetLength() + 1)*sizeof(TCHAR);
	sData.cbIssue = (m_szIssue.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDomain + sData.cbComment + sData.cbRelease + sData.cbIssue)); nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDomain, sData.cbDomain);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDomain), (LPCTSTR)m_szComment, sData.cbComment);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbComment), (LPCTSTR)m_szRelease, sData.cbRelease);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbRelease), (LPCTSTR)m_szIssue, sData.cbIssue);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseVersion::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDomain + sData.cbComment + sData.cbRelease + sData.cbIssue && sData.cbName > 0 && sData.cbDomain > 0 && sData.cbComment > 0 && sData.cbRelease > 0 && sData.cbIssue > 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szDomain.GetBufferSetLength(STRINGCHARS(sData.cbDomain)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDomain));
		CopyMemory(m_szComment.GetBufferSetLength(STRINGCHARS(sData.cbComment)), nInfo.GetData() + (cbData = cbData + sData.cbDomain), STRINGBYTES(sData.cbComment));
		CopyMemory(m_szRelease.GetBufferSetLength(STRINGCHARS(sData.cbRelease)), nInfo.GetData() + (cbData = cbData + sData.cbComment), STRINGBYTES(sData.cbRelease));
		CopyMemory(m_szIssue.GetBufferSetLength(STRINGCHARS(sData.cbIssue)), nInfo.GetData() + (cbData = cbData + sData.cbRelease), STRINGBYTES(sData.cbIssue));
		m_szName.ReleaseBuffer();
		m_szDomain.ReleaseBuffer();
		m_szComment.ReleaseBuffer();
		m_szRelease.ReleaseBuffer();
		m_szIssue.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseVersions

CDatabaseVersions::CDatabaseVersions() : CPtrArray()
{
	return;
}

CDatabaseVersions::~CDatabaseVersions()
{
	RemoveAll();
}

INT CDatabaseVersions::Add(CDatabaseVersion *pVersion)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pVersion->GetName(), pVersion->GetDomain(), pVersion->GetRelease(), pVersion->GetIssue(), TRUE)) >= 0) InsertAt(nIndex, pVersion, 1);
	return nIndex;
}

INT CDatabaseVersions::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}
INT CDatabaseVersions::Find(LPCTSTR pszName, LPCTSTR pszDomain, LPCTSTR pszRelease, LPCTSTR pszIssue) CONST
{
	return FindIndex(pszName, pszDomain, pszRelease, pszIssue);
}

CDatabaseVersion *CDatabaseVersions::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseVersion *)CPtrArray::GetAt(nIndex) : (CDatabaseVersion *)NULL);
}

CDatabaseVersion *CDatabaseVersions::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseVersion *)CPtrArray::GetAt(nIndex) : (CDatabaseVersion *)NULL);
}

VOID CDatabaseVersions::RemoveAll()
{
	INT  nVersion;
	INT  nVersions;
	CDatabaseVersion  *pVersion;

	for (nVersion = 0, nVersions = (INT)GetSize(); nVersion < nVersions; nVersion++)
	{
		if ((pVersion = GetAt(nVersion))) delete pVersion;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseVersions::Copy(CONST CDatabaseVersions *pVersions)
{
	INT  nVersion;
	INT  nVersions;
	CDatabaseVersion  *pVersion;

	for (nVersion = 0, nVersions = (INT)pVersions->GetSize(), RemoveAll(); nVersion < nVersions; nVersion++)
	{
		if ((pVersion = new CDatabaseVersion))
		{
			pVersion->Copy(pVersions->GetAt(nVersion));
			InsertAt(nVersion, pVersion, 1);
			continue;
		}
		break;
	}
	return((nVersion == nVersions) ? TRUE : FALSE);
}

BOOL CDatabaseVersions::Compare(CONST CDatabaseVersions *pVersions) CONST
{
	INT  nVersion;
	INT  nVersions;
	CDatabaseVersion  *pVersion;

	for (nVersion = 0, nVersions = (pVersions->GetSize() == GetSize()) ? (INT)GetSize() : -1; nVersion < nVersions; nVersion++)
	{
		if ((pVersion = pVersions->GetAt(nVersion)) && Find(pVersion->GetName()) >= 0 && pVersion->Compare(GetAt(Find(pVersion->GetName())))) continue;
		break;
	}
	return((nVersion == nVersions) ? TRUE : FALSE);
}

BOOL CDatabaseVersions::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nVersion;
	INT  nVersions;
	CByteArray  nVersionsData;
	CDatabaseVersion  *pVersion;

	for (nVersion = 0, nVersions = (INT)GetSize(), nInfo.RemoveAll(); nVersion < nVersions; nVersion++)
	{
		if ((pVersion = GetAt(nVersion)) && pVersion->Map(nVersionsData, bBinary) && nInfo.Append(nVersionsData) >= 0) continue;
		break;
	}
	return((nVersion == nVersions) ? TRUE : FALSE);
}

BOOL CDatabaseVersions::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbVersion;
	INT  cbVersions;
	CByteArray  nVersionsData;
	CDatabaseVersion  *pVersion;

	for (cbVersions = 0, RemoveAll(); cbVersions < nInfo.GetSize(); cbVersions += cbVersion)
	{
		for (CopyMemory(&cbVersion, nInfo.GetData() + cbVersions, sizeof(cbVersion)), nVersionsData.SetSize(max(min(cbVersion, nInfo.GetSize() - cbVersions), 0)); nVersionsData.GetSize() >= 0; )
		{
			CopyMemory(nVersionsData.GetData(), nInfo.GetData() + cbVersions, nVersionsData.GetSize());
			break;
		}
		if ((pVersion = new CDatabaseVersion))
		{
			if (pVersion->Unmap(nVersionsData, bBinary) && Add(pVersion) >= 0) continue;
			delete pVersion;
		}
		break;
	}
	return((cbVersions == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseVersions::FindIndex(LPCTSTR pszName, LPCTSTR pszDomain, LPCTSTR pszRelease, LPCTSTR pszIssue, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nMinIndex;
	INT  nMaxIndex;
	CString  szSearchKey[2];
	CDatabaseVersion  *pVersion;

	for (nIndex = nMinIndex = (bInsert) ? (INT)GetSize() : 0, nMaxIndex = (lstrlen(pszName) > 0) ? (INT)GetSize() : -1, szSearchKey[0] = pszName, szSearchKey[0] += (!pszDomain) ? EMPTYSTRING : (CString(TAB) + pszDomain), szSearchKey[0] += (!pszRelease) ? EMPTYSTRING : (CString(TAB) + pszRelease), szSearchKey[0] += (!pszIssue) ? EMPTYSTRING : (CString(TAB) + pszIssue); nIndex < nMaxIndex; nIndex++)
	{
		if ((pVersion = GetAt(nIndex)))
		{
			szSearchKey[1] = pVersion->GetName();
			szSearchKey[1] += (!pszDomain) ? EMPTYSTRING : (CString(TAB) + pVersion->GetDomain());
			szSearchKey[1] += (!pszRelease) ? EMPTYSTRING : (CString(TAB) + pVersion->GetRelease());
			szSearchKey[1] += (!pszIssue) ? EMPTYSTRING : (CString(TAB) + pVersion->GetIssue());
			if (!szSearchKey[0].CompareNoCase(szSearchKey[1])) break;
		}
	}
	return(((bInsert || nIndex < nMaxIndex) && nMaxIndex >= 0) ? nIndex : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMPacketParameter

CDatabaseTMPacketParameter::CDatabaseTMPacketParameter() : CObject()
{
	m_nAttributes = 0;
	m_dwOccurrenceTimeOffset = 0;
	m_dwOccurrenceTimeInterval = 0;
	m_nOccurrenceInterval = 0;
	m_nOccurrenceCount = 0;
	m_nGroupParameters = 0;
	m_nGroupRepetitionCount = 0;
	m_nOccurrence = 0;
	m_nBytePos = 0;
	m_nBitPos = 0;
	m_nOffset = 0;
	m_nWidth = -1;
	m_nRef[0] = -1;
	m_nRef[1] = -1;
}

VOID CDatabaseTMPacketParameter::SetTag(LPCTSTR pszTag)
{
	m_szTag[0] = pszTag;
}

CString CDatabaseTMPacketParameter::GetTag() CONST
{
	return m_szTag[0];
}

VOID CDatabaseTMPacketParameter::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTMPacketParameter::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTMPacketParameter::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTMPacketParameter::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTMPacketParameter::SetBytePos(INT nPos)
{
	m_nBytePos = nPos;
}

INT CDatabaseTMPacketParameter::GetBytePos() CONST
{
	return m_nBytePos;
}

VOID CDatabaseTMPacketParameter::SetBitPos(INT nPos)
{
	m_nBitPos = nPos;
}

INT CDatabaseTMPacketParameter::GetBitPos() CONST
{
	return m_nBitPos;
}

VOID CDatabaseTMPacketParameter::SetWidth(INT nWidth)
{
	m_nWidth = nWidth;
}

INT CDatabaseTMPacketParameter::GetWidth() CONST
{
	return m_nWidth;
}

VOID CDatabaseTMPacketParameter::SetOffset(INT nOffset)
{
	m_nOffset = nOffset;
}

INT CDatabaseTMPacketParameter::GetOffset() CONST
{
	return m_nOffset;
}

VOID CDatabaseTMPacketParameter::SetOccurrence(INT nOccurrence)
{
	m_nOccurrence = nOccurrence;
}

INT CDatabaseTMPacketParameter::GetOccurrence() CONST
{
	return m_nOccurrence;
}

VOID CDatabaseTMPacketParameter::SetOccurrenceCount(INT nCount)
{
	m_nOccurrenceCount = nCount;
}

INT CDatabaseTMPacketParameter::GetOccurrenceCount() CONST
{
	return m_nOccurrenceCount;
}

VOID CDatabaseTMPacketParameter::SetOccurrenceInterval(INT nInterval)
{
	m_nOccurrenceInterval = nInterval;
}

INT CDatabaseTMPacketParameter::GetOccurrenceInterval() CONST
{
	return m_nOccurrenceInterval;
}

VOID CDatabaseTMPacketParameter::SetOccurrenceTimeOffset(DWORD dwOffset)
{
	m_dwOccurrenceTimeOffset = dwOffset;
}

DWORD CDatabaseTMPacketParameter::GetOccurrenceTimeOffset() CONST
{
	return m_dwOccurrenceTimeOffset;
}

VOID CDatabaseTMPacketParameter::SetOccurrenceTimeInterval(DWORD dwInterval)
{
	m_dwOccurrenceTimeInterval = dwInterval;
}

DWORD CDatabaseTMPacketParameter::GetOccurrenceTimeInterval() CONST
{
	return m_dwOccurrenceTimeInterval;
}

VOID CDatabaseTMPacketParameter::SetGroupSize(INT nSize)
{
	m_nGroupParameters = nSize;
}

INT CDatabaseTMPacketParameter::GetGroupSize() CONST
{
	return m_nGroupParameters;
}

VOID CDatabaseTMPacketParameter::SetGroupRepetitionCount(INT nCount)
{
	m_nGroupRepetitionCount = nCount;
}

INT CDatabaseTMPacketParameter::GetGroupRepetitionCount() CONST
{
	return m_nGroupRepetitionCount;
}

VOID CDatabaseTMPacketParameter::SetValidityParameter(LPCTSTR pszTag)
{
	m_szTag[1] = pszTag;
}

CString CDatabaseTMPacketParameter::GetValidityParameter() CONST
{
	return m_szTag[1];
}

VOID CDatabaseTMPacketParameter::SetValidityParameterRef(INT nRef)
{
	m_nRef[1] = nRef;
}

INT CDatabaseTMPacketParameter::GetValidityParameterRef() CONST
{
	return m_nRef[1];
}

VOID CDatabaseTMPacketParameter::SetRef(INT nRef)
{
	m_nRef[0] = nRef;
}

INT CDatabaseTMPacketParameter::GetRef() CONST
{
	return m_nRef[0];
}

VOID CDatabaseTMPacketParameter::Copy(CONST CDatabaseTMPacketParameter *pPacketParameter)
{
	m_szTag[0] = pPacketParameter->m_szTag[0];
	m_szTag[1] = pPacketParameter->m_szTag[1];
	m_szDescription = pPacketParameter->m_szDescription;
	m_nAttributes = pPacketParameter->m_nAttributes;
	m_nOccurrence = pPacketParameter->m_nOccurrence;
	m_nOccurrenceCount = pPacketParameter->m_nOccurrenceCount;
	m_nOccurrenceInterval = pPacketParameter->m_nOccurrenceInterval;
	m_dwOccurrenceTimeOffset = pPacketParameter->m_dwOccurrenceTimeOffset;
	m_dwOccurrenceTimeInterval = pPacketParameter->m_dwOccurrenceTimeInterval;
	m_nGroupParameters = pPacketParameter->m_nGroupParameters;
	m_nGroupRepetitionCount = pPacketParameter->m_nGroupRepetitionCount;
	m_nBytePos = pPacketParameter->m_nBytePos;
	m_nBitPos = pPacketParameter->m_nBitPos;
	m_nOffset = pPacketParameter->m_nOffset;
	m_nWidth = pPacketParameter->m_nWidth;
	m_nRef[0] = pPacketParameter->m_nRef[0];
	m_nRef[1] = pPacketParameter->m_nRef[1];
}

BOOL CDatabaseTMPacketParameter::Compare(CONST CDatabaseTMPacketParameter *pPacketParameter) CONST
{
	return((pPacketParameter->m_szTag[0] == m_szTag[0] && pPacketParameter->m_szTag[1] == m_szTag[1] && pPacketParameter->m_szDescription == m_szDescription  &&  pPacketParameter->m_nAttributes == m_nAttributes  &&  pPacketParameter->m_nOccurrence == m_nOccurrence  &&  pPacketParameter->m_nOccurrenceCount == m_nOccurrenceCount  &&  pPacketParameter->m_nOccurrenceInterval == m_nOccurrenceInterval  &&  pPacketParameter->m_dwOccurrenceTimeOffset == m_dwOccurrenceTimeOffset  &&  pPacketParameter->m_dwOccurrenceTimeInterval == m_dwOccurrenceTimeInterval  &&  pPacketParameter->m_nGroupParameters == m_nGroupParameters  &&  pPacketParameter->m_nGroupRepetitionCount == m_nGroupRepetitionCount  &&  pPacketParameter->m_nBytePos == m_nBytePos  &&  pPacketParameter->m_nBitPos == m_nBitPos  &&  pPacketParameter->m_nOffset == m_nOffset  &&  pPacketParameter->m_nWidth == m_nWidth  &&  pPacketParameter->m_nRef[0] == m_nRef[0] && pPacketParameter->m_nRef[1] == m_nRef[1]) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketParameter::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbTag[0] = (m_szTag[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbTag[1] = (!bBinary) ? ((m_szTag[1].GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbTag[0] + sData.cbTag[1] + sData.cbDescription)), sData.nAttributes = m_nAttributes, sData.nOccurrence = m_nOccurrence, sData.nOccurrenceCount = m_nOccurrenceCount, sData.nOccurrenceInterval = m_nOccurrenceInterval, sData.dwOccurrenceTimeOffset = m_dwOccurrenceTimeOffset, sData.dwOccurrenceTimeInterval = m_dwOccurrenceTimeInterval, sData.nGroupParameters = m_nGroupParameters, sData.nGroupRepetitionCount = m_nGroupRepetitionCount, sData.nBytePos = m_nBytePos, sData.nBitPos = m_nBitPos, sData.nOffset = m_nOffset, sData.nWidth = m_nWidth, sData.nRef[0] = (bBinary) ? m_nRef[0] : -1, sData.nRef[1] = (bBinary) ? m_nRef[1] : -1, sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szTag[0], sData.cbTag[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTag[0]), (LPCTSTR)m_szTag[1], sData.cbTag[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTag[1]), (LPCTSTR)m_szDescription, sData.cbDescription);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMPacketParameter::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbTag[0] + sData.cbTag[1] + sData.cbDescription && sData.cbTag[0] > 0 && sData.cbTag[1] >= 0 && sData.cbDescription > 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szTag[0].GetBufferSetLength(STRINGCHARS(sData.cbTag[0])), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbTag[0]));
		CopyMemory(m_szTag[1].GetBufferSetLength(STRINGCHARS(sData.cbTag[1])), nInfo.GetData() + (cbData = cbData + sData.cbTag[0]), STRINGBYTES(sData.cbTag[1]));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbTag[1]), STRINGBYTES(sData.cbDescription));
		m_nAttributes = sData.nAttributes;
		m_nOccurrence = sData.nOccurrence;
		m_nOccurrenceCount = sData.nOccurrenceCount;
		m_nOccurrenceInterval = sData.nOccurrenceInterval;
		m_dwOccurrenceTimeOffset = sData.dwOccurrenceTimeOffset;
		m_dwOccurrenceTimeInterval = sData.dwOccurrenceTimeInterval;
		m_nGroupParameters = sData.nGroupParameters;
		m_nGroupRepetitionCount = sData.nGroupRepetitionCount;
		m_nBytePos = sData.nBytePos;
		m_nBitPos = sData.nBitPos;
		m_nOffset = sData.nOffset;
		m_nWidth = sData.nWidth;
		m_nRef[0] = sData.nRef[0];
		m_nRef[1] = sData.nRef[1];
		m_szTag[0].ReleaseBuffer();
		m_szTag[1].ReleaseBuffer();
		m_szDescription.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMPacketIdentification

CDatabaseTMPacketIdentification::CDatabaseTMPacketIdentification() : CPtrArray()
{
	m_nType = 0;
	m_nSubType = 0;
	m_nAPID = -1;
	m_nEventType = 0;
	m_nIDValues[0] = 0;
	m_nIDValues[1] = 0;
	m_nContentID = -1;
	m_nDataFieldHeaderSize = 0;
	m_dwTransmissionRate = 0;
	m_bTimestamp = FALSE;
	m_bCRCCheck = FALSE;
	m_bValid = FALSE;
}

CDatabaseTMPacketIdentification::~CDatabaseTMPacketIdentification()
{
	RemoveAll();
}

VOID CDatabaseTMPacketIdentification::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTMPacketIdentification::GetName() CONST
{
	return(((m_nType != 0 || m_nSubType != 0 || m_nAPID != -1 || m_nIDValues[0] != 0 || m_nIDValues[1] != 0) && m_szName.IsEmpty()) ? ConstructName(m_nType, m_nSubType, m_nAPID, m_nIDValues[0], m_nIDValues[1]) : m_szName);
}

VOID CDatabaseTMPacketIdentification::SetType(INT nType)
{
	m_nType = nType;
}

INT CDatabaseTMPacketIdentification::GetType() CONST
{
	return m_nType;
}

VOID CDatabaseTMPacketIdentification::SetSubType(INT nSubType)
{
	m_nSubType = nSubType;
}

INT CDatabaseTMPacketIdentification::GetSubType() CONST
{
	return m_nSubType;
}

VOID CDatabaseTMPacketIdentification::SetAPID(INT nAPID)
{
	m_nAPID = nAPID;
}

INT CDatabaseTMPacketIdentification::GetAPID() CONST
{
	return m_nAPID;
}

VOID CDatabaseTMPacketIdentification::SetFirstIDValue(INT nValue)
{
	m_nIDValues[0] = nValue;
}

INT CDatabaseTMPacketIdentification::GetFirstIDValue() CONST
{
	return m_nIDValues[0];
}

VOID CDatabaseTMPacketIdentification::SetSecondIDValue(INT nValue)
{
	m_nIDValues[1] = nValue;
}

INT CDatabaseTMPacketIdentification::GetSecondIDValue() CONST
{
	return m_nIDValues[1];
}

VOID CDatabaseTMPacketIdentification::SetPacketID(LPCTSTR pszID)
{
	m_szPacketID = pszID;
}

CString CDatabaseTMPacketIdentification::GetPacketID() CONST
{
	return m_szPacketID;
}

VOID CDatabaseTMPacketIdentification::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTMPacketIdentification::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTMPacketIdentification::SetUnit(LPCTSTR pszUnit)
{
	m_szUnit = pszUnit;
}

CString CDatabaseTMPacketIdentification::GetUnit() CONST
{
	return m_szUnit;
}

VOID CDatabaseTMPacketIdentification::SetContentID(INT nContentID)
{
	m_nContentID = nContentID;
}

INT CDatabaseTMPacketIdentification::GetContentID() CONST
{
	return m_nContentID;
}

VOID CDatabaseTMPacketIdentification::SetDataFieldHeaderSize(INT nSize)
{
	m_nDataFieldHeaderSize = nSize;
}

INT CDatabaseTMPacketIdentification::GetDataFieldHeaderSize() CONST
{
	return m_nDataFieldHeaderSize;
}

VOID CDatabaseTMPacketIdentification::SetTimestampFlag(BOOL bFlag)
{
	m_bTimestamp = bFlag;
}

BOOL CDatabaseTMPacketIdentification::GetTimestampFlag() CONST
{
	return m_bTimestamp;
}

VOID CDatabaseTMPacketIdentification::SetEventType(INT nType)
{
	m_nEventType = nType;
}

INT CDatabaseTMPacketIdentification::GetEventType() CONST
{
	return m_nEventType;
}

VOID CDatabaseTMPacketIdentification::SetEventID(LPCTSTR pszID)
{
	m_szEventID = pszID;
}

CString CDatabaseTMPacketIdentification::GetEventID() CONST
{
	return m_szEventID;
}

VOID CDatabaseTMPacketIdentification::SetTransmissionRate(DWORD dwInterval)
{
	m_dwTransmissionRate = dwInterval;
}

DWORD CDatabaseTMPacketIdentification::GetTransmissionRate() CONST
{
	return m_dwTransmissionRate;
}

VOID CDatabaseTMPacketIdentification::SetCRCFlag(BOOL bEnable)
{
	m_bCRCCheck = bEnable;
}

BOOL CDatabaseTMPacketIdentification::GetCRCFlag() CONST
{
	return m_bCRCCheck;
}

VOID CDatabaseTMPacketIdentification::SetValid(BOOL bValid)
{
	m_bValid = bValid;
}

BOOL CDatabaseTMPacketIdentification::IsValid() CONST
{
	return m_bValid;
}

INT CDatabaseTMPacketIdentification::Add(CDatabaseTMPacketParameter *pParameter)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pParameter->GetBytePos(), pParameter->GetBitPos(), TRUE)) >= 0) InsertAt(nIndex, pParameter, 1);
	return nIndex;
}

INT CDatabaseTMPacketIdentification::Find(LPCTSTR pszTag, INT nOccurrence) CONST
{
	INT  nCount;
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMPacketParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(), nCount = 0; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)) && pParameter->GetTag() == pszTag)
		{
			if (nCount++ == nOccurrence) break;
			continue;
		}
	}
	return((nOccurrence >= 0) ? ((nParameter < nParameters) ? nParameter : -1) : nCount);
}
INT CDatabaseTMPacketIdentification::Find(LPCTSTR pszTag, INT nBytePos, INT nBitPos) CONST
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMPacketParameter  *pParameter;

	for (nParameter = FindIndex(nBytePos, nBitPos), nParameters = (nParameter >= 0) ? (INT)GetCount() : -1; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)) && pParameter->GetBytePos() == nBytePos  &&  pParameter->GetBitPos() == nBitPos)
		{
			if (pParameter->GetTag() != pszTag) continue;
			break;
		}
		nParameter = nParameters;
		break;
	}
	return((nParameter < nParameters) ? nParameter : -1);
}

CDatabaseTMPacketParameter *CDatabaseTMPacketIdentification::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacketParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacketParameter *)NULL);
}

CDatabaseTMPacketParameter *CDatabaseTMPacketIdentification::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacketParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacketParameter *)NULL);
}

VOID CDatabaseTMPacketIdentification::RemoveAll()
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMPacketParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter))) delete pParameter;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMPacketIdentification::Copy(CONST CDatabaseTMPacketIdentification *pPacketIdentification)
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMPacketParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)pPacketIdentification->GetSize(), m_szName = pPacketIdentification->m_szName, m_szDescription = pPacketIdentification->m_szDescription, m_szUnit = pPacketIdentification->m_szUnit, m_nAPID = pPacketIdentification->m_nAPID, m_nType = pPacketIdentification->m_nType, m_nSubType = pPacketIdentification->m_nSubType, m_nIDValues[0] = pPacketIdentification->m_nIDValues[0], m_nIDValues[1] = pPacketIdentification->m_nIDValues[1], m_szPacketID = pPacketIdentification->m_szPacketID, m_nContentID = pPacketIdentification->m_nContentID, m_nDataFieldHeaderSize = pPacketIdentification->m_nDataFieldHeaderSize, m_dwTransmissionRate = pPacketIdentification->m_dwTransmissionRate, m_bTimestamp = pPacketIdentification->m_bTimestamp, m_szEventID = pPacketIdentification->m_szEventID, m_nEventType = pPacketIdentification->m_nEventType, m_bCRCCheck = pPacketIdentification->m_bCRCCheck, m_bValid = pPacketIdentification->m_bValid, RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = new CDatabaseTMPacketParameter))
		{
			pParameter->Copy(pPacketIdentification->GetAt(nParameter));
			InsertAt(nParameter, pParameter, 1);
			continue;
		}
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketIdentification::Compare(CONST CDatabaseTMPacketIdentification *pPacketIdentification) CONST
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMPacketParameter  *pParameter;

	for (nParameter = 0, nParameters = (pPacketIdentification->GetName() == GetName() && pPacketIdentification->m_szDescription == m_szDescription && pPacketIdentification->m_szUnit == m_szUnit && pPacketIdentification->m_nAPID == m_nAPID && pPacketIdentification->m_nType == m_nType && pPacketIdentification->m_nSubType == m_nSubType && pPacketIdentification->m_nIDValues[0] == m_nIDValues[0] && pPacketIdentification->m_nIDValues[1] == m_nIDValues[1] && pPacketIdentification->m_szPacketID == m_szPacketID && pPacketIdentification->m_nContentID == m_nContentID && pPacketIdentification->m_nDataFieldHeaderSize == m_nDataFieldHeaderSize && pPacketIdentification->m_dwTransmissionRate == m_dwTransmissionRate && pPacketIdentification->m_bTimestamp == m_bTimestamp && pPacketIdentification->m_szEventID == m_szEventID && pPacketIdentification->m_nEventType == m_nEventType && pPacketIdentification->m_bCRCCheck == m_bCRCCheck && pPacketIdentification->m_bValid == m_bValid && pPacketIdentification->GetSize() == GetSize()) ? (INT)GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = pPacketIdentification->GetAt(nParameter)) && pParameter->Compare(GetAt(nParameter))) continue;
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketIdentification::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nParameter;
	INT  nParameters;
	CByteArray  nParametersData[2];
	CDatabaseTMPacketParameter  *pParameter;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	sData.cbUnit = (m_szUnit.GetLength() + 1)*sizeof(TCHAR);
	sData.cbPacketID = (m_szPacketID.GetLength() + 1)*sizeof(TCHAR);
	sData.cbEventID = (m_szEventID.GetLength() + 1)*sizeof(TCHAR);
	for (nParameter = 0, nParameters = (INT)GetSize(), sData.nAPID = m_nAPID, sData.nType = m_nType, sData.nSubType = m_nSubType, sData.nIDValues[0] = m_nIDValues[0], sData.nIDValues[1] = m_nIDValues[1], sData.nDataFieldHeaderSize = m_nDataFieldHeaderSize, sData.bTimestamp = m_bTimestamp, sData.nContentID = m_nContentID, sData.nEventType = m_nEventType, sData.dwTransmissionRate = m_dwTransmissionRate, sData.bCRCCheck = m_bCRCCheck, sData.bValid = m_bValid, sData.bBinary = bBinary; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)) && pParameter->Map(nParametersData[1], bBinary) && nParametersData[0].Append(nParametersData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbUnit + sData.cbPacketID + sData.cbEventID + (sData.cbParameters = (INT)(nParametersData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nParameter == nParameters; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szUnit, sData.cbUnit);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbUnit), (LPCTSTR)m_szPacketID, sData.cbPacketID);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbPacketID), (LPCTSTR)m_szEventID, sData.cbEventID);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbEventID), nParametersData[0].GetData(), sData.cbParameters);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMPacketIdentification::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbParameter;
	INT  cbParameters;
	CByteArray  nParametersData[2];
	CDatabaseTMPacketParameter  *pParameter;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbUnit + sData.cbPacketID + sData.cbEventID + sData.cbParameters && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbUnit >= 0 && sData.cbPacketID > 0 && sData.cbEventID > 0 && sData.cbParameters >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription));
		CopyMemory(m_szUnit.GetBufferSetLength(STRINGCHARS(sData.cbUnit)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbUnit));
		CopyMemory(m_szPacketID.GetBufferSetLength(STRINGCHARS(sData.cbPacketID)), nInfo.GetData() + (cbData = cbData + sData.cbUnit), STRINGBYTES(sData.cbPacketID));
		CopyMemory(m_szEventID.GetBufferSetLength(STRINGCHARS(sData.cbEventID)), nInfo.GetData() + (cbData = cbData + sData.cbPacketID), STRINGBYTES(sData.cbEventID));
		for (nParametersData[0].SetSize(sData.cbParameters), CopyMemory(nParametersData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbEventID), sData.cbParameters), m_nAPID = sData.nAPID, m_nType = sData.nType, m_nSubType = sData.nSubType, m_nEventType = sData.nEventType, m_nContentID = sData.nContentID, m_nIDValues[0] = sData.nIDValues[0], m_nIDValues[1] = sData.nIDValues[1], m_nDataFieldHeaderSize = sData.nDataFieldHeaderSize, m_dwTransmissionRate = sData.dwTransmissionRate, m_bTimestamp = sData.bTimestamp, m_bCRCCheck = sData.bCRCCheck, m_bValid = sData.bValid, m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), m_szUnit.ReleaseBuffer(), m_szPacketID.ReleaseBuffer(), m_szEventID.ReleaseBuffer(), RemoveAll(), cbParameter = cbParameters = 0; cbParameters < sData.cbParameters; cbParameters += cbParameter)
		{
			for (CopyMemory(&cbParameter, nParametersData[0].GetData() + cbParameters, sizeof(cbParameter)), nParametersData[1].SetSize(max(min(cbParameter, nParametersData[0].GetSize() - cbParameters), 0)); nParametersData[1].GetSize() >= 0; )
			{
				CopyMemory(nParametersData[1].GetData(), nParametersData[0].GetData() + cbParameters, nParametersData[1].GetSize());
				break;
			}
			if ((pParameter = new CDatabaseTMPacketParameter))
			{
				if (pParameter->Unmap(nParametersData[1], bBinary) && Add(pParameter) >= 0) continue;
				delete pParameter;
			}
			break;
		}
		return((cbParameters == sData.cbParameters) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTMPacketIdentification::FindIndex(INT nBytePos, INT nBitPos, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	INT  nBitOffset[2];
	CDatabaseTMPacketParameter  *pParameter;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2, nBitOffset[0] = 8 * nBytePos + nBitPos; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pParameter = GetAt(nIndex[0]))) ? (((nIndex[1] = (nBitOffset[1] = 8 * pParameter->GetBytePos() + pParameter->GetBitPos()) <= nBitOffset[0])) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((pParameter = GetAt(nIndex[0])) && pParameter->GetBytePos() == nBytePos  &&  pParameter->GetBitPos() == nBitPos) ? ((!bInsert) ? nIndex[0] : -1) : (bInsert) ? nIndex[0] : -1);
}

CString CDatabaseTMPacketIdentification::ConstructName(INT nType, INT nSubType, INT nAPID, INT nFirstIDValue, INT nSecondIDValue)
{
	CString  szName;

	szName.Format(STRING(IDS_TMPACKET_IDENTIFICATIONNAMEFORMAT), nType, nSubType, nAPID, nFirstIDValue, nSecondIDValue);
	return szName;
}
BOOL CDatabaseTMPacketIdentification::ParseName(LPCTSTR pszName, INT &nType, INT &nSubType, INT &nAPID, INT &nFirstIDValue, INT &nSecondIDValue)
{
	INT  nPos[4];
	CString  szName;
	CString  szType;
	CString  szAPID;
	CString  szSubType;
	CString  szFirstIDValue;
	CString  szSecondIDValue;

	for (szName = pszName, nType = -1, nSubType = -1, nAPID = -1, nFirstIDValue = nSecondIDValue = 0; (nPos[0] = szName.Find(STRING(IDS_TMPACKET_NAMESEPARATOR))) > 0; )
	{
		for (szType = szName.Left(nPos[0]), szName = szName.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMESEPARATOR))); (nPos[1] = szName.Find(STRING(IDS_TMPACKET_NAMESEPARATOR))) > 0; )
		{
			for (szSubType = szName.Left(nPos[1]), szName = szName.Mid(nPos[1] + lstrlen(STRING(IDS_TMPACKET_NAMESEPARATOR))); (nPos[2] = szName.Find(STRING(IDS_TMPACKET_NAMESEPARATOR))) > 0; )
			{
				for (szAPID = szName.Left(nPos[2]), szName = szName.Mid(nPos[2] + lstrlen(STRING(IDS_TMPACKET_NAMESEPARATOR))); (nPos[3] = szName.Find(STRING(IDS_TMPACKET_NAMESEPARATOR))) > 0; )
				{
					for (szFirstIDValue = szName.Left(nPos[3]), szSecondIDValue = szName.Mid(nPos[3] + lstrlen(STRING(IDS_TMPACKET_NAMESEPARATOR))), szType = ((nPos[0] = szType.Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0 && (nPos[1] = szType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))).Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0) ? szType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER)), nPos[1]) : EMPTYSTRING, szSubType = ((nPos[0] = szSubType.Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0 && (nPos[1] = szSubType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))).Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0) ? szSubType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER)), nPos[1]) : EMPTYSTRING, szAPID = ((nPos[0] = szAPID.Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0 && (nPos[1] = szAPID.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))).Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0) ? szAPID.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER)), nPos[1]) : EMPTYSTRING, szFirstIDValue = ((nPos[0] = szFirstIDValue.Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0 && (nPos[1] = szFirstIDValue.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))).Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0) ? szFirstIDValue.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER)), nPos[1]) : EMPTYSTRING, szSecondIDValue = ((nPos[0] = szSecondIDValue.Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0 && (nPos[1] = szSecondIDValue.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))).Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0) ? szSecondIDValue.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER)), nPos[1]) : EMPTYSTRING; !szType.IsEmpty() && !szSubType.IsEmpty() && !szAPID.IsEmpty() && !szFirstIDValue.IsEmpty() && !szSecondIDValue.IsEmpty(); )
					{
						nSecondIDValue = _ttoi(szSecondIDValue);
						nFirstIDValue = _ttoi(szFirstIDValue);
						nSubType = _ttoi(szSubType);
						nAPID = _ttoi(szAPID);
						nType = _ttoi(szType);
						return TRUE;
					}
					break;
				}
				break;
			}
			break;
		}
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMPacketIdentifications

CDatabaseTMPacketIdentifications::CDatabaseTMPacketIdentifications() : CPtrArray()
{
	return;
}

CDatabaseTMPacketIdentifications::~CDatabaseTMPacketIdentifications()
{
	RemoveAll();
}

INT CDatabaseTMPacketIdentifications::Add(CDatabaseTMPacketIdentification *pPacketIdentification)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pPacketIdentification->GetName(), TRUE)) >= 0) InsertAt(nIndex, pPacketIdentification, 1);
	return nIndex;
}

INT CDatabaseTMPacketIdentifications::Find(LPCTSTR pszName, BOOL bID) CONST
{
	INT  nPacketIdentification;
	INT  nPacketIdentifications;
	CDatabaseTMPacketIdentification  *pPacketIdentification;

	for (nPacketIdentification = 0, nPacketIdentifications = (bID) ? (INT)GetSize() : 0; nPacketIdentification < nPacketIdentifications; nPacketIdentification++)
	{
		if ((pPacketIdentification = GetAt(nPacketIdentification)) && pPacketIdentification->IsValid() && pPacketIdentification->GetPacketID() == pszName) break;
		continue;
	}
	return((bID) ? ((nPacketIdentification < nPacketIdentifications) ? nPacketIdentification : -1) : FindIndex(pszName));
}

CDatabaseTMPacketIdentification *CDatabaseTMPacketIdentifications::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacketIdentification *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacketIdentification *)NULL);
}

CDatabaseTMPacketIdentification *CDatabaseTMPacketIdentifications::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacketIdentification *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacketIdentification *)NULL);
}

VOID CDatabaseTMPacketIdentifications::RemoveAll()
{
	INT  nPacketIdentification;
	INT  nPacketIdentifications;
	CDatabaseTMPacketIdentification  *pPacketIdentification;

	for (nPacketIdentification = 0, nPacketIdentifications = (INT)GetSize(); nPacketIdentification < nPacketIdentifications; nPacketIdentification++)
	{
		if ((pPacketIdentification = GetAt(nPacketIdentification))) delete pPacketIdentification;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMPacketIdentifications::Copy(CONST CDatabaseTMPacketIdentifications *pPacketIdentifications)
{
	INT  nPacketIdentification;
	INT  nPacketIdentifications;
	CDatabaseTMPacketIdentification  *pPacketIdentification;

	for (nPacketIdentification = 0, nPacketIdentifications = (INT)pPacketIdentifications->GetSize(), RemoveAll(); nPacketIdentification < nPacketIdentifications; nPacketIdentification++)
	{
		if ((pPacketIdentification = new CDatabaseTMPacketIdentification))
		{
			pPacketIdentification->Copy(pPacketIdentifications->GetAt(nPacketIdentification));
			InsertAt(nPacketIdentification, pPacketIdentification, 1);
			continue;
		}
		break;
	}
	return((nPacketIdentification == nPacketIdentifications) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketIdentifications::Compare(CONST CDatabaseTMPacketIdentifications *pPacketIdentifications) CONST
{
	INT  nPacketIdentification;
	INT  nPacketIdentifications;
	CDatabaseTMPacketIdentification  *pPacketIdentification;

	for (nPacketIdentification = 0, nPacketIdentifications = (pPacketIdentifications->GetSize() == GetSize()) ? (INT)GetSize() : -1; nPacketIdentification < nPacketIdentifications; nPacketIdentification++)
	{
		if ((pPacketIdentification = pPacketIdentifications->GetAt(nPacketIdentification)) && pPacketIdentification->Compare(GetAt(nPacketIdentification))) continue;
		break;
	}
	return((nPacketIdentification == nPacketIdentifications) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketIdentifications::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nPacketIdentification;
	INT  nPacketIdentifications;
	CByteArray  nPacketIdentificationsData;
	CDatabaseTMPacketIdentification  *pPacketIdentification;

	for (nPacketIdentification = 0, nPacketIdentifications = (INT)GetSize(), nInfo.RemoveAll(); nPacketIdentification < nPacketIdentifications; nPacketIdentification++)
	{
		if ((pPacketIdentification = GetAt(nPacketIdentification)) && pPacketIdentification->Map(nPacketIdentificationsData, bBinary) && nInfo.Append(nPacketIdentificationsData) >= 0) continue;
		break;
	}
	return((nPacketIdentification == nPacketIdentifications) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketIdentifications::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbPacketIdentification;
	INT  cbPacketIdentifications;
	CByteArray  nPacketIdentificationsData;
	CDatabaseTMPacketIdentification  *pPacketIdentification;

	for (cbPacketIdentifications = 0, RemoveAll(); cbPacketIdentifications < nInfo.GetSize(); cbPacketIdentifications += cbPacketIdentification)
	{
		for (CopyMemory(&cbPacketIdentification, nInfo.GetData() + cbPacketIdentifications, sizeof(cbPacketIdentification)), nPacketIdentificationsData.SetSize(max(min(cbPacketIdentification, nInfo.GetSize() - cbPacketIdentifications), 0)); nPacketIdentificationsData.GetSize() >= 0; )
		{
			CopyMemory(nPacketIdentificationsData.GetData(), nInfo.GetData() + cbPacketIdentifications, nPacketIdentificationsData.GetSize());
			break;
		}
		if ((pPacketIdentification = new CDatabaseTMPacketIdentification))
		{
			if (pPacketIdentification->Unmap(nPacketIdentificationsData, bBinary) && Add(pPacketIdentification) >= 0) continue;
			delete pPacketIdentification;
		}
		break;
	}
	return((cbPacketIdentifications == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTMPacketIdentifications::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTMPacketIdentification  *pPacketIdentification;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pPacketIdentification = GetAt(nIndex[0]))) ? ((nIndex[1] = (pPacketIdentification->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pPacketIdentification = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pPacketIdentification->GetName() == pszName) || (bInsert && (((pPacketIdentification = GetAt(max(nIndex[0] - 1, 0))) && pPacketIdentification->GetName() != pszName && (pPacketIdentification = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pPacketIdentification->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMPacketIdentificationCriterion

CDatabaseTMPacketIdentificationCriterion::CDatabaseTMPacketIdentificationCriterion() : CObject()
{
	m_nType = 0;
	m_nSubType = 0;
	m_nAPID = -1;
	m_nOffset[0] = 0;
	m_nOffset[1] = 0;
	m_nWidth[0] = 0;
	m_nWidth[1] = 0;
}

VOID CDatabaseTMPacketIdentificationCriterion::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTMPacketIdentificationCriterion::GetName() CONST
{
	return(((m_nType != 0 || m_nSubType != 0 || m_nAPID != -1) && m_szName.IsEmpty()) ? ConstructName(m_nType, m_nSubType, m_nAPID) : m_szName);
}

VOID CDatabaseTMPacketIdentificationCriterion::SetType(INT nType)
{
	m_nType = nType;
}

INT CDatabaseTMPacketIdentificationCriterion::GetType() CONST
{
	return m_nType;
}

VOID CDatabaseTMPacketIdentificationCriterion::SetSubType(INT nSubType)
{
	m_nSubType = nSubType;
}

INT CDatabaseTMPacketIdentificationCriterion::GetSubType() CONST
{
	return m_nSubType;
}

VOID CDatabaseTMPacketIdentificationCriterion::SetAPID(INT nAPID)
{
	m_nAPID = nAPID;
}

INT CDatabaseTMPacketIdentificationCriterion::GetAPID() CONST
{
	return m_nAPID;
}

VOID CDatabaseTMPacketIdentificationCriterion::SetFirstIDValueOffset(INT nOffset)
{
	m_nOffset[0] = nOffset;
}

INT CDatabaseTMPacketIdentificationCriterion::GetFirstIDValueOffset() CONST
{
	return m_nOffset[0];
}

VOID CDatabaseTMPacketIdentificationCriterion::SetFirstIDValueWidth(INT nWidth)
{
	m_nWidth[0] = nWidth;
}

INT CDatabaseTMPacketIdentificationCriterion::GetFirstIDValueWidth() CONST
{
	return m_nWidth[0];
}

VOID CDatabaseTMPacketIdentificationCriterion::SetSecondIDValueOffset(INT nOffset)
{
	m_nOffset[1] = nOffset;
}

INT CDatabaseTMPacketIdentificationCriterion::GetSecondIDValueOffset() CONST
{
	return m_nOffset[1];
}

VOID CDatabaseTMPacketIdentificationCriterion::SetSecondIDValueWidth(INT nWidth)
{
	m_nWidth[1] = nWidth;
}

INT CDatabaseTMPacketIdentificationCriterion::GetSecondIDValueWidth() CONST
{
	return m_nWidth[1];
}

VOID CDatabaseTMPacketIdentificationCriterion::Copy(CONST CDatabaseTMPacketIdentificationCriterion *pPacketIdentificationCriterion)
{
	m_szName = pPacketIdentificationCriterion->m_szName;
	m_nType = pPacketIdentificationCriterion->m_nType;
	m_nSubType = pPacketIdentificationCriterion->m_nSubType;
	m_nAPID = pPacketIdentificationCriterion->m_nAPID;
	m_nOffset[0] = pPacketIdentificationCriterion->m_nOffset[0];
	m_nOffset[1] = pPacketIdentificationCriterion->m_nOffset[1];
	m_nWidth[0] = pPacketIdentificationCriterion->m_nWidth[0];
	m_nWidth[1] = pPacketIdentificationCriterion->m_nWidth[1];
}

BOOL CDatabaseTMPacketIdentificationCriterion::Compare(CONST CDatabaseTMPacketIdentificationCriterion *pPacketIdentificationCriterion) CONST
{
	return((pPacketIdentificationCriterion->GetName() == GetName() && pPacketIdentificationCriterion->m_nType == m_nType  &&  pPacketIdentificationCriterion->m_nSubType == m_nSubType  &&  pPacketIdentificationCriterion->m_nAPID == m_nAPID  &&  pPacketIdentificationCriterion->m_nOffset[0] == m_nOffset[0] && pPacketIdentificationCriterion->m_nOffset[1] == m_nOffset[1] && pPacketIdentificationCriterion->m_nWidth[0] == m_nWidth[0] && pPacketIdentificationCriterion->m_nWidth[1] == m_nWidth[1]) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketIdentificationCriterion::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName)), sData.nType = m_nType, sData.nSubType = m_nSubType, sData.nAPID = m_nAPID, sData.nOffset[0] = m_nOffset[0], sData.nOffset[1] = m_nOffset[1], sData.nWidth[0] = m_nWidth[0], sData.nWidth[1] = m_nWidth[1], sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMPacketIdentificationCriterion::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName && sData.cbName > 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		m_nType = sData.nType;
		m_nSubType = sData.nSubType;
		m_nAPID = sData.nAPID;
		m_nOffset[0] = sData.nOffset[0];
		m_nOffset[1] = sData.nOffset[1];
		m_nWidth[0] = sData.nWidth[0];
		m_nWidth[1] = sData.nWidth[1];
		m_szName.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}

CString CDatabaseTMPacketIdentificationCriterion::ConstructName(INT nType, INT nSubType, INT nAPID)
{
	CString  szName;

	szName.Format((nAPID >= 0) ? STRING(IDS_TMPACKET_IDENTCRITERIONNAMEFULLFORMAT) : STRING(IDS_TMPACKET_IDENTCRITERIONNAMEFORMAT), nType, nSubType, nAPID);
	return szName;
}
BOOL CDatabaseTMPacketIdentificationCriterion::ParseName(LPCTSTR pszName, INT &nType, INT &nSubType, INT &nAPID)
{
	INT  nPos[2];
	CString  szName;
	CString  szType;
	CString  szAPID;
	CString  szSubType;

	for (szName = pszName, nType = -1, nSubType = -1, nAPID = -1; (nPos[0] = szName.Find(STRING(IDS_TMPACKET_NAMESEPARATOR))) > 0; )
	{
		for (szType = szName.Left(nPos[0]), szName = szName.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMESEPARATOR))); (nPos[1] = szName.Find(STRING(IDS_TMPACKET_NAMESEPARATOR))) > 0; )
		{
			for (szSubType = szName.Left(nPos[1]), szName = szName.Mid(nPos[1] + lstrlen(STRING(IDS_TMPACKET_NAMESEPARATOR))); szName.GetLength() > 0; )
			{
				szAPID = szName;
				break;
			}
			break;
		}
		for (szSubType = (nPos[1] > 0) ? szSubType : szName, szType = ((nPos[0] = szType.Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0 && (nPos[1] = szType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))).Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0) ? szType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER)), nPos[1]) : EMPTYSTRING, szSubType = ((nPos[0] = szSubType.Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0 && (nPos[1] = szSubType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))).Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0) ? szSubType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER)), nPos[1]) : EMPTYSTRING, szAPID = ((nPos[0] = szAPID.Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0 && (nPos[1] = szAPID.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))).Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0) ? szAPID.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER)), nPos[1]) : EMPTYSTRING; !szType.IsEmpty() && !szSubType.IsEmpty(); )
		{
			nAPID = (!szAPID.IsEmpty()) ? _ttoi(szAPID) : -1;
			nSubType = _ttoi(szSubType);
			nType = _ttoi(szType);
			return TRUE;
		}
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMPacketIdentificationCriteria

CDatabaseTMPacketIdentificationCriteria::CDatabaseTMPacketIdentificationCriteria() : CPtrArray()
{
	return;
}

CDatabaseTMPacketIdentificationCriteria::~CDatabaseTMPacketIdentificationCriteria()
{
	RemoveAll();
}

INT CDatabaseTMPacketIdentificationCriteria::Add(CDatabaseTMPacketIdentificationCriterion *pPacketIdentificationCriterion)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pPacketIdentificationCriterion->GetName(), TRUE)) >= 0) InsertAt(nIndex, pPacketIdentificationCriterion, 1);
	return nIndex;
}

INT CDatabaseTMPacketIdentificationCriteria::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTMPacketIdentificationCriterion *CDatabaseTMPacketIdentificationCriteria::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacketIdentificationCriterion *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacketIdentificationCriterion *)NULL);
}

CDatabaseTMPacketIdentificationCriterion *CDatabaseTMPacketIdentificationCriteria::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacketIdentificationCriterion *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacketIdentificationCriterion *)NULL);
}

VOID CDatabaseTMPacketIdentificationCriteria::RemoveAll()
{
	INT  nPacketIdentificationCriteria;
	INT  nPacketIdentificationCriterion;
	CDatabaseTMPacketIdentificationCriterion  *pPacketIdentificationCriterion;

	for (nPacketIdentificationCriterion = 0, nPacketIdentificationCriteria = (INT)GetSize(); nPacketIdentificationCriterion < nPacketIdentificationCriteria; nPacketIdentificationCriterion++)
	{
		if ((pPacketIdentificationCriterion = GetAt(nPacketIdentificationCriterion))) delete pPacketIdentificationCriterion;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMPacketIdentificationCriteria::Copy(CONST CDatabaseTMPacketIdentificationCriteria *pPacketIdentificationCriteria)
{
	INT  nPacketIdentificationCriteria;
	INT  nPacketIdentificationCriterion;
	CDatabaseTMPacketIdentificationCriterion  *pPacketIdentificationCriterion;

	for (nPacketIdentificationCriterion = 0, nPacketIdentificationCriteria = (INT)pPacketIdentificationCriteria->GetSize(), RemoveAll(); nPacketIdentificationCriterion < nPacketIdentificationCriteria; nPacketIdentificationCriterion++)
	{
		if ((pPacketIdentificationCriterion = new CDatabaseTMPacketIdentificationCriterion))
		{
			pPacketIdentificationCriterion->Copy(pPacketIdentificationCriteria->GetAt(nPacketIdentificationCriterion));
			InsertAt(nPacketIdentificationCriterion, pPacketIdentificationCriterion, 1);
			continue;
		}
		break;
	}
	return((nPacketIdentificationCriterion == nPacketIdentificationCriteria) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketIdentificationCriteria::Compare(CONST CDatabaseTMPacketIdentificationCriteria *pPacketIdentificationCriteria) CONST
{
	INT  nPacketIdentificationCriteria;
	INT  nPacketIdentificationCriterion;
	CDatabaseTMPacketIdentificationCriterion  *pPacketIdentificationCriterion;

	for (nPacketIdentificationCriterion = 0, nPacketIdentificationCriteria = (pPacketIdentificationCriteria->GetSize() == GetSize()) ? (INT)pPacketIdentificationCriteria->GetSize() : -1; nPacketIdentificationCriterion < nPacketIdentificationCriteria; nPacketIdentificationCriterion++)
	{
		if ((pPacketIdentificationCriterion = pPacketIdentificationCriteria->GetAt(nPacketIdentificationCriterion)) && pPacketIdentificationCriterion->Compare(GetAt(nPacketIdentificationCriterion))) continue;
		break;
	}
	return((nPacketIdentificationCriterion == nPacketIdentificationCriteria) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketIdentificationCriteria::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nPacketIdentificationCriteria;
	INT  nPacketIdentificationCriterion;
	CByteArray  nPacketIdentificationCriteriaData;
	CDatabaseTMPacketIdentificationCriterion  *pPacketIdentificationCriterion;

	for (nPacketIdentificationCriterion = 0, nPacketIdentificationCriteria = (INT)GetSize(), nInfo.RemoveAll(); nPacketIdentificationCriterion < nPacketIdentificationCriteria; nPacketIdentificationCriterion++)
	{
		if ((pPacketIdentificationCriterion = GetAt(nPacketIdentificationCriterion)) && pPacketIdentificationCriterion->Map(nPacketIdentificationCriteriaData, bBinary) && nInfo.Append(nPacketIdentificationCriteriaData) >= 0) continue;
		break;
	}
	return((nPacketIdentificationCriterion == nPacketIdentificationCriteria) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketIdentificationCriteria::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbPacketIdentificationCrtieria;
	INT  cbPacketIdentificationCriterion;
	CByteArray  nPacketIdentificationCriteriaData;
	CDatabaseTMPacketIdentificationCriterion  *pPacketIdentificationCriterion;

	for (cbPacketIdentificationCrtieria = 0, RemoveAll(); cbPacketIdentificationCrtieria < nInfo.GetSize(); cbPacketIdentificationCrtieria += cbPacketIdentificationCriterion)
	{
		for (CopyMemory(&cbPacketIdentificationCriterion, nInfo.GetData() + cbPacketIdentificationCrtieria, sizeof(cbPacketIdentificationCriterion)), nPacketIdentificationCriteriaData.SetSize(max(min(cbPacketIdentificationCriterion, nInfo.GetSize() - cbPacketIdentificationCrtieria), 0)); nPacketIdentificationCriteriaData.GetSize() >= 0; )
		{
			CopyMemory(nPacketIdentificationCriteriaData.GetData(), nInfo.GetData() + cbPacketIdentificationCrtieria, nPacketIdentificationCriteriaData.GetSize());
			break;
		}
		if ((pPacketIdentificationCriterion = new CDatabaseTMPacketIdentificationCriterion))
		{
			if (pPacketIdentificationCriterion->Unmap(nPacketIdentificationCriteriaData, bBinary) && Add(pPacketIdentificationCriterion) >= 0) continue;
			delete pPacketIdentificationCriterion;
		}
		break;
	}
	return((cbPacketIdentificationCrtieria == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTMPacketIdentificationCriteria::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTMPacketIdentificationCriterion  *pPacketIdentificationCriterion;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pPacketIdentificationCriterion = GetAt(nIndex[0]))) ? ((nIndex[1] = (pPacketIdentificationCriterion->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pPacketIdentificationCriterion = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pPacketIdentificationCriterion->GetName() == pszName) || (bInsert && (((pPacketIdentificationCriterion = GetAt(max(nIndex[0] - 1, 0))) && pPacketIdentificationCriterion->GetName() != pszName && (pPacketIdentificationCriterion = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pPacketIdentificationCriterion->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMPacketHeader

CDatabaseTMPacketHeader::CDatabaseTMPacketHeader() : CObject()
{
	m_nType = 0;
	m_nSubType = 0;
	m_nAPID = -1;
	m_nTMTypePos[0] = 0;
	m_nTMTypePos[1] = 0;
	m_nTMTypePos[2] = 0;
	m_nTMIDPos[0] = 0;
	m_nTMIDPos[1] = 0;
	m_nTMIDPos[2] = 0;
	m_n3DiscPos[0] = 0;
	m_n3DiscPos[1] = 0;
	m_n3DiscPos[2] = 0;
	m_nTimestampPos[0] = 0;
	m_nTimestampPos[1] = 0;
	m_nTimestampPos[2] = 0;
}

VOID CDatabaseTMPacketHeader::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTMPacketHeader::GetName() CONST
{
	return(((m_nType != 0 || m_nSubType != 0 || m_nAPID != -1) && m_szName.IsEmpty()) ? ConstructName(m_nType, m_nSubType, m_nAPID) : m_szName);
}

VOID CDatabaseTMPacketHeader::SetType(INT nType)
{
	m_nType = nType;
}

INT CDatabaseTMPacketHeader::GetType() CONST
{
	return m_nType;
}

VOID CDatabaseTMPacketHeader::SetSubType(INT nSubType)
{
	m_nSubType = nSubType;
}

INT CDatabaseTMPacketHeader::GetSubType() CONST
{
	return m_nSubType;
}

VOID CDatabaseTMPacketHeader::SetAPID(INT nAPID)
{
	m_nAPID = nAPID;
}

INT CDatabaseTMPacketHeader::GetAPID() CONST
{
	return m_nAPID;
}

VOID CDatabaseTMPacketHeader::SetTMTypePosition(INT nByte, INT nBit, INT nLength)
{
	m_nTMTypePos[0] = nByte;
	m_nTMTypePos[1] = nBit;
	m_nTMTypePos[2] = nLength;
}

BOOL CDatabaseTMPacketHeader::GetTMTypePosition(INT &nByte, INT &nBit, INT &nLength) CONST
{
	nByte = m_nTMTypePos[0];
	nBit = m_nTMTypePos[1];
	nLength = m_nTMTypePos[2];
	return((nLength > 0) ? TRUE : FALSE);
}

VOID CDatabaseTMPacketHeader::SetTMIDPosition(INT nByte, INT nBit, INT nLength)
{
	m_nTMIDPos[0] = nByte;
	m_nTMIDPos[1] = nBit;
	m_nTMIDPos[2] = nLength;
}

BOOL CDatabaseTMPacketHeader::GetTMIDPosition(INT &nByte, INT &nBit, INT &nLength) CONST
{
	nByte = m_nTMIDPos[0];
	nBit = m_nTMIDPos[1];
	nLength = m_nTMIDPos[2];
	return((nLength > 0) ? TRUE : FALSE);
}

VOID CDatabaseTMPacketHeader::Set3DiscPosition(INT nByte, INT nBit, INT nLength)
{
	m_n3DiscPos[0] = nByte;
	m_n3DiscPos[1] = nBit;
	m_n3DiscPos[2] = nLength;
}

BOOL CDatabaseTMPacketHeader::Get3DiscPosition(INT &nByte, INT &nBit, INT &nLength) CONST
{
	nByte = m_n3DiscPos[0];
	nBit = m_n3DiscPos[1];
	nLength = m_n3DiscPos[2];
	return((nLength > 0) ? TRUE : FALSE);
}

VOID CDatabaseTMPacketHeader::SetTimestampPosition(INT nByte, INT nBit, INT nLength)
{
	m_nTimestampPos[0] = nByte;
	m_nTimestampPos[1] = nBit;
	m_nTimestampPos[2] = nLength;
}

BOOL CDatabaseTMPacketHeader::GetTimestampPosition(INT &nByte, INT &nBit, INT &nLength) CONST
{
	nByte = m_nTimestampPos[0];
	nBit = m_nTimestampPos[1];
	nLength = m_nTimestampPos[2];
	return((nLength > 0) ? TRUE : FALSE);
}

VOID CDatabaseTMPacketHeader::Copy(CONST CDatabaseTMPacketHeader *pPacketHeader)
{
	m_szName = pPacketHeader->m_szName;
	m_nType = pPacketHeader->m_nType;
	m_nSubType = pPacketHeader->m_nSubType;
	m_nAPID = pPacketHeader->m_nAPID;
	m_nTMTypePos[0] = pPacketHeader->m_nTMTypePos[0];
	m_nTMTypePos[1] = pPacketHeader->m_nTMTypePos[1];
	m_nTMTypePos[2] = pPacketHeader->m_nTMTypePos[2];
	m_nTMIDPos[0] = pPacketHeader->m_nTMIDPos[0];
	m_nTMIDPos[1] = pPacketHeader->m_nTMIDPos[1];
	m_nTMIDPos[2] = pPacketHeader->m_nTMIDPos[2];
	m_n3DiscPos[0] = pPacketHeader->m_n3DiscPos[0];
	m_n3DiscPos[1] = pPacketHeader->m_n3DiscPos[1];
	m_n3DiscPos[2] = pPacketHeader->m_n3DiscPos[2];
	m_nTimestampPos[0] = pPacketHeader->m_nTimestampPos[0];
	m_nTimestampPos[1] = pPacketHeader->m_nTimestampPos[1];
	m_nTimestampPos[2] = pPacketHeader->m_nTimestampPos[2];
}

BOOL CDatabaseTMPacketHeader::Compare(CONST CDatabaseTMPacketHeader *pPacketHeader) CONST
{
	return((pPacketHeader->GetName() == GetName() && pPacketHeader->m_nType == m_nType  &&  pPacketHeader->m_nSubType == m_nSubType  &&  pPacketHeader->m_nAPID == m_nAPID  &&  pPacketHeader->m_nTMTypePos[0] == m_nTMTypePos[0] && pPacketHeader->m_nTMTypePos[1] == m_nTMTypePos[1] && pPacketHeader->m_nTMTypePos[2] == m_nTMTypePos[2] && pPacketHeader->m_nTMIDPos[0] == m_nTMIDPos[0] && pPacketHeader->m_nTMIDPos[1] == m_nTMIDPos[1] && pPacketHeader->m_nTMIDPos[2] == m_nTMIDPos[2] && pPacketHeader->m_n3DiscPos[0] == m_n3DiscPos[0] && pPacketHeader->m_n3DiscPos[1] == m_n3DiscPos[1] && pPacketHeader->m_n3DiscPos[2] == m_n3DiscPos[2] && pPacketHeader->m_nTimestampPos[0] == m_nTimestampPos[0] && pPacketHeader->m_nTimestampPos[1] == m_nTimestampPos[1] && pPacketHeader->m_nTimestampPos[2] == m_nTimestampPos[2]) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketHeader::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName)), sData.nType = m_nType, sData.nSubType = m_nSubType, sData.nAPID = m_nAPID, sData.nTMTypePos[0] = m_nTMTypePos[0], sData.nTMTypePos[1] = m_nTMTypePos[1], sData.nTMTypePos[2] = m_nTMTypePos[2], sData.nTMIDPos[0] = m_nTMIDPos[0], sData.nTMIDPos[1] = m_nTMIDPos[1], sData.nTMIDPos[2] = m_nTMIDPos[2], sData.n3DiscPos[0] = m_n3DiscPos[0], sData.n3DiscPos[1] = m_n3DiscPos[1], sData.n3DiscPos[2] = m_n3DiscPos[2], sData.nTimestampPos[0] = m_nTimestampPos[0], sData.nTimestampPos[1] = m_nTimestampPos[1], sData.nTimestampPos[2] = m_nTimestampPos[2]; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMPacketHeader::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName && sData.cbName > 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		m_nType = sData.nType;
		m_nSubType = sData.nSubType;
		m_nAPID = sData.nAPID;
		m_nTMTypePos[0] = sData.nTMTypePos[0];
		m_nTMTypePos[1] = sData.nTMTypePos[1];
		m_nTMTypePos[2] = sData.nTMTypePos[2];
		m_nTMIDPos[0] = sData.nTMIDPos[0];
		m_nTMIDPos[1] = sData.nTMIDPos[1];
		m_nTMIDPos[2] = sData.nTMIDPos[2];
		m_n3DiscPos[0] = sData.n3DiscPos[0];
		m_n3DiscPos[1] = sData.n3DiscPos[1];
		m_n3DiscPos[2] = sData.n3DiscPos[2];
		m_nTimestampPos[0] = sData.nTimestampPos[0];
		m_nTimestampPos[1] = sData.nTimestampPos[1];
		m_nTimestampPos[2] = sData.nTimestampPos[2];
		m_szName.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}

CString CDatabaseTMPacketHeader::ConstructName(INT nType, INT nSubType, INT nAPID)
{
	CString  szName;

	szName.Format((nAPID >= 0) ? STRING(IDS_TMPACKET_HEADERNAMEFULLFORMAT) : STRING(IDS_TMPACKET_HEADERNAMEFORMAT), nType, nSubType, nAPID);
	return szName;
}
BOOL CDatabaseTMPacketHeader::ParseName(LPCTSTR pszName, INT &nType, INT &nSubType, INT &nAPID)
{
	INT  nPos[2];
	CString  szName;
	CString  szType;
	CString  szAPID;
	CString  szSubType;

	for (szName = pszName, nType = -1, nSubType = -1, nAPID = -1; (nPos[0] = szName.Find(STRING(IDS_TMPACKET_NAMESEPARATOR))) > 0; )
	{
		for (szType = szName.Left(nPos[0]), szName = szName.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMESEPARATOR))); (nPos[1] = szName.Find(STRING(IDS_TMPACKET_NAMESEPARATOR))) > 0; )
		{
			for (szSubType = szName.Left(nPos[1]), szName = szName.Mid(nPos[1] + lstrlen(STRING(IDS_TMPACKET_NAMESEPARATOR))); szName.GetLength() > 0; )
			{
				szAPID = szName;
				break;
			}
			break;
		}
		for (szSubType = (nPos[1] > 0) ? szSubType : szName, szType = ((nPos[0] = szType.Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0 && (nPos[1] = szType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))).Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0) ? szType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER)), nPos[1]) : EMPTYSTRING, szSubType = ((nPos[0] = szSubType.Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0 && (nPos[1] = szSubType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))).Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0) ? szSubType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER)), nPos[1]) : EMPTYSTRING, szAPID = ((nPos[0] = szAPID.Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0 && (nPos[1] = szAPID.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))).Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0) ? szAPID.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER)), nPos[1]) : EMPTYSTRING; !szType.IsEmpty() && !szSubType.IsEmpty(); )
		{
			nAPID = (!szAPID.IsEmpty()) ? _ttoi(szAPID) : -1;
			nSubType = _ttoi(szSubType);
			nType = _ttoi(szType);
			return TRUE;
		}
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMPacketHeaders

CDatabaseTMPacketHeaders::CDatabaseTMPacketHeaders() : CPtrArray()
{
	return;
}

CDatabaseTMPacketHeaders::~CDatabaseTMPacketHeaders()
{
	RemoveAll();
}

INT CDatabaseTMPacketHeaders::Add(CDatabaseTMPacketHeader *pPacketHeader)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pPacketHeader->GetName(), TRUE)) >= 0) InsertAt(nIndex, pPacketHeader, 1);
	return nIndex;
}

INT CDatabaseTMPacketHeaders::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTMPacketHeader *CDatabaseTMPacketHeaders::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacketHeader *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacketHeader *)NULL);
}

CDatabaseTMPacketHeader *CDatabaseTMPacketHeaders::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacketHeader *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacketHeader *)NULL);
}

VOID CDatabaseTMPacketHeaders::RemoveAll()
{
	INT  nPacketHeader;
	INT  nPacketHeaders;
	CDatabaseTMPacketHeader  *pPacketHeader;

	for (nPacketHeader = 0, nPacketHeaders = (INT)GetSize(); nPacketHeader < nPacketHeaders; nPacketHeader++)
	{
		if ((pPacketHeader = GetAt(nPacketHeader))) delete pPacketHeader;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMPacketHeaders::Copy(CONST CDatabaseTMPacketHeaders *pPacketHeaders)
{
	INT  nPacketHeader;
	INT  nPacketHeaders;
	CDatabaseTMPacketHeader  *pPacketHeader;

	for (nPacketHeader = 0, nPacketHeaders = (INT)pPacketHeaders->GetSize(), RemoveAll(); nPacketHeader < nPacketHeaders; nPacketHeader++)
	{
		if ((pPacketHeader = new CDatabaseTMPacketHeader))
		{
			pPacketHeader->Copy(pPacketHeaders->GetAt(nPacketHeader));
			InsertAt(nPacketHeader, pPacketHeader, 1);
			continue;
		}
		break;
	}
	return((nPacketHeader == nPacketHeaders) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketHeaders::Compare(CONST CDatabaseTMPacketHeaders *pPacketHeaders) CONST
{
	INT  nIndex;
	INT  nPacketHeader;
	INT  nPacketHeaders;
	CDatabaseTMPacketHeader  *pPacketHeader;

	for (nPacketHeader = 0, nPacketHeaders = (pPacketHeaders->GetSize() == GetSize()) ? (INT)GetSize() : -1; nPacketHeader < nPacketHeaders; nPacketHeader++)
	{
		if ((pPacketHeader = pPacketHeaders->GetAt(nPacketHeader)) && (nIndex = Find(pPacketHeader->GetName())) >= 0 && pPacketHeader->Compare(GetAt(nIndex))) continue;
		break;
	}
	return((nPacketHeader == nPacketHeaders) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketHeaders::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nPacketHeader;
	INT  nPacketHeaders;
	CByteArray  nPacketHeadersData;
	CDatabaseTMPacketHeader  *pPacketHeader;

	for (nPacketHeader = 0, nPacketHeaders = (INT)GetSize(), nInfo.RemoveAll(); nPacketHeader < nPacketHeaders; nPacketHeader++)
	{
		if ((pPacketHeader = GetAt(nPacketHeader)) && pPacketHeader->Map(nPacketHeadersData, bBinary) && nInfo.Append(nPacketHeadersData) >= 0) continue;
		break;
	}
	return((nPacketHeader == nPacketHeaders) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketHeaders::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbPacketHeader;
	INT  cbPacketHeaders;
	CByteArray  nPacketHeadersData;
	CDatabaseTMPacketHeader  *pPacketHeader;

	for (cbPacketHeaders = 0, RemoveAll(); cbPacketHeaders < nInfo.GetSize(); cbPacketHeaders += cbPacketHeader)
	{
		for (CopyMemory(&cbPacketHeader, nInfo.GetData() + cbPacketHeaders, sizeof(cbPacketHeader)), nPacketHeadersData.SetSize(max(min(cbPacketHeader, nInfo.GetSize() - cbPacketHeaders), 0)); nPacketHeadersData.GetSize() >= 0; )
		{
			CopyMemory(nPacketHeadersData.GetData(), nInfo.GetData() + cbPacketHeaders, nPacketHeadersData.GetSize());
			break;
		}
		if ((pPacketHeader = new CDatabaseTMPacketHeader))
		{
			if (pPacketHeader->Unmap(nPacketHeadersData, bBinary) && Add(pPacketHeader) >= 0) continue;
			delete pPacketHeader;
		}
		break;
	}
	return((cbPacketHeaders == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTMPacketHeaders::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTMPacketHeader  *pPacketHeader;

	for (nIndex = nMinIndex = (bInsert) ? (INT)GetSize() : 0, nMaxIndex = (lstrlen(pszName) > 0) ? (INT)GetSize() : -1; nIndex < nMaxIndex; nIndex++)
	{
		if ((pPacketHeader = GetAt(nIndex)) && pPacketHeader->GetName() == pszName) break;
		continue;
	}
	return(((bInsert || nIndex < nMaxIndex) && nMaxIndex >= 0) ? nIndex : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMPacket

CDatabaseTMPacket::CDatabaseTMPacket() : CPtrArray()
{
	m_nTMType = 0;
	m_nTMID = 0;
	m_nAPID = 0;
	m_n3Disc = 0;
	m_cbData[0] = 0;
	m_cbData[1] = 0;
	m_nTrmRate = 0;
	m_nTrmRetries = 0;
	m_nVirtChannel = 0;
	m_nEventType = 0;
	m_nEventIDRef = -1;
	m_nTMIDPos[0] = 0;
	m_nTMIDPos[1] = 0;
	m_nTMIDPos[2] = 0;
	m_nTMTypePos[0] = 0;
	m_nTMTypePos[1] = 0;
	m_nTMTypePos[2] = 0;
	m_n3DiscPos[0] = 0;
	m_n3DiscPos[1] = 0;
	m_n3DiscPos[2] = 0;
	m_nTimestampPos[0] = 0;
	m_nTimestampPos[1] = 0;
	m_nTimestampPos[2] = 0;
	m_bCRCFieldCheck = FALSE;
	m_nStatus = TMPACKET_RECORDSTATUS_NONE;
}

CDatabaseTMPacket::~CDatabaseTMPacket()
{
	RemoveAll();
}

VOID CDatabaseTMPacket::SetTag(LPCTSTR pszTag)
{
	m_szTag = pszTag;
}

CString CDatabaseTMPacket::GetTag() CONST
{
	return m_szTag;
}

VOID CDatabaseTMPacket::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTMPacket::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTMPacket::SetDetails(LPCTSTR pszDetails)
{
	m_szDetails = pszDetails;
}

CString CDatabaseTMPacket::GetDetails() CONST
{
	return m_szDetails;
}

VOID CDatabaseTMPacket::SetTMType(INT nTMType)
{
	m_nTMType = nTMType;
}

INT CDatabaseTMPacket::GetTMType() CONST
{
	return m_nTMType;
}

VOID CDatabaseTMPacket::SetTMID(INT nTMID)
{
	m_nTMID = nTMID;
}

INT CDatabaseTMPacket::GetTMID() CONST
{
	return m_nTMID;
}

VOID CDatabaseTMPacket::SetAPID(INT nAPID)
{
	m_nAPID = nAPID;
}

INT CDatabaseTMPacket::GetAPID() CONST
{
	return m_nAPID;
}

VOID CDatabaseTMPacket::Set3Disc(INT n3Disc)
{
	m_n3Disc = n3Disc;
}

INT CDatabaseTMPacket::Get3Disc() CONST
{
	return m_n3Disc;
}

VOID CDatabaseTMPacket::SetDataFieldHeader(LPCTSTR pszName)
{
	m_szDataFieldHeader = pszName;
}

CString CDatabaseTMPacket::GetDataFieldHeader() CONST
{
	return m_szDataFieldHeader;
}

VOID CDatabaseTMPacket::SetDataFieldHeaderSize(INT cbData)
{
	m_cbData[0] = cbData;
}

INT CDatabaseTMPacket::GetDataFieldHeaderSize() CONST
{
	return m_cbData[0];
}

VOID CDatabaseTMPacket::SetTMTypePosition(INT nByte, INT nBit, INT nLength)
{
	m_nTMTypePos[0] = nByte;
	m_nTMTypePos[1] = nBit;
	m_nTMTypePos[2] = nLength;
}

BOOL CDatabaseTMPacket::GetTMTypePosition(INT &nByte, INT &nBit, INT &nLength) CONST
{
	nByte = m_nTMTypePos[0];
	nBit = m_nTMTypePos[1];
	nLength = m_nTMTypePos[2];
	return((m_nTMTypePos[2] > 0) ? TRUE : FALSE);
}

VOID CDatabaseTMPacket::SetTMIDPosition(INT nByte, INT nBit, INT nLength)
{
	m_nTMIDPos[0] = nByte;
	m_nTMIDPos[1] = nBit;
	m_nTMIDPos[2] = nLength;
}

BOOL CDatabaseTMPacket::GetTMIDPosition(INT &nByte, INT &nBit, INT &nLength) CONST
{
	nByte = m_nTMIDPos[0];
	nBit = m_nTMIDPos[1];
	nLength = m_nTMIDPos[2];
	return((m_nTMIDPos[2] > 0) ? TRUE : FALSE);
}

VOID CDatabaseTMPacket::Set3DiscPosition(INT nByte, INT nBit, INT nLength)
{
	m_n3DiscPos[0] = nByte;
	m_n3DiscPos[1] = nBit;
	m_n3DiscPos[2] = nLength;
}

BOOL CDatabaseTMPacket::Get3DiscPosition(INT &nByte, INT &nBit, INT &nLength) CONST
{
	nByte = m_n3DiscPos[0];
	nBit = m_n3DiscPos[1];
	nLength = m_n3DiscPos[2];
	return((m_n3DiscPos[2] > 0) ? TRUE : FALSE);
}

VOID CDatabaseTMPacket::SetTimestampPosition(INT nByte, INT nBit, INT nLength)
{
	m_nTimestampPos[0] = nByte;
	m_nTimestampPos[1] = nBit;
	m_nTimestampPos[2] = nLength;
}

BOOL CDatabaseTMPacket::GetTimestampPosition(INT &nByte, INT &nBit, INT &nLength) CONST
{
	nByte = m_nTimestampPos[0];
	nBit = m_nTimestampPos[1];
	nLength = m_nTimestampPos[2];
	return((m_nTimestampPos[2] > 0) ? TRUE : FALSE);
}

VOID CDatabaseTMPacket::SetDataSize(INT cbData)
{
	m_cbData[1] = cbData;
}

INT CDatabaseTMPacket::GetDataSize() CONST
{
	return m_cbData[1];
}

VOID CDatabaseTMPacket::SetTransmissionRate(INT nInterval)
{
	m_nTrmRate = nInterval;
}

INT CDatabaseTMPacket::GetTransmissionRate() CONST
{
	return m_nTrmRate;
}

VOID CDatabaseTMPacket::SetTransmissionRetries(INT nRetries)
{
	m_nTrmRetries = nRetries;
}

INT CDatabaseTMPacket::GetTransmissionRetries() CONST
{
	return m_nTrmRetries;
}

VOID CDatabaseTMPacket::SetVirtualChannel(INT nChannelID)
{
	m_nVirtChannel = nChannelID;
}

INT CDatabaseTMPacket::GetVirtualChannel() CONST
{
	return m_nVirtChannel;
}

VOID CDatabaseTMPacket::SetEventType(UINT nType)
{
	m_nEventType = nType;
}

UINT CDatabaseTMPacket::GetEventType() CONST
{
	return m_nEventType;
}

VOID CDatabaseTMPacket::SetEventIDMessage(LPCTSTR pszMessage)
{
	m_szEventIDMessage = pszMessage;
}

CString CDatabaseTMPacket::GetEventIDMessage() CONST
{
	return m_szEventIDMessage;
}

VOID CDatabaseTMPacket::SetEventIDParameter(LPCTSTR pszTag)
{
	m_szEventIDParameter = pszTag;
}

CString CDatabaseTMPacket::GetEventIDParameter() CONST
{
	return m_szEventIDParameter;
}

VOID CDatabaseTMPacket::SetEventIDParameterRef(INT nRef)
{
	m_nEventIDRef = nRef;
}

INT CDatabaseTMPacket::GetEventIDParameterRef() CONST
{
	return m_nEventIDRef;
}

VOID CDatabaseTMPacket::EnableCRCCheck(BOOL bEnable)
{
	m_bCRCFieldCheck = bEnable;
}

BOOL CDatabaseTMPacket::IsCRCCheckEnabled() CONST
{
	return m_bCRCFieldCheck;
}

VOID CDatabaseTMPacket::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTMPacket::GetStatus() CONST
{
	return m_nStatus;
}

VOID CDatabaseTMPacket::SetTriggerRefs(CONST CUIntArray &nRefs)
{
	m_nTriggerRefs.Copy(nRefs);
}

INT CDatabaseTMPacket::GetTriggerRefs(CUIntArray &nRefs) CONST
{
	nRefs.Copy(m_nTriggerRefs);
	return((INT)nRefs.GetSize());
}

INT CDatabaseTMPacket::Add(CDatabaseTMPacketParameter *pParameter)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pParameter->GetTag(), pParameter->GetBytePos(), pParameter->GetBitPos(), TRUE)) >= 0) InsertAt(nIndex, pParameter, 1);
	return nIndex;
}

INT CDatabaseTMPacket::Find(LPCTSTR pszTag, INT nOccurrence) CONST
{
	INT  nCount;
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (INT)GetSize(), nCount = 0; nParameter < nParameters; nParameter++)
	{
		if (GetAt(nParameter)->GetTag() == pszTag)
		{
			if (nCount++ == nOccurrence) break;
			continue;
		}
	}
	return((nOccurrence >= 0) ? ((nParameter < nParameters) ? nParameter : -1) : nCount);
}
INT CDatabaseTMPacket::Find(LPCTSTR pszTag, INT nBytePos, INT nBitPos) CONST
{
	return FindIndex(pszTag, nBytePos, nBitPos);
}

CDatabaseTMPacketParameter *CDatabaseTMPacket::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacketParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacketParameter *)NULL);
}

CDatabaseTMPacketParameter *CDatabaseTMPacket::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacketParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacketParameter *)NULL);
}

VOID CDatabaseTMPacket::RemoveAll()
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMPacketParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter))) delete pParameter;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMPacket::Copy(CONST CDatabaseTMPacket *pPacket)
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMPacketParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)pPacket->GetSize(), m_szTag = pPacket->m_szTag, m_szDescription = pPacket->m_szDescription, m_szDetails = pPacket->m_szDetails, m_szDataFieldHeader = pPacket->m_szDataFieldHeader, m_nTMType = pPacket->m_nTMType, m_nTMID = pPacket->m_nTMID, m_nAPID = pPacket->m_nAPID, m_n3Disc = pPacket->m_n3Disc, m_cbData[0] = pPacket->m_cbData[0], m_cbData[1] = pPacket->m_cbData[1], m_nTrmRate = pPacket->m_nTrmRate, m_nTrmRetries = pPacket->m_nTrmRetries, m_nVirtChannel = pPacket->m_nVirtChannel, m_nEventType = pPacket->m_nEventType, m_szEventIDMessage = pPacket->m_szEventIDMessage, m_szEventIDParameter = pPacket->m_szEventIDParameter, m_nEventIDRef = pPacket->m_nEventIDRef, m_nTMTypePos[0] = pPacket->m_nTMTypePos[0], m_nTMTypePos[1] = pPacket->m_nTMTypePos[1], m_nTMTypePos[2] = pPacket->m_nTMTypePos[2], m_nTMIDPos[0] = pPacket->m_nTMIDPos[0], m_nTMIDPos[1] = pPacket->m_nTMIDPos[1], m_nTMIDPos[2] = pPacket->m_nTMIDPos[2], m_n3DiscPos[0] = pPacket->m_n3DiscPos[0], m_n3DiscPos[1] = pPacket->m_n3DiscPos[1], m_n3DiscPos[2] = pPacket->m_n3DiscPos[2], m_nTimestampPos[0] = pPacket->m_nTimestampPos[0], m_nTimestampPos[1] = pPacket->m_nTimestampPos[1], m_nTimestampPos[2] = pPacket->m_nTimestampPos[2], m_nTriggerRefs.Copy(pPacket->m_nTriggerRefs), m_bCRCFieldCheck = pPacket->m_bCRCFieldCheck, m_nStatus = pPacket->m_nStatus, RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = new CDatabaseTMPacketParameter))
		{
			pParameter->Copy(pPacket->GetAt(nParameter));
			InsertAt(nParameter, pParameter, 1);
			continue;
		}
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacket::Compare(CONST CDatabaseTMPacket *pPacket) CONST
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMPacketParameter  *pParameter;

	for (nParameter = 0, nParameters = (pPacket->m_szTag == m_szTag && pPacket->m_szDescription == m_szDescription && pPacket->m_szDetails == m_szDetails && pPacket->m_szDataFieldHeader == m_szDataFieldHeader && pPacket->m_nTMType == m_nTMType && pPacket->m_nTMID == m_nTMID && pPacket->m_nAPID == m_nAPID && pPacket->m_n3Disc == m_n3Disc && pPacket->m_cbData[0] == m_cbData[0] && pPacket->m_cbData[1] == m_cbData[1] && pPacket->m_nTrmRate == m_nTrmRate && pPacket->m_nTrmRetries == m_nTrmRetries && pPacket->m_nVirtChannel == m_nVirtChannel && pPacket->m_nEventType == m_nEventType && pPacket->m_szEventIDMessage == m_szEventIDMessage && pPacket->m_szEventIDParameter == m_szEventIDParameter && pPacket->m_nEventIDRef == m_nEventIDRef && pPacket->m_nTMTypePos[0] == m_nTMTypePos[0] && pPacket->m_nTMTypePos[1] == m_nTMTypePos[1] && pPacket->m_nTMTypePos[2] == m_nTMTypePos[2] && pPacket->m_nTMIDPos[0] == m_nTMIDPos[0] && pPacket->m_nTMIDPos[1] == m_nTMIDPos[1] && pPacket->m_nTMIDPos[2] == m_nTMIDPos[2] && pPacket->m_n3DiscPos[0] == m_n3DiscPos[0] && pPacket->m_n3DiscPos[1] == m_n3DiscPos[1] && pPacket->m_n3DiscPos[2] == m_n3DiscPos[2] && pPacket->m_nTimestampPos[0] == m_nTimestampPos[0] && pPacket->m_nTimestampPos[1] == m_nTimestampPos[1] && pPacket->m_nTimestampPos[2] == m_nTimestampPos[2] && pPacket->m_nTriggerRefs.GetSize() == m_nTriggerRefs.GetSize() && !memcmp(pPacket->m_nTriggerRefs.GetData(), m_nTriggerRefs.GetData(), m_nTriggerRefs.GetSize()*sizeof(UINT)) && pPacket->m_bCRCFieldCheck == m_bCRCFieldCheck && pPacket->m_nStatus == m_nStatus && pPacket->GetSize() == GetSize()) ? (INT)GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = pPacket->GetAt(nParameter)) && pParameter->Compare(GetAt(nParameter))) continue;
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacket::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nParameter;
	INT  nParameters;
	CByteArray  nParametersData[2];
	CDatabaseTMPacketParameter  *pParameter;

	sData.cbTag = (m_szTag.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDetails = (m_szDetails.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	sData.cbEventIDMessage = (m_szEventIDMessage.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDataFieldHeader = (m_szDataFieldHeader.GetLength() + 1)*sizeof(TCHAR);
	sData.cbTriggerRefs = (bBinary) ? (INT)(m_nTriggerRefs.GetSize()*sizeof(UINT)) : 0;
	sData.cbEventIDParameter = (!bBinary) ? ((m_szEventIDParameter.GetLength() + 1)*sizeof(TCHAR)) : 0;
	for (nParameter = 0, nParameters = (INT)GetSize(), sData.nTMType = m_nTMType, sData.nTMID = m_nTMID, sData.nAPID = m_nAPID, sData.n3Disc = m_n3Disc, sData.cbData[0] = m_cbData[0], sData.cbData[1] = m_cbData[1], sData.nTrmRate = m_nTrmRate, sData.nTrmRetries = m_nTrmRetries, sData.nVirtChannel = m_nVirtChannel, sData.nEventType = m_nEventType, sData, sData.nEventIDRef = (bBinary) ? m_nEventIDRef : -1, sData.nTMTypePos[0] = m_nTMTypePos[0], sData.nTMTypePos[1] = m_nTMTypePos[1], sData.nTMTypePos[2] = m_nTMTypePos[2], sData.nTMIDPos[0] = m_nTMIDPos[0], sData.nTMIDPos[1] = m_nTMIDPos[1], sData.nTMIDPos[2] = m_nTMIDPos[2], sData.n3DiscPos[0] = m_n3DiscPos[0], sData.n3DiscPos[1] = m_n3DiscPos[1], sData.n3DiscPos[2] = m_n3DiscPos[2], sData.nTimestampPos[0] = m_nTimestampPos[0], sData.nTimestampPos[1] = m_nTimestampPos[1], sData.nTimestampPos[2] = m_nTimestampPos[2], sData.bCRCFieldCheck = m_bCRCFieldCheck, sData.nStatus = m_nStatus, sData.bBinary = bBinary; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)) && pParameter->Map(nParametersData[1], bBinary) && nParametersData[0].Append(nParametersData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbTag + sData.cbDescription + sData.cbDetails + (sData.cbParameters = (INT)(nParametersData[0].GetSize()*sizeof(BYTE))) + sData.cbTriggerRefs + sData.cbDataFieldHeader + sData.cbEventIDMessage + sData.cbEventIDParameter)); nInfo.GetSize() == sData.cbSize && nParameter == nParameters; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szTag, sData.cbTag);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTag), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szDetails, sData.cbDetails);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDetails), (LPCTSTR)m_szDataFieldHeader, sData.cbDataFieldHeader);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDataFieldHeader), (LPCTSTR)m_szEventIDMessage, sData.cbEventIDMessage);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbEventIDMessage), (LPCTSTR)m_szEventIDParameter, sData.cbEventIDParameter);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbEventIDParameter), m_nTriggerRefs.GetData(), sData.cbTriggerRefs);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTriggerRefs), nParametersData[0].GetData(), sData.cbParameters);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMPacket::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbParameter;
	INT  cbParameters;
	CByteArray  nParametersData[2];
	CDatabaseTMPacketParameter  *pParameter;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbTag + sData.cbDescription + sData.cbDetails + sData.cbDataFieldHeader + sData.cbEventIDMessage + sData.cbEventIDParameter + sData.cbTriggerRefs + sData.cbParameters && sData.cbTag > 0 && sData.cbDescription > 0 && sData.cbDetails > 0 && sData.cbDataFieldHeader >= 0 && sData.cbEventIDMessage > 0 && sData.cbEventIDParameter >= 0 && sData.cbTriggerRefs >= 0 && sData.cbParameters >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szTag.GetBufferSetLength(STRINGCHARS(sData.cbTag)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbTag));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbTag), STRINGBYTES(sData.cbDescription));
		CopyMemory(m_szDetails.GetBufferSetLength(STRINGCHARS(sData.cbDetails)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbDetails));
		CopyMemory(m_szDataFieldHeader.GetBufferSetLength(STRINGCHARS(sData.cbDataFieldHeader)), nInfo.GetData() + (cbData = cbData + sData.cbDetails), STRINGBYTES(sData.cbDataFieldHeader));
		CopyMemory(m_szEventIDMessage.GetBufferSetLength(STRINGCHARS(sData.cbEventIDMessage)), nInfo.GetData() + (cbData = cbData + sData.cbDataFieldHeader), STRINGBYTES(sData.cbEventIDMessage));
		CopyMemory(m_szEventIDParameter.GetBufferSetLength(STRINGCHARS(sData.cbEventIDParameter)), nInfo.GetData() + (cbData = cbData + sData.cbEventIDMessage), STRINGBYTES(sData.cbEventIDParameter));
		for (m_nTriggerRefs.SetSize(sData.cbTriggerRefs / sizeof(UINT)), nParametersData[0].SetSize(sData.cbParameters), CopyMemory(m_nTriggerRefs.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbEventIDParameter), sData.cbTriggerRefs), CopyMemory(nParametersData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbTriggerRefs), sData.cbParameters), m_nTMType = sData.nTMType, m_nTMID = sData.nTMID, m_nAPID = sData.nAPID, m_n3Disc = sData.n3Disc, m_cbData[0] = sData.cbData[0], m_cbData[1] = sData.cbData[1], m_nTrmRate = sData.nTrmRate, m_nTrmRetries = sData.nTrmRetries, m_nVirtChannel = sData.nVirtChannel, m_nEventType = sData.nEventType, m_nEventIDRef = sData.nEventIDRef, m_nTMTypePos[0] = sData.nTMTypePos[0], m_nTMTypePos[1] = sData.nTMTypePos[1], m_nTMTypePos[2] = sData.nTMTypePos[2], m_nTMIDPos[0] = sData.nTMIDPos[0], m_nTMIDPos[1] = sData.nTMIDPos[1], m_nTMIDPos[2] = sData.nTMIDPos[2], m_n3DiscPos[0] = sData.n3DiscPos[0], m_n3DiscPos[1] = sData.n3DiscPos[1], m_n3DiscPos[2] = sData.n3DiscPos[2], m_nTimestampPos[0] = sData.nTimestampPos[0], m_nTimestampPos[1] = sData.nTimestampPos[1], m_nTimestampPos[2] = sData.nTimestampPos[2], m_bCRCFieldCheck = sData.bCRCFieldCheck, m_nStatus = sData.nStatus, m_szTag.ReleaseBuffer(), m_szDetails.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), m_szDataFieldHeader.ReleaseBuffer(), m_szEventIDMessage.ReleaseBuffer(), m_szEventIDParameter.ReleaseBuffer(), RemoveAll(), cbParameter = cbParameters = 0; cbParameters < sData.cbParameters; cbParameters += cbParameter)
		{
			for (CopyMemory(&cbParameter, nParametersData[0].GetData() + cbParameters, sizeof(cbParameter)), nParametersData[1].SetSize(max(min(cbParameter, nParametersData[0].GetSize() - cbParameters), 0)); nParametersData[1].GetSize() >= 0; )
			{
				CopyMemory(nParametersData[1].GetData(), nParametersData[0].GetData() + cbParameters, nParametersData[1].GetSize());
				break;
			}
			if ((pParameter = new CDatabaseTMPacketParameter))
			{
				if (pParameter->Unmap(nParametersData[1], bBinary) && Add(pParameter) >= 0) continue;
				delete pParameter;
			}
			break;
		}
		return((cbParameters == sData.cbParameters) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTMPacket::FindIndex(LPCTSTR pszTag, INT nBytePos, INT nBitPos, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	INT  nBitOffset[2];
	CDatabaseTMPacketParameter  *pParameter;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2, nBitOffset[0] = 8 * nBytePos + nBitPos; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pParameter = GetAt(nIndex[0]))) ? (((nIndex[1] = ((nBitOffset[1] = 8 * pParameter->GetBytePos() + pParameter->GetBitPos()) == nBitOffset[0] && pParameter->GetTag().Compare(pszTag) <= 0) || nBitOffset[0] > nBitOffset[1])) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((pParameter = GetAt(nIndex[0])) && pParameter->GetTag() == pszTag  &&  pParameter->GetBytePos() == nBytePos  &&  pParameter->GetBitPos() == nBitPos) ? ((!bInsert) ? nIndex[0] : -1) : (bInsert) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMPackets

CDatabaseTMPackets::CDatabaseTMPackets() : CPtrArray()
{
	return;
}

CDatabaseTMPackets::~CDatabaseTMPackets()
{
	RemoveAll();
}

INT CDatabaseTMPackets::Add(CDatabaseTMPacket *pPacket)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pPacket->GetTag(), TRUE)) >= 0) InsertAt(nIndex, pPacket, 1);
	return nIndex;
}

INT CDatabaseTMPackets::Find(LPCTSTR pszTag) CONST
{
	return FindIndex(pszTag);
}

CDatabaseTMPacket *CDatabaseTMPackets::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacket *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacket *)NULL);
}

CDatabaseTMPacket *CDatabaseTMPackets::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacket *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacket *)NULL);
}

VOID CDatabaseTMPackets::RemoveAll()
{
	INT  nPacket;
	INT  nPackets;
	CDatabaseTMPacket  *pPacket;

	for (nPacket = 0, nPackets = (INT)GetSize(); nPacket < nPackets; nPacket++)
	{
		if ((pPacket = GetAt(nPacket))) delete pPacket;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMPackets::Copy(CONST CDatabaseTMPackets *pPackets)
{
	INT  nPacket;
	INT  nPackets;
	CDatabaseTMPacket  *pPacket;

	for (nPacket = 0, nPackets = (INT)pPackets->GetSize(), RemoveAll(); nPacket < nPackets; nPacket++)
	{
		if ((pPacket = new CDatabaseTMPacket))
		{
			if (pPacket->Copy(pPackets->GetAt(nPacket)))
			{
				InsertAt(nPacket, pPacket, 1);
				continue;
			}
			delete pPacket;
		}
		break;
	}
	return((nPacket == nPackets) ? TRUE : FALSE);
}

BOOL CDatabaseTMPackets::Compare(CONST CDatabaseTMPackets *pPackets) CONST
{
	INT  nPacket;
	INT  nPackets;

	for (nPacket = 0, nPackets = (pPackets->GetSize() == GetSize()) ? (INT)GetSize() : -1; nPacket < nPackets; nPacket++)
	{
		if (!pPackets->GetAt(nPacket)->Compare(GetAt(nPacket))) break;
		continue;
	}
	return((nPacket == nPackets) ? TRUE : FALSE);
}

BOOL CDatabaseTMPackets::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nPacket;
	INT  nPackets;
	CByteArray  nPacketsData;
	CDatabaseTMPacket  *pPacket;

	for (nPacket = 0, nPackets = (INT)GetSize(), nInfo.RemoveAll(); nPacket < nPackets; nPacket++)
	{
		if ((pPacket = GetAt(nPacket)) && pPacket->Map(nPacketsData, bBinary) && nInfo.Append(nPacketsData) >= 0) continue;
		break;
	}
	return((nPacket == nPackets) ? TRUE : FALSE);
}

BOOL CDatabaseTMPackets::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbPacket;
	INT  cbPackets;
	CByteArray  nPacketsData;
	CDatabaseTMPacket  *pPacket;

	for (cbPackets = 0, RemoveAll(); cbPackets < nInfo.GetSize(); cbPackets += cbPacket)
	{
		for (CopyMemory(&cbPacket, nInfo.GetData() + cbPackets, sizeof(cbPacket)), nPacketsData.SetSize(max(min(cbPacket, nInfo.GetSize() - cbPackets), 0)); nPacketsData.GetSize() >= 0; )
		{
			CopyMemory(nPacketsData.GetData(), nInfo.GetData() + cbPackets, nPacketsData.GetSize());
			break;
		}
		if ((pPacket = new CDatabaseTMPacket))
		{
			if (pPacket->Unmap(nPacketsData, bBinary) && Add(pPacket) >= 0) continue;
			delete pPacket;
		}
		break;
	}
	return((cbPackets == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTMPackets::FindIndex(LPCTSTR pszTag, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTMPacket  *pPacket;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pPacket = GetAt(nIndex[0]))) ? ((nIndex[1] = (pPacket->GetTag() <= pszTag)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pPacket = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pPacket->GetTag() == pszTag) || (bInsert && (((pPacket = GetAt(max(nIndex[0] - 1, 0))) && pPacket->GetTag() != pszTag && (pPacket = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pPacket->GetTag() != pszTag) || !GetSize()) && lstrlen(pszTag) > 0)) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMPacketStream

CDatabaseTMPacketStream::CDatabaseTMPacketStream() : CObject()
{
	m_nType = 0;
	m_nSubType = 0;
	m_nAPID = -1;
	m_nTMID = 0;
	m_nPeriod = 0;
	m_nTimeout = 0;
	m_nValidityParameterRef = -1;
	m_nValidityValue = (ULONGLONG)-1;
}

VOID CDatabaseTMPacketStream::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTMPacketStream::GetName() CONST
{
	return(((m_nType != 0 || m_nSubType != 0 || m_nAPID != -1) && m_szName.IsEmpty()) ? ConstructName(m_nType, m_nSubType, m_nAPID) : m_szName);
}

VOID CDatabaseTMPacketStream::SetType(INT nType)
{
	m_nType = nType;
}

INT CDatabaseTMPacketStream::GetType() CONST
{
	return m_nType;
}

VOID CDatabaseTMPacketStream::SetSubType(INT nSubType)
{
	m_nSubType = nSubType;
}

INT CDatabaseTMPacketStream::GetSubType() CONST
{
	return m_nSubType;
}

VOID CDatabaseTMPacketStream::SetAPID(INT nAPID)
{
	m_nAPID = nAPID;
}

INT CDatabaseTMPacketStream::GetAPID() CONST
{
	return m_nAPID;
}

VOID CDatabaseTMPacketStream::SetTMID(INT nTMID)
{
	m_nTMID = nTMID;
}

INT CDatabaseTMPacketStream::GetTMID() CONST
{
	return m_nTMID;
}

VOID CDatabaseTMPacketStream::SetPeriod(INT nPeriod)
{
	m_nPeriod = nPeriod;
}

INT CDatabaseTMPacketStream::GetPeriod() CONST
{
	return m_nPeriod;
}

VOID CDatabaseTMPacketStream::SetTimeout(INT nTimeout)
{
	m_nTimeout = nTimeout;
}

INT CDatabaseTMPacketStream::GetTimeout() CONST
{
	return m_nTimeout;
}

VOID CDatabaseTMPacketStream::SetValidityParameter(LPCTSTR pszTag)
{
	m_szTag = pszTag;
}

CString CDatabaseTMPacketStream::GetValidityParameter() CONST
{
	return m_szTag;
}

VOID CDatabaseTMPacketStream::SetValidityParameterRef(INT nRef)
{
	m_nValidityParameterRef = nRef;
}

INT CDatabaseTMPacketStream::GetValidityParameterRef() CONST
{
	return m_nValidityParameterRef;
}

VOID CDatabaseTMPacketStream::SetValidityValue(ULONGLONG nValue)
{
	m_nValidityValue = nValue;
}

ULONGLONG CDatabaseTMPacketStream::GetValidityValue() CONST
{
	return m_nValidityValue;
}

VOID CDatabaseTMPacketStream::Copy(CONST CDatabaseTMPacketStream *pPacketStream)
{
	m_szName = pPacketStream->m_szName;
	m_szTag = pPacketStream->m_szTag;
	m_nType = pPacketStream->m_nType;
	m_nSubType = pPacketStream->m_nSubType;
	m_nAPID = pPacketStream->m_nAPID;
	m_nTMID = pPacketStream->m_nTMID;
	m_nPeriod = pPacketStream->m_nPeriod;
	m_nTimeout = pPacketStream->m_nTimeout;
	m_nValidityValue = pPacketStream->m_nValidityValue;
	m_nValidityParameterRef = pPacketStream->m_nValidityParameterRef;
}

BOOL CDatabaseTMPacketStream::Compare(CONST CDatabaseTMPacketStream *pPacketStream) CONST
{
	return((pPacketStream->GetName() == GetName() && pPacketStream->m_szTag == m_szTag  &&  pPacketStream->m_nType == m_nType  &&  pPacketStream->m_nSubType == m_nSubType  &&  pPacketStream->m_nAPID == m_nAPID  &&  pPacketStream->m_nTMID == m_nTMID  &&  pPacketStream->m_nPeriod == m_nPeriod  &&  pPacketStream->m_nTimeout == m_nTimeout  &&  pPacketStream->m_nValidityValue == m_nValidityValue  &&  pPacketStream->m_nValidityParameterRef == m_nValidityParameterRef) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketStream::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbTag = (!bBinary) ? ((m_szTag.GetLength() + 1)*sizeof(TCHAR)) : 0;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbTag)), sData.nType = m_nType, sData.nSubType = m_nSubType, sData.nAPID = m_nAPID, sData.nTMID = m_nTMID, sData.nPeriod = m_nPeriod, sData.nTimeout = m_nTimeout, sData.nValidityValue = m_nValidityValue, sData.nValidityParameterRef = m_nValidityParameterRef, sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szTag, sData.cbTag);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMPacketStream::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbTag && sData.cbName > 0 && sData.cbTag >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szTag.GetBufferSetLength(STRINGCHARS(sData.cbTag)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbTag));
		m_nType = sData.nType;
		m_nSubType = sData.nSubType;
		m_nAPID = sData.nAPID;
		m_nTMID = sData.nTMID;
		m_nPeriod = sData.nPeriod;
		m_nTimeout = sData.nTimeout;
		m_nValidityValue = sData.nValidityValue;
		m_nValidityParameterRef = sData.nValidityParameterRef;
		m_szName.ReleaseBuffer();
		m_szTag.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}

CString CDatabaseTMPacketStream::ConstructName(INT nType, INT nSubType, INT nAPID)
{
	CString  szName;

	szName.Format((nAPID >= 0) ? STRING(IDS_TMPACKET_STREAMNAMEFULLFORMAT) : STRING(IDS_TMPACKET_STREAMNAMEFORMAT), nType, nSubType, nAPID);
	return szName;
}
BOOL CDatabaseTMPacketStream::ParseName(LPCTSTR pszName, INT &nType, INT &nSubType, INT &nAPID)
{
	INT  nPos[2];
	CString  szName;
	CString  szType;
	CString  szAPID;
	CString  szSubType;

	for (szName = pszName, nType = -1, nSubType = -1, nAPID = -1; (nPos[0] = szName.Find(STRING(IDS_TMPACKET_NAMESEPARATOR))) > 0; )
	{
		for (szType = szName.Left(nPos[0]), szName = szName.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMESEPARATOR))); (nPos[1] = szName.Find(STRING(IDS_TMPACKET_NAMESEPARATOR))) > 0; )
		{
			for (szSubType = szName.Left(nPos[1]), szName = szName.Mid(nPos[1] + lstrlen(STRING(IDS_TMPACKET_NAMESEPARATOR))); szName.GetLength() > 0; )
			{
				szAPID = szName;
				break;
			}
			break;
		}
		for (szSubType = (nPos[1] > 0) ? szSubType : szName, szType = ((nPos[0] = szType.Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0 && (nPos[1] = szType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))).Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0) ? szType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER)), nPos[1]) : EMPTYSTRING, szSubType = ((nPos[0] = szSubType.Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0 && (nPos[1] = szSubType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))).Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0) ? szSubType.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER)), nPos[1]) : EMPTYSTRING, szAPID = ((nPos[0] = szAPID.Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0 && (nPos[1] = szAPID.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))).Find(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER))) > 0) ? szAPID.Mid(nPos[0] + lstrlen(STRING(IDS_TMPACKET_NAMEVALUEDELIMITER)), nPos[1]) : EMPTYSTRING; !szType.IsEmpty() && !szSubType.IsEmpty(); )
		{
			nAPID = (!szAPID.IsEmpty()) ? _ttoi(szAPID) : -1;
			nSubType = _ttoi(szSubType);
			nType = _ttoi(szType);
			return TRUE;
		}
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMPacketStreams

CDatabaseTMPacketStreams::CDatabaseTMPacketStreams() : CPtrArray()
{
	return;
}

CDatabaseTMPacketStreams::~CDatabaseTMPacketStreams()
{
	RemoveAll();
}

INT CDatabaseTMPacketStreams::Add(CDatabaseTMPacketStream *pPacketStream)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pPacketStream->GetName(), TRUE)) >= 0) InsertAt(nIndex, pPacketStream, 1);
	return nIndex;
}

INT CDatabaseTMPacketStreams::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTMPacketStream *CDatabaseTMPacketStreams::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacketStream *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacketStream *)NULL);
}

CDatabaseTMPacketStream *CDatabaseTMPacketStreams::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacketStream *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacketStream *)NULL);
}

VOID CDatabaseTMPacketStreams::RemoveAll()
{
	INT  nPacketStream;
	INT  nPacketStreams;
	CDatabaseTMPacketStream  *pPacketStream;

	for (nPacketStream = 0, nPacketStreams = (INT)GetSize(); nPacketStream < nPacketStreams; nPacketStream++)
	{
		if ((pPacketStream = GetAt(nPacketStream))) delete pPacketStream;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMPacketStreams::Copy(CONST CDatabaseTMPacketStreams *pPacketStreams)
{
	INT  nPacketStream;
	INT  nPacketStreams;
	CDatabaseTMPacketStream  *pPacketStream;

	for (nPacketStream = 0, nPacketStreams = (INT)pPacketStreams->GetSize(), RemoveAll(); nPacketStream < nPacketStreams; nPacketStream++)
	{
		if ((pPacketStream = new CDatabaseTMPacketStream))
		{
			pPacketStream->Copy(pPacketStreams->GetAt(nPacketStream));
			InsertAt(nPacketStream, pPacketStream, 1);
			continue;
		}
		break;
	}
	return((nPacketStream == nPacketStreams) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketStreams::Compare(CONST CDatabaseTMPacketStreams *pPacketStreams) CONST
{
	INT  nIndex;
	INT  nPacketStream;
	INT  nPacketStreams;
	CDatabaseTMPacketStream  *pPacketStream;

	for (nPacketStream = 0, nPacketStreams = (pPacketStreams->GetSize() == GetSize()) ? (INT)GetSize() : -1; nPacketStream < nPacketStreams; nPacketStream++)
	{
		if ((pPacketStream = pPacketStreams->GetAt(nPacketStream)) && (nIndex = Find(pPacketStream->GetName())) >= 0 && pPacketStream->Compare(GetAt(nIndex))) continue;
		break;
	}
	return((nPacketStream == nPacketStreams) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketStreams::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nPacketStream;
	INT  nPacketStreams;
	CByteArray  nPacketStreamsData;
	CDatabaseTMPacketStream  *pPacketStream;

	for (nPacketStream = 0, nPacketStreams = (INT)GetSize(), nInfo.RemoveAll(); nPacketStream < nPacketStreams; nPacketStream++)
	{
		if ((pPacketStream = GetAt(nPacketStream)) && pPacketStream->Map(nPacketStreamsData, bBinary) && nInfo.Append(nPacketStreamsData) >= 0) continue;
		break;
	}
	return((nPacketStream == nPacketStreams) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketStreams::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbPacketStream;
	INT  cbPacketStreams;
	CByteArray  nPacketStreamsData;
	CDatabaseTMPacketStream  *pPacketStream;

	for (cbPacketStreams = 0, RemoveAll(); cbPacketStreams < nInfo.GetSize(); cbPacketStreams += cbPacketStream)
	{
		for (CopyMemory(&cbPacketStream, nInfo.GetData() + cbPacketStreams, sizeof(cbPacketStream)), nPacketStreamsData.SetSize(max(min(cbPacketStream, nInfo.GetSize() - cbPacketStreams), 0)); nPacketStreamsData.GetSize() >= 0; )
		{
			CopyMemory(nPacketStreamsData.GetData(), nInfo.GetData() + cbPacketStreams, nPacketStreamsData.GetSize());
			break;
		}
		if ((pPacketStream = new CDatabaseTMPacketStream))
		{
			if (pPacketStream->Unmap(nPacketStreamsData, bBinary) && Add(pPacketStream) >= 0) continue;
			delete pPacketStream;
		}
		break;
	}
	return((cbPacketStreams == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTMPacketStreams::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTMPacketStream  *pPacketStream;

	for (nIndex = nMinIndex = (bInsert) ? (INT)GetSize() : 0, nMaxIndex = (lstrlen(pszName) > 0) ? (INT)GetSize() : -1; nIndex < nMaxIndex; nIndex++)
	{
		if ((pPacketStream = GetAt(nIndex)) && pPacketStream->GetName() == pszName) break;
		continue;
	}
	return(((bInsert || nIndex < nMaxIndex) && nMaxIndex >= 0) ? nIndex : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMPacketGroup

CDatabaseTMPacketGroup::CDatabaseTMPacketGroup() : CStringArray()
{
	return;
}

CDatabaseTMPacketGroup::~CDatabaseTMPacketGroup()
{
	RemoveAll();
}

VOID CDatabaseTMPacketGroup::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTMPacketGroup::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTMPacketGroup::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTMPacketGroup::GetDescription() CONST
{
	return m_szDescription;
}

INT CDatabaseTMPacketGroup::Add(LPCTSTR pszTag)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pszTag, TRUE)) >= 0) InsertAt(nIndex, pszTag);
	return nIndex;
}

INT CDatabaseTMPacketGroup::Find(LPCTSTR pszTag) CONST
{
	return FindIndex(pszTag);
}

CString CDatabaseTMPacketGroup::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? CStringArray::GetAt(nIndex) : EMPTYSTRING);
}

CString CDatabaseTMPacketGroup::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? CStringArray::GetAt(nIndex) : EMPTYSTRING);
}

VOID CDatabaseTMPacketGroup::RemoveAll()
{
	CStringArray::RemoveAll();
}

BOOL CDatabaseTMPacketGroup::Copy(CONST CDatabaseTMPacketGroup *pPacketGroup)
{
	INT  nPacket;
	INT  nPackets;

	for (nPacket = 0, nPackets = (INT)pPacketGroup->GetSize(), RemoveAll(), m_szName = pPacketGroup->m_szName, m_szDescription = pPacketGroup->m_szDescription; nPacket < nPackets; nPacket++)
	{
		SetAtGrow(nPacket, pPacketGroup->GetAt(nPacket));
		continue;
	}
	return((pPacketGroup->GetSize() == GetSize()) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketGroup::Compare(CONST CDatabaseTMPacketGroup *pPacketGroup) CONST
{
	INT  nPacket;
	INT  nPackets;

	for (nPacket = 0, nPackets = (pPacketGroup->m_szName == m_szName && pPacketGroup->m_szDescription == m_szDescription && pPacketGroup->GetSize() == GetSize()) ? (INT)pPacketGroup->GetSize() : -1; nPacket < nPackets; nPacket++)
	{
		if (Find(pPacketGroup->GetAt(nPacket)) >= 0) continue;
		break;
	}
	return((nPacket == nPackets) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketGroup::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nPacket;
	INT  nPackets;
	CByteArray  nPacketsData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nPacket = 0, nPackets = (INT)GetSize(); nPacket < nPackets; nPacket++)
	{
		nPacketsData.SetSize(nPacketsData.GetSize() + (cbData = ((GetAt(nPacket).GetLength() + 1)*sizeof(TCHAR))));
		CopyMemory(nPacketsData.GetData() + nPacketsData.GetSize() - cbData, (LPCTSTR)GetAt(nPacket), cbData);
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + (sData.cbPackets = (INT)(nPacketsData.GetSize()*sizeof(BYTE))))), sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), GetData(), sData.cbPackets);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMPacketGroup::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbPacket;
	INT  cbPackets;
	CByteArray  nPacketsData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbPackets && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbPackets >= 0 && sData.bBinary == bBinary; )
	{
		for (nPacketsData.SetSize(sData.cbPackets), CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription)), CopyMemory(nPacketsData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbDescription), sData.cbPackets), RemoveAll(), cbPackets = 0; cbPackets < nPacketsData.GetSize(); cbPackets += cbPacket)
		{
			SetAtGrow(GetSize(), (LPCTSTR)(nPacketsData.GetData() + cbPackets));
			cbPacket = (GetAt((INT)GetUpperBound()).GetLength() + 1)*sizeof(TCHAR);
		}
		m_szDescription.ReleaseBuffer();
		m_szName.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}

INT CDatabaseTMPacketGroup::FindIndex(LPCTSTR pszTag, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = 0, nCount = (INT)GetSize(); nIndex < nCount; nIndex++)
	{
		if (GetAt(nIndex) == pszTag) break;
		continue;
	}
	return(((!bInsert  &&  nIndex < nCount) || (bInsert  &&  nIndex == GetCount())) ? nIndex : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMPacketGroups

CDatabaseTMPacketGroups::CDatabaseTMPacketGroups() : CPtrArray()
{
	return;
}

CDatabaseTMPacketGroups::~CDatabaseTMPacketGroups()
{
	RemoveAll();
}

INT CDatabaseTMPacketGroups::Add(CDatabaseTMPacketGroup *pPacketGroup)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pPacketGroup->GetName(), TRUE)) >= 0) InsertAt(nIndex, pPacketGroup, 1);
	return nIndex;
}

INT CDatabaseTMPacketGroups::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTMPacketGroup *CDatabaseTMPacketGroups::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacketGroup *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacketGroup *)NULL);
}

CDatabaseTMPacketGroup *CDatabaseTMPacketGroups::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMPacketGroup *)CPtrArray::GetAt(nIndex) : (CDatabaseTMPacketGroup *)NULL);
}

VOID CDatabaseTMPacketGroups::RemoveAll()
{
	INT  nPacketGroup;
	INT  nPacketGroups;
	CDatabaseTMPacketGroup  *pPacketGroup;

	for (nPacketGroup = 0, nPacketGroups = (INT)GetSize(); nPacketGroup < nPacketGroups; nPacketGroup++)
	{
		if ((pPacketGroup = GetAt(nPacketGroup))) delete pPacketGroup;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMPacketGroups::Copy(CONST CDatabaseTMPacketGroups *pPacketGroups)
{
	INT  nPacketGroup;
	INT  nPacketGroups;
	CDatabaseTMPacketGroup  *pPacketGroup;

	for (nPacketGroup = 0, nPacketGroups = (INT)pPacketGroups->GetSize(), RemoveAll(); nPacketGroup < nPacketGroups; nPacketGroup++)
	{
		if ((pPacketGroup = new CDatabaseTMPacketGroup))
		{
			pPacketGroup->Copy(pPacketGroups->GetAt(nPacketGroup));
			InsertAt(nPacketGroup, pPacketGroup, 1);
			continue;
		}
		break;
	}
	return((nPacketGroup == nPacketGroups) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketGroups::Compare(CONST CDatabaseTMPacketGroups *pPacketGroups) CONST
{
	INT  nPacketGroup;
	INT  nPacketGroups;

	for (nPacketGroup = 0, nPacketGroups = (pPacketGroups->GetSize() == GetSize()) ? (INT)GetSize() : -1; nPacketGroup < nPacketGroups; nPacketGroup++)
	{
		if (!pPacketGroups->GetAt(nPacketGroup)->Compare(GetAt(nPacketGroup))) break;
		continue;
	}
	return((nPacketGroup == nPacketGroups) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketGroups::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nPacketGroup;
	INT  nPacketGroups;
	CByteArray  nPacketGroupsData;
	CDatabaseTMPacketGroup  *pPacketGroup;

	for (nPacketGroup = 0, nPacketGroups = (INT)GetSize(), nInfo.RemoveAll(); nPacketGroup < nPacketGroups; nPacketGroup++)
	{
		if ((pPacketGroup = GetAt(nPacketGroup)) && pPacketGroup->Map(nPacketGroupsData, bBinary) && nInfo.Append(nPacketGroupsData) >= 0) continue;
		break;
	}
	return((nPacketGroup == nPacketGroups) ? TRUE : FALSE);
}

BOOL CDatabaseTMPacketGroups::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbPacketGroup;
	INT  cbPacketGroups;
	CByteArray  nPacketGroupsData;
	CDatabaseTMPacketGroup  *pPacketGroup;

	for (cbPacketGroups = 0, RemoveAll(); cbPacketGroups < nInfo.GetSize(); cbPacketGroups += cbPacketGroup)
	{
		for (CopyMemory(&cbPacketGroup, nInfo.GetData() + cbPacketGroups, sizeof(cbPacketGroup)), nPacketGroupsData.SetSize(max(min(cbPacketGroup, nInfo.GetSize() - cbPacketGroups), 0)); nPacketGroupsData.GetSize() >= 0; )
		{
			CopyMemory(nPacketGroupsData.GetData(), nInfo.GetData() + cbPacketGroups, nPacketGroupsData.GetSize());
			break;
		}
		if ((pPacketGroup = new CDatabaseTMPacketGroup))
		{
			if (pPacketGroup->Unmap(nPacketGroupsData, bBinary) && Add(pPacketGroup) >= 0) continue;
			delete pPacketGroup;
		}
		break;
	}
	return((cbPacketGroups == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTMPacketGroups::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTMPacketGroup  *pPacketGroup;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pPacketGroup = GetAt(nIndex[0]))) ? ((nIndex[1] = (pPacketGroup->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pPacketGroup = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pPacketGroup->GetName() == pszName) || (bInsert && (((pPacketGroup = GetAt(max(nIndex[0] - 1, 0))) && pPacketGroup->GetName() != pszName && (pPacketGroup = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pPacketGroup->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCPacketParameter

CDatabaseTCPacketParameter::CDatabaseTCPacketParameter() : CObject()
{
	m_nAttributes = 0;
	m_nConstValue = 0;
	m_bConstValue = FALSE;
	m_nBytePos = 0;
	m_nBitPos = 0;
	m_nWidth = 0;
	m_nRef = -1;
}

VOID CDatabaseTCPacketParameter::SetTag(LPCTSTR pszTag)
{
	m_szTag = pszTag;
}

CString CDatabaseTCPacketParameter::GetTag() CONST
{
	return m_szTag;
}

VOID CDatabaseTCPacketParameter::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCPacketParameter::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTCPacketParameter::SetAttributes(ULONGLONG nAttributes)
{
	m_nAttributes = nAttributes;
}

ULONGLONG CDatabaseTCPacketParameter::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCPacketParameter::SetBytePos(INT nPos)
{
	m_nBytePos = nPos;
}

INT CDatabaseTCPacketParameter::GetBytePos() CONST
{
	return m_nBytePos;
}

VOID CDatabaseTCPacketParameter::SetBitPos(INT nPos)
{
	m_nBitPos = nPos;
}

INT CDatabaseTCPacketParameter::GetBitPos() CONST
{
	return m_nBitPos;
}

VOID CDatabaseTCPacketParameter::SetWidth(INT nWidth)
{
	m_nWidth = nWidth;
}

INT CDatabaseTCPacketParameter::GetWidth() CONST
{
	return m_nWidth;
}

VOID CDatabaseTCPacketParameter::SetConstValue()
{
	m_nConstValue = 0;
	m_bConstValue = FALSE;
}
VOID CDatabaseTCPacketParameter::SetConstValue(ULONGLONG nConstValue)
{
	m_nConstValue = nConstValue;
	m_bConstValue = TRUE;
}

ULONGLONG CDatabaseTCPacketParameter::GetConstValue() CONST
{
	return m_nConstValue;
}

BOOL CDatabaseTCPacketParameter::HasConstValue() CONST
{
	return m_bConstValue;
}

VOID CDatabaseTCPacketParameter::SetConstValueAsText(LPCTSTR pszConstValue)
{
	m_szConstValue = pszConstValue;
}

CString CDatabaseTCPacketParameter::GetConstValueAsText() CONST
{
	return m_szConstValue;
}

VOID CDatabaseTCPacketParameter::SetRef(INT nRef)
{
	m_nRef = nRef;
}

INT CDatabaseTCPacketParameter::GetRef() CONST
{
	return m_nRef;
}

VOID CDatabaseTCPacketParameter::Copy(CONST CDatabaseTCPacketParameter *pPacketParameter)
{
	m_szTag = pPacketParameter->m_szTag;
	m_szDescription = pPacketParameter->m_szDescription;
	m_szConstValue = pPacketParameter->m_szConstValue;
	m_nAttributes = pPacketParameter->m_nAttributes;
	m_nConstValue = pPacketParameter->m_nConstValue;
	m_bConstValue = pPacketParameter->m_bConstValue;
	m_nBytePos = pPacketParameter->m_nBytePos;
	m_nBitPos = pPacketParameter->m_nBitPos;
	m_nWidth = pPacketParameter->m_nWidth;
	m_nRef = pPacketParameter->m_nRef;
}

BOOL CDatabaseTCPacketParameter::Compare(CONST CDatabaseTCPacketParameter *pPacketParameter) CONST
{
	return((pPacketParameter->m_szTag == m_szTag  &&  pPacketParameter->m_szDescription == m_szDescription  &&  pPacketParameter->m_szConstValue == m_szConstValue  &&  pPacketParameter->m_nAttributes == m_nAttributes  &&  pPacketParameter->m_nConstValue == m_nConstValue  &&  pPacketParameter->m_bConstValue == m_bConstValue  &&  pPacketParameter->m_nBytePos == m_nBytePos  &&  pPacketParameter->m_nBitPos == m_nBitPos  &&  pPacketParameter->m_nWidth == m_nWidth  &&  pPacketParameter->m_nRef == m_nRef) ? TRUE : FALSE);
}

BOOL CDatabaseTCPacketParameter::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbTag = (m_szTag.GetLength() + 1)*sizeof(TCHAR);
	sData.cbConstValue = (m_szConstValue.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbTag + sData.cbDescription + sData.cbConstValue)), sData.nAttributes = m_nAttributes, sData.nConstValue = m_nConstValue, sData.bConstValue = m_bConstValue, sData.nBytePos = m_nBytePos, sData.nBitPos = m_nBitPos, sData.nWidth = m_nWidth, sData.nRef = (bBinary) ? m_nRef : -1, sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szTag, sData.cbTag);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTag), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szConstValue, sData.cbConstValue);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCPacketParameter::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbTag + sData.cbDescription + sData.cbConstValue && sData.cbTag > 0 && sData.cbDescription >= 0 && sData.cbConstValue >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szTag.GetBufferSetLength(STRINGCHARS(sData.cbTag)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbTag));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbTag), STRINGBYTES(sData.cbDescription));
		CopyMemory(m_szConstValue.GetBufferSetLength(STRINGCHARS(sData.cbConstValue)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbConstValue));
		m_nAttributes = sData.nAttributes;
		m_nConstValue = sData.nConstValue;
		m_bConstValue = sData.bConstValue;
		m_nBytePos = sData.nBytePos;
		m_nBitPos = sData.nBitPos;
		m_nWidth = sData.nWidth;
		m_nRef = sData.nRef;
		m_szTag.ReleaseBuffer();
		m_szDescription.ReleaseBuffer();
		m_szConstValue.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCPacketParameters

CDatabaseTCPacketParameters::CDatabaseTCPacketParameters() : CPtrArray()
{
	return;
}

CDatabaseTCPacketParameters::~CDatabaseTCPacketParameters()
{
	RemoveAll();
}

INT CDatabaseTCPacketParameters::Add(CDatabaseTCPacketParameter *pParameter)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pParameter->GetTag(), TRUE)) >= 0) InsertAt(nIndex, pParameter, 1);
	return nIndex;
}

INT CDatabaseTCPacketParameters::Find(LPCTSTR pszTag) CONST
{
	return FindIndex(pszTag);
}

CDatabaseTCPacketParameter *CDatabaseTCPacketParameters::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCPacketParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTCPacketParameter *)NULL);
}

CDatabaseTCPacketParameter *CDatabaseTCPacketParameters::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCPacketParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTCPacketParameter *)NULL);
}

VOID CDatabaseTCPacketParameters::RemoveAll()
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCPacketParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter))) delete pParameter;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCPacketParameters::Copy(CONST CDatabaseTCPacketParameters *pPacketParameters)
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCPacketParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)pPacketParameters->GetSize(), RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = new CDatabaseTCPacketParameter))
		{
			pParameter->Copy(pPacketParameters->GetAt(nParameter));
			InsertAt(nParameter, pParameter, 1);
			continue;
		}
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCPacketParameters::Compare(CONST CDatabaseTCPacketParameters *pPacketParameters) CONST
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCPacketParameter  *pParameter;

	for (nParameter = 0, nParameters = (pPacketParameters->GetSize() == GetSize()) ? (INT)GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = pPacketParameters->GetAt(nParameter)) && pParameter->Compare(GetAt(nParameter))) continue;
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCPacketParameters::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nParameter;
	INT  nParameters;
	CByteArray  nParametersData[2];
	CDatabaseTCPacketParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(), sData.bBinary = bBinary; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)) && pParameter->Map(nParametersData[1], bBinary) && nParametersData[0].Append(nParametersData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + (sData.cbParameters = (INT)(nParametersData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nParameter == nParameters; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), nParametersData[0].GetData(), sData.cbParameters);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCPacketParameters::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbParameter;
	INT  cbParameters;
	CByteArray  nParametersData[2];
	CDatabaseTCPacketParameter  *pParameter;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbParameters && sData.cbParameters >= 0 && sData.bBinary == bBinary; )
	{
		for (nParametersData[0].SetSize(sData.cbParameters), CopyMemory(nParametersData[0].GetData(), nInfo.GetData() + (cbData = sizeof(DATA)), sData.cbParameters), RemoveAll(), cbParameter = cbParameters = 0; cbParameters < sData.cbParameters; cbParameters += cbParameter)
		{
			for (CopyMemory(&cbParameter, nParametersData[0].GetData() + cbParameters, sizeof(cbParameter)), nParametersData[1].SetSize(max(min(cbParameter, nParametersData[0].GetSize() - cbParameters), 0)); nParametersData[1].GetSize() >= 0; )
			{
				CopyMemory(nParametersData[1].GetData(), nParametersData[0].GetData() + cbParameters, nParametersData[1].GetSize());
				break;
			}
			if ((pParameter = new CDatabaseTCPacketParameter))
			{
				if (pParameter->Unmap(nParametersData[1], bBinary) && Add(pParameter) >= 0) continue;
				delete pParameter;
			}
			break;
		}
		return((cbParameters == sData.cbParameters) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTCPacketParameters::FindIndex(LPCTSTR pszTag, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCPacketParameter  *pParameter;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pParameter = GetAt(nIndex[0]))) ? ((nIndex[1] = (pParameter->GetTag() <= pszTag)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pParameter = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pParameter->GetTag() == pszTag) || (bInsert && (((pParameter = GetAt(max(nIndex[0] - 1, 0))) && pParameter->GetTag() != pszTag && (pParameter = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pParameter->GetTag() != pszTag) || !GetSize()))) && lstrlen(pszTag) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCPacket

CDatabaseTCPacket::CDatabaseTCPacket() : CPtrArray()
{
	m_nAPID = -1;
	m_cbData = 0;
	m_bDataFieldHeader = FALSE;
	m_nStatus = TCPACKET_RECORDSTATUS_NONE;
}

CDatabaseTCPacket::~CDatabaseTCPacket()
{
	RemoveAll();
}

VOID CDatabaseTCPacket::SetTag(LPCTSTR pszTag)
{
	m_szTag = pszTag;
}

CString CDatabaseTCPacket::GetTag() CONST
{
	return m_szTag;
}

VOID CDatabaseTCPacket::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCPacket::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTCPacket::SetDetails(LPCTSTR pszDetails)
{
	m_szDetails = pszDetails;
}

CString CDatabaseTCPacket::GetDetails() CONST
{
	return m_szDetails;
}

VOID CDatabaseTCPacket::SetAPID(INT nAPID)
{
	m_nAPID = nAPID;
}

INT CDatabaseTCPacket::GetAPID() CONST
{
	return m_nAPID;
}

VOID CDatabaseTCPacket::SetDataFieldHeaderFlag(BOOL bFlag)
{
	m_bDataFieldHeader = bFlag;
}

BOOL CDatabaseTCPacket::GetDataFieldHeaderFlag() CONST
{
	return m_bDataFieldHeader;
}

VOID CDatabaseTCPacket::SetDataSize(INT cbData)
{
	m_cbData = cbData;
}

INT CDatabaseTCPacket::GetDataSize() CONST
{
	return m_cbData;
}

VOID CDatabaseTCPacket::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTCPacket::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseTCPacket::Add(CDatabaseTCPacketParameter *pParameter)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pParameter->GetTag(), pParameter->GetBytePos(), pParameter->GetBitPos())) >= 0) InsertAt(nIndex, pParameter, 1);
	return nIndex;
}

INT CDatabaseTCPacket::Find(LPCTSTR pszTag, INT nOccurrence) CONST
{
	INT  nCount;
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (INT)GetSize(), nCount = 0; nParameter < nParameters; nParameter++)
	{
		if (GetAt(nParameter)->GetTag() == pszTag)
		{
			if (nCount++ == nOccurrence) break;
			continue;
		}
	}
	return((nOccurrence >= 0) ? ((nParameter < nParameters) ? nParameter : -1) : nCount);
}
INT CDatabaseTCPacket::Find(LPCTSTR pszTag, INT nBytePos, INT nBitPos) CONST
{
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if (GetAt(nParameter)->GetTag() == pszTag  &&  GetAt(nParameter)->GetBytePos() == nBytePos  &&  GetAt(nParameter)->GetBitPos() == nBitPos) break;
		continue;
	}
	return((nParameter < nParameters) ? nParameter : -1);
}

CDatabaseTCPacketParameter *CDatabaseTCPacket::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCPacketParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTCPacketParameter *)NULL);
}

CDatabaseTCPacketParameter *CDatabaseTCPacket::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCPacketParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTCPacketParameter *)NULL);
}

VOID CDatabaseTCPacket::RemoveAll()
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCPacketParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter))) delete pParameter;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCPacket::Copy(CONST CDatabaseTCPacket *pPacket)
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCPacketParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)pPacket->GetSize(), m_szTag = pPacket->m_szTag, m_szDescription = pPacket->m_szDescription, m_szDetails = pPacket->m_szDetails, m_bDataFieldHeader = pPacket->m_bDataFieldHeader, m_nAPID = pPacket->m_nAPID, m_cbData = pPacket->m_cbData, m_nStatus = pPacket->m_nStatus, RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = new CDatabaseTCPacketParameter))
		{
			pParameter->Copy(pPacket->GetAt(nParameter));
			InsertAt(nParameter, pParameter, 1);
			continue;
		}
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCPacket::Compare(CONST CDatabaseTCPacket *pPacket) CONST
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCPacketParameter  *pParameter;

	for (nParameter = 0, nParameters = (pPacket->m_szTag == m_szTag && pPacket->m_szDescription == m_szDescription && pPacket->m_szDetails == m_szDetails && pPacket->m_bDataFieldHeader == m_bDataFieldHeader && pPacket->m_nAPID == m_nAPID && pPacket->m_cbData == m_cbData && pPacket->m_nStatus == m_nStatus && pPacket->GetSize() == GetSize()) ? (INT)GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = pPacket->GetAt(nParameter)) && pParameter->Compare(GetAt(nParameter))) continue;
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCPacket::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nParameter;
	INT  nParameters;
	CByteArray  nParametersData[2];
	CDatabaseTCPacketParameter  *pParameter;

	sData.cbTag = (m_szTag.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDetails = (m_szDetails.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nParameter = 0, nParameters = (INT)GetSize(), sData.nAPID = m_nAPID, sData.bDataFieldHeader = m_bDataFieldHeader, sData.cbData = m_cbData, sData.nStatus = m_nStatus, sData.bBinary = bBinary; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)) && pParameter->Map(nParametersData[1], bBinary) && nParametersData[0].Append(nParametersData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbTag + sData.cbDescription + sData.cbDetails + (sData.cbParameters = (INT)(nParametersData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nParameter == nParameters; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szTag, sData.cbTag);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTag), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szDetails, sData.cbDetails);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDetails), nParametersData[0].GetData(), sData.cbParameters);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCPacket::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbParameter;
	INT  cbParameters;
	CByteArray  nParametersData[2];
	CDatabaseTCPacketParameter  *pParameter;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbTag + sData.cbDescription + sData.cbDetails + sData.cbParameters && sData.cbTag > 0 && sData.cbDescription > 0 && sData.cbDetails > 0 && sData.cbParameters >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szTag.GetBufferSetLength(STRINGCHARS(sData.cbTag)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbTag));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbTag), STRINGBYTES(sData.cbDescription));
		CopyMemory(m_szDetails.GetBufferSetLength(STRINGCHARS(sData.cbDetails)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbDetails));
		for (nParametersData[0].SetSize(sData.cbParameters), CopyMemory(nParametersData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbDetails), sData.cbParameters), m_nAPID = sData.nAPID, m_bDataFieldHeader = sData.bDataFieldHeader, m_cbData = sData.cbData, m_nStatus = sData.nStatus, m_szTag.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), m_szDetails.ReleaseBuffer(), RemoveAll(), cbParameter = cbParameters = 0; cbParameters < sData.cbParameters; cbParameters += cbParameter)
		{
			for (CopyMemory(&cbParameter, nParametersData[0].GetData() + cbParameters, sizeof(cbParameter)), nParametersData[1].SetSize(max(min(cbParameter, nParametersData[0].GetSize() - cbParameters), 0)); nParametersData[1].GetSize() >= 0; )
			{
				CopyMemory(nParametersData[1].GetData(), nParametersData[0].GetData() + cbParameters, nParametersData[1].GetSize());
				break;
			}
			if ((pParameter = new CDatabaseTCPacketParameter))
			{
				if (pParameter->Unmap(nParametersData[1], bBinary) && Add(pParameter) >= 0) continue;
				delete pParameter;
			}
			break;
		}
		return((cbParameters == sData.cbParameters) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTCPacket::FindIndex(LPCTSTR pszTag, INT nBytePos, INT nBitPos) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	INT  nBitOffset[2];
	CDatabaseTCPacketParameter  *pParameter;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2, nBitOffset[0] = 8 * nBytePos + nBitPos; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pParameter = GetAt(nIndex[0]))) ? (((nIndex[1] = ((nBitOffset[1] = 8 * pParameter->GetBytePos() + pParameter->GetBitPos()) == nBitOffset[0] && pParameter->GetTag().Compare(pszTag) <= 0) || nBitOffset[0] > nBitOffset[1])) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return nIndex[0];
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCPackets

CDatabaseTCPackets::CDatabaseTCPackets() : CPtrArray()
{
	return;
}

CDatabaseTCPackets::~CDatabaseTCPackets()
{
	RemoveAll();
}

INT CDatabaseTCPackets::Add(CDatabaseTCPacket *pPacket)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pPacket->GetTag(), TRUE)) >= 0) InsertAt(nIndex, pPacket, 1);
	return nIndex;
}

INT CDatabaseTCPackets::Find(LPCTSTR pszTag) CONST
{
	return FindIndex(pszTag);
}

CDatabaseTCPacket *CDatabaseTCPackets::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCPacket *)CPtrArray::GetAt(nIndex) : (CDatabaseTCPacket *)NULL);
}

CDatabaseTCPacket *CDatabaseTCPackets::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCPacket *)CPtrArray::GetAt(nIndex) : (CDatabaseTCPacket *)NULL);
}

VOID CDatabaseTCPackets::RemoveAll()
{
	INT  nPacket;
	INT  nPackets;
	CDatabaseTCPacket  *pPacket;

	for (nPacket = 0, nPackets = (INT)GetSize(); nPacket < nPackets; nPacket++)
	{
		if ((pPacket = GetAt(nPacket))) delete pPacket;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCPackets::Copy(CONST CDatabaseTCPackets *pPackets)
{
	INT  nPacket;
	INT  nPackets;
	CDatabaseTCPacket  *pPacket;

	for (nPacket = 0, nPackets = (INT)pPackets->GetSize(), RemoveAll(); nPacket < nPackets; nPacket++)
	{
		if ((pPacket = new CDatabaseTCPacket))
		{
			pPacket->Copy(pPackets->GetAt(nPacket));
			InsertAt(nPacket, pPacket, 1);
			continue;
		}
		break;
	}
	return((nPacket == nPackets) ? TRUE : FALSE);
}

BOOL CDatabaseTCPackets::Compare(CONST CDatabaseTCPackets *pPackets) CONST
{
	INT  nPacket;
	INT  nPackets;

	for (nPacket = 0, nPackets = (pPackets->GetSize() == GetSize()) ? (INT)GetSize() : -1; nPacket < nPackets; nPacket++)
	{
		if (!pPackets->GetAt(nPacket)->Compare(GetAt(nPacket))) break;
		continue;
	}
	return((nPacket == nPackets) ? TRUE : FALSE);
}

BOOL CDatabaseTCPackets::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nPacket;
	INT  nPackets;
	CByteArray  nPacketsData;
	CDatabaseTCPacket  *pPacket;

	for (nPacket = 0, nPackets = (INT)GetSize(), nInfo.RemoveAll(); nPacket < nPackets; nPacket++)
	{
		if ((pPacket = GetAt(nPacket)) && pPacket->Map(nPacketsData, bBinary) && nInfo.Append(nPacketsData) >= 0) continue;
		break;
	}
	return((nPacket == nPackets) ? TRUE : FALSE);
}

BOOL CDatabaseTCPackets::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbPacket;
	INT  cbPackets;
	CByteArray  nPacketsData;
	CDatabaseTCPacket  *pPacket;

	for (cbPackets = 0, RemoveAll(); cbPackets < nInfo.GetSize(); cbPackets += cbPacket)
	{
		for (CopyMemory(&cbPacket, nInfo.GetData() + cbPackets, sizeof(cbPacket)), nPacketsData.SetSize(max(min(cbPacket, nInfo.GetSize() - cbPackets), 0)); nPacketsData.GetSize() >= 0; )
		{
			CopyMemory(nPacketsData.GetData(), nInfo.GetData() + cbPackets, nPacketsData.GetSize());
			break;
		}
		if ((pPacket = new CDatabaseTCPacket))
		{
			if (pPacket->Unmap(nPacketsData, bBinary) && Add(pPacket) >= 0) continue;
			delete pPacket;
		}
		break;
	}
	return((cbPackets == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCPackets::FindIndex(LPCTSTR pszTag, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCPacket  *pPacket;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pPacket = GetAt(nIndex[0]))) ? ((nIndex[1] = (pPacket->GetTag() <= pszTag)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pPacket = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pPacket->GetTag() == pszTag) || (bInsert && (((pPacket = GetAt(max(nIndex[0] - 1, 0))) && pPacket->GetTag() != pszTag && (pPacket = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pPacket->GetTag() != pszTag) || !GetSize()) && lstrlen(pszTag) > 0)) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMParameter

CDatabaseTMParameter::CDatabaseTMParameter() : CObject()
{
	m_nID = -1;
	m_nOBTID = -1;
	m_nDigits = 0;
	m_nWidth[0] = 0;
	m_nWidth[1] = 0;
	m_nAttributes = 0;
	m_nConstValue = 0;
	m_nValidityValue = 0;
	m_nTypeCode = -1;
	m_nFormatCode = -1;
	m_nInterrogationCode = -1;
	m_nRelatedParameterRef = -1;
	m_nValidityParameterRef = -1;
	m_nStatus = TMPARAMETER_RECORDSTATUS_NONE;
}

VOID CDatabaseTMParameter::SetTag(LPCTSTR pszTag)
{
	m_szTag = pszTag;
}

CString CDatabaseTMParameter::GetTag() CONST
{
	return m_szTag;
}

VOID CDatabaseTMParameter::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTMParameter::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTMParameter::SetDetails(LPCTSTR pszDetails)
{
	m_szDetails = pszDetails;
}

CString CDatabaseTMParameter::GetDetails() CONST
{
	return m_szDetails;
}

VOID CDatabaseTMParameter::SetUnit(LPCTSTR pszUnit)
{
	m_szUnit = pszUnit;
}

CString CDatabaseTMParameter::GetUnit() CONST
{
	return m_szUnit;
}

VOID CDatabaseTMParameter::SetTypeCode(UINT nPTC)
{
	m_nTypeCode = nPTC;
}

UINT CDatabaseTMParameter::GetTypeCode() CONST
{
	return m_nTypeCode;
}

VOID CDatabaseTMParameter::SetFormatCode(UINT nPFC)
{
	m_nFormatCode = nPFC;
}

UINT CDatabaseTMParameter::GetFormatCode() CONST
{
	return m_nFormatCode;
}

VOID CDatabaseTMParameter::SetAttributes(ULONGLONG nAttributes)
{
	m_nAttributes = nAttributes;
}

ULONGLONG CDatabaseTMParameter::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTMParameter::SetWidth(INT nWidth, BOOL bPadded)
{
	if (!bPadded)
	{
		m_nWidth[0] = nWidth;
		return;
	}
	m_nWidth[1] = nWidth;
}

INT CDatabaseTMParameter::GetWidth(BOOL bPadded) CONST
{
	return((!bPadded) ? m_nWidth[0] : m_nWidth[1]);
}

VOID CDatabaseTMParameter::SetOnBoardID(UINT nID)
{
	m_nID = nID;
}

UINT CDatabaseTMParameter::GetOnBoardID() CONST
{
	return m_nID;
}

VOID CDatabaseTMParameter::SetOnBoardTimerID(UINT nOBTID)
{
	m_nOBTID = nOBTID;
}

UINT CDatabaseTMParameter::GetOnBoardTimerID() CONST
{
	return m_nOBTID;
}

VOID CDatabaseTMParameter::SetConstValue(ULONGLONG nConstValue)
{
	m_nConstValue = nConstValue;
}

ULONGLONG CDatabaseTMParameter::GetConstValue() CONST
{
	return m_nConstValue;
}

VOID CDatabaseTMParameter::SetConstValueAsText(LPCTSTR pszConstValue)
{
	m_szConstValue = pszConstValue;
}

CString CDatabaseTMParameter::GetConstValueAsText() CONST
{
	return m_szConstValue;
}

VOID CDatabaseTMParameter::SetRelatedParameter(LPCTSTR pszTag)
{
	m_szRelatedParameter = pszTag;
}

CString CDatabaseTMParameter::GetRelatedParameter() CONST
{
	return m_szRelatedParameter;
}

VOID CDatabaseTMParameter::SetRelatedParameterRef(INT nRef)
{
	m_nRelatedParameterRef = nRef;
}

INT CDatabaseTMParameter::GetRelatedParameterRef() CONST
{
	return m_nRelatedParameterRef;
}

VOID CDatabaseTMParameter::SetValidityParameter(LPCTSTR pszTag)
{
	m_szValidityParameter = pszTag;
}

CString CDatabaseTMParameter::GetValidityParameter() CONST
{
	return m_szValidityParameter;
}

VOID CDatabaseTMParameter::SetValidityParameterRef(INT nRef)
{
	m_nValidityParameterRef = nRef;
}

INT CDatabaseTMParameter::GetValidityParameterRef() CONST
{
	return m_nValidityParameterRef;
}

VOID CDatabaseTMParameter::SetValidityValue(ULONGLONG nValidityValue)
{
	m_nValidityValue = nValidityValue;
}

ULONGLONG CDatabaseTMParameter::GetValidityValue() CONST
{
	return m_nValidityValue;
}

VOID CDatabaseTMParameter::SetSourceSubSystem(LPCTSTR pszSubSystem)
{
	m_szSubSystem[0] = pszSubSystem;
}

CString CDatabaseTMParameter::GetSourceSubSystem() CONST
{
	return m_szSubSystem[0];
}

VOID CDatabaseTMParameter::SetSourceEquipment(LPCTSTR pszEquipment)
{
	m_szEquipment[0] = pszEquipment;
}

CString CDatabaseTMParameter::GetSourceEquipment() CONST
{
	return m_szEquipment[0];
}

VOID CDatabaseTMParameter::SetRouterSubSystem(LPCTSTR pszSubSystem)
{
	m_szSubSystem[1] = pszSubSystem;
}

CString CDatabaseTMParameter::GetRouterSubSystem() CONST
{
	return m_szSubSystem[1];
}

VOID CDatabaseTMParameter::SetRouterEquipment(LPCTSTR pszEquipment)
{
	m_szEquipment[1] = pszEquipment;
}

CString CDatabaseTMParameter::GetRouterEquipment() CONST
{
	return m_szEquipment[1];
}

VOID CDatabaseTMParameter::SetOperationalInfo(LPCTSTR pszInfo)
{
	m_szOperationalInfo = pszInfo;
}

CString CDatabaseTMParameter::GetOperationalInfo() CONST
{
	return m_szOperationalInfo;
}

VOID CDatabaseTMParameter::SetDangerConditions(LPCTSTR pszConditions)
{
	m_szDangerConditions = pszConditions;
}

CString CDatabaseTMParameter::GetDangerConditions() CONST
{
	return m_szDangerConditions;
}

VOID CDatabaseTMParameter::SetValidityConditions(LPCTSTR pszConditions)
{
	m_szValidityConditions = pszConditions;
}

CString CDatabaseTMParameter::GetValidityConditions() CONST
{
	return m_szValidityConditions;
}

VOID CDatabaseTMParameter::SetAssociatedTelecommands(LPCTSTR pszTelecommands)
{
	m_szAssociatedTelecommands = pszTelecommands;
}

CString CDatabaseTMParameter::GetAssociatedTelecommands() CONST
{
	return m_szAssociatedTelecommands;
}

VOID CDatabaseTMParameter::SetDerivationExpression(LPCTSTR pszExpression)
{
	m_szDerivation = pszExpression;
}

CString CDatabaseTMParameter::GetDerivationExpression() CONST
{
	return m_szDerivation;
}

VOID CDatabaseTMParameter::SetTriggerExpression(LPCTSTR pszExpression)
{
	m_szTrigger = pszExpression;
}

CString CDatabaseTMParameter::GetTriggerExpression() CONST
{
	return m_szTrigger;
}

VOID CDatabaseTMParameter::SetInterrogationInstruction(UINT nInstruction)
{
	m_nInterrogationCode = nInstruction;
}

UINT CDatabaseTMParameter::GetInterrogationInstruction() CONST
{
	return m_nInterrogationCode;
}

VOID CDatabaseTMParameter::SetCalTables(CONST CStringArray &szTables, CONST CStringArray &szValidityParameters)
{
	m_szCalTables.Copy(szTables);
	m_szCalValidityParameters.Copy(szValidityParameters);
}
VOID CDatabaseTMParameter::SetCalTables(CONST CStringArray &szTables, CONST CStringArray &szValidityParameters, CONST CLongUIntArray &nValidityValues)
{
	m_szCalTables.Copy(szTables);
	m_szCalValidityParameters.Copy(szValidityParameters);
	m_nCalValidityValues.Copy(nValidityValues);
}

INT CDatabaseTMParameter::GetCalTables(CStringArray &szTables, CStringArray &szValidityParameters) CONST
{
	szTables.Copy(m_szCalTables);
	szValidityParameters.Copy(m_szCalValidityParameters);
	return((szTables.GetSize() == szValidityParameters.GetSize()) ? (INT)szTables.GetSize() : -1);
}
INT CDatabaseTMParameter::GetCalTables(CStringArray &szTables, CStringArray &szValidityParameters, CLongUIntArray &nValidityValues) CONST
{
	for (szTables.Copy(m_szCalTables), szValidityParameters.Copy(m_szCalValidityParameters), nValidityValues.Copy(m_nCalValidityValues); szTables.GetSize() != nValidityValues.GetSize(); )
	{
		nValidityValues.SetSize(szTables.GetSize());
		break;
	}
	return((szTables.GetSize() == szValidityParameters.GetSize()) ? (INT)szTables.GetSize() : -1);
}

VOID CDatabaseTMParameter::SetOolTables(CONST CStringArray &szTables, CONST CStringArray &szValidityParameters)
{
	m_szOolTables.Copy(szTables);
	m_szOolValidityParameters.Copy(szValidityParameters);
}
VOID CDatabaseTMParameter::SetOolTables(CONST CStringArray &szTables, CONST CStringArray &szValidityParameters, CONST CLongUIntArray &nValidityValues)
{
	m_szOolTables.Copy(szTables);
	m_szOolValidityParameters.Copy(szValidityParameters);
	m_nOolValidityValues.Copy(nValidityValues);
}

INT CDatabaseTMParameter::GetOolTables(CStringArray &szTables, CStringArray &szValidityParameters) CONST
{
	szTables.Copy(m_szOolTables);
	szValidityParameters.Copy(m_szOolValidityParameters);
	return((szTables.GetSize() == szValidityParameters.GetSize()) ? (INT)szTables.GetSize() : -1);
}
INT CDatabaseTMParameter::GetOolTables(CStringArray &szTables, CStringArray &szValidityParameters, CLongUIntArray &nValidityValues) CONST
{
	for (szTables.Copy(m_szOolTables), szValidityParameters.Copy(m_szOolValidityParameters), nValidityValues.Copy(m_nOolValidityValues); szTables.GetSize() != nValidityValues.GetSize(); )
	{
		nValidityValues.SetSize(szTables.GetSize());
		break;
	}
	return((szTables.GetSize() == szValidityParameters.GetSize()) ? (INT)szTables.GetSize() : -1);
}

VOID CDatabaseTMParameter::SetDecimalDigits(INT nDigits)
{
	m_nDigits = nDigits;
}

INT CDatabaseTMParameter::GetDecimalDigits() CONST
{
	return m_nDigits;
}

VOID CDatabaseTMParameter::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTMParameter::GetStatus() CONST
{
	return m_nStatus;
}

VOID CDatabaseTMParameter::SetSubTagRefs(CONST CUIntArray &nRefs)
{
	m_nSubTagRefs.Copy(nRefs);
}

INT CDatabaseTMParameter::GetSubTagRefs(CUIntArray &nRefs) CONST
{
	nRefs.Copy(m_nSubTagRefs);
	return((INT)nRefs.GetSize());
}

VOID CDatabaseTMParameter::SetCalTableRefs(CONST CUIntArray &nTableRefs, CONST CUIntArray &nValidityRefs)
{
	m_nCalTableRefs.Copy(nTableRefs);
	m_nCalValidityRefs.Copy(nValidityRefs);
}

INT CDatabaseTMParameter::GetCalTableRefs(CUIntArray &nTableRefs, CUIntArray &nValidityRefs) CONST
{
	nTableRefs.Copy(m_nCalTableRefs);
	nValidityRefs.Copy(m_nCalValidityRefs);
	return((nTableRefs.GetSize() == nValidityRefs.GetSize()) ? (INT)nTableRefs.GetSize() : -1);
}

VOID CDatabaseTMParameter::SetOolTableRefs(CONST CUIntArray &nTableRefs, CONST CUIntArray &nValidityRefs)
{
	m_nOolTableRefs.Copy(nTableRefs);
	m_nOolValidityRefs.Copy(nValidityRefs);
}

INT CDatabaseTMParameter::GetOolTableRefs(CUIntArray &nTableRefs, CUIntArray &nValidityRefs) CONST
{
	nTableRefs.Copy(m_nOolTableRefs);
	nValidityRefs.Copy(m_nOolValidityRefs);
	return((nTableRefs.GetSize() == nValidityRefs.GetSize()) ? (INT)nTableRefs.GetSize() : -1);
}

VOID CDatabaseTMParameter::SetTriggerRefs(CONST CUIntArray &nParameterRefs, CONST CUIntArray &nPacketRefs)
{
	m_nTriggerRefs[0].Copy(nParameterRefs);
	m_nTriggerRefs[1].Copy(nPacketRefs);
}

INT CDatabaseTMParameter::GetTriggerRefs(CUIntArray &nParameterRefs, CUIntArray &nPacketRefs) CONST
{
	nParameterRefs.Copy(m_nTriggerRefs[0]);
	nPacketRefs.Copy(m_nTriggerRefs[1]);
	return((nParameterRefs.GetSize() == nPacketRefs.GetSize()) ? (INT)nParameterRefs.GetSize() : 0);
}

VOID CDatabaseTMParameter::SetValidityRefs(CONST CUIntArray &nRefs)
{
	m_nValidityRefs.Copy(nRefs);
}

INT CDatabaseTMParameter::GetValidityRefs(CUIntArray &nRefs) CONST
{
	nRefs.Copy(m_nValidityRefs);
	return((INT)nRefs.GetSize());
}

BOOL CDatabaseTMParameter::Copy(CONST CDatabaseTMParameter *pParameter)
{
	m_szTag = pParameter->m_szTag;
	m_szUnit = pParameter->m_szUnit;
	m_szDetails = pParameter->m_szDetails;
	m_szTrigger = pParameter->m_szTrigger;
	m_szConstValue = pParameter->m_szConstValue;
	m_szDerivation = pParameter->m_szDerivation;
	m_szDescription = pParameter->m_szDescription;
	m_szSubSystem[0] = pParameter->m_szSubSystem[0];
	m_szSubSystem[1] = pParameter->m_szSubSystem[1];
	m_szEquipment[0] = pParameter->m_szEquipment[0];
	m_szEquipment[1] = pParameter->m_szEquipment[1];
	m_szOperationalInfo = pParameter->m_szOperationalInfo;
	m_szDangerConditions = pParameter->m_szDangerConditions;
	m_szRelatedParameter = pParameter->m_szRelatedParameter;
	m_szValidityParameter = pParameter->m_szValidityParameter;
	m_szValidityConditions = pParameter->m_szValidityConditions;
	m_szAssociatedTelecommands = pParameter->m_szAssociatedTelecommands;
	m_szCalValidityParameters.Copy(pParameter->m_szCalValidityParameters);
	m_szOolValidityParameters.Copy(pParameter->m_szOolValidityParameters);
	m_szCalTables.Copy(pParameter->m_szCalTables);
	m_szOolTables.Copy(pParameter->m_szOolTables);
	m_nCalTableRefs.Copy(pParameter->m_nCalTableRefs);
	m_nOolTableRefs.Copy(pParameter->m_nOolTableRefs);
	m_nCalValidityRefs.Copy(pParameter->m_nCalValidityRefs);
	m_nOolValidityRefs.Copy(pParameter->m_nOolValidityRefs);
	m_nCalValidityValues.Copy(pParameter->m_nCalValidityValues);
	m_nOolValidityValues.Copy(pParameter->m_nOolValidityValues);
	m_nTriggerRefs[0].Copy(pParameter->m_nTriggerRefs[0]);
	m_nTriggerRefs[1].Copy(pParameter->m_nTriggerRefs[1]);
	m_nValidityRefs.Copy(pParameter->m_nValidityRefs);
	m_nSubTagRefs.Copy(pParameter->m_nSubTagRefs);
	m_nRelatedParameterRef = pParameter->m_nRelatedParameterRef;
	m_nValidityParameterRef = pParameter->m_nValidityParameterRef;
	m_nTypeCode = pParameter->m_nTypeCode;
	m_nFormatCode = pParameter->m_nFormatCode;
	m_nInterrogationCode = pParameter->m_nInterrogationCode;
	m_nAttributes = pParameter->m_nAttributes;
	m_nConstValue = pParameter->m_nConstValue;
	m_nValidityValue = pParameter->m_nValidityValue;
	m_nWidth[0] = pParameter->m_nWidth[0];
	m_nWidth[1] = pParameter->m_nWidth[1];
	m_nDigits = pParameter->m_nDigits;
	m_nID = pParameter->m_nID;
	m_nOBTID = pParameter->m_nOBTID;
	m_nStatus = pParameter->m_nStatus;
	return TRUE;
}

BOOL CDatabaseTMParameter::Compare(CONST CDatabaseTMParameter *pParameter) CONST
{
	INT  nTable[2];
	INT  nTables[2];

	if (pParameter->m_szTag == m_szTag  &&  pParameter->m_szDescription == m_szDescription  &&  pParameter->m_szUnit == m_szUnit  &&  pParameter->m_szDetails == m_szDetails  &&  pParameter->m_nID == m_nID  &&  pParameter->m_nTypeCode == m_nTypeCode  &&  pParameter->m_nFormatCode == m_nFormatCode  &&  pParameter->m_nInterrogationCode == m_nInterrogationCode  &&  pParameter->m_nAttributes == m_nAttributes  &&  pParameter->m_nWidth[0] == m_nWidth[0] && pParameter->m_nWidth[1] == m_nWidth[1] && pParameter->m_nOBTID == m_nOBTID  &&  pParameter->m_szTrigger == m_szTrigger  &&  pParameter->m_szConstValue == m_szConstValue  &&  pParameter->m_nConstValue == m_nConstValue  &&  pParameter->m_nValidityValue == m_nValidityValue  &&  pParameter->m_szRelatedParameter == m_szRelatedParameter  &&  pParameter->m_szValidityParameter == m_szValidityParameter  &&  pParameter->m_szSubSystem[0] == m_szSubSystem[0] && pParameter->m_szSubSystem[1] == m_szSubSystem[1] && pParameter->m_szEquipment[0] == m_szEquipment[0] && pParameter->m_szEquipment[1] == m_szEquipment[1] && pParameter->m_szOperationalInfo == m_szOperationalInfo  &&  pParameter->m_szDangerConditions == m_szDangerConditions  &&  pParameter->m_szValidityConditions == m_szValidityConditions  &&  pParameter->m_szAssociatedTelecommands == m_szAssociatedTelecommands  &&  pParameter->m_szDerivation == m_szDerivation  &&  pParameter->m_nDigits == m_nDigits  &&  pParameter->m_nStatus == m_nStatus  &&  pParameter->m_nRelatedParameterRef == m_nRelatedParameterRef  &&  pParameter->m_nValidityParameterRef == m_nValidityParameterRef  &&  pParameter->m_nSubTagRefs.GetSize() == m_nSubTagRefs.GetSize() && !memcmp(pParameter->m_nSubTagRefs.GetData(), m_nSubTagRefs.GetData(), m_nSubTagRefs.GetSize()*sizeof(UINT)) && pParameter->m_szCalTables.GetSize() == m_szCalTables.GetSize() && pParameter->m_szOolTables.GetSize() == m_szOolTables.GetSize() && pParameter->m_szCalValidityParameters.GetSize() == m_szCalValidityParameters.GetSize() && pParameter->m_szOolValidityParameters.GetSize() == m_szOolValidityParameters.GetSize() && pParameter->m_nCalValidityValues.GetSize() == m_nCalValidityValues.GetSize() && pParameter->m_nOolValidityValues.GetSize() == m_nOolValidityValues.GetSize() && pParameter->m_nCalTableRefs.GetSize() == m_nCalTableRefs.GetSize() && !memcmp(pParameter->m_nCalTableRefs.GetData(), m_nCalTableRefs.GetData(), m_nCalTableRefs.GetSize()*sizeof(UINT)) && pParameter->m_nOolTableRefs.GetSize() == m_nOolTableRefs.GetSize() && !memcmp(pParameter->m_nOolTableRefs.GetData(), m_nOolTableRefs.GetData(), m_nOolTableRefs.GetSize()*sizeof(UINT)) && pParameter->m_nCalValidityRefs.GetSize() == m_nCalValidityRefs.GetSize() && !memcmp(pParameter->m_nCalValidityRefs.GetData(), m_nCalValidityRefs.GetData(), m_nCalValidityRefs.GetSize()*sizeof(UINT)) && pParameter->m_nOolValidityRefs.GetSize() == m_nOolValidityRefs.GetSize() && !memcmp(pParameter->m_nOolValidityRefs.GetData(), m_nOolValidityRefs.GetData(), m_nOolValidityRefs.GetSize()*sizeof(UINT)) && pParameter->m_nTriggerRefs[0].GetSize() == m_nTriggerRefs[0].GetSize() && !memcmp(pParameter->m_nTriggerRefs[0].GetData(), m_nTriggerRefs[0].GetData(), m_nTriggerRefs[0].GetSize()*sizeof(UINT)) && pParameter->m_nTriggerRefs[1].GetSize() == m_nTriggerRefs[1].GetSize() && !memcmp(pParameter->m_nTriggerRefs[1].GetData(), m_nTriggerRefs[1].GetData(), m_nTriggerRefs[1].GetSize()*sizeof(UINT)) && pParameter->m_nValidityRefs.GetSize() == m_nValidityRefs.GetSize() && !memcmp(pParameter->m_nValidityRefs.GetData(), m_nValidityRefs.GetData(), m_nValidityRefs.GetSize()*sizeof(UINT)))
	{
		for (nTable[0] = 0, nTables[0] = (INT)m_szCalTables.GetSize(); nTable[0] < nTables[0]; nTable[0]++)
		{
			if (pParameter->m_szCalTables.GetAt(nTable[0]).Compare(m_szCalTables.GetAt(nTable[0]))) break;
			if (pParameter->m_szCalValidityParameters.GetAt(nTable[0]).Compare(m_szCalValidityParameters.GetAt(nTable[0]))) break;
			if (nTable[0] < pParameter->m_nCalValidityValues.GetSize() && pParameter->m_nCalValidityValues.GetAt(nTable[0]) != m_nCalValidityValues.GetAt(nTable[0])) break;
		}
		for (nTable[1] = 0, nTables[1] = (INT)m_szOolTables.GetSize(); nTable[1] < nTables[1]; nTable[1]++)
		{
			if (pParameter->m_szOolTables.GetAt(nTable[1]).Compare(m_szOolTables.GetAt(nTable[1]))) break;
			if (pParameter->m_szOolValidityParameters.GetAt(nTable[1]).Compare(m_szOolValidityParameters.GetAt(nTable[1]))) break;
			if (nTable[1] < pParameter->m_nOolValidityValues.GetSize() && pParameter->m_nOolValidityValues.GetAt(nTable[1]) != m_nOolValidityValues.GetAt(nTable[1])) break;
		}
		return((nTable[0] == nTables[0] && nTable[1] == nTables[1]) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CDatabaseTMParameter::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nItem;
	INT  nItems;
	INT  cbData;
	DATA  sData;
	CByteArray  nCalTablesData[2];
	CByteArray  nOolTablesData[2];

	sData.cbTag = (m_szTag.GetLength() + 1)*sizeof(TCHAR);
	sData.cbUnit = (m_szUnit.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDetails = (m_szDetails.GetLength() + 1)*sizeof(TCHAR);
	sData.cbConstValue = (m_szConstValue.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDerivation = (m_szDerivation.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	sData.cbSubTagRefs = (bBinary) ? (INT)(m_nSubTagRefs.GetSize()*sizeof(UINT)) : 0;
	sData.cbCalTableRefs = (bBinary) ? (INT)(m_nCalTableRefs.GetSize()*sizeof(UINT)) : 0;
	sData.cbOolTableRefs = (bBinary) ? (INT)(m_nOolTableRefs.GetSize()*sizeof(UINT)) : 0;
	sData.cbCalValidityRefs = (bBinary) ? (INT)(m_nCalValidityRefs.GetSize()*sizeof(UINT)) : 0;
	sData.cbOolValidityRefs = (bBinary) ? (INT)(m_nOolValidityRefs.GetSize()*sizeof(UINT)) : 0;
	sData.cbTriggerRefs[0] = (bBinary) ? (INT)(m_nTriggerRefs[0].GetSize()*sizeof(UINT)) : 0;
	sData.cbTriggerRefs[1] = (bBinary) ? (INT)(m_nTriggerRefs[1].GetSize()*sizeof(UINT)) : 0;
	sData.cbValidityRefs = (bBinary) ? (INT)(m_nValidityRefs.GetSize()*sizeof(UINT)) : 0;
	sData.cbTrigger = (!bBinary) ? ((m_szTrigger.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbSubSystem[0] = (!bBinary) ? ((m_szSubSystem[0].GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbSubSystem[1] = (!bBinary) ? ((m_szSubSystem[1].GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbEquipment[0] = (!bBinary) ? ((m_szEquipment[0].GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbEquipment[1] = (!bBinary) ? ((m_szEquipment[1].GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbOperationalInfo = (!bBinary) ? ((m_szOperationalInfo.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbDangerConditions = (!bBinary) ? ((m_szDangerConditions.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbRelatedParameter = (!bBinary) ? ((m_szRelatedParameter.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbValidityParameter = (!bBinary) ? ((m_szValidityParameter.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbValidityConditions = (!bBinary) ? ((m_szValidityConditions.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbAssociatedTelecommands = (!bBinary) ? ((m_szAssociatedTelecommands.GetLength() + 1)*sizeof(TCHAR)) : 0;
	for (nItem = 0, nItems = (INT)m_szCalTables.GetSize(), sData.cbCalTables = 0; nItem < nItems; nItem++, sData.cbCalTables += cbData)
	{
		nCalTablesData[0].SetSize(sData.cbCalTables + (cbData = (m_szCalTables.GetAt(nItem).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nCalTablesData[0].GetData() + sData.cbCalTables, (LPCTSTR)m_szCalTables.GetAt(nItem), cbData);
	}
	for (nItem = 0, nItems = (INT)m_szOolTables.GetSize(), sData.cbOolTables = 0; nItem < nItems; nItem++, sData.cbOolTables += cbData)
	{
		nOolTablesData[0].SetSize(sData.cbOolTables + (cbData = (m_szOolTables.GetAt(nItem).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nOolTablesData[0].GetData() + sData.cbOolTables, (LPCTSTR)m_szOolTables.GetAt(nItem), cbData);
	}
	for (nItem = 0, nItems = (INT)m_szCalValidityParameters.GetSize(), sData.cbCalValidityParameters = 0, sData.cbCalValidityValues = (INT)(m_nCalValidityValues.GetSize()*sizeof(ULONGLONG)); nItem < nItems; nItem++, sData.cbCalValidityParameters += cbData)
	{
		nCalTablesData[1].SetSize(sData.cbCalValidityParameters + (cbData = (m_szCalValidityParameters.GetAt(nItem).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nCalTablesData[1].GetData() + sData.cbCalValidityParameters, (LPCTSTR)m_szCalValidityParameters.GetAt(nItem), cbData);
	}
	for (nItem = 0, nItems = (INT)m_szOolValidityParameters.GetSize(), sData.cbOolValidityParameters = 0, sData.cbOolValidityValues = (INT)(m_nOolValidityValues.GetSize()*sizeof(ULONGLONG)); nItem < nItems; nItem++, sData.cbOolValidityParameters += cbData)
	{
		nOolTablesData[1].SetSize(sData.cbOolValidityParameters + (cbData = (m_szOolValidityParameters.GetAt(nItem).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nOolTablesData[1].GetData() + sData.cbOolValidityParameters, (LPCTSTR)m_szOolValidityParameters.GetAt(nItem), cbData);
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbTag + sData.cbDescription + sData.cbUnit + sData.cbDetails + sData.cbConstValue + sData.cbDerivation + sData.cbTrigger + sData.cbSubSystem[0] + sData.cbSubSystem[1] + sData.cbEquipment[0] + sData.cbEquipment[1] + sData.cbOperationalInfo + sData.cbDangerConditions + sData.cbRelatedParameter + sData.cbValidityParameter + sData.cbValidityConditions + sData.cbAssociatedTelecommands + sData.cbCalTables + sData.cbOolTables + sData.cbCalValidityParameters + sData.cbOolValidityParameters + sData.cbCalValidityValues + sData.cbOolValidityValues + sData.cbSubTagRefs + sData.cbCalTableRefs + sData.cbOolTableRefs + sData.cbCalValidityRefs + sData.cbOolValidityRefs + sData.cbValidityRefs + sData.cbTriggerRefs[0] + sData.cbTriggerRefs[1])), sData.nID = m_nID, sData.nTypeCode = m_nTypeCode, sData.nFormatCode = m_nFormatCode, sData.nInterrogationCode = m_nInterrogationCode, sData.nAttributes = m_nAttributes, sData.nWidth[0] = m_nWidth[0], sData.nWidth[1] = m_nWidth[1], sData.nOBTID = m_nOBTID, sData.nConstValue = m_nConstValue, sData.nValidityValue = m_nValidityValue, sData.nDigits = m_nDigits, sData.nStatus = m_nStatus, sData.nValidityParameterRef = (bBinary) ? m_nValidityParameterRef : -1, sData.nRelatedParameterRef = (bBinary) ? m_nRelatedParameterRef : -1, sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szTag, sData.cbTag);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTag), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szUnit, sData.cbUnit);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbUnit), (LPCTSTR)m_szDetails, sData.cbDetails);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDetails), (LPCTSTR)m_szConstValue, sData.cbConstValue);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbConstValue), (LPCTSTR)m_szDerivation, sData.cbDerivation);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDerivation), (LPCTSTR)m_szTrigger, sData.cbTrigger);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTrigger), (LPCTSTR)m_szSubSystem[0], sData.cbSubSystem[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbSubSystem[0]), (LPCTSTR)m_szSubSystem[1], sData.cbSubSystem[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbSubSystem[1]), (LPCTSTR)m_szEquipment[0], sData.cbEquipment[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbEquipment[0]), (LPCTSTR)m_szEquipment[1], sData.cbEquipment[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbEquipment[1]), (LPCTSTR)m_szOperationalInfo, sData.cbOperationalInfo);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbOperationalInfo), (LPCTSTR)m_szDangerConditions, sData.cbDangerConditions);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDangerConditions), (LPCTSTR)m_szRelatedParameter, sData.cbRelatedParameter);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbRelatedParameter), (LPCTSTR)m_szValidityParameter, sData.cbValidityParameter);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbValidityParameter), (LPCTSTR)m_szValidityConditions, sData.cbValidityConditions);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbValidityConditions), (LPCTSTR)m_szAssociatedTelecommands, sData.cbAssociatedTelecommands);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbAssociatedTelecommands), nCalTablesData[0].GetData(), sData.cbCalTables);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbCalTables), nOolTablesData[0].GetData(), sData.cbOolTables);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbOolTables), nCalTablesData[1].GetData(), sData.cbCalValidityParameters);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbCalValidityParameters), nOolTablesData[1].GetData(), sData.cbOolValidityParameters);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbOolValidityParameters), m_nSubTagRefs.GetData(), sData.cbSubTagRefs);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbSubTagRefs), m_nCalValidityValues.GetData(), sData.cbCalValidityValues);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbCalValidityValues), m_nOolValidityValues.GetData(), sData.cbOolValidityValues);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbOolValidityValues), m_nCalTableRefs.GetData(), sData.cbCalTableRefs);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbCalTableRefs), m_nOolTableRefs.GetData(), sData.cbOolTableRefs);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbOolTableRefs), m_nCalValidityRefs.GetData(), sData.cbCalValidityRefs);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbCalValidityRefs), m_nOolValidityRefs.GetData(), sData.cbOolValidityRefs);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbOolValidityRefs), m_nValidityRefs.GetData(), sData.cbValidityRefs);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbValidityRefs), m_nTriggerRefs[0].GetData(), sData.cbTriggerRefs[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTriggerRefs[0]), m_nTriggerRefs[1].GetData(), sData.cbTriggerRefs[1]);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMParameter::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbItem;
	INT  cbItems;
	INT  cbData;
	DATA  sData;
	CByteArray  nCalTablesData[2];
	CByteArray  nOolTablesData[2];

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbTag + sData.cbDescription + sData.cbUnit + sData.cbDetails + sData.cbConstValue + sData.cbDerivation + sData.cbTrigger + sData.cbSubSystem[0] + sData.cbSubSystem[1] + sData.cbEquipment[0] + sData.cbEquipment[1] + sData.cbOperationalInfo + sData.cbDangerConditions + sData.cbRelatedParameter + sData.cbValidityParameter + sData.cbValidityConditions + sData.cbAssociatedTelecommands + sData.cbCalTables + sData.cbOolTables + sData.cbCalValidityParameters + sData.cbOolValidityParameters + sData.cbCalValidityValues + sData.cbOolValidityValues + sData.cbSubTagRefs + sData.cbCalTableRefs + sData.cbOolTableRefs + sData.cbCalValidityRefs + sData.cbOolValidityRefs + sData.cbValidityRefs + sData.cbTriggerRefs[0] + sData.cbTriggerRefs[1] && sData.cbTag > 0 && sData.cbDescription > 0 && sData.cbUnit > 0 && sData.cbDetails > 0 && sData.cbConstValue > 0 && sData.cbDerivation > 0 && sData.cbTrigger >= 0 && sData.cbSubSystem[0] >= 0 && sData.cbSubSystem[1] >= 0 && sData.cbEquipment[0] >= 0 && sData.cbEquipment[1] >= 0 && sData.cbOperationalInfo >= 0 && sData.cbDangerConditions >= 0 && sData.cbRelatedParameter >= 0 && sData.cbValidityParameter >= 0 && sData.cbValidityConditions >= 0 && sData.cbAssociatedTelecommands >= 0 && sData.cbCalTables >= 0 && sData.cbOolTables >= 0 && sData.cbCalValidityParameters >= 0 && sData.cbOolValidityParameters >= 0 && sData.cbCalValidityValues >= 0 && sData.cbOolValidityValues >= 0 && sData.cbSubTagRefs >= 0 && sData.cbCalTableRefs >= 0 && sData.cbOolTableRefs >= 0 && sData.cbCalValidityRefs >= 0 && sData.cbOolValidityRefs >= 0 && sData.cbValidityRefs >= 0 && sData.cbTriggerRefs[0] >= 0 && sData.cbTriggerRefs[1] >= 0 && sData.bBinary == bBinary; )
	{
		for (nCalTablesData[0].SetSize(sData.cbCalTables), nOolTablesData[0].SetSize(sData.cbOolTables), nCalTablesData[1].SetSize(sData.cbCalValidityParameters), nOolTablesData[1].SetSize(sData.cbOolValidityParameters), m_nCalValidityValues.SetSize(sData.cbCalValidityValues / sizeof(ULONGLONG)), m_nOolValidityValues.SetSize(sData.cbOolValidityValues / sizeof(ULONGLONG)), m_nSubTagRefs.SetSize(sData.cbSubTagRefs / sizeof(UINT)), m_nCalTableRefs.SetSize(sData.cbCalTableRefs / sizeof(UINT)), m_nOolTableRefs.SetSize(sData.cbOolTableRefs / sizeof(UINT)), m_nCalValidityRefs.SetSize(sData.cbCalValidityRefs / sizeof(UINT)), m_nOolValidityRefs.SetSize(sData.cbOolValidityRefs / sizeof(UINT)), m_nValidityRefs.SetSize(sData.cbValidityRefs / sizeof(UINT)), m_nTriggerRefs[0].SetSize(sData.cbTriggerRefs[0] / sizeof(UINT)), m_nTriggerRefs[1].SetSize(sData.cbTriggerRefs[1] / sizeof(UINT)); nCalTablesData[0].GetSize() == sData.cbCalTables && nOolTablesData[0].GetSize() == sData.cbOolTables && nCalTablesData[1].GetSize() == sData.cbCalValidityParameters && nOolTablesData[1].GetSize() == sData.cbOolValidityParameters && m_nCalValidityValues.GetSize() == sData.cbCalValidityValues / sizeof(ULONGLONG) && m_nOolValidityValues.GetSize() == sData.cbOolValidityValues / sizeof(ULONGLONG) && m_nSubTagRefs.GetSize() == sData.cbSubTagRefs / sizeof(UINT) && m_nCalTableRefs.GetSize() == sData.cbCalTableRefs / sizeof(UINT) && m_nOolTableRefs.GetSize() == sData.cbOolTableRefs / sizeof(UINT) && m_nCalValidityRefs.GetSize() == sData.cbCalValidityRefs / sizeof(UINT) && m_nOolValidityRefs.GetSize() == sData.cbOolValidityRefs / sizeof(UINT) && m_nValidityRefs.GetSize() == sData.cbValidityRefs / sizeof(UINT) && m_nTriggerRefs[0].GetSize() == sData.cbTriggerRefs[0] / sizeof(UINT) && m_nTriggerRefs[1].GetSize() == sData.cbTriggerRefs[1] / sizeof(UINT); )
		{
			CopyMemory(m_szTag.GetBufferSetLength(STRINGCHARS(sData.cbTag)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbTag));
			CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbTag), STRINGBYTES(sData.cbDescription));
			CopyMemory(m_szUnit.GetBufferSetLength(STRINGCHARS(sData.cbUnit)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbUnit));
			CopyMemory(m_szDetails.GetBufferSetLength(STRINGCHARS(sData.cbDetails)), nInfo.GetData() + (cbData = cbData + sData.cbUnit), STRINGBYTES(sData.cbDetails));
			CopyMemory(m_szConstValue.GetBufferSetLength(STRINGCHARS(sData.cbConstValue)), nInfo.GetData() + (cbData = cbData + sData.cbDetails), STRINGBYTES(sData.cbConstValue));
			CopyMemory(m_szDerivation.GetBufferSetLength(STRINGCHARS(sData.cbDerivation)), nInfo.GetData() + (cbData = cbData + sData.cbConstValue), STRINGBYTES(sData.cbDerivation));
			CopyMemory(m_szTrigger.GetBufferSetLength(STRINGCHARS(sData.cbTrigger)), nInfo.GetData() + (cbData = cbData + sData.cbDerivation), STRINGBYTES(sData.cbTrigger));
			CopyMemory(m_szSubSystem[0].GetBufferSetLength(STRINGCHARS(sData.cbSubSystem[0])), nInfo.GetData() + (cbData = cbData + sData.cbTrigger), STRINGBYTES(sData.cbSubSystem[0]));
			CopyMemory(m_szSubSystem[1].GetBufferSetLength(STRINGCHARS(sData.cbSubSystem[1])), nInfo.GetData() + (cbData = cbData + sData.cbSubSystem[0]), STRINGBYTES(sData.cbSubSystem[1]));
			CopyMemory(m_szEquipment[0].GetBufferSetLength(STRINGCHARS(sData.cbEquipment[0])), nInfo.GetData() + (cbData = cbData + sData.cbSubSystem[1]), STRINGBYTES(sData.cbEquipment[0]));
			CopyMemory(m_szEquipment[1].GetBufferSetLength(STRINGCHARS(sData.cbEquipment[1])), nInfo.GetData() + (cbData = cbData + sData.cbEquipment[0]), STRINGBYTES(sData.cbEquipment[1]));
			CopyMemory(m_szOperationalInfo.GetBufferSetLength(STRINGCHARS(sData.cbOperationalInfo)), nInfo.GetData() + (cbData = cbData + sData.cbEquipment[1]), STRINGBYTES(sData.cbOperationalInfo));
			CopyMemory(m_szDangerConditions.GetBufferSetLength(STRINGCHARS(sData.cbDangerConditions)), nInfo.GetData() + (cbData = cbData + sData.cbOperationalInfo), STRINGBYTES(sData.cbDangerConditions));
			CopyMemory(m_szRelatedParameter.GetBufferSetLength(STRINGCHARS(sData.cbRelatedParameter)), nInfo.GetData() + (cbData = cbData + sData.cbDangerConditions), STRINGBYTES(sData.cbRelatedParameter));
			CopyMemory(m_szValidityParameter.GetBufferSetLength(STRINGCHARS(sData.cbValidityParameter)), nInfo.GetData() + (cbData = cbData + sData.cbRelatedParameter), STRINGBYTES(sData.cbValidityParameter));
			CopyMemory(m_szValidityConditions.GetBufferSetLength(STRINGCHARS(sData.cbValidityConditions)), nInfo.GetData() + (cbData = cbData + sData.cbValidityParameter), STRINGBYTES(sData.cbValidityConditions));
			CopyMemory(m_szAssociatedTelecommands.GetBufferSetLength(STRINGCHARS(sData.cbAssociatedTelecommands)), nInfo.GetData() + (cbData = cbData + sData.cbValidityConditions), STRINGBYTES(sData.cbAssociatedTelecommands));
			CopyMemory(nCalTablesData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbAssociatedTelecommands), sData.cbCalTables);
			CopyMemory(nOolTablesData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbCalTables), sData.cbOolTables);
			CopyMemory(nCalTablesData[1].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbOolTables), sData.cbCalValidityParameters);
			CopyMemory(nOolTablesData[1].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbCalValidityParameters), sData.cbOolValidityParameters);
			CopyMemory(m_nCalValidityValues.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbOolValidityParameters), sData.cbCalValidityValues);
			CopyMemory(m_nOolValidityValues.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbCalValidityValues), sData.cbOolValidityValues);
			CopyMemory(m_nSubTagRefs.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbOolValidityValues), sData.cbSubTagRefs);
			CopyMemory(m_nCalTableRefs.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbSubTagRefs), sData.cbCalTableRefs);
			CopyMemory(m_nOolTableRefs.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbCalTableRefs), sData.cbOolTableRefs);
			CopyMemory(m_nCalValidityRefs.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbOolTableRefs), sData.cbCalValidityRefs);
			CopyMemory(m_nOolValidityRefs.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbCalValidityRefs), sData.cbOolValidityRefs);
			CopyMemory(m_nValidityRefs.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbOolValidityRefs), sData.cbValidityRefs);
			CopyMemory(m_nTriggerRefs[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbValidityRefs), sData.cbTriggerRefs[0]);
			CopyMemory(m_nTriggerRefs[1].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbTriggerRefs[0]), sData.cbTriggerRefs[1]);
			for (m_nID = sData.nID, m_nTypeCode = sData.nTypeCode, m_nFormatCode = sData.nFormatCode, m_nInterrogationCode = sData.nInterrogationCode, m_nAttributes = sData.nAttributes, m_nWidth[0] = sData.nWidth[0], m_nWidth[1] = sData.nWidth[1], m_nOBTID = sData.nOBTID, m_nConstValue = sData.nConstValue, m_nValidityValue = sData.nValidityValue, m_nDigits = sData.nDigits, m_nStatus = sData.nStatus, m_nValidityParameterRef = sData.nValidityParameterRef, m_nRelatedParameterRef = sData.nRelatedParameterRef, m_szTag.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), m_szUnit.ReleaseBuffer(), m_szDetails.ReleaseBuffer(), m_szConstValue.ReleaseBuffer(), m_szDerivation.ReleaseBuffer(), m_szTrigger.ReleaseBuffer(), m_szSubSystem[0].ReleaseBuffer(), m_szSubSystem[1].ReleaseBuffer(), m_szEquipment[0].ReleaseBuffer(), m_szEquipment[1].ReleaseBuffer(), m_szOperationalInfo.ReleaseBuffer(), m_szDangerConditions.ReleaseBuffer(), m_szValidityParameter.ReleaseBuffer(), m_szValidityConditions.ReleaseBuffer(), m_szRelatedParameter.ReleaseBuffer(), m_szAssociatedTelecommands.ReleaseBuffer(), m_szCalTables.RemoveAll(), cbItem = cbItems = 0; cbItems < sData.cbCalTables; cbItems += (cbItem = (m_szCalTables.GetAt(m_szCalTables.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
			{
				m_szCalTables.Add((LPCTSTR)(nCalTablesData[0].GetData() + cbItems));
				continue;
			}
			for (m_szOolTables.RemoveAll(), cbItem = cbItems = 0; cbItems < sData.cbOolTables; cbItems += (cbItem = (m_szOolTables.GetAt(m_szOolTables.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
			{
				m_szOolTables.Add((LPCTSTR)(nOolTablesData[0].GetData() + cbItems));
				continue;
			}
			for (m_szCalValidityParameters.RemoveAll(), cbItem = cbItems = 0; cbItems < sData.cbCalValidityParameters; cbItems += (cbItem = (m_szCalValidityParameters.GetAt(m_szCalValidityParameters.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
			{
				m_szCalValidityParameters.Add((LPCTSTR)(nCalTablesData[1].GetData() + cbItems));
				continue;
			}
			for (m_szOolValidityParameters.RemoveAll(), cbItem = cbItems = 0; cbItems < sData.cbOolValidityParameters; cbItems += (cbItem = (m_szOolValidityParameters.GetAt(m_szOolValidityParameters.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
			{
				m_szOolValidityParameters.Add((LPCTSTR)(nOolTablesData[1].GetData() + cbItems));
				continue;
			}
			return TRUE;
		}
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMParameters

CDatabaseTMParameters::CDatabaseTMParameters() : CPtrArray()
{
	return;
}

CDatabaseTMParameters::~CDatabaseTMParameters()
{
	RemoveAll();
}

INT CDatabaseTMParameters::Add(CDatabaseTMParameter *pParameter)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pParameter->GetTag(), TRUE)) >= 0) InsertAt(nIndex, pParameter, 1);
	return nIndex;
}

INT CDatabaseTMParameters::Find(LPCTSTR pszTag) CONST
{
	return FindIndex(pszTag);
}

CDatabaseTMParameter *CDatabaseTMParameters::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTMParameter *)NULL);
}

CDatabaseTMParameter *CDatabaseTMParameters::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTMParameter *)NULL);
}

VOID CDatabaseTMParameters::RemoveAll()
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter))) delete pParameter;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMParameters::Copy(CONST CDatabaseTMParameters *pParameters)
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)pParameters->GetSize(), RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = new CDatabaseTMParameter))
		{
			pParameter->Copy(pParameters->GetAt(nParameter));
			InsertAt(nParameter, pParameter, 1);
			continue;
		}
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTMParameters::Compare(CONST CDatabaseTMParameters *pParameters) CONST
{
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (pParameters->GetSize() == GetSize()) ? (INT)GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if (!pParameters->GetAt(nParameter)->Compare(GetAt(nParameter))) break;
		continue;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTMParameters::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nParameter;
	INT  nParameters;
	CByteArray  nParametersData;
	CDatabaseTMParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(), nInfo.RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)) && pParameter->Map(nParametersData, bBinary) && nInfo.Append(nParametersData) >= 0) continue;
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTMParameters::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbParameter;
	INT  cbParameters;
	CByteArray  nParametersData;
	CDatabaseTMParameter  *pParameter;

	for (cbParameters = 0, RemoveAll(); cbParameters < nInfo.GetSize(); cbParameters += cbParameter)
	{
		for (CopyMemory(&cbParameter, nInfo.GetData() + cbParameters, sizeof(cbParameter)), nParametersData.SetSize(max(min(cbParameter, nInfo.GetSize() - cbParameters), 0)); nParametersData.GetSize() >= 0; )
		{
			CopyMemory(nParametersData.GetData(), nInfo.GetData() + cbParameters, nParametersData.GetSize());
			break;
		}
		if ((pParameter = new CDatabaseTMParameter))
		{
			if (pParameter->Unmap(nParametersData, bBinary) && Add(pParameter) >= 0) continue;
			delete pParameter;
		}
		break;
	}
	return((cbParameters == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTMParameters::FindIndex(LPCTSTR pszTag, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTMParameter  *pParameter;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pParameter = GetAt(nIndex[0]))) ? ((nIndex[1] = (pParameter->GetTag() <= pszTag)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pParameter = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pParameter->GetTag() == pszTag) || (bInsert && (((pParameter = GetAt(max(nIndex[0] - 1, 0))) && pParameter->GetTag() != pszTag && (pParameter = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pParameter->GetTag() != pszTag) || !GetSize()) && lstrlen(pszTag) > 0)) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMParameterGroup

CDatabaseTMParameterGroup::CDatabaseTMParameterGroup() : CStringArray()
{
	return;
}

CDatabaseTMParameterGroup::~CDatabaseTMParameterGroup()
{
	RemoveAll();
}

VOID CDatabaseTMParameterGroup::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTMParameterGroup::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTMParameterGroup::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTMParameterGroup::GetDescription() CONST
{
	return m_szDescription;
}

INT CDatabaseTMParameterGroup::Add(LPCTSTR pszTag)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pszTag, TRUE)) >= 0) InsertAt(nIndex, pszTag);
	return nIndex;
}

INT CDatabaseTMParameterGroup::Find(LPCTSTR pszTag) CONST
{
	return FindIndex(pszTag);
}

CString CDatabaseTMParameterGroup::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? CStringArray::GetAt(nIndex) : EMPTYSTRING);
}

CString CDatabaseTMParameterGroup::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? CStringArray::GetAt(nIndex) : EMPTYSTRING);
}

VOID CDatabaseTMParameterGroup::RemoveAll()
{
	CStringArray::RemoveAll();
}

BOOL CDatabaseTMParameterGroup::Copy(CONST CDatabaseTMParameterGroup *pParameterGroup)
{
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (INT)pParameterGroup->GetSize(), RemoveAll(), m_szName = pParameterGroup->m_szName, m_szDescription = pParameterGroup->m_szDescription; nParameter < nParameters; nParameter++)
	{
		SetAtGrow(nParameter, pParameterGroup->GetAt(nParameter));
		continue;
	}
	return((pParameterGroup->GetSize() == GetSize()) ? TRUE : FALSE);
}

BOOL CDatabaseTMParameterGroup::Compare(CONST CDatabaseTMParameterGroup *pParameterGroup) CONST
{
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (pParameterGroup->m_szName == m_szName && pParameterGroup->m_szDescription == m_szDescription && pParameterGroup->GetSize() == GetSize()) ? (INT)pParameterGroup->GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if (Find(pParameterGroup->GetAt(nParameter)) >= 0) continue;
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTMParameterGroup::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nParameter;
	INT  nParameters;
	CByteArray  nParametersData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		nParametersData.SetSize(nParametersData.GetSize() + (cbData = ((GetAt(nParameter).GetLength() + 1)*sizeof(TCHAR))));
		CopyMemory(nParametersData.GetData() + nParametersData.GetSize() - cbData, (LPCTSTR)GetAt(nParameter), cbData);
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + (sData.cbParameters = (INT)(nParametersData.GetSize()*sizeof(BYTE))))), sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), nParametersData.GetData(), sData.cbParameters);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMParameterGroup::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbParameter;
	INT  cbParameters;
	CByteArray  nParametersData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbParameters && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbParameters >= 0 && sData.bBinary == bBinary; )
	{
		for (nParametersData.SetSize(sData.cbParameters), CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription)), CopyMemory(nParametersData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbDescription), sData.cbParameters), RemoveAll(), cbParameters = 0; cbParameters < nParametersData.GetSize(); cbParameters += cbParameter)
		{
			SetAtGrow(GetSize(), (LPCTSTR)(nParametersData.GetData() + cbParameters));
			cbParameter = (GetAt((INT)GetUpperBound()).GetLength() + 1)*sizeof(TCHAR);
		}
		m_szDescription.ReleaseBuffer();
		m_szName.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}

INT CDatabaseTMParameterGroup::FindIndex(LPCTSTR pszTag, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = 0, nCount = (INT)GetSize(); nIndex < nCount; nIndex++)
	{
		if (GetAt(nIndex) == pszTag) break;
		continue;
	}
	return(((!bInsert  &&  nIndex < nCount) || (bInsert  &&  nIndex == GetCount())) ? nIndex : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMParameterGroups

CDatabaseTMParameterGroups::CDatabaseTMParameterGroups() : CPtrArray()
{
	return;
}

CDatabaseTMParameterGroups::~CDatabaseTMParameterGroups()
{
	RemoveAll();
}

INT CDatabaseTMParameterGroups::Add(CDatabaseTMParameterGroup *pParameterGroup)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pParameterGroup->GetName(), TRUE)) >= 0) InsertAt(nIndex, pParameterGroup, 1);
	return nIndex;
}

INT CDatabaseTMParameterGroups::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTMParameterGroup *CDatabaseTMParameterGroups::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMParameterGroup *)CPtrArray::GetAt(nIndex) : (CDatabaseTMParameterGroup *)NULL);
}

CDatabaseTMParameterGroup *CDatabaseTMParameterGroups::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMParameterGroup *)CPtrArray::GetAt(nIndex) : (CDatabaseTMParameterGroup *)NULL);
}

VOID CDatabaseTMParameterGroups::RemoveAll()
{
	INT  nParameterGroup;
	INT  nParameterGroups;
	CDatabaseTMParameterGroup  *pParameterGroup;

	for (nParameterGroup = 0, nParameterGroups = (INT)GetSize(); nParameterGroup < nParameterGroups; nParameterGroup++)
	{
		if ((pParameterGroup = GetAt(nParameterGroup))) delete pParameterGroup;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMParameterGroups::Copy(CONST CDatabaseTMParameterGroups *pParameterGroups)
{
	INT  nParameterGroup;
	INT  nParameterGroups;
	CDatabaseTMParameterGroup  *pParameterGroup;

	for (nParameterGroup = 0, nParameterGroups = (INT)pParameterGroups->GetSize(), RemoveAll(); nParameterGroup < nParameterGroups; nParameterGroup++)
	{
		if ((pParameterGroup = new CDatabaseTMParameterGroup))
		{
			pParameterGroup->Copy(pParameterGroups->GetAt(nParameterGroup));
			InsertAt(nParameterGroup, pParameterGroup, 1);
			continue;
		}
		break;
	}
	return((nParameterGroup == nParameterGroups) ? TRUE : FALSE);
}

BOOL CDatabaseTMParameterGroups::Compare(CONST CDatabaseTMParameterGroups *pParameterGroups) CONST
{
	INT  nParameterGroup;
	INT  nParameterGroups;

	for (nParameterGroup = 0, nParameterGroups = (pParameterGroups->GetSize() == GetSize()) ? (INT)GetSize() : -1; nParameterGroup < nParameterGroups; nParameterGroup++)
	{
		if (!pParameterGroups->GetAt(nParameterGroup)->Compare(GetAt(nParameterGroup))) break;
		continue;
	}
	return((nParameterGroup == nParameterGroups) ? TRUE : FALSE);
}

BOOL CDatabaseTMParameterGroups::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nParameterGroup;
	INT  nParameterGroups;
	CByteArray  nParameterGroupsData;
	CDatabaseTMParameterGroup  *pParameterGroup;

	for (nParameterGroup = 0, nParameterGroups = (INT)GetSize(), nInfo.RemoveAll(); nParameterGroup < nParameterGroups; nParameterGroup++)
	{
		if ((pParameterGroup = GetAt(nParameterGroup)) && pParameterGroup->Map(nParameterGroupsData, bBinary) && nInfo.Append(nParameterGroupsData) >= 0) continue;
		break;
	}
	return((nParameterGroup == nParameterGroups) ? TRUE : FALSE);
}

BOOL CDatabaseTMParameterGroups::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbParameterGroup;
	INT  cbParameterGroups;
	CByteArray  nParameterGroupsData;
	CDatabaseTMParameterGroup  *pParameterGroup;

	for (cbParameterGroups = 0, RemoveAll(); cbParameterGroups < nInfo.GetSize(); cbParameterGroups += cbParameterGroup)
	{
		for (CopyMemory(&cbParameterGroup, nInfo.GetData() + cbParameterGroups, sizeof(cbParameterGroup)), nParameterGroupsData.SetSize(max(min(cbParameterGroup, nInfo.GetSize() - cbParameterGroups), 0)); nParameterGroupsData.GetSize() >= 0; )
		{
			CopyMemory(nParameterGroupsData.GetData(), nInfo.GetData() + cbParameterGroups, nParameterGroupsData.GetSize());
			break;
		}
		if ((pParameterGroup = new CDatabaseTMParameterGroup))
		{
			if (pParameterGroup->Unmap(nParameterGroupsData, bBinary) && Add(pParameterGroup) >= 0) continue;
			delete pParameterGroup;
		}
		break;
	}
	return((cbParameterGroups == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTMParameterGroups::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTMParameterGroup  *pParameterGroup;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pParameterGroup = GetAt(nIndex[0]))) ? ((nIndex[1] = (pParameterGroup->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pParameterGroup = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pParameterGroup->GetName() == pszName) || (bInsert && (((pParameterGroup = GetAt(max(nIndex[0] - 1, 0))) && pParameterGroup->GetName() != pszName && (pParameterGroup = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pParameterGroup->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMNumCalPoint

CDatabaseTMNumCalPoint::CDatabaseTMNumCalPoint() : CObject()
{
	m_X = 0.0;
	m_Y = 0.0;
}
CDatabaseTMNumCalPoint::CDatabaseTMNumCalPoint(double X, double Y) : CObject()
{
	SetPoint(X, Y);
}

VOID CDatabaseTMNumCalPoint::SetPoint(double X, double Y)
{
	m_X = X;
	m_Y = Y;
}

VOID CDatabaseTMNumCalPoint::GetPoint(double &X, double &Y) CONST
{
	X = m_X;
	Y = m_Y;
}

double CDatabaseTMNumCalPoint::GetX() CONST
{
	return m_X;
}

double CDatabaseTMNumCalPoint::GetY() CONST
{
	return m_Y;
}

CDatabaseTMNumCalPoint &CDatabaseTMNumCalPoint::operator=(CONST CDatabaseTMNumCalPoint &cPoint)
{
	Copy(&cPoint);
	return *this;
}

BOOL CDatabaseTMNumCalPoint::operator==(CONST CDatabaseTMNumCalPoint &cPoint) CONST
{
	return Compare(&cPoint);
}

BOOL CDatabaseTMNumCalPoint::operator!=(CONST CDatabaseTMNumCalPoint &cPoint) CONST
{
	return !Compare(&cPoint);
}

VOID CDatabaseTMNumCalPoint::Copy(CONST CDatabaseTMNumCalPoint *pPoint)
{
	m_X = pPoint->m_X;
	m_Y = pPoint->m_Y;
}
VOID CDatabaseTMNumCalPoint::Copy(CONST CDatabaseTCNumCalPoint *pPoint)
{
	m_X = pPoint->m_X;
	m_Y = pPoint->m_Y;
}

BOOL CDatabaseTMNumCalPoint::Compare(CONST CDatabaseTMNumCalPoint *pPoint) CONST
{
	return((m_X == pPoint->m_X  &&  m_Y == pPoint->m_Y) ? TRUE : FALSE);
}

BOOL CDatabaseTMNumCalPoint::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;

	for (nInfo.SetSize((sData.cbSize = sizeof(DATA))), sData.X = m_X, sData.Y = m_Y; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMNumCalPoint::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize; )
	{
		m_X = sData.X;
		m_Y = sData.Y;
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMNumCalTable

CDatabaseTMNumCalTable::CDatabaseTMNumCalTable() : CPtrArray()
{
	m_nPoints = 0;
	m_fCoefficient[0] = 0.0;
	m_fCoefficient[1] = 0.0;
	m_fCoefficient[2] = 0.0;
	m_fCoefficient[3] = 0.0;
	m_fCoefficient[4] = 0.0;
	m_nAttributes = TMCALTABLE_FORMAT_POINTS;
	m_nStatus = TMCALTABLE_RECORDSTATUS_NONE;
}

CDatabaseTMNumCalTable::~CDatabaseTMNumCalTable()
{
	RemoveAll();
}

VOID CDatabaseTMNumCalTable::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTMNumCalTable::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTMNumCalTable::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTMNumCalTable::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTMNumCalTable::SetUnit(LPCTSTR pszUnit)
{
	m_szUnit = pszUnit;
}

CString CDatabaseTMNumCalTable::GetUnit() CONST
{
	return m_szUnit;
}

VOID CDatabaseTMNumCalTable::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTMNumCalTable::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTMNumCalTable::SetPoints(INT nPoints)
{
	m_nPoints = nPoints;
	m_fCoefficient[0] = m_fCoefficient[1] = m_fCoefficient[2] = m_fCoefficient[3] = m_fCoefficient[4] = 0.0;
	m_nAttributes = (m_nAttributes & ~(TMCALTABLE_FORMAT_POLYNOMIALCURVE | TMCALTABLE_FORMAT_LOGARITHMICCURVE)) | TMCALTABLE_FORMAT_POINTS;
}

INT CDatabaseTMNumCalTable::GetPoints() CONST
{
	return m_nPoints;
}

VOID CDatabaseTMNumCalTable::SetPolynomialCurve(double A0, double A1, double A2, double A3, double A4)
{
	m_fCoefficient[0] = A0;
	m_fCoefficient[1] = A1;
	m_fCoefficient[2] = A2;
	m_fCoefficient[3] = A3;
	m_fCoefficient[4] = A4;
	m_nAttributes = (m_nAttributes & ~(TMCALTABLE_FORMAT_POINTS | TMCALTABLE_FORMAT_LOGARITHMICCURVE)) | TMCALTABLE_FORMAT_POLYNOMIALCURVE;
}

BOOL CDatabaseTMNumCalTable::GetPolynomialCurve(double &A0, double &A1, double &A2, double &A3, double &A4) CONST
{
	for (A0 = A1 = A2 = A3 = A4 = 0.0; m_nAttributes & TMCALTABLE_FORMAT_POLYNOMIALCURVE; )
	{
		A0 = m_fCoefficient[0];
		A1 = m_fCoefficient[1];
		A2 = m_fCoefficient[2];
		A3 = m_fCoefficient[3];
		A4 = m_fCoefficient[4];
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMNumCalTable::IsPolynomialCurve() CONST
{
	return((m_nAttributes & TMCALTABLE_FORMAT_POLYNOMIALCURVE) ? TRUE : FALSE);
}

VOID CDatabaseTMNumCalTable::SetLogarithmicCurve(double A0, double A1, double A2, double A3, double A4)
{
	m_fCoefficient[0] = A0;
	m_fCoefficient[1] = A1;
	m_fCoefficient[2] = A2;
	m_fCoefficient[3] = A3;
	m_fCoefficient[4] = A4;
	m_nAttributes = (m_nAttributes & ~(TMCALTABLE_FORMAT_POINTS | TMCALTABLE_FORMAT_POLYNOMIALCURVE)) | TMCALTABLE_FORMAT_LOGARITHMICCURVE;
}

BOOL CDatabaseTMNumCalTable::GetLogarithmicCurve(double &A0, double &A1, double &A2, double &A3, double &A4) CONST
{
	for (A0 = A1 = A2 = A3 = A4 = 0.0; m_nAttributes & TMCALTABLE_FORMAT_LOGARITHMICCURVE; )
	{
		A0 = m_fCoefficient[0];
		A1 = m_fCoefficient[1];
		A2 = m_fCoefficient[2];
		A3 = m_fCoefficient[3];
		A4 = m_fCoefficient[4];
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMNumCalTable::IsLogarithmicCurve() CONST
{
	return((m_nAttributes & TMCALTABLE_FORMAT_LOGARITHMICCURVE) ? TRUE : FALSE);
}

VOID CDatabaseTMNumCalTable::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTMNumCalTable::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseTMNumCalTable::Add(CDatabaseTMNumCalPoint *pPoint)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pPoint->GetX(), TRUE)) >= 0) InsertAt(nIndex, pPoint, 1);
	return nIndex;
}

INT CDatabaseTMNumCalTable::Find(double X) CONST
{
	return FindIndex(X);
}

CDatabaseTMNumCalPoint *CDatabaseTMNumCalTable::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMNumCalPoint *)CPtrArray::GetAt(nIndex) : (CDatabaseTMNumCalPoint *)NULL);
}

CDatabaseTMNumCalPoint *CDatabaseTMNumCalTable::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMNumCalPoint *)CPtrArray::GetAt(nIndex) : (CDatabaseTMNumCalPoint *)NULL);
}

double CDatabaseTMNumCalTable::Calibrate(double X, BOOL bExtrapolate) CONST
{
	double  f;
	double  flnX;
	BOOL  bOut;

	if (IsPolynomialCurve()) return(m_fCoefficient[0] + m_fCoefficient[1] * X + m_fCoefficient[2] * X*X + m_fCoefficient[3] * X*X*X + m_fCoefficient[4] * X*X*X*X);
	if (IsLogarithmicCurve()) return(((f = m_fCoefficient[0] + m_fCoefficient[1] * (flnX = log(X)) + m_fCoefficient[2] * flnX*flnX + m_fCoefficient[3] * flnX*flnX*flnX + m_fCoefficient[4] * flnX*flnX*flnX*flnX) > DBL_EPSILON) ? (1.0 / f) : 0.0);
	return Calibrate(X, bExtrapolate, bOut);
}
double CDatabaseTMNumCalTable::Calibrate(double X, BOOL bExtrapolate, BOOL &bOut) CONST
{
	INT  nPoint;
	INT  nPoints;
	double  Y;

	for (bOut = FALSE; !IsPolynomialCurve() && !IsLogarithmicCurve(); )
	{
		for (nPoint = 1, nPoints = GetPoints(); nPoint < nPoints; nPoint++)
		{
			if (GetAt(nPoint)->GetX() >= X || nPoint == nPoints - 1)
			{
				X = (!bExtrapolate) ? (((bOut = (nPoint == 1 && GetAt(nPoint - 1)->GetX() >= X))) ? GetAt(nPoint - 1)->GetX() : (((bOut = (nPoint == nPoints - 1 && GetAt(nPoint)->GetX() <= X))) ? GetAt(nPoint)->GetX() : X)) : X;
				Y = GetAt(nPoint - 1)->GetY() + ((GetAt(nPoint)->GetY() - GetAt(nPoint - 1)->GetY())*(X - GetAt(nPoint - 1)->GetX())) / (GetAt(nPoint)->GetX() - GetAt(nPoint - 1)->GetX());
				break;
			}
		}
		if (nPoints == 1)
		{
			if (GetAt(nPoints - 1)->GetX() == X)
			{
				Y = GetAt(nPoints - 1)->GetY();
				bOut = FALSE;
				return Y;
			}
			bOut = TRUE;
			return 0.0;
		}
		return Y;
	}
	return Calibrate(X, bExtrapolate);
}

CString CDatabaseTMNumCalTable::CalibrateAsText(double X, INT nDigits, BOOL bExtrapolate) CONST
{
	BOOL  bOut;

	return CalibrateAsText(X, nDigits, bExtrapolate, bOut);
}
CString CDatabaseTMNumCalTable::CalibrateAsText(double X, INT nDigits, BOOL bExtrapolate, BOOL &bOut) CONST
{
	UINT  nAttributes;
	CStringTools  cStringTools;

	return(((nAttributes = GetAttributes()) & TMCALTABLE_ENGCODING_UNSIGNEDINTEGER) ? cStringTools.ConvertLongUIntToString((ULONGLONG)Calibrate(X, bExtrapolate, bOut)) : ((nAttributes & TMCALTABLE_ENGCODING_SIGNEDINTEGER) ? cStringTools.ConvertLongIntToString((LONGLONG)Calibrate(X, bExtrapolate, bOut)) : cStringTools.ConvertFloatToString(Calibrate(X, bExtrapolate, bOut), nDigits)));
}

VOID CDatabaseTMNumCalTable::RemoveAll()
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTMNumCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (INT)GetSize(); nPoint < nPoints; nPoint++)
	{
		if ((pPoint = GetAt(nPoint))) delete pPoint;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMNumCalTable::Copy(CONST CDatabaseTMNumCalTable *pTable)
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTMNumCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_szUnit = pTable->m_szUnit, m_nAttributes = pTable->m_nAttributes, m_nPoints = pTable->m_nPoints, m_fCoefficient[0] = pTable->m_fCoefficient[0], m_fCoefficient[1] = pTable->m_fCoefficient[1], m_fCoefficient[2] = pTable->m_fCoefficient[2], m_fCoefficient[3] = pTable->m_fCoefficient[3], m_fCoefficient[4] = pTable->m_fCoefficient[4], m_nStatus = pTable->m_nStatus, RemoveAll(); nPoint < nPoints; nPoint++)
	{
		if ((pPoint = new CDatabaseTMNumCalPoint))
		{
			pPoint->Copy(pTable->GetAt(nPoint));
			InsertAt(nPoint, pPoint, 1);
			continue;
		}
		break;
	}
	return((nPoint == nPoints) ? TRUE : FALSE);
}
BOOL CDatabaseTMNumCalTable::Copy(CONST CDatabaseTCNumCalTable *pTable)
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTMNumCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_szUnit = pTable->m_szUnit, m_nAttributes = pTable->m_nAttributes, m_nPoints = pTable->m_nPoints, m_fCoefficient[0] = m_fCoefficient[1] = m_fCoefficient[2] = m_fCoefficient[3] = m_fCoefficient[4] = 0.0, m_nStatus = pTable->m_nStatus, RemoveAll(); nPoint < nPoints; nPoint++)
	{
		if ((pPoint = new CDatabaseTMNumCalPoint))
		{
			pPoint->Copy(pTable->GetAt(nPoint));
			InsertAt(nPoint, pPoint, 1);
			continue;
		}
		break;
	}
	return((nPoint == nPoints) ? TRUE : FALSE);
}

BOOL CDatabaseTMNumCalTable::Compare(CONST CDatabaseTMNumCalTable *pTable) CONST
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTMNumCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (pTable->m_szName == m_szName && pTable->m_szDescription == m_szDescription && pTable->m_szUnit == m_szUnit && pTable->m_nAttributes == m_nAttributes && pTable->m_nPoints == m_nPoints && pTable->m_fCoefficient[0] == m_fCoefficient[0] && pTable->m_fCoefficient[1] == m_fCoefficient[1] && pTable->m_fCoefficient[2] == m_fCoefficient[2] && pTable->m_fCoefficient[3] == m_fCoefficient[3] && pTable->m_fCoefficient[4] == m_fCoefficient[4] && pTable->m_nStatus == m_nStatus && pTable->GetSize() == GetSize()) ? (INT)GetSize() : -1; nPoint < nPoints; nPoint++)
	{
		if ((pPoint = pTable->GetAt(nPoint)) && pPoint->Compare(GetAt(nPoint))) continue;
		break;
	}
	return((nPoint == nPoints) ? TRUE : FALSE);
}

BOOL CDatabaseTMNumCalTable::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nPoint;
	INT  nPoints;
	CByteArray  nPointsData[2];
	CDatabaseTMNumCalPoint  *pPoint;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbUnit = (m_szUnit.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nPoint = 0, nPoints = (INT)GetSize(), sData.nAttributes = m_nAttributes, sData.nPoints = m_nPoints, sData.fCoefficient[0] = m_fCoefficient[0], sData.fCoefficient[1] = m_fCoefficient[1], sData.fCoefficient[2] = m_fCoefficient[2], sData.fCoefficient[3] = m_fCoefficient[3], sData.fCoefficient[4] = m_fCoefficient[4], sData.nStatus = m_nStatus; nPoint < nPoints; nPoint++)
	{
		if ((pPoint = GetAt(nPoint)) && pPoint->Map(nPointsData[1], bBinary) && nPointsData[0].Append(nPointsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbUnit + (sData.cbPoints = (INT)(nPointsData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nPoint == nPoints; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szUnit, sData.cbUnit);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbUnit), nPointsData[0].GetData(), sData.cbPoints);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMNumCalTable::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbPoint;
	INT  cbPoints;
	CByteArray  nPointsData[2];
	CDatabaseTMNumCalPoint  *pPoint;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbUnit + sData.cbPoints && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbUnit > 0 && sData.cbPoints >= 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription));
		CopyMemory(m_szUnit.GetBufferSetLength(STRINGCHARS(sData.cbUnit)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbUnit));
		for (nPointsData[0].SetSize(sData.cbPoints), CopyMemory(nPointsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbUnit), sData.cbPoints), m_nAttributes = sData.nAttributes, m_nPoints = sData.nPoints, m_fCoefficient[0] = sData.fCoefficient[0], m_fCoefficient[1] = sData.fCoefficient[1], m_fCoefficient[2] = sData.fCoefficient[2], m_fCoefficient[3] = sData.fCoefficient[3], m_fCoefficient[4] = sData.fCoefficient[4], m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), m_szUnit.ReleaseBuffer(), RemoveAll(), cbPoint = cbPoints = 0; cbPoints < sData.cbPoints; cbPoints += cbPoint)
		{
			for (CopyMemory(&cbPoint, nPointsData[0].GetData() + cbPoints, sizeof(cbPoint)), nPointsData[1].SetSize(max(min(cbPoint, nPointsData[0].GetSize() - cbPoints), 0)); nPointsData[1].GetSize() >= 0; )
			{
				CopyMemory(nPointsData[1].GetData(), nPointsData[0].GetData() + cbPoints, nPointsData[1].GetSize());
				break;
			}
			if ((pPoint = new CDatabaseTMNumCalPoint))
			{
				if (pPoint->Unmap(nPointsData[1], bBinary) && Add(pPoint) >= 0) continue;
				delete pPoint;
			}
			break;
		}
		return((cbPoints == sData.cbPoints) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTMNumCalTable::FindIndex(double X, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTMNumCalPoint  *pPoint;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pPoint = GetAt(nIndex[0]))) ? ((nIndex[1] = (pPoint->GetX() <= X)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pPoint = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pPoint->GetX() == X) || (bInsert && (((pPoint = GetAt(max(nIndex[0] - 1, 0))) && pPoint->GetX() != X && (pPoint = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pPoint->GetX() != X) || !GetSize()))) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMNumCalTables

CDatabaseTMNumCalTables::CDatabaseTMNumCalTables() : CPtrArray()
{
	return;
}

CDatabaseTMNumCalTables::~CDatabaseTMNumCalTables()
{
	RemoveAll();
}

INT CDatabaseTMNumCalTables::Add(CDatabaseTMNumCalTable *pTable)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pTable->GetName(), TRUE)) >= 0) InsertAt(nIndex, pTable, 1);
	return nIndex;
}

INT CDatabaseTMNumCalTables::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTMNumCalTable *CDatabaseTMNumCalTables::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMNumCalTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTMNumCalTable *)NULL);
}

CDatabaseTMNumCalTable *CDatabaseTMNumCalTables::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMNumCalTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTMNumCalTable *)NULL);
}

VOID CDatabaseTMNumCalTables::RemoveAll()
{
	INT  nTable;
	INT  nTables;
	CDatabaseTMNumCalTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable))) delete pTable;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMNumCalTables::Copy(CONST CDatabaseTMNumCalTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTMNumCalTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTMNumCalTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}
BOOL CDatabaseTMNumCalTables::Copy(CONST CDatabaseTCNumCalTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTMNumCalTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTMNumCalTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTMNumCalTables::Compare(CONST CDatabaseTMNumCalTables *pTables) CONST
{
	INT  nTable;
	INT  nTables;

	for (nTable = 0, nTables = (pTables->GetSize() == GetSize()) ? (INT)GetSize() : -1; nTable < nTables; nTable++)
	{
		if (!pTables->GetAt(nTable)->Compare(GetAt(nTable))) break;
		continue;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTMNumCalTables::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nTable;
	INT  nTables;
	CByteArray  nTablesData;
	CDatabaseTMNumCalTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(), nInfo.RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable)) && pTable->Map(nTablesData, bBinary) && nInfo.Append(nTablesData) >= 0) continue;
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTMNumCalTables::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbTable;
	INT  cbTables;
	CByteArray  nTablesData;
	CDatabaseTMNumCalTable  *pTable;

	for (cbTables = 0, RemoveAll(); cbTables < nInfo.GetSize(); cbTables += cbTable)
	{
		for (CopyMemory(&cbTable, nInfo.GetData() + cbTables, sizeof(cbTable)), nTablesData.SetSize(max(min(cbTable, nInfo.GetSize() - cbTables), 0)); nTablesData.GetSize() >= 0; )
		{
			CopyMemory(nTablesData.GetData(), nInfo.GetData() + cbTables, nTablesData.GetSize());
			break;
		}
		if ((pTable = new CDatabaseTMNumCalTable))
		{
			if (pTable->Unmap(nTablesData, bBinary) && Add(pTable) >= 0) continue;
			delete pTable;
		}
		break;
	}
	return((cbTables == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTMNumCalTables::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTMNumCalTable  *pTable;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pTable = GetAt(nIndex[0]))) ? ((nIndex[1] = (pTable->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pTable = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pTable->GetName() == pszName) || (bInsert && (((pTable = GetAt(max(nIndex[0] - 1, 0))) && pTable->GetName() != pszName && (pTable = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pTable->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMTxtCalPoint

CDatabaseTMTxtCalPoint::CDatabaseTMTxtCalPoint() : CObject()
{
	m_X[0] = 0.0;
	m_X[1] = 0.0;
	m_Y.Empty();
}
CDatabaseTMTxtCalPoint::CDatabaseTMTxtCalPoint(double X, LPCTSTR Y) : CObject()
{
	SetPoint(X, Y);
}
CDatabaseTMTxtCalPoint::CDatabaseTMTxtCalPoint(double X1, double X2, LPCTSTR Y) : CObject()
{
	SetRange(X1, X2, Y);
}

VOID CDatabaseTMTxtCalPoint::SetPoint(double X, LPCTSTR Y)
{
	m_X[0] = X;
	m_X[1] = X;
	m_Y = Y;
}

BOOL CDatabaseTMTxtCalPoint::GetPoint(double &X, CString &Y) CONST
{
	if (m_X[0] == m_X[1])
	{
		X = m_X[0];
		Y = m_Y;
		return TRUE;
	}
	return FALSE;
}

VOID CDatabaseTMTxtCalPoint::SetRange(double X1, double X2, LPCTSTR Y)
{
	m_X[0] = X1;
	m_X[1] = X2;
	m_Y = Y;
}

BOOL CDatabaseTMTxtCalPoint::GetRange(double &X1, double &X2, CString &Y) CONST
{
	X1 = m_X[0];
	X2 = m_X[1];
	Y = m_Y;
	return TRUE;
}

CDatabaseTMTxtCalPoint &CDatabaseTMTxtCalPoint::operator=(CONST CDatabaseTMTxtCalPoint &cPoint)
{
	Copy(&cPoint);
	return *this;
}

BOOL CDatabaseTMTxtCalPoint::operator==(CONST CDatabaseTMTxtCalPoint &cPoint) CONST
{
	return Compare(&cPoint);
}

BOOL CDatabaseTMTxtCalPoint::operator!=(CONST CDatabaseTMTxtCalPoint &cPoint) CONST
{
	return !Compare(&cPoint);
}

VOID CDatabaseTMTxtCalPoint::Copy(CONST CDatabaseTMTxtCalPoint *pPoint)
{
	m_X[0] = pPoint->m_X[0];
	m_X[1] = pPoint->m_X[1];
	m_Y = pPoint->m_Y;
}
VOID CDatabaseTMTxtCalPoint::Copy(CONST CDatabaseTCTxtCalPoint *pPoint)
{
	m_X[0] = pPoint->m_X[0];
	m_X[1] = pPoint->m_X[1];
	m_Y = pPoint->m_Y;
}

BOOL CDatabaseTMTxtCalPoint::Compare(CONST CDatabaseTMTxtCalPoint *pPoint) CONST
{
	return((m_X[0] == pPoint->m_X[0] && m_X[1] == pPoint->m_X[1] && m_Y == pPoint->m_Y) ? TRUE : FALSE);
}

BOOL CDatabaseTMTxtCalPoint::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbY = (m_Y.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbY)), sData.X[0] = m_X[0], sData.X[1] = m_X[1]; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_Y, sData.cbY);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMTxtCalPoint::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbY && sData.cbY > 0; )
	{
		CopyMemory(m_Y.GetBufferSetLength(STRINGCHARS(sData.cbY)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbY));
		m_X[0] = sData.X[0];
		m_X[1] = sData.X[1];
		m_Y.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMTxtCalTable

CDatabaseTMTxtCalTable::CDatabaseTMTxtCalTable() : CPtrArray()
{
	m_nPoints = 0;
	m_nAttributes = TMCALTABLE_FORMAT_POINTS | TMCALTABLE_RAWRADIX_DECIMAL;
	m_nStatus = TMCALTABLE_RECORDSTATUS_NONE;
}

CDatabaseTMTxtCalTable::~CDatabaseTMTxtCalTable()
{
	RemoveAll();
}

VOID CDatabaseTMTxtCalTable::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTMTxtCalTable::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTMTxtCalTable::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTMTxtCalTable::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTMTxtCalTable::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTMTxtCalTable::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTMTxtCalTable::SetPoints(INT nPoints)
{
	m_nPoints = nPoints;
}

INT CDatabaseTMTxtCalTable::GetPoints() CONST
{
	return m_nPoints;
}

VOID CDatabaseTMTxtCalTable::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTMTxtCalTable::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseTMTxtCalTable::Add(CDatabaseTMTxtCalPoint *pPoint)
{
	INT  nIndex;
	double  X1;
	double  X2;
	CString  Y;

	if ((nIndex = (pPoint->GetRange(X1, X2, Y)) ? FindIndex(X1, X2, TRUE) : -1) >= 0) InsertAt(nIndex, pPoint, 1);
	return nIndex;
}

INT CDatabaseTMTxtCalTable::Find(double X) CONST
{
	return FindIndex(X, X);
}

CDatabaseTMTxtCalPoint *CDatabaseTMTxtCalTable::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMTxtCalPoint *)CPtrArray::GetAt(nIndex) : (CDatabaseTMTxtCalPoint *)NULL);
}

CDatabaseTMTxtCalPoint *CDatabaseTMTxtCalTable::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMTxtCalPoint *)CPtrArray::GetAt(nIndex) : (CDatabaseTMTxtCalPoint *)NULL);
}

CString CDatabaseTMTxtCalTable::Translate(double X, INT nDigits) CONST
{
	BOOL  bOut;

	return Translate(X, nDigits, bOut);
}
CString CDatabaseTMTxtCalTable::Translate(double X, INT nDigits, BOOL &bOut) CONST
{
	INT  nIndex;
	double  X1;
	double  X2;
	CString  Y;

	return((!(bOut = !((nIndex = Find(X)) >= 0 && nIndex < GetPoints() && GetAt(nIndex)->GetRange(X1, X2, Y)))) ? ((nDigits >= 0) ? (LPCTSTR)Y.Left(nDigits) : (LPCTSTR)Y) : EMPTYSTRING);
}

VOID CDatabaseTMTxtCalTable::RemoveAll()
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTMTxtCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (INT)GetSize(); nPoint < nPoints; nPoint++)
	{
		if ((pPoint = GetAt(nPoint))) delete pPoint;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMTxtCalTable::Copy(CONST CDatabaseTMTxtCalTable *pTable)
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTMTxtCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_nAttributes = pTable->m_nAttributes, m_nPoints = pTable->m_nPoints, m_nStatus = pTable->m_nStatus, RemoveAll(); nPoint < nPoints; nPoint++)
	{
		if ((pPoint = new CDatabaseTMTxtCalPoint))
		{
			pPoint->Copy(pTable->GetAt(nPoint));
			InsertAt(nPoint, pPoint, 1);
			continue;
		}
		break;
	}
	return((nPoint == nPoints) ? TRUE : FALSE);
}
BOOL CDatabaseTMTxtCalTable::Copy(CONST CDatabaseTCTxtCalTable *pTable)
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTMTxtCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_nAttributes = pTable->m_nAttributes, m_nPoints = pTable->m_nPoints, m_nStatus = pTable->m_nStatus, RemoveAll(); nPoint < nPoints; nPoint++)
	{
		if ((pPoint = new CDatabaseTMTxtCalPoint))
		{
			pPoint->Copy(pTable->GetAt(nPoint));
			InsertAt(nPoint, pPoint, 1);
			continue;
		}
		break;
	}
	return((nPoint == nPoints) ? TRUE : FALSE);
}

BOOL CDatabaseTMTxtCalTable::Compare(CONST CDatabaseTMTxtCalTable *pTable) CONST
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTMTxtCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (pTable->m_szName == m_szName && pTable->m_szDescription == m_szDescription && pTable->m_nAttributes == m_nAttributes && pTable->m_nPoints == m_nPoints && pTable->m_nStatus == m_nStatus && pTable->GetSize() == GetSize()) ? (INT)GetSize() : -1; nPoint < nPoints; nPoint++)
	{
		if ((pPoint = pTable->GetAt(nPoint)) && pPoint->Compare(GetAt(nPoint))) continue;
		break;
	}
	return((nPoint == nPoints) ? TRUE : FALSE);
}

BOOL CDatabaseTMTxtCalTable::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nPoint;
	INT  nPoints;
	CByteArray  nPointsData[2];
	CDatabaseTMTxtCalPoint  *pPoint;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nPoint = 0, nPoints = (INT)GetSize(), sData.nAttributes = m_nAttributes, sData.nPoints = m_nPoints, sData.nStatus = m_nStatus; nPoint < nPoints; nPoint++)
	{
		if ((pPoint = GetAt(nPoint)) && pPoint->Map(nPointsData[1], bBinary) && nPointsData[0].Append(nPointsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + (sData.cbPoints = (INT)(nPointsData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nPoint == nPoints; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), nPointsData[0].GetData(), sData.cbPoints);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMTxtCalTable::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbPoint;
	INT  cbPoints;
	CByteArray  nPointsData[2];
	CDatabaseTMTxtCalPoint  *pPoint;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbPoints && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbPoints >= 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription));
		for (nPointsData[0].SetSize(sData.cbPoints), CopyMemory(nPointsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbDescription), sData.cbPoints), m_nAttributes = sData.nAttributes, m_nPoints = sData.nPoints, m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), RemoveAll(), cbPoint = cbPoints = 0; cbPoints < sData.cbPoints; cbPoints += cbPoint)
		{
			for (CopyMemory(&cbPoint, nPointsData[0].GetData() + cbPoints, sizeof(cbPoint)), nPointsData[1].SetSize(max(min(cbPoint, nPointsData[0].GetSize() - cbPoints), 0)); nPointsData[1].GetSize() >= 0; )
			{
				CopyMemory(nPointsData[1].GetData(), nPointsData[0].GetData() + cbPoints, nPointsData[1].GetSize());
				break;
			}
			if ((pPoint = new CDatabaseTMTxtCalPoint))
			{
				if (pPoint->Unmap(nPointsData[1], bBinary) && Add(pPoint) >= 0) continue;
				delete pPoint;
			}
			break;
		}
		return((cbPoints == sData.cbPoints) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTMTxtCalTable::FindIndex(double X1, double X2, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	double  X[2];
	CString  Y;
	CDatabaseTMTxtCalPoint  *pPoint;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pPoint = GetAt(nIndex[0])) && pPoint->GetRange(X[0], X[1], Y)) ? ((nIndex[1] = (X[0] <= X1)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pPoint = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pPoint->GetRange(X[0], X[1], Y) && ((X1 != X2  &&  X[0] == X1  &&  X[1] == X2) || (X1 == X2  &&  X[0] <= X1  &&  X[1] >= X2))) || (bInsert && (((pPoint = GetAt(max(nIndex[0] - 1, 0))) && pPoint->GetRange(X[0], X[1], Y) && (X[0] > X2 || X[1] < X1) && (pPoint = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pPoint->GetRange(X[0], X[1], Y) && (X[0] > X2 || X[1] < X1)) || !GetSize()))) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMTxtCalTables

CDatabaseTMTxtCalTables::CDatabaseTMTxtCalTables() : CPtrArray()
{
	return;
}

CDatabaseTMTxtCalTables::~CDatabaseTMTxtCalTables()
{
	RemoveAll();
}

INT CDatabaseTMTxtCalTables::Add(CDatabaseTMTxtCalTable *pTable)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pTable->GetName(), TRUE)) >= 0) InsertAt(nIndex, pTable, 1);
	return nIndex;
}

INT CDatabaseTMTxtCalTables::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTMTxtCalTable *CDatabaseTMTxtCalTables::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMTxtCalTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTMTxtCalTable *)NULL);
}

CDatabaseTMTxtCalTable *CDatabaseTMTxtCalTables::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMTxtCalTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTMTxtCalTable *)NULL);
}

VOID CDatabaseTMTxtCalTables::RemoveAll()
{
	INT  nTable;
	INT  nTables;
	CDatabaseTMTxtCalTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable))) delete pTable;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMTxtCalTables::Copy(CONST CDatabaseTMTxtCalTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTMTxtCalTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTMTxtCalTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}
BOOL CDatabaseTMTxtCalTables::Copy(CONST CDatabaseTCTxtCalTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTMTxtCalTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTMTxtCalTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTMTxtCalTables::Compare(CONST CDatabaseTMTxtCalTables *pTables) CONST
{
	INT  nTable;
	INT  nTables;

	for (nTable = 0, nTables = (pTables->GetSize() == GetSize()) ? (INT)GetSize() : -1; nTable < nTables; nTable++)
	{
		if (!pTables->GetAt(nTable)->Compare(GetAt(nTable))) break;
		continue;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTMTxtCalTables::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nTable;
	INT  nTables;
	CByteArray  nTablesData;
	CDatabaseTMTxtCalTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(), nInfo.RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable)) && pTable->Map(nTablesData, bBinary) && nInfo.Append(nTablesData) >= 0) continue;
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTMTxtCalTables::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbTable;
	INT  cbTables;
	CByteArray  nTablesData;
	CDatabaseTMTxtCalTable  *pTable;

	for (cbTables = 0, RemoveAll(); cbTables < nInfo.GetSize(); cbTables += cbTable)
	{
		for (CopyMemory(&cbTable, nInfo.GetData() + cbTables, sizeof(cbTable)), nTablesData.SetSize(max(min(cbTable, nInfo.GetSize() - cbTables), 0)); nTablesData.GetSize() >= 0; )
		{
			CopyMemory(nTablesData.GetData(), nInfo.GetData() + cbTables, nTablesData.GetSize());
			break;
		}
		if ((pTable = new CDatabaseTMTxtCalTable))
		{
			if (pTable->Unmap(nTablesData, bBinary) && Add(pTable) >= 0) continue;
			delete pTable;
		}
		break;
	}
	return((cbTables == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTMTxtCalTables::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTMTxtCalTable  *pTable;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pTable = GetAt(nIndex[0]))) ? ((nIndex[1] = (pTable->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pTable = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pTable->GetName() == pszName) || (bInsert && (((pTable = GetAt(max(nIndex[0] - 1, 0))) && pTable->GetName() != pszName && (pTable = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pTable->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMNumOolLimit

CDatabaseTMNumOolLimit::CDatabaseTMNumOolLimit() : CObject()
{
	m_nLimitType = TMOOLLIMIT_TYPE_NONE;
	m_nLimitOrder = 0;
	m_fLimits[0] = 0.0;
	m_fLimits[1] = 0.0;
	m_bLimits[0] = FALSE;
	m_bLimits[1] = FALSE;
	m_nValidityParameterRef = -1;
	m_nValidityValue = 0;
}
CDatabaseTMNumOolLimit::CDatabaseTMNumOolLimit(UINT nType, double fLow, double fHigh) : CObject()
{
	m_nLimitType = nType;
	m_nLimitOrder = 0;
	m_fLimits[0] = (nType != TMOOLLIMIT_TYPE_STATUSCONSISTENCY) ? fLow : NAN;
	m_fLimits[1] = (nType != TMOOLLIMIT_TYPE_STATUSCONSISTENCY) ? fHigh : NAN;
	m_bLimits[0] = TRUE;
	m_bLimits[1] = TRUE;
	m_nValidityParameterRef = -1;
	m_nValidityValue = 0;
}
CDatabaseTMNumOolLimit::CDatabaseTMNumOolLimit(double fDelta, BOOL bMinimum) : CObject()
{
	for (m_nLimitType = TMOOLLIMIT_TYPE_DELTA, m_nLimitOrder = 0; bMinimum; )
	{
		m_fLimits[0] = fDelta;
		m_bLimits[0] = TRUE;
		break;
	}
	if (!bMinimum)
	{
		m_fLimits[1] = fDelta;
		m_bLimits[1] = TRUE;
	}
	m_nValidityParameterRef = -1;
	m_nValidityValue = 0;
}

VOID CDatabaseTMNumOolLimit::SetType(UINT nType)
{
	m_nLimitType = nType;
}

UINT CDatabaseTMNumOolLimit::GetType() CONST
{
	return m_nLimitType;
}

VOID CDatabaseTMNumOolLimit::SetOrder(UINT nOrder)
{
	m_nLimitOrder = nOrder;
}

UINT CDatabaseTMNumOolLimit::GetOrder() CONST
{
	return m_nLimitOrder;
}

BOOL CDatabaseTMNumOolLimit::SetRange(UINT nType, double fLow, double fHigh)
{
	if (nType == TMOOLLIMIT_TYPE_SOFT || nType == TMOOLLIMIT_TYPE_HARD || nType == TMOOLLIMIT_TYPE_EVENT)
	{
		m_nLimitType = nType;
		m_fLimits[0] = fLow;
		m_fLimits[1] = fHigh;
		m_bLimits[0] = TRUE;
		m_bLimits[1] = TRUE;
		return TRUE;
	}
	if (nType == TMOOLLIMIT_TYPE_STATUSCONSISTENCY)
	{
		m_nLimitType = nType;
		m_fLimits[0] = NAN;
		m_fLimits[1] = NAN;
		m_bLimits[0] = TRUE;
		m_bLimits[1] = TRUE;
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMNumOolLimit::GetRange(UINT &nType, double &fLow, double &fHigh) CONST
{
	if (m_nLimitType == TMOOLLIMIT_TYPE_SOFT || m_nLimitType == TMOOLLIMIT_TYPE_HARD || m_nLimitType == TMOOLLIMIT_TYPE_EVENT || nType == TMOOLLIMIT_TYPE_STATUSCONSISTENCY)
	{
		nType = m_nLimitType;
		fLow = m_fLimits[0];
		fHigh = m_fLimits[1];
		return(m_bLimits[0] && m_bLimits[1]);
	}
	return FALSE;
}

BOOL CDatabaseTMNumOolLimit::SetDelta(double fDelta, BOOL bMinimum)
{
	for (m_nLimitType = TMOOLLIMIT_TYPE_DELTA; bMinimum; )
	{
		m_fLimits[0] = fDelta;
		m_bLimits[0] = TRUE;
		return TRUE;
	}
	if (!bMinimum)
	{
		m_fLimits[1] = fDelta;
		m_bLimits[1] = TRUE;
	}
	return TRUE;
}

BOOL CDatabaseTMNumOolLimit::GetDelta(double &fDelta, BOOL bMinimum) CONST
{
	if (m_nLimitType == TMOOLLIMIT_TYPE_DELTA)
	{
		fDelta = (bMinimum) ? m_fLimits[0] : m_fLimits[1];
		return((bMinimum) ? m_bLimits[0] : m_bLimits[1]);
	}
	return FALSE;
}

VOID CDatabaseTMNumOolLimit::SetValidityParameter(LPCTSTR pszTag)
{
	m_szValidityParameter = pszTag;
}

CString CDatabaseTMNumOolLimit::GetValidityParameter() CONST
{
	return m_szValidityParameter;
}

VOID CDatabaseTMNumOolLimit::SetValidityParameterRef(INT nRef)
{
	m_nValidityParameterRef = nRef;
}

INT CDatabaseTMNumOolLimit::GetValidityParameterRef() CONST
{
	return m_nValidityParameterRef;
}

VOID CDatabaseTMNumOolLimit::SetValidityValue(ULONGLONG nValidityValue)
{
	m_nValidityValue = nValidityValue;
}

ULONGLONG CDatabaseTMNumOolLimit::GetValidityValue() CONST
{
	return m_nValidityValue;
}

CDatabaseTMNumOolLimit &CDatabaseTMNumOolLimit::operator=(CONST CDatabaseTMNumOolLimit &cLimit)
{
	Copy(&cLimit);
	return *this;
}

BOOL CDatabaseTMNumOolLimit::operator==(CONST CDatabaseTMNumOolLimit &cLimit) CONST
{
	return Compare(&cLimit);
}

BOOL CDatabaseTMNumOolLimit::operator!=(CONST CDatabaseTMNumOolLimit &cLimit) CONST
{
	return !Compare(&cLimit);
}

VOID CDatabaseTMNumOolLimit::Copy(CONST CDatabaseTMNumOolLimit *pLimit)
{
	m_nLimitType = pLimit->m_nLimitType;
	m_nLimitOrder = pLimit->m_nLimitOrder;
	m_fLimits[0] = pLimit->m_fLimits[0];
	m_fLimits[1] = pLimit->m_fLimits[1];
	m_bLimits[0] = pLimit->m_bLimits[0];
	m_bLimits[1] = pLimit->m_bLimits[1];
	m_szValidityParameter = pLimit->m_szValidityParameter;
	m_nValidityParameterRef = pLimit->m_nValidityParameterRef;
	m_nValidityValue = pLimit->m_nValidityValue;
}
VOID CDatabaseTMNumOolLimit::Copy(CONST CDatabaseTCNumOolLimit *pLimit)
{
	m_nLimitType = pLimit->m_nLimitType;
	m_nLimitOrder = pLimit->m_nLimitOrder;
	m_fLimits[0] = pLimit->m_fLimits[0];
	m_fLimits[1] = pLimit->m_fLimits[1];
	m_bLimits[0] = pLimit->m_bLimits[0];
	m_bLimits[1] = pLimit->m_bLimits[1];
	m_szValidityParameter = pLimit->m_szValidityParameter;
	m_nValidityParameterRef = pLimit->m_nValidityParameterRef;
	m_nValidityValue = pLimit->m_nValidityValue;
}

BOOL CDatabaseTMNumOolLimit::Compare(CONST CDatabaseTMNumOolLimit *pLimit) CONST
{
	return((pLimit->m_nLimitType == m_nLimitType  &&  pLimit->m_nLimitOrder == m_nLimitOrder && (pLimit->m_fLimits[0] == m_fLimits[0] || (isnan(pLimit->m_fLimits[0]) && isnan(m_fLimits[0]))) && (pLimit->m_fLimits[1] == m_fLimits[1] || (isnan(pLimit->m_fLimits[1]) && isnan(m_fLimits[1]))) && pLimit->m_bLimits[0] == m_bLimits[0] && pLimit->m_bLimits[1] == m_bLimits[1] && pLimit->m_szValidityParameter == m_szValidityParameter  &&  pLimit->m_nValidityParameterRef == m_nValidityParameterRef  &&  pLimit->m_nValidityValue == m_nValidityValue) ? TRUE : FALSE);
}

BOOL CDatabaseTMNumOolLimit::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;

	sData.cbValidityParameter = (!bBinary) ? ((m_szValidityParameter.GetLength() + 1)*sizeof(TCHAR)) : 0;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbValidityParameter)), sData.nLimitType = m_nLimitType, sData.nLimitOrder = m_nLimitOrder, sData.fLimits[0] = m_fLimits[0], sData.fLimits[1] = m_fLimits[1], sData.bLimits[0] = m_bLimits[0], sData.bLimits[1] = m_bLimits[1], sData.nValidityParameterRef = (bBinary) ? m_nValidityParameterRef : -1, sData.nValidityValue = m_nValidityValue; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + sizeof(DATA), (LPCTSTR)m_szValidityParameter, sData.cbValidityParameter);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMNumOolLimit::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize + sData.cbValidityParameter && sData.cbValidityParameter >= 0; )
	{
		CopyMemory(m_szValidityParameter.GetBufferSetLength(STRINGCHARS(sData.cbValidityParameter)), nInfo.GetData() + sizeof(DATA), STRINGBYTES(sData.cbValidityParameter));
		m_nLimitType = sData.nLimitType;
		m_nLimitOrder = sData.nLimitOrder;
		m_fLimits[0] = sData.fLimits[0];
		m_fLimits[1] = sData.fLimits[1];
		m_bLimits[0] = sData.bLimits[0];
		m_bLimits[1] = sData.bLimits[1];
		m_nValidityParameterRef = sData.nValidityParameterRef;
		m_nValidityValue = sData.nValidityValue;
		m_szValidityParameter.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMNumOolTable

CDatabaseTMNumOolTable::CDatabaseTMNumOolTable() : CPtrArray()
{
	m_nChecks = 0;
	m_nLimits = 0;
	m_nAttributes = 0;
	m_nStatus = TMOOLTABLE_RECORDSTATUS_NONE;
}

CDatabaseTMNumOolTable::~CDatabaseTMNumOolTable()
{
	RemoveAll();
}

VOID CDatabaseTMNumOolTable::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTMNumOolTable::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTMNumOolTable::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTMNumOolTable::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTMNumOolTable::SetUnit(LPCTSTR pszUnit)
{
	m_szUnit = pszUnit;
}

CString CDatabaseTMNumOolTable::GetUnit() CONST
{
	return m_szUnit;
}

VOID CDatabaseTMNumOolTable::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTMNumOolTable::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTMNumOolTable::SetChecks(INT nChecks)
{
	m_nChecks = nChecks;
}

INT CDatabaseTMNumOolTable::GetChecks() CONST
{
	return m_nChecks;
}

VOID CDatabaseTMNumOolTable::SetLimits(INT nLimits)
{
	m_nLimits = nLimits;
}

INT CDatabaseTMNumOolTable::GetLimits() CONST
{
	return m_nLimits;
}

VOID CDatabaseTMNumOolTable::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTMNumOolTable::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseTMNumOolTable::Add(CDatabaseTMNumOolLimit *pLimit)
{
	INT  nLimit;
	INT  nLimits;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits || !nLimits; nLimit++)
	{
		if (!nLimits || !pLimit->GetOrder())
		{
			nLimit = (INT)CPtrArray::Add(pLimit);
			break;
		}
		if (pLimit->GetOrder() == GetAt(nLimit)->GetOrder())
		{
			nLimits = -1;
			break;
		}
		if (pLimit->GetOrder() < GetAt(nLimit)->GetOrder())
		{
			InsertAt(nLimit, pLimit, 1);
			break;
		}
		if (nLimit == nLimits - 1)
		{
			nLimit = (INT)CPtrArray::Add(pLimit);
			break;
		}
	}
	return((nLimits >= 0) ? nLimit : -1);
}

INT CDatabaseTMNumOolTable::Find(double fLow, double fHigh, BOOL bDelta) CONST
{
	UINT  nType;
	INT  nLimit;
	INT  nLimits;
	double  fLimits[2];
	CDatabaseTMNumOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->GetRange(nType, fLimits[0], fLimits[1]) && ((nType != TMOOLLIMIT_TYPE_DELTA  &&  !bDelta) || (nType == TMOOLLIMIT_TYPE_DELTA  &&  bDelta)) && fLow == fLimits[0] && fHigh == fLimits[1]) break;
		continue;
	}
	return((nLimit < nLimits) ? nLimit : -1);
}
INT CDatabaseTMNumOolTable::Find(double fDelta) CONST
{
	INT  nLimit;
	INT  nLimits;
	double  fLimit;
	CDatabaseTMNumOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->GetDelta(fLimit) && fDelta == fLimit) break;
		continue;
	}
	return((nLimit < nLimits) ? nLimit : -1);
}

CDatabaseTMNumOolLimit *CDatabaseTMNumOolTable::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMNumOolLimit *)CPtrArray::GetAt(nIndex) : (CDatabaseTMNumOolLimit *)NULL);
}

CDatabaseTMNumOolLimit *CDatabaseTMNumOolTable::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMNumOolLimit *)CPtrArray::GetAt(nIndex) : (CDatabaseTMNumOolLimit *)NULL);
}

VOID CDatabaseTMNumOolTable::RemoveAll()
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTMNumOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit))) delete pLimit;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMNumOolTable::Copy(CONST CDatabaseTMNumOolTable *pTable)
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTMNumOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_szUnit = pTable->m_szUnit, m_nAttributes = pTable->m_nAttributes, m_nChecks = pTable->m_nChecks, m_nLimits = pTable->m_nLimits, m_nStatus = pTable->m_nStatus, RemoveAll(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = new CDatabaseTMNumOolLimit))
		{
			pLimit->Copy(pTable->GetAt(nLimit));
			InsertAt(nLimit, pLimit, 1);
			continue;
		}
		break;
	}
	return((nLimit == nLimits) ? TRUE : FALSE);
}
BOOL CDatabaseTMNumOolTable::Copy(CONST CDatabaseTCNumOolTable *pTable)
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTMNumOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_szUnit = pTable->m_szUnit, m_nAttributes = pTable->m_nAttributes, m_nChecks = pTable->m_nChecks, m_nLimits = pTable->m_nLimits, m_nStatus = pTable->m_nStatus, RemoveAll(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = new CDatabaseTMNumOolLimit))
		{
			pLimit->Copy(pTable->GetAt(nLimit));
			InsertAt(nLimit, pLimit, 1);
			continue;
		}
		break;
	}
	return((nLimit == nLimits) ? TRUE : FALSE);
}

BOOL CDatabaseTMNumOolTable::Compare(CONST CDatabaseTMNumOolTable *pTable) CONST
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTMNumOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (pTable->m_szName == m_szName && pTable->m_szDescription == m_szDescription && pTable->m_szUnit == m_szUnit && pTable->m_nAttributes == m_nAttributes && pTable->m_nChecks == m_nChecks && pTable->m_nLimits == m_nLimits && pTable->m_nStatus == m_nStatus && pTable->GetSize() == GetSize()) ? (INT)GetSize() : -1; nLimit < nLimits; nLimit++)
	{
		if ((pLimit = pTable->GetAt(nLimit)) && pLimit->Compare(GetAt(nLimit))) continue;
		break;
	}
	return((nLimit == nLimits) ? TRUE : FALSE);
}

BOOL CDatabaseTMNumOolTable::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nLimit;
	INT  nLimits;
	CByteArray  nLimitsData[2];
	CDatabaseTMNumOolLimit  *pLimit;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbUnit = (m_szUnit.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nLimit = 0, nLimits = (INT)GetSize(), sData.nAttributes = m_nAttributes, sData.nChecks = m_nChecks, sData.nStatus = m_nStatus; nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->Map(nLimitsData[1], bBinary) && nLimitsData[0].Append(nLimitsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbUnit + (sData.cbLimits = (INT)(nLimitsData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nLimit == nLimits; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szDescription, sData.cbUnit);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbUnit), nLimitsData[0].GetData(), sData.cbLimits);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMNumOolTable::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbLimit;
	INT  cbLimits;
	CByteArray  nLimitsData[2];
	CDatabaseTMNumOolLimit  *pLimit;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbUnit + sData.cbLimits && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbUnit > 0 && sData.cbLimits >= 0; )
	{
		for (CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription)), CopyMemory(m_szUnit.GetBufferSetLength(STRINGCHARS(sData.cbUnit)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbUnit)), nLimitsData[0].SetSize(sData.cbLimits), CopyMemory(nLimitsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbUnit), sData.cbLimits), m_nAttributes = sData.nAttributes, m_nChecks = sData.nChecks, m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), m_szUnit.ReleaseBuffer(), RemoveAll(), cbLimit = cbLimits = 0; cbLimits < sData.cbLimits; cbLimits += cbLimit)
		{
			for (CopyMemory(&cbLimit, nLimitsData[0].GetData() + cbLimits, sizeof(cbLimit)), nLimitsData[1].SetSize(max(min(cbLimit, nLimitsData[0].GetSize() - cbLimits), 0)); nLimitsData[1].GetSize() >= 0; )
			{
				CopyMemory(nLimitsData[1].GetData(), nLimitsData[0].GetData() + cbLimits, nLimitsData[1].GetSize());
				break;
			}
			if ((pLimit = new CDatabaseTMNumOolLimit))
			{
				if (pLimit->Unmap(nLimitsData[1], bBinary) && Add(pLimit) >= 0) continue;
				delete pLimit;
			}
			break;
		}
		m_nLimits = (INT)GetSize();
		return((cbLimits == sData.cbLimits) ? TRUE : FALSE);
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMNumOolTables

CDatabaseTMNumOolTables::CDatabaseTMNumOolTables() : CPtrArray()
{
	return;
}

CDatabaseTMNumOolTables::~CDatabaseTMNumOolTables()
{
	RemoveAll();
}

INT CDatabaseTMNumOolTables::Add(CDatabaseTMNumOolTable *pTable)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pTable->GetName(), TRUE)) >= 0) InsertAt(nIndex, pTable, 1);
	return nIndex;
}

INT CDatabaseTMNumOolTables::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTMNumOolTable *CDatabaseTMNumOolTables::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMNumOolTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTMNumOolTable *)NULL);
}

CDatabaseTMNumOolTable *CDatabaseTMNumOolTables::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMNumOolTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTMNumOolTable *)NULL);
}

VOID CDatabaseTMNumOolTables::RemoveAll()
{
	INT  nTable;
	INT  nTables;
	CDatabaseTMNumOolTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable))) delete pTable;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMNumOolTables::Copy(CONST CDatabaseTMNumOolTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTMNumOolTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTMNumOolTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}
BOOL CDatabaseTMNumOolTables::Copy(CONST CDatabaseTCNumOolTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTMNumOolTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTMNumOolTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTMNumOolTables::Compare(CONST CDatabaseTMNumOolTables *pTables) CONST
{
	INT  nTable;
	INT  nTables;

	for (nTable = 0, nTables = (pTables->GetSize() == GetSize()) ? (INT)GetSize() : -1; nTable < nTables; nTable++)
	{
		if (!pTables->GetAt(nTable)->Compare(GetAt(nTable))) break;
		continue;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTMNumOolTables::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nTable;
	INT  nTables;
	CByteArray  nTablesData;
	CDatabaseTMNumOolTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(), nInfo.RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable)) && pTable->Map(nTablesData, bBinary) && nInfo.Append(nTablesData) >= 0) continue;
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTMNumOolTables::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbTable;
	INT  cbTables;
	CByteArray  nTablesData;
	CDatabaseTMNumOolTable  *pTable;

	for (cbTables = 0, RemoveAll(); cbTables < nInfo.GetSize(); cbTables += cbTable)
	{
		for (CopyMemory(&cbTable, nInfo.GetData() + cbTables, sizeof(cbTable)), nTablesData.SetSize(max(min(cbTable, nInfo.GetSize() - cbTables), 0)); nTablesData.GetSize() >= 0; )
		{
			CopyMemory(nTablesData.GetData(), nInfo.GetData() + cbTables, nTablesData.GetSize());
			break;
		}
		if ((pTable = new CDatabaseTMNumOolTable))
		{
			if (pTable->Unmap(nTablesData, bBinary) && Add(pTable) >= 0) continue;
			delete pTable;
		}
		break;
	}
	return((cbTables == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTMNumOolTables::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTMNumOolTable  *pTable;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pTable = GetAt(nIndex[0]))) ? ((nIndex[1] = (pTable->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pTable = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pTable->GetName() == pszName) || (bInsert && (((pTable = GetAt(max(nIndex[0] - 1, 0))) && pTable->GetName() != pszName && (pTable = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pTable->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMTxtOolLimit

CDatabaseTMTxtOolLimit::CDatabaseTMTxtOolLimit() : CObject()
{
	m_nLimitType = TMOOLLIMIT_TYPE_NONE;
	m_nLimitOrder = 0;
	m_fLimits[0] = 0.0;
	m_fLimits[1] = 0.0;
	m_nValidityParameterRef = -1;
	m_nValidityValue = 0;
}
CDatabaseTMTxtOolLimit::CDatabaseTMTxtOolLimit(double fLow, double fHigh) : CObject()
{
	m_nLimitType = TMOOLLIMIT_TYPE_NONE;
	m_nLimitOrder = 0;
	m_fLimits[0] = fLow;
	m_fLimits[1] = fHigh;
	m_nValidityParameterRef = -1;
	m_nValidityValue = 0;
}
CDatabaseTMTxtOolLimit::CDatabaseTMTxtOolLimit(LPCTSTR pszLow, LPCTSTR pszHigh) : CObject()
{
	m_nLimitType = TMOOLLIMIT_TYPE_NONE;
	m_nLimitOrder = 0;
	m_fLimits[0] = 0.0;
	m_fLimits[1] = 0.0;
	m_szLimits[0] = pszLow;
	m_szLimits[1] = pszHigh;
	m_nValidityParameterRef = -1;
	m_nValidityValue = 0;
}

VOID CDatabaseTMTxtOolLimit::SetType(UINT nType)
{
	m_nLimitType = nType;
}

UINT CDatabaseTMTxtOolLimit::GetType() CONST
{
	return m_nLimitType;
}

VOID CDatabaseTMTxtOolLimit::SetOrder(UINT nOrder)
{
	m_nLimitOrder = nOrder;
}

UINT CDatabaseTMTxtOolLimit::GetOrder() CONST
{
	return m_nLimitOrder;
}

VOID CDatabaseTMTxtOolLimit::SetLimit(double fLimit)
{
	m_fLimits[0] = fLimit;
	m_fLimits[1] = fLimit;
	m_szLimits[0].Empty();
	m_szLimits[1].Empty();
}
VOID CDatabaseTMTxtOolLimit::SetLimit(LPCTSTR pszLimit)
{
	m_fLimits[0] = 0.0;
	m_fLimits[1] = 0.0;
	m_szLimits[0] = pszLimit;
	m_szLimits[1] = pszLimit;
}

BOOL CDatabaseTMTxtOolLimit::GetLimit(double &fLimit) CONST
{
	if (m_fLimits[0] == m_fLimits[1] && m_szLimits[0].IsEmpty() && m_szLimits[1].IsEmpty())
	{
		fLimit = m_fLimits[0];
		return TRUE;
	}
	return FALSE;
}
BOOL CDatabaseTMTxtOolLimit::GetLimit(CString &szLimit) CONST
{
	if (m_szLimits[0] == m_szLimits[1] && !m_szLimits[0].IsEmpty() && !m_szLimits[1].IsEmpty())
	{
		szLimit = m_szLimits[0];
		return TRUE;
	}
	return FALSE;
}

VOID CDatabaseTMTxtOolLimit::SetRange(double fLow, double fHigh)
{
	m_fLimits[0] = fLow;
	m_fLimits[1] = fHigh;
	m_szLimits[0].Empty();
	m_szLimits[1].Empty();
}
VOID CDatabaseTMTxtOolLimit::SetRange(LPCTSTR pszLow, LPCTSTR pszHigh)
{
	m_fLimits[0] = 0.0;
	m_fLimits[1] = 0.0;
	m_szLimits[0] = pszLow;
	m_szLimits[1] = pszHigh;
}

BOOL CDatabaseTMTxtOolLimit::GetRange(double &fLow, double &fHigh) CONST
{
	if (m_szLimits[0].IsEmpty() && m_szLimits[1].IsEmpty())
	{
		fLow = m_fLimits[0];
		fHigh = m_fLimits[1];
		return TRUE;
	}
	return FALSE;
}
BOOL CDatabaseTMTxtOolLimit::GetRange(CString &szLow, CString &szHigh) CONST
{
	if (!m_szLimits[0].IsEmpty() || !m_szLimits[1].IsEmpty())
	{
		szLow = m_szLimits[0];
		szHigh = m_szLimits[1];
		return TRUE;
	}
	return FALSE;
}

VOID CDatabaseTMTxtOolLimit::SetValidityParameter(LPCTSTR pszTag)
{
	m_szValidityParameter = pszTag;
}

CString CDatabaseTMTxtOolLimit::GetValidityParameter() CONST
{
	return m_szValidityParameter;
}

VOID CDatabaseTMTxtOolLimit::SetValidityParameterRef(INT nRef)
{
	m_nValidityParameterRef = nRef;
}

INT CDatabaseTMTxtOolLimit::GetValidityParameterRef() CONST
{
	return m_nValidityParameterRef;
}

VOID CDatabaseTMTxtOolLimit::SetValidityValue(ULONGLONG nValidityValue)
{
	m_nValidityValue = nValidityValue;
}

ULONGLONG CDatabaseTMTxtOolLimit::GetValidityValue() CONST
{
	return m_nValidityValue;
}

CDatabaseTMTxtOolLimit &CDatabaseTMTxtOolLimit::operator=(CONST CDatabaseTMTxtOolLimit &cLimit)
{
	Copy(&cLimit);
	return *this;
}

BOOL CDatabaseTMTxtOolLimit::operator==(CONST CDatabaseTMTxtOolLimit &cLimit) CONST
{
	return Compare(&cLimit);
}

BOOL CDatabaseTMTxtOolLimit::operator!=(CONST CDatabaseTMTxtOolLimit &cLimit) CONST
{
	return !Compare(&cLimit);
}

VOID CDatabaseTMTxtOolLimit::Copy(CONST CDatabaseTMTxtOolLimit *pLimit)
{
	m_nLimitType = pLimit->m_nLimitType;
	m_nLimitOrder = pLimit->m_nLimitOrder;
	m_fLimits[0] = pLimit->m_fLimits[0];
	m_fLimits[1] = pLimit->m_fLimits[1];
	m_szLimits[0] = pLimit->m_szLimits[0];
	m_szLimits[1] = pLimit->m_szLimits[1];
	m_szValidityParameter = pLimit->m_szValidityParameter;
	m_nValidityParameterRef = pLimit->m_nValidityParameterRef;
	m_nValidityValue = pLimit->m_nValidityValue;
}
VOID CDatabaseTMTxtOolLimit::Copy(CONST CDatabaseTCTxtOolLimit *pLimit)
{
	m_nLimitType = pLimit->m_nLimitType;
	m_nLimitOrder = pLimit->m_nLimitOrder;
	m_fLimits[0] = pLimit->m_fLimits[0];
	m_fLimits[1] = pLimit->m_fLimits[1];
	m_szLimits[0] = pLimit->m_szLimits[0];
	m_szLimits[1] = pLimit->m_szLimits[1];
	m_szValidityParameter = pLimit->m_szValidityParameter;
	m_nValidityParameterRef = pLimit->m_nValidityParameterRef;
	m_nValidityValue = pLimit->m_nValidityValue;
}

BOOL CDatabaseTMTxtOolLimit::Compare(CONST CDatabaseTMTxtOolLimit *pLimit) CONST
{
	return((pLimit->m_nLimitType == m_nLimitType  &&  pLimit->m_nLimitOrder == m_nLimitOrder && (pLimit->m_fLimits[0] == m_fLimits[0] || (isnan(pLimit->m_fLimits[0]) && isnan(m_fLimits[0]))) && (pLimit->m_fLimits[1] == m_fLimits[1] || (isnan(pLimit->m_fLimits[1]) && isnan(m_fLimits[1]))) && pLimit->m_szLimits[0] == m_szLimits[0] && pLimit->m_szLimits[1] == m_szLimits[1] && pLimit->m_szValidityParameter == m_szValidityParameter  &&  pLimit->m_nValidityParameterRef == m_nValidityParameterRef  &&  pLimit->m_nValidityValue == m_nValidityValue) ? TRUE : FALSE);
}

BOOL CDatabaseTMTxtOolLimit::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;

	sData.cbLimits[0] = (m_szLimits[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbLimits[1] = (m_szLimits[1].GetLength() + 1)*sizeof(TCHAR);
	sData.cbValidityParameter = (!bBinary) ? ((m_szValidityParameter.GetLength() + 1)*sizeof(TCHAR)) : 0;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbLimits[0] + sData.cbLimits[1] + sData.cbValidityParameter)), sData.nLimitType = m_nLimitType, sData.nLimitOrder = m_nLimitOrder, sData.fLimits[0] = m_fLimits[0], sData.fLimits[1] = m_fLimits[1], sData.nValidityParameterRef = (bBinary) ? m_nValidityParameterRef : -1, sData.nValidityValue = m_nValidityValue; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szLimits[0], sData.cbLimits[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbLimits[0]), (LPCTSTR)m_szLimits[1], sData.cbLimits[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbLimits[1]), (LPCTSTR)m_szValidityParameter, sData.cbValidityParameter);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMTxtOolLimit::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbLimits[0] + sData.cbLimits[1] + sData.cbValidityParameter && sData.cbLimits[0] > 0 && sData.cbLimits[1] > 0 && sData.cbValidityParameter >= 0; )
	{
		CopyMemory(m_szLimits[0].GetBufferSetLength(STRINGCHARS(sData.cbLimits[0])), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbLimits[0]));
		CopyMemory(m_szLimits[1].GetBufferSetLength(STRINGCHARS(sData.cbLimits[1])), nInfo.GetData() + (cbData = cbData + sData.cbLimits[0]), STRINGBYTES(sData.cbLimits[1]));
		CopyMemory(m_szValidityParameter.GetBufferSetLength(STRINGCHARS(sData.cbValidityParameter)), nInfo.GetData() + (cbData = cbData + sData.cbLimits[1]), STRINGBYTES(sData.cbValidityParameter));
		m_nLimitType = sData.nLimitType;
		m_nLimitOrder = sData.nLimitOrder;
		m_fLimits[0] = sData.fLimits[0];
		m_fLimits[1] = sData.fLimits[1];
		m_nValidityParameterRef = sData.nValidityParameterRef;
		m_nValidityValue = sData.nValidityValue;
		m_szLimits[0].ReleaseBuffer();
		m_szLimits[1].ReleaseBuffer();
		m_szValidityParameter.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMTxtOolTable

CDatabaseTMTxtOolTable::CDatabaseTMTxtOolTable() : CPtrArray()
{
	m_nChecks = 0;
	m_nLimits = 0;
	m_nAttributes = 0;
	m_nStatus = TMOOLTABLE_RECORDSTATUS_NONE;
}

CDatabaseTMTxtOolTable::~CDatabaseTMTxtOolTable()
{
	RemoveAll();
}

VOID CDatabaseTMTxtOolTable::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTMTxtOolTable::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTMTxtOolTable::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTMTxtOolTable::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTMTxtOolTable::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTMTxtOolTable::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTMTxtOolTable::SetChecks(INT nChecks)
{
	m_nChecks = nChecks;
}

INT CDatabaseTMTxtOolTable::GetChecks() CONST
{
	return m_nChecks;
}

VOID CDatabaseTMTxtOolTable::SetLimits(INT nLimits)
{
	m_nLimits = nLimits;
}

INT CDatabaseTMTxtOolTable::GetLimits() CONST
{
	return m_nLimits;
}

VOID CDatabaseTMTxtOolTable::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTMTxtOolTable::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseTMTxtOolTable::Add(CDatabaseTMTxtOolLimit *pLimit)
{
	INT  nLimit;
	INT  nLimits;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits || !nLimits; nLimit++)
	{
		if (!nLimits || !pLimit->GetOrder())
		{
			nLimit = (INT)CPtrArray::Add(pLimit);
			break;
		}
		if (pLimit->GetOrder() == GetAt(nLimit)->GetOrder())
		{
			nLimits = -1;
			break;
		}
		if (pLimit->GetOrder() < GetAt(nLimit)->GetOrder())
		{
			InsertAt(nLimit, pLimit, 1);
			break;
		}
		if (nLimit == nLimits - 1)
		{
			nLimit = (INT)CPtrArray::Add(pLimit);
			break;
		}
	}
	return((nLimits >= 0) ? nLimit : -1);
}

INT CDatabaseTMTxtOolTable::Find(double fLimit) CONST
{
	INT  nLimit;
	INT  nLimits;
	double  fLimits[1];
	CDatabaseTMTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->GetLimit(fLimits[0]) && fLimit == fLimits[0]) break;
		continue;
	}
	return((nLimit < nLimits) ? nLimit : -1);
}
INT CDatabaseTMTxtOolTable::Find(LPCTSTR pszLimit) CONST
{
	INT  nLimit;
	INT  nLimits;
	CString  szLimits[1];
	CDatabaseTMTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->GetLimit(szLimits[0]) && pszLimit == szLimits[0]) break;
		continue;
	}
	return((nLimit < nLimits) ? nLimit : -1);
}
INT CDatabaseTMTxtOolTable::Find(double fLow, double fHigh) CONST
{
	INT  nLimit;
	INT  nLimits;
	double  fLimits[2];
	CDatabaseTMTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->GetRange(fLimits[0], fLimits[1]) && fLow == fLimits[0] && fHigh == fLimits[1]) break;
		continue;
	}
	return((nLimit < nLimits) ? nLimit : -1);
}
INT CDatabaseTMTxtOolTable::Find(LPCTSTR pszLow, LPCTSTR pszHigh) CONST
{
	INT  nLimit;
	INT  nLimits;
	CString  szLimits[2];
	CDatabaseTMTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->GetRange(szLimits[0], szLimits[1]) && pszLow == szLimits[0] && pszHigh == szLimits[1]) break;
		continue;
	}
	return((nLimit < nLimits) ? nLimit : -1);
}

CDatabaseTMTxtOolLimit *CDatabaseTMTxtOolTable::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMTxtOolLimit *)CPtrArray::GetAt(nIndex) : (CDatabaseTMTxtOolLimit *)NULL);
}

CDatabaseTMTxtOolLimit *CDatabaseTMTxtOolTable::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMTxtOolLimit *)CPtrArray::GetAt(nIndex) : (CDatabaseTMTxtOolLimit *)NULL);
}

VOID CDatabaseTMTxtOolTable::RemoveAll()
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTMTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit))) delete pLimit;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMTxtOolTable::Copy(CONST CDatabaseTMTxtOolTable *pTable)
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTMTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_nAttributes = pTable->m_nAttributes, m_nChecks = pTable->m_nChecks, m_nLimits = pTable->m_nLimits, m_nStatus = pTable->m_nStatus, RemoveAll(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = new CDatabaseTMTxtOolLimit))
		{
			pLimit->Copy(pTable->GetAt(nLimit));
			InsertAt(nLimit, pLimit, 1);
			continue;
		}
		break;
	}
	return((nLimit == nLimits) ? TRUE : FALSE);
}
BOOL CDatabaseTMTxtOolTable::Copy(CONST CDatabaseTCTxtOolTable *pTable)
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTMTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_nAttributes = pTable->m_nAttributes, m_nChecks = pTable->m_nChecks, m_nLimits = pTable->m_nLimits, m_nStatus = pTable->m_nStatus, RemoveAll(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = new CDatabaseTMTxtOolLimit))
		{
			pLimit->Copy(pTable->GetAt(nLimit));
			InsertAt(nLimit, pLimit, 1);
			continue;
		}
		break;
	}
	return((nLimit == nLimits) ? TRUE : FALSE);
}

BOOL CDatabaseTMTxtOolTable::Compare(CONST CDatabaseTMTxtOolTable *pTable) CONST
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTMTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (pTable->m_szName == m_szName && pTable->m_szDescription == m_szDescription && pTable->m_nAttributes == m_nAttributes && pTable->m_nChecks == m_nChecks && pTable->m_nLimits == m_nLimits && pTable->m_nStatus == m_nStatus && pTable->GetSize() == GetSize()) ? (INT)GetSize() : -1; nLimit < nLimits; nLimit++)
	{
		if ((pLimit = pTable->GetAt(nLimit)) && pLimit->Compare(GetAt(nLimit))) continue;
		break;
	}
	return((nLimit == nLimits) ? TRUE : FALSE);
}

BOOL CDatabaseTMTxtOolTable::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nLimit;
	INT  nLimits;
	CByteArray  nLimitsData[2];
	CDatabaseTMTxtOolLimit  *pLimit;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nLimit = 0, nLimits = (INT)GetSize(), sData.nAttributes = m_nAttributes, sData.nChecks = m_nChecks, sData.nStatus = m_nStatus; nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->Map(nLimitsData[1], bBinary) && nLimitsData[0].Append(nLimitsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + (sData.cbLimits = (INT)(nLimitsData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nLimit == nLimits; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), nLimitsData[0].GetData(), sData.cbLimits);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTMTxtOolTable::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbLimit;
	INT  cbLimits;
	CByteArray  nLimitsData[2];
	CDatabaseTMTxtOolLimit  *pLimit;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbLimits && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbLimits >= 0; )
	{
		for (CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription)), nLimitsData[0].SetSize(sData.cbLimits), CopyMemory(nLimitsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbDescription), sData.cbLimits), m_nAttributes = sData.nAttributes, m_nChecks = sData.nChecks, m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), RemoveAll(), cbLimit = cbLimits = 0; cbLimits < sData.cbLimits; cbLimits += cbLimit)
		{
			for (CopyMemory(&cbLimit, nLimitsData[0].GetData() + cbLimits, sizeof(cbLimit)), nLimitsData[1].SetSize(max(min(cbLimit, nLimitsData[0].GetSize() - cbLimits), 0)); nLimitsData[1].GetSize() >= 0; )
			{
				CopyMemory(nLimitsData[1].GetData(), nLimitsData[0].GetData() + cbLimits, nLimitsData[1].GetSize());
				break;
			}
			if ((pLimit = new CDatabaseTMTxtOolLimit))
			{
				if (pLimit->Unmap(nLimitsData[1], bBinary) && Add(pLimit) >= 0) continue;
				delete pLimit;
			}
			break;
		}
		m_nLimits = (INT)GetSize();
		return((cbLimits == sData.cbLimits) ? TRUE : FALSE);
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTMTxtOolTables

CDatabaseTMTxtOolTables::CDatabaseTMTxtOolTables() : CPtrArray()
{
	return;
}

CDatabaseTMTxtOolTables::~CDatabaseTMTxtOolTables()
{
	RemoveAll();
}

INT CDatabaseTMTxtOolTables::Add(CDatabaseTMTxtOolTable *pTable)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pTable->GetName(), TRUE)) >= 0) InsertAt(nIndex, pTable, 1);
	return nIndex;
}

INT CDatabaseTMTxtOolTables::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTMTxtOolTable *CDatabaseTMTxtOolTables::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMTxtOolTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTMTxtOolTable *)NULL);
}

CDatabaseTMTxtOolTable *CDatabaseTMTxtOolTables::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMTxtOolTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTMTxtOolTable *)NULL);
}

VOID CDatabaseTMTxtOolTables::RemoveAll()
{
	INT  nTable;
	INT  nTables;
	CDatabaseTMTxtOolTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable))) delete pTable;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTMTxtOolTables::Copy(CONST CDatabaseTMTxtOolTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTMTxtOolTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTMTxtOolTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}
BOOL CDatabaseTMTxtOolTables::Copy(CONST CDatabaseTCTxtOolTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTMTxtOolTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTMTxtOolTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTMTxtOolTables::Compare(CONST CDatabaseTMTxtOolTables *pTables) CONST
{
	INT  nTable;
	INT  nTables;

	for (nTable = 0, nTables = (pTables->GetSize() == GetSize()) ? (INT)GetSize() : -1; nTable < nTables; nTable++)
	{
		if (!pTables->GetAt(nTable)->Compare(GetAt(nTable))) break;
		continue;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTMTxtOolTables::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nTable;
	INT  nTables;
	CByteArray  nTablesData;
	CDatabaseTMTxtOolTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(), nInfo.RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable)) && pTable->Map(nTablesData, bBinary) && nInfo.Append(nTablesData) >= 0) continue;
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTMTxtOolTables::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbTable;
	INT  cbTables;
	CByteArray  nTablesData;
	CDatabaseTMTxtOolTable  *pTable;

	for (cbTables = 0, RemoveAll(); cbTables < nInfo.GetSize(); cbTables += cbTable)
	{
		for (CopyMemory(&cbTable, nInfo.GetData() + cbTables, sizeof(cbTable)), nTablesData.SetSize(max(min(cbTable, nInfo.GetSize() - cbTables), 0)); nTablesData.GetSize() >= 0; )
		{
			CopyMemory(nTablesData.GetData(), nInfo.GetData() + cbTables, nTablesData.GetSize());
			break;
		}
		if ((pTable = new CDatabaseTMTxtOolTable))
		{
			if (pTable->Unmap(nTablesData, bBinary) && Add(pTable) >= 0) continue;
			delete pTable;
		}
		break;
	}
	return((cbTables == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTMTxtOolTables::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTMTxtOolTable  *pTable;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pTable = GetAt(nIndex[0]))) ? ((nIndex[1] = (pTable->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pTable = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pTable->GetName() == pszName) || (bInsert && (((pTable = GetAt(max(nIndex[0] - 1, 0))) && pTable->GetName() != pszName && (pTable = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pTable->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCParameter

CDatabaseTCParameter::CDatabaseTCParameter() : CObject()
{
	m_nAttributes = 0;
	m_nTypeCode = -1;
	m_nFormatCode = -1;
	m_nCalTableRef = -1;
	m_nOolTableRef = -1;
	m_nDispFormat = 0;
	m_nConstValue = 0;
	m_nBytePos = 0;
	m_nBitPos = 0;
	m_nWidth = 0;
	m_nOBTID = -1;
	m_nStatus = TCPARAMETER_RECORDSTATUS_NONE;
}

VOID CDatabaseTCParameter::SetTag(LPCTSTR pszTag)
{
	m_szTag = pszTag;
}

CString CDatabaseTCParameter::GetTag() CONST
{
	return m_szTag;
}

VOID CDatabaseTCParameter::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCParameter::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTCParameter::SetUnit(LPCTSTR pszUnit)
{
	m_szUnit = pszUnit;
}

CString CDatabaseTCParameter::GetUnit() CONST
{
	return m_szUnit;
}

VOID CDatabaseTCParameter::SetTypeCode(UINT nPTC)
{
	m_nTypeCode = nPTC;
}

UINT CDatabaseTCParameter::GetTypeCode() CONST
{
	return m_nTypeCode;
}

VOID CDatabaseTCParameter::SetFormatCode(UINT nPFC)
{
	m_nFormatCode = nPFC;
}

UINT CDatabaseTCParameter::GetFormatCode() CONST
{
	return m_nFormatCode;
}

VOID CDatabaseTCParameter::SetAttributes(ULONGLONG nAttributes)
{
	m_nAttributes = nAttributes;
}

ULONGLONG CDatabaseTCParameter::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCParameter::SetDisplayFormat(ULONGLONG nFormat)
{
	m_nDispFormat = nFormat;
}

ULONGLONG CDatabaseTCParameter::GetDisplayFormat() CONST
{
	return m_nDispFormat;
}

VOID CDatabaseTCParameter::SetBytePos(INT nPos)
{
	m_nBytePos = nPos;
}

INT CDatabaseTCParameter::GetBytePos() CONST
{
	return m_nBytePos;
}

VOID CDatabaseTCParameter::SetBitPos(INT nPos)
{
	m_nBitPos = nPos;
}

INT CDatabaseTCParameter::GetBitPos() CONST
{
	return m_nBitPos;
}

VOID CDatabaseTCParameter::SetWidth(INT nWidth)
{
	m_nWidth = nWidth;
}

INT CDatabaseTCParameter::GetWidth() CONST
{
	return m_nWidth;
}

VOID CDatabaseTCParameter::SetOnBoardTimerID(UINT nOBTID)
{
	m_nOBTID = nOBTID;
}

UINT CDatabaseTCParameter::GetOnBoardTimerID() CONST
{
	return m_nOBTID;
}

VOID CDatabaseTCParameter::SetConstValue(ULONGLONG nConstValue)
{
	m_nConstValue = nConstValue;
}

ULONGLONG CDatabaseTCParameter::GetConstValue() CONST
{
	return m_nConstValue;
}

VOID CDatabaseTCParameter::SetConstValueAsText(LPCTSTR pszConstValue)
{
	m_szConstValue = pszConstValue;
}

CString CDatabaseTCParameter::GetConstValueAsText() CONST
{
	return m_szConstValue;
}

VOID CDatabaseTCParameter::SetCalTable(LPCTSTR pszTable)
{
	m_szCalTable = pszTable;
}

CString CDatabaseTCParameter::GetCalTable() CONST
{
	return m_szCalTable;
}

VOID CDatabaseTCParameter::SetCalTableRef(INT nTableRef)
{
	m_nCalTableRef = nTableRef;
}

INT CDatabaseTCParameter::GetCalTableRef() CONST
{
	return m_nCalTableRef;
}

VOID CDatabaseTCParameter::SetOolTable(LPCTSTR pszTable)
{
	m_szOolTable = pszTable;
}

CString CDatabaseTCParameter::GetOolTable() CONST
{
	return m_szOolTable;
}

VOID CDatabaseTCParameter::SetOolTableRef(INT nTableRef)
{
	m_nOolTableRef = nTableRef;
}

INT CDatabaseTCParameter::GetOolTableRef() CONST
{
	return m_nOolTableRef;
}

VOID CDatabaseTCParameter::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTCParameter::GetStatus() CONST
{
	return m_nStatus;
}

BOOL CDatabaseTCParameter::Copy(CONST CDatabaseTCParameter *pParameter)
{
	m_szTag = pParameter->m_szTag;
	m_szUnit = pParameter->m_szUnit;
	m_szDescription = pParameter->m_szDescription;
	m_nTypeCode = pParameter->m_nTypeCode;
	m_nFormatCode = pParameter->m_nFormatCode;
	m_nAttributes = pParameter->m_nAttributes;
	m_nDispFormat = pParameter->m_nDispFormat;
	m_nConstValue = pParameter->m_nConstValue;
	m_szCalTable = pParameter->m_szCalTable;
	m_szOolTable = pParameter->m_szOolTable;
	m_szConstValue = pParameter->m_szConstValue;
	m_nCalTableRef = pParameter->m_nCalTableRef;
	m_nOolTableRef = pParameter->m_nOolTableRef;
	m_nBytePos = pParameter->m_nBytePos;
	m_nBitPos = pParameter->m_nBitPos;
	m_nWidth = pParameter->m_nWidth;
	m_nOBTID = pParameter->m_nOBTID;
	m_nStatus = pParameter->m_nStatus;
	return TRUE;
}

BOOL CDatabaseTCParameter::Compare(CONST CDatabaseTCParameter *pParameter) CONST
{
	return((pParameter->m_szTag == m_szTag  &&  pParameter->m_szDescription == m_szDescription  &&  pParameter->m_szUnit == m_szUnit  &&  pParameter->m_nTypeCode == m_nTypeCode  &&  pParameter->m_nFormatCode == m_nFormatCode  &&  pParameter->m_nAttributes == m_nAttributes  &&  pParameter->m_nDispFormat == m_nDispFormat  &&  pParameter->m_nConstValue == m_nConstValue  &&  pParameter->m_szCalTable == m_szCalTable  &&  pParameter->m_szOolTable == m_szOolTable  &&  pParameter->m_szConstValue == m_szConstValue  &&  pParameter->m_nCalTableRef == m_nCalTableRef  &&  pParameter->m_nOolTableRef == m_nOolTableRef  &&  pParameter->m_nBytePos == m_nBytePos  &&  pParameter->m_nBitPos == m_nBitPos  &&  pParameter->m_nWidth == m_nWidth  &&  pParameter->m_nOBTID == m_nOBTID  &&  pParameter->m_nStatus == m_nStatus) ? TRUE : FALSE);
}

BOOL CDatabaseTCParameter::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbTag = (m_szTag.GetLength() + 1)*sizeof(TCHAR);
	sData.cbUnit = (m_szUnit.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	sData.cbConstValue = (m_szConstValue.GetLength() + 1)*sizeof(TCHAR);
	sData.cbCalTable = (!bBinary) ? ((m_szCalTable.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbOolTable = (!bBinary) ? ((m_szOolTable.GetLength() + 1)*sizeof(TCHAR)) : 0;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbTag + sData.cbDescription + sData.cbUnit + sData.cbCalTable + sData.cbOolTable + sData.cbConstValue)), sData.nTypeCode = m_nTypeCode, sData.nFormatCode = m_nFormatCode, sData.nAttributes = m_nAttributes, sData.nDispFormat = m_nDispFormat, sData.nConstValue = m_nConstValue, sData.nCalTableRef = (bBinary) ? m_nCalTableRef : -1, sData.nOolTableRef = (bBinary) ? m_nOolTableRef : -1, sData.nBytePos = m_nBytePos, sData.nBitPos = m_nBitPos, sData.nWidth = m_nWidth, sData.nOBTID = m_nOBTID, sData.nStatus = m_nStatus, sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szTag, sData.cbTag);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTag), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szUnit, sData.cbUnit);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbUnit), (LPCTSTR)m_szCalTable, sData.cbCalTable);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbCalTable), (LPCTSTR)m_szOolTable, sData.cbOolTable);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbOolTable), (LPCTSTR)m_szConstValue, sData.cbConstValue);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCParameter::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbTag + sData.cbDescription + sData.cbUnit + sData.cbCalTable + sData.cbOolTable + sData.cbConstValue && sData.cbTag > 0 && sData.cbDescription > 0 && sData.cbUnit > 0 && sData.cbCalTable >= 0 && sData.cbOolTable >= 0 && sData.cbConstValue >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szTag.GetBufferSetLength(STRINGCHARS(sData.cbTag)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbTag));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbTag), STRINGBYTES(sData.cbDescription));
		CopyMemory(m_szUnit.GetBufferSetLength(STRINGCHARS(sData.cbUnit)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbUnit));
		CopyMemory(m_szCalTable.GetBufferSetLength(STRINGCHARS(sData.cbCalTable)), nInfo.GetData() + (cbData = cbData + sData.cbUnit), STRINGBYTES(sData.cbCalTable));
		CopyMemory(m_szOolTable.GetBufferSetLength(STRINGCHARS(sData.cbOolTable)), nInfo.GetData() + (cbData = cbData + sData.cbCalTable), STRINGBYTES(sData.cbOolTable));
		CopyMemory(m_szConstValue.GetBufferSetLength(STRINGCHARS(sData.cbConstValue)), nInfo.GetData() + (cbData = cbData + sData.cbOolTable), STRINGBYTES(sData.cbConstValue));
		m_nOBTID = sData.nOBTID;
		m_nTypeCode = sData.nTypeCode;
		m_nFormatCode = sData.nFormatCode;
		m_nAttributes = sData.nAttributes;
		m_nDispFormat = sData.nDispFormat;
		m_nConstValue = sData.nConstValue;
		m_nCalTableRef = sData.nCalTableRef;
		m_nOolTableRef = sData.nOolTableRef;
		m_nBytePos = sData.nBytePos;
		m_nBitPos = sData.nBitPos;
		m_nWidth = sData.nWidth;
		m_nStatus = sData.nStatus;
		m_szTag.ReleaseBuffer();
		m_szDescription.ReleaseBuffer();
		m_szUnit.ReleaseBuffer();
		m_szCalTable.ReleaseBuffer();
		m_szOolTable.ReleaseBuffer();
		m_szConstValue.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCParameters

CDatabaseTCParameters::CDatabaseTCParameters() : CPtrArray()
{
	return;
}

CDatabaseTCParameters::~CDatabaseTCParameters()
{
	RemoveAll();
}

INT CDatabaseTCParameters::Add(CDatabaseTCParameter *pParameter)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pParameter->GetTag(), TRUE)) >= 0) InsertAt(nIndex, pParameter, 1);
	return nIndex;
}

INT CDatabaseTCParameters::Find(LPCTSTR pszTag) CONST
{
	return FindIndex(pszTag);
}

CDatabaseTCParameter *CDatabaseTCParameters::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTCParameter *)NULL);
}

CDatabaseTCParameter *CDatabaseTCParameters::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTCParameter *)NULL);
}

VOID CDatabaseTCParameters::RemoveAll()
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter))) delete pParameter;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCParameters::Copy(CONST CDatabaseTCParameters *pParameters)
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)pParameters->GetSize(), RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = new CDatabaseTCParameter))
		{
			pParameter->Copy(pParameters->GetAt(nParameter));
			InsertAt(nParameter, pParameter, 1);
			continue;
		}
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCParameters::Compare(CONST CDatabaseTCParameters *pParameters) CONST
{
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (pParameters->GetSize() == GetSize()) ? (INT)GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if (!pParameters->GetAt(nParameter)->Compare(GetAt(nParameter))) break;
		continue;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCParameters::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nParameter;
	INT  nParameters;
	CByteArray  nParametersData;
	CDatabaseTCParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(), nInfo.RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)) && pParameter->Map(nParametersData, bBinary) && nInfo.Append(nParametersData) >= 0) continue;
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCParameters::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbParameter;
	INT  cbParameters;
	CByteArray  nParametersData;
	CDatabaseTCParameter  *pParameter;

	for (cbParameters = 0, RemoveAll(); cbParameters < nInfo.GetSize(); cbParameters += cbParameter)
	{
		for (CopyMemory(&cbParameter, nInfo.GetData() + cbParameters, sizeof(cbParameter)), nParametersData.SetSize(max(min(cbParameter, nInfo.GetSize() - cbParameters), 0)); nParametersData.GetSize() >= 0; )
		{
			CopyMemory(nParametersData.GetData(), nInfo.GetData() + cbParameters, nParametersData.GetSize());
			break;
		}
		if ((pParameter = new CDatabaseTCParameter))
		{
			if (pParameter->Unmap(nParametersData, bBinary) && Add(pParameter) >= 0) continue;
			delete pParameter;
		}
		break;
	}
	return((cbParameters == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCParameters::FindIndex(LPCTSTR pszTag, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCParameter  *pParameter;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pParameter = GetAt(nIndex[0]))) ? ((nIndex[1] = (pParameter->GetTag() <= pszTag)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pParameter = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pParameter->GetTag() == pszTag) || (bInsert && (((pParameter = GetAt(max(nIndex[0] - 1, 0))) && pParameter->GetTag() != pszTag && (pParameter = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pParameter->GetTag() != pszTag) || !GetSize()) && lstrlen(pszTag) > 0)) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCNumCalPoint

CDatabaseTCNumCalPoint::CDatabaseTCNumCalPoint() : CObject()
{
	m_X = 0.0;
	m_Y = 0.0;
}
CDatabaseTCNumCalPoint::CDatabaseTCNumCalPoint(double X, double Y) : CObject()
{
	SetPoint(X, Y);
}

VOID CDatabaseTCNumCalPoint::SetPoint(double X, double Y)
{
	m_X = X;
	m_Y = Y;
}

VOID CDatabaseTCNumCalPoint::GetPoint(double &X, double &Y) CONST
{
	X = m_X;
	Y = m_Y;
}

double CDatabaseTCNumCalPoint::GetX() CONST
{
	return m_X;
}

double CDatabaseTCNumCalPoint::GetY() CONST
{
	return m_Y;
}

CDatabaseTCNumCalPoint &CDatabaseTCNumCalPoint::operator=(CONST CDatabaseTCNumCalPoint &cPoint)
{
	Copy(&cPoint);
	return *this;
}

BOOL CDatabaseTCNumCalPoint::operator==(CONST CDatabaseTCNumCalPoint &cPoint) CONST
{
	return Compare(&cPoint);
}

BOOL CDatabaseTCNumCalPoint::operator!=(CONST CDatabaseTCNumCalPoint &cPoint) CONST
{
	return !Compare(&cPoint);
}

VOID CDatabaseTCNumCalPoint::Copy(CONST CDatabaseTCNumCalPoint *pPoint)
{
	m_X = pPoint->m_X;
	m_Y = pPoint->m_Y;
}
VOID CDatabaseTCNumCalPoint::Copy(CONST CDatabaseTMNumCalPoint *pPoint)
{
	m_X = pPoint->m_X;
	m_Y = pPoint->m_Y;
}

BOOL CDatabaseTCNumCalPoint::Compare(CONST CDatabaseTCNumCalPoint *pPoint) CONST
{
	return((m_X == pPoint->m_X  &&  m_Y == pPoint->m_Y) ? TRUE : FALSE);
}

BOOL CDatabaseTCNumCalPoint::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;

	for (nInfo.SetSize((sData.cbSize = sizeof(DATA))), sData.X = m_X, sData.Y = m_Y; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCNumCalPoint::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize; )
	{
		m_X = sData.X;
		m_Y = sData.Y;
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCNumCalTable

CDatabaseTCNumCalTable::CDatabaseTCNumCalTable() : CPtrArray()
{
	m_nPoints = 0;
	m_nAttributes = TCCALTABLE_FORMAT_POINTS;
	m_nStatus = TCCALTABLE_RECORDSTATUS_NONE;
}

CDatabaseTCNumCalTable::~CDatabaseTCNumCalTable()
{
	RemoveAll();
}

VOID CDatabaseTCNumCalTable::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCNumCalTable::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCNumCalTable::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCNumCalTable::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTCNumCalTable::SetUnit(LPCTSTR pszUnit)
{
	m_szUnit = pszUnit;
}

CString CDatabaseTCNumCalTable::GetUnit() CONST
{
	return m_szUnit;
}

VOID CDatabaseTCNumCalTable::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTCNumCalTable::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCNumCalTable::SetPoints(INT nPoints)
{
	m_nPoints = nPoints;
}

INT CDatabaseTCNumCalTable::GetPoints() CONST
{
	return m_nPoints;
}

VOID CDatabaseTCNumCalTable::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTCNumCalTable::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseTCNumCalTable::Add(CDatabaseTCNumCalPoint *pPoint)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pPoint->GetX(), TRUE)) >= 0) InsertAt(nIndex, pPoint, 1);
	return nIndex;
}

INT CDatabaseTCNumCalTable::Find(double X) CONST
{
	return FindIndex(X);
}

CDatabaseTCNumCalPoint *CDatabaseTCNumCalTable::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCNumCalPoint *)CPtrArray::GetAt(nIndex) : (CDatabaseTCNumCalPoint *)NULL);
}

CDatabaseTCNumCalPoint *CDatabaseTCNumCalTable::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCNumCalPoint *)CPtrArray::GetAt(nIndex) : (CDatabaseTCNumCalPoint *)NULL);
}

double CDatabaseTCNumCalTable::Calibrate(double X, BOOL bExtrapolate) CONST
{
	BOOL  bOut;

	return Calibrate(X, bExtrapolate, bOut);
}
double CDatabaseTCNumCalTable::Calibrate(double X, BOOL bExtrapolate, BOOL &bOut) CONST
{
	INT  nPoint;
	INT  nPoints;
	double  Y;

	for (nPoint = 1, nPoints = GetPoints(), bOut = FALSE; nPoint < nPoints; nPoint++)
	{
		if (GetAt(nPoint)->GetX() >= X || nPoint == nPoints - 1)
		{
			X = (!bExtrapolate) ? (((bOut = (nPoint == 1 && GetAt(nPoint - 1)->GetX() >= X))) ? GetAt(nPoint - 1)->GetX() : (((bOut = (nPoint == nPoints - 1 && GetAt(nPoint)->GetX() <= X))) ? GetAt(nPoint)->GetX() : X)) : X;
			Y = GetAt(nPoint - 1)->GetY() + ((GetAt(nPoint)->GetY() - GetAt(nPoint - 1)->GetY())*(X - GetAt(nPoint - 1)->GetX())) / (GetAt(nPoint)->GetX() - GetAt(nPoint - 1)->GetX());
			break;
		}
	}
	if (nPoints == 1)
	{
		if (GetAt(nPoints - 1)->GetX() == X)
		{
			Y = GetAt(nPoints - 1)->GetY();
			bOut = FALSE;
			return Y;
		}
		bOut = TRUE;
		return 0.0;
	}
	return Y;
}

CString CDatabaseTCNumCalTable::CalibrateAsText(double X, INT nDigits, BOOL bExtrapolate) CONST
{
	BOOL  bOut;

	return CalibrateAsText(X, nDigits, bExtrapolate, bOut);
}
CString CDatabaseTCNumCalTable::CalibrateAsText(double X, INT nDigits, BOOL bExtrapolate, BOOL &bOut) CONST
{
	UINT  nAttributes;
	CStringTools  cStringTools;

	return(((nAttributes = GetAttributes()) & TCCALTABLE_ENGCODING_UNSIGNEDINTEGER) ? cStringTools.ConvertLongUIntToString((ULONGLONG)Calibrate(X, bExtrapolate, bOut)) : ((nAttributes & TCCALTABLE_ENGCODING_SIGNEDINTEGER) ? cStringTools.ConvertLongIntToString((LONGLONG)Calibrate(X, bExtrapolate, bOut)) : cStringTools.ConvertFloatToString(Calibrate(X, bExtrapolate, bOut), nDigits)));
}

VOID CDatabaseTCNumCalTable::RemoveAll()
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTCNumCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (INT)GetSize(); nPoint < nPoints; nPoint++)
	{
		if ((pPoint = GetAt(nPoint))) delete pPoint;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCNumCalTable::Copy(CONST CDatabaseTCNumCalTable *pTable)
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTCNumCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_szUnit = pTable->m_szUnit, m_nAttributes = pTable->m_nAttributes, m_nPoints = pTable->m_nPoints, m_nStatus = pTable->m_nStatus, RemoveAll(); nPoint < nPoints; nPoint++)
	{
		if ((pPoint = new CDatabaseTCNumCalPoint))
		{
			pPoint->Copy(pTable->GetAt(nPoint));
			InsertAt(nPoint, pPoint, 1);
			continue;
		}
		break;
	}
	return((nPoint == nPoints) ? TRUE : FALSE);
}
BOOL CDatabaseTCNumCalTable::Copy(CONST CDatabaseTMNumCalTable *pTable)
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTCNumCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_szUnit = pTable->m_szUnit, m_nAttributes = pTable->m_nAttributes, m_nPoints = pTable->m_nPoints, m_nStatus = pTable->m_nStatus, RemoveAll(); nPoint < nPoints; nPoint++)
	{
		if ((pPoint = new CDatabaseTCNumCalPoint))
		{
			pPoint->Copy(pTable->GetAt(nPoint));
			InsertAt(nPoint, pPoint, 1);
			continue;
		}
		break;
	}
	return((nPoint == nPoints) ? TRUE : FALSE);
}

BOOL CDatabaseTCNumCalTable::Compare(CONST CDatabaseTCNumCalTable *pTable) CONST
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTCNumCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (pTable->m_szName == m_szName && pTable->m_szDescription == m_szDescription && pTable->m_szUnit == m_szUnit && pTable->m_nAttributes == m_nAttributes && pTable->m_nPoints == m_nPoints && pTable->m_nStatus == m_nStatus && pTable->GetSize() == GetSize()) ? (INT)GetSize() : -1; nPoint < nPoints; nPoint++)
	{
		if ((pPoint = pTable->GetAt(nPoint)) && pPoint->Compare(GetAt(nPoint))) continue;
		break;
	}
	return((nPoint == nPoints) ? TRUE : FALSE);
}

BOOL CDatabaseTCNumCalTable::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nPoint;
	INT  nPoints;
	CByteArray  nPointsData[2];
	CDatabaseTCNumCalPoint  *pPoint;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbUnit = (m_szUnit.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nPoint = 0, nPoints = (INT)GetSize(), sData.nAttributes = m_nAttributes, sData.nPoints = m_nPoints, sData.nStatus = m_nStatus; nPoint < nPoints; nPoint++)
	{
		if ((pPoint = GetAt(nPoint)) && pPoint->Map(nPointsData[1], bBinary) && nPointsData[0].Append(nPointsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbUnit + (sData.cbPoints = (INT)(nPointsData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nPoint == nPoints; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szUnit, sData.cbUnit);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbUnit), nPointsData[0].GetData(), sData.cbPoints);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCNumCalTable::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbPoint;
	INT  cbPoints;
	CByteArray  nPointsData[2];
	CDatabaseTCNumCalPoint  *pPoint;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbUnit + sData.cbPoints && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbUnit > 0 && sData.cbPoints >= 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription));
		CopyMemory(m_szUnit.GetBufferSetLength(STRINGCHARS(sData.cbUnit)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbUnit));
		for (nPointsData[0].SetSize(sData.cbPoints), CopyMemory(nPointsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbUnit), sData.cbPoints), m_nAttributes = sData.nAttributes, m_nPoints = sData.nPoints, m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), m_szUnit.ReleaseBuffer(), RemoveAll(), cbPoint = cbPoints = 0; cbPoints < sData.cbPoints; cbPoints += cbPoint)
		{
			for (CopyMemory(&cbPoint, nPointsData[0].GetData() + cbPoints, sizeof(cbPoint)), nPointsData[1].SetSize(max(min(cbPoint, nPointsData[0].GetSize() - cbPoints), 0)); nPointsData[1].GetSize() >= 0; )
			{
				CopyMemory(nPointsData[1].GetData(), nPointsData[0].GetData() + cbPoints, nPointsData[1].GetSize());
				break;
			}
			if ((pPoint = new CDatabaseTCNumCalPoint))
			{
				if (pPoint->Unmap(nPointsData[1], bBinary) && Add(pPoint) >= 0) continue;
				delete pPoint;
			}
			break;
		}
		return((cbPoints == sData.cbPoints) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTCNumCalTable::FindIndex(double X, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCNumCalPoint  *pPoint;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pPoint = GetAt(nIndex[0]))) ? ((nIndex[1] = (pPoint->GetX() <= X)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pPoint = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pPoint->GetX() == X) || (bInsert && (((pPoint = GetAt(max(nIndex[0] - 1, 0))) && pPoint->GetX() != X && (pPoint = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pPoint->GetX() != X) || !GetSize()))) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCNumCalTables

CDatabaseTCNumCalTables::CDatabaseTCNumCalTables() : CPtrArray()
{
	return;
}

CDatabaseTCNumCalTables::~CDatabaseTCNumCalTables()
{
	RemoveAll();
}

INT CDatabaseTCNumCalTables::Add(CDatabaseTCNumCalTable *pTable)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pTable->GetName(), TRUE)) >= 0) InsertAt(nIndex, pTable, 1);
	return nIndex;
}

INT CDatabaseTCNumCalTables::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTCNumCalTable *CDatabaseTCNumCalTables::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCNumCalTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTCNumCalTable *)NULL);
}

CDatabaseTCNumCalTable *CDatabaseTCNumCalTables::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCNumCalTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTCNumCalTable *)NULL);
}

VOID CDatabaseTCNumCalTables::RemoveAll()
{
	INT  nTable;
	INT  nTables;
	CDatabaseTCNumCalTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable))) delete pTable;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCNumCalTables::Copy(CONST CDatabaseTCNumCalTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTCNumCalTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTCNumCalTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}
BOOL CDatabaseTCNumCalTables::Copy(CONST CDatabaseTMNumCalTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTCNumCalTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTCNumCalTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTCNumCalTables::Compare(CONST CDatabaseTCNumCalTables *pTables) CONST
{
	INT  nTable;
	INT  nTables;

	for (nTable = 0, nTables = (pTables->GetSize() == GetSize()) ? (INT)GetSize() : -1; nTable < nTables; nTable++)
	{
		if (!pTables->GetAt(nTable)->Compare(GetAt(nTable))) break;
		continue;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTCNumCalTables::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nTable;
	INT  nTables;
	CByteArray  nTablesData;
	CDatabaseTCNumCalTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(), nInfo.RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable)) && pTable->Map(nTablesData, bBinary) && nInfo.Append(nTablesData) >= 0) continue;
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTCNumCalTables::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbTable;
	INT  cbTables;
	CByteArray  nTablesData;
	CDatabaseTCNumCalTable  *pTable;

	for (cbTables = 0, RemoveAll(); cbTables < nInfo.GetSize(); cbTables += cbTable)
	{
		for (CopyMemory(&cbTable, nInfo.GetData() + cbTables, sizeof(cbTable)), nTablesData.SetSize(max(min(cbTable, nInfo.GetSize() - cbTables), 0)); nTablesData.GetSize() >= 0; )
		{
			CopyMemory(nTablesData.GetData(), nInfo.GetData() + cbTables, nTablesData.GetSize());
			break;
		}
		if ((pTable = new CDatabaseTCNumCalTable))
		{
			if (pTable->Unmap(nTablesData, bBinary) && Add(pTable) >= 0) continue;
			delete pTable;
		}
		break;
	}
	return((cbTables == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCNumCalTables::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCNumCalTable  *pTable;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pTable = GetAt(nIndex[0]))) ? ((nIndex[1] = (pTable->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pTable = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pTable->GetName() == pszName) || (bInsert && (((pTable = GetAt(max(nIndex[0] - 1, 0))) && pTable->GetName() != pszName && (pTable = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pTable->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCTxtCalPoint

CDatabaseTCTxtCalPoint::CDatabaseTCTxtCalPoint() : CObject()
{
	m_X[0] = 0.0;
	m_X[1] = 0.0;
	m_Y.Empty();
}
CDatabaseTCTxtCalPoint::CDatabaseTCTxtCalPoint(double X, LPCTSTR Y) : CObject()
{
	SetPoint(X, Y);
}
CDatabaseTCTxtCalPoint::CDatabaseTCTxtCalPoint(double X1, double X2, LPCTSTR Y) : CObject()
{
	SetRange(X1, X2, Y);
}

VOID CDatabaseTCTxtCalPoint::SetPoint(double X, LPCTSTR Y)
{
	m_X[0] = X;
	m_X[1] = X;
	m_Y = Y;
}

BOOL CDatabaseTCTxtCalPoint::GetPoint(double &X, CString &Y) CONST
{
	if (m_X[0] == m_X[1])
	{
		X = m_X[0];
		Y = m_Y;
		return TRUE;
	}
	return FALSE;
}

VOID CDatabaseTCTxtCalPoint::SetRange(double X1, double X2, LPCTSTR Y)
{
	m_X[0] = X1;
	m_X[1] = X2;
	m_Y = Y;
}

BOOL CDatabaseTCTxtCalPoint::GetRange(double &X1, double &X2, CString &Y) CONST
{
	X1 = m_X[0];
	X2 = m_X[1];
	Y = m_Y;
	return TRUE;
}

CDatabaseTCTxtCalPoint &CDatabaseTCTxtCalPoint::operator=(CONST CDatabaseTCTxtCalPoint &cPoint)
{
	Copy(&cPoint);
	return *this;
}

BOOL CDatabaseTCTxtCalPoint::operator==(CONST CDatabaseTCTxtCalPoint &cPoint) CONST
{
	return Compare(&cPoint);
}

BOOL CDatabaseTCTxtCalPoint::operator!=(CONST CDatabaseTCTxtCalPoint &cPoint) CONST
{
	return !Compare(&cPoint);
}

VOID CDatabaseTCTxtCalPoint::Copy(CONST CDatabaseTCTxtCalPoint *pPoint)
{
	m_X[0] = pPoint->m_X[0];
	m_X[1] = pPoint->m_X[1];
	m_Y = pPoint->m_Y;
}
VOID CDatabaseTCTxtCalPoint::Copy(CONST CDatabaseTMTxtCalPoint *pPoint)
{
	m_X[0] = pPoint->m_X[0];
	m_X[1] = pPoint->m_X[1];
	m_Y = pPoint->m_Y;
}

BOOL CDatabaseTCTxtCalPoint::Compare(CONST CDatabaseTCTxtCalPoint *pPoint) CONST
{
	return((m_X[0] == pPoint->m_X[0] && m_X[1] == pPoint->m_X[1] && m_Y == pPoint->m_Y) ? TRUE : FALSE);
}

BOOL CDatabaseTCTxtCalPoint::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbY = (m_Y.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbY)), sData.X[0] = m_X[0], sData.X[1] = m_X[1]; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_Y, sData.cbY);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCTxtCalPoint::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbY && sData.cbY > 0; )
	{
		CopyMemory(m_Y.GetBufferSetLength(STRINGCHARS(sData.cbY)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbY));
		m_X[0] = sData.X[0];
		m_X[1] = sData.X[1];
		m_Y.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCTxtCalTable

CDatabaseTCTxtCalTable::CDatabaseTCTxtCalTable() : CPtrArray()
{
	m_nPoints = 0;
	m_nAttributes = TCCALTABLE_FORMAT_POINTS | TCCALTABLE_RAWRADIX_DECIMAL;
	m_nStatus = TCCALTABLE_RECORDSTATUS_NONE;
}

CDatabaseTCTxtCalTable::~CDatabaseTCTxtCalTable()
{
	RemoveAll();
}

VOID CDatabaseTCTxtCalTable::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCTxtCalTable::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCTxtCalTable::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCTxtCalTable::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTCTxtCalTable::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTCTxtCalTable::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCTxtCalTable::SetPoints(INT nPoints)
{
	m_nPoints = nPoints;
}

INT CDatabaseTCTxtCalTable::GetPoints() CONST
{
	return m_nPoints;
}

VOID CDatabaseTCTxtCalTable::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTCTxtCalTable::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseTCTxtCalTable::Add(CDatabaseTCTxtCalPoint *pPoint)
{
	INT  nIndex;
	double  X1;
	double  X2;
	CString  Y;

	if ((nIndex = (pPoint->GetRange(X1, X2, Y)) ? FindIndex(X1, X2, TRUE) : -1) >= 0) InsertAt(nIndex, pPoint, 1);
	return nIndex;
}

INT CDatabaseTCTxtCalTable::Find(double X) CONST
{
	return FindIndex(X, X);
}

CDatabaseTCTxtCalPoint *CDatabaseTCTxtCalTable::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCTxtCalPoint *)CPtrArray::GetAt(nIndex) : (CDatabaseTCTxtCalPoint *)NULL);
}

CDatabaseTCTxtCalPoint *CDatabaseTCTxtCalTable::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCTxtCalPoint *)CPtrArray::GetAt(nIndex) : (CDatabaseTCTxtCalPoint *)NULL);
}

CString CDatabaseTCTxtCalTable::Translate(double X, INT nDigits) CONST
{
	BOOL  bOut;

	return Translate(X, nDigits, bOut);
}
CString CDatabaseTCTxtCalTable::Translate(double X, INT nDigits, BOOL &bOut) CONST
{
	INT  nIndex;
	double  X1;
	double  X2;
	CString  Y;

	return((!(bOut = !((nIndex = Find(X)) >= 0 && nIndex < GetPoints() && GetAt(nIndex)->GetRange(X1, X2, Y)))) ? ((nDigits >= 0) ? (LPCTSTR)Y.Left(nDigits) : (LPCTSTR)Y) : EMPTYSTRING);
}

VOID CDatabaseTCTxtCalTable::RemoveAll()
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTCTxtCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (INT)GetSize(); nPoint < nPoints; nPoint++)
	{
		if ((pPoint = GetAt(nPoint))) delete pPoint;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCTxtCalTable::Copy(CONST CDatabaseTCTxtCalTable *pTable)
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTCTxtCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_nAttributes = pTable->m_nAttributes, m_nPoints = pTable->m_nPoints, m_nStatus = pTable->m_nStatus, RemoveAll(); nPoint < nPoints; nPoint++)
	{
		if ((pPoint = new CDatabaseTCTxtCalPoint))
		{
			pPoint->Copy(pTable->GetAt(nPoint));
			InsertAt(nPoint, pPoint, 1);
			continue;
		}
		break;
	}
	return((nPoint == nPoints) ? TRUE : FALSE);
}
BOOL CDatabaseTCTxtCalTable::Copy(CONST CDatabaseTMTxtCalTable *pTable)
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTCTxtCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_nAttributes = pTable->m_nAttributes, m_nPoints = pTable->m_nPoints, m_nStatus = pTable->m_nStatus, RemoveAll(); nPoint < nPoints; nPoint++)
	{
		if ((pPoint = new CDatabaseTCTxtCalPoint))
		{
			pPoint->Copy(pTable->GetAt(nPoint));
			InsertAt(nPoint, pPoint, 1);
			continue;
		}
		break;
	}
	return((nPoint == nPoints) ? TRUE : FALSE);
}

BOOL CDatabaseTCTxtCalTable::Compare(CONST CDatabaseTCTxtCalTable *pTable) CONST
{
	INT  nPoint;
	INT  nPoints;
	CDatabaseTCTxtCalPoint  *pPoint;

	for (nPoint = 0, nPoints = (pTable->m_szName == m_szName && pTable->m_szDescription == m_szDescription && pTable->m_nAttributes == m_nAttributes && pTable->m_nPoints == m_nPoints && pTable->m_nStatus == m_nStatus && pTable->GetSize() == GetSize()) ? (INT)GetSize() : -1; nPoint < nPoints; nPoint++)
	{
		if ((pPoint = pTable->GetAt(nPoint)) && pPoint->Compare(GetAt(nPoint))) continue;
		break;
	}
	return((nPoint == nPoints) ? TRUE : FALSE);
}

BOOL CDatabaseTCTxtCalTable::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nPoint;
	INT  nPoints;
	CByteArray  nPointsData[2];
	CDatabaseTCTxtCalPoint  *pPoint;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nPoint = 0, nPoints = (INT)GetSize(), sData.nAttributes = m_nAttributes, sData.nPoints = m_nPoints, sData.nStatus = m_nStatus; nPoint < nPoints; nPoint++)
	{
		if ((pPoint = GetAt(nPoint)) && pPoint->Map(nPointsData[1], bBinary) && nPointsData[0].Append(nPointsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + (sData.cbPoints = (INT)(nPointsData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nPoint == nPoints; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), nPointsData[0].GetData(), sData.cbPoints);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCTxtCalTable::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbPoint;
	INT  cbPoints;
	CByteArray  nPointsData[2];
	CDatabaseTCTxtCalPoint  *pPoint;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbPoints && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbPoints >= 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription));
		for (nPointsData[0].SetSize(sData.cbPoints), CopyMemory(nPointsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbDescription), sData.cbPoints), m_nAttributes = sData.nAttributes, m_nPoints = sData.nPoints, m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), RemoveAll(), cbPoint = cbPoints = 0; cbPoints < sData.cbPoints; cbPoints += cbPoint)
		{
			for (CopyMemory(&cbPoint, nPointsData[0].GetData() + cbPoints, sizeof(cbPoint)), nPointsData[1].SetSize(max(min(cbPoint, nPointsData[0].GetSize() - cbPoints), 0)); nPointsData[1].GetSize() >= 0; )
			{
				CopyMemory(nPointsData[1].GetData(), nPointsData[0].GetData() + cbPoints, nPointsData[1].GetSize());
				break;
			}
			if ((pPoint = new CDatabaseTCTxtCalPoint))
			{
				if (pPoint->Unmap(nPointsData[1], bBinary) && Add(pPoint) >= 0) continue;
				delete pPoint;
			}
			break;
		}
		return((cbPoints == sData.cbPoints) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTCTxtCalTable::FindIndex(double X1, double X2, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	double  X[2];
	CString  Y;
	CDatabaseTCTxtCalPoint  *pPoint;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pPoint = GetAt(nIndex[0])) && pPoint->GetRange(X[0], X[1], Y)) ? ((nIndex[1] = (X[0] <= X1)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pPoint = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pPoint->GetRange(X[0], X[1], Y) && ((X1 != X2  &&  X[0] == X1  &&  X[1] == X2) || (X1 == X2  &&  X[0] <= X1  &&  X[1] >= X2))) || (bInsert && (((pPoint = GetAt(max(nIndex[0] - 1, 0))) && pPoint->GetRange(X[0], X[1], Y) && (X[0] > X2 || X[1] < X1) && (pPoint = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pPoint->GetRange(X[0], X[1], Y) && (X[0] > X2 || X[1] < X1)) || !GetSize()))) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCTxtCalTables

CDatabaseTCTxtCalTables::CDatabaseTCTxtCalTables() : CPtrArray()
{
	return;
}

CDatabaseTCTxtCalTables::~CDatabaseTCTxtCalTables()
{
	RemoveAll();
}

INT CDatabaseTCTxtCalTables::Add(CDatabaseTCTxtCalTable *pTable)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pTable->GetName(), TRUE)) >= 0) InsertAt(nIndex, pTable, 1);
	return nIndex;
}

INT CDatabaseTCTxtCalTables::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTCTxtCalTable *CDatabaseTCTxtCalTables::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCTxtCalTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTCTxtCalTable *)NULL);
}

CDatabaseTCTxtCalTable *CDatabaseTCTxtCalTables::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCTxtCalTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTCTxtCalTable *)NULL);
}

VOID CDatabaseTCTxtCalTables::RemoveAll()
{
	INT  nTable;
	INT  nTables;
	CDatabaseTCTxtCalTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable))) delete pTable;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCTxtCalTables::Copy(CONST CDatabaseTCTxtCalTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTCTxtCalTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTCTxtCalTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}
BOOL CDatabaseTCTxtCalTables::Copy(CONST CDatabaseTMTxtCalTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTCTxtCalTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTCTxtCalTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTCTxtCalTables::Compare(CONST CDatabaseTCTxtCalTables *pTables) CONST
{
	INT  nTable;
	INT  nTables;

	for (nTable = 0, nTables = (pTables->GetSize() == GetSize()) ? (INT)GetSize() : -1; nTable < nTables; nTable++)
	{
		if (!pTables->GetAt(nTable)->Compare(GetAt(nTable))) break;
		continue;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTCTxtCalTables::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nTable;
	INT  nTables;
	CByteArray  nTablesData;
	CDatabaseTCTxtCalTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(), nInfo.RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable)) && pTable->Map(nTablesData, bBinary) && nInfo.Append(nTablesData) >= 0) continue;
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTCTxtCalTables::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbTable;
	INT  cbTables;
	CByteArray  nTablesData;
	CDatabaseTCTxtCalTable  *pTable;

	for (cbTables = 0, RemoveAll(); cbTables < nInfo.GetSize(); cbTables += cbTable)
	{
		for (CopyMemory(&cbTable, nInfo.GetData() + cbTables, sizeof(cbTable)), nTablesData.SetSize(max(min(cbTable, nInfo.GetSize() - cbTables), 0)); nTablesData.GetSize() >= 0; )
		{
			CopyMemory(nTablesData.GetData(), nInfo.GetData() + cbTables, nTablesData.GetSize());
			break;
		}
		if ((pTable = new CDatabaseTCTxtCalTable))
		{
			if (pTable->Unmap(nTablesData, bBinary) && Add(pTable) >= 0) continue;
			delete pTable;
		}
		break;
	}
	return((cbTables == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCTxtCalTables::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCTxtCalTable  *pTable;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pTable = GetAt(nIndex[0]))) ? ((nIndex[1] = (pTable->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pTable = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pTable->GetName() == pszName) || (bInsert && (((pTable = GetAt(max(nIndex[0] - 1, 0))) && pTable->GetName() != pszName && (pTable = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pTable->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCNumOolLimit

CDatabaseTCNumOolLimit::CDatabaseTCNumOolLimit() : CObject()
{
	m_nLimitType = 0;
	m_nLimitOrder = 0;
	m_fLimits[0] = 0.0;
	m_fLimits[1] = 0.0;
	m_tLimits[0] = 0;
	m_tLimits[1] = 0;
	m_bLimits[0] = FALSE;
	m_bLimits[1] = FALSE;
	m_bLimits[2] = FALSE;
	m_nValidityParameterRef = -1;
	m_nValidityValue = 0;
}
CDatabaseTCNumOolLimit::CDatabaseTCNumOolLimit(UINT nType, double fLow, double fHigh) : CObject()
{
	m_nLimitType = nType;
	m_nLimitOrder = 0;
	m_fLimits[0] = (nType != TCOOLLIMIT_TYPE_STATUSCONSISTENCY) ? fLow : NAN;
	m_fLimits[1] = (nType != TCOOLLIMIT_TYPE_STATUSCONSISTENCY) ? fHigh : NAN;
	m_tLimits[0] = 0;
	m_tLimits[1] = 0;
	m_bLimits[0] = TRUE;
	m_bLimits[1] = TRUE;
	m_bLimits[2] = FALSE;
	m_nValidityParameterRef = -1;
	m_nValidityValue = 0;
}
CDatabaseTCNumOolLimit::CDatabaseTCNumOolLimit(double fDelta, BOOL bMinimum) : CObject()
{
	for (m_nLimitType = TCOOLLIMIT_TYPE_DELTA, m_nLimitOrder = 0, m_bLimits[2] = FALSE; bMinimum; )
	{
		m_fLimits[0] = fDelta;
		m_bLimits[0] = TRUE;
		break;
	}
	if (!bMinimum)
	{
		m_fLimits[1] = fDelta;
		m_bLimits[1] = TRUE;
	}
	m_nValidityParameterRef = -1;
	m_nValidityValue = 0;
}
CDatabaseTCNumOolLimit::CDatabaseTCNumOolLimit(TIMETAG tStart, TIMETAG tStop) : CObject()
{
	m_nLimitType = TCOOLLIMIT_TYPE_HARD;
	m_nLimitOrder = 0;
	m_fLimits[0] = 0.0;
	m_fLimits[1] = 0.0;
	m_tLimits[0] = tStart;
	m_tLimits[1] = tStop;
	m_bLimits[0] = FALSE;
	m_bLimits[1] = FALSE;
	m_bLimits[2] = TRUE;
	m_nValidityParameterRef = -1;
	m_nValidityValue = 0;
}

VOID CDatabaseTCNumOolLimit::SetType(UINT nType)
{
	m_nLimitType = nType;
}

UINT CDatabaseTCNumOolLimit::GetType() CONST
{
	return m_nLimitType;
}

VOID CDatabaseTCNumOolLimit::SetOrder(UINT nOrder)
{
	m_nLimitOrder = nOrder;
}

UINT CDatabaseTCNumOolLimit::GetOrder() CONST
{
	return m_nLimitOrder;
}

BOOL CDatabaseTCNumOolLimit::SetRange(UINT nType, double fLow, double fHigh)
{
	for (m_tLimits[0] = m_tLimits[1] = 0, m_bLimits[2] = FALSE; nType == TCOOLLIMIT_TYPE_SOFT || nType == TCOOLLIMIT_TYPE_HARD || nType == TCOOLLIMIT_TYPE_EVENT; )
	{
		m_nLimitType = nType;
		m_fLimits[0] = fLow;
		m_fLimits[1] = fHigh;
		m_bLimits[0] = TRUE;
		m_bLimits[1] = TRUE;
		return TRUE;
	}
	if (nType == TCOOLLIMIT_TYPE_STATUSCONSISTENCY)
	{
		m_nLimitType = nType;
		m_fLimits[0] = NAN;
		m_fLimits[1] = NAN;
		m_bLimits[0] = TRUE;
		m_bLimits[1] = TRUE;
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCNumOolLimit::GetRange(UINT &nType, double &fLow, double &fHigh) CONST
{
	if ((m_nLimitType == TCOOLLIMIT_TYPE_SOFT || m_nLimitType == TCOOLLIMIT_TYPE_HARD || m_nLimitType == TCOOLLIMIT_TYPE_EVENT || nType == TCOOLLIMIT_TYPE_STATUSCONSISTENCY) && !m_bLimits[2])
	{
		nType = m_nLimitType;
		fLow = m_fLimits[0];
		fHigh = m_fLimits[1];
		return(m_bLimits[0] && m_bLimits[1]);
	}
	return FALSE;
}

BOOL CDatabaseTCNumOolLimit::SetDelta(double fDelta, BOOL bMinimum)
{
	for (m_nLimitType = TCOOLLIMIT_TYPE_DELTA, m_tLimits[0] = m_tLimits[1] = 0; bMinimum; )
	{
		m_fLimits[0] = fDelta;
		m_bLimits[0] = TRUE;
		return TRUE;
	}
	if (!bMinimum)
	{
		m_fLimits[1] = fDelta;
		m_bLimits[1] = TRUE;
	}
	return TRUE;
}

BOOL CDatabaseTCNumOolLimit::GetDelta(double &fDelta, BOOL bMinimum) CONST
{
	if (m_nLimitType == TCOOLLIMIT_TYPE_DELTA  &&  !m_bLimits[2])
	{
		fDelta = (bMinimum) ? m_fLimits[0] : m_fLimits[1];
		return((bMinimum) ? m_bLimits[0] : m_bLimits[1]);
	}
	return FALSE;
}

BOOL CDatabaseTCNumOolLimit::SetTimeSpan(TIMETAG tStart, TIMETAG tStop)
{
	m_nLimitType = TCOOLLIMIT_TYPE_HARD;
	m_tLimits[0] = tStart;
	m_tLimits[1] = tStop;
	m_fLimits[0] = 0.0;
	m_fLimits[1] = 0.0;
	m_bLimits[0] = FALSE;
	m_bLimits[1] = FALSE;
	m_bLimits[2] = TRUE;
	return TRUE;
}

BOOL CDatabaseTCNumOolLimit::GetTimeSpan(TIMETAG &tStart, TIMETAG &tStop) CONST
{
	if (m_nLimitType == TCOOLLIMIT_TYPE_HARD  &&  m_bLimits[2])
	{
		tStart = m_tLimits[0];
		tStop = m_tLimits[1];
		return TRUE;
	}
	return FALSE;
}

VOID CDatabaseTCNumOolLimit::SetValidityParameter(LPCTSTR pszTag)
{
	m_szValidityParameter = pszTag;
}

CString CDatabaseTCNumOolLimit::GetValidityParameter() CONST
{
	return m_szValidityParameter;
}

VOID CDatabaseTCNumOolLimit::SetValidityParameterRef(INT nRef)
{
	m_nValidityParameterRef = nRef;
}

INT CDatabaseTCNumOolLimit::GetValidityParameterRef() CONST
{
	return m_nValidityParameterRef;
}

VOID CDatabaseTCNumOolLimit::SetValidityValue(ULONGLONG nValidityValue)
{
	m_nValidityValue = nValidityValue;
}

ULONGLONG CDatabaseTCNumOolLimit::GetValidityValue() CONST
{
	return m_nValidityValue;
}

CDatabaseTCNumOolLimit &CDatabaseTCNumOolLimit::operator=(CONST CDatabaseTCNumOolLimit &cLimit)
{
	Copy(&cLimit);
	return *this;
}

BOOL CDatabaseTCNumOolLimit::operator==(CONST CDatabaseTCNumOolLimit &cLimit) CONST
{
	return Compare(&cLimit);
}

BOOL CDatabaseTCNumOolLimit::operator!=(CONST CDatabaseTCNumOolLimit &cLimit) CONST
{
	return !Compare(&cLimit);
}

VOID CDatabaseTCNumOolLimit::Copy(CONST CDatabaseTCNumOolLimit *pLimit)
{
	m_nLimitType = pLimit->m_nLimitType;
	m_nLimitOrder = pLimit->m_nLimitOrder;
	m_fLimits[0] = pLimit->m_fLimits[0];
	m_fLimits[1] = pLimit->m_fLimits[1];
	m_tLimits[0] = pLimit->m_tLimits[0];
	m_tLimits[1] = pLimit->m_tLimits[1];
	m_bLimits[0] = pLimit->m_bLimits[0];
	m_bLimits[1] = pLimit->m_bLimits[1];
	m_bLimits[2] = pLimit->m_bLimits[2];
	m_szValidityParameter = pLimit->m_szValidityParameter;
	m_nValidityParameterRef = pLimit->m_nValidityParameterRef;
	m_nValidityValue = pLimit->m_nValidityValue;
}
VOID CDatabaseTCNumOolLimit::Copy(CONST CDatabaseTMNumOolLimit *pLimit)
{
	m_nLimitType = pLimit->m_nLimitType;
	m_nLimitOrder = pLimit->m_nLimitOrder;
	m_fLimits[0] = pLimit->m_fLimits[0];
	m_fLimits[1] = pLimit->m_fLimits[1];
	m_tLimits[0] = m_tLimits[1] = 0;
	m_bLimits[0] = pLimit->m_bLimits[0];
	m_bLimits[1] = pLimit->m_bLimits[1];
	m_bLimits[2] = FALSE;
	m_szValidityParameter = pLimit->m_szValidityParameter;
	m_nValidityParameterRef = pLimit->m_nValidityParameterRef;
	m_nValidityValue = pLimit->m_nValidityValue;
}

BOOL CDatabaseTCNumOolLimit::Compare(CONST CDatabaseTCNumOolLimit *pLimit) CONST
{
	return((pLimit->m_nLimitType == m_nLimitType  &&  pLimit->m_nLimitOrder == m_nLimitOrder && (pLimit->m_fLimits[0] == m_fLimits[0] || (isnan(pLimit->m_fLimits[0]) && isnan(m_fLimits[0]))) && (pLimit->m_fLimits[1] == m_fLimits[1] || (isnan(pLimit->m_fLimits[1]) && isnan(m_fLimits[1]))) && pLimit->m_tLimits[0] == m_tLimits[0] && pLimit->m_tLimits[1] == m_tLimits[1] && pLimit->m_bLimits[0] == m_bLimits[0] && pLimit->m_bLimits[1] == m_bLimits[1] && pLimit->m_bLimits[2] == m_bLimits[2] && pLimit->m_szValidityParameter == m_szValidityParameter  &&  pLimit->m_nValidityParameterRef == m_nValidityParameterRef  &&  pLimit->m_nValidityValue == m_nValidityValue) ? TRUE : FALSE);
}

BOOL CDatabaseTCNumOolLimit::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;

	sData.cbValidityParameter = (!bBinary) ? ((m_szValidityParameter.GetLength() + 1)*sizeof(TCHAR)) : 0;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbValidityParameter)), sData.nLimitType = m_nLimitType, sData.nLimitOrder = m_nLimitOrder, sData.fLimits[0] = m_fLimits[0], sData.fLimits[1] = m_fLimits[1], sData.tLimits[0] = m_tLimits[0], sData.tLimits[1] = m_tLimits[1], sData.bLimits[0] = m_bLimits[0], sData.bLimits[1] = m_bLimits[1], sData.bLimits[2] = m_bLimits[2], sData.nValidityParameterRef = (bBinary) ? m_nValidityParameterRef : -1, sData.nValidityValue = m_nValidityValue; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + sizeof(DATA), (LPCTSTR)m_szValidityParameter, sData.cbValidityParameter);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCNumOolLimit::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize + sData.cbValidityParameter && sData.cbValidityParameter >= 0; )
	{
		CopyMemory(m_szValidityParameter.GetBufferSetLength(STRINGCHARS(sData.cbValidityParameter)), nInfo.GetData() + sizeof(DATA), STRINGBYTES(sData.cbValidityParameter));
		m_nLimitType = sData.nLimitType;
		m_nLimitOrder = sData.nLimitOrder;
		m_fLimits[0] = sData.fLimits[0];
		m_fLimits[1] = sData.fLimits[1];
		m_tLimits[0] = sData.tLimits[0];
		m_tLimits[1] = sData.tLimits[1];
		m_bLimits[0] = sData.bLimits[0];
		m_bLimits[1] = sData.bLimits[1];
		m_bLimits[2] = sData.bLimits[2];
		m_nValidityParameterRef = sData.nValidityParameterRef;
		m_nValidityValue = sData.nValidityValue;
		m_szValidityParameter.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCNumOolTable

CDatabaseTCNumOolTable::CDatabaseTCNumOolTable() : CPtrArray()
{
	m_nChecks = 0;
	m_nLimits = 0;
	m_nAttributes = 0;
	m_nStatus = TCOOLTABLE_RECORDSTATUS_NONE;
}

CDatabaseTCNumOolTable::~CDatabaseTCNumOolTable()
{
	RemoveAll();
}

VOID CDatabaseTCNumOolTable::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCNumOolTable::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCNumOolTable::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCNumOolTable::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTCNumOolTable::SetUnit(LPCTSTR pszUnit)
{
	m_szUnit = pszUnit;
}

CString CDatabaseTCNumOolTable::GetUnit() CONST
{
	return m_szUnit;
}

VOID CDatabaseTCNumOolTable::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTCNumOolTable::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCNumOolTable::SetChecks(INT nChecks)
{
	m_nChecks = nChecks;
}

INT CDatabaseTCNumOolTable::GetChecks() CONST
{
	return m_nChecks;
}

VOID CDatabaseTCNumOolTable::SetLimits(INT nLimits)
{
	m_nLimits = nLimits;
}

INT CDatabaseTCNumOolTable::GetLimits() CONST
{
	return m_nLimits;
}

VOID CDatabaseTCNumOolTable::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTCNumOolTable::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseTCNumOolTable::Add(CDatabaseTCNumOolLimit *pLimit)
{
	INT  nLimit;
	INT  nLimits;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits || !nLimits; nLimit++)
	{
		if (!nLimits || !pLimit->GetOrder())
		{
			nLimit = (INT)CPtrArray::Add(pLimit);
			break;
		}
		if (pLimit->GetOrder() == GetAt(nLimit)->GetOrder())
		{
			nLimits = -1;
			break;
		}
		if (pLimit->GetOrder() < GetAt(nLimit)->GetOrder())
		{
			InsertAt(nLimit, pLimit, 1);
			break;
		}
		if (nLimit == nLimits - 1)
		{
			nLimit = (INT)CPtrArray::Add(pLimit);
			break;
		}
	}
	return((nLimits >= 0) ? nLimit : -1);
}

INT CDatabaseTCNumOolTable::Find(double fLow, double fHigh, BOOL bDelta) CONST
{
	INT  nLimit;
	INT  nLimits;
	UINT  nType;
	double  fLimits[2];
	CDatabaseTCNumOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->GetRange(nType, fLimits[0], fLimits[1]) && ((nType != TCOOLLIMIT_TYPE_DELTA  &&  !bDelta) || (nType == TCOOLLIMIT_TYPE_DELTA  &&  bDelta)) && ((!isnan(fLow) && !isnan(fLimits[0]) && fLow == fLimits[0]) || (isnan(fLow) && isnan(fLimits[0]))) && ((!isnan(fHigh) && !isnan(fLimits[1]) && fHigh == fLimits[1]) || (isnan(fHigh) && isnan(fLimits[1])))) break;
		continue;
	}
	return((nLimit < nLimits) ? nLimit : -1);
}
INT CDatabaseTCNumOolTable::Find(double fDelta) CONST
{
	INT  nLimit;
	INT  nLimits;
	double  fLimit;
	CDatabaseTCNumOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->GetDelta(fLimit) && fDelta == fLimit) break;
		continue;
	}
	return((nLimit < nLimits) ? nLimit : -1);
}
INT CDatabaseTCNumOolTable::Find(TIMETAG tStart, TIMETAG tStop) CONST
{
	INT  nLimit;
	INT  nLimits;
	TIMETAG  tLimits[2];
	CDatabaseTCNumOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->GetTimeSpan(tLimits[0], tLimits[1]) && tStart == tLimits[0] && tStop == tLimits[1]) break;
		continue;
	}
	return((nLimit < nLimits) ? nLimit : -1);
}

CDatabaseTCNumOolLimit *CDatabaseTCNumOolTable::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCNumOolLimit *)CPtrArray::GetAt(nIndex) : (CDatabaseTCNumOolLimit *)NULL);
}

CDatabaseTCNumOolLimit *CDatabaseTCNumOolTable::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCNumOolLimit *)CPtrArray::GetAt(nIndex) : (CDatabaseTCNumOolLimit *)NULL);
}

VOID CDatabaseTCNumOolTable::RemoveAll()
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTCNumOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit))) delete pLimit;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCNumOolTable::Copy(CONST CDatabaseTCNumOolTable *pTable)
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTCNumOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_szUnit = pTable->m_szUnit, m_nAttributes = pTable->m_nAttributes, m_nChecks = pTable->m_nChecks, m_nLimits = pTable->m_nLimits, m_nStatus = pTable->m_nStatus, RemoveAll(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = new CDatabaseTCNumOolLimit))
		{
			pLimit->Copy(pTable->GetAt(nLimit));
			InsertAt(nLimit, pLimit, 1);
			continue;
		}
		break;
	}
	return((nLimit == nLimits) ? TRUE : FALSE);
}
BOOL CDatabaseTCNumOolTable::Copy(CONST CDatabaseTMNumOolTable *pTable)
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTCNumOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_szUnit = pTable->m_szUnit, m_nAttributes = pTable->m_nAttributes, m_nChecks = pTable->m_nChecks, m_nLimits = pTable->m_nLimits, m_nStatus = pTable->m_nStatus, RemoveAll(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = new CDatabaseTCNumOolLimit))
		{
			pLimit->Copy(pTable->GetAt(nLimit));
			InsertAt(nLimit, pLimit, 1);
			continue;
		}
		break;
	}
	return((nLimit == nLimits) ? TRUE : FALSE);
}

BOOL CDatabaseTCNumOolTable::Compare(CONST CDatabaseTCNumOolTable *pTable) CONST
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTCNumOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (pTable->m_szName == m_szName && pTable->m_szDescription == m_szDescription && pTable->m_szUnit == m_szUnit && pTable->m_nAttributes == m_nAttributes && pTable->m_nChecks == m_nChecks && pTable->m_nLimits == m_nLimits && pTable->m_nStatus == m_nStatus && pTable->GetSize() == GetSize()) ? (INT)GetSize() : -1; nLimit < nLimits; nLimit++)
	{
		if ((pLimit = pTable->GetAt(nLimit)) && pLimit->Compare(GetAt(nLimit))) continue;
		break;
	}
	return((nLimit == nLimits) ? TRUE : FALSE);
}

BOOL CDatabaseTCNumOolTable::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nLimit;
	INT  nLimits;
	CByteArray  nLimitsData[2];
	CDatabaseTCNumOolLimit  *pLimit;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbUnit = (m_szUnit.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nLimit = 0, nLimits = (INT)GetSize(), sData.nAttributes = m_nAttributes, sData.nChecks = m_nChecks, sData.nStatus = m_nStatus; nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->Map(nLimitsData[1], bBinary) && nLimitsData[0].Append(nLimitsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbUnit + (sData.cbLimits = (INT)(nLimitsData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nLimit == nLimits; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szUnit, sData.cbUnit);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbUnit), nLimitsData[0].GetData(), sData.cbLimits);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCNumOolTable::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbLimit;
	INT  cbLimits;
	CByteArray  nLimitsData[2];
	CDatabaseTCNumOolLimit  *pLimit;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbUnit + sData.cbLimits && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbUnit > 0 && sData.cbLimits >= 0; )
	{
		for (CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription)), CopyMemory(m_szUnit.GetBufferSetLength(STRINGCHARS(sData.cbUnit)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbUnit)), nLimitsData[0].SetSize(sData.cbLimits), CopyMemory(nLimitsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbUnit), sData.cbLimits), m_nAttributes = sData.nAttributes, m_nChecks = sData.nChecks, m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), m_szUnit.ReleaseBuffer(), RemoveAll(), cbLimit = cbLimits = 0; cbLimits < sData.cbLimits; cbLimits += cbLimit)
		{
			for (CopyMemory(&cbLimit, nLimitsData[0].GetData() + cbLimits, sizeof(cbLimit)), nLimitsData[1].SetSize(max(min(cbLimit, nLimitsData[0].GetSize() - cbLimits), 0)); nLimitsData[1].GetSize() >= 0; )
			{
				CopyMemory(nLimitsData[1].GetData(), nLimitsData[0].GetData() + cbLimits, nLimitsData[1].GetSize());
				break;
			}
			if ((pLimit = new CDatabaseTCNumOolLimit))
			{
				if (pLimit->Unmap(nLimitsData[1], bBinary) && Add(pLimit) >= 0) continue;
				delete pLimit;
			}
			break;
		}
		m_nLimits = (INT)GetSize();
		return((cbLimits == sData.cbLimits) ? TRUE : FALSE);
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCNumOolTables

CDatabaseTCNumOolTables::CDatabaseTCNumOolTables() : CPtrArray()
{
	return;
}

CDatabaseTCNumOolTables::~CDatabaseTCNumOolTables()
{
	RemoveAll();
}

INT CDatabaseTCNumOolTables::Add(CDatabaseTCNumOolTable *pTable)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pTable->GetName(), TRUE)) >= 0) InsertAt(nIndex, pTable, 1);
	return nIndex;
}

INT CDatabaseTCNumOolTables::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTCNumOolTable *CDatabaseTCNumOolTables::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCNumOolTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTCNumOolTable *)NULL);
}

CDatabaseTCNumOolTable *CDatabaseTCNumOolTables::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCNumOolTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTCNumOolTable *)NULL);
}

VOID CDatabaseTCNumOolTables::RemoveAll()
{
	INT  nTable;
	INT  nTables;
	CDatabaseTCNumOolTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable))) delete pTable;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCNumOolTables::Copy(CONST CDatabaseTCNumOolTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTCNumOolTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTCNumOolTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}
BOOL CDatabaseTCNumOolTables::Copy(CONST CDatabaseTMNumOolTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTCNumOolTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTCNumOolTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTCNumOolTables::Compare(CONST CDatabaseTCNumOolTables *pTables) CONST
{
	INT  nTable;
	INT  nTables;

	for (nTable = 0, nTables = (pTables->GetSize() == GetSize()) ? (INT)GetSize() : -1; nTable < nTables; nTable++)
	{
		if (!pTables->GetAt(nTable)->Compare(GetAt(nTable))) break;
		continue;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTCNumOolTables::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nTable;
	INT  nTables;
	CByteArray  nTablesData;
	CDatabaseTCNumOolTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(), nInfo.RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable)) && pTable->Map(nTablesData, bBinary) && nInfo.Append(nTablesData) >= 0) continue;
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTCNumOolTables::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbTable;
	INT  cbTables;
	CByteArray  nTablesData;
	CDatabaseTCNumOolTable  *pTable;

	for (cbTables = 0, RemoveAll(); cbTables < nInfo.GetSize(); cbTables += cbTable)
	{
		for (CopyMemory(&cbTable, nInfo.GetData() + cbTables, sizeof(cbTable)), nTablesData.SetSize(max(min(cbTable, nInfo.GetSize() - cbTables), 0)); nTablesData.GetSize() >= 0; )
		{
			CopyMemory(nTablesData.GetData(), nInfo.GetData() + cbTables, nTablesData.GetSize());
			break;
		}
		if ((pTable = new CDatabaseTCNumOolTable))
		{
			if (pTable->Unmap(nTablesData, bBinary) && Add(pTable) >= 0) continue;
			delete pTable;
		}
		break;
	}
	return((cbTables == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCNumOolTables::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCNumOolTable  *pTable;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pTable = GetAt(nIndex[0]))) ? ((nIndex[1] = (pTable->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pTable = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pTable->GetName() == pszName) || (bInsert && (((pTable = GetAt(max(nIndex[0] - 1, 0))) && pTable->GetName() != pszName && (pTable = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pTable->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCTxtOolLimit

CDatabaseTCTxtOolLimit::CDatabaseTCTxtOolLimit() : CObject()
{
	m_nLimitType = 0;
	m_nLimitOrder = 0;
	m_fLimits[0] = 0.0;
	m_fLimits[1] = 0.0;
	m_nValidityParameterRef = -1;
	m_nValidityValue = 0;
}
CDatabaseTCTxtOolLimit::CDatabaseTCTxtOolLimit(double fLow, double fHigh) : CObject()
{
	m_nLimitType = 0;
	m_nLimitOrder = 0;
	m_fLimits[0] = fLow;
	m_fLimits[1] = fHigh;
	m_nValidityParameterRef = -1;
	m_nValidityValue = 0;
}
CDatabaseTCTxtOolLimit::CDatabaseTCTxtOolLimit(LPCTSTR pszLow, LPCTSTR pszHigh) : CObject()
{
	m_nLimitType = 0;
	m_nLimitOrder = 0;
	m_fLimits[0] = 0.0;
	m_fLimits[1] = 0.0;
	m_szLimits[0] = pszLow;
	m_szLimits[1] = pszHigh;
	m_nValidityParameterRef = -1;
	m_nValidityValue = 0;
}

VOID CDatabaseTCTxtOolLimit::SetType(UINT nType)
{
	m_nLimitType = nType;
}

UINT CDatabaseTCTxtOolLimit::GetType() CONST
{
	return m_nLimitType;
}

VOID CDatabaseTCTxtOolLimit::SetOrder(UINT nOrder)
{
	m_nLimitOrder = nOrder;
}

UINT CDatabaseTCTxtOolLimit::GetOrder() CONST
{
	return m_nLimitOrder;
}

VOID CDatabaseTCTxtOolLimit::SetLimit(double fLimit)
{
	m_fLimits[0] = fLimit;
	m_fLimits[1] = fLimit;
	m_szLimits[0].Empty();
	m_szLimits[1].Empty();
}
VOID CDatabaseTCTxtOolLimit::SetLimit(LPCTSTR pszLimit)
{
	m_fLimits[0] = 0.0;
	m_fLimits[1] = 0.0;
	m_szLimits[0] = pszLimit;
	m_szLimits[1] = pszLimit;
}

BOOL CDatabaseTCTxtOolLimit::GetLimit(double &fLimit) CONST
{
	if (m_fLimits[0] == m_fLimits[1] && m_szLimits[0].IsEmpty() && m_szLimits[1].IsEmpty())
	{
		fLimit = m_fLimits[0];
		return TRUE;
	}
	return FALSE;
}
BOOL CDatabaseTCTxtOolLimit::GetLimit(CString &szLimit) CONST
{
	if (m_szLimits[0] == m_szLimits[1] && !m_szLimits[0].IsEmpty() && !m_szLimits[1].IsEmpty())
	{
		szLimit = m_szLimits[0];
		return TRUE;
	}
	return FALSE;
}

VOID CDatabaseTCTxtOolLimit::SetRange(double fLow, double fHigh)
{
	m_fLimits[0] = fLow;
	m_fLimits[1] = fHigh;
	m_szLimits[0].Empty();
	m_szLimits[1].Empty();
}
VOID CDatabaseTCTxtOolLimit::SetRange(LPCTSTR pszLow, LPCTSTR pszHigh)
{
	m_fLimits[0] = 0.0;
	m_fLimits[1] = 0.0;
	m_szLimits[0] = pszLow;
	m_szLimits[1] = pszHigh;
}

BOOL CDatabaseTCTxtOolLimit::GetRange(double &fLow, double &fHigh) CONST
{
	if (m_szLimits[0].IsEmpty() && m_szLimits[1].IsEmpty())
	{
		fLow = m_fLimits[0];
		fHigh = m_fLimits[1];
		return TRUE;
	}
	return FALSE;
}
BOOL CDatabaseTCTxtOolLimit::GetRange(CString &szLow, CString &szHigh) CONST
{
	if (!m_szLimits[0].IsEmpty() || !m_szLimits[1].IsEmpty())
	{
		szLow = m_szLimits[0];
		szHigh = m_szLimits[1];
		return TRUE;
	}
	return FALSE;
}

VOID CDatabaseTCTxtOolLimit::SetValidityParameter(LPCTSTR pszTag)
{
	m_szValidityParameter = pszTag;
}

CString CDatabaseTCTxtOolLimit::GetValidityParameter() CONST
{
	return m_szValidityParameter;
}

VOID CDatabaseTCTxtOolLimit::SetValidityParameterRef(INT nRef)
{
	m_nValidityParameterRef = nRef;
}

INT CDatabaseTCTxtOolLimit::GetValidityParameterRef() CONST
{
	return m_nValidityParameterRef;
}

VOID CDatabaseTCTxtOolLimit::SetValidityValue(ULONGLONG nValidityValue)
{
	m_nValidityValue = nValidityValue;
}

ULONGLONG CDatabaseTCTxtOolLimit::GetValidityValue() CONST
{
	return m_nValidityValue;
}

CDatabaseTCTxtOolLimit &CDatabaseTCTxtOolLimit::operator=(CONST CDatabaseTCTxtOolLimit &cLimit)
{
	Copy(&cLimit);
	return *this;
}

BOOL CDatabaseTCTxtOolLimit::operator==(CONST CDatabaseTCTxtOolLimit &cLimit) CONST
{
	return Compare(&cLimit);
}

BOOL CDatabaseTCTxtOolLimit::operator!=(CONST CDatabaseTCTxtOolLimit &cLimit) CONST
{
	return !Compare(&cLimit);
}

VOID CDatabaseTCTxtOolLimit::Copy(CONST CDatabaseTCTxtOolLimit *pLimit)
{
	m_nLimitType = pLimit->m_nLimitType;
	m_nLimitOrder = pLimit->m_nLimitOrder;
	m_fLimits[0] = pLimit->m_fLimits[0];
	m_fLimits[1] = pLimit->m_fLimits[1];
	m_szLimits[0] = pLimit->m_szLimits[0];
	m_szLimits[1] = pLimit->m_szLimits[1];
	m_szValidityParameter = pLimit->m_szValidityParameter;
	m_nValidityParameterRef = pLimit->m_nValidityParameterRef;
	m_nValidityValue = pLimit->m_nValidityValue;
}
VOID CDatabaseTCTxtOolLimit::Copy(CONST CDatabaseTMTxtOolLimit *pLimit)
{
	m_nLimitType = pLimit->m_nLimitType;
	m_nLimitOrder = pLimit->m_nLimitOrder;
	m_fLimits[0] = pLimit->m_fLimits[0];
	m_fLimits[1] = pLimit->m_fLimits[1];
	m_szLimits[0] = pLimit->m_szLimits[0];
	m_szLimits[1] = pLimit->m_szLimits[1];
	m_szValidityParameter = pLimit->m_szValidityParameter;
	m_nValidityParameterRef = pLimit->m_nValidityParameterRef;
	m_nValidityValue = pLimit->m_nValidityValue;
}

BOOL CDatabaseTCTxtOolLimit::Compare(CONST CDatabaseTCTxtOolLimit *pLimit) CONST
{
	return((pLimit->m_nLimitType == m_nLimitType  &&  pLimit->m_nLimitOrder == m_nLimitOrder && (pLimit->m_fLimits[0] == m_fLimits[0] || (isnan(pLimit->m_fLimits[0]) && isnan(m_fLimits[0]))) && (pLimit->m_fLimits[1] == m_fLimits[1] || (isnan(pLimit->m_fLimits[1]) && isnan(m_fLimits[1]))) && pLimit->m_szLimits[0] == m_szLimits[0] && pLimit->m_szLimits[1] == m_szLimits[1] && pLimit->m_szValidityParameter == m_szValidityParameter  &&  pLimit->m_nValidityParameterRef == m_nValidityParameterRef  &&  pLimit->m_nValidityValue == m_nValidityValue) ? TRUE : FALSE);
}

BOOL CDatabaseTCTxtOolLimit::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;

	sData.cbLimits[0] = (m_szLimits[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbLimits[1] = (m_szLimits[1].GetLength() + 1)*sizeof(TCHAR);
	sData.cbValidityParameter = (!bBinary) ? ((m_szValidityParameter.GetLength() + 1)*sizeof(TCHAR)) : 0;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbLimits[0] + sData.cbLimits[1] + sData.cbValidityParameter)), sData.nLimitType = m_nLimitType, sData.nLimitOrder = m_nLimitOrder, sData.fLimits[0] = m_fLimits[0], sData.fLimits[1] = m_fLimits[1], sData.nValidityParameterRef = (bBinary) ? m_nValidityParameterRef : -1, sData.nValidityValue = m_nValidityValue; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szLimits[0], sData.cbLimits[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbLimits[0]), (LPCTSTR)m_szLimits[1], sData.cbLimits[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbLimits[1]), (LPCTSTR)m_szValidityParameter, sData.cbValidityParameter);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCTxtOolLimit::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbLimits[0] + sData.cbLimits[1] + sData.cbValidityParameter && sData.cbLimits[0] > 0 && sData.cbLimits[1] > 0 && sData.cbValidityParameter >= 0; )
	{
		CopyMemory(m_szLimits[0].GetBufferSetLength(STRINGCHARS(sData.cbLimits[0])), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbLimits[0]));
		CopyMemory(m_szLimits[1].GetBufferSetLength(STRINGCHARS(sData.cbLimits[1])), nInfo.GetData() + (cbData = cbData + sData.cbLimits[0]), STRINGBYTES(sData.cbLimits[1]));
		CopyMemory(m_szValidityParameter.GetBufferSetLength(STRINGCHARS(sData.cbValidityParameter)), nInfo.GetData() + (cbData = cbData + sData.cbLimits[1]), STRINGBYTES(sData.cbValidityParameter));
		m_nLimitType = sData.nLimitType;
		m_nLimitOrder = sData.nLimitOrder;
		m_fLimits[0] = sData.fLimits[0];
		m_fLimits[1] = sData.fLimits[1];
		m_nValidityParameterRef = sData.nValidityParameterRef;
		m_nValidityValue = sData.nValidityValue;
		m_szLimits[0].ReleaseBuffer();
		m_szLimits[1].ReleaseBuffer();
		m_szValidityParameter.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCTxtOolTable

CDatabaseTCTxtOolTable::CDatabaseTCTxtOolTable() : CPtrArray()
{
	m_nChecks = 0;
	m_nLimits = 0;
	m_nAttributes = 0;
	m_nStatus = TCOOLTABLE_RECORDSTATUS_NONE;
}

CDatabaseTCTxtOolTable::~CDatabaseTCTxtOolTable()
{
	RemoveAll();
}

VOID CDatabaseTCTxtOolTable::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCTxtOolTable::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCTxtOolTable::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCTxtOolTable::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTCTxtOolTable::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTCTxtOolTable::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCTxtOolTable::SetChecks(INT nChecks)
{
	m_nChecks = nChecks;
}

INT CDatabaseTCTxtOolTable::GetChecks() CONST
{
	return m_nChecks;
}

VOID CDatabaseTCTxtOolTable::SetLimits(INT nLimits)
{
	m_nLimits = nLimits;
}

INT CDatabaseTCTxtOolTable::GetLimits() CONST
{
	return m_nLimits;
}

VOID CDatabaseTCTxtOolTable::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTCTxtOolTable::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseTCTxtOolTable::Add(CDatabaseTCTxtOolLimit *pLimit)
{
	INT  nLimit;
	INT  nLimits;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits || !nLimits; nLimit++)
	{
		if (!nLimits || !pLimit->GetOrder())
		{
			nLimit = (INT)CPtrArray::Add(pLimit);
			break;
		}
		if (pLimit->GetOrder() == GetAt(nLimit)->GetOrder())
		{
			nLimits = -1;
			break;
		}
		if (pLimit->GetOrder() < GetAt(nLimit)->GetOrder())
		{
			InsertAt(nLimit, pLimit, 1);
			break;
		}
		if (nLimit == nLimits - 1)
		{
			nLimit = (INT)CPtrArray::Add(pLimit);
			break;
		}
	}
	return((nLimits >= 0) ? nLimit : -1);
}

INT CDatabaseTCTxtOolTable::Find(double fLimit) CONST
{
	INT  nLimit;
	INT  nLimits;
	double  fLimits[1];
	CDatabaseTCTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->GetLimit(fLimits[0]) && fLimit == fLimits[0]) break;
		continue;
	}
	return((nLimit < nLimits) ? nLimit : -1);
}
INT CDatabaseTCTxtOolTable::Find(LPCTSTR pszLimit) CONST
{
	INT  nLimit;
	INT  nLimits;
	CString  szLimits[1];
	CDatabaseTCTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->GetLimit(szLimits[0]) && pszLimit == szLimits[0]) break;
		continue;
	}
	return((nLimit < nLimits) ? nLimit : -1);
}
INT CDatabaseTCTxtOolTable::Find(double fLow, double fHigh) CONST
{
	INT  nLimit;
	INT  nLimits;
	double  fLimits[2];
	CDatabaseTCTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->GetRange(fLimits[0], fLimits[1]) && fLow == fLimits[0] && fHigh == fLimits[1]) break;
		continue;
	}
	return((nLimit < nLimits) ? nLimit : -1);
}
INT CDatabaseTCTxtOolTable::Find(LPCTSTR pszLow, LPCTSTR pszHigh) CONST
{
	INT  nLimit;
	INT  nLimits;
	CString  szLimits[2];
	CDatabaseTCTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->GetRange(szLimits[0], szLimits[1]) && pszLow == szLimits[0] && pszHigh == szLimits[1]) break;
		continue;
	}
	return((nLimit < nLimits) ? nLimit : -1);
}

CDatabaseTCTxtOolLimit *CDatabaseTCTxtOolTable::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCTxtOolLimit *)CPtrArray::GetAt(nIndex) : (CDatabaseTCTxtOolLimit *)NULL);
}

CDatabaseTCTxtOolLimit *CDatabaseTCTxtOolTable::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCTxtOolLimit *)CPtrArray::GetAt(nIndex) : (CDatabaseTCTxtOolLimit *)NULL);
}

VOID CDatabaseTCTxtOolTable::RemoveAll()
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTCTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)GetSize(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit))) delete pLimit;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCTxtOolTable::Copy(CONST CDatabaseTCTxtOolTable *pTable)
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTCTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_nAttributes = pTable->m_nAttributes, m_nChecks = pTable->m_nChecks, m_nLimits = pTable->m_nLimits, m_nStatus = pTable->m_nStatus, RemoveAll(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = new CDatabaseTCTxtOolLimit))
		{
			pLimit->Copy(pTable->GetAt(nLimit));
			InsertAt(nLimit, pLimit, 1);
			continue;
		}
		break;
	}
	return((nLimit == nLimits) ? TRUE : FALSE);
}
BOOL CDatabaseTCTxtOolTable::Copy(CONST CDatabaseTMTxtOolTable *pTable)
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTCTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (INT)pTable->GetSize(), m_szName = pTable->m_szName, m_szDescription = pTable->m_szDescription, m_nAttributes = pTable->m_nAttributes, m_nChecks = pTable->m_nChecks, m_nLimits = pTable->m_nLimits, m_nStatus = pTable->m_nStatus, RemoveAll(); nLimit < nLimits; nLimit++)
	{
		if ((pLimit = new CDatabaseTCTxtOolLimit))
		{
			pLimit->Copy(pTable->GetAt(nLimit));
			InsertAt(nLimit, pLimit, 1);
			continue;
		}
		break;
	}
	return((nLimit == nLimits) ? TRUE : FALSE);
}

BOOL CDatabaseTCTxtOolTable::Compare(CONST CDatabaseTCTxtOolTable *pTable) CONST
{
	INT  nLimit;
	INT  nLimits;
	CDatabaseTCTxtOolLimit  *pLimit;

	for (nLimit = 0, nLimits = (pTable->m_szName == m_szName && pTable->m_szDescription == m_szDescription && pTable->m_nAttributes == m_nAttributes && pTable->m_nChecks == m_nChecks && pTable->m_nLimits == m_nLimits && pTable->m_nStatus == m_nStatus && pTable->GetSize() == GetSize()) ? (INT)GetSize() : -1; nLimit < nLimits; nLimit++)
	{
		if ((pLimit = pTable->GetAt(nLimit)) && pLimit->Compare(GetAt(nLimit))) continue;
		break;
	}
	return((nLimit == nLimits) ? TRUE : FALSE);
}

BOOL CDatabaseTCTxtOolTable::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nLimit;
	INT  nLimits;
	CByteArray  nLimitsData[2];
	CDatabaseTCTxtOolLimit  *pLimit;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nLimit = 0, nLimits = (INT)GetSize(), sData.nAttributes = m_nAttributes, sData.nChecks = m_nChecks, sData.nStatus = m_nStatus; nLimit < nLimits; nLimit++)
	{
		if ((pLimit = GetAt(nLimit)) && pLimit->Map(nLimitsData[1], bBinary) && nLimitsData[0].Append(nLimitsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + (sData.cbLimits = (INT)(nLimitsData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nLimit == nLimits; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), nLimitsData[0].GetData(), sData.cbLimits);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCTxtOolTable::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbLimit;
	INT  cbLimits;
	CByteArray  nLimitsData[2];
	CDatabaseTCTxtOolLimit  *pLimit;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbLimits && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbLimits >= 0; )
	{
		for (CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription)), nLimitsData[0].SetSize(sData.cbLimits), CopyMemory(nLimitsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbDescription), sData.cbLimits), m_nAttributes = sData.nAttributes, m_nChecks = sData.nChecks, m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), RemoveAll(), cbLimit = cbLimits = 0; cbLimits < sData.cbLimits; cbLimits += cbLimit)
		{
			for (CopyMemory(&cbLimit, nLimitsData[0].GetData() + cbLimits, sizeof(cbLimit)), nLimitsData[1].SetSize(max(min(cbLimit, nLimitsData[0].GetSize() - cbLimits), 0)); nLimitsData[1].GetSize() >= 0; )
			{
				CopyMemory(nLimitsData[1].GetData(), nLimitsData[0].GetData() + cbLimits, nLimitsData[1].GetSize());
				break;
			}
			if ((pLimit = new CDatabaseTCTxtOolLimit))
			{
				if (pLimit->Unmap(nLimitsData[1], bBinary) && Add(pLimit) >= 0) continue;
				delete pLimit;
			}
			break;
		}
		m_nLimits = (INT)GetSize();
		return((cbLimits == sData.cbLimits) ? TRUE : FALSE);
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCTxtOolTables

CDatabaseTCTxtOolTables::CDatabaseTCTxtOolTables() : CPtrArray()
{
	return;
}

CDatabaseTCTxtOolTables::~CDatabaseTCTxtOolTables()
{
	RemoveAll();
}

INT CDatabaseTCTxtOolTables::Add(CDatabaseTCTxtOolTable *pTable)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pTable->GetName(), TRUE)) >= 0) InsertAt(nIndex, pTable, 1);
	return nIndex;
}

INT CDatabaseTCTxtOolTables::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTCTxtOolTable *CDatabaseTCTxtOolTables::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCTxtOolTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTCTxtOolTable *)NULL);
}

CDatabaseTCTxtOolTable *CDatabaseTCTxtOolTables::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCTxtOolTable *)CPtrArray::GetAt(nIndex) : (CDatabaseTCTxtOolTable *)NULL);
}

VOID CDatabaseTCTxtOolTables::RemoveAll()
{
	INT  nTable;
	INT  nTables;
	CDatabaseTCTxtOolTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable))) delete pTable;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCTxtOolTables::Copy(CONST CDatabaseTCTxtOolTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTCTxtOolTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTCTxtOolTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}
BOOL CDatabaseTCTxtOolTables::Copy(CONST CDatabaseTMTxtOolTables *pTables)
{
	INT  nTable;
	INT  nTables;
	CDatabaseTCTxtOolTable  *pTable;

	for (nTable = 0, nTables = (INT)pTables->GetSize(), RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = new CDatabaseTCTxtOolTable))
		{
			pTable->Copy(pTables->GetAt(nTable));
			InsertAt(nTable, pTable, 1);
			continue;
		}
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTCTxtOolTables::Compare(CONST CDatabaseTCTxtOolTables *pTables) CONST
{
	INT  nTable;
	INT  nTables;

	for (nTable = 0, nTables = (pTables->GetSize() == GetSize()) ? (INT)GetSize() : -1; nTable < nTables; nTable++)
	{
		if (!pTables->GetAt(nTable)->Compare(GetAt(nTable))) break;
		continue;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTCTxtOolTables::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nTable;
	INT  nTables;
	CByteArray  nTablesData;
	CDatabaseTCTxtOolTable  *pTable;

	for (nTable = 0, nTables = (INT)GetSize(), nInfo.RemoveAll(); nTable < nTables; nTable++)
	{
		if ((pTable = GetAt(nTable)) && pTable->Map(nTablesData, bBinary) && nInfo.Append(nTablesData) >= 0) continue;
		break;
	}
	return((nTable == nTables) ? TRUE : FALSE);
}

BOOL CDatabaseTCTxtOolTables::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbTable;
	INT  cbTables;
	CByteArray  nTablesData;
	CDatabaseTCTxtOolTable  *pTable;

	for (cbTables = 0, RemoveAll(); cbTables < nInfo.GetSize(); cbTables += cbTable)
	{
		for (CopyMemory(&cbTable, nInfo.GetData() + cbTables, sizeof(cbTable)), nTablesData.SetSize(max(min(cbTable, nInfo.GetSize() - cbTables), 0)); nTablesData.GetSize() >= 0; )
		{
			CopyMemory(nTablesData.GetData(), nInfo.GetData() + cbTables, nTablesData.GetSize());
			break;
		}
		if ((pTable = new CDatabaseTCTxtOolTable))
		{
			if (pTable->Unmap(nTablesData, bBinary) && Add(pTable) >= 0) continue;
			delete pTable;
		}
		break;
	}
	return((cbTables == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCTxtOolTables::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCTxtOolTable  *pTable;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pTable = GetAt(nIndex[0]))) ? ((nIndex[1] = (pTable->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pTable = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pTable->GetName() == pszName) || (bInsert && (((pTable = GetAt(max(nIndex[0] - 1, 0))) && pTable->GetName() != pszName && (pTable = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pTable->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCFunctionElement

CDatabaseTCFunctionElement::CDatabaseTCFunctionElement() : CObject()
{
	m_nAttributes = 0;
	m_nConstValue = 0;
	m_bConstValue = FALSE;
	m_nGroupSize = 0;
	m_nBitOffset = 0;
	m_nBytePos = 0;
	m_nBitPos = 0;
	m_nWidth = 0;
	m_nRef[0] = -1;
	m_nRef[1] = -1;
}

VOID CDatabaseTCFunctionElement::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCFunctionElement::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCFunctionElement::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCFunctionElement::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTCFunctionElement::SetAttributes(ULONGLONG nAttributes)
{
	m_nAttributes = nAttributes;
}

ULONGLONG CDatabaseTCFunctionElement::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCFunctionElement::SetGroupSize(INT nSize)
{
	m_nGroupSize = nSize;
}

INT CDatabaseTCFunctionElement::GetGroupSize() CONST
{
	return m_nGroupSize;
}

VOID CDatabaseTCFunctionElement::SetBytePos(INT nPos)
{
	m_nBytePos = nPos;
}

INT CDatabaseTCFunctionElement::GetBytePos() CONST
{
	return m_nBytePos;
}

VOID CDatabaseTCFunctionElement::SetBitPos(INT nPos)
{
	m_nBitPos = nPos;
}

INT CDatabaseTCFunctionElement::GetBitPos() CONST
{
	return m_nBitPos;
}

VOID CDatabaseTCFunctionElement::SetBitOffset(INT nOffset)
{
	m_nBitOffset = nOffset;
}

INT CDatabaseTCFunctionElement::GetBitOffset() CONST
{
	return m_nBitOffset;
}

VOID CDatabaseTCFunctionElement::SetWidth(INT nWidth)
{
	m_nWidth = nWidth;
}

INT CDatabaseTCFunctionElement::GetWidth() CONST
{
	return m_nWidth;
}

VOID CDatabaseTCFunctionElement::SetConstValue()
{
	m_nConstValue = 0;
	m_bConstValue = FALSE;
}
VOID CDatabaseTCFunctionElement::SetConstValue(ULONGLONG nConstValue)
{
	m_nConstValue = nConstValue;
	m_bConstValue = TRUE;
}

ULONGLONG CDatabaseTCFunctionElement::GetConstValue() CONST
{
	return m_nConstValue;
}

BOOL CDatabaseTCFunctionElement::HasConstValue() CONST
{
	return m_bConstValue;
}

VOID CDatabaseTCFunctionElement::SetConstValueAsText(LPCTSTR pszConstValue)
{
	m_szConstValue[0] = pszConstValue;
}

CString CDatabaseTCFunctionElement::GetConstValueAsText() CONST
{
	return m_szConstValue[0];
}

VOID CDatabaseTCFunctionElement::SetConstValueSource(LPCTSTR pszParameter)
{
	m_szConstValue[1] = pszParameter;
}

CString CDatabaseTCFunctionElement::GetConstValueSource() CONST
{
	return m_szConstValue[1];
}

VOID CDatabaseTCFunctionElement::SetConstValueSourceRef(INT nRef)
{
	m_nRef[1] = nRef;
}

INT CDatabaseTCFunctionElement::GetConstValueSourceRef() CONST
{
	return m_nRef[1];
}

VOID CDatabaseTCFunctionElement::SetRef(INT nRef)
{
	m_nRef[0] = nRef;
}

INT CDatabaseTCFunctionElement::GetRef() CONST
{
	return m_nRef[0];
}

BOOL CDatabaseTCFunctionElement::Copy(CONST CDatabaseTCFunctionElement *pFunctionElement)
{
	m_szName = pFunctionElement->m_szName;
	m_szDescription = pFunctionElement->m_szDescription;
	m_szConstValue[0] = pFunctionElement->m_szConstValue[0];
	m_szConstValue[1] = pFunctionElement->m_szConstValue[1];
	m_nAttributes = pFunctionElement->m_nAttributes;
	m_nConstValue = pFunctionElement->m_nConstValue;
	m_bConstValue = pFunctionElement->m_bConstValue;
	m_nGroupSize = pFunctionElement->m_nGroupSize;
	m_nBitOffset = pFunctionElement->m_nBitOffset;
	m_nBytePos = pFunctionElement->m_nBytePos;
	m_nBitPos = pFunctionElement->m_nBitPos;
	m_nWidth = pFunctionElement->m_nWidth;
	m_nRef[0] = pFunctionElement->m_nRef[0];
	m_nRef[1] = pFunctionElement->m_nRef[1];
	return TRUE;
}

BOOL CDatabaseTCFunctionElement::Compare(CONST CDatabaseTCFunctionElement *pFunctionElement) CONST
{
	return((pFunctionElement->m_szName == m_szName  &&  pFunctionElement->m_szDescription == m_szDescription  &&  pFunctionElement->m_szConstValue[0] == m_szConstValue[0] && pFunctionElement->m_szConstValue[1] == m_szConstValue[1] && pFunctionElement->m_nAttributes == m_nAttributes  &&  pFunctionElement->m_nConstValue == m_nConstValue  &&  pFunctionElement->m_bConstValue == m_bConstValue  &&  pFunctionElement->m_nGroupSize == m_nGroupSize  &&  pFunctionElement->m_nBitOffset == m_nBitOffset  &&  pFunctionElement->m_nBytePos == m_nBytePos  &&  pFunctionElement->m_nBitPos == m_nBitPos  &&  pFunctionElement->m_nWidth == m_nWidth  &&  pFunctionElement->m_nRef[0] == m_nRef[0] && pFunctionElement->m_nRef[1] == m_nRef[1]) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunctionElement::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	sData.cbConstValue[0] = (m_szConstValue[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbConstValue[1] = (m_szConstValue[1].GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbConstValue[0] + sData.cbConstValue[1])), sData.nAttributes = m_nAttributes, sData.nConstValue = m_nConstValue, sData.bConstValue = m_bConstValue, sData.nGroupSize = m_nGroupSize, sData.nBitOffset = m_nBitOffset, sData.nBytePos = m_nBytePos, sData.nBitPos = m_nBitPos, sData.nWidth = m_nWidth, sData.nRef[0] = (bBinary) ? m_nRef[0] : -1, sData.nRef[1] = (bBinary) ? m_nRef[1] : -1, sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szConstValue[0], sData.cbConstValue[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbConstValue[0]), (LPCTSTR)m_szConstValue[1], sData.cbConstValue[1]);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCFunctionElement::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbConstValue[0] + sData.cbConstValue[1] && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbConstValue[0] > 0 && sData.cbConstValue[1] > 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription));
		CopyMemory(m_szConstValue[0].GetBufferSetLength(STRINGCHARS(sData.cbConstValue[0])), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbConstValue[0]));
		CopyMemory(m_szConstValue[1].GetBufferSetLength(STRINGCHARS(sData.cbConstValue[1])), nInfo.GetData() + (cbData = cbData + sData.cbConstValue[0]), STRINGBYTES(sData.cbConstValue[1]));
		m_nAttributes = sData.nAttributes;
		m_nConstValue = sData.nConstValue;
		m_bConstValue = sData.bConstValue;
		m_nGroupSize = sData.nGroupSize;
		m_nBitOffset = sData.nBitOffset;
		m_nBytePos = sData.nBytePos;
		m_nBitPos = sData.nBitPos;
		m_nWidth = sData.nWidth;
		m_nRef[0] = sData.nRef[0];
		m_nRef[1] = sData.nRef[1];
		m_szName.ReleaseBuffer();
		m_szDescription.ReleaseBuffer();
		m_szConstValue[0].ReleaseBuffer();
		m_szConstValue[1].ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCFunction

CDatabaseTCFunction::CDatabaseTCFunction() : CPtrArray()
{
	m_nTCID = -1;
	m_nTCType = -1;
	m_nAPID[0] = -1;
	m_nAPID[1] = -1;
	m_nMapID = -1;
	m_nAckFlags = -1;
	m_nAttributes = 0;
	m_nTCPacketRef = -1;
	m_nVerifGroupRef[0] = -1;
	m_nVerifGroupRef[1] = -1;
	m_bInitializedValues = FALSE;
	m_nStatus = TCFUNCTION_RECORDSTATUS_NONE;
}

CDatabaseTCFunction::~CDatabaseTCFunction()
{
	RemoveAll();
}

VOID CDatabaseTCFunction::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCFunction::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCFunction::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription[0] = pszDescription;
}

CString CDatabaseTCFunction::GetDescription() CONST
{
	return m_szDescription[0];
}

VOID CDatabaseTCFunction::SetExtendedDescription(LPCTSTR pszDescription)
{
	m_szDescription[1] = pszDescription;
}

CString CDatabaseTCFunction::GetExtendedDescription() CONST
{
	return m_szDescription[1];
}

VOID CDatabaseTCFunction::SetDetails(LPCTSTR pszDetails)
{
	m_szDetails = pszDetails;
}

CString CDatabaseTCFunction::GetDetails() CONST
{
	return m_szDetails;
}

VOID CDatabaseTCFunction::SetAttributes(ULONGLONG nAttributes)
{
	m_nAttributes = nAttributes;
}

ULONGLONG CDatabaseTCFunction::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCFunction::SetAPID(INT nAPID, BOOL bRedundant)
{
	m_nAPID[0] = (!bRedundant) ? nAPID : m_nAPID[0];
	m_nAPID[1] = (!bRedundant) ? m_nAPID[1] : nAPID;
}

INT CDatabaseTCFunction::GetAPID(BOOL bRedundant) CONST
{
	return((!bRedundant) ? m_nAPID[0] : m_nAPID[1]);
}

VOID CDatabaseTCFunction::SetTCType(INT nTCType)
{
	m_nTCType = nTCType;
}

INT CDatabaseTCFunction::GetTCType() CONST
{
	return m_nTCType;
}

VOID CDatabaseTCFunction::SetTCID(INT nTCID)
{
	m_nTCID = nTCID;
}

INT CDatabaseTCFunction::GetTCID() CONST
{
	return m_nTCID;
}

VOID CDatabaseTCFunction::SetMapID(INT nMapID)
{
	m_nMapID = nMapID;
}

INT CDatabaseTCFunction::GetMapID() CONST
{
	return m_nMapID;
}

VOID CDatabaseTCFunction::SetTCPacket(LPCTSTR pszTag)
{
	m_szTCPacket = pszTag;
}

CString CDatabaseTCFunction::GetTCPacket() CONST
{
	return m_szTCPacket;
}

VOID CDatabaseTCFunction::SetTCPacketRef(INT nRef)
{
	m_nTCPacketRef = nRef;
}

INT CDatabaseTCFunction::GetTCPacketRef() CONST
{
	return m_nTCPacketRef;
}

VOID CDatabaseTCFunction::SetPreExeGroup(LPCTSTR pszGroup)
{
	m_szVerifGroup[0] = pszGroup;
}

CString CDatabaseTCFunction::GetPreExeGroup() CONST
{
	return m_szVerifGroup[0];
}

VOID CDatabaseTCFunction::SetPreExeGroupRef(INT nRef)
{
	m_nVerifGroupRef[0] = nRef;
}

INT CDatabaseTCFunction::GetPreExeGroupRef() CONST
{
	return m_nVerifGroupRef[0];
}

VOID CDatabaseTCFunction::SetExeVerGroup(LPCTSTR pszGroup)
{
	m_szVerifGroup[1] = pszGroup;
}

CString CDatabaseTCFunction::GetExeVerGroup() CONST
{
	return m_szVerifGroup[1];
}

VOID CDatabaseTCFunction::SetExeVerGroupRef(INT nRef)
{
	m_nVerifGroupRef[1] = nRef;
}

INT CDatabaseTCFunction::GetExeVerGroupRef() CONST
{
	return m_nVerifGroupRef[1];
}

VOID CDatabaseTCFunction::SetDestinationSubSystem(LPCTSTR pszSubSystem)
{
	m_szSubSystem[0] = pszSubSystem;
}

CString CDatabaseTCFunction::GetDestinationSubSystem() CONST
{
	return m_szSubSystem[0];
}

VOID CDatabaseTCFunction::SetDestinationSubSchedule(LPCTSTR pszSubSchedule)
{
	m_szDestinationSubSchedule = pszSubSchedule;
}

CString CDatabaseTCFunction::GetDestinationSubSchedule() CONST
{
	return m_szDestinationSubSchedule;
}

VOID CDatabaseTCFunction::SetDestinationEquipment(LPCTSTR pszEquipment)
{
	m_szEquipment[0] = pszEquipment;
}

CString CDatabaseTCFunction::GetDestinationEquipment() CONST
{
	return m_szEquipment[0];
}

VOID CDatabaseTCFunction::SetRouterSubSystem(LPCTSTR pszSubSystem)
{
	m_szSubSystem[1] = pszSubSystem;
}

CString CDatabaseTCFunction::GetRouterSubSystem() CONST
{
	return m_szSubSystem[1];
}

VOID CDatabaseTCFunction::SetRouterEquipment(LPCTSTR pszEquipment)
{
	m_szEquipment[1] = pszEquipment;
}

CString CDatabaseTCFunction::GetRouterEquipment() CONST
{
	return m_szEquipment[1];
}

VOID CDatabaseTCFunction::SetOperationalInfo(LPCTSTR pszInfo)
{
	m_szOperationalInfo = pszInfo;
}

CString CDatabaseTCFunction::GetOperationalInfo() CONST
{
	return m_szOperationalInfo;
}

VOID CDatabaseTCFunction::SetValidityConditions(LPCTSTR pszConditions)
{
	m_szValidityConditions = pszConditions;
}

CString CDatabaseTCFunction::GetValidityConditions() CONST
{
	return m_szValidityConditions;
}

VOID CDatabaseTCFunction::SetAssociatedTelecommands(LPCTSTR pszTelecommands)
{
	m_szAssociatedTelecommands = pszTelecommands;
}

CString CDatabaseTCFunction::GetAssociatedTelecommands() CONST
{
	return m_szAssociatedTelecommands;
}

VOID CDatabaseTCFunction::SetComplementaryTelecommands(LPCTSTR pszTelecommands)
{
	m_szComplementaryTelecommands = pszTelecommands;
}

CString CDatabaseTCFunction::GetComplementaryTelecommands() CONST
{
	return m_szComplementaryTelecommands;
}

VOID CDatabaseTCFunction::SetMissionPlannerEvent(LPCTSTR pszEvent)
{
	m_szMissionPlannerEvent = pszEvent;
}

CString CDatabaseTCFunction::GetMissionPlannerEvent() CONST
{
	return m_szMissionPlannerEvent;
}

VOID CDatabaseTCFunction::SetAcknowledgementFlags(INT nFlags)
{
	m_nAckFlags = nFlags;
}

INT CDatabaseTCFunction::GetAcknowledgementFlags() CONST
{
	return m_nAckFlags;
}

VOID CDatabaseTCFunction::SetParameterSets(CONST CStringArray &szSets)
{
	m_szParameterSets.Copy(szSets);
}

INT CDatabaseTCFunction::GetParameterSets(CStringArray &szSets) CONST
{
	szSets.Copy(m_szParameterSets);
	return((INT)szSets.GetSize());
}

VOID CDatabaseTCFunction::SetInitializedValuesFlag(BOOL bFlag)
{
	m_bInitializedValues = bFlag;
}

BOOL CDatabaseTCFunction::GetInitializedValuesFlag() CONST
{
	return m_bInitializedValues;
}

VOID CDatabaseTCFunction::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTCFunction::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseTCFunction::Add(CDatabaseTCFunctionElement *pElement)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pElement->GetName(), pElement->GetBytePos(), pElement->GetBitPos())) >= 0) InsertAt(nIndex, pElement, 1);
	return nIndex;
}

INT CDatabaseTCFunction::Find(LPCTSTR pszName, INT nOccurrence) CONST
{
	INT  nCount;
	INT  nElement;
	INT  nElements;

	for (nElement = 0, nElements = (INT)GetSize(), nCount = 0; nElement < nElements; nElement++)
	{
		if (GetAt(nElement)->GetName() == pszName)
		{
			if (nCount++ == nOccurrence) break;
			continue;
		}
	}
	return((nOccurrence >= 0) ? ((nElement < nElements) ? nElement : -1) : nCount);
}
INT CDatabaseTCFunction::Find(LPCTSTR pszName, INT nBytePos, INT nBitPos) CONST
{
	INT  nElement;
	INT  nElements;

	for (nElement = 0, nElements = (INT)GetSize(); nElement < nElements; nElement++)
	{
		if (GetAt(nElement)->GetName() == pszName  &&  GetAt(nElement)->GetBytePos() == nBytePos  &&  GetAt(nElement)->GetBitPos() == nBitPos) break;
		continue;
	}
	return((nElement < nElements) ? nElement : -1);
}
INT CDatabaseTCFunction::Find(INT nBytePos, INT nBitPos) CONST
{
	INT  nElement;
	INT  nElements;

	for (nElement = 0, nElements = (INT)GetSize(); nElement < nElements; nElement++)
	{
		if (GetAt(nElement)->GetBytePos() == nBytePos  &&  GetAt(nElement)->GetBitPos() == nBitPos) break;
		continue;
	}
	return((nElement < nElements) ? nElement : -1);
}

CDatabaseTCFunctionElement *CDatabaseTCFunction::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCFunctionElement *)CPtrArray::GetAt(nIndex) : (CDatabaseTCFunctionElement *)NULL);
}

CDatabaseTCFunctionElement *CDatabaseTCFunction::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCFunctionElement *)CPtrArray::GetAt(nIndex) : (CDatabaseTCFunctionElement *)NULL);
}

VOID CDatabaseTCFunction::RemoveAll()
{
	INT  nElement;
	INT  nElements;
	CDatabaseTCFunctionElement  *pElement;

	for (nElement = 0, nElements = (INT)GetSize(), m_szParameterSets.RemoveAll(); nElement < nElements; nElement++)
	{
		if ((pElement = GetAt(nElement))) delete pElement;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCFunction::Copy(CONST CDatabaseTCFunction *pFunction)
{
	INT  nElement;
	INT  nElements;
	CDatabaseTCFunctionElement  *pElement;

	for (nElement = 0, nElements = (INT)pFunction->GetSize(), RemoveAll(), m_szName = pFunction->m_szName, m_szDescription[0] = pFunction->m_szDescription[0], m_szDescription[1] = pFunction->m_szDescription[1], m_szDetails = pFunction->m_szDetails, m_nAttributes = pFunction->m_nAttributes, m_szTCPacket = pFunction->m_szTCPacket, m_nTCPacketRef = pFunction->m_nTCPacketRef, m_nAPID[0] = pFunction->m_nAPID[0], m_nAPID[1] = pFunction->m_nAPID[1], m_nTCType = pFunction->m_nTCType, m_nTCID = pFunction->m_nTCID, m_nMapID = pFunction->m_nMapID, m_szSubSystem[0] = pFunction->m_szSubSystem[0], m_szSubSystem[1] = pFunction->m_szSubSystem[1], m_szEquipment[0] = pFunction->m_szEquipment[0], m_szEquipment[1] = pFunction->m_szEquipment[1], m_szOperationalInfo = pFunction->m_szOperationalInfo, m_szValidityConditions = pFunction->m_szValidityConditions, m_szAssociatedTelecommands = pFunction->m_szAssociatedTelecommands, m_szComplementaryTelecommands = pFunction->m_szComplementaryTelecommands, m_szDestinationSubSchedule = pFunction->m_szDestinationSubSchedule, m_szMissionPlannerEvent = pFunction->m_szMissionPlannerEvent, m_szVerifGroup[0] = pFunction->m_szVerifGroup[0], m_nVerifGroupRef[0] = pFunction->m_nVerifGroupRef[0], m_szVerifGroup[1] = pFunction->m_szVerifGroup[1], m_nVerifGroupRef[1] = pFunction->m_nVerifGroupRef[1], m_nAckFlags = pFunction->m_nAckFlags, m_szParameterSets.Copy(pFunction->m_szParameterSets), m_bInitializedValues = pFunction->m_bInitializedValues, m_nStatus = pFunction->m_nStatus; nElement < nElements; nElement++)
	{
		if ((pElement = new CDatabaseTCFunctionElement))
		{
			pElement->Copy(pFunction->GetAt(nElement));
			InsertAt(nElement, pElement, 1);
			continue;
		}
		break;
	}
	return((nElement == nElements) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunction::Compare(CONST CDatabaseTCFunction *pFunction) CONST
{
	INT  nSet[2];
	INT  nSets[2];
	INT  nElement;
	INT  nElements;
	CDatabaseTCFunctionElement  *pElement;

	for (nElement = 0, nElements = (pFunction->m_szName == m_szName && pFunction->m_szDescription[0] == m_szDescription[0] && pFunction->m_szDescription[1] == m_szDescription[1] && pFunction->m_szDetails == m_szDetails && pFunction->m_nAttributes == m_nAttributes && pFunction->m_szTCPacket == m_szTCPacket && pFunction->m_nTCPacketRef == m_nTCPacketRef && pFunction->m_nAPID[0] == m_nAPID[0] && pFunction->m_nAPID[1] == m_nAPID[1] && pFunction->m_nTCType == m_nTCType && pFunction->m_nTCID == m_nTCID && pFunction->m_nMapID == m_nMapID && pFunction->m_szSubSystem[0] == m_szSubSystem[0] && pFunction->m_szSubSystem[1] == m_szSubSystem[1] && pFunction->m_szEquipment[0] == m_szEquipment[0] && pFunction->m_szEquipment[1] == m_szEquipment[1] && pFunction->m_szOperationalInfo == m_szOperationalInfo && pFunction->m_szValidityConditions == m_szValidityConditions && pFunction->m_szAssociatedTelecommands == m_szAssociatedTelecommands && pFunction->m_szComplementaryTelecommands == m_szComplementaryTelecommands && pFunction->m_szDestinationSubSchedule == m_szDestinationSubSchedule && pFunction->m_szMissionPlannerEvent == m_szMissionPlannerEvent && pFunction->m_szVerifGroup[0] == m_szVerifGroup[0] && pFunction->m_nVerifGroupRef[0] == m_nVerifGroupRef[0] && pFunction->m_szVerifGroup[1] == m_szVerifGroup[1] && pFunction->m_nVerifGroupRef[1] == m_nVerifGroupRef[1] && pFunction->m_nAckFlags == m_nAckFlags && pFunction->m_bInitializedValues == m_bInitializedValues && pFunction->m_nStatus == m_nStatus && pFunction->GetSize() == GetSize()) ? (INT)GetSize() : -1; nElement < nElements; nElement++)
	{
		if ((pElement = pFunction->GetAt(nElement)) && pElement->Compare(GetAt(nElement))) continue;
		break;
	}
	for (nSet[0] = 0, nSets[0] = (pFunction->m_szParameterSets.GetSize() == m_szParameterSets.GetSize()) ? (INT)pFunction->m_szParameterSets.GetSize() : -1; nSet[0] < nSets[0]; nSet[0]++)
	{
		for (nSet[1] = 0, nSets[1] = (INT)m_szParameterSets.GetSize(); nSet[1] < nSets[1]; nSet[1]++)
		{
			if (pFunction->m_szParameterSets.GetAt(nSet[0]) == m_szParameterSets.GetAt(nSet[1])) break;
			continue;
		}
		if (nSet[1] == nSets[1]) break;
	}
	return((nElement == nElements  &&  nSet[0] == nSets[0]) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunction::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nElement;
	INT  nElements;
	INT  nParameterSet;
	INT  nParameterSets;
	CByteArray  nElementsData[2];
	CByteArray  nParameterSetsData;
	CDatabaseTCFunctionElement  *pElement;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDetails = (m_szDetails.GetLength() + 1)*sizeof(TCHAR);
	sData.cbSubSystem[0] = (m_szSubSystem[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbSubSystem[1] = (m_szSubSystem[1].GetLength() + 1)*sizeof(TCHAR);
	sData.cbEquipment[0] = (m_szEquipment[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbEquipment[1] = (m_szEquipment[1].GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription[0] = (m_szDescription[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription[1] = (m_szDescription[1].GetLength() + 1)*sizeof(TCHAR);
	sData.cbDestinationSubSchedule = (m_szDestinationSubSchedule.GetLength() + 1)*sizeof(TCHAR);
	sData.cbMissionPlannerEvent = (m_szMissionPlannerEvent.GetLength() + 1)*sizeof(TCHAR);
	sData.cbTCPacket = (!bBinary) ? ((m_szTCPacket.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbVerifGroup[0] = (!bBinary) ? ((m_szVerifGroup[0].GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbVerifGroup[1] = (!bBinary) ? ((m_szVerifGroup[1].GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbOperationalInfo = (!bBinary) ? ((m_szOperationalInfo.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbValidityConditions = (!bBinary) ? ((m_szValidityConditions.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbAssociatedTelecommands = (!bBinary) ? ((m_szAssociatedTelecommands.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbComplementaryTelecommands = (!bBinary) ? ((m_szComplementaryTelecommands.GetLength() + 1)*sizeof(TCHAR)) : 0;
	for (nParameterSet = 0, nParameterSets = (INT)m_szParameterSets.GetSize(), sData.nAttributes = m_nAttributes, sData.nAPID[0] = m_nAPID[0], sData.nAPID[1] = m_nAPID[1], sData.nTCType = m_nTCType, sData.nTCID = m_nTCID, sData.nMapID = m_nMapID, sData.nTCPacketRef = (bBinary) ? m_nTCPacketRef : -1, sData.nVerifGroupRef[0] = (bBinary) ? m_nVerifGroupRef[0] : -1, sData.nVerifGroupRef[1] = (bBinary) ? m_nVerifGroupRef[1] : -1, sData.nAckFlags = m_nAckFlags, sData.bInitializedValues = m_bInitializedValues, sData.nStatus = m_nStatus, sData.bBinary = bBinary, sData.cbParameterSets = 0; nParameterSet < nParameterSets; nParameterSet++, sData.cbParameterSets += cbData)
	{
		nParameterSetsData.SetSize(sData.cbParameterSets + (cbData = (m_szParameterSets.GetAt(nParameterSet).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nParameterSetsData.GetData() + sData.cbParameterSets, (LPCTSTR)m_szParameterSets.GetAt(nParameterSet), cbData);
	}
	for (nElement = 0, nElements = (INT)GetSize(); nElement < nElements; nElement++)
	{
		if ((pElement = GetAt(nElement)) && pElement->Map(nElementsData[1], bBinary) && nElementsData[0].Append(nElementsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription[0] + sData.cbDescription[1] + sData.cbDetails + sData.cbTCPacket + (sData.cbElements = (INT)(nElementsData[0].GetSize()*sizeof(BYTE))) + sData.cbSubSystem[0] + sData.cbSubSystem[1] + sData.cbEquipment[0] + sData.cbEquipment[1] + sData.cbVerifGroup[0] + sData.cbVerifGroup[1] + sData.cbOperationalInfo + sData.cbValidityConditions + sData.cbMissionPlannerEvent + sData.cbDestinationSubSchedule + sData.cbAssociatedTelecommands + sData.cbComplementaryTelecommands + sData.cbParameterSets)); nInfo.GetSize() == sData.cbSize && nElement == nElements; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription[0], sData.cbDescription[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription[0]), (LPCTSTR)m_szDescription[1], sData.cbDescription[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription[1]), (LPCTSTR)m_szDetails, sData.cbDetails);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDetails), (LPCTSTR)m_szTCPacket, sData.cbTCPacket);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTCPacket), (LPCTSTR)m_szSubSystem[0], sData.cbSubSystem[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbSubSystem[0]), (LPCTSTR)m_szSubSystem[1], sData.cbSubSystem[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbSubSystem[1]), (LPCTSTR)m_szEquipment[0], sData.cbEquipment[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbEquipment[0]), (LPCTSTR)m_szEquipment[1], sData.cbEquipment[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbEquipment[1]), (LPCTSTR)m_szOperationalInfo, sData.cbOperationalInfo);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbOperationalInfo), (LPCTSTR)m_szValidityConditions, sData.cbValidityConditions);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbValidityConditions), (LPCTSTR)m_szAssociatedTelecommands, sData.cbAssociatedTelecommands);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbAssociatedTelecommands), (LPCTSTR)m_szComplementaryTelecommands, sData.cbComplementaryTelecommands);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbComplementaryTelecommands), (LPCTSTR)m_szDestinationSubSchedule, sData.cbDestinationSubSchedule);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDestinationSubSchedule), (LPCTSTR)m_szMissionPlannerEvent, sData.cbMissionPlannerEvent);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbMissionPlannerEvent), (LPCTSTR)m_szVerifGroup[0], sData.cbVerifGroup[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbVerifGroup[0]), (LPCTSTR)m_szVerifGroup[1], sData.cbVerifGroup[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbVerifGroup[1]), nParameterSetsData.GetData(), sData.cbParameterSets);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbParameterSets), nElementsData[0].GetData(), sData.cbElements);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCFunction::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbElement;
	INT  cbElements;
	INT  cbParameterSet;
	INT  cbParameterSets;
	CByteArray  nElementsData[2];
	CByteArray  nParameterSetsData;
	CDatabaseTCFunctionElement  *pElement;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && nInfo.GetSize() == sizeof(DATA) + sData.cbName + sData.cbDescription[0] + sData.cbDescription[1] + sData.cbDetails + sData.cbTCPacket + sData.cbSubSystem[0] + sData.cbSubSystem[1] + sData.cbEquipment[0] + sData.cbEquipment[1] + sData.cbOperationalInfo + sData.cbValidityConditions + sData.cbAssociatedTelecommands + sData.cbComplementaryTelecommands + sData.cbDestinationSubSchedule + sData.cbMissionPlannerEvent + sData.cbVerifGroup[0] + sData.cbVerifGroup[1] + sData.cbParameterSets + sData.cbElements && sData.cbName > 0 && sData.cbDescription[0] > 0 && sData.cbDescription[1] > 0 && sData.cbDetails > 0 && sData.cbTCPacket >= 0 && sData.cbSubSystem[0] > 0 && sData.cbSubSystem[1] > 0 && sData.cbEquipment[0] > 0 && sData.cbEquipment[1] > 0 && sData.cbOperationalInfo >= 0 && sData.cbValidityConditions >= 0 && sData.cbAssociatedTelecommands >= 0 && sData.cbComplementaryTelecommands >= 0 && sData.cbDestinationSubSchedule > 0 && sData.cbMissionPlannerEvent > 0 && sData.cbVerifGroup[0] >= 0 && sData.cbVerifGroup[1] >= 0 && sData.cbParameterSets >= 0 && sData.cbElements >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szDescription[0].GetBufferSetLength(STRINGCHARS(sData.cbDescription[0])), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription[0]));
		CopyMemory(m_szDescription[1].GetBufferSetLength(STRINGCHARS(sData.cbDescription[1])), nInfo.GetData() + (cbData = cbData + sData.cbDescription[0]), STRINGBYTES(sData.cbDescription[1]));
		CopyMemory(m_szDetails.GetBufferSetLength(STRINGCHARS(sData.cbDetails)), nInfo.GetData() + (cbData = cbData + sData.cbDescription[1]), STRINGBYTES(sData.cbDetails));
		CopyMemory(m_szTCPacket.GetBufferSetLength(STRINGCHARS(sData.cbTCPacket)), nInfo.GetData() + (cbData = cbData + sData.cbDetails), STRINGBYTES(sData.cbTCPacket));
		CopyMemory(m_szSubSystem[0].GetBufferSetLength(STRINGCHARS(sData.cbSubSystem[0])), nInfo.GetData() + (cbData = cbData + sData.cbTCPacket), STRINGBYTES(sData.cbSubSystem[0]));
		CopyMemory(m_szSubSystem[1].GetBufferSetLength(STRINGCHARS(sData.cbSubSystem[1])), nInfo.GetData() + (cbData = cbData + sData.cbSubSystem[0]), STRINGBYTES(sData.cbSubSystem[1]));
		CopyMemory(m_szEquipment[0].GetBufferSetLength(STRINGCHARS(sData.cbEquipment[0])), nInfo.GetData() + (cbData = cbData + sData.cbSubSystem[1]), STRINGBYTES(sData.cbEquipment[0]));
		CopyMemory(m_szEquipment[1].GetBufferSetLength(STRINGCHARS(sData.cbEquipment[1])), nInfo.GetData() + (cbData = cbData + sData.cbEquipment[0]), STRINGBYTES(sData.cbEquipment[1]));
		CopyMemory(m_szOperationalInfo.GetBufferSetLength(STRINGCHARS(sData.cbOperationalInfo)), nInfo.GetData() + (cbData = cbData + sData.cbEquipment[1]), STRINGBYTES(sData.cbOperationalInfo));
		CopyMemory(m_szValidityConditions.GetBufferSetLength(STRINGCHARS(sData.cbValidityConditions)), nInfo.GetData() + (cbData = cbData + sData.cbOperationalInfo), STRINGBYTES(sData.cbValidityConditions));
		CopyMemory(m_szAssociatedTelecommands.GetBufferSetLength(STRINGCHARS(sData.cbAssociatedTelecommands)), nInfo.GetData() + (cbData = cbData + sData.cbValidityConditions), STRINGBYTES(sData.cbAssociatedTelecommands));
		CopyMemory(m_szComplementaryTelecommands.GetBufferSetLength(STRINGCHARS(sData.cbComplementaryTelecommands)), nInfo.GetData() + (cbData = cbData + sData.cbAssociatedTelecommands), STRINGBYTES(sData.cbComplementaryTelecommands));
		CopyMemory(m_szDestinationSubSchedule.GetBufferSetLength(STRINGCHARS(sData.cbDestinationSubSchedule)), nInfo.GetData() + (cbData = cbData + sData.cbComplementaryTelecommands), STRINGBYTES(sData.cbDestinationSubSchedule));
		CopyMemory(m_szMissionPlannerEvent.GetBufferSetLength(STRINGCHARS(sData.cbMissionPlannerEvent)), nInfo.GetData() + (cbData = cbData + sData.cbDestinationSubSchedule), STRINGBYTES(sData.cbMissionPlannerEvent));
		CopyMemory(m_szVerifGroup[0].GetBufferSetLength(STRINGCHARS(sData.cbVerifGroup[0])), nInfo.GetData() + (cbData = cbData + sData.cbMissionPlannerEvent), STRINGBYTES(sData.cbVerifGroup[0]));
		CopyMemory(m_szVerifGroup[1].GetBufferSetLength(STRINGCHARS(sData.cbVerifGroup[1])), nInfo.GetData() + (cbData = cbData + sData.cbVerifGroup[0]), STRINGBYTES(sData.cbVerifGroup[1]));
		for (nParameterSetsData.SetSize(sData.cbParameterSets), CopyMemory(nParameterSetsData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbVerifGroup[1]), sData.cbParameterSets), m_nAttributes = sData.nAttributes, m_nAPID[0] = sData.nAPID[0], m_nAPID[1] = sData.nAPID[1], m_nTCType = sData.nTCType, m_nTCID = sData.nTCID, m_nMapID = sData.nMapID, m_nTCPacketRef = sData.nTCPacketRef, m_nVerifGroupRef[0] = sData.nVerifGroupRef[0], m_nVerifGroupRef[1] = sData.nVerifGroupRef[1], m_nAckFlags = sData.nAckFlags, m_bInitializedValues = sData.bInitializedValues, m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), m_szDescription[0].ReleaseBuffer(), m_szDescription[1].ReleaseBuffer(), m_szDetails.ReleaseBuffer(), m_szTCPacket.ReleaseBuffer(), m_szSubSystem[0].ReleaseBuffer(), m_szSubSystem[1].ReleaseBuffer(), m_szEquipment[0].ReleaseBuffer(), m_szEquipment[1].ReleaseBuffer(), m_szOperationalInfo.ReleaseBuffer(), m_szValidityConditions.ReleaseBuffer(), m_szAssociatedTelecommands.ReleaseBuffer(), m_szComplementaryTelecommands.ReleaseBuffer(), m_szDestinationSubSchedule.ReleaseBuffer(), m_szMissionPlannerEvent.ReleaseBuffer(), m_szVerifGroup[0].ReleaseBuffer(), m_szVerifGroup[1].ReleaseBuffer(), m_szParameterSets.RemoveAll(), RemoveAll(), cbParameterSet = cbParameterSets = 0; cbParameterSets < sData.cbParameterSets; cbParameterSets += (cbParameterSet = (m_szParameterSets.GetAt(m_szParameterSets.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
		{
			m_szParameterSets.Add((LPCTSTR)(nParameterSetsData.GetData() + cbParameterSets));
			continue;
		}
		for (nElementsData[0].SetSize(sData.cbElements), CopyMemory(nElementsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbParameterSets), sData.cbElements), cbElement = cbElements = 0; cbElements < sData.cbElements; cbElements += cbElement)
		{
			for (CopyMemory(&cbElement, nElementsData[0].GetData() + cbElements, sizeof(cbElement)), nElementsData[1].SetSize(max(min(cbElement, nElementsData[0].GetSize() - cbElements), 0)); nElementsData[1].GetSize() >= 0; )
			{
				CopyMemory(nElementsData[1].GetData(), nElementsData[0].GetData() + cbElements, nElementsData[1].GetSize());
				break;
			}
			if ((pElement = new CDatabaseTCFunctionElement))
			{
				if (pElement->Unmap(nElementsData[1], bBinary) && Add(pElement) >= 0) continue;
				delete pElement;
			}
			break;
		}
		return((cbElements == sData.cbElements) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTCFunction::FindIndex(LPCTSTR pszName, INT nBytePos, INT nBitPos) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	INT  nBitOffset[2];
	CDatabaseTCFunctionElement  *pElement;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2, nBitOffset[0] = 8 * nBytePos + nBitPos; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pElement = GetAt(nIndex[0]))) ? (((nIndex[1] = ((nBitOffset[1] = 8 * pElement->GetBytePos() + pElement->GetBitPos()) == nBitOffset[0] && pElement->GetName().Compare(pszName) <= 0) || nBitOffset[0] > nBitOffset[1])) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return nIndex[0];
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCFunctions

CDatabaseTCFunctions::CDatabaseTCFunctions() : CPtrArray()
{
	return;
}

CDatabaseTCFunctions::~CDatabaseTCFunctions()
{
	RemoveAll();
}

INT CDatabaseTCFunctions::Add(CDatabaseTCFunction *pFunction)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pFunction->GetName(), TRUE)) >= 0) InsertAt(nIndex, pFunction, 1);
	return nIndex;
}

INT CDatabaseTCFunctions::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTCFunction *CDatabaseTCFunctions::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCFunction *)CPtrArray::GetAt(nIndex) : (CDatabaseTCFunction *)NULL);
}

CDatabaseTCFunction *CDatabaseTCFunctions::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCFunction *)CPtrArray::GetAt(nIndex) : (CDatabaseTCFunction *)NULL);
}

VOID CDatabaseTCFunctions::RemoveAll()
{
	INT  nFunction;
	INT  nFunctions;
	CDatabaseTCFunction  *pFunction;

	for (nFunction = 0, nFunctions = (INT)GetSize(); nFunction < nFunctions; nFunction++)
	{
		if ((pFunction = GetAt(nFunction))) delete pFunction;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCFunctions::Copy(CONST CDatabaseTCFunctions *pFunctions)
{
	INT  nFunction;
	INT  nFunctions;
	CDatabaseTCFunction  *pFunction;

	for (nFunction = 0, nFunctions = (INT)pFunctions->GetSize(), RemoveAll(); nFunction < nFunctions; nFunction++)
	{
		if ((pFunction = new CDatabaseTCFunction))
		{
			pFunction->Copy(pFunctions->GetAt(nFunction));
			InsertAt(nFunction, pFunction, 1);
			continue;
		}
		break;
	}
	return((nFunction == nFunctions) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunctions::Compare(CONST CDatabaseTCFunctions *pFunctions) CONST
{
	INT  nFunction;
	INT  nFunctions;

	for (nFunction = 0, nFunctions = (pFunctions->GetSize() == GetSize()) ? (INT)GetSize() : -1; nFunction < nFunctions; nFunction++)
	{
		if (!pFunctions->GetAt(nFunction)->Compare(GetAt(nFunction))) break;
		continue;
	}
	return((nFunction == nFunctions) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunctions::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nFunction;
	INT  nFunctions;
	CByteArray  nFunctionsData;
	CDatabaseTCFunction  *pFunction;

	for (nFunction = 0, nFunctions = (INT)GetSize(), nInfo.RemoveAll(); nFunction < nFunctions; nFunction++)
	{
		if ((pFunction = GetAt(nFunction)) && pFunction->Map(nFunctionsData, bBinary) && nInfo.Append(nFunctionsData) >= 0) continue;
		break;
	}
	return((nFunction == nFunctions) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunctions::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbFunction;
	INT  cbFunctions;
	CByteArray  nFunctionsData;
	CDatabaseTCFunction  *pFunction;

	for (cbFunctions = 0, RemoveAll(); cbFunctions < nInfo.GetSize(); cbFunctions += cbFunction)
	{
		for (CopyMemory(&cbFunction, nInfo.GetData() + cbFunctions, sizeof(cbFunction)), nFunctionsData.SetSize(max(min(cbFunction, nInfo.GetSize() - cbFunctions), 0)); nFunctionsData.GetSize() >= 0; )
		{
			CopyMemory(nFunctionsData.GetData(), nInfo.GetData() + cbFunctions, nFunctionsData.GetSize());
			break;
		}
		if ((pFunction = new CDatabaseTCFunction))
		{
			if (pFunction->Unmap(nFunctionsData, bBinary) && Add(pFunction) >= 0) continue;
			delete pFunction;
		}
		break;
	}
	return((cbFunctions == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCFunctions::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCFunction  *pFunction;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pFunction = GetAt(nIndex[0]))) ? ((nIndex[1] = (pFunction->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pFunction = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pFunction->GetName() == pszName) || (bInsert && (((pFunction = GetAt(max(nIndex[0] - 1, 0))) && pFunction->GetName() != pszName && (pFunction = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pFunction->GetName() != pszName) || !GetSize()) && lstrlen(pszName) > 0)) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCFunctionBlockElement

CDatabaseTCFunctionBlockElement::CDatabaseTCFunctionBlockElement() : CObject()
{
	m_nAttributes = 0;
}

VOID CDatabaseTCFunctionBlockElement::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCFunctionBlockElement::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCFunctionBlockElement::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTCFunctionBlockElement::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCFunctionBlockElement::Copy(CONST CDatabaseTCFunctionBlockElement *pFunctionBlockElement)
{
	m_szName = pFunctionBlockElement->m_szName;
	m_nAttributes = pFunctionBlockElement->m_nAttributes;
}

BOOL CDatabaseTCFunctionBlockElement::Compare(CONST CDatabaseTCFunctionBlockElement *pFunctionBlockElement) CONST
{
	return((pFunctionBlockElement->m_szName == m_szName  &&  pFunctionBlockElement->m_nAttributes == m_nAttributes) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunctionBlockElement::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName)), sData.nAttributes = m_nAttributes, sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCFunctionBlockElement::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName && sData.cbName > 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		m_nAttributes = sData.nAttributes;
		m_szName.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCFunctionBlock

CDatabaseTCFunctionBlock::CDatabaseTCFunctionBlock() : CPtrArray()
{
	m_nAttributes = 0;
	m_nOffset[0] = m_nOffset[1] = m_nOffset[2] = 0;
	m_nLength[0] = m_nLength[1] = m_nLength[2] = 0;
	m_nStatus = TCFUNCTIONBLOCK_RECORDSTATUS_NONE;
}

CDatabaseTCFunctionBlock::~CDatabaseTCFunctionBlock()
{
	RemoveAll();
}

VOID CDatabaseTCFunctionBlock::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCFunctionBlock::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCFunctionBlock::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTCFunctionBlock::GetAttributes() CONST
{
	return m_nAttributes;
}

BOOL CDatabaseTCFunctionBlock::SetLocation(UINT nType, INT nOffset, INT nLength)
{
	if (((m_nAttributes & TCFUNCTIONBLOCK_TYPE_NI) != TCFUNCTIONBLOCK_TYPE_NI  &&  nType == TCFUNCTIONBLOCK_TYPE_LI) || ((m_nAttributes & TCFUNCTIONBLOCK_TYPE_LI) != TCFUNCTIONBLOCK_TYPE_LI  &&  nType == TCFUNCTIONBLOCK_TYPE_NI))
	{
		m_nAttributes |= nType;
		m_nOffset[0] = nOffset;
		m_nLength[0] = nLength;
		return TRUE;
	}
	if (((m_nAttributes & TCFUNCTIONBLOCK_TYPE_NTT) != TCFUNCTIONBLOCK_TYPE_NTT  &&  nType == TCFUNCTIONBLOCK_TYPE_LTT) || ((m_nAttributes & TCFUNCTIONBLOCK_TYPE_LTT) != TCFUNCTIONBLOCK_TYPE_LTT  &&  nType == TCFUNCTIONBLOCK_TYPE_NTT))
	{
		m_nAttributes |= nType;
		m_nOffset[1] = nOffset;
		m_nLength[1] = nLength;
		return TRUE;
	}
	if (((m_nAttributes & TCFUNCTIONBLOCK_TYPE_N2S) != TCFUNCTIONBLOCK_TYPE_N2S  &&  nType == TCFUNCTIONBLOCK_TYPE_L2S) || ((m_nAttributes & TCFUNCTIONBLOCK_TYPE_L2S) != TCFUNCTIONBLOCK_TYPE_L2S  &&  nType == TCFUNCTIONBLOCK_TYPE_N2S))
	{
		m_nAttributes |= nType;
		m_nOffset[2] = nOffset;
		m_nLength[2] = nLength;
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCFunctionBlock::GetLocation(UINT nType, INT &nOffset, INT &nLength) CONST
{
	if (m_nAttributes & nType)
	{
		if (nType == TCFUNCTIONBLOCK_TYPE_LI || nType == TCFUNCTIONBLOCK_TYPE_NI)
		{
			nOffset = m_nOffset[0];
			nLength = m_nLength[0];
			return TRUE;
		}
		if (nType == TCFUNCTIONBLOCK_TYPE_LTT || nType == TCFUNCTIONBLOCK_TYPE_NTT)
		{
			nOffset = m_nOffset[1];
			nLength = m_nLength[1];
			return TRUE;
		}
		if (nType == TCFUNCTIONBLOCK_TYPE_L2S || nType == TCFUNCTIONBLOCK_TYPE_N2S)
		{
			nOffset = m_nOffset[2];
			nLength = m_nLength[2];
			return TRUE;
		}
	}
	return FALSE;
}

VOID CDatabaseTCFunctionBlock::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTCFunctionBlock::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseTCFunctionBlock::Add(CDatabaseTCFunctionBlockElement *pFunctionBlockElement)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pFunctionBlockElement->GetName(), TRUE)) >= 0) InsertAt(nIndex, pFunctionBlockElement, 1);
	return nIndex;
}

INT CDatabaseTCFunctionBlock::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTCFunctionBlockElement *CDatabaseTCFunctionBlock::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCFunctionBlockElement *)CPtrArray::GetAt(nIndex) : (CDatabaseTCFunctionBlockElement *)NULL);
}

CDatabaseTCFunctionBlockElement *CDatabaseTCFunctionBlock::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCFunctionBlockElement *)CPtrArray::GetAt(nIndex) : (CDatabaseTCFunctionBlockElement *)NULL);
}

VOID CDatabaseTCFunctionBlock::RemoveAll()
{
	INT  nElement;
	INT  nElements;
	CDatabaseTCFunctionBlockElement  *pBlockElement;

	for (nElement = 0, nElements = (INT)GetSize(); nElement < nElements; nElement++)
	{
		if ((pBlockElement = GetAt(nElement))) delete pBlockElement;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCFunctionBlock::Copy(CONST CDatabaseTCFunctionBlock *pFunctionBlock)
{
	INT  nElement;
	INT  nElements;
	CDatabaseTCFunctionBlockElement  *pBlockElement;

	for (nElement = 0, nElements = (INT)pFunctionBlock->GetSize(), m_szName = pFunctionBlock->m_szName, m_nAttributes = pFunctionBlock->m_nAttributes, m_nOffset[0] = pFunctionBlock->m_nOffset[0], m_nOffset[1] = pFunctionBlock->m_nOffset[1], m_nOffset[2] = pFunctionBlock->m_nOffset[2], m_nLength[0] = pFunctionBlock->m_nLength[0], m_nLength[1] = pFunctionBlock->m_nLength[1], m_nLength[2] = pFunctionBlock->m_nLength[2], m_nStatus = pFunctionBlock->m_nStatus, RemoveAll(); nElement < nElements; nElement++)
	{
		if ((pBlockElement = new CDatabaseTCFunctionBlockElement))
		{
			pBlockElement->Copy(pFunctionBlock->GetAt(nElement));
			InsertAt(nElement, pBlockElement, 1);
			continue;
		}
		break;
	}
	return((nElement == nElements) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunctionBlock::Compare(CONST CDatabaseTCFunctionBlock *pFunctionBlock) CONST
{
	INT  nElement;
	INT  nElements;
	CDatabaseTCFunctionBlockElement  *pBlockElement;

	for (nElement = 0, nElements = (pFunctionBlock->m_szName == m_szName && pFunctionBlock->m_nAttributes == m_nAttributes && pFunctionBlock->m_nOffset[0] == m_nOffset[0] && pFunctionBlock->m_nOffset[1] == m_nOffset[1] && pFunctionBlock->m_nOffset[2] == m_nOffset[2] && pFunctionBlock->m_nLength[0] == m_nLength[0] && pFunctionBlock->m_nLength[1] == m_nLength[1] && pFunctionBlock->m_nLength[2] == m_nLength[2] && pFunctionBlock->m_nStatus == m_nStatus && pFunctionBlock->GetSize() == GetSize()) ? (INT)GetSize() : -1; nElement < nElements; nElement++)
	{
		if ((pBlockElement = pFunctionBlock->GetAt(nElement)) && pBlockElement->Compare(GetAt(nElement))) continue;
		break;
	}
	return((nElement == nElements) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunctionBlock::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nElement;
	INT  nElements;
	CByteArray  nElementsData[2];
	CDatabaseTCFunctionBlockElement  *pBlockElement;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	for (nElement = 0, nElements = (INT)GetSize(), sData.nAttributes = m_nAttributes, sData.nOffset[0] = m_nOffset[0], sData.nOffset[1] = m_nOffset[1], sData.nOffset[2] = m_nOffset[2], sData.nLength[0] = m_nLength[0], sData.nLength[1] = m_nLength[1], sData.nLength[2] = m_nLength[2], sData.nStatus = m_nStatus, sData.bBinary = bBinary; nElement < nElements; nElement++)
	{
		if ((pBlockElement = GetAt(nElement)) && pBlockElement->Map(nElementsData[1], bBinary) && nElementsData[0].Append(nElementsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + (sData.cbElements = (INT)(nElementsData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nElement == nElements; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), nElementsData[0].GetData(), sData.cbElements);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCFunctionBlock::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbElement;
	INT  cbElements;
	CByteArray  nElementsData[2];
	CDatabaseTCFunctionBlockElement  *pBlockElement;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && nInfo.GetSize() == sizeof(DATA) + sData.cbName + sData.cbElements && sData.cbName > 0 && sData.cbElements >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		for (nElementsData[0].SetSize(sData.cbElements), CopyMemory(nElementsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbName), sData.cbElements), m_nAttributes = sData.nAttributes, m_nOffset[0] = sData.nOffset[0], m_nOffset[1] = sData.nOffset[1], m_nOffset[2] = sData.nOffset[2], m_nLength[0] = sData.nLength[0], m_nLength[1] = sData.nLength[1], m_nLength[2] = sData.nLength[2], m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), RemoveAll(), cbElement = cbElements = 0; cbElements < sData.cbElements; cbElements += cbElement)
		{
			for (CopyMemory(&cbElement, nElementsData[0].GetData() + cbElements, sizeof(cbElement)), nElementsData[1].SetSize(max(min(cbElement, nElementsData[0].GetSize() - cbElements), 0)); nElementsData[1].GetSize() >= 0; )
			{
				CopyMemory(nElementsData[1].GetData(), nElementsData[0].GetData() + cbElements, nElementsData[1].GetSize());
				break;
			}
			if ((pBlockElement = new CDatabaseTCFunctionBlockElement))
			{
				if (pBlockElement->Unmap(nElementsData[1], bBinary) && Add(pBlockElement) >= 0) continue;
				delete pBlockElement;
			}
			break;
		}
		return((cbElements == sData.cbElements) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTCFunctionBlock::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCFunctionBlockElement  *pFunctionBlockElement;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pFunctionBlockElement = GetAt(nIndex[0]))) ? ((nIndex[1] = (pFunctionBlockElement->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pFunctionBlockElement = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pFunctionBlockElement->GetName() == pszName) || (bInsert && (((pFunctionBlockElement = GetAt(max(nIndex[0] - 1, 0))) && pFunctionBlockElement->GetName() != pszName && (pFunctionBlockElement = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pFunctionBlockElement->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCFunctionBlocks

CDatabaseTCFunctionBlocks::CDatabaseTCFunctionBlocks() : CPtrArray()
{
	return;
}

CDatabaseTCFunctionBlocks::~CDatabaseTCFunctionBlocks()
{
	RemoveAll();
}

INT CDatabaseTCFunctionBlocks::Add(CDatabaseTCFunctionBlock *pFunctionBlock)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pFunctionBlock->GetName(), TRUE)) >= 0) InsertAt(nIndex, pFunctionBlock, 1);
	return nIndex;
}

INT CDatabaseTCFunctionBlocks::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTCFunctionBlock *CDatabaseTCFunctionBlocks::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCFunctionBlock *)CPtrArray::GetAt(nIndex) : (CDatabaseTCFunctionBlock *)NULL);
}

CDatabaseTCFunctionBlock *CDatabaseTCFunctionBlocks::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCFunctionBlock *)CPtrArray::GetAt(nIndex) : (CDatabaseTCFunctionBlock *)NULL);
}

VOID CDatabaseTCFunctionBlocks::RemoveAll()
{
	INT  nFunctionBlock;
	INT  nFunctionBlocks;
	CDatabaseTCFunctionBlock  *pFunctionBlock;

	for (nFunctionBlock = 0, nFunctionBlocks = (INT)GetSize(); nFunctionBlock < nFunctionBlocks; nFunctionBlock++)
	{
		if ((pFunctionBlock = GetAt(nFunctionBlock))) delete pFunctionBlock;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCFunctionBlocks::Copy(CONST CDatabaseTCFunctionBlocks *pFunctionBlocks)
{
	INT  nFunctionBlock;
	INT  nFunctionBlocks;
	CDatabaseTCFunctionBlock  *pFunctionBlock;

	for (nFunctionBlock = 0, nFunctionBlocks = (INT)pFunctionBlocks->GetSize(), RemoveAll(); nFunctionBlock < nFunctionBlocks; nFunctionBlock++)
	{
		if ((pFunctionBlock = new CDatabaseTCFunctionBlock))
		{
			pFunctionBlock->Copy(pFunctionBlocks->GetAt(nFunctionBlock));
			InsertAt(nFunctionBlock, pFunctionBlock, 1);
			continue;
		}
		break;
	}
	return((nFunctionBlock == nFunctionBlocks) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunctionBlocks::Compare(CONST CDatabaseTCFunctionBlocks *pFunctionBlocks) CONST
{
	INT  nFunctionBlock;
	INT  nFunctionBlocks;

	for (nFunctionBlock = 0, nFunctionBlocks = (pFunctionBlocks->GetSize() == GetSize()) ? (INT)GetSize() : -1; nFunctionBlock < nFunctionBlocks; nFunctionBlock++)
	{
		if (!pFunctionBlocks->GetAt(nFunctionBlock)->Compare(GetAt(nFunctionBlock))) break;
		continue;
	}
	return((nFunctionBlock == nFunctionBlocks) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunctionBlocks::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nFunctionBlock;
	INT  nFunctionBlocks;
	CByteArray  nFunctionBlocksData;
	CDatabaseTCFunctionBlock  *pFunctionBlock;

	for (nFunctionBlock = 0, nFunctionBlocks = (INT)GetSize(), nInfo.RemoveAll(); nFunctionBlock < nFunctionBlocks; nFunctionBlock++)
	{
		if ((pFunctionBlock = GetAt(nFunctionBlock)) && pFunctionBlock->Map(nFunctionBlocksData, bBinary) && nInfo.Append(nFunctionBlocksData) >= 0) continue;
		break;
	}
	return((nFunctionBlock == nFunctionBlocks) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunctionBlocks::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbFunctionBlock;
	INT  cbFunctionBlocks;
	CByteArray  nFunctionBlocksData;
	CDatabaseTCFunctionBlock  *pFunctionBlock;

	for (cbFunctionBlocks = 0, RemoveAll(); cbFunctionBlocks < nInfo.GetSize(); cbFunctionBlocks += cbFunctionBlock)
	{
		for (CopyMemory(&cbFunctionBlock, nInfo.GetData() + cbFunctionBlocks, sizeof(cbFunctionBlock)), nFunctionBlocksData.SetSize(max(min(cbFunctionBlock, nInfo.GetSize() - cbFunctionBlocks), 0)); nFunctionBlocksData.GetSize() >= 0; )
		{
			CopyMemory(nFunctionBlocksData.GetData(), nInfo.GetData() + cbFunctionBlocks, nFunctionBlocksData.GetSize());
			break;
		}
		if ((pFunctionBlock = new CDatabaseTCFunctionBlock))
		{
			if (pFunctionBlock->Unmap(nFunctionBlocksData, bBinary) && Add(pFunctionBlock) >= 0) continue;
			delete pFunctionBlock;
		}
		break;
	}
	return((cbFunctionBlocks == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCFunctionBlocks::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCFunctionBlock  *pFunctionBlock;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pFunctionBlock = GetAt(nIndex[0]))) ? ((nIndex[1] = (pFunctionBlock->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pFunctionBlock = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pFunctionBlock->GetName() == pszName) || (bInsert && (((pFunctionBlock = GetAt(max(nIndex[0] - 1, 0))) && pFunctionBlock->GetName() != pszName && (pFunctionBlock = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pFunctionBlock->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCFunctionRoutingPath

CDatabaseTCFunctionRoutingPath::CDatabaseTCFunctionRoutingPath() : CObject()
{
	m_nAPID = -1;
}

VOID CDatabaseTCFunctionRoutingPath::SetAPID(INT nAPID)
{
	m_nAPID = nAPID;
}

INT CDatabaseTCFunctionRoutingPath::GetAPID() CONST
{
	return m_nAPID;
}

VOID CDatabaseTCFunctionRoutingPath::SetPath(LPCTSTR pszPath)
{
	m_szPath = pszPath;
}

CString CDatabaseTCFunctionRoutingPath::GetPath() CONST
{
	return m_szPath;
}

VOID CDatabaseTCFunctionRoutingPath::Copy(CONST CDatabaseTCFunctionRoutingPath *pFunctionRoutingPath)
{
	m_nAPID = pFunctionRoutingPath->m_nAPID;
	m_szPath = pFunctionRoutingPath->m_szPath;
}

BOOL CDatabaseTCFunctionRoutingPath::Compare(CONST CDatabaseTCFunctionRoutingPath *pFunctionRoutingPath) CONST
{
	return((pFunctionRoutingPath->m_nAPID == m_nAPID  &&  pFunctionRoutingPath->m_szPath == m_szPath) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunctionRoutingPath::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbPath = (m_szPath.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbPath)), sData.nAPID = m_nAPID, sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szPath, sData.cbPath);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCFunctionRoutingPath::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbPath && sData.cbPath > 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szPath.GetBufferSetLength(STRINGCHARS(sData.cbPath)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbPath));
		m_nAPID = sData.nAPID;
		m_szPath.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCFunctionRoutingPaths

CDatabaseTCFunctionRoutingPaths::CDatabaseTCFunctionRoutingPaths() : CPtrArray()
{
	return;
}

CDatabaseTCFunctionRoutingPaths::~CDatabaseTCFunctionRoutingPaths()
{
	RemoveAll();
}

INT CDatabaseTCFunctionRoutingPaths::Add(CDatabaseTCFunctionRoutingPath *pFunctionRoutingPath)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pFunctionRoutingPath->GetAPID(), TRUE)) >= 0) InsertAt(nIndex, pFunctionRoutingPath, 1);
	return nIndex;
}

INT CDatabaseTCFunctionRoutingPaths::Find(INT nAPID) CONST
{
	return FindIndex(nAPID);
}

CDatabaseTCFunctionRoutingPath *CDatabaseTCFunctionRoutingPaths::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCFunctionRoutingPath *)CPtrArray::GetAt(nIndex) : (CDatabaseTCFunctionRoutingPath *)NULL);
}

CDatabaseTCFunctionRoutingPath *CDatabaseTCFunctionRoutingPaths::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCFunctionRoutingPath *)CPtrArray::GetAt(nIndex) : (CDatabaseTCFunctionRoutingPath *)NULL);
}

VOID CDatabaseTCFunctionRoutingPaths::RemoveAll()
{
	INT  nRoutingPath;
	INT  nRoutingPaths;
	CDatabaseTCFunctionRoutingPath  *pRoutingPath;

	for (nRoutingPath = 0, nRoutingPaths = (INT)GetSize(); nRoutingPath < nRoutingPaths; nRoutingPath++)
	{
		if ((pRoutingPath = GetAt(nRoutingPath))) delete pRoutingPath;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCFunctionRoutingPaths::Copy(CONST CDatabaseTCFunctionRoutingPaths *pFunctionRoutingPaths)
{
	INT  nRoutingPath;
	INT  nRoutingPaths;
	CDatabaseTCFunctionRoutingPath  *pRoutingPath;

	for (nRoutingPath = 0, nRoutingPaths = (INT)pFunctionRoutingPaths->GetSize(), RemoveAll(); nRoutingPath < nRoutingPaths; nRoutingPath++)
	{
		if ((pRoutingPath = new CDatabaseTCFunctionRoutingPath))
		{
			pRoutingPath->Copy(pFunctionRoutingPaths->GetAt(nRoutingPath));
			InsertAt(nRoutingPath, pRoutingPath, 1);
			continue;
		}
		break;
	}
	return((nRoutingPath == nRoutingPaths) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunctionRoutingPaths::Compare(CONST CDatabaseTCFunctionRoutingPaths *pFunctionRoutingPaths) CONST
{
	INT  nIndex;
	INT  nRoutingPath;
	INT  nRoutingPaths;
	CDatabaseTCFunctionRoutingPath  *pRoutingPath;

	for (nRoutingPath = 0, nRoutingPaths = (pFunctionRoutingPaths->GetSize() == GetSize()) ? (INT)GetSize() : -1; nRoutingPath < nRoutingPaths; nRoutingPath++)
	{
		if ((pRoutingPath = pFunctionRoutingPaths->GetAt(nRoutingPath)) && (nIndex = Find(pRoutingPath->GetAPID())) >= 0 && pRoutingPath->Compare(GetAt(nIndex))) continue;
		break;
	}
	return((nRoutingPath == nRoutingPaths) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunctionRoutingPaths::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nRoutingPath;
	INT  nRoutingPaths;
	CByteArray  nRoutingPathsData;
	CDatabaseTCFunctionRoutingPath  *pRoutingPath;

	for (nRoutingPath = 0, nRoutingPaths = (INT)GetSize(), nInfo.RemoveAll(); nRoutingPath < nRoutingPaths; nRoutingPath++)
	{
		if ((pRoutingPath = GetAt(nRoutingPath)) && pRoutingPath->Map(nRoutingPathsData, bBinary) && nInfo.Append(nRoutingPathsData) >= 0) continue;
		break;
	}
	return((nRoutingPath == nRoutingPaths) ? TRUE : FALSE);
}

BOOL CDatabaseTCFunctionRoutingPaths::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbRoutingPath;
	INT  cbRoutingPaths;
	CByteArray  nRoutingPathsData;
	CDatabaseTCFunctionRoutingPath  *pRoutingPath;

	for (cbRoutingPaths = 0, RemoveAll(); cbRoutingPaths < nInfo.GetSize(); cbRoutingPaths += cbRoutingPath)
	{
		for (CopyMemory(&cbRoutingPath, nInfo.GetData() + cbRoutingPaths, sizeof(cbRoutingPath)), nRoutingPathsData.SetSize(max(min(cbRoutingPath, nInfo.GetSize() - cbRoutingPaths), 0)); nRoutingPathsData.GetSize() >= 0; )
		{
			CopyMemory(nRoutingPathsData.GetData(), nInfo.GetData() + cbRoutingPaths, nRoutingPathsData.GetSize());
			break;
		}
		if ((pRoutingPath = new CDatabaseTCFunctionRoutingPath))
		{
			if (pRoutingPath->Unmap(nRoutingPathsData, bBinary) && Add(pRoutingPath) >= 0) continue;
			delete pRoutingPath;
		}
		break;
	}
	return((cbRoutingPaths == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCFunctionRoutingPaths::FindIndex(INT nAPID, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCFunctionRoutingPath  *pRoutingPath;

	for (nIndex = nMinIndex = (bInsert) ? (INT)GetSize() : 0, nMaxIndex = (nAPID >= 0) ? (INT)GetSize() : -1; nIndex < nMaxIndex; nIndex++)
	{
		if ((pRoutingPath = GetAt(nIndex)) && pRoutingPath->GetAPID() == nAPID) break;
		continue;
	}
	return(((bInsert || nIndex < nMaxIndex) && nMaxIndex >= 0) ? nIndex : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCParameterValueSet

CDatabaseTCParameterValueSet::CDatabaseTCParameterValueSet() : CPtrArray()
{
	return;
}

CDatabaseTCParameterValueSet::~CDatabaseTCParameterValueSet()
{
	RemoveAll();
}

VOID CDatabaseTCParameterValueSet::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCParameterValueSet::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCParameterValueSet::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCParameterValueSet::GetDescription() CONST
{
	return m_szDescription;
}

INT CDatabaseTCParameterValueSet::Add(CDatabaseTCFunctionElement *pElement)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pElement->GetName(), pElement->GetBytePos(), pElement->GetBitPos())) >= 0) InsertAt(nIndex, pElement, 1);
	return nIndex;
}

INT CDatabaseTCParameterValueSet::Find(LPCTSTR pszName, INT nOccurrence) CONST
{
	INT  nCount;
	INT  nElement;
	INT  nElements;

	for (nElement = 0, nElements = (INT)GetSize(), nCount = 0; nElement < nElements; nElement++)
	{
		if (GetAt(nElement)->GetName() == pszName)
		{
			if (nCount++ == nOccurrence) break;
			continue;
		}
	}
	return((nOccurrence >= 0) ? ((nElement < nElements) ? nElement : -1) : nCount);
}
INT CDatabaseTCParameterValueSet::Find(LPCTSTR pszName, INT nBytePos, INT nBitPos) CONST
{
	INT  nElement;
	INT  nElements;

	for (nElement = 0, nElements = (INT)GetSize(); nElement < nElements; nElement++)
	{
		if (GetAt(nElement)->GetName() == pszName  &&  GetAt(nElement)->GetBytePos() == nBytePos  &&  GetAt(nElement)->GetBitPos() == nBitPos) break;
		continue;
	}
	return((nElement < nElements) ? nElement : -1);
}

CDatabaseTCFunctionElement *CDatabaseTCParameterValueSet::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCFunctionElement *)CPtrArray::GetAt(nIndex) : (CDatabaseTCFunctionElement *)NULL);
}

CDatabaseTCFunctionElement *CDatabaseTCParameterValueSet::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCFunctionElement *)CPtrArray::GetAt(nIndex) : (CDatabaseTCFunctionElement *)NULL);
}

VOID CDatabaseTCParameterValueSet::RemoveAll()
{
	INT  nElement;
	INT  nElements;
	CDatabaseTCFunctionElement  *pElement;

	for (nElement = 0, nElements = (INT)GetSize(); nElement < nElements; nElement++)
	{
		if ((pElement = GetAt(nElement))) delete pElement;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCParameterValueSet::Copy(CONST CDatabaseTCParameterValueSet *pSet)
{
	INT  nElement;
	INT  nElements;
	CDatabaseTCFunctionElement  *pElement;

	for (nElement = 0, nElements = (INT)pSet->GetSize(), m_szName = pSet->m_szName, m_szDescription = pSet->m_szDescription, RemoveAll(); nElement < nElements; nElement++)
	{
		if ((pElement = new CDatabaseTCFunctionElement))
		{
			pElement->Copy(pSet->GetAt(nElement));
			InsertAt(nElement, pElement, 1);
			continue;
		}
		break;
	}
	return((nElement == nElements) ? TRUE : FALSE);
}

BOOL CDatabaseTCParameterValueSet::Compare(CONST CDatabaseTCParameterValueSet *pSet) CONST
{
	INT  nElement;
	INT  nElements;
	CDatabaseTCFunctionElement  *pElement;

	for (nElement = 0, nElements = (pSet->m_szName == m_szName && pSet->m_szDescription == m_szDescription && pSet->GetSize() == GetSize()) ? (INT)GetSize() : -1; nElement < nElements; nElement++)
	{
		if ((pElement = pSet->GetAt(nElement)) && pElement->Compare(GetAt(nElement))) continue;
		break;
	}
	return((nElement == nElements) ? TRUE : FALSE);
}

BOOL CDatabaseTCParameterValueSet::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nElement;
	INT  nElements;
	CByteArray  nElementsData[2];
	CDatabaseTCFunctionElement  *pElement;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nElement = 0, nElements = (INT)GetSize(), sData.bBinary = bBinary; nElement < nElements; nElement++)
	{
		if ((pElement = GetAt(nElement)) && pElement->Map(nElementsData[1], bBinary) && nElementsData[0].Append(nElementsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + (sData.cbElements = (INT)(nElementsData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nElement == nElements; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), nElementsData[0].GetData(), sData.cbElements);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCParameterValueSet::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbElement;
	INT  cbElements;
	CByteArray  nElementsData[2];
	CDatabaseTCFunctionElement  *pElement;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbElements && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbElements >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription));
		for (nElementsData[0].SetSize(sData.cbElements), CopyMemory(nElementsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbDescription), sData.cbElements), m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), RemoveAll(), cbElement = cbElements = 0; cbElements < sData.cbElements; cbElements += cbElement)
		{
			for (CopyMemory(&cbElement, nElementsData[0].GetData() + cbElements, sizeof(cbElement)), nElementsData[1].SetSize(max(min(cbElement, nElementsData[0].GetSize() - cbElements), 0)); nElementsData[1].GetSize() >= 0; )
			{
				CopyMemory(nElementsData[1].GetData(), nElementsData[0].GetData() + cbElements, nElementsData[1].GetSize());
				break;
			}
			if ((pElement = new CDatabaseTCFunctionElement))
			{
				if (pElement->Unmap(nElementsData[1], bBinary) && Add(pElement) >= 0) continue;
				delete pElement;
			}
			break;
		}
		return((cbElements == sData.cbElements) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTCParameterValueSet::FindIndex(LPCTSTR pszName, INT nBytePos, INT nBitPos) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	INT  nBitOffset[2];
	CDatabaseTCFunctionElement  *pElement;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2, nBitOffset[0] = 8 * nBytePos + nBitPos; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pElement = GetAt(nIndex[0]))) ? (((nIndex[1] = ((nBitOffset[1] = 8 * pElement->GetBytePos() + pElement->GetBitPos()) == nBitOffset[0] && pElement->GetName().Compare(pszName) <= 0) || nBitOffset[0] > nBitOffset[1])) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return nIndex[0];
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCParameterValueSets

CDatabaseTCParameterValueSets::CDatabaseTCParameterValueSets() : CPtrArray()
{
	return;
}

CDatabaseTCParameterValueSets::~CDatabaseTCParameterValueSets()
{
	RemoveAll();
}

INT CDatabaseTCParameterValueSets::Add(CDatabaseTCParameterValueSet *pSet)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pSet->GetName(), TRUE)) >= 0) InsertAt(nIndex, pSet, 1);
	return nIndex;
}

INT CDatabaseTCParameterValueSets::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTCParameterValueSet *CDatabaseTCParameterValueSets::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCParameterValueSet *)CPtrArray::GetAt(nIndex) : (CDatabaseTCParameterValueSet *)NULL);
}

CDatabaseTCParameterValueSet *CDatabaseTCParameterValueSets::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCParameterValueSet *)CPtrArray::GetAt(nIndex) : (CDatabaseTCParameterValueSet *)NULL);
}

VOID CDatabaseTCParameterValueSets::RemoveAll()
{
	INT  nSet;
	INT  nSets;
	CDatabaseTCParameterValueSet  *pSet;

	for (nSet = 0, nSets = (INT)GetSize(); nSet < nSets; nSet++)
	{
		if ((pSet = GetAt(nSet))) delete pSet;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCParameterValueSets::Copy(CONST CDatabaseTCParameterValueSets *pSets)
{
	INT  nSet;
	INT  nSets;
	CDatabaseTCParameterValueSet  *pSet;

	for (nSet = 0, nSets = (INT)pSets->GetSize(), RemoveAll(); nSet < nSets; nSet++)
	{
		if ((pSet = new CDatabaseTCParameterValueSet))
		{
			pSet->Copy(pSets->GetAt(nSet));
			InsertAt(nSet, pSet, 1);
			continue;
		}
		break;
	}
	return((nSet == nSets) ? TRUE : FALSE);
}

BOOL CDatabaseTCParameterValueSets::Compare(CONST CDatabaseTCParameterValueSets *pSets) CONST
{
	INT  nSet;
	INT  nSets;

	for (nSet = 0, nSets = (pSets->GetSize() == GetSize()) ? (INT)GetSize() : -1; nSet < nSets; nSet++)
	{
		if (!pSets->GetAt(nSet)->Compare(GetAt(nSet))) break;
		continue;
	}
	return((nSet == nSets) ? TRUE : FALSE);
}

BOOL CDatabaseTCParameterValueSets::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nSet;
	INT  nSets;
	CByteArray  nSetsData;
	CDatabaseTCParameterValueSet  *pSet;

	for (nSet = 0, nSets = (INT)GetSize(), nInfo.RemoveAll(); nSet < nSets; nSet++)
	{
		if ((pSet = GetAt(nSet)) && pSet->Map(nSetsData, bBinary) && nInfo.Append(nSetsData) >= 0) continue;
		break;
	}
	return((nSet == nSets) ? TRUE : FALSE);
}

BOOL CDatabaseTCParameterValueSets::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbSet;
	INT  cbSets;
	CByteArray  nSetsData;
	CDatabaseTCParameterValueSet  *pSet;

	for (cbSets = 0, RemoveAll(); cbSets < nInfo.GetSize(); cbSets += cbSet)
	{
		for (CopyMemory(&cbSet, nInfo.GetData() + cbSets, sizeof(cbSet)), nSetsData.SetSize(max(min(cbSet, nInfo.GetSize() - cbSets), 0)); nSetsData.GetSize() >= 0; )
		{
			CopyMemory(nSetsData.GetData(), nInfo.GetData() + cbSets, nSetsData.GetSize());
			break;
		}
		if ((pSet = new CDatabaseTCParameterValueSet))
		{
			if (pSet->Unmap(nSetsData, bBinary) && Add(pSet) >= 0) continue;
			delete pSet;
		}
		break;
	}
	return((cbSets == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCParameterValueSets::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCParameterValueSet  *pSet;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pSet = GetAt(nIndex[0]))) ? ((nIndex[1] = (pSet->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pSet = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pSet->GetName() == pszName) || (bInsert && (((pSet = GetAt(max(nIndex[0] - 1, 0))) && pSet->GetName() != pszName && (pSet = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pSet->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCParameterSet

CDatabaseTCParameterSet::CDatabaseTCParameterSet() : CPtrArray()
{
	m_nType = 0;
	m_nStatus = TCPARAMETERSET_RECORDSTATUS_NONE;
}

CDatabaseTCParameterSet::~CDatabaseTCParameterSet()
{
	RemoveAll();
}

VOID CDatabaseTCParameterSet::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCParameterSet::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCParameterSet::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCParameterSet::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTCParameterSet::SetType(UINT nType)
{
	m_nType = nType;
}

UINT CDatabaseTCParameterSet::GetType() CONST
{
	return m_nType;
}

VOID CDatabaseTCParameterSet::SetValueSet(LPCTSTR pszSet)
{
	m_szValueSet = pszSet;
}

CString CDatabaseTCParameterSet::GetValueSet() CONST
{
	return m_szValueSet;
}

VOID CDatabaseTCParameterSet::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTCParameterSet::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseTCParameterSet::Add(CDatabaseTCFunctionElement *pElement)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pElement->GetName(), pElement->GetBytePos(), pElement->GetBitPos())) >= 0) InsertAt(nIndex, pElement, 1);
	return nIndex;
}

INT CDatabaseTCParameterSet::Find(LPCTSTR pszName, INT nOccurrence) CONST
{
	INT  nCount;
	INT  nElement;
	INT  nElements;

	for (nElement = 0, nElements = (INT)GetSize(), nCount = 0; nElement < nElements; nElement++)
	{
		if (GetAt(nElement)->GetName() == pszName)
		{
			if (nCount++ == nOccurrence) break;
			continue;
		}
	}
	return((nOccurrence >= 0) ? ((nElement < nElements) ? nElement : -1) : nCount);
}
INT CDatabaseTCParameterSet::Find(LPCTSTR pszName, INT nBytePos, INT nBitPos) CONST
{
	INT  nElement;
	INT  nElements;

	for (nElement = 0, nElements = (INT)GetSize(); nElement < nElements; nElement++)
	{
		if (GetAt(nElement)->GetName() == pszName  &&  GetAt(nElement)->GetBytePos() == nBytePos  &&  GetAt(nElement)->GetBitPos() == nBitPos) break;
		continue;
	}
	return((nElement < nElements) ? nElement : -1);
}

CDatabaseTCFunctionElement *CDatabaseTCParameterSet::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCFunctionElement *)CPtrArray::GetAt(nIndex) : (CDatabaseTCFunctionElement *)NULL);
}

CDatabaseTCFunctionElement *CDatabaseTCParameterSet::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCFunctionElement *)CPtrArray::GetAt(nIndex) : (CDatabaseTCFunctionElement *)NULL);
}

VOID CDatabaseTCParameterSet::RemoveAll()
{
	INT  nElement;
	INT  nElements;
	CDatabaseTCFunctionElement  *pElement;

	for (nElement = 0, nElements = (INT)GetSize(); nElement < nElements; nElement++)
	{
		if ((pElement = GetAt(nElement))) delete pElement;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCParameterSet::Copy(CONST CDatabaseTCParameterSet *pSet)
{
	INT  nElement;
	INT  nElements;
	CDatabaseTCFunctionElement  *pElement;

	for (nElement = 0, nElements = (INT)pSet->GetSize(), RemoveAll(), m_szName = pSet->m_szName, m_szDescription = pSet->m_szDescription, m_nType = pSet->m_nType, m_szValueSet = pSet->m_szValueSet, m_nStatus = pSet->m_nStatus; nElement < nElements; nElement++)
	{
		if ((pElement = new CDatabaseTCFunctionElement))
		{
			pElement->Copy(pSet->GetAt(nElement));
			InsertAt(nElement, pElement, 1);
			continue;
		}
		break;
	}
	return((nElement == nElements) ? TRUE : FALSE);
}

BOOL CDatabaseTCParameterSet::Compare(CONST CDatabaseTCParameterSet *pSet) CONST
{
	INT  nElement;
	INT  nElements;
	CDatabaseTCFunctionElement  *pElement;

	for (nElement = 0, nElements = (pSet->m_szName == m_szName && pSet->m_szDescription == m_szDescription && pSet->m_nType == m_nType && pSet->m_szValueSet == m_szValueSet && pSet->m_nStatus == m_nStatus && pSet->GetSize() == GetSize()) ? (INT)GetSize() : -1; nElement < nElements; nElement++)
	{
		if ((pElement = pSet->GetAt(nElement)) && pElement->Compare(GetAt(nElement))) continue;
		break;
	}
	return((nElement == nElements) ? TRUE : FALSE);
}

BOOL CDatabaseTCParameterSet::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nElement;
	INT  nElements;
	CByteArray  nElementsData[2];
	CDatabaseTCFunctionElement  *pElement;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	sData.cbValueSet = (m_szValueSet.GetLength() + 1)*sizeof(TCHAR);
	for (nElement = 0, nElements = (INT)GetSize(), sData.nType = m_nType, sData.nStatus = m_nStatus, sData.bBinary = bBinary; nElement < nElements; nElement++)
	{
		if ((pElement = GetAt(nElement)) && pElement->Map(nElementsData[1], bBinary) && nElementsData[0].Append(nElementsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbValueSet + (sData.cbElements = (INT)(nElementsData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nElement == nElements; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szValueSet, sData.cbValueSet);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbValueSet), nElementsData[0].GetData(), sData.cbElements);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCParameterSet::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbElement;
	INT  cbElements;
	CByteArray  nElementsData[2];
	CDatabaseTCFunctionElement  *pElement;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbValueSet + sData.cbElements && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbValueSet > 0 && sData.cbElements >= 0 && sData.bBinary == bBinary; )
	{
		for (nElementsData[0].SetSize(sData.cbElements), CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription)), CopyMemory(m_szValueSet.GetBufferSetLength(STRINGCHARS(sData.cbValueSet)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbValueSet)), CopyMemory(nElementsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbValueSet), sData.cbElements), m_nType = sData.nType, m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), m_szValueSet.ReleaseBuffer(), RemoveAll(), cbElement = cbElements = 0; cbElements < sData.cbElements; cbElements += cbElement)
		{
			for (CopyMemory(&cbElement, nElementsData[0].GetData() + cbElements, sizeof(cbElement)), nElementsData[1].SetSize(max(min(cbElement, nElementsData[0].GetSize() - cbElements), 0)); nElementsData[1].GetSize() >= 0; )
			{
				CopyMemory(nElementsData[1].GetData(), nElementsData[0].GetData() + cbElements, nElementsData[1].GetSize());
				break;
			}
			if ((pElement = new CDatabaseTCFunctionElement))
			{
				if (pElement->Unmap(nElementsData[1], bBinary) && Add(pElement) >= 0) continue;
				delete pElement;
			}
			break;
		}
		return((cbElements == sData.cbElements) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTCParameterSet::FindIndex(LPCTSTR pszName, INT nBytePos, INT nBitPos) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	INT  nBitOffset[2];
	CDatabaseTCFunctionElement  *pElement;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2, nBitOffset[0] = 8 * nBytePos + nBitPos; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pElement = GetAt(nIndex[0]))) ? (((nIndex[1] = ((nBitOffset[1] = 8 * pElement->GetBytePos() + pElement->GetBitPos()) == nBitOffset[0] && pElement->GetName().Compare(pszName) <= 0) || nBitOffset[0] > nBitOffset[1])) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return nIndex[0];
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCParameterSets

CDatabaseTCParameterSets::CDatabaseTCParameterSets() : CPtrArray()
{
	return;
}

CDatabaseTCParameterSets::~CDatabaseTCParameterSets()
{
	RemoveAll();
}

INT CDatabaseTCParameterSets::Add(CDatabaseTCParameterSet *pSet)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pSet->GetName(), TRUE)) >= 0) InsertAt(nIndex, pSet, 1);
	return nIndex;
}

INT CDatabaseTCParameterSets::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTCParameterSet *CDatabaseTCParameterSets::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCParameterSet *)CPtrArray::GetAt(nIndex) : (CDatabaseTCParameterSet *)NULL);
}

CDatabaseTCParameterSet *CDatabaseTCParameterSets::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCParameterSet *)CPtrArray::GetAt(nIndex) : (CDatabaseTCParameterSet *)NULL);
}

VOID CDatabaseTCParameterSets::RemoveAll()
{
	INT  nSet;
	INT  nSets;
	CDatabaseTCParameterSet  *pSet;

	for (nSet = 0, nSets = (INT)GetSize(); nSet < nSets; nSet++)
	{
		if ((pSet = GetAt(nSet))) delete pSet;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCParameterSets::Copy(CONST CDatabaseTCParameterSets *pSets)
{
	INT  nSet;
	INT  nSets;
	CDatabaseTCParameterSet  *pSet;

	for (nSet = 0, nSets = (INT)pSets->GetSize(), RemoveAll(); nSet < nSets; nSet++)
	{
		if ((pSet = new CDatabaseTCParameterSet))
		{
			pSet->Copy(pSets->GetAt(nSet));
			InsertAt(nSet, pSet, 1);
			continue;
		}
		break;
	}
	return((nSet == nSets) ? TRUE : FALSE);
}

BOOL CDatabaseTCParameterSets::Compare(CONST CDatabaseTCParameterSets *pSets) CONST
{
	INT  nSet;
	INT  nSets;

	for (nSet = 0, nSets = (pSets->GetSize() == GetSize()) ? (INT)GetSize() : -1; nSet < nSets; nSet++)
	{
		if (!pSets->GetAt(nSet)->Compare(GetAt(nSet))) break;
		continue;
	}
	return((nSet == nSets) ? TRUE : FALSE);
}

BOOL CDatabaseTCParameterSets::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nSet;
	INT  nSets;
	CByteArray  nSetsData;
	CDatabaseTCParameterSet  *pSet;

	for (nSet = 0, nSets = (INT)GetSize(), nInfo.RemoveAll(); nSet < nSets; nSet++)
	{
		if ((pSet = GetAt(nSet)) && pSet->Map(nSetsData, bBinary) && nInfo.Append(nSetsData) >= 0) continue;
		break;
	}
	return((nSet == nSets) ? TRUE : FALSE);
}

BOOL CDatabaseTCParameterSets::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbSet;
	INT  cbSets;
	CByteArray  nSetsData;
	CDatabaseTCParameterSet  *pSet;

	for (cbSets = 0, RemoveAll(); cbSets < nInfo.GetSize(); cbSets += cbSet)
	{
		for (CopyMemory(&cbSet, nInfo.GetData() + cbSets, sizeof(cbSet)), nSetsData.SetSize(max(min(cbSet, nInfo.GetSize() - cbSets), 0)); nSetsData.GetSize() >= 0; )
		{
			CopyMemory(nSetsData.GetData(), nInfo.GetData() + cbSets, nSetsData.GetSize());
			break;
		}
		if ((pSet = new CDatabaseTCParameterSet))
		{
			if (pSet->Unmap(nSetsData, bBinary) && Add(pSet) >= 0) continue;
			delete pSet;
		}
		break;
	}
	return((cbSets == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCParameterSets::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCParameterSet  *pSet;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pSet = GetAt(nIndex[0]))) ? ((nIndex[1] = (pSet->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pSet = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pSet->GetName() == pszName) || (bInsert && (((pSet = GetAt(max(nIndex[0] - 1, 0))) && pSet->GetName() != pszName && (pSet = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pSet->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCPreExeGroupParameter

CDatabaseTCPreExeGroupParameter::CDatabaseTCPreExeGroupParameter() : CObject()
{
	m_nAttributes = 0;
	m_fValue = 0.0;
	m_nRef = -1;
}

VOID CDatabaseTCPreExeGroupParameter::SetTag(LPCTSTR pszTag)
{
	m_szTag = pszTag;
}

CString CDatabaseTCPreExeGroupParameter::GetTag() CONST
{
	return m_szTag;
}

VOID CDatabaseTCPreExeGroupParameter::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTCPreExeGroupParameter::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCPreExeGroupParameter::SetValue(double fValue)
{
	m_fValue = fValue;
}

double CDatabaseTCPreExeGroupParameter::GetValue() CONST
{
	return m_fValue;
}

VOID CDatabaseTCPreExeGroupParameter::SetValueAsText(LPCTSTR pszValue)
{
	m_szValue = pszValue;
}

CString CDatabaseTCPreExeGroupParameter::GetValueAsText() CONST
{
	return m_szValue;
}

VOID CDatabaseTCPreExeGroupParameter::SetRef(INT nRef)
{
	m_nRef = nRef;
}

INT CDatabaseTCPreExeGroupParameter::GetRef() CONST
{
	return m_nRef;
}

VOID CDatabaseTCPreExeGroupParameter::Copy(CONST CDatabaseTCPreExeGroupParameter *pGroupParameter)
{
	m_szTag = pGroupParameter->m_szTag;
	m_szValue = pGroupParameter->m_szValue;
	m_nAttributes = pGroupParameter->m_nAttributes;
	m_fValue = pGroupParameter->m_fValue;
	m_nRef = pGroupParameter->m_nRef;
}

BOOL CDatabaseTCPreExeGroupParameter::Compare(CONST CDatabaseTCPreExeGroupParameter *pGroupParameter) CONST
{
	return((pGroupParameter->m_szTag == m_szTag  &&  pGroupParameter->m_szValue == m_szValue  &&  pGroupParameter->m_nAttributes == m_nAttributes  &&  pGroupParameter->m_fValue == m_fValue  &&  pGroupParameter->m_nRef == m_nRef) ? TRUE : FALSE);
}

BOOL CDatabaseTCPreExeGroupParameter::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbTag = (m_szTag.GetLength() + 1)*sizeof(TCHAR);
	sData.cbValue = (m_szValue.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbTag + sData.cbValue)), sData.nAttributes = m_nAttributes, sData.fValue = m_fValue, sData.nRef = (bBinary) ? m_nRef : -1, sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szTag, sData.cbTag);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTag), (LPCTSTR)m_szValue, sData.cbValue);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCPreExeGroupParameter::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbTag + sData.cbValue && sData.cbTag > 0 && sData.cbValue > 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szTag.GetBufferSetLength(STRINGCHARS(sData.cbTag)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbTag));
		CopyMemory(m_szValue.GetBufferSetLength(STRINGCHARS(sData.cbValue)), nInfo.GetData() + (cbData = cbData + sData.cbTag), STRINGBYTES(sData.cbValue));
		m_nAttributes = sData.nAttributes;
		m_fValue = sData.fValue;
		m_nRef = sData.nRef;
		m_szTag.ReleaseBuffer();
		m_szValue.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCPreExeGroup

CDatabaseTCPreExeGroup::CDatabaseTCPreExeGroup() : CPtrArray()
{
	m_nStatus = TCPREEXEGROUP_RECORDSTATUS_NONE;
}

CDatabaseTCPreExeGroup::~CDatabaseTCPreExeGroup()
{
	RemoveAll();
}

VOID CDatabaseTCPreExeGroup::SetID(LPCTSTR pszID)
{
	m_szID = pszID;
}

CString CDatabaseTCPreExeGroup::GetID() CONST
{
	return m_szID;
}

VOID CDatabaseTCPreExeGroup::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCPreExeGroup::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTCPreExeGroup::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTCPreExeGroup::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseTCPreExeGroup::Add(CDatabaseTCPreExeGroupParameter *pParameter)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pParameter->GetTag(), TRUE)) >= 0) InsertAt(nIndex, pParameter, 1);
	return nIndex;
}

INT CDatabaseTCPreExeGroup::Find(LPCTSTR pszTag) CONST
{
	return FindIndex(pszTag);
}

CDatabaseTCPreExeGroupParameter *CDatabaseTCPreExeGroup::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCPreExeGroupParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTCPreExeGroupParameter *)NULL);
}

CDatabaseTCPreExeGroupParameter *CDatabaseTCPreExeGroup::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCPreExeGroupParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTCPreExeGroupParameter *)NULL);
}

VOID CDatabaseTCPreExeGroup::RemoveAll()
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCPreExeGroupParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter))) delete pParameter;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCPreExeGroup::Copy(CONST CDatabaseTCPreExeGroup *pGroup)
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCPreExeGroupParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)pGroup->GetSize(), m_szID = pGroup->m_szID, m_szDescription = pGroup->m_szDescription, m_nStatus = pGroup->m_nStatus, RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = new CDatabaseTCPreExeGroupParameter))
		{
			pParameter->Copy(pGroup->GetAt(nParameter));
			InsertAt(nParameter, pParameter, 1);
			continue;
		}
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCPreExeGroup::Compare(CONST CDatabaseTCPreExeGroup *pGroup) CONST
{
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (pGroup->m_szID == m_szID && pGroup->m_szDescription == m_szDescription && pGroup->m_nStatus == m_nStatus && pGroup->GetSize() == GetSize()) ? (INT)GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if (!pGroup->GetAt(nParameter)->Compare(GetAt(nParameter))) break;
		continue;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCPreExeGroup::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nParameter;
	INT  nParameters;
	CByteArray  nParametersData[2];
	CDatabaseTCPreExeGroupParameter  *pParameter;

	sData.cbID = (m_szID.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nParameter = 0, nParameters = (INT)GetSize(), sData.nStatus = m_nStatus, sData.bBinary = bBinary; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)) && pParameter->Map(nParametersData[1], bBinary) && nParametersData[0].Append(nParametersData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbID + sData.cbDescription + (sData.cbParameters = (INT)(nParametersData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nParameter == nParameters; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szID, sData.cbID);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbID), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), nParametersData[0].GetData(), sData.cbParameters);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCPreExeGroup::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbParameter;
	INT  cbParameters;
	CByteArray  nParametersData[2];
	CDatabaseTCPreExeGroupParameter  *pParameter;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbID + sData.cbDescription + sData.cbParameters && sData.cbID > 0 && sData.cbDescription > 0 && sData.cbParameters >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szID.GetBufferSetLength(STRINGCHARS(sData.cbID)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbID));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbID), STRINGBYTES(sData.cbDescription));
		for (nParametersData[0].SetSize(sData.cbParameters), CopyMemory(nParametersData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbDescription), sData.cbParameters), m_nStatus = sData.nStatus, m_szID.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), RemoveAll(), cbParameter = cbParameters = 0; cbParameters < sData.cbParameters; cbParameters += cbParameter)
		{
			for (CopyMemory(&cbParameter, nParametersData[0].GetData() + cbParameters, sizeof(cbParameter)), nParametersData[1].SetSize(max(min(cbParameter, nParametersData[0].GetSize() - cbParameters), 0)); nParametersData[1].GetSize() >= 0; )
			{
				CopyMemory(nParametersData[1].GetData(), nParametersData[0].GetData() + cbParameters, nParametersData[1].GetSize());
				break;
			}
			if ((pParameter = new CDatabaseTCPreExeGroupParameter))
			{
				if (pParameter->Unmap(nParametersData[1], bBinary) && Add(pParameter) >= 0) continue;
				delete pParameter;
			}
			break;
		}
		return((cbParameters == sData.cbParameters) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTCPreExeGroup::FindIndex(LPCTSTR pszTag, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCPreExeGroupParameter  *pParameter;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pParameter = GetAt(nIndex[0]))) ? ((nIndex[1] = (pParameter->GetTag() <= pszTag)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pParameter = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pParameter->GetTag() == pszTag) || (bInsert && (((pParameter = GetAt(max(nIndex[0] - 1, 0))) && pParameter->GetTag() != pszTag && (pParameter = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pParameter->GetTag() != pszTag) || !GetSize()))) && lstrlen(pszTag) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCPreExeGroups

CDatabaseTCPreExeGroups::CDatabaseTCPreExeGroups() : CPtrArray()
{
	return;
}

CDatabaseTCPreExeGroups::~CDatabaseTCPreExeGroups()
{
	RemoveAll();
}

INT CDatabaseTCPreExeGroups::Add(CDatabaseTCPreExeGroup *pGroup)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pGroup->GetID(), TRUE)) >= 0) InsertAt(nIndex, pGroup, 1);
	return nIndex;
}

INT CDatabaseTCPreExeGroups::Find(LPCTSTR pszID) CONST
{
	return FindIndex(pszID);
}

CDatabaseTCPreExeGroup *CDatabaseTCPreExeGroups::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCPreExeGroup *)CPtrArray::GetAt(nIndex) : (CDatabaseTCPreExeGroup *)NULL);
}

CDatabaseTCPreExeGroup *CDatabaseTCPreExeGroups::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCPreExeGroup *)CPtrArray::GetAt(nIndex) : (CDatabaseTCPreExeGroup *)NULL);
}

VOID CDatabaseTCPreExeGroups::RemoveAll()
{
	INT  nGroup;
	INT  nGroups;
	CDatabaseTCPreExeGroup  *pGroup;

	for (nGroup = 0, nGroups = (INT)GetSize(); nGroup < nGroups; nGroup++)
	{
		if ((pGroup = GetAt(nGroup))) delete pGroup;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCPreExeGroups::Copy(CONST CDatabaseTCPreExeGroups *pGroups)
{
	INT  nGroup;
	INT  nGroups;
	CDatabaseTCPreExeGroup  *pGroup;

	for (nGroup = 0, nGroups = (INT)pGroups->GetSize(), RemoveAll(); nGroup < nGroups; nGroup++)
	{
		if ((pGroup = new CDatabaseTCPreExeGroup))
		{
			pGroup->Copy(pGroups->GetAt(nGroup));
			InsertAt(nGroup, pGroup, 1);
			continue;
		}
		break;
	}
	return((nGroup == nGroups) ? TRUE : FALSE);
}

BOOL CDatabaseTCPreExeGroups::Compare(CONST CDatabaseTCPreExeGroups *pGroups) CONST
{
	INT  nGroup;
	INT  nGroups;

	for (nGroup = 0, nGroups = (pGroups->GetSize() == GetSize()) ? (INT)GetSize() : -1; nGroup < nGroups; nGroup++)
	{
		if (!pGroups->GetAt(nGroup)->Compare(GetAt(nGroup))) break;
		continue;
	}
	return((nGroup == nGroups) ? TRUE : FALSE);
}

BOOL CDatabaseTCPreExeGroups::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nGroup;
	INT  nGroups;
	CByteArray  nGroupsData;
	CDatabaseTCPreExeGroup  *pGroup;

	for (nGroup = 0, nGroups = (INT)GetSize(), nInfo.RemoveAll(); nGroup < nGroups; nGroup++)
	{
		if ((pGroup = GetAt(nGroup)) && pGroup->Map(nGroupsData, bBinary) && nInfo.Append(nGroupsData) >= 0) continue;
		break;
	}
	return((nGroup == nGroups) ? TRUE : FALSE);
}

BOOL CDatabaseTCPreExeGroups::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbGroup;
	INT  cbGroups;
	CByteArray  nGroupsData;
	CDatabaseTCPreExeGroup  *pGroup;

	for (cbGroups = 0, RemoveAll(); cbGroups < nInfo.GetSize(); cbGroups += cbGroup)
	{
		for (CopyMemory(&cbGroup, nInfo.GetData() + cbGroups, sizeof(cbGroup)), nGroupsData.SetSize(max(min(cbGroup, nInfo.GetSize() - cbGroups), 0)); nGroupsData.GetSize() >= 0; )
		{
			CopyMemory(nGroupsData.GetData(), nInfo.GetData() + cbGroups, nGroupsData.GetSize());
			break;
		}
		if ((pGroup = new CDatabaseTCPreExeGroup))
		{
			if (pGroup->Unmap(nGroupsData, bBinary) && Add(pGroup) >= 0) continue;
			delete pGroup;
		}
		break;
	}
	return((cbGroups == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCPreExeGroups::FindIndex(LPCTSTR pszID, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCPreExeGroup  *pGroup;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pGroup = GetAt(nIndex[0]))) ? ((nIndex[1] = (pGroup->GetID() <= pszID)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pGroup = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pGroup->GetID() == pszID) || (bInsert && (((pGroup = GetAt(max(nIndex[0] - 1, 0))) && pGroup->GetID() != pszID && (pGroup = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pGroup->GetID() != pszID) || !GetSize()))) && lstrlen(pszID) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCExeVerStageParameter

CDatabaseTCExeVerStageParameter::CDatabaseTCExeVerStageParameter() : CObject()
{
	m_nAttributes = 0;
	m_fValue[0] = 0.0;
	m_fValue[1] = 0.0;
}

VOID CDatabaseTCExeVerStageParameter::SetTag(LPCTSTR pszTag)
{
	m_szTag = pszTag;
}

CString CDatabaseTCExeVerStageParameter::GetTag() CONST
{
	return m_szTag;
}

VOID CDatabaseTCExeVerStageParameter::SetStageID(LPCTSTR pszStageID)
{
	m_szStageID = pszStageID;
}

CString CDatabaseTCExeVerStageParameter::GetStageID() CONST
{
	return m_szStageID;
}

VOID CDatabaseTCExeVerStageParameter::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTCExeVerStageParameter::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCExeVerStageParameter::SetValue(double fValue)
{
	m_fValue[0] = fValue;
}

double CDatabaseTCExeVerStageParameter::GetValue() CONST
{
	return m_fValue[0];
}

VOID CDatabaseTCExeVerStageParameter::SetValueAsText(LPCTSTR pszValue)
{
	m_szValue[0] = pszValue;
}

CString CDatabaseTCExeVerStageParameter::GetValueAsText() CONST
{
	return m_szValue[0];
}

VOID CDatabaseTCExeVerStageParameter::SetValueTolerance(double fDelta)
{
	m_fValue[1] = fDelta;
}

double CDatabaseTCExeVerStageParameter::GetValueTolerance() CONST
{
	return m_fValue[1];
}

VOID CDatabaseTCExeVerStageParameter::SetValueToleranceAsText(LPCTSTR pszDelta)
{
	m_szValue[1] = pszDelta;
}

CString CDatabaseTCExeVerStageParameter::GetValueToleranceAsText() CONST
{
	return m_szValue[1];
}

VOID CDatabaseTCExeVerStageParameter::Copy(CONST CDatabaseTCExeVerStageParameter *pStageParameter)
{
	m_szTag = pStageParameter->m_szTag;
	m_szStageID = pStageParameter->m_szStageID;
	m_nAttributes = pStageParameter->m_nAttributes;
	m_fValue[0] = pStageParameter->m_fValue[0];
	m_fValue[1] = pStageParameter->m_fValue[1];
	m_szValue[0] = pStageParameter->m_szValue[0];
	m_szValue[1] = pStageParameter->m_szValue[1];
}

BOOL CDatabaseTCExeVerStageParameter::Compare(CONST CDatabaseTCExeVerStageParameter *pStageParameter) CONST
{
	return((pStageParameter->m_szTag == m_szTag  &&  pStageParameter->m_szStageID == m_szStageID  &&  pStageParameter->m_nAttributes == m_nAttributes  &&  pStageParameter->m_fValue[0] == m_fValue[0] && pStageParameter->m_fValue[1] == m_fValue[1] && pStageParameter->m_szValue[0] == m_szValue[0] && pStageParameter->m_szValue[1] == m_szValue[1]) ? TRUE : FALSE);
}

BOOL CDatabaseTCExeVerStageParameter::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbTag = (m_szTag.GetLength() + 1)*sizeof(TCHAR);
	sData.cbStageID = (m_szStageID.GetLength() + 1)*sizeof(TCHAR);
	sData.cbValue[0] = (m_szValue[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbValue[1] = (m_szValue[1].GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbTag + sData.cbStageID + sData.cbValue[0] + sData.cbValue[1])), sData.nAttributes = m_nAttributes, sData.fValue[0] = m_fValue[0], sData.fValue[1] = m_fValue[1], sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szTag, sData.cbTag);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTag), (LPCTSTR)m_szStageID, sData.cbStageID);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbStageID), (LPCTSTR)m_szValue[0], sData.cbValue[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbValue[0]), (LPCTSTR)m_szValue[1], sData.cbValue[1]);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCExeVerStageParameter::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbTag + sData.cbStageID + sData.cbValue[0] + sData.cbValue[1] && sData.cbTag > 0 && sData.cbStageID > 0 && sData.cbValue[0] > 0 && sData.cbValue[1] > 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szTag.GetBufferSetLength(STRINGCHARS(sData.cbTag)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbTag));
		CopyMemory(m_szStageID.GetBufferSetLength(STRINGCHARS(sData.cbStageID)), nInfo.GetData() + (cbData = cbData + sData.cbTag), STRINGBYTES(sData.cbStageID));
		CopyMemory(m_szValue[0].GetBufferSetLength(STRINGCHARS(sData.cbValue[0])), nInfo.GetData() + (cbData = cbData + sData.cbStageID), STRINGBYTES(sData.cbValue[0]));
		CopyMemory(m_szValue[1].GetBufferSetLength(STRINGCHARS(sData.cbValue[1])), nInfo.GetData() + (cbData = cbData + sData.cbValue[0]), STRINGBYTES(sData.cbValue[1]));
		m_nAttributes = sData.nAttributes;
		m_fValue[0] = sData.fValue[0];
		m_fValue[1] = sData.fValue[1];
		m_szTag.ReleaseBuffer();
		m_szStageID.ReleaseBuffer();
		m_szValue[0].ReleaseBuffer();
		m_szValue[1].ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCExeVerStage

CDatabaseTCExeVerStage::CDatabaseTCExeVerStage() : CPtrArray()
{
	m_nType = TCEXEVERSTAGE_TYPE_NONE;
	m_nStep = 0;
	m_nAttributes = 0;
	m_tTimeWindow[0] = 0;
	m_tTimeWindow[1] = 0;
	m_tTimeWindow[2] = 0;
}

CDatabaseTCExeVerStage::~CDatabaseTCExeVerStage()
{
	RemoveAll();
}

VOID CDatabaseTCExeVerStage::SetID(LPCTSTR pszID)
{
	m_szID = pszID;
}

CString CDatabaseTCExeVerStage::GetID() CONST
{
	return m_szID;
}

VOID CDatabaseTCExeVerStage::SetType(UINT nType)
{
	m_nType = nType;
}

UINT CDatabaseTCExeVerStage::GetType() CONST
{
	return m_nType;
}

VOID CDatabaseTCExeVerStage::SetStep(UINT nStep)
{
	m_nStep = nStep;
}

UINT CDatabaseTCExeVerStage::GetStep() CONST
{
	return m_nStep;
}

VOID CDatabaseTCExeVerStage::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTCExeVerStage::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCExeVerStage::SetTimeWindowOffset(CONST CTimeSpan &tOffset)
{
	m_tTimeWindow[0] = tOffset;
}

CTimeSpan CDatabaseTCExeVerStage::GetTimeWindowOffset() CONST
{
	return m_tTimeWindow[0];
}

VOID CDatabaseTCExeVerStage::SetTimeWindowInterval(CONST CTimeSpan &tInterval)
{
	m_tTimeWindow[1] = tInterval;
}

CTimeSpan CDatabaseTCExeVerStage::GetTimeWindowInterval() CONST
{
	return m_tTimeWindow[1];
}

VOID CDatabaseTCExeVerStage::SetTimeWindowUncertainty(CONST CTimeSpan &tInterval)
{
	m_tTimeWindow[2] = tInterval;
}

CTimeSpan CDatabaseTCExeVerStage::GetTimeWindowUncertainty() CONST
{
	return m_tTimeWindow[2];
}

VOID CDatabaseTCExeVerStage::SetTimeWindowClosurePacket(LPCTSTR pszTag)
{
	m_szPacket = pszTag;
}

CString CDatabaseTCExeVerStage::GetTimeWindowClosurePacket() CONST
{
	return m_szPacket;
}

INT CDatabaseTCExeVerStage::Add(CDatabaseTCExeVerStageParameter *pParameter)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pParameter->GetTag(), TRUE)) >= 0) InsertAt(nIndex, pParameter, 1);
	return nIndex;
}

INT CDatabaseTCExeVerStage::Find(LPCTSTR pszTag) CONST
{
	return FindIndex(pszTag);
}

CDatabaseTCExeVerStageParameter *CDatabaseTCExeVerStage::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCExeVerStageParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTCExeVerStageParameter *)NULL);
}

CDatabaseTCExeVerStageParameter *CDatabaseTCExeVerStage::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCExeVerStageParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTCExeVerStageParameter *)NULL);
}

VOID CDatabaseTCExeVerStage::RemoveAll()
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCExeVerStageParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter))) delete pParameter;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCExeVerStage::Copy(CONST CDatabaseTCExeVerStage *pStage)
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCExeVerStageParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)pStage->GetSize(), m_szID = pStage->m_szID, m_nType = pStage->m_nType, m_nStep = pStage->m_nStep, m_nAttributes = pStage->m_nAttributes, m_szPacket = pStage->m_szPacket, m_tTimeWindow[0] = pStage->m_tTimeWindow[0], m_tTimeWindow[1] = pStage->m_tTimeWindow[1], m_tTimeWindow[2] = pStage->m_tTimeWindow[2], RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = new CDatabaseTCExeVerStageParameter))
		{
			pParameter->Copy(pStage->GetAt(nParameter));
			InsertAt(nParameter, pParameter, 1);
			continue;
		}
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCExeVerStage::Compare(CONST CDatabaseTCExeVerStage *pStage) CONST
{
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (pStage->m_szID == m_szID && pStage->m_nType == m_nType && pStage->m_nStep == m_nStep && pStage->m_nAttributes == m_nAttributes && pStage->m_szPacket == m_szPacket && pStage->m_tTimeWindow[0] == m_tTimeWindow[0] && pStage->m_tTimeWindow[1] == m_tTimeWindow[1] && pStage->m_tTimeWindow[2] == m_tTimeWindow[2] && pStage->GetSize() == GetSize()) ? (INT)GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if (!pStage->GetAt(nParameter)->Compare(GetAt(nParameter))) break;
		continue;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCExeVerStage::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nParameter;
	INT  nParameters;
	CByteArray  nParametersData[2];
	CDatabaseTCExeVerStageParameter  *pParameter;

	sData.cbID = (m_szID.GetLength() + 1)*sizeof(TCHAR);
	sData.cbPacket = (m_szPacket.GetLength() + 1)*sizeof(TCHAR);
	for (nParameter = 0, nParameters = (INT)GetSize(), sData.nType = m_nType, sData.nStep = m_nStep, sData.nAttributes = m_nAttributes, sData.tTimeWindow[0] = m_tTimeWindow[0].GetTotalSeconds(), sData.tTimeWindow[1] = m_tTimeWindow[1].GetTotalSeconds(), sData.tTimeWindow[2] = m_tTimeWindow[2].GetTotalSeconds(), sData.bBinary = bBinary; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)) && pParameter->Map(nParametersData[1], bBinary) && nParametersData[0].Append(nParametersData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbID + sData.cbPacket + (sData.cbParameters = (INT)(nParametersData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nParameter == nParameters; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szID, sData.cbID);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbID), (LPCTSTR)m_szPacket, sData.cbPacket);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbPacket), nParametersData[0].GetData(), sData.cbParameters);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCExeVerStage::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbParameter;
	INT  cbParameters;
	CByteArray  nParametersData[2];
	CDatabaseTCExeVerStageParameter  *pParameter;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbID + sData.cbPacket + sData.cbParameters && sData.cbID > 0 && sData.cbPacket > 0 && sData.cbParameters >= 0 && sData.bBinary == bBinary; )
	{
		for (nParametersData[0].SetSize(sData.cbParameters), CopyMemory(m_szID.GetBufferSetLength(STRINGCHARS(sData.cbID)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbID)), CopyMemory(m_szPacket.GetBufferSetLength(STRINGCHARS(sData.cbPacket)), nInfo.GetData() + (cbData = cbData + sData.cbID), STRINGBYTES(sData.cbPacket)), CopyMemory(nParametersData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbPacket), sData.cbParameters), m_nType = sData.nType, m_nStep = sData.nStep, m_nAttributes = sData.nAttributes, m_tTimeWindow[0] = sData.tTimeWindow[0], m_tTimeWindow[1] = sData.tTimeWindow[1], m_tTimeWindow[2] = sData.tTimeWindow[2], m_szID.ReleaseBuffer(), m_szPacket.ReleaseBuffer(), RemoveAll(), cbParameter = cbParameters = 0; cbParameters < sData.cbParameters; cbParameters += cbParameter)
		{
			for (CopyMemory(&cbParameter, nParametersData[0].GetData() + cbParameters, sizeof(cbParameter)), nParametersData[1].SetSize(max(min(cbParameter, nParametersData[0].GetSize() - cbParameters), 0)); nParametersData[1].GetSize() >= 0; )
			{
				CopyMemory(nParametersData[1].GetData(), nParametersData[0].GetData() + cbParameters, nParametersData[1].GetSize());
				break;
			}
			if ((pParameter = new CDatabaseTCExeVerStageParameter))
			{
				if (pParameter->Unmap(nParametersData[1], bBinary) && Add(pParameter) >= 0) continue;
				delete pParameter;
			}
			break;
		}
		return((cbParameters == sData.cbParameters) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTCExeVerStage::FindIndex(LPCTSTR pszTag, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCExeVerStageParameter  *pParameter;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pParameter = GetAt(nIndex[0]))) ? ((nIndex[1] = (pParameter->GetTag() <= pszTag)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pParameter = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pParameter->GetTag() == pszTag) || (bInsert && (((pParameter = GetAt(max(nIndex[0] - 1, 0))) && pParameter->GetTag() != pszTag && (pParameter = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pParameter->GetTag() != pszTag) || !GetSize()))) && lstrlen(pszTag) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCExeVerStages

CDatabaseTCExeVerStages::CDatabaseTCExeVerStages() : CPtrArray()
{
	return;
}

CDatabaseTCExeVerStages::~CDatabaseTCExeVerStages()
{
	RemoveAll();
}

INT CDatabaseTCExeVerStages::Add(CDatabaseTCExeVerStage *pStage)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pStage->GetID(), TRUE)) >= 0) InsertAt(nIndex, pStage, 1);
	return nIndex;
}

INT CDatabaseTCExeVerStages::Find(LPCTSTR pszID) CONST
{
	return FindIndex(pszID);
}

CDatabaseTCExeVerStage *CDatabaseTCExeVerStages::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCExeVerStage *)CPtrArray::GetAt(nIndex) : (CDatabaseTCExeVerStage *)NULL);
}

CDatabaseTCExeVerStage *CDatabaseTCExeVerStages::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCExeVerStage *)CPtrArray::GetAt(nIndex) : (CDatabaseTCExeVerStage *)NULL);
}

VOID CDatabaseTCExeVerStages::RemoveAll()
{
	INT  nStage;
	INT  nStages;
	CDatabaseTCExeVerStage  *pStage;

	for (nStage = 0, nStages = (INT)GetSize(); nStage < nStages; nStage++)
	{
		if ((pStage = GetAt(nStage))) delete pStage;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCExeVerStages::Copy(CONST CDatabaseTCExeVerStages *pStages)
{
	INT  nStage;
	INT  nStages;
	CDatabaseTCExeVerStage  *pStage;

	for (nStage = 0, nStages = (INT)pStages->GetSize(), RemoveAll(); nStage < nStages; nStage++)
	{
		if ((pStage = new CDatabaseTCExeVerStage))
		{
			pStage->Copy(pStages->GetAt(nStage));
			InsertAt(nStage, pStage, 1);
			continue;
		}
		break;
	}
	return((nStage == nStages) ? TRUE : FALSE);
}

BOOL CDatabaseTCExeVerStages::Compare(CONST CDatabaseTCExeVerStages *pStages) CONST
{
	INT  nStage;
	INT  nStages;

	for (nStage = 0, nStages = (pStages->GetSize() == GetSize()) ? (INT)GetSize() : -1; nStage < nStages; nStage++)
	{
		if (!pStages->GetAt(nStage)->Compare(GetAt(nStage))) break;
		continue;
	}
	return((nStage == nStages) ? TRUE : FALSE);
}

BOOL CDatabaseTCExeVerStages::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nStage;
	INT  nStages;
	CByteArray  nStagesData;
	CDatabaseTCExeVerStage  *pStage;

	for (nStage = 0, nStages = (INT)GetSize(), nInfo.RemoveAll(); nStage < nStages; nStage++)
	{
		if ((pStage = GetAt(nStage)) && pStage->Map(nStagesData, bBinary) && nInfo.Append(nStagesData) >= 0) continue;
		break;
	}
	return((nStage == nStages) ? TRUE : FALSE);
}

BOOL CDatabaseTCExeVerStages::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbStage;
	INT  cbStages;
	CByteArray  nStagesData;
	CDatabaseTCExeVerStage  *pStage;

	for (cbStages = 0, RemoveAll(); cbStages < nInfo.GetSize(); cbStages += cbStage)
	{
		for (CopyMemory(&cbStage, nInfo.GetData() + cbStages, sizeof(cbStage)), nStagesData.SetSize(max(min(cbStage, nInfo.GetSize() - cbStages), 0)); nStagesData.GetSize() >= 0; )
		{
			CopyMemory(nStagesData.GetData(), nInfo.GetData() + cbStages, nStagesData.GetSize());
			break;
		}
		if ((pStage = new CDatabaseTCExeVerStage))
		{
			if (pStage->Unmap(nStagesData, bBinary) && Add(pStage) >= 0) continue;
			delete pStage;
		}
		break;
	}
	return((cbStages == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCExeVerStages::FindIndex(LPCTSTR pszID, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCExeVerStage  *pStage;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pStage = GetAt(nIndex[0]))) ? ((nIndex[1] = (pStage->GetID() <= pszID)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pStage = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pStage->GetID() == pszID) || (bInsert && (((pStage = GetAt(max(nIndex[0] - 1, 0))) && pStage->GetID() != pszID && (pStage = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pStage->GetID() != pszID) || !GetSize()))) && lstrlen(pszID) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCExeVerGroupParameter

CDatabaseTCExeVerGroupParameter::CDatabaseTCExeVerGroupParameter() : CDatabaseTCExeVerStageParameter()
{
	m_nStage = 0;
	m_nStep = 0;
	m_nAttributes = 0;
	m_tTimeWindow[0] = 0;
	m_tTimeWindow[1] = 0;
	m_tTimeWindow[2] = 0;
	m_nRef[0] = -1;
	m_nRef[1] = -1;
}

VOID CDatabaseTCExeVerGroupParameter::SetStage(UINT nType)
{
	m_nStage = nType;
}

UINT CDatabaseTCExeVerGroupParameter::GetStage() CONST
{
	return m_nStage;
}

VOID CDatabaseTCExeVerGroupParameter::SetStep(UINT nStep)
{
	m_nStep = nStep;
}

UINT CDatabaseTCExeVerGroupParameter::GetStep() CONST
{
	return m_nStep;
}

VOID CDatabaseTCExeVerGroupParameter::SetTimeWindowOffset(CONST CTimeSpan &tOffset)
{
	m_tTimeWindow[0] = tOffset;
}

CTimeSpan CDatabaseTCExeVerGroupParameter::GetTimeWindowOffset() CONST
{
	return m_tTimeWindow[0];
}

VOID CDatabaseTCExeVerGroupParameter::SetTimeWindowInterval(CONST CTimeSpan &tInterval)
{
	m_tTimeWindow[1] = tInterval;
}

CTimeSpan CDatabaseTCExeVerGroupParameter::GetTimeWindowInterval() CONST
{
	return m_tTimeWindow[1];
}

VOID CDatabaseTCExeVerGroupParameter::SetTimeWindowUncertainty(CONST CTimeSpan &tInterval)
{
	m_tTimeWindow[2] = tInterval;
}

CTimeSpan CDatabaseTCExeVerGroupParameter::GetTimeWindowUncertainty() CONST
{
	return m_tTimeWindow[2];
}

VOID CDatabaseTCExeVerGroupParameter::SetTimeWindowClosurePacket(LPCTSTR pszTag)
{
	m_szPacket[0] = pszTag;
}

CString CDatabaseTCExeVerGroupParameter::GetTimeWindowClosurePacket() CONST
{
	return m_szPacket[0];
}

VOID CDatabaseTCExeVerGroupParameter::SetEventIDPacket(LPCTSTR pszTag)
{
	m_szPacket[1] = pszTag;
}

CString CDatabaseTCExeVerGroupParameter::GetEventIDPacket() CONST
{
	return m_szPacket[1];
}

VOID CDatabaseTCExeVerGroupParameter::SetEventIDPacketRef(INT nRef)
{
	m_nRef[1] = nRef;
}

INT CDatabaseTCExeVerGroupParameter::GetEventIDPacketRef() CONST
{
	return m_nRef[1];
}

VOID CDatabaseTCExeVerGroupParameter::SetRef(INT nRef)
{
	m_nRef[0] = nRef;
}

INT CDatabaseTCExeVerGroupParameter::GetRef() CONST
{
	return m_nRef[0];
}

VOID CDatabaseTCExeVerGroupParameter::Copy(CONST CDatabaseTCExeVerGroupParameter *pGroupParameter)
{
	m_nStage = pGroupParameter->m_nStage;
	m_nStep = pGroupParameter->m_nStep;
	m_tTimeWindow[0] = pGroupParameter->m_tTimeWindow[0];
	m_tTimeWindow[1] = pGroupParameter->m_tTimeWindow[1];
	m_tTimeWindow[2] = pGroupParameter->m_tTimeWindow[2];
	m_szPacket[0] = pGroupParameter->m_szPacket[0];
	m_szPacket[1] = pGroupParameter->m_szPacket[1];
	m_nRef[0] = pGroupParameter->m_nRef[0];
	m_nRef[1] = pGroupParameter->m_nRef[1];
	CDatabaseTCExeVerStageParameter::Copy(pGroupParameter);
}

BOOL CDatabaseTCExeVerGroupParameter::Compare(CONST CDatabaseTCExeVerGroupParameter *pGroupParameter) CONST
{
	return((pGroupParameter->m_nStage == m_nStage  &&  pGroupParameter->m_nStep == m_nStep  &&  pGroupParameter->m_tTimeWindow[0] == m_tTimeWindow[0] && pGroupParameter->m_tTimeWindow[1] == m_tTimeWindow[1] && pGroupParameter->m_tTimeWindow[2] == m_tTimeWindow[2] && pGroupParameter->m_szPacket[0] == m_szPacket[0] && pGroupParameter->m_szPacket[1] == m_szPacket[1] && pGroupParameter->m_nRef[0] == m_nRef[0] && pGroupParameter->m_nRef[1] == m_nRef[1]) ? CDatabaseTCExeVerStageParameter::Compare(pGroupParameter) : FALSE);
}

BOOL CDatabaseTCExeVerGroupParameter::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;
	CByteArray  nData;

	sData.cbPacket[0] = (m_szPacket[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbPacket[1] = (m_szPacket[1].GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = ((sData.cbData = (CDatabaseTCExeVerStageParameter::Map(nData, bBinary)) ? (INT)nData.GetSize() : -1) > 0) ? (sizeof(DATA) + sData.cbData + sData.cbPacket[0] + sData.cbPacket[1]) : 0)), sData.nStage = m_nStage, sData.nStep = m_nStep, sData.tTimeWindow[0] = m_tTimeWindow[0].GetTotalSeconds(), sData.tTimeWindow[1] = m_tTimeWindow[1].GetTotalSeconds(), sData.tTimeWindow[2] = m_tTimeWindow[2].GetTotalSeconds(), sData.nRef[0] = (bBinary) ? m_nRef[0] : -1, sData.nRef[1] = (bBinary) ? m_nRef[1] : -1, sData.bBinary = bBinary; nInfo.GetSize() > 0; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), nData.GetData(), sData.cbData);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbData), (LPCTSTR)m_szPacket[0], sData.cbPacket[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbPacket[0]), (LPCTSTR)m_szPacket[1], sData.cbPacket[1]);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCExeVerGroupParameter::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;
	CByteArray  nData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbData + sData.cbPacket[0] + sData.cbPacket[1] && sData.cbData > 0 && sData.cbPacket[0] >= 0 && sData.cbPacket[1] >= 0 && sData.bBinary == bBinary; )
	{
		for (nData.SetSize(sData.cbData), CopyMemory(nData.GetData(), nInfo.GetData() + (cbData = sizeof(DATA)), sData.cbData), CopyMemory(m_szPacket[0].GetBufferSetLength(STRINGCHARS(sData.cbPacket[0])), nInfo.GetData() + (cbData = cbData + sData.cbData), STRINGBYTES(sData.cbPacket[0])), CopyMemory(m_szPacket[1].GetBufferSetLength(STRINGCHARS(sData.cbPacket[1])), nInfo.GetData() + (cbData = cbData + sData.cbPacket[0]), STRINGBYTES(sData.cbPacket[1])), m_nStage = sData.nStage, m_nStep = sData.nStep, m_tTimeWindow[0] = sData.tTimeWindow[0], m_tTimeWindow[1] = sData.tTimeWindow[1], m_tTimeWindow[2] = sData.tTimeWindow[2], m_nRef[0] = sData.nRef[0], m_nRef[1] = sData.nRef[1], m_szPacket[0].ReleaseBuffer(), m_szPacket[1].ReleaseBuffer(); CDatabaseTCExeVerStageParameter::Unmap(nData, bBinary); ) return TRUE;
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCExeVerGroup

CDatabaseTCExeVerGroup::CDatabaseTCExeVerGroup() : CPtrArray()
{
	m_nStages = 0;
	m_nAttributes = 0;
	m_nStatus = TCEXEVERGROUP_RECORDSTATUS_NONE;
}

CDatabaseTCExeVerGroup::~CDatabaseTCExeVerGroup()
{
	RemoveAll();
}

VOID CDatabaseTCExeVerGroup::SetID(LPCTSTR pszID)
{
	m_szID = pszID;
}

CString CDatabaseTCExeVerGroup::GetID() CONST
{
	return m_szID;
}

VOID CDatabaseTCExeVerGroup::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCExeVerGroup::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCExeVerGroup::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCExeVerGroup::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTCExeVerGroup::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTCExeVerGroup::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCExeVerGroup::SetStages(CONST CStringArray &szStages)
{
	m_szStages.Copy(szStages);
}
VOID CDatabaseTCExeVerGroup::SetStages(INT nStages)
{
	m_nStages = nStages;
}

INT CDatabaseTCExeVerGroup::GetStages(CStringArray &szStages) CONST
{
	szStages.Copy(m_szStages);
	return((INT)szStages.GetSize());
}
INT CDatabaseTCExeVerGroup::GetStages() CONST
{
	return m_nStages;
}

VOID CDatabaseTCExeVerGroup::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTCExeVerGroup::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseTCExeVerGroup::Add(CDatabaseTCExeVerGroupParameter *pParameter)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pParameter->GetTag(), pParameter->GetAttributes() & (TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION | TCEXEVERGROUPPARAMETER_TYPE_REPORT | TCEXEVERGROUPPARAMETER_TYPE_DUMP | TCEXEVERGROUPPARAMETER_TYPE_STATUS | TCEXEVERGROUPPARAMETER_TYPE_PARAMETER), pParameter->GetStage(), pParameter->GetStep(), TRUE)) >= 0) InsertAt(nIndex, pParameter, 1);
	return nIndex;
}

INT CDatabaseTCExeVerGroup::Find(LPCTSTR pszTag, UINT nStage) CONST
{
	INT  nIndex;
	INT  nCount;
	CDatabaseTCExeVerGroupParameter  *pParameter;

	for (nIndex = 0, nCount = (INT)GetSize(); nIndex < nCount; nIndex++)
	{
		if ((pParameter = GetAt(nIndex)) && pParameter->GetTag() == pszTag  &&  pParameter->GetStage() == nStage) break;
		continue;
	}
	return((nIndex < nCount) ? nIndex : -1);
}
INT CDatabaseTCExeVerGroup::Find(LPCTSTR pszTag, UINT nStage, UINT nStep) CONST
{
	INT  nIndex;
	INT  nCount;
	CDatabaseTCExeVerGroupParameter  *pParameter;

	for (nIndex = 0, nCount = (INT)GetSize(); nIndex < nCount; nIndex++)
	{
		if ((pParameter = GetAt(nIndex)) && pParameter->GetTag() == pszTag  &&  pParameter->GetStage() == nStage  &&  pParameter->GetStep() == nStep) break;
		continue;
	}
	return((nIndex < nCount) ? nIndex : -1);
}
INT CDatabaseTCExeVerGroup::Find(LPCTSTR pszTag, UINT nType, UINT nStage, UINT nStep) CONST
{
	return FindIndex(pszTag, nType & (TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION | TCEXEVERGROUPPARAMETER_TYPE_REPORT | TCEXEVERGROUPPARAMETER_TYPE_DUMP | TCEXEVERGROUPPARAMETER_TYPE_STATUS | TCEXEVERGROUPPARAMETER_TYPE_PARAMETER), nStage, nStep);
}

CDatabaseTCExeVerGroupParameter *CDatabaseTCExeVerGroup::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCExeVerGroupParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTCExeVerGroupParameter *)NULL);
}

CDatabaseTCExeVerGroupParameter *CDatabaseTCExeVerGroup::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCExeVerGroupParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTCExeVerGroupParameter *)NULL);
}

VOID CDatabaseTCExeVerGroup::RemoveAll()
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCExeVerGroupParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(), m_szStages.RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter))) delete pParameter;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCExeVerGroup::Copy(CONST CDatabaseTCExeVerGroup *pGroup)
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCExeVerGroupParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)pGroup->GetSize(), RemoveAll(), m_szID = pGroup->m_szID, m_szName = pGroup->m_szName, m_szDescription = pGroup->m_szDescription, m_nAttributes = pGroup->m_nAttributes, m_nStages = pGroup->m_nStages, m_szStages.Copy(pGroup->m_szStages), m_nStatus = pGroup->m_nStatus; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = new CDatabaseTCExeVerGroupParameter))
		{
			pParameter->Copy(pGroup->GetAt(nParameter));
			InsertAt(nParameter, pParameter, 1);
			continue;
		}
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCExeVerGroup::Compare(CONST CDatabaseTCExeVerGroup *pGroup) CONST
{
	INT  nStage[2];
	INT  nStages[2];
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (pGroup->m_szID == m_szID && pGroup->m_szName == m_szName && pGroup->m_szDescription == m_szDescription && pGroup->m_nAttributes == m_nAttributes && pGroup->m_nStages == m_nStages && pGroup->m_nStatus == m_nStatus && pGroup->GetSize() == GetSize()) ? (INT)GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if (!pGroup->GetAt(nParameter)->Compare(GetAt(nParameter))) break;
		continue;
	}
	for (nStage[0] = 0, nStages[0] = (pGroup->m_szStages.GetSize() == m_szStages.GetSize()) ? (INT)pGroup->m_szStages.GetSize() : -1; nStage[0] < nStages[0]; nStage[0]++)
	{
		for (nStage[1] = 0, nStages[1] = (INT)m_szStages.GetSize(); nStage[1] < nStages[1]; nStage[1]++)
		{
			if (pGroup->m_szStages.GetAt(nStage[0]) == m_szStages.GetAt(nStage[1])) break;
			continue;
		}
		if (nStage[1] == nStages[1]) break;
	}
	return((nParameter == nParameters  &&  nStage[0] == nStages[0]) ? TRUE : FALSE);
}

BOOL CDatabaseTCExeVerGroup::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nParameter;
	INT  nParameters;
	CByteArray  nParametersData[2];
	CDatabaseTCExeVerGroupParameter  *pParameter;

	sData.cbID = (m_szID.GetLength() + 1)*sizeof(TCHAR);
	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nParameter = 0, nParameters = (INT)GetSize(), sData.nAttributes = m_nAttributes, sData.nStages = m_nStages, sData.nStatus = m_nStatus, sData.bBinary = bBinary; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)) && pParameter->Map(nParametersData[1], bBinary) && nParametersData[0].Append(nParametersData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbID + sData.cbName + sData.cbDescription + (sData.cbParameters = (INT)(nParametersData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nParameter == nParameters; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szID, sData.cbID);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbID), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), nParametersData[0].GetData(), sData.cbParameters);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCExeVerGroup::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbParameter;
	INT  cbParameters;
	CByteArray  nParametersData[2];
	CDatabaseTCExeVerGroupParameter  *pParameter;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbID + sData.cbName + sData.cbDescription + sData.cbParameters && sData.cbID > 0 && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbParameters >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szID.GetBufferSetLength(STRINGCHARS(sData.cbID)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbID));
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = cbData + sData.cbID), STRINGBYTES(sData.cbName));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription));
		for (nParametersData[0].SetSize(sData.cbParameters), CopyMemory(nParametersData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbDescription), sData.cbParameters), m_nAttributes = sData.nAttributes, m_nStages = sData.nStages, m_nStatus = sData.nStatus, m_szID.ReleaseBuffer(), m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), RemoveAll(), cbParameter = cbParameters = 0; cbParameters < sData.cbParameters; cbParameters += cbParameter)
		{
			for (CopyMemory(&cbParameter, nParametersData[0].GetData() + cbParameters, sizeof(cbParameter)), nParametersData[1].SetSize(max(min(cbParameter, nParametersData[0].GetSize() - cbParameters), 0)); nParametersData[1].GetSize() >= 0; )
			{
				CopyMemory(nParametersData[1].GetData(), nParametersData[0].GetData() + cbParameters, nParametersData[1].GetSize());
				break;
			}
			if ((pParameter = new CDatabaseTCExeVerGroupParameter))
			{
				if (pParameter->Unmap(nParametersData[1], bBinary) && Add(pParameter) >= 0) continue;
				delete pParameter;
			}
			break;
		}
		return((cbParameters == sData.cbParameters) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTCExeVerGroup::FindIndex(LPCTSTR pszTag, UINT nType, UINT nStage, UINT nStep, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCExeVerGroupParameter  *pParameter;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pParameter = GetAt(nIndex[0]))) ? ((nIndex[1] = ((pParameter->GetStage() == nStage  &&  pParameter->GetStep() == nStep  &&  pParameter->GetTag() == pszTag && (pParameter->GetAttributes() & (TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION | TCEXEVERGROUPPARAMETER_TYPE_REPORT | TCEXEVERGROUPPARAMETER_TYPE_DUMP | TCEXEVERGROUPPARAMETER_TYPE_STATUS | TCEXEVERGROUPPARAMETER_TYPE_PARAMETER)) <= nType) || (pParameter->GetStage() == nStage  &&  pParameter->GetStep() == nStep  &&  pParameter->GetTag() <= pszTag) || (pParameter->GetStage() == nStage  &&  pParameter->GetStep() <= nStep) || pParameter->GetStage() < nStage)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pParameter = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pParameter->GetStage() == nStage  &&  pParameter->GetStep() == nStep  &&  pParameter->GetTag() == pszTag && (pParameter->GetAttributes() & (TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION | TCEXEVERGROUPPARAMETER_TYPE_REPORT | TCEXEVERGROUPPARAMETER_TYPE_DUMP | TCEXEVERGROUPPARAMETER_TYPE_STATUS | TCEXEVERGROUPPARAMETER_TYPE_PARAMETER)) == nType) || (bInsert && (((pParameter = GetAt(max(nIndex[0] - 1, 0))) && (pParameter->GetStage() != nStage || pParameter->GetStep() != nStep || pParameter->GetTag() != pszTag || (pParameter->GetAttributes() & (TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION | TCEXEVERGROUPPARAMETER_TYPE_REPORT | TCEXEVERGROUPPARAMETER_TYPE_DUMP | TCEXEVERGROUPPARAMETER_TYPE_STATUS | TCEXEVERGROUPPARAMETER_TYPE_PARAMETER)) != nType) && (pParameter = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && (pParameter->GetStage() != nStage || pParameter->GetStep() != nStep || pParameter->GetTag() != pszTag || (pParameter->GetAttributes() & (TCEXEVERGROUPPARAMETER_TYPE_EXCEPTION | TCEXEVERGROUPPARAMETER_TYPE_REPORT | TCEXEVERGROUPPARAMETER_TYPE_DUMP | TCEXEVERGROUPPARAMETER_TYPE_STATUS | TCEXEVERGROUPPARAMETER_TYPE_PARAMETER)) != nType) || !GetSize()))) && lstrlen(pszTag) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCExeVerGroups

CDatabaseTCExeVerGroups::CDatabaseTCExeVerGroups() : CPtrArray()
{
	return;
}

CDatabaseTCExeVerGroups::~CDatabaseTCExeVerGroups()
{
	RemoveAll();
}

INT CDatabaseTCExeVerGroups::Add(CDatabaseTCExeVerGroup *pGroup)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pGroup->GetID(), TRUE)) >= 0) InsertAt(nIndex, pGroup, 1);
	return nIndex;
}

INT CDatabaseTCExeVerGroups::Find(LPCTSTR pszID) CONST
{
	return FindIndex(pszID);
}

CDatabaseTCExeVerGroup *CDatabaseTCExeVerGroups::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCExeVerGroup *)CPtrArray::GetAt(nIndex) : (CDatabaseTCExeVerGroup *)NULL);
}

CDatabaseTCExeVerGroup *CDatabaseTCExeVerGroups::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCExeVerGroup *)CPtrArray::GetAt(nIndex) : (CDatabaseTCExeVerGroup *)NULL);
}

VOID CDatabaseTCExeVerGroups::RemoveAll()
{
	INT  nGroup;
	INT  nGroups;
	CDatabaseTCExeVerGroup  *pGroup;

	for (nGroup = 0, nGroups = (INT)GetSize(); nGroup < nGroups; nGroup++)
	{
		if ((pGroup = GetAt(nGroup))) delete pGroup;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCExeVerGroups::Copy(CONST CDatabaseTCExeVerGroups *pGroups)
{
	INT  nGroup;
	INT  nGroups;
	CDatabaseTCExeVerGroup  *pGroup;

	for (nGroup = 0, nGroups = (INT)pGroups->GetSize(), RemoveAll(); nGroup < nGroups; nGroup++)
	{
		if ((pGroup = new CDatabaseTCExeVerGroup))
		{
			pGroup->Copy(pGroups->GetAt(nGroup));
			InsertAt(nGroup, pGroup, 1);
			continue;
		}
		break;
	}
	return((nGroup == nGroups) ? TRUE : FALSE);
}

BOOL CDatabaseTCExeVerGroups::Compare(CONST CDatabaseTCExeVerGroups *pGroups) CONST
{
	INT  nGroup;
	INT  nGroups;

	for (nGroup = 0, nGroups = (pGroups->GetSize() == GetSize()) ? (INT)GetSize() : -1; nGroup < nGroups; nGroup++)
	{
		if (!pGroups->GetAt(nGroup)->Compare(GetAt(nGroup))) break;
		continue;
	}
	return((nGroup == nGroups) ? TRUE : FALSE);
}

BOOL CDatabaseTCExeVerGroups::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nGroup;
	INT  nGroups;
	CByteArray  nGroupsData;
	CDatabaseTCExeVerGroup  *pGroup;

	for (nGroup = 0, nGroups = (INT)GetSize(), nInfo.RemoveAll(); nGroup < nGroups; nGroup++)
	{
		if ((pGroup = GetAt(nGroup)) && pGroup->Map(nGroupsData, bBinary) && nInfo.Append(nGroupsData) >= 0) continue;
		break;
	}
	return((nGroup == nGroups) ? TRUE : FALSE);
}

BOOL CDatabaseTCExeVerGroups::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbGroup;
	INT  cbGroups;
	CByteArray  nGroupsData;
	CDatabaseTCExeVerGroup  *pGroup;

	for (cbGroups = 0, RemoveAll(); cbGroups < nInfo.GetSize(); cbGroups += cbGroup)
	{
		for (CopyMemory(&cbGroup, nInfo.GetData() + cbGroups, sizeof(cbGroup)), nGroupsData.SetSize(max(min(cbGroup, nInfo.GetSize() - cbGroups), 0)); nGroupsData.GetSize() >= 0; )
		{
			CopyMemory(nGroupsData.GetData(), nInfo.GetData() + cbGroups, nGroupsData.GetSize());
			break;
		}
		if ((pGroup = new CDatabaseTCExeVerGroup))
		{
			if (pGroup->Unmap(nGroupsData, bBinary) && Add(pGroup) >= 0) continue;
			delete pGroup;
		}
		break;
	}
	return((cbGroups == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCExeVerGroups::FindIndex(LPCTSTR pszID, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCExeVerGroup  *pGroup;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pGroup = GetAt(nIndex[0]))) ? ((nIndex[1] = (pGroup->GetID() <= pszID)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pGroup = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pGroup->GetID() == pszID) || (bInsert && (((pGroup = GetAt(max(nIndex[0] - 1, 0))) && pGroup->GetID() != pszID && (pGroup = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pGroup->GetID() != pszID) || !GetSize()))) && lstrlen(pszID) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCSequenceEntryParameter

CDatabaseTCSequenceEntryParameter::CDatabaseTCSequenceEntryParameter() : CDatabaseTCFunctionElement()
{
	m_nBitOffset = -1;
}

VOID CDatabaseTCSequenceEntryParameter::SetTag(LPCTSTR pszTag)
{
	m_szName = pszTag;
}

CString CDatabaseTCSequenceEntryParameter::GetTag() CONST
{
	return m_szName;
}

VOID CDatabaseTCSequenceEntryParameter::SetBitOffset(INT nOffset)
{
	m_nBitOffset = nOffset;
}

INT CDatabaseTCSequenceEntryParameter::GetBitOffset() CONST
{
	return m_nBitOffset;
}

VOID CDatabaseTCSequenceEntryParameter::SetValueSet(LPCTSTR pszSet)
{
	m_szValueSet = pszSet;
}

CString CDatabaseTCSequenceEntryParameter::GetValueSet() CONST
{
	return m_szValueSet;
}

VOID CDatabaseTCSequenceEntryParameter::SetMemoryArea(LPCTSTR pszName, LPCTSTR pszVersion)
{
	m_szMemoryArea[0] = pszName;
	m_szMemoryArea[1] = pszVersion;
}

BOOL CDatabaseTCSequenceEntryParameter::GetMemoryArea(CString &szName, CString &szVersion) CONST
{
	szName = m_szMemoryArea[0];
	szVersion = m_szMemoryArea[1];
	return !szName.IsEmpty();
}

BOOL CDatabaseTCSequenceEntryParameter::Copy(CONST CDatabaseTCSequenceEntryParameter *pSequenceEntryParameter)
{
	m_nBitOffset = pSequenceEntryParameter->m_nBitOffset;
	m_szValueSet = pSequenceEntryParameter->m_szValueSet;
	m_szMemoryArea[0] = pSequenceEntryParameter->m_szMemoryArea[0];
	m_szMemoryArea[1] = pSequenceEntryParameter->m_szMemoryArea[1];
	return CDatabaseTCFunctionElement::Copy(pSequenceEntryParameter);
}

BOOL CDatabaseTCSequenceEntryParameter::Compare(CONST CDatabaseTCSequenceEntryParameter *pSequenceEntryParameter) CONST
{
	return((pSequenceEntryParameter->m_nBitOffset == m_nBitOffset  &&  pSequenceEntryParameter->m_szValueSet == m_szValueSet  &&  pSequenceEntryParameter->m_szMemoryArea[0] == m_szMemoryArea[0] && pSequenceEntryParameter->m_szMemoryArea[1] == m_szMemoryArea[1]) ? CDatabaseTCFunctionElement::Compare(pSequenceEntryParameter) : FALSE);
}

BOOL CDatabaseTCSequenceEntryParameter::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;
	CByteArray  nElementData;

	sData.cbValueSet = (m_szValueSet.GetLength() + 1)*sizeof(TCHAR);
	sData.cbMemoryArea[0] = (m_szMemoryArea[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbMemoryArea[1] = (m_szMemoryArea[1].GetLength() + 1)*sizeof(TCHAR);
	sData.cbElement = (CDatabaseTCFunctionElement::Map(nElementData, bBinary)) ? (INT)nElementData.GetSize() : -1;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbValueSet + sData.cbMemoryArea[0] + sData.cbMemoryArea[1] + max(sData.cbElement, 0))), sData.nBitOffset = m_nBitOffset, sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize && sData.cbElement >= 0; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szValueSet, sData.cbValueSet);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbValueSet), (LPCTSTR)m_szMemoryArea[0], sData.cbMemoryArea[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbMemoryArea[0]), (LPCTSTR)m_szMemoryArea[1], sData.cbMemoryArea[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbMemoryArea[1]), nElementData.GetData(), sData.cbElement);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCSequenceEntryParameter::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;
	CByteArray  nElementData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbValueSet + sData.cbMemoryArea[0] + sData.cbMemoryArea[1] + sData.cbElement && sData.cbValueSet > 0 && sData.cbMemoryArea[0] > 0 && sData.cbMemoryArea[1] > 0 && sData.cbElement >= 0 && sData.bBinary == bBinary; )
	{
		for (nElementData.SetSize(sData.cbElement), CopyMemory(m_szValueSet.GetBufferSetLength(STRINGCHARS(sData.cbValueSet)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbValueSet)), CopyMemory(m_szMemoryArea[0].GetBufferSetLength(STRINGCHARS(sData.cbMemoryArea[0])), nInfo.GetData() + (cbData = cbData + sData.cbValueSet), STRINGBYTES(sData.cbMemoryArea[0])), CopyMemory(m_szMemoryArea[1].GetBufferSetLength(STRINGCHARS(sData.cbMemoryArea[1])), nInfo.GetData() + (cbData = cbData + sData.cbMemoryArea[0]), STRINGBYTES(sData.cbMemoryArea[1])), m_nBitOffset = sData.nBitOffset, m_szValueSet.ReleaseBuffer(), m_szMemoryArea[0].ReleaseBuffer(), m_szMemoryArea[1].ReleaseBuffer(); nElementData.GetSize() == sData.cbElement; )
		{
			CopyMemory(nElementData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbMemoryArea[1]), sData.cbElement);
			return CDatabaseTCFunctionElement::Unmap(nElementData, bBinary);
		}
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCSequenceEntry

CDatabaseTCSequenceEntry::CDatabaseTCSequenceEntry() : CPtrArray()
{
	m_nAttributes = 0;
	m_nBlockMember = 0;
	m_dwRelDelta = 0;
	m_dwExeDelta = 0;
	m_tExeTime = 0;
	m_bExeEarlier = FALSE;
}

CDatabaseTCSequenceEntry::~CDatabaseTCSequenceEntry()
{
	RemoveAll();
}

VOID CDatabaseTCSequenceEntry::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCSequenceEntry::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCSequenceEntry::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCSequenceEntry::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTCSequenceEntry::SetAttributes(ULONGLONG nAttributes)
{
	m_nAttributes = nAttributes;
}

ULONGLONG CDatabaseTCSequenceEntry::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCSequenceEntry::SetAssociated1Step(LPCTSTR pszName)
{
	m_sz1Step = pszName;
}

CString CDatabaseTCSequenceEntry::GetAssociated1Step() CONST
{
	return m_sz1Step;
}

VOID CDatabaseTCSequenceEntry::SetBlockMembership(INT nMember)
{
	m_nBlockMember = nMember;
}

INT CDatabaseTCSequenceEntry::GetBlockMembership() CONST
{
	return m_nBlockMember;
}

VOID CDatabaseTCSequenceEntry::SetReleaseDeltaTime(DWORD dwDelta)
{
	m_dwRelDelta = dwDelta;
}

DWORD CDatabaseTCSequenceEntry::GetReleaseDeltaTime() CONST
{
	return m_dwRelDelta;
}

VOID CDatabaseTCSequenceEntry::SetExecutionTime(CONST CTimeTag &tTime)
{
	m_tExeTime = tTime;
}

CTimeTag CDatabaseTCSequenceEntry::GetExecutionTime() CONST
{
	return m_tExeTime;
}

VOID CDatabaseTCSequenceEntry::SetExecutionDeltaTime(DWORD dwDelta, BOOL bEarlier)
{
	m_dwExeDelta = dwDelta;
	m_bExeEarlier = bEarlier;
}

DWORD CDatabaseTCSequenceEntry::GetExecutionDeltaTime(BOOL &bEarlier) CONST
{
	bEarlier = m_bExeEarlier;
	return m_dwExeDelta;
}
DWORD CDatabaseTCSequenceEntry::GetExecutionDeltaTime() CONST
{
	return m_dwExeDelta;
}

BOOL CDatabaseTCSequenceEntry::IsEarlierExecutionDeltaTime() CONST
{
	return m_bExeEarlier;
}

INT CDatabaseTCSequenceEntry::Add(CDatabaseTCSequenceEntryParameter *pParameter)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pParameter->GetTag(), pParameter->GetBytePos(), pParameter->GetBitPos())) >= 0) InsertAt(nIndex, pParameter, 1);
	return nIndex;
}

INT CDatabaseTCSequenceEntry::Find(LPCTSTR pszTag, INT nOccurrence) CONST
{
	INT  nCount;
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (INT)GetSize(), nCount = 0; nParameter < nParameters; nParameter++)
	{
		if (GetAt(nParameter)->GetName() == pszTag)
		{
			if (nCount++ == nOccurrence) break;
			continue;
		}
	}
	return((nOccurrence >= 0) ? ((nParameter < nParameters) ? nParameter : -1) : nCount);
}
INT CDatabaseTCSequenceEntry::Find(LPCTSTR pszTag, INT nBytePos, INT nBitPos) CONST
{
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if (GetAt(nParameter)->GetTag() == pszTag  &&  GetAt(nParameter)->GetBytePos() == nBytePos  &&  GetAt(nParameter)->GetBitPos() == nBitPos) break;
		continue;
	}
	return((nParameter < nParameters) ? nParameter : -1);
}

CDatabaseTCSequenceEntryParameter *CDatabaseTCSequenceEntry::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCSequenceEntryParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTCSequenceEntryParameter *)NULL);
}

CDatabaseTCSequenceEntryParameter *CDatabaseTCSequenceEntry::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCSequenceEntryParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTCSequenceEntryParameter *)NULL);
}

VOID CDatabaseTCSequenceEntry::RemoveAll()
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCSequenceEntryParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter))) delete pParameter;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCSequenceEntry::Copy(CONST CDatabaseTCSequenceEntry *pSequenceEntry)
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCSequenceEntryParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)pSequenceEntry->GetSize(), m_szName = pSequenceEntry->m_szName, m_szDescription = pSequenceEntry->m_szDescription, m_nAttributes = pSequenceEntry->m_nAttributes, m_sz1Step = pSequenceEntry->m_sz1Step, m_nBlockMember = pSequenceEntry->m_nBlockMember, m_dwRelDelta = pSequenceEntry->m_dwRelDelta, m_tExeTime = pSequenceEntry->m_tExeTime, m_dwExeDelta = pSequenceEntry->m_dwExeDelta, m_bExeEarlier = pSequenceEntry->m_bExeEarlier, RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = new CDatabaseTCSequenceEntryParameter))
		{
			if (pParameter->Copy(pSequenceEntry->GetAt(nParameter)))
			{
				InsertAt(nParameter, pParameter, 1);
				continue;
			}
			delete pParameter;
		}
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCSequenceEntry::Compare(CONST CDatabaseTCSequenceEntry *pSequenceEntry) CONST
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCSequenceEntryParameter  *pParameter;

	for (nParameter = 0, nParameters = (pSequenceEntry->m_szName == m_szName && pSequenceEntry->m_szDescription == m_szDescription && pSequenceEntry->m_nAttributes == m_nAttributes && pSequenceEntry->m_sz1Step == m_sz1Step && pSequenceEntry->m_nBlockMember == m_nBlockMember && pSequenceEntry->m_dwRelDelta == m_dwRelDelta && pSequenceEntry->m_tExeTime == m_tExeTime && pSequenceEntry->m_dwExeDelta == m_dwExeDelta && pSequenceEntry->m_bExeEarlier == m_bExeEarlier && pSequenceEntry->GetSize() == GetSize()) ? (INT)pSequenceEntry->GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = pSequenceEntry->GetAt(nParameter)) && pParameter->Compare(GetAt(nParameter))) continue;
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCSequenceEntry::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nParameter;
	INT  nParameters;
	CByteArray  nParametersData[2];
	CDatabaseTCSequenceEntryParameter  *pParameter;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cb1Step = (m_sz1Step.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nParameter = 0, nParameters = (INT)GetSize(), sData.nAttributes = m_nAttributes, sData.nBlockMember = m_nBlockMember, sData.dwRelDelta = m_dwRelDelta, sData.tExeTime = m_tExeTime.GetTime(), sData.dwExeDelta = m_dwExeDelta, sData.bExeEarlier = m_bExeEarlier, sData.bBinary = bBinary; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)) && pParameter->Map(nParametersData[1], bBinary) && nParametersData[0].Append(nParametersData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cb1Step + (sData.cbParameters = (INT)(nParametersData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nParameter == nParameters; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_sz1Step, sData.cb1Step);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cb1Step), nParametersData[0].GetData(), sData.cbParameters);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCSequenceEntry::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbParameter;
	INT  cbParameters;
	CByteArray  nParametersData[2];
	CDatabaseTCSequenceEntryParameter  *pParameter;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cb1Step + sData.cbParameters && sData.cbName > 0 && sData.cbDescription > 0 && sData.cb1Step > 0 && sData.cbParameters >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription));
		CopyMemory(m_sz1Step.GetBufferSetLength(STRINGCHARS(sData.cb1Step)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cb1Step));
		for (nParametersData[0].SetSize(sData.cbParameters), CopyMemory(nParametersData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cb1Step), sData.cbParameters), m_nAttributes = sData.nAttributes, m_nBlockMember = sData.nBlockMember, m_dwRelDelta = sData.dwRelDelta, m_tExeTime = sData.tExeTime, m_dwExeDelta = sData.dwExeDelta, m_bExeEarlier = sData.bExeEarlier, m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), m_sz1Step.ReleaseBuffer(), RemoveAll(), cbParameter = cbParameters = 0; cbParameters < sData.cbParameters; cbParameters += cbParameter)
		{
			for (CopyMemory(&cbParameter, nParametersData[0].GetData() + cbParameters, sizeof(cbParameter)), nParametersData[1].SetSize(max(min(cbParameter, nParametersData[0].GetSize() - cbParameters), 0)); nParametersData[1].GetSize() >= 0; )
			{
				CopyMemory(nParametersData[1].GetData(), nParametersData[0].GetData() + cbParameters, nParametersData[1].GetSize());
				break;
			}
			if ((pParameter = new CDatabaseTCSequenceEntryParameter))
			{
				if (pParameter->Unmap(nParametersData[1], bBinary) && Add(pParameter) >= 0) continue;
				delete pParameter;
			}
			break;
		}
		return((cbParameters == sData.cbParameters) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTCSequenceEntry::FindIndex(LPCTSTR pszTag, INT nBytePos, INT nBitPos) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	INT  nBitOffset[2];
	CDatabaseTCSequenceEntryParameter  *pParameter;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2, nBitOffset[0] = 8 * nBytePos + nBitPos; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pParameter = GetAt(nIndex[0]))) ? (((nIndex[1] = ((nBitOffset[1] = 8 * pParameter->GetBytePos() + pParameter->GetBitPos()) == nBitOffset[0] && pParameter->GetTag().Compare(pszTag) <= 0) || nBitOffset[0] > nBitOffset[1])) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return nIndex[0];
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCSequence

CDatabaseTCSequence::CDatabaseTCSequence() : CPtrArray()
{
	m_nAttributes = 0;
	m_tDate[0] = 0;
	m_tDate[1] = 0;
	m_nStatus = TCSEQUENCE_RECORDSTATUS_NONE;
}

CDatabaseTCSequence::~CDatabaseTCSequence()
{
	RemoveAll();
}

VOID CDatabaseTCSequence::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCSequence::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCSequence::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCSequence::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTCSequence::SetDetails(LPCTSTR pszDetails)
{
	m_szDetails = pszDetails;
}

CString CDatabaseTCSequence::GetDetails() CONST
{
	return m_szDetails;
}

VOID CDatabaseTCSequence::SetAttributes(ULONGLONG nAttributes)
{
	m_nAttributes = nAttributes;
}

ULONGLONG CDatabaseTCSequence::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCSequence::SetUser(LPCTSTR pszUser)
{
	m_szUser = pszUser;
}

CString CDatabaseTCSequence::GetUser() CONST
{
	return m_szUser;
}

VOID CDatabaseTCSequence::SetDate(CONST CTimeKey &tDate)
{
	m_tDate[0] = tDate;
}

CTimeKey CDatabaseTCSequence::GetDate() CONST
{
	return m_tDate[0];
}

VOID CDatabaseTCSequence::SetDestinationSubSystem(LPCTSTR pszSubSystem)
{
	m_szDestinationSubSystem = pszSubSystem;
}

CString CDatabaseTCSequence::GetDestinationSubSystem() CONST
{
	return m_szDestinationSubSystem;
}

VOID CDatabaseTCSequence::SetDestinationSubSchedule(LPCTSTR pszSubSchedule)
{
	m_szDestinationSubSchedule = pszSubSchedule;
}

CString CDatabaseTCSequence::GetDestinationSubSchedule() CONST
{
	return m_szDestinationSubSchedule;
}

VOID CDatabaseTCSequence::SetMissionPlannerEvent(LPCTSTR pszEvent)
{
	m_szMissionPlannerEvent = pszEvent;
}

CString CDatabaseTCSequence::GetMissionPlannerEvent() CONST
{
	return m_szMissionPlannerEvent;
}

VOID CDatabaseTCSequence::SetDocumentName(LPCTSTR pszName)
{
	m_szDocumentName = pszName;
}

CString CDatabaseTCSequence::GetDocumentName() CONST
{
	return m_szDocumentName;
}

VOID CDatabaseTCSequence::SetDocumentIssue(LPCTSTR pszIssue)
{
	m_szDocumentIssue = pszIssue;
}

CString CDatabaseTCSequence::GetDocumentIssue() CONST
{
	return m_szDocumentIssue;
}

VOID CDatabaseTCSequence::SetDocumentDate(CONST CTimeKey &tDate)
{
	m_tDate[1] = tDate;
}

CTimeKey CDatabaseTCSequence::GetDocumentDate() CONST
{
	return m_tDate[1];
}

VOID CDatabaseTCSequence::SetParameterSets(CONST CStringArray &szSets)
{
	m_szParameterSets.Copy(szSets);
}

INT CDatabaseTCSequence::GetParameterSets(CStringArray &szSets) CONST
{
	szSets.Copy(m_szParameterSets);
	return((INT)szSets.GetSize());
}

BOOL CDatabaseTCSequence::SetParameters(CONST CDatabaseTCParameters &pParameters)
{
	return m_pParameters.Copy(&pParameters);
}

INT CDatabaseTCSequence::GetParameters(CDatabaseTCParameters &pParameters) CONST
{
	return((pParameters.Copy(&m_pParameters)) ? (INT)pParameters.GetSize() : -1);
}

VOID CDatabaseTCSequence::SetXmlCode(LPCTSTR pszCode)
{
	m_szXmlCode = pszCode;
}

CString CDatabaseTCSequence::GetXmlCode() CONST
{
	return m_szXmlCode;
}

VOID CDatabaseTCSequence::SetFileName(LPCTSTR pszFileName)
{
	m_szFileName = pszFileName;
}

CString CDatabaseTCSequence::GetFileName() CONST
{
	return m_szFileName;
}

VOID CDatabaseTCSequence::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseTCSequence::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseTCSequence::Add(CDatabaseTCSequenceEntry *pEntry)
{
	INT  nIndex;

	if ((nIndex = FindIndex(((pEntry->GetAttributes() & TCSEQUENCEENTRY_TYPE_TEXTCOMMENT) == 0) ? pEntry->GetName() : SPACE, TRUE)) >= 0) InsertAt(nIndex, pEntry, 1);
	return nIndex;
}

INT CDatabaseTCSequence::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTCSequenceEntry *CDatabaseTCSequence::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCSequenceEntry *)CPtrArray::GetAt(nIndex) : (CDatabaseTCSequenceEntry *)NULL);
}

CDatabaseTCSequenceEntry *CDatabaseTCSequence::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCSequenceEntry *)CPtrArray::GetAt(nIndex) : (CDatabaseTCSequenceEntry *)NULL);
}

VOID CDatabaseTCSequence::RemoveAll()
{
	INT  nEntry;
	INT  nEntries;
	CDatabaseTCSequenceEntry  *pEntry;

	for (nEntry = 0, nEntries = (INT)GetSize(), m_szParameterSets.RemoveAll(), m_pParameters.RemoveAll(); nEntry < nEntries; nEntry++)
	{
		if ((pEntry = GetAt(nEntry))) delete pEntry;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCSequence::Copy(CONST CDatabaseTCSequence *pSequence)
{
	INT  nEntry;
	INT  nEntries;
	CDatabaseTCSequenceEntry  *pEntry;

	for (nEntry = 0, nEntries = (INT)pSequence->GetSize(), RemoveAll(), m_szName = pSequence->m_szName, m_szDescription = pSequence->m_szDescription, m_szDetails = pSequence->m_szDetails, m_nAttributes = pSequence->m_nAttributes, m_szUser = pSequence->m_szUser, m_tDate[0] = pSequence->m_tDate[0], m_tDate[1] = pSequence->m_tDate[1], m_szDocumentName = pSequence->m_szDocumentName, m_szDocumentIssue = pSequence->m_szDocumentIssue, m_szDestinationSubSystem = pSequence->m_szDestinationSubSystem, m_szDestinationSubSchedule = pSequence->m_szDestinationSubSchedule, m_szMissionPlannerEvent = pSequence->m_szMissionPlannerEvent, m_szParameterSets.Copy(pSequence->m_szParameterSets), m_pParameters.Copy(&pSequence->m_pParameters), m_szXmlCode = pSequence->m_szXmlCode, m_szFileName = pSequence->m_szFileName, m_nStatus = pSequence->m_nStatus; nEntry < nEntries; nEntry++)
	{
		if ((pEntry = new CDatabaseTCSequenceEntry))
		{
			if (pEntry->Copy(pSequence->GetAt(nEntry)))
			{
				InsertAt(nEntry, pEntry, 1);
				continue;
			}
			delete pEntry;
		}
		break;
	}
	return((nEntry == nEntries) ? TRUE : FALSE);
}

BOOL CDatabaseTCSequence::Compare(CONST CDatabaseTCSequence *pSequence) CONST
{
	INT  nEntry;
	INT  nEntries;
	INT  nSet[2];
	INT  nSets[2];
	CDatabaseTCSequenceEntry  *pEntry;

	for (nEntry = 0, nEntries = (pSequence->m_szName == m_szName && pSequence->m_szDescription == m_szDescription && pSequence->m_szDetails == m_szDetails && pSequence->m_nAttributes == m_nAttributes && pSequence->m_szUser == m_szUser && pSequence->m_tDate[0] == m_tDate[0] && pSequence->m_tDate[1] == m_tDate[1] && !pSequence->m_szDocumentName.CompareNoCase(m_szDocumentName) && !pSequence->m_szDocumentIssue.CompareNoCase(m_szDocumentIssue) && pSequence->m_szDestinationSubSystem == m_szDestinationSubSystem && pSequence->m_szDestinationSubSchedule == m_szDestinationSubSchedule && pSequence->m_szMissionPlannerEvent == m_szMissionPlannerEvent && pSequence->m_pParameters.Compare(&m_pParameters) && pSequence->m_szXmlCode == m_szXmlCode && !pSequence->m_szFileName.CompareNoCase(m_szFileName) && pSequence->m_nStatus == m_nStatus && pSequence->GetSize() == GetSize()) ? (INT)pSequence->GetSize() : -1; nEntry < nEntries; nEntry++)
	{
		if ((pEntry = pSequence->GetAt(nEntry)) && pEntry->Compare(GetAt(nEntry))) continue;
		break;
	}
	for (nSet[0] = 0, nSets[0] = (pSequence->m_szParameterSets.GetSize() == m_szParameterSets.GetSize()) ? (INT)pSequence->m_szParameterSets.GetSize() : -1; nSet[0] < nSets[0]; nSet[0]++)
	{
		for (nSet[1] = 0, nSets[1] = (INT)m_szParameterSets.GetSize(); nSet[1] < nSets[1]; nSet[1]++)
		{
			if (pSequence->m_szParameterSets.GetAt(nSet[0]) == m_szParameterSets.GetAt(nSet[1])) break;
			continue;
		}
		if (nSet[1] == nSets[1]) break;
	}
	return((nEntry == nEntries  &&  nSet[0] == nSets[0]) ? TRUE : FALSE);
}

BOOL CDatabaseTCSequence::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nEntry;
	INT  nEntries;
	INT  nParameterSet;
	INT  nParameterSets;
	CByteArray  nEntriesData[2];
	CByteArray  nParametersData;
	CByteArray  nParameterSetsData;
	CDatabaseTCSequenceEntry  *pEntry;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbUser = (m_szUser.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDetails = (m_szDetails.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDestinationSubSystem = (m_szDestinationSubSystem.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDestinationSubSchedule = (m_szDestinationSubSchedule.GetLength() + 1)*sizeof(TCHAR);
	sData.cbMissionPlannerEvent = (m_szMissionPlannerEvent.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDocumentName = (!bBinary) ? ((m_szDocumentName.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbDocumentIssue = (!bBinary) ? ((m_szDocumentIssue.GetLength() + 1)*sizeof(TCHAR)) : 0;
	for (nParameterSet = 0, nParameterSets = (INT)m_szParameterSets.GetSize(), sData.nAttributes = m_nAttributes, sData.tDate[0] = m_tDate[0].GetTime(), sData.tDate[1] = m_tDate[1].GetTime(), sData.nStatus = m_nStatus, sData.bBinary = bBinary, sData.cbParameterSets = 0; nParameterSet < nParameterSets; nParameterSet++, sData.cbParameterSets += cbData)
	{
		nParameterSetsData.SetSize(sData.cbParameterSets + (cbData = (m_szParameterSets.GetAt(nParameterSet).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nParameterSetsData.GetData() + sData.cbParameterSets, (LPCTSTR)m_szParameterSets.GetAt(nParameterSet), cbData);
	}
	for (nEntry = 0, nEntries = ((sData.cbParameters = (m_pParameters.Map(nParametersData, bBinary)) ? (INT)nParametersData.GetSize() : -1) >= 0) ? (INT)GetSize() : -1; nEntry < nEntries; nEntry++)
	{
		if ((pEntry = GetAt(nEntry)) && pEntry->Map(nEntriesData[1], bBinary) && nEntriesData[0].Append(nEntriesData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbDetails + sData.cbUser + (sData.cbEntries = (INT)(nEntriesData[0].GetSize()*sizeof(BYTE))) + sData.cbDocumentName + sData.cbDocumentIssue + sData.cbDestinationSubSystem + sData.cbDestinationSubSchedule + sData.cbMissionPlannerEvent + sData.cbParameterSets + sData.cbParameters)); nInfo.GetSize() == sData.cbSize && nEntry == nEntries; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szUser, sData.cbUser);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbUser), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szDetails, sData.cbDetails);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDetails), (LPCTSTR)m_szDestinationSubSystem, sData.cbDestinationSubSystem);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDestinationSubSystem), (LPCTSTR)m_szDestinationSubSchedule, sData.cbDestinationSubSchedule);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDestinationSubSchedule), (LPCTSTR)m_szMissionPlannerEvent, sData.cbMissionPlannerEvent);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbMissionPlannerEvent), (LPCTSTR)m_szDocumentName, sData.cbDocumentName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDocumentName), (LPCTSTR)m_szDocumentIssue, sData.cbDocumentIssue);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDocumentIssue), nParameterSetsData.GetData(), sData.cbParameterSets);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbParameterSets), nParametersData.GetData(), sData.cbParameters);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbParameters), nEntriesData[0].GetData(), sData.cbEntries);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCSequence::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbEntry;
	INT  cbEntries;
	INT  cbParameterSet;
	INT  cbParameterSets;
	CByteArray  nEntriesData[2];
	CByteArray  nParametersData;
	CByteArray  nParameterSetsData;
	CDatabaseTCSequenceEntry  *pEntry;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbUser + sData.cbDescription + sData.cbDetails + sData.cbDestinationSubSystem + sData.cbDestinationSubSchedule + sData.cbMissionPlannerEvent + sData.cbDocumentName + sData.cbDocumentIssue + sData.cbParameterSets + sData.cbParameters + sData.cbEntries && sData.cbName > 0 && sData.cbUser > 0 && sData.cbDescription > 0 && sData.cbDetails > 0 && sData.cbDestinationSubSystem > 0 && sData.cbDestinationSubSchedule > 0 && sData.cbMissionPlannerEvent > 0 && sData.cbDocumentName >= 0 && sData.cbDocumentIssue >= 0 && sData.cbParameterSets >= 0 && sData.cbParameters >= 0 && sData.cbEntries >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szUser.GetBufferSetLength(STRINGCHARS(sData.cbUser)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbUser));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbUser), STRINGBYTES(sData.cbDescription));
		CopyMemory(m_szDetails.GetBufferSetLength(STRINGCHARS(sData.cbDetails)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbDetails));
		CopyMemory(m_szDestinationSubSystem.GetBufferSetLength(STRINGCHARS(sData.cbDestinationSubSystem)), nInfo.GetData() + (cbData = cbData + sData.cbDetails), STRINGBYTES(sData.cbDestinationSubSystem));
		CopyMemory(m_szDestinationSubSchedule.GetBufferSetLength(STRINGCHARS(sData.cbDestinationSubSchedule)), nInfo.GetData() + (cbData = cbData + sData.cbDestinationSubSystem), STRINGBYTES(sData.cbDestinationSubSchedule));
		CopyMemory(m_szMissionPlannerEvent.GetBufferSetLength(STRINGCHARS(sData.cbMissionPlannerEvent)), nInfo.GetData() + (cbData = cbData + sData.cbDestinationSubSchedule), STRINGBYTES(sData.cbMissionPlannerEvent));
		CopyMemory(m_szDocumentName.GetBufferSetLength(STRINGCHARS(sData.cbDocumentName)), nInfo.GetData() + (cbData = cbData + sData.cbMissionPlannerEvent), STRINGBYTES(sData.cbDocumentName));
		CopyMemory(m_szDocumentIssue.GetBufferSetLength(STRINGCHARS(sData.cbDocumentIssue)), nInfo.GetData() + (cbData = cbData + sData.cbDocumentName), STRINGBYTES(sData.cbDocumentIssue));
		for (nParameterSetsData.SetSize(sData.cbParameterSets), CopyMemory(nParameterSetsData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbDocumentIssue), sData.cbParameterSets), m_nAttributes = sData.nAttributes, m_tDate[0] = sData.tDate[0], m_tDate[1] = sData.tDate[1], m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), m_szUser.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), m_szDetails.ReleaseBuffer(), m_szDestinationSubSystem.ReleaseBuffer(), m_szDestinationSubSchedule.ReleaseBuffer(), m_szMissionPlannerEvent.ReleaseBuffer(), m_szDocumentName.ReleaseBuffer(), m_szDocumentIssue.ReleaseBuffer(), m_szParameterSets.RemoveAll(), RemoveAll(), cbParameterSet = cbParameterSets = 0; cbParameterSets < sData.cbParameterSets; cbParameterSets += (cbParameterSet = (m_szParameterSets.GetAt(m_szParameterSets.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
		{
			m_szParameterSets.Add((LPCTSTR)(nParameterSetsData.GetData() + cbParameterSets));
			continue;
		}
		for (nParametersData.SetSize(sData.cbParameters), nEntriesData[0].SetSize(sData.cbEntries), CopyMemory(nParametersData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbParameterSets), sData.cbParameters), CopyMemory(nEntriesData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbParameters), sData.cbEntries), cbEntry = cbEntries = 0; cbEntries < sData.cbEntries; cbEntries += cbEntry)
		{
			for (CopyMemory(&cbEntry, nEntriesData[0].GetData() + cbEntries, sizeof(cbEntry)), nEntriesData[1].SetSize(max(min(cbEntry, nEntriesData[0].GetSize() - cbEntries), 0)); nEntriesData[1].GetSize() >= 0; )
			{
				CopyMemory(nEntriesData[1].GetData(), nEntriesData[0].GetData() + cbEntries, nEntriesData[1].GetSize());
				break;
			}
			if ((pEntry = new CDatabaseTCSequenceEntry))
			{
				if (pEntry->Unmap(nEntriesData[1], bBinary) && Add(pEntry) >= 0) continue;
				delete pEntry;
			}
			break;
		}
		return((m_pParameters.Unmap(nParametersData, bBinary) && cbEntries == sData.cbEntries) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTCSequence::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCSequenceEntry  *pEntry;

	for (nIndex = nMinIndex = (bInsert) ? (INT)GetSize() : 0, nMaxIndex = (lstrlen(pszName) > 0) ? (INT)GetSize() : -1; nIndex < nMaxIndex; nIndex++)
	{
		if ((pEntry = GetAt(nIndex)) && pEntry->GetName() == pszName) break;
		continue;
	}
	return(((bInsert || nIndex < nMaxIndex) && nMaxIndex >= 0) ? nIndex : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCSequences

CDatabaseTCSequences::CDatabaseTCSequences() : CPtrArray()
{
	return;
}

CDatabaseTCSequences::~CDatabaseTCSequences()
{
	RemoveAll();
}

INT CDatabaseTCSequences::Add(CDatabaseTCSequence *pSequence)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pSequence->GetName(), TRUE)) >= 0) InsertAt(nIndex, pSequence, 1);
	return nIndex;
}

INT CDatabaseTCSequences::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTCSequence *CDatabaseTCSequences::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCSequence *)CPtrArray::GetAt(nIndex) : (CDatabaseTCSequence *)NULL);
}

CDatabaseTCSequence *CDatabaseTCSequences::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCSequence *)CPtrArray::GetAt(nIndex) : (CDatabaseTCSequence *)NULL);
}

VOID CDatabaseTCSequences::RemoveAll()
{
	INT  nSequence;
	INT  nSequences;
	CDatabaseTCSequence  *pSequence;

	for (nSequence = 0, nSequences = (INT)GetSize(); nSequence < nSequences; nSequence++)
	{
		if ((pSequence = GetAt(nSequence))) delete pSequence;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCSequences::Copy(CONST CDatabaseTCSequences *pSequences)
{
	INT  nSequence;
	INT  nSequences;
	CDatabaseTCSequence  *pSequence;

	for (nSequence = 0, nSequences = (INT)pSequences->GetSize(), RemoveAll(); nSequence < nSequences; nSequence++)
	{
		if ((pSequence = new CDatabaseTCSequence))
		{
			pSequence->Copy(pSequences->GetAt(nSequence));
			InsertAt(nSequence, pSequence, 1);
			continue;
		}
		break;
	}
	return((nSequence == nSequences) ? TRUE : FALSE);
}

BOOL CDatabaseTCSequences::Compare(CONST CDatabaseTCSequences *pSequences) CONST
{
	INT  nSequence;
	INT  nSequences;

	for (nSequence = 0, nSequences = (pSequences->GetSize() == GetSize()) ? (INT)GetSize() : -1; nSequence < nSequences; nSequence++)
	{
		if (!pSequences->GetAt(nSequence)->Compare(GetAt(nSequence))) break;
		continue;
	}
	return((nSequence == nSequences) ? TRUE : FALSE);
}

BOOL CDatabaseTCSequences::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nSequence;
	INT  nSequences;
	CByteArray  nSequencesData;
	CDatabaseTCSequence  *pSequence;

	for (nSequence = 0, nSequences = (INT)GetSize(), nInfo.RemoveAll(); nSequence < nSequences; nSequence++)
	{
		if ((pSequence = GetAt(nSequence)) && pSequence->Map(nSequencesData, bBinary) && nInfo.Append(nSequencesData) >= 0) continue;
		break;
	}
	return((nSequence == nSequences) ? TRUE : FALSE);
}

BOOL CDatabaseTCSequences::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbSequence;
	INT  cbSequences;
	CByteArray  nSequencesData;
	CDatabaseTCSequence  *pSequence;

	for (cbSequences = 0, RemoveAll(); cbSequences < nInfo.GetSize(); cbSequences += cbSequence)
	{
		for (CopyMemory(&cbSequence, nInfo.GetData() + cbSequences, sizeof(cbSequence)), nSequencesData.SetSize(max(min(cbSequence, nInfo.GetSize() - cbSequences), 0)); nSequencesData.GetSize() >= 0; )
		{
			CopyMemory(nSequencesData.GetData(), nInfo.GetData() + cbSequences, nSequencesData.GetSize());
			break;
		}
		if ((pSequence = new CDatabaseTCSequence))
		{
			if (pSequence->Unmap(nSequencesData, bBinary) && Add(pSequence) >= 0) continue;
			delete pSequence;
		}
		break;
	}
	return((cbSequences == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCSequences::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCSequence  *pSequence;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pSequence = GetAt(nIndex[0]))) ? ((nIndex[1] = (pSequence->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pSequence = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pSequence->GetName() == pszName) || (bInsert && (((pSequence = GetAt(max(nIndex[0] - 1, 0))) && pSequence->GetName() != pszName && (pSequence = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pSequence->GetName() != pszName) || !GetSize()) && lstrlen(pszName) > 0)) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCProcedureIdentifier

CDatabaseTCProcedureIdentifier::CDatabaseTCProcedureIdentifier() : CDatabaseTCParameter()
{
	m_nValue[0] = 0;
	m_nValue[1] = 0;
}

VOID CDatabaseTCProcedureIdentifier::SetMinValue(ULONGLONG nValue)
{
	m_nValue[0] = nValue;
}

ULONGLONG CDatabaseTCProcedureIdentifier::GetMinValue() CONST
{
	return m_nValue[0];
}

VOID CDatabaseTCProcedureIdentifier::SetMinValueAsText(LPCTSTR pszValue)
{
	m_szValue[0] = pszValue;
}

CString CDatabaseTCProcedureIdentifier::GetMinValueAsText() CONST
{
	return m_szValue[0];
}

VOID CDatabaseTCProcedureIdentifier::SetMaxValue(ULONGLONG nValue)
{
	m_nValue[1] = nValue;
}

ULONGLONG CDatabaseTCProcedureIdentifier::GetMaxValue() CONST
{
	return m_nValue[1];
}

VOID CDatabaseTCProcedureIdentifier::SetMaxValueAsText(LPCTSTR pszValue)
{
	m_szValue[1] = pszValue;
}

CString CDatabaseTCProcedureIdentifier::GetMaxValueAsText() CONST
{
	return m_szValue[1];
}

BOOL CDatabaseTCProcedureIdentifier::Copy(CONST CDatabaseTCProcedureIdentifier *pIdentifier)
{
	m_nValue[0] = pIdentifier->m_nValue[0];
	m_nValue[1] = pIdentifier->m_nValue[1];
	m_szValue[0] = pIdentifier->m_szValue[0];
	m_szValue[1] = pIdentifier->m_szValue[1];
	return CDatabaseTCParameter::Copy(pIdentifier);
}

BOOL CDatabaseTCProcedureIdentifier::Compare(CONST CDatabaseTCProcedureIdentifier *pIdentifier) CONST
{
	return((pIdentifier->m_nValue[0] == m_nValue[0] && pIdentifier->m_nValue[1] == m_nValue[1] && pIdentifier->m_szValue[0] == m_szValue[0] && pIdentifier->m_szValue[1] == m_szValue[1]) ? CDatabaseTCParameter::Compare(pIdentifier) : FALSE);
}

BOOL CDatabaseTCProcedureIdentifier::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;
	CByteArray  nData;

	sData.cbValue[0] = (m_szValue[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbValue[1] = (m_szValue[1].GetLength() + 1)*sizeof(TCHAR);
	sData.cbInfo = (CDatabaseTCParameter::Map(nData, FALSE)) ? (INT)nData.GetSize() : -1;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + max(sData.cbInfo, 0) + sData.cbValue[0] + sData.cbValue[1])), sData.nValue[0] = m_nValue[0], sData.nValue[1] = m_nValue[1]; nInfo.GetSize() == sData.cbSize && sData.cbInfo >= 0; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), nData.GetData(), sData.cbInfo);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbInfo), (LPCTSTR)m_szValue[0], sData.cbValue[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbValue[0]), (LPCTSTR)m_szValue[1], sData.cbValue[1]);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCProcedureIdentifier::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;
	CByteArray  nData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbInfo + sData.cbValue[0] + sData.cbValue[1] && sData.cbValue[0] > 0 && sData.cbValue[1] > 0 && sData.cbInfo > 0; )
	{
		for (nData.SetSize(sData.cbInfo), CopyMemory(nData.GetData(), nInfo.GetData() + (cbData = sizeof(DATA)), sData.cbInfo); CDatabaseTCParameter::Unmap(nData, FALSE); )
		{
			CopyMemory(m_szValue[0].GetBufferSetLength(STRINGCHARS(sData.cbValue[0])), nInfo.GetData() + (cbData = cbData + sData.cbInfo), STRINGBYTES(sData.cbValue[0]));
			CopyMemory(m_szValue[1].GetBufferSetLength(STRINGCHARS(sData.cbValue[1])), nInfo.GetData() + (cbData = cbData + sData.cbValue[0]), STRINGBYTES(sData.cbValue[1]));
			m_nValue[0] = sData.nValue[0];
			m_nValue[1] = sData.nValue[1];
			m_szValue[0].ReleaseBuffer();
			m_szValue[1].ReleaseBuffer();
			return TRUE;
		}
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCProcedureIdentifiers

CDatabaseTCProcedureIdentifiers::CDatabaseTCProcedureIdentifiers() : CPtrArray()
{
	return;
}

CDatabaseTCProcedureIdentifiers::~CDatabaseTCProcedureIdentifiers()
{
	RemoveAll();
}

INT CDatabaseTCProcedureIdentifiers::Add(CDatabaseTCProcedureIdentifier *pIdentifier)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pIdentifier->GetTag(), TRUE)) >= 0) InsertAt(nIndex, pIdentifier, 1);
	return nIndex;
}

INT CDatabaseTCProcedureIdentifiers::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTCProcedureIdentifier *CDatabaseTCProcedureIdentifiers::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCProcedureIdentifier *)CPtrArray::GetAt(nIndex) : (CDatabaseTCProcedureIdentifier *)NULL);
}

CDatabaseTCProcedureIdentifier *CDatabaseTCProcedureIdentifiers::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCProcedureIdentifier *)CPtrArray::GetAt(nIndex) : (CDatabaseTCProcedureIdentifier *)NULL);
}

VOID CDatabaseTCProcedureIdentifiers::RemoveAll()
{
	INT  nIdentifier;
	INT  nIdentifiers;
	CDatabaseTCProcedureIdentifier  *pIdentifier;

	for (nIdentifier = 0, nIdentifiers = (INT)GetSize(); nIdentifier < nIdentifiers; nIdentifier++)
	{
		if ((pIdentifier = GetAt(nIdentifier))) delete pIdentifier;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCProcedureIdentifiers::Copy(CONST CDatabaseTCProcedureIdentifiers *pIdentifiers)
{
	INT  nIdentifier;
	INT  nIdentifiers;
	CDatabaseTCProcedureIdentifier  *pIdentifier;

	for (nIdentifier = 0, nIdentifiers = (INT)pIdentifiers->GetSize(), RemoveAll(); nIdentifier < nIdentifiers; nIdentifier++)
	{
		if ((pIdentifier = new CDatabaseTCProcedureIdentifier))
		{
			pIdentifier->Copy(pIdentifiers->GetAt(nIdentifier));
			InsertAt(nIdentifier, pIdentifier, 1);
			continue;
		}
		break;
	}
	return((nIdentifier == nIdentifiers) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureIdentifiers::Compare(CONST CDatabaseTCProcedureIdentifiers *pIdentifiers) CONST
{
	INT  nIdentifier;
	INT  nIdentifiers;

	for (nIdentifier = 0, nIdentifiers = (pIdentifiers->GetSize() == GetSize()) ? (INT)GetSize() : -1; nIdentifier < nIdentifiers; nIdentifier++)
	{
		if (!pIdentifiers->GetAt(nIdentifier)->Compare(GetAt(nIdentifier))) break;
		continue;
	}
	return((nIdentifier == nIdentifiers) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureIdentifiers::Map(CByteArray &nInfo) CONST
{
	INT  nIdentifier;
	INT  nIdentifiers;
	CByteArray  nIdentifiersData;
	CDatabaseTCProcedureIdentifier  *pIdentifier;

	for (nIdentifier = 0, nIdentifiers = (INT)GetSize(), nInfo.RemoveAll(); nIdentifier < nIdentifiers; nIdentifier++)
	{
		if ((pIdentifier = GetAt(nIdentifier)) && pIdentifier->Map(nIdentifiersData) && nInfo.Append(nIdentifiersData) >= 0) continue;
		break;
	}
	return((nIdentifier == nIdentifiers) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureIdentifiers::Unmap(CONST CByteArray &nInfo)
{
	INT  cbIdentifier;
	INT  cbIdentifiers;
	CByteArray  nIdentifiersData;
	CDatabaseTCProcedureIdentifier  *pIdentifier;

	for (cbIdentifiers = 0, RemoveAll(); cbIdentifiers < nInfo.GetSize(); cbIdentifiers += cbIdentifier)
	{
		for (CopyMemory(&cbIdentifier, nInfo.GetData() + cbIdentifiers, sizeof(cbIdentifier)), nIdentifiersData.SetSize(max(min(cbIdentifier, nInfo.GetSize() - cbIdentifiers), 0)); nIdentifiersData.GetSize() >= 0; )
		{
			CopyMemory(nIdentifiersData.GetData(), nInfo.GetData() + cbIdentifiers, nIdentifiersData.GetSize());
			break;
		}
		if ((pIdentifier = new CDatabaseTCProcedureIdentifier))
		{
			if (pIdentifier->Unmap(nIdentifiersData) && Add(pIdentifier) >= 0) continue;
			delete pIdentifier;
		}
		break;
	}
	return((cbIdentifiers == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCProcedureIdentifiers::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCProcedureIdentifier  *pIdentifier;

	for (nIndex = nMinIndex = (bInsert) ? (INT)GetSize() : 0, nMaxIndex = (lstrlen(pszName) > 0) ? (INT)GetSize() : -1; nIndex < nMaxIndex; nIndex++)
	{
		if ((pIdentifier = GetAt(nIndex)) && pIdentifier->GetTag() == pszName) break;
		continue;
	}
	return(((bInsert || nIndex < nMaxIndex) && nMaxIndex >= 0) ? nIndex : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCProcedureArgument

CDatabaseTCProcedureArgument::CDatabaseTCProcedureArgument() : CDatabaseTCProcedureIdentifier()
{
	return;
}

BOOL CDatabaseTCProcedureArgument::Copy(CONST CDatabaseTCProcedureArgument *pDatabaseTCProcedureArgument)
{
	return CDatabaseTCProcedureIdentifier::Copy(pDatabaseTCProcedureArgument);
}

BOOL CDatabaseTCProcedureArgument::Compare(CONST CDatabaseTCProcedureArgument *pDatabaseTCProcedureArgument) CONST
{
	return CDatabaseTCProcedureIdentifier::Compare(pDatabaseTCProcedureArgument);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCProcedureArguments

CDatabaseTCProcedureArguments::CDatabaseTCProcedureArguments() : CDatabaseTCProcedureIdentifiers()
{
	return;
}

CDatabaseTCProcedureArguments::~CDatabaseTCProcedureArguments()
{
	RemoveAll();
}

INT CDatabaseTCProcedureArguments::Add(CDatabaseTCProcedureArgument *pDatabaseTCProcedureArgument)
{
	return CDatabaseTCProcedureIdentifiers::Add(pDatabaseTCProcedureArgument);
}

CDatabaseTCProcedureArgument *CDatabaseTCProcedureArguments::GetAt(INT nIndex) CONST
{
	return((CDatabaseTCProcedureArgument *)CDatabaseTCProcedureIdentifiers::GetAt(nIndex));
}

CDatabaseTCProcedureArgument *CDatabaseTCProcedureArguments::operator[](INT nIndex) CONST
{
	return((CDatabaseTCProcedureArgument *)CDatabaseTCProcedureIdentifiers::GetAt(nIndex));
}

BOOL CDatabaseTCProcedureArguments::Copy(CONST CDatabaseTCProcedureArguments *pDatabaseTCProcedureArguments)
{
	return CDatabaseTCProcedureIdentifiers::Copy(pDatabaseTCProcedureArguments);
}

BOOL CDatabaseTCProcedureArguments::Compare(CONST CDatabaseTCProcedureArguments *pDatabaseTCProcedureArguments) CONST
{
	return CDatabaseTCProcedureIdentifiers::Compare(pDatabaseTCProcedureArguments);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCProcedureVariable

CDatabaseTCProcedureVariable::CDatabaseTCProcedureVariable() : CDatabaseTCProcedureIdentifier()
{
	return;
}

BOOL CDatabaseTCProcedureVariable::Copy(CONST CDatabaseTCProcedureVariable *pDatabaseTCProcedureVariable)
{
	return CDatabaseTCProcedureIdentifier::Copy(pDatabaseTCProcedureVariable);
}

BOOL CDatabaseTCProcedureVariable::Compare(CONST CDatabaseTCProcedureVariable *pDatabaseTCProcedureVariable) CONST
{
	return CDatabaseTCProcedureIdentifier::Compare(pDatabaseTCProcedureVariable);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCProcedureVariables

CDatabaseTCProcedureVariables::CDatabaseTCProcedureVariables() : CDatabaseTCProcedureIdentifiers()
{
	return;
}

CDatabaseTCProcedureVariables::~CDatabaseTCProcedureVariables()
{
	RemoveAll();
}

INT CDatabaseTCProcedureVariables::Add(CDatabaseTCProcedureVariable *pDatabaseTCProcedureVariable)
{
	return CDatabaseTCProcedureIdentifiers::Add(pDatabaseTCProcedureVariable);
}

CDatabaseTCProcedureVariable *CDatabaseTCProcedureVariables::GetAt(INT nIndex) CONST
{
	return((CDatabaseTCProcedureVariable *)CDatabaseTCProcedureIdentifiers::GetAt(nIndex));
}

CDatabaseTCProcedureVariable *CDatabaseTCProcedureVariables::operator[](INT nIndex) CONST
{
	return((CDatabaseTCProcedureVariable *)CDatabaseTCProcedureIdentifiers::GetAt(nIndex));
}

BOOL CDatabaseTCProcedureVariables::Copy(CONST CDatabaseTCProcedureVariables *pDatabaseTCProcedureVariables)
{
	return CDatabaseTCProcedureIdentifiers::Copy(pDatabaseTCProcedureVariables);
}

BOOL CDatabaseTCProcedureVariables::Compare(CONST CDatabaseTCProcedureVariables *pDatabaseTCProcedureVariables) CONST
{
	return CDatabaseTCProcedureIdentifiers::Compare(pDatabaseTCProcedureVariables);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCProcedureThreadBreakpoint

CDatabaseTCProcedureThreadBreakpoint::CDatabaseTCProcedureThreadBreakpoint() : CObject()
{
	m_nOptions = 0;
	m_nLine = 0;
}

VOID CDatabaseTCProcedureThreadBreakpoint::SetLocation(LPCTSTR pszLocation)
{
	m_szLocation = pszLocation;
}

CString CDatabaseTCProcedureThreadBreakpoint::GetLocation() CONST
{
	return m_szLocation;
}

VOID CDatabaseTCProcedureThreadBreakpoint::SetLine(UINT nLine)
{
	m_nLine = nLine;
}

UINT CDatabaseTCProcedureThreadBreakpoint::GetLine() CONST
{
	return m_nLine;
}

VOID CDatabaseTCProcedureThreadBreakpoint::SetOptions(UINT nOptions)
{
	m_nOptions = nOptions;
}

UINT CDatabaseTCProcedureThreadBreakpoint::GetOptions() CONST
{
	return m_nOptions;
}

VOID CDatabaseTCProcedureThreadBreakpoint::Copy(CONST CDatabaseTCProcedureThreadBreakpoint *pDatabaseTCProcedureThreadBreakpoint)
{
	m_nLine = pDatabaseTCProcedureThreadBreakpoint->m_nLine;
	m_szLocation = pDatabaseTCProcedureThreadBreakpoint->m_szLocation;
	m_nOptions = pDatabaseTCProcedureThreadBreakpoint->m_nOptions;
}

BOOL CDatabaseTCProcedureThreadBreakpoint::Compare(CONST CDatabaseTCProcedureThreadBreakpoint *pDatabaseTCProcedureThreadBreakpoint) CONST
{
	return((pDatabaseTCProcedureThreadBreakpoint->m_szLocation == m_szLocation  &&  pDatabaseTCProcedureThreadBreakpoint->m_nLine == m_nLine  &&  pDatabaseTCProcedureThreadBreakpoint->m_nOptions == m_nOptions) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureThreadBreakpoint::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbLocation = (m_szLocation.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbLocation)), sData.nLine = m_nLine, sData.nOptions = m_nOptions; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szLocation, sData.cbLocation);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCProcedureThreadBreakpoint::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbLocation && sData.cbLocation > 0; )
	{
		CopyMemory(m_szLocation.GetBufferSetLength(STRINGCHARS(sData.cbLocation)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbLocation));
		m_nLine = sData.nLine;
		m_nOptions = sData.nOptions;
		m_szLocation.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCProcedureThreadBreakpoints

CDatabaseTCProcedureThreadBreakpoints::CDatabaseTCProcedureThreadBreakpoints() : CPtrArray()
{
	return;
}

CDatabaseTCProcedureThreadBreakpoints::~CDatabaseTCProcedureThreadBreakpoints()
{
	RemoveAll();
}

INT CDatabaseTCProcedureThreadBreakpoints::Add(CDatabaseTCProcedureThreadBreakpoint *pDatabaseTCProcedureThreadBreakpoint)
{
	INT  nIndex;

	if ((nIndex = (!pDatabaseTCProcedureThreadBreakpoint->GetLocation().IsEmpty()) ? FindIndex(pDatabaseTCProcedureThreadBreakpoint->GetLocation(), TRUE) : FindIndex(pDatabaseTCProcedureThreadBreakpoint->GetLine(), TRUE)) >= 0) InsertAt(nIndex, pDatabaseTCProcedureThreadBreakpoint, 1);
	return nIndex;
}

INT CDatabaseTCProcedureThreadBreakpoints::Find(LPCTSTR pszLocation) CONST
{
	return FindIndex(pszLocation);
}
INT CDatabaseTCProcedureThreadBreakpoints::Find(UINT nLine) CONST
{
	return FindIndex(nLine);
}

CDatabaseTCProcedureThreadBreakpoint *CDatabaseTCProcedureThreadBreakpoints::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCProcedureThreadBreakpoint *)CPtrArray::GetAt(nIndex) : (CDatabaseTCProcedureThreadBreakpoint *)NULL);
}

CDatabaseTCProcedureThreadBreakpoint *CDatabaseTCProcedureThreadBreakpoints::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCProcedureThreadBreakpoint *)CPtrArray::GetAt(nIndex) : (CDatabaseTCProcedureThreadBreakpoint *)NULL);
}

VOID CDatabaseTCProcedureThreadBreakpoints::RemoveAll()
{
	INT  nBreakpoint;
	INT  nBreakpoints;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nBreakpoint = 0, nBreakpoints = (INT)GetSize(); nBreakpoint < nBreakpoints; nBreakpoint++)
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = GetAt(nBreakpoint))) delete pDatabaseTCProcedureThreadBreakpoint;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCProcedureThreadBreakpoints::Copy(CONST CDatabaseTCProcedureThreadBreakpoints *pDatabaseTCProcedureThreadBreakpoints)
{
	INT  nBreakpoint;
	INT  nBreakpoints;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nBreakpoint = 0, nBreakpoints = (INT)pDatabaseTCProcedureThreadBreakpoints->GetSize(), RemoveAll(); nBreakpoint < nBreakpoints; nBreakpoint++)
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = new CDatabaseTCProcedureThreadBreakpoint))
		{
			pDatabaseTCProcedureThreadBreakpoint->Copy(pDatabaseTCProcedureThreadBreakpoints->GetAt(nBreakpoint));
			InsertAt(nBreakpoint, pDatabaseTCProcedureThreadBreakpoint, 1);
			continue;
		}
		break;
	}
	return((nBreakpoint == nBreakpoints) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureThreadBreakpoints::Compare(CONST CDatabaseTCProcedureThreadBreakpoints *pDatabaseTCProcedureThreadBreakpoints) CONST
{
	INT  nBreakpoint;
	INT  nBreakpoints;

	for (nBreakpoint = 0, nBreakpoints = (pDatabaseTCProcedureThreadBreakpoints->GetSize() == GetSize()) ? (INT)GetSize() : -1; nBreakpoint < nBreakpoints; nBreakpoint++)
	{
		if (!pDatabaseTCProcedureThreadBreakpoints->GetAt(nBreakpoint)->Compare(GetAt(nBreakpoint))) break;
		continue;
	}
	return((nBreakpoint == nBreakpoints) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureThreadBreakpoints::Map(CByteArray &nInfo) CONST
{
	INT  nBreakpoint;
	INT  nBreakpoints;
	CByteArray  nBreakpointsData;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nBreakpoint = 0, nBreakpoints = (INT)GetSize(), nInfo.RemoveAll(); nBreakpoint < nBreakpoints; nBreakpoint++)
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = GetAt(nBreakpoint)) && pDatabaseTCProcedureThreadBreakpoint->Map(nBreakpointsData) && nInfo.Append(nBreakpointsData) >= 0) continue;
		break;
	}
	return((nBreakpoint == nBreakpoints) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureThreadBreakpoints::Unmap(CONST CByteArray &nInfo)
{
	INT  cbBreakpoint;
	INT  cbBreakpoints;
	CByteArray  nBreakpointsData;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (cbBreakpoints = 0, RemoveAll(); cbBreakpoints < nInfo.GetSize(); cbBreakpoints += cbBreakpoint)
	{
		for (CopyMemory(&cbBreakpoint, nInfo.GetData() + cbBreakpoints, sizeof(cbBreakpoint)), nBreakpointsData.SetSize(max(min(cbBreakpoint, nInfo.GetSize() - cbBreakpoints), 0)); nBreakpointsData.GetSize() >= 0; )
		{
			CopyMemory(nBreakpointsData.GetData(), nInfo.GetData() + cbBreakpoints, nBreakpointsData.GetSize());
			break;
		}
		if ((pDatabaseTCProcedureThreadBreakpoint = new CDatabaseTCProcedureThreadBreakpoint))
		{
			if (pDatabaseTCProcedureThreadBreakpoint->Unmap(nBreakpointsData) && Add(pDatabaseTCProcedureThreadBreakpoint) >= 0) continue;
			delete pDatabaseTCProcedureThreadBreakpoint;
		}
		break;
	}
	return((cbBreakpoints == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCProcedureThreadBreakpoints::FindIndex(LPCTSTR pszLocation, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nIndex = nMinIndex = (bInsert) ? (INT)GetSize() : 0, nMaxIndex = (lstrlen(pszLocation) > 0) ? (INT)GetSize() : -1; nIndex < nMaxIndex; nIndex++)
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = GetAt(nIndex)) && pDatabaseTCProcedureThreadBreakpoint->GetLocation() == pszLocation) break;
		continue;
	}
	return(((bInsert || nIndex < nMaxIndex) && nMaxIndex >= 0) ? nIndex : -1);
}
INT CDatabaseTCProcedureThreadBreakpoints::FindIndex(UINT nLine, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nIndex = nMinIndex = (bInsert) ? (INT)GetSize() : 0, nMaxIndex = (nLine > 0) ? (INT)GetSize() : -1; nIndex < nMaxIndex; nIndex++)
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = GetAt(nIndex)) && pDatabaseTCProcedureThreadBreakpoint->GetLine() == nLine) break;
		continue;
	}
	return(((bInsert || nIndex < nMaxIndex) && nMaxIndex >= 0) ? nIndex : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCProcedureThreadTestProfile

CDatabaseTCProcedureThreadTestProfile::CDatabaseTCProcedureThreadTestProfile()
{
	m_nOptions = 0;
	m_tRunningTime = 0;
	m_tRunningTimeInterval = 0;
	m_tDelay = 0;
}

CDatabaseTCProcedureThreadTestProfile::~CDatabaseTCProcedureThreadTestProfile()
{
	RemoveAll();
}

VOID CDatabaseTCProcedureThreadTestProfile::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCProcedureThreadTestProfile::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCProcedureThreadTestProfile::SetLocation(LPCTSTR pszLocation)
{
	m_szLocation = pszLocation;
}

CString CDatabaseTCProcedureThreadTestProfile::GetLocation() CONST
{
	return m_szLocation;
}

VOID CDatabaseTCProcedureThreadTestProfile::SetOptions(UINT nOptions)
{
	m_nOptions = nOptions;
}

UINT CDatabaseTCProcedureThreadTestProfile::GetOptions() CONST
{
	return m_nOptions;
}

VOID CDatabaseTCProcedureThreadTestProfile::SetDelay(CONST CTimeSpan &tDelay)
{
	m_tDelay = tDelay;
}

CTimeSpan CDatabaseTCProcedureThreadTestProfile::GetDelay() CONST
{
	return m_tDelay;
}

VOID CDatabaseTCProcedureThreadTestProfile::SetRunningTime(CONST CTimeKey &tTime)
{
	m_tRunningTime = tTime;
}

CTimeKey CDatabaseTCProcedureThreadTestProfile::GetRunningTime() CONST
{
	return m_tRunningTime;
}

VOID CDatabaseTCProcedureThreadTestProfile::SetRunningTimeInterval(CONST CTimeSpan &tTimeInterval)
{
	m_tRunningTimeInterval = tTimeInterval;
}

CTimeSpan CDatabaseTCProcedureThreadTestProfile::GetRunningTimeInterval() CONST
{
	return m_tRunningTimeInterval;
}

INT CDatabaseTCProcedureThreadTestProfile::Add(CDatabaseTMParameter *pParameter)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pParameter->GetTag(), TRUE)) >= 0) InsertAt(nIndex, pParameter, 1);
	return nIndex;
}

INT CDatabaseTCProcedureThreadTestProfile::Find(LPCTSTR pszTag) CONST
{
	return FindIndex(pszTag);
}

CDatabaseTMParameter *CDatabaseTCProcedureThreadTestProfile::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTMParameter *)NULL);
}

CDatabaseTMParameter *CDatabaseTCProcedureThreadTestProfile::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTMParameter *)CPtrArray::GetAt(nIndex) : (CDatabaseTMParameter *)NULL);
}

VOID CDatabaseTCProcedureThreadTestProfile::RemoveAll()
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter))) delete pParameter;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCProcedureThreadTestProfile::Copy(CONST CDatabaseTCProcedureThreadTestProfile *pProfile)
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)pProfile->GetSize(), m_szName = pProfile->m_szName, m_szLocation = pProfile->m_szLocation, m_nOptions = pProfile->m_nOptions, m_tDelay = pProfile->m_tDelay, m_tRunningTime = pProfile->m_tRunningTime, m_tRunningTimeInterval = pProfile->m_tRunningTimeInterval, RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = new CDatabaseTMParameter))
		{
			pParameter->Copy(pProfile->GetAt(nParameter));
			InsertAt(nParameter, pParameter, 1);
			continue;
		}
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureThreadTestProfile::Compare(CONST CDatabaseTCProcedureThreadTestProfile *pProfile) CONST
{
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (pProfile->m_szName == m_szName && pProfile->m_szLocation == m_szLocation && pProfile->m_nOptions == m_nOptions && pProfile->m_tDelay == m_tDelay && pProfile->m_tRunningTime == m_tRunningTime && pProfile->m_tRunningTimeInterval == m_tRunningTimeInterval && pProfile->GetSize() == GetSize()) ? (INT)GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if (!pProfile->GetAt(nParameter)->Compare(GetAt(nParameter))) break;
		continue;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureThreadTestProfile::Map(CByteArray &nInfo) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nParameter;
	INT  nParameters;
	CByteArray  nParametersData[2];
	CDatabaseTMParameter  *pParameter;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbLocation = (m_szLocation.GetLength() + 1)*sizeof(TCHAR);
	for (nParameter = 0, nParameters = (INT)GetSize(), sData.nOptions = m_nOptions, sData.tDelay = m_tDelay.GetTotalSeconds(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)) && pParameter->Map(nParametersData[1], FALSE) && nParametersData[0].Append(nParametersData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbLocation + (sData.cbParameters = (INT)(nParametersData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nParameter == nParameters; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szLocation, sData.cbLocation);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbLocation), nParametersData[0].GetData(), sData.cbParameters);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCProcedureThreadTestProfile::Unmap(CONST CByteArray &nInfo)
{
	DATA  sData;
	INT  cbData;
	INT  cbParameter;
	INT  cbParameters;
	CByteArray  nParametersData[2];
	CDatabaseTMParameter  *pParameter;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbLocation + sData.cbParameters && sData.cbName > 0 && sData.cbLocation > 0 && sData.cbParameters >= 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szLocation.GetBufferSetLength(STRINGCHARS(sData.cbLocation)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbLocation));
		for (nParametersData[0].SetSize(sData.cbParameters), CopyMemory(nParametersData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbLocation), sData.cbParameters), m_nOptions = sData.nOptions, m_tDelay = sData.tDelay, m_szName.ReleaseBuffer(), m_szLocation.ReleaseBuffer(), RemoveAll(), cbParameter = cbParameters = 0; cbParameters < sData.cbParameters; cbParameters += cbParameter)
		{
			for (CopyMemory(&cbParameter, nParametersData[0].GetData() + cbParameters, sizeof(cbParameter)), nParametersData[1].SetSize(max(min(cbParameter, nParametersData[0].GetSize() - cbParameters), 0)); nParametersData[1].GetSize() >= 0; )
			{
				CopyMemory(nParametersData[1].GetData(), nParametersData[0].GetData() + cbParameters, nParametersData[1].GetSize());
				break;
			}
			if ((pParameter = new CDatabaseTMParameter))
			{
				if (pParameter->Unmap(nParametersData[1], FALSE) && Add(pParameter) >= 0) continue;
				delete pParameter;
			}
			break;
		}
		return((cbParameters == sData.cbParameters) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTCProcedureThreadTestProfile::FindIndex(LPCTSTR pszTag, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTMParameter  *pParameter;

	for (nIndex = nMinIndex = (bInsert) ? (INT)GetSize() : 0, nMaxIndex = (lstrlen(pszTag) > 0) ? (INT)GetSize() : -1; nIndex < nMaxIndex; nIndex++)
	{
		if ((pParameter = GetAt(nIndex)) && pParameter->GetTag() == pszTag) break;
		continue;
	}
	return(((bInsert || nIndex < nMaxIndex) && nMaxIndex >= 0) ? nIndex : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCProcedureThreadTestProfiles

CDatabaseTCProcedureThreadTestProfiles::CDatabaseTCProcedureThreadTestProfiles() : CPtrArray()
{
	return;
}

CDatabaseTCProcedureThreadTestProfiles::~CDatabaseTCProcedureThreadTestProfiles()
{
	RemoveAll();
}

INT CDatabaseTCProcedureThreadTestProfiles::Add(CDatabaseTCProcedureThreadTestProfile *pProfile)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pProfile->GetName(), TRUE)) >= 0) InsertAt(nIndex, pProfile, 1);
	return nIndex;
}

INT CDatabaseTCProcedureThreadTestProfiles::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTCProcedureThreadTestProfile *CDatabaseTCProcedureThreadTestProfiles::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCProcedureThreadTestProfile *)CPtrArray::GetAt(nIndex) : (CDatabaseTCProcedureThreadTestProfile *)NULL);
}

CDatabaseTCProcedureThreadTestProfile *CDatabaseTCProcedureThreadTestProfiles::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCProcedureThreadTestProfile *)CPtrArray::GetAt(nIndex) : (CDatabaseTCProcedureThreadTestProfile *)NULL);
}

VOID CDatabaseTCProcedureThreadTestProfiles::RemoveAll()
{
	INT  nProfile;
	INT  nProfiles;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;

	for (nProfile = 0, nProfiles = (INT)GetSize(); nProfile < nProfiles; nProfile++)
	{
		if ((pDatabaseTCProcedureThreadTestProfile = GetAt(nProfile))) delete pDatabaseTCProcedureThreadTestProfile;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCProcedureThreadTestProfiles::Copy(CONST CDatabaseTCProcedureThreadTestProfiles *pDatabaseTCProcedureThreadTestProfiles)
{
	INT  nProfile;
	INT  nProfiles;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;

	for (nProfile = 0, nProfiles = (INT)pDatabaseTCProcedureThreadTestProfiles->GetSize(), RemoveAll(); nProfile < nProfiles; nProfile++)
	{
		if ((pDatabaseTCProcedureThreadTestProfile = new CDatabaseTCProcedureThreadTestProfile))
		{
			pDatabaseTCProcedureThreadTestProfile->Copy(pDatabaseTCProcedureThreadTestProfiles->GetAt(nProfile));
			InsertAt(nProfile, pDatabaseTCProcedureThreadTestProfile, 1);
			continue;
		}
		break;
	}
	return((nProfile == nProfiles) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureThreadTestProfiles::Compare(CONST CDatabaseTCProcedureThreadTestProfiles *pDatabaseTCProcedureThreadTestProfiles) CONST
{
	INT  nProfile;
	INT  nProfiles;

	for (nProfile = 0, nProfiles = (pDatabaseTCProcedureThreadTestProfiles->GetSize() == GetSize()) ? (INT)GetSize() : -1; nProfile < nProfiles; nProfile++)
	{
		if (!pDatabaseTCProcedureThreadTestProfiles->GetAt(nProfile)->Compare(GetAt(nProfile))) break;
		continue;
	}
	return((nProfile == nProfiles) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureThreadTestProfiles::Map(CByteArray &nInfo) CONST
{
	INT  nProfile;
	INT  nProfiles;
	CByteArray  nProfilesData;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;

	for (nProfile = 0, nProfiles = (INT)GetSize(), nInfo.RemoveAll(); nProfile < nProfiles; nProfile++)
	{
		if ((pDatabaseTCProcedureThreadTestProfile = GetAt(nProfile)) && pDatabaseTCProcedureThreadTestProfile->Map(nProfilesData) && nInfo.Append(nProfilesData) >= 0) continue;
		break;
	}
	return((nProfile == nProfiles) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureThreadTestProfiles::Unmap(CONST CByteArray &nInfo)
{
	INT  cbProfile;
	INT  cbProfiles;
	CByteArray  nProfilesData;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;

	for (cbProfiles = 0, RemoveAll(); cbProfiles < nInfo.GetSize(); cbProfiles += cbProfile)
	{
		for (CopyMemory(&cbProfile, nInfo.GetData() + cbProfiles, sizeof(cbProfile)), nProfilesData.SetSize(max(min(cbProfile, nInfo.GetSize() - cbProfiles), 0)); nProfilesData.GetSize() >= 0; )
		{
			CopyMemory(nProfilesData.GetData(), nInfo.GetData() + cbProfiles, nProfilesData.GetSize());
			break;
		}
		if ((pDatabaseTCProcedureThreadTestProfile = new CDatabaseTCProcedureThreadTestProfile))
		{
			if (pDatabaseTCProcedureThreadTestProfile->Unmap(nProfilesData) && Add(pDatabaseTCProcedureThreadTestProfile) >= 0) continue;
			delete pDatabaseTCProcedureThreadTestProfile;
		}
		break;
	}
	return((cbProfiles == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCProcedureThreadTestProfiles::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pDatabaseTCProcedureThreadTestProfile = GetAt(nIndex[0]))) ? ((nIndex[1] = (pDatabaseTCProcedureThreadTestProfile->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pDatabaseTCProcedureThreadTestProfile = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pDatabaseTCProcedureThreadTestProfile->GetName() == pszName) || (bInsert && (((pDatabaseTCProcedureThreadTestProfile = GetAt(max(nIndex[0] - 1, 0))) && pDatabaseTCProcedureThreadTestProfile->GetName() != pszName && (pDatabaseTCProcedureThreadTestProfile = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pDatabaseTCProcedureThreadTestProfile->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCProcedureThreadContents

CDatabaseTCProcedureThreadContents::CDatabaseTCProcedureThreadContents() : CPtrArray()
{
	return;
}

CDatabaseTCProcedureThreadContents::~CDatabaseTCProcedureThreadContents()
{
	RemoveAll();
}

INT CDatabaseTCProcedureThreadContents::Add(CDatabaseTCProcedureThreadStep *pStep)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pStep->GetName(), TRUE)) >= 0) InsertAt(nIndex, pStep, 1);
	return nIndex;
}

INT CDatabaseTCProcedureThreadContents::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

INT CDatabaseTCProcedureThreadContents::Enum(CPtrArray &pSteps, BOOL bAll) CONST
{
	INT  nStep;
	INT  nSteps;
	CDatabaseTCProcedureThreadStep  *pStep;

	for (nStep = 0, nSteps = (INT)GetSize(), pSteps.RemoveAll(); nStep < nSteps; nStep++)
	{
		if ((pStep = GetAt(nStep)) && ((!bAll  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_START  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_END) || bAll))
		{
			for (pSteps.Add(pStep); pStep->m_pSubSteps.GetSize() > 0; )
			{
				Enum(pStep->m_pSubSteps, pSteps, bAll);
				break;
			}
		}
	}
	return((INT)pSteps.GetSize());
}
INT CDatabaseTCProcedureThreadContents::Enum(CONST CDatabaseTCProcedureThreadContents &pContents, CPtrArray &pSteps, BOOL bAll) CONST
{
	INT  nStep;
	INT  nSteps;
	CDatabaseTCProcedureThreadStep  *pStep;

	for (nStep = 0, nSteps = (INT)pContents.GetSize(); nStep < nSteps; nStep++)
	{
		if ((pStep = pContents.GetAt(nStep)) && ((!bAll  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_START  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_END) || bAll))
		{
			for (pSteps.Add(pStep); pStep->m_pSubSteps.GetSize() > 0; )
			{
				Enum(pStep->m_pSubSteps, pSteps, bAll);
				break;
			}
		}
	}
	return((INT)pSteps.GetSize());
}

CDatabaseTCProcedureThreadStep *CDatabaseTCProcedureThreadContents::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCProcedureThreadStep *)CPtrArray::GetAt(nIndex) : (CDatabaseTCProcedureThreadStep *)NULL);
}

CDatabaseTCProcedureThreadStep *CDatabaseTCProcedureThreadContents::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCProcedureThreadStep *)CPtrArray::GetAt(nIndex) : (CDatabaseTCProcedureThreadStep *)NULL);
}

VOID CDatabaseTCProcedureThreadContents::RemoveAll()
{
	INT  nStep;
	INT  nSteps;
	CDatabaseTCProcedureThreadStep  *pStep;

	for (nStep = 0, nSteps = (INT)GetSize(); nStep < nSteps; nStep++)
	{
		if ((pStep = GetAt(nStep))) delete pStep;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCProcedureThreadContents::Copy(CONST CDatabaseTCProcedureThreadContents *pSteps)
{
	INT  nStep;
	INT  nSteps;
	CDatabaseTCProcedureThreadStep  *pStep;

	for (nStep = 0, nSteps = (INT)pSteps->GetSize(), RemoveAll(); nStep < nSteps; nStep++)
	{
		if ((pStep = new CDatabaseTCProcedureThreadStep))
		{
			pStep->Copy(pSteps->GetAt(nStep));
			InsertAt(nStep, pStep, 1);
			continue;
		}
		break;
	}
	return((nStep == nSteps) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureThreadContents::Compare(CONST CDatabaseTCProcedureThreadContents *pSteps) CONST
{
	INT  nStep;
	INT  nSteps;
	CDatabaseTCProcedureThreadStep  *pStep;

	for (nStep = 0, nSteps = (pSteps->GetSize() == GetSize()) ? (INT)pSteps->GetSize() : -1; nStep < nSteps; nStep++)
	{
		if ((pStep = pSteps->GetAt(nStep)) && pStep->Compare(GetAt(nStep))) continue;
		break;
	}
	return((nStep == nSteps) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureThreadContents::Map(CByteArray &nInfo) CONST
{
	INT  nStep;
	INT  nSteps;
	CByteArray  nStepsData;
	CDatabaseTCProcedureThreadStep  *pStep;

	for (nStep = 0, nSteps = (INT)GetSize(), nInfo.RemoveAll(); nStep < nSteps; nStep++)
	{
		if ((pStep = GetAt(nStep)) && pStep->Map(nStepsData) && nInfo.Append(nStepsData) >= 0) continue;
		break;
	}
	return((nStep == nSteps) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureThreadContents::Unmap(CONST CByteArray &nInfo)
{
	INT  cbStep;
	INT  cbSteps;
	CByteArray  nStepsData;
	CDatabaseTCProcedureThreadStep  *pStep;

	for (cbSteps = 0, RemoveAll(); cbSteps < nInfo.GetSize(); cbSteps += cbStep)
	{
		for (CopyMemory(&cbStep, nInfo.GetData() + cbSteps, sizeof(cbStep)), nStepsData.SetSize(max(min(cbStep, nInfo.GetSize() - cbSteps), 0)); nStepsData.GetSize() >= 0; )
		{
			CopyMemory(nStepsData.GetData(), nInfo.GetData() + cbSteps, nStepsData.GetSize());
			break;
		}
		if ((pStep = new CDatabaseTCProcedureThreadStep))
		{
			if (pStep->Unmap(nStepsData) && Add(pStep) >= 0) continue;
			delete pStep;
		}
		break;
	}
	return((cbSteps == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCProcedureThreadContents::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCProcedureThreadStep  *pStep;

	for (nIndex = nMinIndex = (bInsert) ? (INT)GetSize() : 0, nMaxIndex = (INT)GetSize(); nIndex < nMaxIndex; nIndex++)
	{
		if ((pStep = GetAt(nIndex)) && pStep->GetName() == pszName) break;
		continue;
	}
	return(((bInsert || nIndex < nMaxIndex) && nMaxIndex >= 0) ? nIndex : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCProcedureThreadStep

CDatabaseTCProcedureThreadStep::CDatabaseTCProcedureThreadStep() : CObject()
{
	m_nType = 0;
	m_nSubThreadID = 0;
	m_nTriggerType = 0;
	m_tTriggerTime = 0;
	m_tTriggerTimeOffset = 0;
	m_tTriggerTimeDelay = 0;
	m_tTriggerTimeout = 0;
	m_nConfirmationType = 0;
	m_tConfirmationTimeout = 0;
	m_nFailureOptions = 0;
	m_bActivated = FALSE;
	m_bExpanded = FALSE;
	SetRectEmpty(&m_rPosition);
}

VOID CDatabaseTCProcedureThreadStep::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCProcedureThreadStep::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCProcedureThreadStep::SetLabel(LPCTSTR pszLabel)
{
	m_szLabel = pszLabel;
}

CString CDatabaseTCProcedureThreadStep::GetLabel() CONST
{
	return m_szLabel;
}

VOID CDatabaseTCProcedureThreadStep::SetComments(LPCTSTR pszComments)
{
	m_szComments = pszComments;
}

CString CDatabaseTCProcedureThreadStep::GetComments() CONST
{
	return m_szComments;
}

VOID CDatabaseTCProcedureThreadStep::SetType(UINT nType)
{
	m_nType = nType;
}

UINT CDatabaseTCProcedureThreadStep::GetType() CONST
{
	return m_nType;
}

VOID CDatabaseTCProcedureThreadStep::SetPosition(CONST RECT &rect)
{
	m_rPosition = rect;
}

CRect CDatabaseTCProcedureThreadStep::GetPosition() CONST
{
	return m_rPosition;
}

VOID CDatabaseTCProcedureThreadStep::SetSubThreadID(UINT nID)
{
	m_nSubThreadID = nID;
}

UINT CDatabaseTCProcedureThreadStep::GetSubThreadID() CONST
{
	return m_nSubThreadID;
}

VOID CDatabaseTCProcedureThreadStep::SetProperties(CONST CByteArray &nInfo)
{
	m_nInfo.Copy(nInfo);
}

BOOL CDatabaseTCProcedureThreadStep::GetProperties(CByteArray &nInfo) CONST
{
	nInfo.Copy(m_nInfo);
	return((nInfo.GetSize() >= 0) ? TRUE : FALSE);
}

VOID CDatabaseTCProcedureThreadStep::SetTriggerType(UINT nType)
{
	m_nTriggerType = nType;
}

UINT CDatabaseTCProcedureThreadStep::GetTriggerType() CONST
{
	return m_nTriggerType;
}

VOID CDatabaseTCProcedureThreadStep::SetTriggerTime(CONST CTimeTag &tTime)
{
	m_tTriggerTime = tTime;
}

CTimeTag CDatabaseTCProcedureThreadStep::GetTriggerTime() CONST
{
	return m_tTriggerTime;
}

VOID CDatabaseTCProcedureThreadStep::SetTriggerTimeOffset(CONST CTimeSpan &tOffset)
{
	m_tTriggerTimeOffset = tOffset;
}

CTimeSpan CDatabaseTCProcedureThreadStep::GetTriggerTimeOffset() CONST
{
	return m_tTriggerTimeOffset;
}

VOID CDatabaseTCProcedureThreadStep::SetTriggerTimeDelay(CONST CTimeSpan &tDelay)
{
	m_tTriggerTimeDelay = tDelay;
}

CTimeSpan CDatabaseTCProcedureThreadStep::GetTriggerTimeDelay() CONST
{
	return m_tTriggerTimeDelay;
}

VOID CDatabaseTCProcedureThreadStep::SetTriggerSynchronizationObject(LPCTSTR pszObject)
{
	m_szTriggerObject = pszObject;
}

CString CDatabaseTCProcedureThreadStep::GetTriggerSynchronizationObject() CONST
{
	return m_szTriggerObject;
}

VOID CDatabaseTCProcedureThreadStep::SetTriggerTimeout(CONST CTimeSpan &tTimeout)
{
	m_tTriggerTimeout = tTimeout;
}

CTimeSpan CDatabaseTCProcedureThreadStep::GetTriggerTimeout() CONST
{
	return m_tTriggerTimeout;
}

VOID CDatabaseTCProcedureThreadStep::SetTriggerMessage(LPCTSTR pszMessage)
{
	m_szTriggerMessage = pszMessage;
}

CString CDatabaseTCProcedureThreadStep::GetTriggerMessage() CONST
{
	return m_szTriggerMessage;
}

VOID CDatabaseTCProcedureThreadStep::SetTriggerExpression(LPCTSTR pszExpression)
{
	m_szTriggerExpression = pszExpression;
}

CString CDatabaseTCProcedureThreadStep::GetTriggerExpression() CONST
{
	return m_szTriggerExpression;
}

VOID CDatabaseTCProcedureThreadStep::SetPreexecutionExpression(LPCTSTR pszExpression)
{
	m_szPreexecutionExpression = pszExpression;
}

CString CDatabaseTCProcedureThreadStep::GetPreexecutionExpression() CONST
{
	return m_szPreexecutionExpression;
}

VOID CDatabaseTCProcedureThreadStep::SetConfirmationType(UINT nType)
{
	m_nConfirmationType = nType;
}

UINT CDatabaseTCProcedureThreadStep::GetConfirmationType() CONST
{
	return m_nConfirmationType;
}

VOID CDatabaseTCProcedureThreadStep::SetConfirmationTimeout(CONST CTimeSpan &tTimeout)
{
	m_tConfirmationTimeout = tTimeout;
}

CTimeSpan CDatabaseTCProcedureThreadStep::GetConfirmationTimeout() CONST
{
	return m_tConfirmationTimeout;
}

VOID CDatabaseTCProcedureThreadStep::SetConfirmationMessage(LPCTSTR pszMessage)
{
	m_szConfirmationMessage = pszMessage;
}

CString CDatabaseTCProcedureThreadStep::GetConfirmationMessage() CONST
{
	return m_szConfirmationMessage;
}

VOID CDatabaseTCProcedureThreadStep::SetConfirmationExpression(LPCTSTR pszExpression)
{
	m_szConfirmationExpression = pszExpression;
}

CString CDatabaseTCProcedureThreadStep::GetConfirmationExpression() CONST
{
	return m_szConfirmationExpression;
}

VOID CDatabaseTCProcedureThreadStep::SetFailureOptions(UINT nOptions)
{
	m_nFailureOptions = nOptions;
}

UINT CDatabaseTCProcedureThreadStep::GetFailureOptions() CONST
{
	return m_nFailureOptions;
}

VOID CDatabaseTCProcedureThreadStep::SetFailureLabels(CONST CStringArray &szLabels)
{
	m_szFailureLabels.Copy(szLabels);
}

INT CDatabaseTCProcedureThreadStep::GetFailureLabels(CStringArray &szLabels) CONST
{
	szLabels.Copy(m_szFailureLabels);
	return((INT)szLabels.GetSize());
}

BOOL CDatabaseTCProcedureThreadStep::SetSubSteps(CONST CDatabaseTCProcedureThreadContents &pSubSteps)
{
	return m_pSubSteps.Copy(&pSubSteps);
}

INT CDatabaseTCProcedureThreadStep::GetSubSteps(CDatabaseTCProcedureThreadContents &pSubSteps) CONST
{
	pSubSteps.Copy(&m_pSubSteps);
	return((INT)pSubSteps.GetSize());
}

VOID CDatabaseTCProcedureThreadStep::Activate(BOOL bActivate)
{
	m_bActivated = bActivate;
}

BOOL CDatabaseTCProcedureThreadStep::IsActivated() CONST
{
	return m_bActivated;
}

VOID CDatabaseTCProcedureThreadStep::Expand(BOOL bExpand)
{
	m_bExpanded = bExpand;
}

BOOL CDatabaseTCProcedureThreadStep::IsExpanded() CONST
{
	return m_bExpanded;
}

BOOL CDatabaseTCProcedureThreadStep::Copy(CONST CDatabaseTCProcedureThreadStep *pStep)
{
	m_nType = pStep->m_nType;
	m_szName = pStep->m_szName;
	m_szLabel = pStep->m_szLabel;
	m_szComments = pStep->m_szComments;
	m_szTriggerObject = pStep->m_szTriggerObject;
	m_szTriggerMessage = pStep->m_szTriggerMessage;
	m_szTriggerExpression = pStep->m_szTriggerExpression;
	m_szPreexecutionExpression = pStep->m_szPreexecutionExpression;
	m_szConfirmationExpression = pStep->m_szConfirmationExpression;
	m_szConfirmationMessage = pStep->m_szConfirmationMessage;
	m_szFailureLabels.Copy(pStep->m_szFailureLabels);
	m_nSubThreadID = pStep->m_nSubThreadID;
	m_nTriggerType = pStep->m_nTriggerType;
	m_tTriggerTime = pStep->m_tTriggerTime;
	m_tTriggerTimeOffset = pStep->m_tTriggerTimeOffset;
	m_tTriggerTimeDelay = pStep->m_tTriggerTimeDelay;
	m_tTriggerTimeout = pStep->m_tTriggerTimeout;
	m_nConfirmationType = pStep->m_nConfirmationType;
	m_tConfirmationTimeout = pStep->m_tConfirmationTimeout;
	m_nFailureOptions = pStep->m_nFailureOptions;
	m_rPosition = pStep->m_rPosition;
	m_bActivated = pStep->m_bActivated;
	m_bExpanded = pStep->m_bExpanded;
	m_nInfo.Copy(pStep->m_nInfo);
	return m_pSubSteps.Copy(&pStep->m_pSubSteps);
}

BOOL CDatabaseTCProcedureThreadStep::Compare(CONST CDatabaseTCProcedureThreadStep *pStep) CONST
{
	INT  nLabel;
	INT  nLabels;

	for (nLabel = 0, nLabels = (pStep->m_szName == m_szName && pStep->m_szLabel == m_szLabel && pStep->m_szComments == m_szComments && pStep->m_nType == m_nType && pStep->m_nSubThreadID == m_nSubThreadID && pStep->m_nTriggerType == m_nTriggerType && ((m_nTriggerType & (TCPROCEDURETHREADSTEP_TRIGGERTYPE_ATTIME | TCPROCEDURETHREADSTEP_TRIGGERTYPE_NOTAFTERTIME)) == 0 || pStep->m_tTriggerTime == m_tTriggerTime) && ((m_nTriggerType & TCPROCEDURETHREADSTEP_TRIGGERTYPE_TIMEOFFSET) != TCPROCEDURETHREADSTEP_TRIGGERTYPE_TIMEOFFSET || pStep->m_tTriggerTimeOffset == m_tTriggerTimeOffset) && ((m_nTriggerType & TCPROCEDURETHREADSTEP_TRIGGERTYPE_TIMEDELAY) != TCPROCEDURETHREADSTEP_TRIGGERTYPE_TIMEDELAY || pStep->m_tTriggerTimeDelay == m_tTriggerTimeDelay) && ((m_nTriggerType & TCPROCEDURETHREADSTEP_TRIGGERTYPE_SYNCOBJECT) != TCPROCEDURETHREADSTEP_TRIGGERTYPE_SYNCOBJECT || pStep->m_szTriggerObject == m_szTriggerObject) && pStep->m_tTriggerTimeout == m_tTriggerTimeout && pStep->m_szTriggerMessage == m_szTriggerMessage && ((m_nTriggerType & TCPROCEDURETHREADSTEP_TRIGGERTYPE_EXPRESSION) != TCPROCEDURETHREADSTEP_TRIGGERTYPE_EXPRESSION || pStep->m_szTriggerExpression == m_szTriggerExpression) && pStep->m_szPreexecutionExpression == m_szPreexecutionExpression && pStep->m_nConfirmationType == m_nConfirmationType && pStep->m_tConfirmationTimeout == m_tConfirmationTimeout && pStep->m_szConfirmationMessage == m_szConfirmationMessage && ((m_nConfirmationType & TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_EXPRESSION) != TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_EXPRESSION || pStep->m_szConfirmationExpression == m_szConfirmationExpression) && pStep->m_nFailureOptions == m_nFailureOptions && pStep->m_szFailureLabels.GetSize() == m_szFailureLabels.GetSize() && pStep->m_rPosition == m_rPosition && pStep->m_bActivated == m_bActivated && pStep->m_bExpanded == m_bExpanded && pStep->m_nInfo.GetSize() == m_nInfo.GetSize() && !memcmp(pStep->m_nInfo.GetData(), m_nInfo.GetData(), m_nInfo.GetSize()) && pStep->m_pSubSteps.Compare(&m_pSubSteps)) ? (INT)m_szFailureLabels.GetSize() : -1; nLabel < nLabels; nLabel++)
	{
		if (pStep->m_szFailureLabels.GetAt(nLabel) != m_szFailureLabels.GetAt(nLabel)) break;
		continue;
	}
	return((nLabel == nLabels) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureThreadStep::Map(CByteArray &nInfo) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nLabel;
	INT  nLabels;
	CByteArray  nSubStepsData;
	CByteArray  nFailureLabelsData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbLabel = (m_szLabel.GetLength() + 1)*sizeof(TCHAR);
	sData.cbComments = (m_szComments.GetLength() + 1)*sizeof(TCHAR);
	sData.cbTriggerObject = (m_szTriggerObject.GetLength() + 1)*sizeof(TCHAR);
	sData.cbTriggerMessage = (m_szTriggerMessage.GetLength() + 1)*sizeof(TCHAR);
	sData.cbTriggerExpression = (m_szTriggerExpression.GetLength() + 1)*sizeof(TCHAR);
	sData.cbConfirmationMessage = (m_szConfirmationMessage.GetLength() + 1)*sizeof(TCHAR);
	sData.cbPreexecutionExpression = (m_szPreexecutionExpression.GetLength() + 1)*sizeof(TCHAR);
	sData.cbConfirmationExpression = (m_szConfirmationExpression.GetLength() + 1)*sizeof(TCHAR);
	for (nLabel = 0, nLabels = (INT)m_szFailureLabels.GetSize(), sData.cbFailureLabels = 0, sData.cbSubSteps = (m_pSubSteps.Map(nSubStepsData)) ? (INT)nSubStepsData.GetSize() : -1; nLabel < nLabels; nLabel++, sData.cbFailureLabels += cbData)
	{
		nFailureLabelsData.SetSize(sData.cbFailureLabels + (cbData = (m_szFailureLabels.GetAt(nLabel).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nFailureLabelsData.GetData() + sData.cbFailureLabels, (LPCTSTR)m_szFailureLabels.GetAt(nLabel), cbData);
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbLabel + sData.cbComments + sData.cbTriggerObject + sData.cbTriggerMessage + sData.cbTriggerExpression + sData.cbPreexecutionExpression + sData.cbConfirmationExpression + sData.cbConfirmationMessage + sData.cbFailureLabels + max(sData.cbSubSteps, 0) + (sData.cbInfo = (INT)m_nInfo.GetSize()*sizeof(BYTE)))), sData.nType = m_nType, sData.nSubThreadID = m_nSubThreadID, sData.nTriggerType = m_nTriggerType, sData.tTriggerTime = m_tTriggerTime.GetTime(), sData.tTriggerTimeOffset = m_tTriggerTimeOffset.GetTotalSeconds(), sData.tTriggerTimeDelay = m_tTriggerTimeDelay.GetTotalSeconds(), sData.tTriggerTimeout = m_tTriggerTimeout.GetTotalSeconds(), sData.nConfirmationType = m_nConfirmationType, sData.tConfirmationTimeout = m_tConfirmationTimeout.GetTotalSeconds(), sData.nFailureOptions = m_nFailureOptions, SetRect(&sData.rPosition, m_rPosition.left, m_rPosition.top, m_rPosition.right, m_rPosition.bottom), sData.bActivated = m_bActivated, sData.bExpanded = m_bExpanded; nInfo.GetSize() == sData.cbSize && sData.cbSubSteps >= 0; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szLabel, sData.cbLabel);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbLabel), (LPCTSTR)m_szComments, sData.cbComments);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbComments), (LPCTSTR)m_szTriggerObject, sData.cbTriggerObject);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTriggerObject), (LPCTSTR)m_szTriggerMessage, sData.cbTriggerMessage);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTriggerMessage), (LPCTSTR)m_szTriggerExpression, sData.cbTriggerExpression);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTriggerExpression), (LPCTSTR)m_szPreexecutionExpression, sData.cbPreexecutionExpression);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbPreexecutionExpression), (LPCTSTR)m_szConfirmationExpression, sData.cbConfirmationExpression);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbConfirmationExpression), (LPCTSTR)m_szConfirmationMessage, sData.cbConfirmationMessage);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbConfirmationMessage), nFailureLabelsData.GetData(), sData.cbFailureLabels);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbFailureLabels), nSubStepsData.GetData(), sData.cbSubSteps);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbSubSteps), m_nInfo.GetData(), sData.cbInfo);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCProcedureThreadStep::Unmap(CONST CByteArray &nInfo)
{
	DATA  sData;
	INT  cbData;
	INT  cbLabel;
	INT  cbLabels;
	CByteArray  nSubStepsData;
	CByteArray  nFailureLabelsData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbLabel + sData.cbComments + sData.cbTriggerObject + sData.cbTriggerMessage + sData.cbTriggerExpression + sData.cbPreexecutionExpression + sData.cbConfirmationExpression + sData.cbConfirmationMessage + sData.cbFailureLabels + sData.cbSubSteps + sData.cbInfo && sData.cbName > 0 && sData.cbLabel > 0 && sData.cbComments > 0 && sData.cbTriggerObject > 0 && sData.cbTriggerMessage > 0 && sData.cbTriggerExpression > 0 && sData.cbPreexecutionExpression > 0 && sData.cbConfirmationExpression > 0 && sData.cbConfirmationMessage > 0 && sData.cbFailureLabels >= 0 && sData.cbSubSteps >= 0 && sData.cbInfo >= 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szLabel.GetBufferSetLength(STRINGCHARS(sData.cbLabel)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbLabel));
		CopyMemory(m_szComments.GetBufferSetLength(STRINGCHARS(sData.cbComments)), nInfo.GetData() + (cbData = cbData + sData.cbLabel), STRINGBYTES(sData.cbComments));
		CopyMemory(m_szTriggerObject.GetBufferSetLength(STRINGCHARS(sData.cbTriggerObject)), nInfo.GetData() + (cbData = cbData + sData.cbComments), STRINGBYTES(sData.cbTriggerObject));
		CopyMemory(m_szTriggerMessage.GetBufferSetLength(STRINGCHARS(sData.cbTriggerMessage)), nInfo.GetData() + (cbData = cbData + sData.cbTriggerObject), STRINGBYTES(sData.cbTriggerMessage));
		CopyMemory(m_szTriggerExpression.GetBufferSetLength(STRINGCHARS(sData.cbTriggerExpression)), nInfo.GetData() + (cbData = cbData + sData.cbTriggerMessage), STRINGBYTES(sData.cbTriggerExpression));
		CopyMemory(m_szPreexecutionExpression.GetBufferSetLength(STRINGCHARS(sData.cbPreexecutionExpression)), nInfo.GetData() + (cbData = cbData + sData.cbTriggerExpression), STRINGBYTES(sData.cbPreexecutionExpression));
		CopyMemory(m_szConfirmationExpression.GetBufferSetLength(STRINGCHARS(sData.cbConfirmationExpression)), nInfo.GetData() + (cbData = cbData + sData.cbPreexecutionExpression), STRINGBYTES(sData.cbConfirmationExpression));
		CopyMemory(m_szConfirmationMessage.GetBufferSetLength(STRINGCHARS(sData.cbConfirmationMessage)), nInfo.GetData() + (cbData = cbData + sData.cbConfirmationExpression), STRINGBYTES(sData.cbConfirmationMessage));
		for (nFailureLabelsData.SetSize(sData.cbFailureLabels), nSubStepsData.SetSize(sData.cbSubSteps), m_nInfo.SetSize(sData.cbInfo), CopyMemory(nFailureLabelsData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbConfirmationMessage), sData.cbFailureLabels), CopyMemory(nSubStepsData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbFailureLabels), sData.cbSubSteps), CopyMemory(m_nInfo.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbSubSteps), sData.cbInfo), m_nType = sData.nType, m_nSubThreadID = sData.nSubThreadID, m_nTriggerType = sData.nTriggerType, m_tTriggerTime = sData.tTriggerTime, m_tTriggerTimeOffset = sData.tTriggerTimeOffset, m_tTriggerTimeDelay = sData.tTriggerTimeDelay, m_tTriggerTimeout = sData.tTriggerTimeout, m_nConfirmationType = sData.nConfirmationType, m_tConfirmationTimeout = sData.tConfirmationTimeout, m_nFailureOptions = sData.nFailureOptions, m_rPosition = sData.rPosition, m_bActivated = sData.bActivated, m_bExpanded = sData.bExpanded, m_szName.ReleaseBuffer(), m_szLabel.ReleaseBuffer(), m_szComments.ReleaseBuffer(), m_szTriggerObject.ReleaseBuffer(), m_szTriggerMessage.ReleaseBuffer(), m_szTriggerExpression.ReleaseBuffer(), m_szPreexecutionExpression.ReleaseBuffer(), m_szConfirmationExpression.ReleaseBuffer(), m_szConfirmationMessage.ReleaseBuffer(), m_szFailureLabels.RemoveAll(), cbLabels = 0; cbLabels < sData.cbFailureLabels; cbLabels += cbLabel)
		{
			m_szFailureLabels.Add((LPCTSTR)(nFailureLabelsData.GetData() + cbLabels));
			cbLabel = (m_szFailureLabels.GetAt(m_szFailureLabels.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR);
		}
		return m_pSubSteps.Unmap(nSubStepsData);
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCProcedureThread

CDatabaseTCProcedureThread::CDatabaseTCProcedureThread() : CDatabaseTCProcedureThreadContents()
{
	m_nAttributes = 0;
	m_nState = 0;
}

VOID CDatabaseTCProcedureThread::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCProcedureThread::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCProcedureThread::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCProcedureThread::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTCProcedureThread::SetComments(LPCTSTR pszComments)
{
	m_szComments = pszComments;
}

CString CDatabaseTCProcedureThread::GetComments() CONST
{
	return m_szComments;
}

VOID CDatabaseTCProcedureThread::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTCProcedureThread::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCProcedureThread::SetActivationExpression(LPCTSTR pszCode)
{
	m_szCode = pszCode;
}

CString CDatabaseTCProcedureThread::GetActivationExpression() CONST
{
	return m_szCode;
}

VOID CDatabaseTCProcedureThread::SetState(UINT nState)
{
	m_nState = nState;
}

UINT CDatabaseTCProcedureThread::GetState() CONST
{
	return m_nState;
}

BOOL CDatabaseTCProcedureThread::SetBreakpoints(CONST CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints)
{
	return m_pDatabaseTCProcedureThreadBreakpoints.Copy(&pDatabaseTCProcedureThreadBreakpoints);
}

INT CDatabaseTCProcedureThread::GetBreakpoints(CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints) CONST
{
	pDatabaseTCProcedureThreadBreakpoints.Copy(&m_pDatabaseTCProcedureThreadBreakpoints);
	return((INT)pDatabaseTCProcedureThreadBreakpoints.GetSize());
}

BOOL CDatabaseTCProcedureThread::SetProfiles(CONST CDatabaseTCProcedureThreadTestProfiles &pDatabaseTCProcedureThreadTestProfiles)
{
	return m_pDatabaseTCProcedureThreadTestProfiles.Copy(&pDatabaseTCProcedureThreadTestProfiles);
}

INT CDatabaseTCProcedureThread::GetProfiles(CDatabaseTCProcedureThreadTestProfiles &pDatabaseTCProcedureThreadTestProfiles) CONST
{
	pDatabaseTCProcedureThreadTestProfiles.Copy(&m_pDatabaseTCProcedureThreadTestProfiles);
	return((INT)pDatabaseTCProcedureThreadTestProfiles.GetSize());
}

BOOL CDatabaseTCProcedureThread::Copy(CONST CDatabaseTCProcedureThread *pDatabaseTCProcedureThread)
{
	INT  nStep;
	INT  nSteps;
	CDatabaseTCProcedureThreadStep  *pStep;

	for (nStep = 0, nSteps = (m_pDatabaseTCProcedureThreadBreakpoints.Copy(&pDatabaseTCProcedureThread->m_pDatabaseTCProcedureThreadBreakpoints) && m_pDatabaseTCProcedureThreadTestProfiles.Copy(&pDatabaseTCProcedureThread->m_pDatabaseTCProcedureThreadTestProfiles)) ? (INT)pDatabaseTCProcedureThread->GetSize() : -1, m_szName = pDatabaseTCProcedureThread->m_szName, m_szDescription = pDatabaseTCProcedureThread->m_szDescription, m_szComments = pDatabaseTCProcedureThread->m_szComments, m_szCode = pDatabaseTCProcedureThread->m_szCode, m_nAttributes = pDatabaseTCProcedureThread->m_nAttributes, m_nState = pDatabaseTCProcedureThread->m_nState, RemoveAll(); nStep < nSteps; nStep++)
	{
		if ((pStep = new CDatabaseTCProcedureThreadStep))
		{
			pStep->Copy(pDatabaseTCProcedureThread->GetAt(nStep));
			InsertAt(nStep, pStep, 1);
			continue;
		}
		break;
	}
	return((nStep == nSteps) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureThread::Compare(CONST CDatabaseTCProcedureThread *pDatabaseTCProcedureThread) CONST
{
	INT  nStep;
	INT  nSteps;
	CDatabaseTCProcedureThreadStep  *pStep;

	for (nStep = 0, nSteps = (pDatabaseTCProcedureThread->m_szName == m_szName && pDatabaseTCProcedureThread->m_szDescription == m_szDescription && pDatabaseTCProcedureThread->m_szComments == m_szComments && pDatabaseTCProcedureThread->m_szCode == m_szCode && pDatabaseTCProcedureThread->m_nAttributes == m_nAttributes && pDatabaseTCProcedureThread->m_nState == m_nState && pDatabaseTCProcedureThread->m_pDatabaseTCProcedureThreadBreakpoints.Compare(&m_pDatabaseTCProcedureThreadBreakpoints) && pDatabaseTCProcedureThread->m_pDatabaseTCProcedureThreadTestProfiles.Compare(&m_pDatabaseTCProcedureThreadTestProfiles) && pDatabaseTCProcedureThread->GetSize() == GetSize()) ? (INT)pDatabaseTCProcedureThread->GetSize() : -1; nStep < nSteps; nStep++)
	{
		if ((pStep = pDatabaseTCProcedureThread->GetAt(nStep)) && pStep->Compare(GetAt(nStep))) continue;
		break;
	}
	return((nStep == nSteps) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedureThread::Map(CByteArray &nInfo) CONST
{
	INT  nStep;
	INT  nSteps;
	INT  cbData;
	DATA  sData;
	CByteArray  nStepsData[2];
	CByteArray  nProfilesData;
	CByteArray  nBreakpointsData;
	CDatabaseTCProcedureThreadStep  *pStep;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbCode = (m_szCode.GetLength() + 1)*sizeof(TCHAR);
	sData.cbComments = (m_szComments.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	sData.cbProfiles = (m_pDatabaseTCProcedureThreadTestProfiles.Map(nProfilesData)) ? (INT)nProfilesData.GetSize() : -1;
	sData.cbBreakpoints = (m_pDatabaseTCProcedureThreadBreakpoints.Map(nBreakpointsData)) ? (INT)nBreakpointsData.GetSize() : -1;
	for (nStep = 0, nSteps = (INT)GetSize(), sData.nAttributes = m_nAttributes; nStep < nSteps; nStep++)
	{
		if ((pStep = GetAt(nStep)) && pStep->Map(nStepsData[1]) && nStepsData[0].Append(nStepsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbComments + sData.cbCode + (sData.cbSteps = (INT)(nStepsData[0].GetSize()*sizeof(BYTE))) + sData.cbProfiles + sData.cbBreakpoints)); nInfo.GetSize() == sData.cbSize && sData.cbBreakpoints >= 0 && sData.cbProfiles >= 0 && nStep == nSteps; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szComments, sData.cbComments);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbComments), (LPCTSTR)m_szCode, sData.cbCode);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbCode), nStepsData[0].GetData(), sData.cbSteps);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbSteps), nBreakpointsData.GetData(), sData.cbBreakpoints);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbBreakpoints), nProfilesData.GetData(), sData.cbProfiles);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCProcedureThread::Unmap(CONST CByteArray &nInfo)
{
	DATA  sData;
	INT  cbData;
	INT  cbStep;
	INT  cbSteps;
	CByteArray  nStepsData[2];
	CByteArray  nProfilesData;
	CByteArray  nBreakpointsData;
	CDatabaseTCProcedureThreadStep  *pStep;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbComments + sData.cbCode + sData.cbSteps + sData.cbBreakpoints + sData.cbProfiles && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbComments > 0 && sData.cbCode > 0 && sData.cbSteps >= 0 && sData.cbBreakpoints >= 0 && sData.cbProfiles >= 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription));
		CopyMemory(m_szComments.GetBufferSetLength(STRINGCHARS(sData.cbComments)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbComments));
		CopyMemory(m_szCode.GetBufferSetLength(STRINGCHARS(sData.cbCode)), nInfo.GetData() + (cbData = cbData + sData.cbComments), STRINGBYTES(sData.cbCode));
		for (nStepsData[0].SetSize(sData.cbSteps), nBreakpointsData.SetSize(sData.cbBreakpoints), nProfilesData.SetSize(sData.cbProfiles), CopyMemory(nStepsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbCode), sData.cbSteps), CopyMemory(nBreakpointsData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbSteps), sData.cbBreakpoints), CopyMemory(nProfilesData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbBreakpoints), sData.cbProfiles), m_nAttributes = sData.nAttributes, m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), m_szComments.ReleaseBuffer(), m_szCode.ReleaseBuffer(), RemoveAll(), cbStep = cbSteps = 0; cbSteps < sData.cbSteps; cbSteps += cbStep)
		{
			for (CopyMemory(&cbStep, nStepsData[0].GetData() + cbSteps, sizeof(cbStep)), nStepsData[1].SetSize(max(min(cbStep, nStepsData[0].GetSize() - cbSteps), 0)); nStepsData[1].GetSize() >= 0; )
			{
				CopyMemory(nStepsData[1].GetData(), nStepsData[0].GetData() + cbSteps, nStepsData[1].GetSize());
				break;
			}
			if ((pStep = new CDatabaseTCProcedureThreadStep))
			{
				if (pStep->Unmap(nStepsData[1]) && Add(pStep) >= 0) continue;
				delete pStep;
			}
			break;
		}
		return((m_pDatabaseTCProcedureThreadBreakpoints.Unmap(nBreakpointsData) && m_pDatabaseTCProcedureThreadTestProfiles.Unmap(nProfilesData) && cbSteps == sData.cbSteps) ? TRUE : FALSE);
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCProcedure

CDatabaseTCProcedure::CDatabaseTCProcedure() : CPtrArray()
{
	m_nAttributes = 0;
	m_tDate[0] = 0;
	m_tDate[1] = 0;
}

CDatabaseTCProcedure::~CDatabaseTCProcedure()
{
	RemoveAll();
}

VOID CDatabaseTCProcedure::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTCProcedure::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTCProcedure::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseTCProcedure::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseTCProcedure::SetComments(LPCTSTR pszComments)
{
	m_szComments = pszComments;
}

CString CDatabaseTCProcedure::GetComments() CONST
{
	return m_szComments;
}

VOID CDatabaseTCProcedure::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseTCProcedure::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseTCProcedure::SetAuthor(LPCTSTR pszAuthor)
{
	m_szAuthor = pszAuthor;
}

CString CDatabaseTCProcedure::GetAuthor() CONST
{
	return m_szAuthor;
}

VOID CDatabaseTCProcedure::SetSubSystem(LPCTSTR pszSubSystem)
{
	m_szSubSystem = pszSubSystem;
}

CString CDatabaseTCProcedure::GetSubSystem() CONST
{
	return m_szSubSystem;
}

VOID CDatabaseTCProcedure::SetVerificationStatus(LPCTSTR pszStatus)
{
	m_szVerificationStatus = pszStatus;
}

CString CDatabaseTCProcedure::GetVerificationStatus() CONST
{
	return m_szVerificationStatus;
}

VOID CDatabaseTCProcedure::SetCreationDate(CONST CTimeKey &tDate)
{
	m_tDate[0] = tDate;
}

CTimeKey CDatabaseTCProcedure::GetCreationDate() CONST
{
	return m_tDate[0];
}

VOID CDatabaseTCProcedure::SetModificationDate(CONST CTimeKey &tDate)
{
	m_tDate[1] = tDate;
}

CTimeKey CDatabaseTCProcedure::GetModificationDate() CONST
{
	return m_tDate[1];
}

BOOL CDatabaseTCProcedure::SetArguments(CONST CDatabaseTCProcedureArguments &pDatabaseTCProcedureArguments)
{
	return m_pDatabaseTCProcedureArguments.Copy(&pDatabaseTCProcedureArguments);
}

INT CDatabaseTCProcedure::GetArguments(CDatabaseTCProcedureArguments &pDatabaseTCProcedureArguments) CONST
{
	return((pDatabaseTCProcedureArguments.Copy(&m_pDatabaseTCProcedureArguments)) ? (INT)pDatabaseTCProcedureArguments.GetSize() : -1);
}

BOOL CDatabaseTCProcedure::SetVariables(CONST CDatabaseTCProcedureVariables &pDatabaseTCProcedureVariables)
{
	return m_pDatabaseTCProcedureVariables.Copy(&pDatabaseTCProcedureVariables);
}

INT CDatabaseTCProcedure::GetVariables(CDatabaseTCProcedureVariables &pDatabaseTCProcedureVariables) CONST
{
	return((pDatabaseTCProcedureVariables.Copy(&m_pDatabaseTCProcedureVariables)) ? (INT)pDatabaseTCProcedureVariables.GetSize() : -1);
}

VOID CDatabaseTCProcedure::SetSourceCode(LPCTSTR pszCode)
{
	m_szSourceCode[0] = pszCode;
}
VOID CDatabaseTCProcedure::SetSourceCode(CONST CByteArray &nCode)
{
	m_nSourceCode.Copy(nCode);
}

CString CDatabaseTCProcedure::GetSourceCode() CONST
{
	return m_szSourceCode[0];
}
INT CDatabaseTCProcedure::GetSourceCode(CByteArray &nCode) CONST
{
	nCode.Copy(m_nSourceCode);
	return((INT)nCode.GetSize());
}

VOID CDatabaseTCProcedure::SetPrecompiledCode(LPCTSTR pszCode)
{
	m_szSourceCode[1] = pszCode;
}

CString CDatabaseTCProcedure::GetPrecompiledCode() CONST
{
	return m_szSourceCode[1];
}

VOID CDatabaseTCProcedure::SetExecutableFileName(LPCTSTR pszFileName)
{
	m_szFileName = pszFileName;
}

CString CDatabaseTCProcedure::GetExecutableFileName() CONST
{
	return m_szFileName;
}

INT CDatabaseTCProcedure::Add(CDatabaseTCProcedureThread *pDatabaseTCProcedureThread)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pDatabaseTCProcedureThread->GetName(), TRUE)) >= 0) InsertAt(nIndex, pDatabaseTCProcedureThread, 1);
	return nIndex;
}

INT CDatabaseTCProcedure::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTCProcedureThread *CDatabaseTCProcedure::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCProcedureThread *)CPtrArray::GetAt(nIndex) : (CDatabaseTCProcedureThread *)NULL);
}

CDatabaseTCProcedureThread *CDatabaseTCProcedure::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCProcedureThread *)CPtrArray::GetAt(nIndex) : (CDatabaseTCProcedureThread *)NULL);
}

VOID CDatabaseTCProcedure::RemoveAll()
{
	INT  nThread;
	INT  nThreads;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	for (nThread = 0, nThreads = (INT)GetSize(); nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread = GetAt(nThread))) delete pDatabaseTCProcedureThread;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCProcedure::Copy(CONST CDatabaseTCProcedure *pProcedure)
{
	INT  nThread;
	INT  nThreads;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	for (nThread = 0, nThreads = (m_pDatabaseTCProcedureArguments.Copy(&pProcedure->m_pDatabaseTCProcedureArguments) && m_pDatabaseTCProcedureVariables.Copy(&pProcedure->m_pDatabaseTCProcedureVariables)) ? (INT)pProcedure->GetSize() : -1, m_szName = pProcedure->m_szName, m_szDescription = pProcedure->m_szDescription, m_szComments = pProcedure->m_szComments, m_nAttributes = pProcedure->m_nAttributes, m_szAuthor = pProcedure->m_szAuthor, m_szSubSystem = pProcedure->m_szSubSystem, m_szVerificationStatus = pProcedure->m_szVerificationStatus, m_szSourceCode[0] = pProcedure->m_szSourceCode[0], m_szSourceCode[1] = pProcedure->m_szSourceCode[1], m_nSourceCode.Copy(pProcedure->m_nSourceCode), m_szFileName = pProcedure->m_szFileName, m_tDate[0] = pProcedure->m_tDate[0], m_tDate[1] = pProcedure->m_tDate[1], RemoveAll(); nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread = new CDatabaseTCProcedureThread))
		{
			if (pDatabaseTCProcedureThread->Copy(pProcedure->GetAt(nThread)))
			{
				InsertAt(nThread, pDatabaseTCProcedureThread, 1);
				continue;
			}
			delete pDatabaseTCProcedureThread;
		}
		break;
	}
	return((nThread == nThreads) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedure::Compare(CONST CDatabaseTCProcedure *pProcedure) CONST
{
	INT  nThread;
	INT  nThreads;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	for (nThread = 0, nThreads = (pProcedure->m_szName == m_szName && pProcedure->m_szDescription == m_szDescription && pProcedure->m_szComments == m_szComments && pProcedure->m_nAttributes == m_nAttributes && pProcedure->m_szAuthor == m_szAuthor && pProcedure->m_szSubSystem == m_szSubSystem && pProcedure->m_szVerificationStatus == m_szVerificationStatus && pProcedure->m_pDatabaseTCProcedureArguments.Compare(&m_pDatabaseTCProcedureArguments) && pProcedure->m_pDatabaseTCProcedureVariables.Compare(&m_pDatabaseTCProcedureVariables) && pProcedure->m_szSourceCode[0] == m_szSourceCode[0] && pProcedure->m_szSourceCode[1] == m_szSourceCode[1] && pProcedure->m_nSourceCode.GetSize() == m_nSourceCode.GetSize() && !memcmp(pProcedure->m_nSourceCode.GetData(), m_nSourceCode.GetData(), m_nSourceCode.GetSize()) && !pProcedure->m_szFileName.CompareNoCase(m_szFileName) && pProcedure->m_tDate[0] == m_tDate[0] && pProcedure->m_tDate[1] == m_tDate[1] && pProcedure->GetSize() == GetSize()) ? (INT)pProcedure->GetSize() : -1; nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread = pProcedure->GetAt(nThread)) && pDatabaseTCProcedureThread->Compare(GetAt(nThread))) continue;
		break;
	}
	return((nThread == nThreads) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedure::Map(CByteArray &nInfo) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nThread;
	INT  nThreads;
	CByteArray  nArgumentsData;
	CByteArray  nVariablesData;
	CByteArray  nThreadsData[2];
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbAuthor = (m_szAuthor.GetLength() + 1)*sizeof(TCHAR);
	sData.cbComments = (m_szComments.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	sData.cbFileName = (m_szFileName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbSubSystem = (m_szSubSystem.GetLength() + 1)*sizeof(TCHAR);
	sData.cbVerificationStatus = (m_szVerificationStatus.GetLength() + 1)*sizeof(TCHAR);
	sData.cbSourceCode[0] = (m_szSourceCode[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbSourceCode[1] = (m_szSourceCode[1].GetLength() + 1)*sizeof(TCHAR);
	sData.cbArguments = (m_pDatabaseTCProcedureArguments.Map(nArgumentsData)) ? (INT)nArgumentsData.GetSize() : -1;
	sData.cbVariables = (m_pDatabaseTCProcedureVariables.Map(nVariablesData)) ? (INT)nVariablesData.GetSize() : -1;
	for (nThread = 0, nThreads = (INT)GetSize(), sData.nAttributes = m_nAttributes, sData.tDate[0] = m_tDate[0].GetTime(), sData.tDate[1] = m_tDate[1].GetTime(), sData.cbThreads = 0; nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread = GetAt(nThread)) && pDatabaseTCProcedureThread->Map(nThreadsData[1]) && nThreadsData[0].Append(nThreadsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbAuthor + (sData.cbThreads = (INT)(nThreadsData[0].GetSize()*sizeof(BYTE))) + sData.cbComments + sData.cbDescription + sData.cbFileName + sData.cbSubSystem + max(sData.cbArguments, 0) + max(sData.cbVariables, 0) + sData.cbVerificationStatus + sData.cbSourceCode[0] + sData.cbSourceCode[1])); nInfo.GetSize() == sData.cbSize && sData.cbArguments >= 0 && sData.cbVariables >= 0 && nThread == nThreads; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szComments, sData.cbComments);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbComments), (LPCTSTR)m_szAuthor, sData.cbAuthor);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbAuthor), (LPCTSTR)m_szFileName, sData.cbFileName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbFileName), (LPCTSTR)m_szSubSystem, sData.cbSubSystem);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbSubSystem), (LPCTSTR)m_szVerificationStatus, sData.cbVerificationStatus);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbVerificationStatus), (LPCTSTR)m_szSourceCode[0], sData.cbSourceCode[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbSourceCode[0]), (LPCTSTR)m_szSourceCode[1], sData.cbSourceCode[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbSourceCode[1]), nThreadsData[0].GetData(), sData.cbThreads);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbThreads), nArgumentsData.GetData(), sData.cbArguments);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbArguments), nVariablesData.GetData(), sData.cbVariables);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseTCProcedure::Unmap(CONST CByteArray &nInfo)
{
	DATA  sData;
	INT  cbData;
	INT  cbThread;
	INT  cbThreads;
	CByteArray  nArgumentsData;
	CByteArray  nVariablesData;
	CByteArray  nThreadsData[2];
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbComments + sData.cbAuthor + sData.cbFileName + sData.cbSubSystem + sData.cbVerificationStatus + sData.cbSourceCode[0] + sData.cbSourceCode[1] + sData.cbThreads + sData.cbArguments + sData.cbVariables && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbComments > 0 && sData.cbAuthor > 0 && sData.cbFileName > 0 && sData.cbSubSystem > 0 && sData.cbVerificationStatus > 0 && sData.cbSourceCode[0] > 0 && sData.cbSourceCode[1] > 0 && sData.cbThreads >= 0 && sData.cbArguments >= 0 && sData.cbVariables >= 0; )
	{
		for (nThreadsData[0].SetSize(sData.cbThreads), nArgumentsData.SetSize(sData.cbArguments), nVariablesData.SetSize(sData.cbVariables), CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription)), CopyMemory(m_szComments.GetBufferSetLength(STRINGCHARS(sData.cbComments)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbComments)), CopyMemory(m_szAuthor.GetBufferSetLength(STRINGCHARS(sData.cbAuthor)), nInfo.GetData() + (cbData = cbData + sData.cbComments), STRINGBYTES(sData.cbAuthor)), CopyMemory(m_szFileName.GetBufferSetLength(STRINGCHARS(sData.cbFileName)), nInfo.GetData() + (cbData = cbData + sData.cbAuthor), STRINGBYTES(sData.cbFileName)), CopyMemory(m_szSubSystem.GetBufferSetLength(STRINGCHARS(sData.cbSubSystem)), nInfo.GetData() + (cbData = cbData + sData.cbFileName), STRINGBYTES(sData.cbSubSystem)), CopyMemory(m_szVerificationStatus.GetBufferSetLength(STRINGCHARS(sData.cbVerificationStatus)), nInfo.GetData() + (cbData = cbData + sData.cbSubSystem), STRINGBYTES(sData.cbVerificationStatus)), CopyMemory(m_szSourceCode[0].GetBufferSetLength(STRINGCHARS(sData.cbSourceCode[0])), nInfo.GetData() + (cbData = cbData + sData.cbVerificationStatus), STRINGBYTES(sData.cbSourceCode[0])), CopyMemory(m_szSourceCode[1].GetBufferSetLength(STRINGCHARS(sData.cbSourceCode[1])), nInfo.GetData() + (cbData = cbData + sData.cbSourceCode[0]), STRINGBYTES(sData.cbSourceCode[1])), CopyMemory(nThreadsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbSourceCode[1]), sData.cbThreads), CopyMemory(nArgumentsData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbThreads), sData.cbArguments), CopyMemory(nVariablesData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbArguments), sData.cbVariables), m_nAttributes = sData.nAttributes, m_tDate[0] = sData.tDate[0], m_tDate[1] = sData.tDate[1], m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), m_szComments.ReleaseBuffer(), m_szAuthor.ReleaseBuffer(), m_szFileName.ReleaseBuffer(), m_szSubSystem.ReleaseBuffer(), m_szVerificationStatus.ReleaseBuffer(), m_szSourceCode[0].ReleaseBuffer(), m_szSourceCode[1].ReleaseBuffer(), RemoveAll(), cbThread = cbThreads = 0; cbThreads < sData.cbThreads; cbThreads += cbThread)
		{
			for (CopyMemory(&cbThread, nThreadsData[0].GetData() + cbThreads, sizeof(cbThread)), nThreadsData[1].SetSize(max(min(cbThread, nThreadsData[0].GetSize() - cbThreads), 0)); nThreadsData[1].GetSize() >= 0; )
			{
				CopyMemory(nThreadsData[1].GetData(), nThreadsData[0].GetData() + cbThreads, nThreadsData[1].GetSize());
				break;
			}
			if ((pDatabaseTCProcedureThread = new CDatabaseTCProcedureThread))
			{
				if (pDatabaseTCProcedureThread->Unmap(nThreadsData[1]) && Add(pDatabaseTCProcedureThread) >= 0) continue;
				delete pDatabaseTCProcedureThread;
			}
			break;
		}
		return((m_pDatabaseTCProcedureArguments.Unmap(nArgumentsData) && m_pDatabaseTCProcedureVariables.Unmap(nVariablesData) && cbThreads == sData.cbThreads) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseTCProcedure::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	for (nIndex = nMinIndex = (bInsert) ? (INT)GetSize() : 0, nMaxIndex = (lstrlen(pszName) > 0) ? (INT)GetSize() : -1; nIndex < nMaxIndex; nIndex++)
	{
		if ((pDatabaseTCProcedureThread = GetAt(nIndex)) && pDatabaseTCProcedureThread->GetName() == pszName) break;
		continue;
	}
	return(((bInsert || nIndex < nMaxIndex) && nMaxIndex >= 0) ? nIndex : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTCProcedures

CDatabaseTCProcedures::CDatabaseTCProcedures() : CPtrArray()
{
	return;
}

CDatabaseTCProcedures::~CDatabaseTCProcedures()
{
	RemoveAll();
}

INT CDatabaseTCProcedures::Add(CDatabaseTCProcedure *pProcedure)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pProcedure->GetName(), TRUE)) >= 0) InsertAt(nIndex, pProcedure, 1);
	return nIndex;
}

INT CDatabaseTCProcedures::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseTCProcedure *CDatabaseTCProcedures::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCProcedure *)CPtrArray::GetAt(nIndex) : (CDatabaseTCProcedure *)NULL);
}

CDatabaseTCProcedure *CDatabaseTCProcedures::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseTCProcedure *)CPtrArray::GetAt(nIndex) : (CDatabaseTCProcedure *)NULL);
}

VOID CDatabaseTCProcedures::RemoveAll()
{
	INT  nProcedure;
	INT  nProcedures;
	CDatabaseTCProcedure  *pProcedure;

	for (nProcedure = 0, nProcedures = (INT)GetSize(); nProcedure < nProcedures; nProcedure++)
	{
		if ((pProcedure = GetAt(nProcedure))) delete pProcedure;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseTCProcedures::Copy(CONST CDatabaseTCProcedures *pProcedures)
{
	INT  nProcedure;
	INT  nProcedures;
	CDatabaseTCProcedure  *pProcedure;

	for (nProcedure = 0, nProcedures = (INT)pProcedures->GetSize(), RemoveAll(); nProcedure < nProcedures; nProcedure++)
	{
		if ((pProcedure = new CDatabaseTCProcedure))
		{
			pProcedure->Copy(pProcedures->GetAt(nProcedure));
			InsertAt(nProcedure, pProcedure, 1);
			continue;
		}
		break;
	}
	return((nProcedure == nProcedures) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedures::Compare(CONST CDatabaseTCProcedures *pProcedures) CONST
{
	INT  nProcedure;
	INT  nProcedures;

	for (nProcedure = 0, nProcedures = (pProcedures->GetSize() == GetSize()) ? (INT)GetSize() : -1; nProcedure < nProcedures; nProcedure++)
	{
		if (!pProcedures->GetAt(nProcedure)->Compare(GetAt(nProcedure))) break;
		continue;
	}
	return((nProcedure == nProcedures) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedures::Map(CByteArray &nInfo) CONST
{
	INT  nProcedure;
	INT  nProcedures;
	CByteArray  nProceduresData;
	CDatabaseTCProcedure  *pProcedure;

	for (nProcedure = 0, nProcedures = (INT)GetSize(), nInfo.RemoveAll(); nProcedure < nProcedures; nProcedure++)
	{
		if ((pProcedure = GetAt(nProcedure)) && pProcedure->Map(nProceduresData) && nInfo.Append(nProceduresData) >= 0) continue;
		break;
	}
	return((nProcedure == nProcedures) ? TRUE : FALSE);
}

BOOL CDatabaseTCProcedures::Unmap(CONST CByteArray &nInfo)
{
	INT  cbProcedure;
	INT  cbProcedures;
	CByteArray  nProceduresData;
	CDatabaseTCProcedure  *pProcedure;

	for (cbProcedures = 0, RemoveAll(); cbProcedures < nInfo.GetSize(); cbProcedures += cbProcedure)
	{
		for (CopyMemory(&cbProcedure, nInfo.GetData() + cbProcedures, sizeof(cbProcedure)), nProceduresData.SetSize(max(min(cbProcedure, nInfo.GetSize() - cbProcedures), 0)); nProceduresData.GetSize() >= 0; )
		{
			CopyMemory(nProceduresData.GetData(), nInfo.GetData() + cbProcedures, nProceduresData.GetSize());
			break;
		}
		if ((pProcedure = new CDatabaseTCProcedure))
		{
			if (pProcedure->Unmap(nProceduresData) && Add(pProcedure) >= 0) continue;
			delete pProcedure;
		}
		break;
	}
	return((cbProcedures == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseTCProcedures::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseTCProcedure  *pProcedure;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pProcedure = GetAt(nIndex[0]))) ? ((nIndex[1] = (pProcedure->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pProcedure = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pProcedure->GetName() == pszName) || (bInsert && (((pProcedure = GetAt(max(nIndex[0] - 1, 0))) && pProcedure->GetName() != pszName && (pProcedure = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pProcedure->GetName() != pszName) || !GetSize()) && lstrlen(pszName) > 0)) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseOBProcessorMemoryImageBlock

CDatabaseOBProcessorMemoryImageBlock::CDatabaseOBProcessorMemoryImageBlock() : CObject()
{
	m_nAddress[0] = 0;
	m_nAddress[1] = 0;
	m_bAddress = FALSE;
}

VOID CDatabaseOBProcessorMemoryImageBlock::SetVersion(LPCTSTR pszVersion)
{
	m_szVersion = pszVersion;
}

CString CDatabaseOBProcessorMemoryImageBlock::GetVersion() CONST
{
	return m_szVersion;
}

VOID CDatabaseOBProcessorMemoryImageBlock::SetAddress(UINT nPage, UINT nAddress)
{
	m_nAddress[0] = nPage;
	m_nAddress[1] = nAddress;
	m_bAddress = TRUE;
}

BOOL CDatabaseOBProcessorMemoryImageBlock::GetAddress(UINT &nPage, UINT &nAddress) CONST
{
	nPage = m_nAddress[0];
	nAddress = m_nAddress[1];
	return m_bAddress;
}

VOID CDatabaseOBProcessorMemoryImageBlock::SetData(LPCTSTR pszData)
{
	m_szData = pszData;
}
VOID CDatabaseOBProcessorMemoryImageBlock::SetData(CONST CByteArray &nData)
{
	m_nData[0].Copy(nData);
}

CString CDatabaseOBProcessorMemoryImageBlock::GetData() CONST
{
	return m_szData;
}
INT CDatabaseOBProcessorMemoryImageBlock::GetData(CByteArray &nData) CONST
{
	nData.Copy(m_nData[0]);
	return((INT)nData.GetSize());
}

VOID CDatabaseOBProcessorMemoryImageBlock::SetMask(CONST CByteArray &nMask)
{
	m_nData[1].Copy(nMask);
}

INT CDatabaseOBProcessorMemoryImageBlock::GetMask(CByteArray &nMask) CONST
{
	nMask.Copy(m_nData[1]);
	return((INT)nMask.GetSize());
}

VOID CDatabaseOBProcessorMemoryImageBlock::Copy(CONST CDatabaseOBProcessorMemoryImageBlock *pMemoryImageBlock)
{
	m_szVersion = pMemoryImageBlock->m_szVersion;
	m_nAddress[0] = pMemoryImageBlock->m_nAddress[0];
	m_nAddress[1] = pMemoryImageBlock->m_nAddress[1];
	m_bAddress = pMemoryImageBlock->m_bAddress;
	m_szData = pMemoryImageBlock->m_szData;
	m_nData[0].Copy(pMemoryImageBlock->m_nData[0]);
	m_nData[1].Copy(pMemoryImageBlock->m_nData[1]);
}

BOOL CDatabaseOBProcessorMemoryImageBlock::Compare(CONST CDatabaseOBProcessorMemoryImageBlock *pMemoryImageBlock) CONST
{
	return((pMemoryImageBlock->m_szVersion == m_szVersion  &&  pMemoryImageBlock->m_nAddress[0] == m_nAddress[0] && pMemoryImageBlock->m_nAddress[1] == m_nAddress[1] && pMemoryImageBlock->m_bAddress == m_bAddress  &&  !pMemoryImageBlock->m_szData.CompareNoCase(m_szData) && pMemoryImageBlock->m_nData[0].GetSize() == m_nData[0].GetSize() && pMemoryImageBlock->m_nData[1].GetSize() == m_nData[1].GetSize() && !memcmp(pMemoryImageBlock->m_nData[0].GetData(), m_nData[0].GetData(), m_nData[0].GetSize()) && !memcmp(pMemoryImageBlock->m_nData[1].GetData(), m_nData[1].GetData(), m_nData[1].GetSize())) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessorMemoryImageBlock::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbVersion = (m_szVersion.GetLength() + 1)*sizeof(TCHAR);
	sData.cbData[0] = (bBinary) ? (INT)(m_nData[0].GetSize()*sizeof(BYTE)) : 0;
	sData.cbData[1] = (bBinary) ? (INT)(m_nData[1].GetSize()*sizeof(BYTE)) : 0;
	sData.cbData[2] = (!bBinary) ? ((m_szData.GetLength() + 1)*sizeof(TCHAR)) : 0;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbVersion + sData.cbData[0] + sData.cbData[1] + sData.cbData[2])), sData.nAddress[0] = m_nAddress[0], sData.nAddress[1] = m_nAddress[1], sData.bAddress = m_bAddress, sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szVersion, sData.cbVersion);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbVersion), m_nData[0].GetData(), sData.cbData[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbData[0]), m_nData[1].GetData(), sData.cbData[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbData[1]), (LPCTSTR)m_szData, sData.cbData[2]);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseOBProcessorMemoryImageBlock::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbVersion + sData.cbData[0] + sData.cbData[1] + sData.cbData[2] && sData.cbVersion > 0 && sData.cbData[0] >= 0 && sData.cbData[1] >= 0 && sData.cbData[2] >= 0 && sData.bBinary == bBinary; )
	{
		for (m_nData[0].SetSize(sData.cbData[0]), m_nData[1].SetSize(sData.cbData[1]); m_nData[0].GetSize() == sData.cbData[0] && m_nData[1].GetSize() == sData.cbData[1]; )
		{
			CopyMemory(m_szVersion.GetBufferSetLength(STRINGCHARS(sData.cbVersion)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbVersion));
			CopyMemory(m_nData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbVersion), sData.cbData[0]);
			CopyMemory(m_nData[1].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbData[0]), sData.cbData[1]);
			CopyMemory(m_szData.GetBufferSetLength(STRINGCHARS(sData.cbData[2])), nInfo.GetData() + (cbData = cbData + sData.cbData[1]), STRINGBYTES(sData.cbData[2]));
			m_nAddress[0] = sData.nAddress[0];
			m_nAddress[1] = sData.nAddress[1];
			m_bAddress = sData.bAddress;
			m_szVersion.ReleaseBuffer();
			m_szData.ReleaseBuffer();
			return TRUE;
		}
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseOBProcessorMemoryImage

CDatabaseOBProcessorMemoryImage::CDatabaseOBProcessorMemoryImage() : CPtrArray()
{
	m_nAttributes = 0;
}

CDatabaseOBProcessorMemoryImage::~CDatabaseOBProcessorMemoryImage()
{
	RemoveAll();
}

VOID CDatabaseOBProcessorMemoryImage::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseOBProcessorMemoryImage::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseOBProcessorMemoryImage::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseOBProcessorMemoryImage::GetAttributes() CONST
{
	return m_nAttributes;
}

INT CDatabaseOBProcessorMemoryImage::Add(CDatabaseOBProcessorMemoryImageBlock *pMemoryImageBlock)
{
	INT  nIndex;
	UINT  nAddress[2];

	if ((nIndex = (pMemoryImageBlock->GetAddress(nAddress[0], nAddress[1])) ? FindIndex(pMemoryImageBlock->GetVersion(), nAddress[0], nAddress[1], TRUE) : -1) >= 0) InsertAt(nIndex, pMemoryImageBlock, 1);
	return nIndex;
}

INT CDatabaseOBProcessorMemoryImage::Find(LPCTSTR pszVersion, UINT nPage, UINT nAddress) CONST
{
	return FindIndex(pszVersion, nPage, nAddress);
}

CDatabaseOBProcessorMemoryImageBlock *CDatabaseOBProcessorMemoryImage::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseOBProcessorMemoryImageBlock *)CPtrArray::GetAt(nIndex) : (CDatabaseOBProcessorMemoryImageBlock *)NULL);
}

CDatabaseOBProcessorMemoryImageBlock *CDatabaseOBProcessorMemoryImage::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseOBProcessorMemoryImageBlock *)CPtrArray::GetAt(nIndex) : (CDatabaseOBProcessorMemoryImageBlock *)NULL);
}

VOID CDatabaseOBProcessorMemoryImage::RemoveAll()
{
	INT  nMemoryImageBlock;
	INT  nMemoryImageBlocks;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	for (nMemoryImageBlock = 0, nMemoryImageBlocks = (INT)GetSize(); nMemoryImageBlock < nMemoryImageBlocks; nMemoryImageBlock++)
	{
		if ((pMemoryImageBlock = GetAt(nMemoryImageBlock))) delete pMemoryImageBlock;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseOBProcessorMemoryImage::Copy(CONST CDatabaseOBProcessorMemoryImage *pMemoryImage)
{
	INT  nMemoryImageBlock;
	INT  nMemoryImageBlocks;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	for (nMemoryImageBlock = 0, nMemoryImageBlocks = (INT)pMemoryImage->GetSize(), m_szName = pMemoryImage->m_szName, m_nAttributes = pMemoryImage->m_nAttributes, RemoveAll(); nMemoryImageBlock < nMemoryImageBlocks; nMemoryImageBlock++)
	{
		if ((pMemoryImageBlock = new CDatabaseOBProcessorMemoryImageBlock))
		{
			pMemoryImageBlock->Copy(pMemoryImage->GetAt(nMemoryImageBlock));
			InsertAt(nMemoryImageBlock, pMemoryImageBlock, 1);
			continue;
		}
		break;
	}
	return((nMemoryImageBlock == nMemoryImageBlocks) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessorMemoryImage::Compare(CONST CDatabaseOBProcessorMemoryImage *pMemoryImage) CONST
{
	INT  nMemoryImageBlock;
	INT  nMemoryImageBlocks;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	for (nMemoryImageBlock = 0, nMemoryImageBlocks = (pMemoryImage->m_szName == m_szName && pMemoryImage->m_nAttributes == m_nAttributes && pMemoryImage->GetSize() == GetSize()) ? (INT)GetSize() : -1; nMemoryImageBlock < nMemoryImageBlocks; nMemoryImageBlock++)
	{
		if ((pMemoryImageBlock = pMemoryImage->GetAt(nMemoryImageBlock)) && pMemoryImageBlock->Compare(GetAt(nMemoryImageBlock))) continue;
		break;
	}
	return((nMemoryImageBlock == nMemoryImageBlocks) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessorMemoryImage::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nMemoryImageBlock;
	INT  nMemoryImageBlocks;
	CByteArray  nMemoryImageBlocksData[2];
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	for (nMemoryImageBlock = 0, nMemoryImageBlocks = (INT)GetSize(), sData.nAttributes = m_nAttributes, sData.bBinary = bBinary; nMemoryImageBlock < nMemoryImageBlocks; nMemoryImageBlock++)
	{
		if ((pMemoryImageBlock = GetAt(nMemoryImageBlock)) && pMemoryImageBlock->Map(nMemoryImageBlocksData[1], bBinary) && nMemoryImageBlocksData[0].Append(nMemoryImageBlocksData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + (sData.cbBlocks = (INT)(nMemoryImageBlocksData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nMemoryImageBlock == nMemoryImageBlocks; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), nMemoryImageBlocksData[0].GetData(), sData.cbBlocks);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseOBProcessorMemoryImage::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbMemoryImageBlock;
	INT  cbMemoryImageBlocks;
	CByteArray  nMemoryImageBlocksData[2];
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbBlocks && sData.cbName > 0 && sData.cbBlocks >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		for (nMemoryImageBlocksData[0].SetSize(sData.cbBlocks), CopyMemory(nMemoryImageBlocksData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbName), sData.cbBlocks), m_nAttributes = sData.nAttributes, m_szName.ReleaseBuffer(), RemoveAll(), cbMemoryImageBlock = cbMemoryImageBlocks = 0; cbMemoryImageBlocks < sData.cbBlocks; cbMemoryImageBlocks += cbMemoryImageBlock)
		{
			for (CopyMemory(&cbMemoryImageBlock, nMemoryImageBlocksData[0].GetData() + cbMemoryImageBlocks, sizeof(cbMemoryImageBlock)), nMemoryImageBlocksData[1].SetSize(max(min(cbMemoryImageBlock, nMemoryImageBlocksData[0].GetSize() - cbMemoryImageBlocks), 0)); nMemoryImageBlocksData[1].GetSize() >= 0; )
			{
				CopyMemory(nMemoryImageBlocksData[1].GetData(), nMemoryImageBlocksData[0].GetData() + cbMemoryImageBlocks, nMemoryImageBlocksData[1].GetSize());
				break;
			}
			if ((pMemoryImageBlock = new CDatabaseOBProcessorMemoryImageBlock))
			{
				if (pMemoryImageBlock->Unmap(nMemoryImageBlocksData[1], bBinary) && Add(pMemoryImageBlock) >= 0) continue;
				delete pMemoryImageBlock;
			}
			break;
		}
		return((cbMemoryImageBlocks == sData.cbBlocks) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseOBProcessorMemoryImage::FindIndex(LPCTSTR pszVersion, UINT nPage, UINT nAddress, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	BOOL  bAddress;
	UINT  nBlockPage;
	UINT  nBlockAddress;
	CDatabaseOBProcessorMemoryImageBlock  *pMemoryImageBlock;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2, bAddress = (nPage != (UINT)-1 || nAddress != (UINT)-1 || bInsert); nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pMemoryImageBlock = GetAt(nIndex[0])) && (!bAddress || pMemoryImageBlock->GetAddress(nBlockPage, nBlockAddress))) ? ((nIndex[1] = ((!bAddress  &&  pMemoryImageBlock->GetVersion() < pszVersion) || (bAddress && (pMemoryImageBlock->GetVersion() < pszVersion || (pMemoryImageBlock->GetVersion() == pszVersion && (nBlockPage < nPage || (nBlockPage == nPage  &&  nBlockAddress <= nAddress))))))) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pMemoryImageBlock = GetAt((nIndex[0] = (bAddress) ? max(nIndex[0] - 1, 0) : nIndex[0]))) && ((!bAddress  &&  pMemoryImageBlock->GetVersion() == pszVersion) || (bAddress  &&  pMemoryImageBlock->GetAddress(nBlockPage, nBlockAddress) && pMemoryImageBlock->GetVersion() == pszVersion  &&  nBlockPage == nPage  &&  nBlockAddress == nAddress))) || (bInsert && (((pMemoryImageBlock = GetAt(max(nIndex[0] - 1, 0))) && pMemoryImageBlock->GetAddress(nBlockPage, nBlockAddress) && (pMemoryImageBlock->GetVersion() != pszVersion || nBlockPage != nPage || nBlockAddress != nAddress) && (pMemoryImageBlock = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pMemoryImageBlock->GetAddress(nBlockPage, nBlockAddress) && (pMemoryImageBlock->GetVersion() != pszVersion || nBlockPage != nPage || nBlockAddress != nAddress)) || !GetSize()))) && lstrlen(pszVersion) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseOBProcessorMemoryImages

CDatabaseOBProcessorMemoryImages::CDatabaseOBProcessorMemoryImages() : CPtrArray()
{
	return;
}

CDatabaseOBProcessorMemoryImages::~CDatabaseOBProcessorMemoryImages()
{
	RemoveAll();
}

INT CDatabaseOBProcessorMemoryImages::Add(CDatabaseOBProcessorMemoryImage *pMemoryImage)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pMemoryImage->GetName(), TRUE)) >= 0) InsertAt(nIndex, pMemoryImage, 1);
	return nIndex;
}

INT CDatabaseOBProcessorMemoryImages::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseOBProcessorMemoryImage *CDatabaseOBProcessorMemoryImages::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseOBProcessorMemoryImage *)CPtrArray::GetAt(nIndex) : (CDatabaseOBProcessorMemoryImage *)NULL);
}

CDatabaseOBProcessorMemoryImage *CDatabaseOBProcessorMemoryImages::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseOBProcessorMemoryImage *)CPtrArray::GetAt(nIndex) : (CDatabaseOBProcessorMemoryImage *)NULL);
}

VOID CDatabaseOBProcessorMemoryImages::RemoveAll()
{
	INT  nMemoryImage;
	INT  nMemoryImages;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;

	for (nMemoryImage = 0, nMemoryImages = (INT)GetSize(); nMemoryImage < nMemoryImages; nMemoryImage++)
	{
		if ((pMemoryImage = GetAt(nMemoryImage))) delete pMemoryImage;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseOBProcessorMemoryImages::Copy(CONST CDatabaseOBProcessorMemoryImages *pMemoryImages)
{
	INT  nMemoryImage;
	INT  nMemoryImages;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;

	for (nMemoryImage = 0, nMemoryImages = (INT)pMemoryImages->GetSize(), RemoveAll(); nMemoryImage < nMemoryImages; nMemoryImage++)
	{
		if ((pMemoryImage = new CDatabaseOBProcessorMemoryImage))
		{
			pMemoryImage->Copy(pMemoryImages->GetAt(nMemoryImage));
			InsertAt(nMemoryImage, pMemoryImage, 1);
			continue;
		}
		break;
	}
	return((nMemoryImage == nMemoryImages) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessorMemoryImages::Compare(CONST CDatabaseOBProcessorMemoryImages *pMemoryImages) CONST
{
	INT  nMemoryImage;
	INT  nMemoryImages;

	for (nMemoryImage = 0, nMemoryImages = (pMemoryImages->GetSize() == GetSize()) ? (INT)GetSize() : -1; nMemoryImage < nMemoryImages; nMemoryImage++)
	{
		if (!pMemoryImages->GetAt(nMemoryImage)->Compare(GetAt(nMemoryImage))) break;
		continue;
	}
	return((nMemoryImage == nMemoryImages) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessorMemoryImages::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nMemoryImage;
	INT  nMemoryImages;
	CByteArray  nMemoryImagesData;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;

	for (nMemoryImage = 0, nMemoryImages = (INT)GetSize(), nInfo.RemoveAll(); nMemoryImage < nMemoryImages; nMemoryImage++)
	{
		if ((pMemoryImage = GetAt(nMemoryImage)) && pMemoryImage->Map(nMemoryImagesData, bBinary) && nInfo.Append(nMemoryImagesData) >= 0) continue;
		break;
	}
	return((nMemoryImage == nMemoryImages) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessorMemoryImages::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbMemoryImage;
	INT  cbMemoryImages;
	CByteArray  nMemoryImagesData;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;

	for (cbMemoryImages = 0, RemoveAll(); cbMemoryImages < nInfo.GetSize(); cbMemoryImages += cbMemoryImage)
	{
		for (CopyMemory(&cbMemoryImage, nInfo.GetData() + cbMemoryImages, sizeof(cbMemoryImage)), nMemoryImagesData.SetSize(max(min(cbMemoryImage, nInfo.GetSize() - cbMemoryImages), 0)); nMemoryImagesData.GetSize() >= 0; )
		{
			CopyMemory(nMemoryImagesData.GetData(), nInfo.GetData() + cbMemoryImages, nMemoryImagesData.GetSize());
			break;
		}
		if ((pMemoryImage = new CDatabaseOBProcessorMemoryImage))
		{
			if (pMemoryImage->Unmap(nMemoryImagesData, bBinary) && Add(pMemoryImage) >= 0) continue;
			delete pMemoryImage;
		}
		break;
	}
	return((cbMemoryImages == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseOBProcessorMemoryImages::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseOBProcessorMemoryImage  *pMemoryImage;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pMemoryImage = GetAt(nIndex[0]))) ? ((nIndex[1] = (pMemoryImage->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pMemoryImage = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pMemoryImage->GetName() == pszName) || (bInsert && (((pMemoryImage = GetAt(max(nIndex[0] - 1, 0))) && pMemoryImage->GetName() != pszName && (pMemoryImage = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pMemoryImage->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseOBProcessorMemoryAreaCheckSum

CDatabaseOBProcessorMemoryAreaCheckSum::CDatabaseOBProcessorMemoryAreaCheckSum() : CObject()
{
	m_nLength = 0;
	m_nSeedValue = (UINT)-1;
	m_nDestination = (UINT)-1;
	m_nAddressRange[0] = 0;
	m_nAddressRange[1] = 0;
	m_nAddressRange[2] = 0;
	m_bAddressRange = FALSE;
}

VOID CDatabaseOBProcessorMemoryAreaCheckSum::SetSeed(UINT nValue)
{
	m_nSeedValue = nValue;
}

UINT CDatabaseOBProcessorMemoryAreaCheckSum::GetSeed() CONST
{
	return m_nSeedValue;
}

VOID CDatabaseOBProcessorMemoryAreaCheckSum::SetLength(INT nLength)
{
	m_nLength = nLength;
}

INT CDatabaseOBProcessorMemoryAreaCheckSum::GetLength() CONST
{
	return m_nLength;
}

VOID CDatabaseOBProcessorMemoryAreaCheckSum::SetDestination(UINT nDestination)
{
	m_nDestination = nDestination;
}

UINT CDatabaseOBProcessorMemoryAreaCheckSum::GetDestination() CONST
{
	return m_nDestination;
}

VOID CDatabaseOBProcessorMemoryAreaCheckSum::SetAddressRange(UINT nPage, UINT nStartAddress, UINT nEndAddress)
{
	m_nAddressRange[0] = nPage;
	m_nAddressRange[1] = nStartAddress;
	m_nAddressRange[2] = nEndAddress;
	m_bAddressRange = TRUE;
}

BOOL CDatabaseOBProcessorMemoryAreaCheckSum::GetAddressRange(UINT &nPage, UINT &nStartAddress, UINT &nEndAddress) CONST
{
	nPage = m_nAddressRange[0];
	nStartAddress = m_nAddressRange[1];
	nEndAddress = m_nAddressRange[2];
	return m_bAddressRange;
}

VOID CDatabaseOBProcessorMemoryAreaCheckSum::Copy(CONST CDatabaseOBProcessorMemoryAreaCheckSum *pCheckSum)
{
	m_nSeedValue = pCheckSum->m_nSeedValue;
	m_nLength = pCheckSum->m_nLength;
	m_nDestination = pCheckSum->m_nDestination;
	m_nAddressRange[0] = pCheckSum->m_nAddressRange[0];
	m_nAddressRange[1] = pCheckSum->m_nAddressRange[1];
	m_nAddressRange[2] = pCheckSum->m_nAddressRange[2];
	m_bAddressRange = pCheckSum->m_bAddressRange;
}

BOOL CDatabaseOBProcessorMemoryAreaCheckSum::Compare(CONST CDatabaseOBProcessorMemoryAreaCheckSum *pCheckSum) CONST
{
	return((pCheckSum->m_nSeedValue == m_nSeedValue  &&  pCheckSum->m_nLength == m_nLength  &&  pCheckSum->m_nDestination == m_nDestination  &&  pCheckSum->m_nAddressRange[0] == m_nAddressRange[0] && pCheckSum->m_nAddressRange[1] == m_nAddressRange[1] && pCheckSum->m_nAddressRange[2] == m_nAddressRange[2] && pCheckSum->m_bAddressRange == m_bAddressRange) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessorMemoryAreaCheckSum::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;

	for (nInfo.SetSize((sData.cbSize = sizeof(DATA))), sData.nSeedValue = m_nSeedValue, sData.nLength = m_nLength, sData.nDestination = m_nDestination, sData.nAddressRange[0] = m_nAddressRange[0], sData.nAddressRange[1] = m_nAddressRange[1], sData.nAddressRange[2] = m_nAddressRange[2], sData.bAddressRange = m_bAddressRange, sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseOBProcessorMemoryAreaCheckSum::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) && sData.bBinary == bBinary; )
	{
		m_nSeedValue = sData.nSeedValue;
		m_nLength = sData.nLength;
		m_nDestination = sData.nDestination;
		m_nAddressRange[0] = sData.nAddressRange[0];
		m_nAddressRange[1] = sData.nAddressRange[1];
		m_nAddressRange[2] = sData.nAddressRange[2];
		m_bAddressRange = sData.bAddressRange;
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseOBProcessorMemoryAreaCatalogueEntry

CDatabaseOBProcessorMemoryAreaCatalogueEntry::CDatabaseOBProcessorMemoryAreaCatalogueEntry() : CObject()
{
	m_nAttributes = 0;
}

VOID CDatabaseOBProcessorMemoryAreaCatalogueEntry::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseOBProcessorMemoryAreaCatalogueEntry::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseOBProcessorMemoryAreaCatalogueEntry::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseOBProcessorMemoryAreaCatalogueEntry::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseOBProcessorMemoryAreaCatalogueEntry::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseOBProcessorMemoryAreaCatalogueEntry::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseOBProcessorMemoryAreaCatalogueEntry::SetLocation(LPCTSTR pszLocation)
{
	m_szLocation = pszLocation;
}

CString CDatabaseOBProcessorMemoryAreaCatalogueEntry::GetLocation() CONST
{
	return m_szLocation;
}

VOID CDatabaseOBProcessorMemoryAreaCatalogueEntry::SetVersion(LPCTSTR pszVersion)
{
	m_szVersion = pszVersion;
}

CString CDatabaseOBProcessorMemoryAreaCatalogueEntry::GetVersion() CONST
{
	return m_szVersion;
}

VOID CDatabaseOBProcessorMemoryAreaCatalogueEntry::SetDate(LPCTSTR pszDate)
{
	m_szDate = pszDate;
}

CString CDatabaseOBProcessorMemoryAreaCatalogueEntry::GetDate() CONST
{
	return m_szDate;
}

VOID CDatabaseOBProcessorMemoryAreaCatalogueEntry::SetTime(LPCTSTR pszTime)
{
	m_szTime = pszTime;
}

CString CDatabaseOBProcessorMemoryAreaCatalogueEntry::GetTime() CONST
{
	return m_szTime;
}

VOID CDatabaseOBProcessorMemoryAreaCatalogueEntry::Copy(CONST CDatabaseOBProcessorMemoryAreaCatalogueEntry *pMemoryAreaCatalogueEntry)
{
	m_szName = pMemoryAreaCatalogueEntry->m_szName;
	m_szDescription = pMemoryAreaCatalogueEntry->m_szDescription;
	m_nAttributes = pMemoryAreaCatalogueEntry->m_nAttributes;
	m_szLocation = pMemoryAreaCatalogueEntry->m_szLocation;
	m_szVersion = pMemoryAreaCatalogueEntry->m_szVersion;
	m_szDate = pMemoryAreaCatalogueEntry->m_szDate;
	m_szTime = pMemoryAreaCatalogueEntry->m_szTime;
}

BOOL CDatabaseOBProcessorMemoryAreaCatalogueEntry::Compare(CONST CDatabaseOBProcessorMemoryAreaCatalogueEntry *pMemoryAreaCatalogueEntry) CONST
{
	return((pMemoryAreaCatalogueEntry->m_szName == m_szName  &&  pMemoryAreaCatalogueEntry->m_szDescription == m_szDescription  &&  pMemoryAreaCatalogueEntry->m_nAttributes == m_nAttributes  &&  pMemoryAreaCatalogueEntry->m_szLocation == m_szLocation  &&  pMemoryAreaCatalogueEntry->m_szVersion == m_szVersion  &&  pMemoryAreaCatalogueEntry->m_szDate == m_szDate  &&  pMemoryAreaCatalogueEntry->m_szTime == m_szTime) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessorMemoryAreaCatalogueEntry::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbVersion = (m_szVersion.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	sData.cbLocation = (m_szLocation.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDate = (m_szDate.GetLength() + 1)*sizeof(TCHAR);
	sData.cbTime = (m_szTime.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbVersion + sData.cbDescription + sData.cbLocation + sData.cbDate + sData.cbTime)), sData.nAttributes = m_nAttributes, sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szVersion, sData.cbVersion);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbVersion), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szLocation, sData.cbLocation);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbLocation), (LPCTSTR)m_szDate, sData.cbDate);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDate), (LPCTSTR)m_szTime, sData.cbTime);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseOBProcessorMemoryAreaCatalogueEntry::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbVersion + sData.cbDescription + sData.cbLocation + sData.cbDate + sData.cbTime && sData.cbName > 0 && sData.cbVersion > 0 && sData.cbDescription > 0 && sData.cbLocation > 0 && sData.cbDate > 0 && sData.cbTime > 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szVersion.GetBufferSetLength(STRINGCHARS(sData.cbVersion)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbVersion));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbVersion), STRINGBYTES(sData.cbDescription));
		CopyMemory(m_szLocation.GetBufferSetLength(STRINGCHARS(sData.cbLocation)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbLocation));
		CopyMemory(m_szDate.GetBufferSetLength(STRINGCHARS(sData.cbDate)), nInfo.GetData() + (cbData = cbData + sData.cbLocation), STRINGBYTES(sData.cbDate));
		CopyMemory(m_szTime.GetBufferSetLength(STRINGCHARS(sData.cbTime)), nInfo.GetData() + (cbData = cbData + sData.cbDate), STRINGBYTES(sData.cbTime));
		m_nAttributes = sData.nAttributes;
		m_szVersion.ReleaseBuffer();
		m_szLocation.ReleaseBuffer();
		m_szDescription.ReleaseBuffer();
		m_szDate.ReleaseBuffer();
		m_szTime.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseOBProcessorMemoryAreaCatalogue

CDatabaseOBProcessorMemoryAreaCatalogue::CDatabaseOBProcessorMemoryAreaCatalogue() : CPtrArray()
{
	return;
}

CDatabaseOBProcessorMemoryAreaCatalogue::~CDatabaseOBProcessorMemoryAreaCatalogue()
{
	RemoveAll();
}

INT CDatabaseOBProcessorMemoryAreaCatalogue::Add(CDatabaseOBProcessorMemoryAreaCatalogueEntry *pMemoryAreaCatalogueEntry)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pMemoryAreaCatalogueEntry->GetVersion(), TRUE)) >= 0) InsertAt(nIndex, pMemoryAreaCatalogueEntry, 1);
	return nIndex;
}

INT CDatabaseOBProcessorMemoryAreaCatalogue::Find(LPCTSTR pszVersion) CONST
{
	return FindIndex(pszVersion);
}

CDatabaseOBProcessorMemoryAreaCatalogueEntry *CDatabaseOBProcessorMemoryAreaCatalogue::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)CPtrArray::GetAt(nIndex) : (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)NULL);
}

CDatabaseOBProcessorMemoryAreaCatalogueEntry *CDatabaseOBProcessorMemoryAreaCatalogue::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)CPtrArray::GetAt(nIndex) : (CDatabaseOBProcessorMemoryAreaCatalogueEntry *)NULL);
}

VOID CDatabaseOBProcessorMemoryAreaCatalogue::RemoveAll()
{
	INT  nMemoryAreaCatalogueEntry;
	INT  nMemoryAreaCatalogueEntries;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry;

	for (nMemoryAreaCatalogueEntry = 0, nMemoryAreaCatalogueEntries = (INT)GetSize(); nMemoryAreaCatalogueEntry < nMemoryAreaCatalogueEntries; nMemoryAreaCatalogueEntry++)
	{
		if ((pMemoryAreaCatalogueEntry = GetAt(nMemoryAreaCatalogueEntry))) delete pMemoryAreaCatalogueEntry;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseOBProcessorMemoryAreaCatalogue::Copy(CONST CDatabaseOBProcessorMemoryAreaCatalogue *pMemoryAreaCatalogue)
{
	INT  nMemoryAreaCatalogueEntry;
	INT  nMemoryAreaCatalogueEntries;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry;

	for (nMemoryAreaCatalogueEntry = 0, nMemoryAreaCatalogueEntries = (INT)pMemoryAreaCatalogue->GetSize(), RemoveAll(); nMemoryAreaCatalogueEntry < nMemoryAreaCatalogueEntries; nMemoryAreaCatalogueEntry++)
	{
		if ((pMemoryAreaCatalogueEntry = new CDatabaseOBProcessorMemoryAreaCatalogueEntry))
		{
			pMemoryAreaCatalogueEntry->Copy(pMemoryAreaCatalogue->GetAt(nMemoryAreaCatalogueEntry));
			InsertAt(nMemoryAreaCatalogueEntry, pMemoryAreaCatalogueEntry, 1);
			continue;
		}
		break;
	}
	return((nMemoryAreaCatalogueEntry == nMemoryAreaCatalogueEntries) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessorMemoryAreaCatalogue::Compare(CONST CDatabaseOBProcessorMemoryAreaCatalogue *pMemoryAreaCatalogue) CONST
{
	INT  nMemoryAreaCatalogueEntry;
	INT  nMemoryAreaCatalogueEntries;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry;

	for (nMemoryAreaCatalogueEntry = 0, nMemoryAreaCatalogueEntries = (pMemoryAreaCatalogue->GetSize() == GetSize()) ? (INT)GetSize() : -1; nMemoryAreaCatalogueEntry < nMemoryAreaCatalogueEntries; nMemoryAreaCatalogueEntry++)
	{
		if ((pMemoryAreaCatalogueEntry = pMemoryAreaCatalogue->GetAt(nMemoryAreaCatalogueEntry)) && pMemoryAreaCatalogueEntry->Compare(GetAt(nMemoryAreaCatalogueEntry))) continue;
		break;
	}
	return((nMemoryAreaCatalogueEntry == nMemoryAreaCatalogueEntries) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessorMemoryAreaCatalogue::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nMemoryAreaCatalogueEntry;
	INT  nMemoryAreaCatalogueEntries;
	CByteArray  nMemoryAreaCatalogueEntriesData;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry;

	for (nMemoryAreaCatalogueEntry = 0, nMemoryAreaCatalogueEntries = (INT)GetSize(), nInfo.RemoveAll(); nMemoryAreaCatalogueEntry < nMemoryAreaCatalogueEntries; nMemoryAreaCatalogueEntry++)
	{
		if ((pMemoryAreaCatalogueEntry = GetAt(nMemoryAreaCatalogueEntry)) && pMemoryAreaCatalogueEntry->Map(nMemoryAreaCatalogueEntriesData, bBinary) && nInfo.Append(nMemoryAreaCatalogueEntriesData) >= 0) continue;
		break;
	}
	return((nMemoryAreaCatalogueEntry == nMemoryAreaCatalogueEntries) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessorMemoryAreaCatalogue::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbMemoryAreaCatalogueEntry;
	INT  cbMemoryAreaCatalogueEntries;
	CByteArray  nMemoryAreaCatalogueEntriesData;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry;

	for (cbMemoryAreaCatalogueEntries = 0, RemoveAll(); cbMemoryAreaCatalogueEntries < nInfo.GetSize(); cbMemoryAreaCatalogueEntries += cbMemoryAreaCatalogueEntry)
	{
		for (CopyMemory(&cbMemoryAreaCatalogueEntry, nInfo.GetData() + cbMemoryAreaCatalogueEntries, sizeof(cbMemoryAreaCatalogueEntry)), nMemoryAreaCatalogueEntriesData.SetSize(max(min(cbMemoryAreaCatalogueEntry, nInfo.GetSize() - cbMemoryAreaCatalogueEntries), 0)); nMemoryAreaCatalogueEntriesData.GetSize() >= 0; )
		{
			CopyMemory(nMemoryAreaCatalogueEntriesData.GetData(), nInfo.GetData() + cbMemoryAreaCatalogueEntries, nMemoryAreaCatalogueEntriesData.GetSize());
			break;
		}
		if ((pMemoryAreaCatalogueEntry = new CDatabaseOBProcessorMemoryAreaCatalogueEntry))
		{
			if (pMemoryAreaCatalogueEntry->Unmap(nMemoryAreaCatalogueEntriesData, bBinary) && Add(pMemoryAreaCatalogueEntry) >= 0) continue;
			delete pMemoryAreaCatalogueEntry;
		}
		break;
	}
	return((cbMemoryAreaCatalogueEntries == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseOBProcessorMemoryAreaCatalogue::FindIndex(LPCTSTR pszVersion, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseOBProcessorMemoryAreaCatalogueEntry  *pMemoryAreaCatalogueEntry;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pMemoryAreaCatalogueEntry = GetAt(nIndex[0]))) ? ((nIndex[1] = (pMemoryAreaCatalogueEntry->GetVersion() <= pszVersion)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pMemoryAreaCatalogueEntry = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pMemoryAreaCatalogueEntry->GetVersion() == pszVersion) || (bInsert && (((pMemoryAreaCatalogueEntry = GetAt(max(nIndex[0] - 1, 0))) && pMemoryAreaCatalogueEntry->GetVersion() != pszVersion && (pMemoryAreaCatalogueEntry = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pMemoryAreaCatalogueEntry->GetVersion() != pszVersion) || !GetSize()))) && lstrlen(pszVersion) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseOBProcessorMemoryAreaBlock

CDatabaseOBProcessorMemoryAreaBlock::CDatabaseOBProcessorMemoryAreaBlock() : CObject()
{
	m_nAddress[0] = 0;
	m_nAddress[1] = 0;
	m_bAddress = FALSE;
	m_nBitOffset = 0;
	m_nBitWidth = 0;
	m_nRef[0] = -1;
	m_nRef[1] = -1;
}

VOID CDatabaseOBProcessorMemoryAreaBlock::SetTMParameter(LPCTSTR pszTag)
{
	m_szParameter[0] = pszTag;
}

CString CDatabaseOBProcessorMemoryAreaBlock::GetTMParameter() CONST
{
	return m_szParameter[0];
}

VOID CDatabaseOBProcessorMemoryAreaBlock::SetTMParameterRef(INT nRef)
{
	m_nRef[0] = nRef;
}

INT CDatabaseOBProcessorMemoryAreaBlock::GetTMParameterRef() CONST
{
	return m_nRef[0];
}

VOID CDatabaseOBProcessorMemoryAreaBlock::SetTCParameter(LPCTSTR pszTag)
{
	m_szParameter[1] = pszTag;
}

CString CDatabaseOBProcessorMemoryAreaBlock::GetTCParameter() CONST
{
	return m_szParameter[1];
}

VOID CDatabaseOBProcessorMemoryAreaBlock::SetTCParameterRef(INT nRef)
{
	m_nRef[1] = nRef;
}

INT CDatabaseOBProcessorMemoryAreaBlock::GetTCParameterRef() CONST
{
	return m_nRef[1];
}

VOID CDatabaseOBProcessorMemoryAreaBlock::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseOBProcessorMemoryAreaBlock::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseOBProcessorMemoryAreaBlock::SetAddress(UINT nPage, UINT nAddress)
{
	m_nAddress[0] = nPage;
	m_nAddress[1] = nAddress;
	m_bAddress = TRUE;
}

BOOL CDatabaseOBProcessorMemoryAreaBlock::GetAddress(UINT &nPage, UINT &nAddress) CONST
{
	nPage = m_nAddress[0];
	nAddress = m_nAddress[1];
	return m_bAddress;
}

VOID CDatabaseOBProcessorMemoryAreaBlock::SetBitOffset(INT nOffset)
{
	m_nBitOffset = nOffset;
}

INT CDatabaseOBProcessorMemoryAreaBlock::GetBitOffset() CONST
{
	return m_nBitOffset;
}

VOID CDatabaseOBProcessorMemoryAreaBlock::SetBitWidth(INT nWidth)
{
	m_nBitWidth = nWidth;
}

INT CDatabaseOBProcessorMemoryAreaBlock::GetBitWidth() CONST
{
	return m_nBitWidth;
}

VOID CDatabaseOBProcessorMemoryAreaBlock::Copy(CONST CDatabaseOBProcessorMemoryAreaBlock *pMemoryAreaBlock)
{
	m_szParameter[0] = pMemoryAreaBlock->m_szParameter[0];
	m_szParameter[1] = pMemoryAreaBlock->m_szParameter[1];
	m_szDescription = pMemoryAreaBlock->m_szDescription;
	m_nAddress[0] = pMemoryAreaBlock->m_nAddress[0];
	m_nAddress[1] = pMemoryAreaBlock->m_nAddress[1];
	m_bAddress = pMemoryAreaBlock->m_bAddress;
	m_nBitOffset = pMemoryAreaBlock->m_nBitOffset;
	m_nBitWidth = pMemoryAreaBlock->m_nBitWidth;
	m_nRef[0] = pMemoryAreaBlock->m_nRef[0];
	m_nRef[1] = pMemoryAreaBlock->m_nRef[1];
}

BOOL CDatabaseOBProcessorMemoryAreaBlock::Compare(CONST CDatabaseOBProcessorMemoryAreaBlock *pMemoryAreaBlock) CONST
{
	return((pMemoryAreaBlock->m_szParameter[0] == m_szParameter[0] && pMemoryAreaBlock->m_szParameter[1] == m_szParameter[1] && pMemoryAreaBlock->m_szDescription == m_szDescription  &&  pMemoryAreaBlock->m_nAddress[0] == m_nAddress[0] && pMemoryAreaBlock->m_nAddress[1] == m_nAddress[1] && pMemoryAreaBlock->m_bAddress == m_bAddress  &&  pMemoryAreaBlock->m_nBitOffset == m_nBitOffset  &&  pMemoryAreaBlock->m_nBitWidth == m_nBitWidth  &&  pMemoryAreaBlock->m_nRef[0] == m_nRef[0] && pMemoryAreaBlock->m_nRef[1] == m_nRef[1]) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessorMemoryAreaBlock::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	sData.cbParameter[0] = (!bBinary) ? ((m_szParameter[0].GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbParameter[1] = (!bBinary) ? ((m_szParameter[1].GetLength() + 1)*sizeof(TCHAR)) : 0;
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbDescription + sData.cbParameter[0] + sData.cbParameter[1])), sData.nAddress[0] = m_nAddress[0], sData.nAddress[1] = m_nAddress[1], sData.bAddress = m_bAddress, sData.nBitOffset = m_nBitOffset, sData.nBitWidth = m_nBitWidth, sData.nRef[0] = m_nRef[0], sData.nRef[1] = m_nRef[1], sData.bBinary = bBinary; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szParameter[0], sData.cbParameter[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbParameter[0]), (LPCTSTR)m_szParameter[1], sData.cbParameter[1]);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseOBProcessorMemoryAreaBlock::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbDescription + sData.cbParameter[0] + sData.cbParameter[1] && sData.cbDescription >= 0 && sData.cbParameter[0] >= 0 && sData.cbParameter[1] >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbDescription));
		CopyMemory(m_szParameter[0].GetBufferSetLength(STRINGCHARS(sData.cbParameter[0])), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbParameter[0]));
		CopyMemory(m_szParameter[1].GetBufferSetLength(STRINGCHARS(sData.cbParameter[1])), nInfo.GetData() + (cbData = cbData + sData.cbParameter[0]), STRINGBYTES(sData.cbParameter[1]));
		m_nAddress[0] = sData.nAddress[0];
		m_nAddress[1] = sData.nAddress[1];
		m_bAddress = sData.bAddress;
		m_nBitOffset = sData.nBitOffset;
		m_nBitWidth = sData.nBitWidth;
		m_nRef[0] = sData.nRef[0];
		m_nRef[1] = sData.nRef[1];
		m_szDescription.ReleaseBuffer();
		m_szParameter[0].ReleaseBuffer();
		m_szParameter[1].ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseOBProcessorMemoryArea

CDatabaseOBProcessorMemoryArea::CDatabaseOBProcessorMemoryArea() : CPtrArray()
{
	m_nAttributes = 0;
	m_nPatchCommandRef = -1;
	m_nDumpCommandRef = -1;
	m_nDumpPacketRef = -1;
}

CDatabaseOBProcessorMemoryArea::~CDatabaseOBProcessorMemoryArea()
{
	RemoveAll();
}

VOID CDatabaseOBProcessorMemoryArea::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseOBProcessorMemoryArea::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseOBProcessorMemoryArea::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CDatabaseOBProcessorMemoryArea::GetDescription() CONST
{
	return m_szDescription;
}

VOID CDatabaseOBProcessorMemoryArea::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseOBProcessorMemoryArea::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseOBProcessorMemoryArea::SetPatchCommand(LPCTSTR pszCommand)
{
	m_szPatchCommand = pszCommand;
}

CString CDatabaseOBProcessorMemoryArea::GetPatchCommand() CONST
{
	return m_szPatchCommand;
}

VOID CDatabaseOBProcessorMemoryArea::SetPatchCommandRef(INT nRef)
{
	m_nPatchCommandRef = nRef;
}

INT CDatabaseOBProcessorMemoryArea::GetPatchCommandRef() CONST
{
	return m_nPatchCommandRef;
}

VOID CDatabaseOBProcessorMemoryArea::SetDumpCommand(LPCTSTR pszCommand)
{
	m_szDumpCommand = pszCommand;
}

CString CDatabaseOBProcessorMemoryArea::GetDumpCommand() CONST
{
	return m_szDumpCommand;
}

VOID CDatabaseOBProcessorMemoryArea::SetDumpCommandRef(INT nRef)
{
	m_nDumpCommandRef = nRef;
}

INT CDatabaseOBProcessorMemoryArea::GetDumpCommandRef() CONST
{
	return m_nDumpCommandRef;
}

VOID CDatabaseOBProcessorMemoryArea::SetDumpPacket(LPCTSTR pszPacket)
{
	m_szDumpPacket = pszPacket;
}

CString CDatabaseOBProcessorMemoryArea::GetDumpPacket() CONST
{
	return m_szDumpPacket;
}

VOID CDatabaseOBProcessorMemoryArea::SetDumpPacketRef(INT nRef)
{
	m_nDumpPacketRef = nRef;
}

INT CDatabaseOBProcessorMemoryArea::GetDumpPacketRef() CONST
{
	return m_nDumpPacketRef;
}

BOOL CDatabaseOBProcessorMemoryArea::SetMemoryImage(CONST CDatabaseOBProcessorMemoryImage *pMemoryImage)
{
	return m_cMemoryImage.Copy(pMemoryImage);
}

BOOL CDatabaseOBProcessorMemoryArea::GetMemoryImage(CDatabaseOBProcessorMemoryImage *pMemoryImage) CONST
{
	if (pMemoryImage->Copy(&m_cMemoryImage))
	{
		if (pMemoryImage->GetName().IsEmpty()) pMemoryImage->SetName(GetName());
		return TRUE;
	}
	return FALSE;
}
CString CDatabaseOBProcessorMemoryArea::GetMemoryImage() CONST
{
	return((!m_cMemoryImage.GetName().IsEmpty()) ? m_cMemoryImage.GetName() : GetName());
}

VOID CDatabaseOBProcessorMemoryArea::SetCheckSum(CONST CDatabaseOBProcessorMemoryAreaCheckSum *pCheckSum)
{
	m_cCheckSum.Copy(pCheckSum);
}

BOOL CDatabaseOBProcessorMemoryArea::GetCheckSum(CDatabaseOBProcessorMemoryAreaCheckSum *pCheckSum) CONST
{
	pCheckSum->Copy(&m_cCheckSum);
	return((pCheckSum->GetLength() > 0) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessorMemoryArea::SetCatalogue(CONST CDatabaseOBProcessorMemoryAreaCatalogue *pCatalogue)
{
	return m_cCatalogue.Copy(pCatalogue);
}

BOOL CDatabaseOBProcessorMemoryArea::GetCatalogue(CDatabaseOBProcessorMemoryAreaCatalogue *pCatalogue) CONST
{
	return pCatalogue->Copy(&m_cCatalogue);
}

INT CDatabaseOBProcessorMemoryArea::Add(CDatabaseOBProcessorMemoryAreaBlock *pMemoryAreaBlock)
{
	INT  nIndex;
	UINT  nAddress[2];

	if ((nIndex = (pMemoryAreaBlock->GetAddress(nAddress[0], nAddress[1])) ? FindIndex(nAddress[0], nAddress[1], pMemoryAreaBlock->GetBitOffset(), TRUE) : -1) >= 0) InsertAt(nIndex, pMemoryAreaBlock, 1);
	return nIndex;
}

INT CDatabaseOBProcessorMemoryArea::Find(UINT nPage, UINT nAddress, INT nBitOffset) CONST
{
	return FindIndex(nPage, nAddress, nBitOffset);
}

CDatabaseOBProcessorMemoryAreaBlock *CDatabaseOBProcessorMemoryArea::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseOBProcessorMemoryAreaBlock *)CPtrArray::GetAt(nIndex) : (CDatabaseOBProcessorMemoryAreaBlock *)NULL);
}

CDatabaseOBProcessorMemoryAreaBlock *CDatabaseOBProcessorMemoryArea::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseOBProcessorMemoryAreaBlock *)CPtrArray::GetAt(nIndex) : (CDatabaseOBProcessorMemoryAreaBlock *)NULL);
}

VOID CDatabaseOBProcessorMemoryArea::RemoveAll()
{
	INT  nMemoryAreaBlock;
	INT  nMemoryAreaBlocks;
	CDatabaseOBProcessorMemoryAreaBlock  *pMemoryAreaBlock;

	for (nMemoryAreaBlock = 0, nMemoryAreaBlocks = (INT)GetSize(); nMemoryAreaBlock < nMemoryAreaBlocks; nMemoryAreaBlock++)
	{
		if ((pMemoryAreaBlock = GetAt(nMemoryAreaBlock))) delete pMemoryAreaBlock;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseOBProcessorMemoryArea::Copy(CONST CDatabaseOBProcessorMemoryArea *pMemoryArea)
{
	INT  nMemoryAreaBlock;
	INT  nMemoryAreaBlocks;
	CDatabaseOBProcessorMemoryAreaBlock  *pMemoryAreaBlock;

	for (nMemoryAreaBlock = 0, nMemoryAreaBlocks = (INT)pMemoryArea->GetSize(), m_szName = pMemoryArea->m_szName, m_szDescription = pMemoryArea->m_szDescription, m_nAttributes = pMemoryArea->m_nAttributes, m_szPatchCommand = pMemoryArea->m_szPatchCommand, m_szDumpCommand = pMemoryArea->m_szDumpCommand, m_szDumpPacket = pMemoryArea->m_szDumpPacket, m_nPatchCommandRef = pMemoryArea->m_nPatchCommandRef, m_nDumpCommandRef = pMemoryArea->m_nDumpCommandRef, m_nDumpPacketRef = pMemoryArea->m_nDumpPacketRef, m_cMemoryImage.Copy(&pMemoryArea->m_cMemoryImage), m_cCheckSum.Copy(&pMemoryArea->m_cCheckSum), m_cCatalogue.Copy(&pMemoryArea->m_cCatalogue), RemoveAll(); nMemoryAreaBlock < nMemoryAreaBlocks; nMemoryAreaBlock++)
	{
		if ((pMemoryAreaBlock = new CDatabaseOBProcessorMemoryAreaBlock))
		{
			pMemoryAreaBlock->Copy(pMemoryArea->GetAt(nMemoryAreaBlock));
			InsertAt(nMemoryAreaBlock, pMemoryAreaBlock, 1);
			continue;
		}
		break;
	}
	return((nMemoryAreaBlock == nMemoryAreaBlocks) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessorMemoryArea::Compare(CONST CDatabaseOBProcessorMemoryArea *pMemoryArea) CONST
{
	INT  nMemoryAreaBlock;
	INT  nMemoryAreaBlocks;
	CDatabaseOBProcessorMemoryAreaBlock  *pMemoryAreaBlock;

	for (nMemoryAreaBlock = 0, nMemoryAreaBlocks = (pMemoryArea->m_szName == m_szName && pMemoryArea->m_szDescription == m_szDescription && pMemoryArea->m_nAttributes == m_nAttributes && pMemoryArea->m_szPatchCommand == m_szPatchCommand && pMemoryArea->m_szDumpCommand == m_szDumpCommand && pMemoryArea->m_szDumpPacket == m_szDumpPacket && pMemoryArea->m_nPatchCommandRef == m_nPatchCommandRef && pMemoryArea->m_nDumpCommandRef == m_nDumpCommandRef && pMemoryArea->m_nDumpPacketRef == m_nDumpPacketRef && pMemoryArea->m_cMemoryImage.Compare(&m_cMemoryImage) && pMemoryArea->m_cCheckSum.Compare(&m_cCheckSum) && pMemoryArea->m_cCatalogue.Compare(&m_cCatalogue) && pMemoryArea->GetSize() == GetSize()) ? (INT)GetSize() : -1; nMemoryAreaBlock < nMemoryAreaBlocks; nMemoryAreaBlock++)
	{
		if ((pMemoryAreaBlock = pMemoryArea->GetAt(nMemoryAreaBlock)) && pMemoryAreaBlock->Compare(GetAt(nMemoryAreaBlock))) continue;
		break;
	}
	return((nMemoryAreaBlock == nMemoryAreaBlocks) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessorMemoryArea::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nMemoryAreaBlock;
	INT  nMemoryAreaBlocks;
	CByteArray  nMemoryImageData;
	CByteArray  nMemoryAreaCheckSumData;
	CByteArray  nMemoryAreaCatalogueData;
	CByteArray  nMemoryAreaBlocksData[2];
	CDatabaseOBProcessorMemoryAreaBlock  *pMemoryAreaBlock;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	sData.cbPatchCommand = (!bBinary) ? ((m_szPatchCommand.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbDumpCommand = (!bBinary) ? ((m_szDumpCommand.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbDumpPacket = (!bBinary) ? ((m_szDumpPacket.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbMemoryImage = (m_cMemoryImage.Map(nMemoryImageData, bBinary)) ? (INT)nMemoryImageData.GetSize() : 0;
	sData.cbCheckSum = (m_cCheckSum.Map(nMemoryAreaCheckSumData, bBinary)) ? (INT)nMemoryAreaCheckSumData.GetSize() : 0;
	sData.cbCatalogue = (m_cCatalogue.Map(nMemoryAreaCatalogueData, bBinary)) ? (INT)nMemoryAreaCatalogueData.GetSize() : 0;
	for (nMemoryAreaBlock = 0, nMemoryAreaBlocks = (INT)GetSize(), sData.nAttributes = m_nAttributes, sData.nPatchCommandRef = m_nPatchCommandRef, sData.nDumpCommandRef = m_nDumpCommandRef, sData.nDumpPacketRef = m_nDumpPacketRef, sData.bBinary = bBinary; nMemoryAreaBlock < nMemoryAreaBlocks; nMemoryAreaBlock++)
	{
		if ((pMemoryAreaBlock = GetAt(nMemoryAreaBlock)) && pMemoryAreaBlock->Map(nMemoryAreaBlocksData[1], bBinary) && nMemoryAreaBlocksData[0].Append(nMemoryAreaBlocksData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbPatchCommand + sData.cbDumpCommand + sData.cbDumpPacket + (sData.cbBlocks = (INT)(nMemoryAreaBlocksData[0].GetSize()*sizeof(BYTE))) + sData.cbCheckSum + sData.cbCatalogue + sData.cbMemoryImage)); nInfo.GetSize() == sData.cbSize && nMemoryAreaBlock == nMemoryAreaBlocks; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szPatchCommand, sData.cbPatchCommand);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbPatchCommand), (LPCTSTR)m_szDumpCommand, sData.cbDumpCommand);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDumpCommand), (LPCTSTR)m_szDumpPacket, sData.cbDumpPacket);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDumpPacket), nMemoryAreaBlocksData[0].GetData(), sData.cbBlocks);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbBlocks), nMemoryAreaCheckSumData.GetData(), sData.cbCheckSum);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbCheckSum), nMemoryAreaCatalogueData.GetData(), sData.cbCatalogue);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbCatalogue), nMemoryImageData.GetData(), sData.cbMemoryImage);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseOBProcessorMemoryArea::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbMemoryAreaBlock;
	INT  cbMemoryAreaBlocks;
	CByteArray  nMemoryImageData;
	CByteArray  nMemoryAreaCheckSumData;
	CByteArray  nMemoryAreaCatalogueData;
	CByteArray  nMemoryAreaBlocksData[2];
	CDatabaseOBProcessorMemoryAreaBlock  *pMemoryAreaBlock;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbPatchCommand + sData.cbDumpCommand + sData.cbDumpPacket + sData.cbBlocks + sData.cbCheckSum + sData.cbCatalogue + sData.cbMemoryImage && sData.cbName > 0 && sData.cbDescription >= 0 && sData.cbPatchCommand >= 0 && sData.cbDumpCommand >= 0 && sData.cbDumpPacket >= 0 && sData.cbBlocks >= 0 && sData.cbCheckSum >= 0 && sData.cbCatalogue >= 0 && sData.cbMemoryImage >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription));
		CopyMemory(m_szPatchCommand.GetBufferSetLength(STRINGCHARS(sData.cbPatchCommand)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbPatchCommand));
		CopyMemory(m_szDumpCommand.GetBufferSetLength(STRINGCHARS(sData.cbDumpCommand)), nInfo.GetData() + (cbData = cbData + sData.cbPatchCommand), STRINGBYTES(sData.cbDumpCommand));
		CopyMemory(m_szDumpPacket.GetBufferSetLength(STRINGCHARS(sData.cbDumpPacket)), nInfo.GetData() + (cbData = cbData + sData.cbDumpCommand), STRINGBYTES(sData.cbDumpPacket));
		for (nMemoryAreaBlocksData[0].SetSize(sData.cbBlocks), nMemoryImageData.SetSize(sData.cbMemoryImage), nMemoryAreaCheckSumData.SetSize(sData.cbCheckSum), nMemoryAreaCatalogueData.SetSize(sData.cbCatalogue), CopyMemory(nMemoryAreaBlocksData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbDumpPacket), sData.cbBlocks), CopyMemory(nMemoryAreaCheckSumData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbBlocks), sData.cbCheckSum), CopyMemory(nMemoryAreaCatalogueData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbCheckSum), sData.cbCatalogue), CopyMemory(nMemoryImageData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbCatalogue), sData.cbMemoryImage), m_cMemoryImage.Unmap(nMemoryImageData, bBinary), m_cCheckSum.Unmap(nMemoryAreaCheckSumData, bBinary), m_cCatalogue.Unmap(nMemoryAreaCatalogueData, bBinary), m_nAttributes = sData.nAttributes, m_nPatchCommandRef = sData.nPatchCommandRef, m_nDumpCommandRef = sData.nDumpCommandRef, m_nDumpPacketRef = sData.nDumpPacketRef, m_szName.ReleaseBuffer(), m_szDescription.ReleaseBuffer(), m_szPatchCommand.ReleaseBuffer(), m_szDumpCommand.ReleaseBuffer(), m_szDumpPacket.ReleaseBuffer(), RemoveAll(), cbMemoryAreaBlock = cbMemoryAreaBlocks = 0; cbMemoryAreaBlocks < sData.cbBlocks; cbMemoryAreaBlocks += cbMemoryAreaBlock)
		{
			for (CopyMemory(&cbMemoryAreaBlock, nMemoryAreaBlocksData[0].GetData() + cbMemoryAreaBlocks, sizeof(cbMemoryAreaBlock)), nMemoryAreaBlocksData[1].SetSize(max(min(cbMemoryAreaBlock, nMemoryAreaBlocksData[0].GetSize() - cbMemoryAreaBlocks), 0)); nMemoryAreaBlocksData[1].GetSize() >= 0; )
			{
				CopyMemory(nMemoryAreaBlocksData[1].GetData(), nMemoryAreaBlocksData[0].GetData() + cbMemoryAreaBlocks, nMemoryAreaBlocksData[1].GetSize());
				break;
			}
			if ((pMemoryAreaBlock = new CDatabaseOBProcessorMemoryAreaBlock))
			{
				if (pMemoryAreaBlock->Unmap(nMemoryAreaBlocksData[1], bBinary) && Add(pMemoryAreaBlock) >= 0) continue;
				delete pMemoryAreaBlock;
			}
			break;
		}
		return((cbMemoryAreaBlocks == sData.cbBlocks) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseOBProcessorMemoryArea::FindIndex(UINT nPage, UINT nAddress, INT nBitOffset, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	UINT  nBlockPage;
	UINT  nBlockAddress;
	CDatabaseOBProcessorMemoryAreaBlock  *pMemoryAreaBlock;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pMemoryAreaBlock = GetAt(nIndex[0])) && pMemoryAreaBlock->GetAddress(nBlockPage, nBlockAddress)) ? ((nIndex[1] = (nBlockPage < nPage || (nBlockPage == nPage && (nBlockAddress < nAddress || (nBlockAddress == nAddress  &&  pMemoryAreaBlock->GetBitOffset() <= nBitOffset))))) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pMemoryAreaBlock = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pMemoryAreaBlock->GetAddress(nBlockPage, nBlockAddress) && nBlockPage == nPage  &&  nBlockAddress == nAddress  &&  pMemoryAreaBlock->GetBitOffset() == nBitOffset) || (bInsert && (((pMemoryAreaBlock = GetAt(max(nIndex[0] - 1, 0))) && pMemoryAreaBlock->GetAddress(nBlockPage, nBlockAddress) && (nBlockPage != nPage || nBlockAddress != nAddress || pMemoryAreaBlock->GetBitOffset() != nBitOffset) && (pMemoryAreaBlock = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pMemoryAreaBlock->GetAddress(nBlockPage, nBlockAddress) && (nBlockPage != nPage || nBlockAddress != nAddress || pMemoryAreaBlock->GetBitOffset() != nBitOffset)) || !GetSize()))) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseOBProcessor

CDatabaseOBProcessor::CDatabaseOBProcessor() : CPtrArray()
{
	m_nAttributes = 0;
	m_nAddressRange[0][0] = 0;
	m_nAddressRange[0][1] = 0;
	m_nAddressRange[1][0] = 0;
	m_nAddressRange[1][1] = 0;
	m_bAddressRange = FALSE;
	m_nMasterImageRef = -1;
	m_nPatchCommandRef = -1;
	m_nDumpCommandRef = -1;
	m_nDumpPacketRef = -1;
	m_tDumpInterval = 0;
	m_nDumpCount = -1;
	m_nStatus = OBPROCESSOR_RECORDSTATUS_NONE;
}

CDatabaseOBProcessor::~CDatabaseOBProcessor()
{
	RemoveAll();
}

VOID CDatabaseOBProcessor::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseOBProcessor::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseOBProcessor::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription[0] = pszDescription;
}

CString CDatabaseOBProcessor::GetDescription() CONST
{
	return m_szDescription[0];
}

VOID CDatabaseOBProcessor::SetDetails(LPCTSTR pszDetails)
{
	m_szDescription[1] = pszDetails;
}

CString CDatabaseOBProcessor::GetDetails() CONST
{
	return m_szDescription[1];
}

VOID CDatabaseOBProcessor::SetAttributes(UINT nAttributes)
{
	m_nAttributes = nAttributes;
}

UINT CDatabaseOBProcessor::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CDatabaseOBProcessor::SetPatchCommand(LPCTSTR pszCommand)
{
	m_szPatchCommand = pszCommand;
}

CString CDatabaseOBProcessor::GetPatchCommand() CONST
{
	return m_szPatchCommand;
}

VOID CDatabaseOBProcessor::SetPatchCommandRef(INT nRef)
{
	m_nPatchCommandRef = nRef;
}

INT CDatabaseOBProcessor::GetPatchCommandRef() CONST
{
	return m_nPatchCommandRef;
}

VOID CDatabaseOBProcessor::SetDumpCommand(LPCTSTR pszCommand)
{
	m_szDumpCommand = pszCommand;
}

CString CDatabaseOBProcessor::GetDumpCommand() CONST
{
	return m_szDumpCommand;
}

VOID CDatabaseOBProcessor::SetDumpCommandRef(INT nRef)
{
	m_nDumpCommandRef = nRef;
}

INT CDatabaseOBProcessor::GetDumpCommandRef() CONST
{
	return m_nDumpCommandRef;
}

VOID CDatabaseOBProcessor::SetDumpPacket(LPCTSTR pszPacket)
{
	m_szDumpPacket = pszPacket;
}

CString CDatabaseOBProcessor::GetDumpPacket() CONST
{
	return m_szDumpPacket;
}

VOID CDatabaseOBProcessor::SetDumpPacketRef(INT nRef)
{
	m_nDumpPacketRef = nRef;
}

INT CDatabaseOBProcessor::GetDumpPacketRef() CONST
{
	return m_nDumpPacketRef;
}

VOID CDatabaseOBProcessor::SetDumpInterval(CONST CTimeSpan &tInterval)
{
	m_tDumpInterval = tInterval;
}

CTimeSpan CDatabaseOBProcessor::GetDumpInterval() CONST
{
	return m_tDumpInterval;
}

VOID CDatabaseOBProcessor::SetDumpCount(INT nCount)
{
	m_nDumpCount = nCount;
}

INT CDatabaseOBProcessor::GetDumpCount() CONST
{
	return m_nDumpCount;
}

VOID CDatabaseOBProcessor::SetMasterImage(LPCTSTR pszImage)
{
	m_szMasterImage = pszImage;
}

CString CDatabaseOBProcessor::GetMasterImage() CONST
{
	return m_szMasterImage;
}

VOID CDatabaseOBProcessor::SetMasterImageRef(INT nRef)
{
	m_nMasterImageRef = nRef;
}

INT CDatabaseOBProcessor::GetMasterImageRef() CONST
{
	return m_nMasterImageRef;
}

VOID CDatabaseOBProcessor::SetAddressRange(UINT nStartPage, UINT nStartAddress, UINT nEndPage, UINT nEndAddress)
{
	m_nAddressRange[0][0] = nStartPage;
	m_nAddressRange[0][1] = nEndPage;
	m_nAddressRange[1][0] = nStartAddress;
	m_nAddressRange[1][1] = nEndAddress;
	m_bAddressRange = TRUE;
}

BOOL CDatabaseOBProcessor::GetAddressRange(UINT &nStartPage, UINT &nStartAddress, UINT &nEndPage, UINT &nEndAddress) CONST
{
	nStartPage = m_nAddressRange[0][0];
	nEndPage = m_nAddressRange[0][1];
	nStartAddress = m_nAddressRange[1][0];
	nEndAddress = m_nAddressRange[1][1];
	return m_bAddressRange;
}

VOID CDatabaseOBProcessor::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CDatabaseOBProcessor::GetStatus() CONST
{
	return m_nStatus;
}

INT CDatabaseOBProcessor::Add(CDatabaseOBProcessorMemoryArea *pMemoryArea)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pMemoryArea->GetName(), TRUE)) >= 0) InsertAt(nIndex, pMemoryArea, 1);
	return nIndex;
}

INT CDatabaseOBProcessor::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseOBProcessorMemoryArea *CDatabaseOBProcessor::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseOBProcessorMemoryArea *)CPtrArray::GetAt(nIndex) : (CDatabaseOBProcessorMemoryArea *)NULL);
}

CDatabaseOBProcessorMemoryArea *CDatabaseOBProcessor::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseOBProcessorMemoryArea *)CPtrArray::GetAt(nIndex) : (CDatabaseOBProcessorMemoryArea *)NULL);
}

VOID CDatabaseOBProcessor::RemoveAll()
{
	INT  nMemoryArea;
	INT  nMemoryAreas;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;

	for (nMemoryArea = 0, nMemoryAreas = (INT)GetSize(); nMemoryArea < nMemoryAreas; nMemoryArea++)
	{
		if ((pMemoryArea = GetAt(nMemoryArea))) delete pMemoryArea;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseOBProcessor::Copy(CONST CDatabaseOBProcessor *pProcessor)
{
	INT  nMemoryArea;
	INT  nMemoryAreas;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;

	for (nMemoryArea = 0, nMemoryAreas = (INT)pProcessor->GetSize(), m_szName = pProcessor->m_szName, m_szDescription[0] = pProcessor->m_szDescription[0], m_szDescription[1] = pProcessor->m_szDescription[1], m_nAttributes = pProcessor->m_nAttributes, m_szPatchCommand = pProcessor->m_szPatchCommand, m_szDumpCommand = pProcessor->m_szDumpCommand, m_szDumpPacket = pProcessor->m_szDumpPacket, m_szMasterImage = pProcessor->m_szMasterImage, m_nAddressRange[0][0] = pProcessor->m_nAddressRange[0][0], m_nAddressRange[0][1] = pProcessor->m_nAddressRange[0][1], m_nAddressRange[1][0] = pProcessor->m_nAddressRange[1][0], m_nAddressRange[1][1] = pProcessor->m_nAddressRange[1][1], m_bAddressRange = pProcessor->m_bAddressRange, m_tDumpInterval = pProcessor->m_tDumpInterval, m_nDumpCount = pProcessor->m_nDumpCount, m_nPatchCommandRef = pProcessor->m_nPatchCommandRef, m_nDumpCommandRef = pProcessor->m_nDumpCommandRef, m_nDumpPacketRef = pProcessor->m_nDumpPacketRef, m_nMasterImageRef = pProcessor->m_nMasterImageRef, m_nStatus = pProcessor->m_nStatus, RemoveAll(); nMemoryArea < nMemoryAreas; nMemoryArea++)
	{
		if ((pMemoryArea = new CDatabaseOBProcessorMemoryArea))
		{
			pMemoryArea->Copy(pProcessor->GetAt(nMemoryArea));
			InsertAt(nMemoryArea, pMemoryArea, 1);
			continue;
		}
		break;
	}
	return((nMemoryArea == nMemoryAreas) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessor::Compare(CONST CDatabaseOBProcessor *pProcessor) CONST
{
	INT  nMemoryArea;
	INT  nMemoryAreas;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;

	for (nMemoryArea = 0, nMemoryAreas = (pProcessor->m_szName == m_szName && pProcessor->m_szDescription[0] == m_szDescription[0] && pProcessor->m_szDescription[1] == m_szDescription[1] && pProcessor->m_nAttributes == m_nAttributes && pProcessor->m_szPatchCommand == m_szPatchCommand && pProcessor->m_szDumpCommand == m_szDumpCommand && pProcessor->m_szDumpPacket == m_szDumpPacket && pProcessor->m_szMasterImage == m_szMasterImage && pProcessor->m_nAddressRange[0][0] == m_nAddressRange[0][0] && pProcessor->m_nAddressRange[0][1] == m_nAddressRange[0][1] && pProcessor->m_nAddressRange[1][0] == m_nAddressRange[1][0] && pProcessor->m_nAddressRange[1][1] == m_nAddressRange[1][1] && pProcessor->m_bAddressRange == m_bAddressRange && pProcessor->m_tDumpInterval == m_tDumpInterval && pProcessor->m_nDumpCount == m_nDumpCount && pProcessor->m_nPatchCommandRef == m_nPatchCommandRef && pProcessor->m_nDumpCommandRef == m_nDumpCommandRef && pProcessor->m_nDumpPacketRef == m_nDumpPacketRef && pProcessor->m_nMasterImageRef == m_nMasterImageRef && pProcessor->m_nStatus == m_nStatus && pProcessor->GetSize() == GetSize()) ? (INT)GetSize() : -1; nMemoryArea < nMemoryAreas; nMemoryArea++)
	{
		if ((pMemoryArea = pProcessor->GetAt(nMemoryArea)) && pMemoryArea->Compare(GetAt(nMemoryArea))) continue;
		break;
	}
	return((nMemoryArea == nMemoryAreas) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessor::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nMemoryArea;
	INT  nMemoryAreas;
	CByteArray  nMemoryAreasData[2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription[0] = (!bBinary) ? ((m_szDescription[0].GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbDescription[1] = (!bBinary) ? ((m_szDescription[1].GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbPatchCommand = (!bBinary) ? ((m_szPatchCommand.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbDumpCommand = (!bBinary) ? ((m_szDumpCommand.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbDumpPacket = (!bBinary) ? ((m_szDumpPacket.GetLength() + 1)*sizeof(TCHAR)) : 0;
	sData.cbMasterImage = (!bBinary) ? ((m_szMasterImage.GetLength() + 1)*sizeof(TCHAR)) : 0;
	for (nMemoryArea = 0, nMemoryAreas = (INT)GetSize(), sData.nAttributes = m_nAttributes, sData.nAddressRange[0][0] = m_nAddressRange[0][0], sData.nAddressRange[0][1] = m_nAddressRange[0][1], sData.nAddressRange[1][0] = m_nAddressRange[1][0], sData.nAddressRange[1][1] = m_nAddressRange[1][1], sData.bAddressRange = m_bAddressRange, sData.nPatchCommandRef = m_nPatchCommandRef, sData.nDumpCommandRef = m_nDumpCommandRef, sData.nDumpPacketRef = m_nDumpPacketRef, sData.nMasterImageRef = m_nMasterImageRef, sData.tDumpInterval = m_tDumpInterval.GetTotalSeconds(), sData.nDumpCount = m_nDumpCount, sData.nStatus = m_nStatus, sData.bBinary = bBinary; nMemoryArea < nMemoryAreas; nMemoryArea++)
	{
		if ((pMemoryArea = GetAt(nMemoryArea)) && pMemoryArea->Map(nMemoryAreasData[1], bBinary) && nMemoryAreasData[0].Append(nMemoryAreasData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription[0] + sData.cbDescription[1] + sData.cbPatchCommand + sData.cbDumpCommand + sData.cbDumpPacket + sData.cbMasterImage + (sData.cbMemoryAreas = (INT)(nMemoryAreasData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nMemoryArea == nMemoryAreas; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription[0], sData.cbDescription[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription[0]), (LPCTSTR)m_szDescription[1], sData.cbDescription[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription[1]), (LPCTSTR)m_szPatchCommand, sData.cbPatchCommand);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbPatchCommand), (LPCTSTR)m_szDumpCommand, sData.cbDumpCommand);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDumpCommand), (LPCTSTR)m_szDumpPacket, sData.cbDumpPacket);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDumpPacket), (LPCTSTR)m_szMasterImage, sData.cbMasterImage);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbMasterImage), nMemoryAreasData[0].GetData(), sData.cbMemoryAreas);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseOBProcessor::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	DATA  sData;
	INT  cbData;
	INT  cbMemoryArea;
	INT  cbMemoryAreas;
	CByteArray  nMemoryAreasData[2];
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription[0] + sData.cbDescription[1] + sData.cbPatchCommand + sData.cbDumpCommand + sData.cbDumpPacket + sData.cbMasterImage + sData.cbMemoryAreas && sData.cbName > 0 && sData.cbDescription[0] >= 0 && sData.cbDescription[1] >= 0 && sData.cbPatchCommand >= 0 && sData.cbDumpCommand >= 0 && sData.cbDumpPacket >= 0 && sData.cbMasterImage >= 0 && sData.cbMemoryAreas >= 0 && sData.bBinary == bBinary; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szDescription[0].GetBufferSetLength(STRINGCHARS(sData.cbDescription[0])), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription[0]));
		CopyMemory(m_szDescription[1].GetBufferSetLength(STRINGCHARS(sData.cbDescription[1])), nInfo.GetData() + (cbData = cbData + sData.cbDescription[0]), STRINGBYTES(sData.cbDescription[1]));
		CopyMemory(m_szPatchCommand.GetBufferSetLength(STRINGCHARS(sData.cbPatchCommand)), nInfo.GetData() + (cbData = cbData + sData.cbDescription[1]), STRINGBYTES(sData.cbPatchCommand));
		CopyMemory(m_szDumpCommand.GetBufferSetLength(STRINGCHARS(sData.cbDumpCommand)), nInfo.GetData() + (cbData = cbData + sData.cbPatchCommand), STRINGBYTES(sData.cbDumpCommand));
		CopyMemory(m_szDumpPacket.GetBufferSetLength(STRINGCHARS(sData.cbDumpPacket)), nInfo.GetData() + (cbData = cbData + sData.cbDumpCommand), STRINGBYTES(sData.cbDumpPacket));
		CopyMemory(m_szMasterImage.GetBufferSetLength(STRINGCHARS(sData.cbMasterImage)), nInfo.GetData() + (cbData = cbData + sData.cbDumpPacket), STRINGBYTES(sData.cbMasterImage));
		for (nMemoryAreasData[0].SetSize(sData.cbMemoryAreas), CopyMemory(nMemoryAreasData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbMasterImage), sData.cbMemoryAreas), m_nAttributes = sData.nAttributes, m_nAddressRange[0][0] = sData.nAddressRange[0][0], m_nAddressRange[0][1] = sData.nAddressRange[0][1], m_nAddressRange[1][0] = sData.nAddressRange[1][0], m_nAddressRange[1][1] = sData.nAddressRange[1][1], m_bAddressRange = sData.bAddressRange, m_nPatchCommandRef = sData.nPatchCommandRef, m_nDumpCommandRef = sData.nDumpCommandRef, m_nDumpPacketRef = sData.nDumpPacketRef, m_nMasterImageRef = sData.nMasterImageRef, m_tDumpInterval = sData.tDumpInterval, m_nDumpCount = sData.nDumpCount, m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), m_szDescription[0].ReleaseBuffer(), m_szDescription[1].ReleaseBuffer(), m_szPatchCommand.ReleaseBuffer(), m_szDumpCommand.ReleaseBuffer(), m_szDumpPacket.ReleaseBuffer(), m_szMasterImage.ReleaseBuffer(), RemoveAll(), cbMemoryArea = cbMemoryAreas = 0; cbMemoryAreas < sData.cbMemoryAreas; cbMemoryAreas += cbMemoryArea)
		{
			for (CopyMemory(&cbMemoryArea, nMemoryAreasData[0].GetData() + cbMemoryAreas, sizeof(cbMemoryArea)), nMemoryAreasData[1].SetSize(max(min(cbMemoryArea, nMemoryAreasData[0].GetSize() - cbMemoryAreas), 0)); nMemoryAreasData[1].GetSize() >= 0; )
			{
				CopyMemory(nMemoryAreasData[1].GetData(), nMemoryAreasData[0].GetData() + cbMemoryAreas, nMemoryAreasData[1].GetSize());
				break;
			}
			if ((pMemoryArea = new CDatabaseOBProcessorMemoryArea))
			{
				if (pMemoryArea->Unmap(nMemoryAreasData[1], bBinary) && Add(pMemoryArea) >= 0) continue;
				delete pMemoryArea;
			}
			break;
		}
		return((cbMemoryAreas == sData.cbMemoryAreas) ? TRUE : FALSE);
	}
	return FALSE;
}

INT CDatabaseOBProcessor::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseOBProcessorMemoryArea  *pMemoryArea;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pMemoryArea = GetAt(nIndex[0]))) ? ((nIndex[1] = (pMemoryArea->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert && (pMemoryArea = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pMemoryArea->GetName() == pszName) || (bInsert && (((pMemoryArea = GetAt(max(nIndex[0] - 1, 0))) && pMemoryArea->GetName() != pszName && (pMemoryArea = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pMemoryArea->GetName() != pszName) || !GetSize()))) && lstrlen(pszName) > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseOBProcessors

CDatabaseOBProcessors::CDatabaseOBProcessors() : CPtrArray()
{
	return;
}

CDatabaseOBProcessors::~CDatabaseOBProcessors()
{
	RemoveAll();
}

INT CDatabaseOBProcessors::Add(CDatabaseOBProcessor *pProcessor)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pProcessor->GetName(), TRUE)) >= 0) InsertAt(nIndex, pProcessor, 1);
	return nIndex;
}

INT CDatabaseOBProcessors::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CDatabaseOBProcessor *CDatabaseOBProcessors::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseOBProcessor *)CPtrArray::GetAt(nIndex) : (CDatabaseOBProcessor *)NULL);
}

CDatabaseOBProcessor *CDatabaseOBProcessors::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseOBProcessor *)CPtrArray::GetAt(nIndex) : (CDatabaseOBProcessor *)NULL);
}

VOID CDatabaseOBProcessors::RemoveAll()
{
	INT  nProcessor;
	INT  nProcessors;
	CDatabaseOBProcessor  *pProcessor;

	for (nProcessor = 0, nProcessors = (INT)GetSize(); nProcessor < nProcessors; nProcessor++)
	{
		if ((pProcessor = GetAt(nProcessor))) delete pProcessor;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseOBProcessors::Copy(CONST CDatabaseOBProcessors *pProcessors)
{
	INT  nProcessor;
	INT  nProcessors;
	CDatabaseOBProcessor  *pProcessor;

	for (nProcessor = 0, nProcessors = (INT)pProcessors->GetSize(), RemoveAll(); nProcessor < nProcessors; nProcessor++)
	{
		if ((pProcessor = new CDatabaseOBProcessor))
		{
			pProcessor->Copy(pProcessors->GetAt(nProcessor));
			InsertAt(nProcessor, pProcessor, 1);
			continue;
		}
		break;
	}
	return((nProcessor == nProcessors) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessors::Compare(CONST CDatabaseOBProcessors *pProcessors) CONST
{
	INT  nProcessor;
	INT  nProcessors;

	for (nProcessor = 0, nProcessors = (pProcessors->GetSize() == GetSize()) ? (INT)GetSize() : -1; nProcessor < nProcessors; nProcessor++)
	{
		if (!pProcessors->GetAt(nProcessor)->Compare(GetAt(nProcessor))) break;
		continue;
	}
	return((nProcessor == nProcessors) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessors::Map(CByteArray &nInfo, BOOL bBinary) CONST
{
	INT  nProcessor;
	INT  nProcessors;
	CByteArray  nProcessorsData;
	CDatabaseOBProcessor  *pProcessor;

	for (nProcessor = 0, nProcessors = (INT)GetSize(), nInfo.RemoveAll(); nProcessor < nProcessors; nProcessor++)
	{
		if ((pProcessor = GetAt(nProcessor)) && pProcessor->Map(nProcessorsData, bBinary) && nInfo.Append(nProcessorsData) >= 0) continue;
		break;
	}
	return((nProcessor == nProcessors) ? TRUE : FALSE);
}

BOOL CDatabaseOBProcessors::Unmap(CONST CByteArray &nInfo, BOOL bBinary)
{
	INT  cbProcessor;
	INT  cbProcessors;
	CByteArray  nProcessorsData;
	CDatabaseOBProcessor  *pProcessor;

	for (cbProcessors = 0, RemoveAll(); cbProcessors < nInfo.GetSize(); cbProcessors += cbProcessor)
	{
		for (CopyMemory(&cbProcessor, nInfo.GetData() + cbProcessors, sizeof(cbProcessor)), nProcessorsData.SetSize(max(min(cbProcessor, nInfo.GetSize() - cbProcessors), 0)); nProcessorsData.GetSize() >= 0; )
		{
			CopyMemory(nProcessorsData.GetData(), nInfo.GetData() + cbProcessors, nProcessorsData.GetSize());
			break;
		}
		if ((pProcessor = new CDatabaseOBProcessor))
		{
			if (pProcessor->Unmap(nProcessorsData, bBinary) && Add(pProcessor) >= 0) continue;
			delete pProcessor;
		}
		break;
	}
	return((cbProcessors == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseOBProcessors::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseOBProcessor  *pProcessor;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pProcessor = GetAt(nIndex[0]))) ? ((nIndex[1] = (pProcessor->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pProcessor = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pProcessor->GetName() == pszName) || (bInsert && (((pProcessor = GetAt(max(nIndex[0] - 1, 0))) && pProcessor->GetName() != pszName && (pProcessor = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pProcessor->GetName() != pszName) || !GetSize()) && lstrlen(pszName) > 0)) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CANDLayoutParameter

CANDLayoutParameter::CANDLayoutParameter() : CObject()
{
	m_nID = (UINT)-1;
	m_nContentID = -1;
	m_nAttributes = 0;
	m_nOccurrence = 0;
	m_nBytePos = 0;
	m_nBitPos = 0;
	m_nDigits = 0;
	m_nColumn = -1;
	m_nRow = -1;
	m_nRef = -1;
	m_nAlignment = DT_LEFT;
	m_nColor = GetSysColor(COLOR_WINDOW);
}
CANDLayoutParameter::CANDLayoutParameter(LPCTSTR pszName) : CObject()
{
	m_szName = pszName;
	m_nID = (UINT)-1;
	m_nContentID = -1;
	m_nAttributes = 0;
	m_nOccurrence = 0;
	m_nBytePos = 0;
	m_nBitPos = 0;
	m_nDigits = 0;
	m_nColumn = -1;
	m_nRow = -1;
	m_nRef = -1;
	m_nAlignment = DT_LEFT;
	m_nColor = GetSysColor(COLOR_WINDOW);
}

VOID CANDLayoutParameter::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CANDLayoutParameter::GetName() CONST
{
	return m_szName;
}

VOID CANDLayoutParameter::SetDescription(LPCTSTR pszDescription)
{
	m_szDescription = pszDescription;
}

CString CANDLayoutParameter::GetDescription() CONST
{
	return m_szDescription;
}

VOID CANDLayoutParameter::SetComment(LPCTSTR pszComment)
{
	m_szComment = pszComment;
}

CString CANDLayoutParameter::GetComment() CONST
{
	return m_szComment;
}

VOID CANDLayoutParameter::SetContentID(INT nID)
{
	m_nContentID = nID;
}

INT CANDLayoutParameter::GetContentID() CONST
{
	return m_nContentID;
}

VOID CANDLayoutParameter::SetOnBoardID(UINT nID)
{
	m_nID = nID;
}

UINT CANDLayoutParameter::GetOnBoardID() CONST
{
	return m_nID;
}

VOID CANDLayoutParameter::SetAttributes(ULONGLONG nAttributes)
{
	m_nAttributes = nAttributes;
}

ULONGLONG CANDLayoutParameter::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CANDLayoutParameter::SetBytePos(INT nPos)
{
	m_nBytePos = nPos;
}

INT CANDLayoutParameter::GetBytePos() CONST
{
	return m_nBytePos;
}

VOID CANDLayoutParameter::SetBitPos(INT nPos)
{
	m_nBitPos = nPos;
}

INT CANDLayoutParameter::GetBitPos() CONST
{
	return m_nBitPos;
}

VOID CANDLayoutParameter::SetOccurrence(INT nOccurrence)
{
	m_nOccurrence = nOccurrence;
}

INT CANDLayoutParameter::GetOccurrence() CONST
{
	return m_nOccurrence;
}

VOID CANDLayoutParameter::SetColumn(INT nColumn)
{
	m_nColumn = nColumn;
}

INT CANDLayoutParameter::GetColumn() CONST
{
	return m_nColumn;
}

VOID CANDLayoutParameter::SetRow(INT nRow)
{
	m_nRow = nRow;
}

INT CANDLayoutParameter::GetRow() CONST
{
	return m_nRow;
}

VOID CANDLayoutParameter::SetDigits(INT nDigits)
{
	m_nDigits = nDigits;
}

INT CANDLayoutParameter::GetDigits() CONST
{
	return m_nDigits;
}

VOID CANDLayoutParameter::SetAlignment(UINT nAlignment)
{
	m_nAlignment = nAlignment;
}

UINT CANDLayoutParameter::GetAlignment() CONST
{
	return m_nAlignment;
}

VOID CANDLayoutParameter::SetColor(COLORREF nColor)
{
	m_nColor = nColor;
}

COLORREF CANDLayoutParameter::GetColor() CONST
{
	return m_nColor;
}

BOOL CANDLayoutParameter::SetLabel(LPCTSTR pszLabel)
{
	if (IsLabel())
	{
		m_szComment = pszLabel;
		return TRUE;
	}
	return FALSE;
}

CString CANDLayoutParameter::GetLabel() CONST
{
	return((IsLabel()) ? (LPCTSTR)m_szComment : EMPTYSTRING);
}

BOOL CANDLayoutParameter::IsLabel() CONST
{
	return m_szName.IsEmpty();
}

VOID CANDLayoutParameter::SetRef(INT nRef)
{
	m_nRef = nRef;
}

INT CANDLayoutParameter::GetRef() CONST
{
	return m_nRef;
}

VOID CANDLayoutParameter::Copy(CONST CANDLayoutParameter *pANDLayoutParameter)
{
	m_szName = pANDLayoutParameter->m_szName;
	m_szComment = pANDLayoutParameter->m_szComment;
	m_szDescription = pANDLayoutParameter->m_szDescription;
	m_nID = pANDLayoutParameter->m_nID;
	m_nContentID = pANDLayoutParameter->m_nContentID;
	m_nAttributes = pANDLayoutParameter->m_nAttributes;
	m_nOccurrence = pANDLayoutParameter->m_nOccurrence;
	m_nBytePos = pANDLayoutParameter->m_nBytePos;
	m_nBitPos = pANDLayoutParameter->m_nBitPos;
	m_nAlignment = pANDLayoutParameter->m_nAlignment;
	m_nDigits = pANDLayoutParameter->m_nDigits;
	m_nColor = pANDLayoutParameter->m_nColor;
	m_nColumn = pANDLayoutParameter->m_nColumn;
	m_nRow = pANDLayoutParameter->m_nRow;
	m_nRef = pANDLayoutParameter->m_nRef;
}

BOOL CANDLayoutParameter::Compare(CONST CANDLayoutParameter *pANDLayoutParameter) CONST
{
	return((pANDLayoutParameter->m_szName == m_szName  &&  pANDLayoutParameter->m_szDescription == m_szDescription  &&  pANDLayoutParameter->m_szComment == m_szComment  &&  pANDLayoutParameter->m_nID == m_nID  &&  pANDLayoutParameter->m_nContentID == m_nContentID  &&  pANDLayoutParameter->m_nAttributes == m_nAttributes  &&  pANDLayoutParameter->m_nOccurrence == m_nOccurrence  &&  pANDLayoutParameter->m_nBytePos == m_nBytePos  &&  pANDLayoutParameter->m_nBitPos == m_nBitPos  &&  pANDLayoutParameter->m_nAlignment == m_nAlignment  &&  pANDLayoutParameter->m_nDigits == m_nDigits  &&  pANDLayoutParameter->m_nColor == m_nColor  &&  pANDLayoutParameter->m_nColumn == m_nColumn  &&  pANDLayoutParameter->m_nRow == m_nRow  &&  pANDLayoutParameter->m_nRef == m_nRef) ? TRUE : FALSE);
}

BOOL CANDLayoutParameter::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbComment = (m_szComment.GetLength() + 1)*sizeof(TCHAR);
	sData.cbDescription = (m_szDescription.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbComment)), sData.nID = m_nID, sData.nContentID = m_nContentID, sData.nAttributes = m_nAttributes, sData.nOccurrence = m_nOccurrence, sData.nBytePos = m_nBytePos, sData.nBitPos = m_nBitPos, sData.nAlignment = m_nAlignment, sData.nDigits = m_nDigits, sData.nColor = m_nColor, sData.nColumn = m_nColumn, sData.nRow = m_nRow, sData.nRef = m_nRef; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szDescription, sData.cbDescription);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbDescription), (LPCTSTR)m_szComment, sData.cbComment);
		return TRUE;
	}
	return FALSE;
}

BOOL CANDLayoutParameter::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbDescription + sData.cbComment && sData.cbName > 0 && sData.cbDescription > 0 && sData.cbComment > 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szDescription.GetBufferSetLength(STRINGCHARS(sData.cbDescription)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbDescription));
		CopyMemory(m_szComment.GetBufferSetLength(STRINGCHARS(sData.cbComment)), nInfo.GetData() + (cbData = cbData + sData.cbDescription), STRINGBYTES(sData.cbComment));
		m_nID = sData.nID;
		m_nContentID = sData.nContentID;
		m_nAttributes = sData.nAttributes;
		m_nOccurrence = sData.nOccurrence;
		m_nBytePos = sData.nBytePos;
		m_nBitPos = sData.nBitPos;
		m_nAlignment = sData.nAlignment;
		m_nDigits = sData.nDigits;
		m_nColor = sData.nColor;
		m_nColumn = sData.nColumn;
		m_nRow = sData.nRow;
		m_nRef = sData.nRef;
		m_szName.ReleaseBuffer();
		m_szDescription.ReleaseBuffer();
		m_szComment.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CANDLayout

CANDLayout::CANDLayout() : CPtrArray()
{
	m_nStatus = ANDLAYOUT_RECORDSTATUS_NONE;
}
CANDLayout::CANDLayout(LPCTSTR pszName) : CPtrArray()
{
	m_szName = pszName;
	m_nStatus = ANDLAYOUT_RECORDSTATUS_NONE;
}

CANDLayout::~CANDLayout()
{
	RemoveAll();
}

VOID CANDLayout::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CANDLayout::GetName() CONST
{
	return m_szName;
}

VOID CANDLayout::SetTitle(LPCTSTR pszTitle)
{
	m_szTitle = pszTitle;
}

CString CANDLayout::GetTitle() CONST
{
	return m_szTitle;
}

VOID CANDLayout::SetColumns(CONST CUIntArray &nColumns)
{
	m_nColumns.Copy(nColumns);
}

INT CANDLayout::GetColumns(CUIntArray &nColumns) CONST
{
	nColumns.Copy(m_nColumns);
	return((INT)nColumns.GetSize());
}

VOID CANDLayout::SetXmlCode(LPCTSTR pszCode)
{
	m_szXmlCode = pszCode;
}

CString CANDLayout::GetXmlCode() CONST
{
	return m_szXmlCode;
}

VOID CANDLayout::SetFileName(LPCTSTR pszFileName)
{
	m_szFileName = pszFileName;
}

CString CANDLayout::GetFileName() CONST
{
	return m_szFileName;
}

VOID CANDLayout::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CANDLayout::GetStatus() CONST
{
	return m_nStatus;
}

INT CANDLayout::Add(CANDLayoutParameter *pANDParameter)
{
	return((INT)CPtrArray::Add(pANDParameter));
}

INT CANDLayout::Find(LPCTSTR pszName, INT nOccurrence) CONST
{
	INT  nCount;
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (INT)GetSize(), nCount = 0; nParameter < nParameters; nParameter++)
	{
		if (GetAt(nParameter)->GetName() == pszName)
		{
			if (nCount++ == nOccurrence) break;
			continue;
		}
	}
	return((nOccurrence >= 0) ? ((nParameter < nParameters) ? nParameter : -1) : nCount);
}

CANDLayoutParameter *CANDLayout::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CANDLayoutParameter *)CPtrArray::GetAt(nIndex) : (CANDLayoutParameter *)NULL);
}

CANDLayoutParameter *CANDLayout::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CANDLayoutParameter *)CPtrArray::GetAt(nIndex) : (CANDLayoutParameter *)NULL);
}

VOID CANDLayout::RemoveAll()
{
	INT  nParameter;
	INT  nParameters;
	CANDLayoutParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter))) delete pParameter;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CANDLayout::Copy(CONST CANDLayout *pANDLayout)
{
	INT  nParameter;
	INT  nParameters;
	CANDLayoutParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)pANDLayout->GetSize(), m_szName = pANDLayout->m_szName, m_szTitle = pANDLayout->m_szTitle, m_nColumns.Copy(pANDLayout->m_nColumns), m_szXmlCode = pANDLayout->m_szXmlCode, m_szFileName = pANDLayout->m_szFileName, m_nStatus = pANDLayout->m_nStatus, RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = new CANDLayoutParameter))
		{
			pParameter->Copy(pANDLayout->GetAt(nParameter));
			if (Add(pParameter) >= 0) continue;
		}
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CANDLayout::Compare(CONST CANDLayout *pANDLayout) CONST
{
	INT  nParameter;
	INT  nParameters;
	CStringTools  cStringTools;

	for (nParameter = 0, nParameters = (((pANDLayout->m_szName == cStringTools.ConvertIntToPaddedString(_ttoi(pANDLayout->m_szName), pANDLayout->m_szName.GetLength()) && m_szName == cStringTools.ConvertIntToPaddedString(_ttoi(m_szName), m_szName.GetLength()) && _ttoi(pANDLayout->m_szName) == _ttoi(m_szName)) || (pANDLayout->m_szName != cStringTools.ConvertIntToPaddedString(_ttoi(pANDLayout->m_szName), pANDLayout->m_szName.GetLength()) && m_szName != cStringTools.ConvertIntToPaddedString(_ttoi(m_szName), m_szName.GetLength()) && pANDLayout->m_szName == m_szName)) && pANDLayout->m_szTitle == m_szTitle && pANDLayout->m_nColumns.GetSize() == m_nColumns.GetSize() && !memcmp(pANDLayout->m_nColumns.GetData(), m_nColumns.GetData(), m_nColumns.GetSize()*sizeof(UINT)) && pANDLayout->m_szXmlCode == m_szXmlCode && !pANDLayout->m_szFileName.CompareNoCase(m_szFileName) && pANDLayout->m_nStatus == m_nStatus && pANDLayout->GetSize() == GetSize()) ? (INT)GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if (!pANDLayout->GetAt(nParameter)->Compare(GetAt(nParameter))) break;
		continue;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CANDLayout::Map(CByteArray &nInfo, BOOL bDirectory) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nParameter;
	INT  nParameters;
	CByteArray  nParametersData[2];
	CANDLayoutParameter  *pParameter;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbTitle = (m_szTitle.GetLength() + 1)*sizeof(TCHAR);
	sData.cbColumns = (INT)(m_nColumns.GetSize()*sizeof(UINT));
	for (nParameter = 0, nParameters = (!bDirectory) ? (INT)GetSize() : 0, sData.nStatus = m_nStatus; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)) && pParameter->Map(nParametersData[1]) && nParametersData[0].Append(nParametersData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbTitle + sData.cbColumns + (sData.cbParameters = (INT)(nParametersData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nParameter == nParameters; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szTitle, sData.cbTitle);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTitle), m_nColumns.GetData(), sData.cbColumns);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbColumns), nParametersData[0].GetData(), sData.cbParameters);
		return TRUE;
	}
	return FALSE;
}

BOOL CANDLayout::Unmap(CONST CByteArray &nInfo, BOOL bDirectory)
{
	DATA  sData;
	INT  cbData;
	INT  cbParameter;
	INT  cbParameters;
	CByteArray  nParametersData[2];
	CANDLayoutParameter  *pParameter;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbTitle + sData.cbColumns + sData.cbParameters && sData.cbName > 0 && sData.cbTitle > 0 && sData.cbColumns >= 0 && sData.cbParameters >= 0; )
	{
		for (CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szTitle.GetBufferSetLength(STRINGCHARS(sData.cbTitle)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbTitle)), m_nColumns.SetSize(sData.cbColumns / sizeof(UINT)), nParametersData[0].SetSize(sData.cbParameters), CopyMemory(m_nColumns.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbTitle), sData.cbColumns), CopyMemory(nParametersData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbColumns), sData.cbParameters), m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), m_szTitle.ReleaseBuffer(), RemoveAll(), cbParameter = cbParameters = 0; cbParameters < sData.cbParameters && !bDirectory; cbParameters += cbParameter)
		{
			for (CopyMemory(&cbParameter, nParametersData[0].GetData() + cbParameters, sizeof(cbParameter)), nParametersData[1].SetSize(max(min(cbParameter, nParametersData[0].GetSize() - cbParameters), 0)); nParametersData[1].GetSize() >= 0; )
			{
				CopyMemory(nParametersData[1].GetData(), nParametersData[0].GetData() + cbParameters, nParametersData[1].GetSize());
				break;
			}
			if ((pParameter = new CANDLayoutParameter))
			{
				if (pParameter->Unmap(nParametersData[1]) && Add(pParameter) >= 0) continue;
				delete pParameter;
			}
			break;
		}
		return((cbParameters == sData.cbParameters) ? TRUE : bDirectory);
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CANDLayouts

CANDLayouts::CANDLayouts() : CPtrArray()
{
	return;
}

CANDLayouts::~CANDLayouts()
{
	RemoveAll();
}

INT CANDLayouts::Add(CANDLayout *pANDLayout)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pANDLayout->GetName(), TRUE)) >= 0) InsertAt(nIndex, pANDLayout, 1);
	return nIndex;
}

INT CANDLayouts::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CANDLayout *CANDLayouts::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CANDLayout *)CPtrArray::GetAt(nIndex) : (CANDLayout *)NULL);
}

CANDLayout *CANDLayouts::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CANDLayout *)CPtrArray::GetAt(nIndex) : (CANDLayout *)NULL);
}

VOID CANDLayouts::RemoveAll()
{
	INT  nLayout;
	INT  nLayouts;
	CANDLayout  *pLayout;

	for (nLayout = 0, nLayouts = (INT)GetSize(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = GetAt(nLayout))) delete pLayout;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CANDLayouts::Copy(CONST CANDLayouts *pANDLayouts)
{
	INT  nLayout;
	INT  nLayouts;
	CANDLayout  *pLayout;

	for (nLayout = 0, nLayouts = (INT)pANDLayouts->GetSize(), RemoveAll(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = new CANDLayout) != (CANDLayout *)NULL)
		{
			pLayout->Copy(pANDLayouts->GetAt(nLayout));
			InsertAt(nLayout, pLayout, 1);
			continue;
		}
		break;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CANDLayouts::Compare(CONST CANDLayouts *pANDLayouts) CONST
{
	INT  nLayout;
	INT  nLayouts;

	for (nLayout = 0, nLayouts = (pANDLayouts->GetSize() == GetSize()) ? (INT)GetSize() : -1; nLayout < nLayouts; nLayout++)
	{
		if (!pANDLayouts->GetAt(nLayout)->Compare(GetAt(nLayout))) break;
		continue;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CANDLayouts::Map(CByteArray &nInfo, BOOL bDirectory) CONST
{
	INT  nLayout;
	INT  nLayouts;
	CByteArray  nLayoutsData;
	CANDLayout  *pLayout;

	for (nLayout = 0, nLayouts = (INT)GetSize(), nInfo.RemoveAll(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = GetAt(nLayout)) && pLayout->Map(nLayoutsData, bDirectory) && nInfo.Append(nLayoutsData) >= 0) continue;
		break;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CANDLayouts::Unmap(CONST CByteArray &nInfo, BOOL bDirectory)
{
	INT  cbLayout;
	INT  cbLayouts;
	CByteArray  nLayoutsData;
	CANDLayout  *pLayout;

	for (cbLayouts = 0, RemoveAll(); cbLayouts < nInfo.GetSize(); cbLayouts += cbLayout)
	{
		for (CopyMemory(&cbLayout, nInfo.GetData() + cbLayouts, sizeof(cbLayout)), nLayoutsData.SetSize(max(min(cbLayout, nInfo.GetSize() - cbLayouts), 0)); nLayoutsData.GetSize() >= 0; )
		{
			CopyMemory(nLayoutsData.GetData(), nInfo.GetData() + cbLayouts, nLayoutsData.GetSize());
			break;
		}
		if ((pLayout = new CANDLayout))
		{
			if (pLayout->Unmap(nLayoutsData, bDirectory) && Add(pLayout) >= 0) continue;
			delete pLayout;
		}
		break;
	}
	return((cbLayouts == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CANDLayouts::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CANDLayout  *pLayout;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pLayout = GetAt(nIndex[0]))) ? ((nIndex[1] = (pLayout->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pLayout = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pLayout->GetName() == pszName) || (bInsert && (((pLayout = GetAt(max(nIndex[0] - 1, 0))) && pLayout->GetName() != pszName && (pLayout = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pLayout->GetName() != pszName) || !GetSize()) && lstrlen(pszName) > 0)) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CGRDLayoutParameter

CGRDLayoutParameter::CGRDLayoutParameter() : CObject()
{
	m_nRow = -1;
	m_nRef = -1;
	m_nDigits = 0;
	m_nOccurrence = 0;
	m_nAttributes = 0;
	m_nMargin[0] = -1;
	m_nMargin[1] = -1;
	m_fMinimum = 0.0;
	m_fMaximum = 0.0;
	m_tAutoScale = 0;
	m_nLineWidth = 2;
	m_nLineStyle = GRDLAYOUTPARAMETER_LINESTYLE_SOLID;
	m_nLineSymbol = GRDLAYOUTPARAMETER_LINESYMBOL_NONE;
	m_nColor = GetSysColor(COLOR_WINDOW);
}
CGRDLayoutParameter::CGRDLayoutParameter(LPCTSTR pszName) : CObject()
{
	m_szName = pszName;
	m_nRow = -1;
	m_nRef = -1;
	m_nDigits = 0;
	m_nOccurrence = 0;
	m_nAttributes = 0;
	m_nMargin[0] = -1;
	m_nMargin[1] = -1;
	m_fMinimum = 0.0;
	m_fMaximum = 0.0;
	m_tAutoScale = 0;
	m_nLineWidth = 2;
	m_nLineStyle = GRDLAYOUTPARAMETER_LINESTYLE_SOLID;
	m_nLineSymbol = GRDLAYOUTPARAMETER_LINESYMBOL_NONE;
	m_nColor = GetSysColor(COLOR_WINDOW);
}

VOID CGRDLayoutParameter::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CGRDLayoutParameter::GetName() CONST
{
	return m_szName;
}

VOID CGRDLayoutParameter::SetComment(LPCTSTR pszComment)
{
	m_szComment = pszComment;
}

CString CGRDLayoutParameter::GetComment() CONST
{
	return m_szComment;
}

VOID CGRDLayoutParameter::SetAttributes(ULONGLONG nAttributes)
{
	m_nAttributes = nAttributes;
}

ULONGLONG CGRDLayoutParameter::GetAttributes() CONST
{
	return m_nAttributes;
}

VOID CGRDLayoutParameter::SetPosition(INT nRow)
{
	m_nRow = nRow;
}

INT CGRDLayoutParameter::GetPosition() CONST
{
	return m_nRow;
}

VOID CGRDLayoutParameter::SetOccurrence(INT nOccurrence)
{
	m_nOccurrence = nOccurrence;
}

INT CGRDLayoutParameter::GetOccurrence() CONST
{
	return m_nOccurrence;
}

VOID CGRDLayoutParameter::SetDigits(INT nDigits)
{
	m_nDigits = nDigits;
}

INT CGRDLayoutParameter::GetDigits() CONST
{
	return m_nDigits;
}

VOID CGRDLayoutParameter::SetMargin(INT nLower, INT nUpper)
{
	m_nMargin[0] = nLower;
	m_nMargin[1] = nUpper;
}

BOOL CGRDLayoutParameter::GetMargin(INT &nLower, INT &nUpper) CONST
{
	nLower = m_nMargin[0];
	nUpper = m_nMargin[1];
	return((nLower >= 0 || nUpper >= 0) ? TRUE : FALSE);
}

VOID CGRDLayoutParameter::SetRange(double fMinimum, double fMaximum)
{
	if (fMinimum != fMaximum)
	{
		m_fMinimum = fMinimum;
		m_fMaximum = fMaximum;
	}
}

BOOL CGRDLayoutParameter::GetRange(double &fMinimum, double &fMaximum) CONST
{
	fMinimum = m_fMinimum;
	fMaximum = m_fMaximum;
	return((fMinimum != fMaximum) ? TRUE : FALSE);
}

VOID CGRDLayoutParameter::SetAutoScaleDelay(CONST CTimeSpan &tDelay)
{
	m_tAutoScale = tDelay;
}

CTimeSpan CGRDLayoutParameter::GetAutoScaleDelay() CONST
{
	return m_tAutoScale;
}

VOID CGRDLayoutParameter::SetColor(COLORREF nColor)
{
	m_nColor = nColor;
}

COLORREF CGRDLayoutParameter::GetColor() CONST
{
	return m_nColor;
}

VOID CGRDLayoutParameter::SetLineWidth(INT nWidth)
{
	m_nLineWidth = nWidth;
}

INT CGRDLayoutParameter::GetLineWidth() CONST
{
	return m_nLineWidth;
}

VOID CGRDLayoutParameter::SetLineStyle(INT nStyle)
{
	m_nLineStyle = nStyle;
}

INT CGRDLayoutParameter::GetLineStyle() CONST
{
	return m_nLineStyle;
}

VOID CGRDLayoutParameter::SetLineSymbol(INT nSymbol)
{
	m_nLineSymbol = nSymbol;
}

INT CGRDLayoutParameter::GetLineSymbol() CONST
{
	return m_nLineSymbol;
}

VOID CGRDLayoutParameter::SetRef(INT nRef)
{
	m_nRef = nRef;
}

INT CGRDLayoutParameter::GetRef() CONST
{
	return m_nRef;
}

VOID CGRDLayoutParameter::Copy(CONST CGRDLayoutParameter *pGRDLayoutParameter)
{
	m_szName = pGRDLayoutParameter->m_szName;
	m_szComment = pGRDLayoutParameter->m_szComment;
	m_nAttributes = pGRDLayoutParameter->m_nAttributes;
	m_nOccurrence = pGRDLayoutParameter->m_nOccurrence;
	m_nMargin[0] = pGRDLayoutParameter->m_nMargin[0];
	m_nMargin[1] = pGRDLayoutParameter->m_nMargin[1];
	m_fMinimum = pGRDLayoutParameter->m_fMinimum;
	m_fMaximum = pGRDLayoutParameter->m_fMaximum;
	m_tAutoScale = pGRDLayoutParameter->m_tAutoScale;
	m_nLineWidth = pGRDLayoutParameter->m_nLineWidth;
	m_nLineStyle = pGRDLayoutParameter->m_nLineStyle;
	m_nLineSymbol = pGRDLayoutParameter->m_nLineSymbol;
	m_nDigits = pGRDLayoutParameter->m_nDigits;
	m_nColor = pGRDLayoutParameter->m_nColor;
	m_nRow = pGRDLayoutParameter->m_nRow;
	m_nRef = pGRDLayoutParameter->m_nRef;
}

BOOL CGRDLayoutParameter::Compare(CONST CGRDLayoutParameter *pGRDLayoutParameter) CONST
{
	return((pGRDLayoutParameter->m_szName == m_szName  &&  pGRDLayoutParameter->m_szComment == m_szComment  &&  pGRDLayoutParameter->m_nAttributes == m_nAttributes  &&  pGRDLayoutParameter->m_nOccurrence == m_nOccurrence  &&  pGRDLayoutParameter->m_nMargin[0] == m_nMargin[0] && pGRDLayoutParameter->m_nMargin[1] == m_nMargin[1] && (pGRDLayoutParameter->m_fMinimum == m_fMinimum || (isnan(pGRDLayoutParameter->m_fMinimum) && isnan(m_fMinimum))) && (pGRDLayoutParameter->m_fMaximum == m_fMaximum || (isnan(pGRDLayoutParameter->m_fMaximum) && isnan(m_fMaximum))) && pGRDLayoutParameter->m_tAutoScale == m_tAutoScale  &&  pGRDLayoutParameter->m_nLineWidth == m_nLineWidth  &&  pGRDLayoutParameter->m_nLineStyle == m_nLineStyle  &&  pGRDLayoutParameter->m_nLineSymbol == m_nLineSymbol  &&  pGRDLayoutParameter->m_nDigits == m_nDigits  &&  pGRDLayoutParameter->m_nColor == m_nColor  &&  pGRDLayoutParameter->m_nRow == m_nRow  &&  pGRDLayoutParameter->m_nRef == m_nRef) ? TRUE : FALSE);
}

BOOL CGRDLayoutParameter::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbComment = (m_szComment.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbComment)), sData.nAttributes = m_nAttributes, sData.nOccurrence = m_nOccurrence, sData.fMinimum = m_fMinimum, sData.fMaximum = m_fMaximum, sData.nColor = m_nColor, sData.nDigits = m_nDigits, sData.nLineWidth = m_nLineWidth, sData.nLineStyle = m_nLineStyle, sData.nLineSymbol = m_nLineSymbol, sData.nRow = m_nRow, sData.nRef = m_nRef; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szComment, sData.cbComment);
		return TRUE;
	}
	return FALSE;
}

BOOL CGRDLayoutParameter::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbComment && sData.cbName > 0 && sData.cbComment > 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szComment.GetBufferSetLength(STRINGCHARS(sData.cbComment)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbComment));
		m_nAttributes = sData.nAttributes;
		m_nOccurrence = sData.nOccurrence;
		m_fMinimum = sData.fMinimum;
		m_fMaximum = sData.fMaximum;
		m_nColor = sData.nColor;
		m_nDigits = sData.nDigits;
		m_nLineWidth = sData.nLineWidth;
		m_nLineStyle = sData.nLineStyle;
		m_nLineSymbol = sData.nLineSymbol;
		m_nRow = sData.nRow;
		m_nRef = sData.nRef;
		m_szName.ReleaseBuffer();
		m_szComment.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CGRDLayout

CGRDLayout::CGRDLayout() : CPtrArray()
{
	m_nType = 0;
	m_nMode = 0;
	m_nCount = 0;
	m_tDuration = 0;
	m_tInterval[0] = 0;
	m_tInterval[1] = 0;
	m_nGrids[0] = 0;
	m_nGrids[1] = 0;
	m_nTicks[0] = 0;
	m_nTicks[1] = 0;
	m_nWidth[0] = 1;
	m_nWidth[1] = 1;
	m_sizePlot.cx = 0;
	m_sizePlot.cy = 0;
	m_nGridsColor = VGA_COLOR_GRAY;
	m_nTicksColor = VGA_COLOR_GRAY;
	m_nBkgndColor = VGA_COLOR_LTGRAY;
	m_nLabelColor = VGA_COLOR_BLACK;
	m_nStatus = GRDLAYOUT_RECORDSTATUS_NONE;
}
CGRDLayout::CGRDLayout(LPCTSTR pszName) : CPtrArray()
{
	m_szName = pszName;
	m_nType = 0;
	m_nMode = 0;
	m_nCount = 0;
	m_tDuration = 0;
	m_tInterval[0] = 0;
	m_tInterval[1] = 0;
	m_nGrids[0] = 0;
	m_nGrids[1] = 0;
	m_nTicks[0] = 0;
	m_nTicks[1] = 0;
	m_nWidth[0] = 1;
	m_nWidth[1] = 1;
	m_sizePlot.cx = 0;
	m_sizePlot.cy = 0;
	m_nGridsColor = VGA_COLOR_GRAY;
	m_nTicksColor = VGA_COLOR_GRAY;
	m_nBkgndColor = VGA_COLOR_LTGRAY;
	m_nLabelColor = VGA_COLOR_BLACK;
	m_nStatus = GRDLAYOUT_RECORDSTATUS_NONE;
}

CGRDLayout::~CGRDLayout()
{
	RemoveAll();
}

VOID CGRDLayout::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CGRDLayout::GetName() CONST
{
	return m_szName;
}

VOID CGRDLayout::SetTitle(LPCTSTR pszTitle)
{
	m_szTitle = pszTitle;
}

CString CGRDLayout::GetTitle() CONST
{
	return m_szTitle;
}

VOID CGRDLayout::SetType(INT nType)
{
	m_nType = nType;
}

INT CGRDLayout::GetType() CONST
{
	return m_nType;
}

VOID CGRDLayout::SetMode(INT nMode)
{
	m_nMode = nMode;
}

INT CGRDLayout::GetMode() CONST
{
	return m_nMode;
}

VOID CGRDLayout::SetColumns(CONST CUIntArray &nColumns)
{
	m_nColumns.Copy(nColumns);
}

INT CGRDLayout::GetColumns(CUIntArray &nColumns) CONST
{
	nColumns.Copy(m_nColumns);
	return((INT)nColumns.GetSize());
}

VOID CGRDLayout::SetPlotSize(CONST SIZE &size)
{
	m_sizePlot = size;
}

CSize CGRDLayout::GetPlotSize() CONST
{
	return m_sizePlot;
}

VOID CGRDLayout::SetDuration(CONST CTimeSpan &tDuration)
{
	m_tDuration = tDuration;
}

CTimeSpan CGRDLayout::GetDuration() CONST
{
	return m_tDuration;
}

VOID CGRDLayout::SetInterval(CONST CTimeSpan &tInterval)
{
	m_tInterval[0] = tInterval;
}

CTimeSpan CGRDLayout::GetInterval() CONST
{
	return m_tInterval[0];
}

VOID CGRDLayout::SetUpdateInterval(CONST CTimeSpan &tInterval)
{
	m_tInterval[1] = tInterval;
}

CTimeSpan CGRDLayout::GetUpdateInterval() CONST
{
	return m_tInterval[1];
}

BOOL CGRDLayout::SetScalingData(CONST CByteArray &nData)
{
	INT  nParameter;
	INT  nParameters;
	SCALINGDATA  sScalingData;
	PARAMETERSCALINGDATA  sParameterScalingData;
	CGRDLayoutParameter  *pParameter;

	CopyMemory(&sScalingData, nData.GetData(), (nData.GetSize() >= sizeof(sScalingData)) ? sizeof(sScalingData) : 0);
	if (nData.GetSize() >= sizeof(sScalingData) && sScalingData.cbSize == nData.GetSize() && sScalingData.cbSize >= (INT) sizeof(sScalingData) + sScalingData.cbData  &&  sScalingData.cbData == sizeof(sParameterScalingData)*GetSize())
	{
		for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pParameter = GetAt(nParameter)) != (CGRDLayoutParameter *)NULL)
			{
				for (CopyMemory(&sParameterScalingData, nData.GetData() + sizeof(sScalingData) + nParameter*sizeof(sParameterScalingData), sizeof(sParameterScalingData)); pParameter->GetRef() == sParameterScalingData.nRef; )
				{
					pParameter->SetMargin(sParameterScalingData.nMargin[0], sParameterScalingData.nMargin[1]);
					pParameter->SetRange(sParameterScalingData.fRange[0], sParameterScalingData.fRange[1]);
					pParameter->SetAutoScaleDelay(sParameterScalingData.tDelay);
					break;
				}
				continue;
			}
			break;
		}
		return((nParameter == nParameters) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CGRDLayout::GetScalingData(CByteArray &nData) CONST
{
	INT  nParameter;
	INT  nParameters;
	CByteArray  nScalingData;
	SCALINGDATA  sScalingData;
	PARAMETERSCALINGDATA  sParameterScalingData;
	CGRDLayoutParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)))
		{
			sParameterScalingData.nRef = pParameter->GetRef();
			sParameterScalingData.tDelay = pParameter->GetAutoScaleDelay().GetTotalSeconds();
			pParameter->GetMargin(sParameterScalingData.nMargin[0], sParameterScalingData.nMargin[1]);
			pParameter->GetRange(sParameterScalingData.fRange[0], sParameterScalingData.fRange[1]);
			nScalingData.SetSize(sizeof(sParameterScalingData) + nParameter*sizeof(sParameterScalingData));
			CopyMemory(nScalingData.GetData() + nParameter*sizeof(sParameterScalingData), &sParameterScalingData, sizeof(sParameterScalingData));
			continue;
		}
		break;
	}
	if (nParameter == nParameters)
	{
		for (nData.SetSize((sScalingData.cbSize = sizeof(sScalingData) + (sScalingData.cbData = (INT)nScalingData.GetSize()*sizeof(BYTE)))); sScalingData.cbSize == (INT)nData.GetSize(); )
		{
			CopyMemory(nData.GetData(), &sScalingData, sizeof(sScalingData));
			CopyMemory(nData.GetData() + sizeof(sScalingData), nScalingData.GetData(), sScalingData.cbData);
			return TRUE;
		}
	}
	return FALSE;
}

VOID CGRDLayout::SetGrids(INT X, INT Y)
{
	m_nGrids[0] = X;
	m_nGrids[1] = Y;
}

BOOL CGRDLayout::GetGrids(INT &X, INT &Y) CONST
{
	X = m_nGrids[0];
	Y = m_nGrids[1];
	return((X >= 0 && Y >= 0) ? TRUE : FALSE);
}

VOID CGRDLayout::SetTicks(INT X, INT Y)
{
	m_nTicks[0] = X;
	m_nTicks[1] = Y;
}

BOOL CGRDLayout::GetTicks(INT &X, INT &Y) CONST
{
	X = m_nTicks[0];
	Y = m_nTicks[1];
	return((X >= 0 && Y >= 0) ? TRUE : FALSE);
}

VOID CGRDLayout::SetGridsWidth(INT nWidth)
{
	m_nWidth[0] = nWidth;
}

INT CGRDLayout::GetGridsWidth() CONST
{
	return m_nWidth[0];
}

VOID CGRDLayout::SetTicksWidth(INT nWidth)
{
	m_nWidth[1] = nWidth;
}

INT CGRDLayout::GetTicksWidth() CONST
{
	return m_nWidth[1];
}

VOID CGRDLayout::SetGridsColor(COLORREF nColor)
{
	m_nGridsColor = nColor;
}

COLORREF CGRDLayout::GetGridsColor() CONST
{
	return m_nGridsColor;
}

VOID CGRDLayout::SetTicksColor(COLORREF nColor)
{
	m_nTicksColor = nColor;
}

COLORREF CGRDLayout::GetTicksColor() CONST
{
	return m_nTicksColor;
}

VOID CGRDLayout::SetBackgroundColor(COLORREF nColor)
{
	m_nBkgndColor = nColor;
}

COLORREF CGRDLayout::GetBackgroundColor() CONST
{
	return m_nBkgndColor;
}

VOID CGRDLayout::SetLabelColor(COLORREF nColor)
{
	m_nLabelColor = nColor;
}

COLORREF CGRDLayout::GetLabelColor() CONST
{
	return m_nLabelColor;
}

VOID CGRDLayout::SetParameters(INT nCount)
{
	m_nCount = nCount;
}

INT CGRDLayout::GetParameters() CONST
{
	return m_nCount;
}

VOID CGRDLayout::SetXmlCode(LPCTSTR pszCode)
{
	m_szXmlCode = pszCode;
}

CString CGRDLayout::GetXmlCode() CONST
{
	return m_szXmlCode;
}

VOID CGRDLayout::SetFileName(LPCTSTR pszFileName)
{
	m_szFileName = pszFileName;
}

CString CGRDLayout::GetFileName() CONST
{
	return m_szFileName;
}

VOID CGRDLayout::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CGRDLayout::GetStatus() CONST
{
	return m_nStatus;
}

INT CGRDLayout::Add(CGRDLayoutParameter *pGRDParameter)
{
	return((INT)CPtrArray::Add(pGRDParameter));
}

INT CGRDLayout::Find(LPCTSTR pszName) CONST
{
	INT  nParameter;
	INT  nParameters;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if (GetAt(nParameter)->GetName() == pszName) break;
		continue;
	}
	return((nParameter < nParameters) ? nParameter : -1);
}

CGRDLayoutParameter *CGRDLayout::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CGRDLayoutParameter *)CPtrArray::GetAt(nIndex) : (CGRDLayoutParameter *)NULL);
}

CGRDLayoutParameter *CGRDLayout::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CGRDLayoutParameter *)CPtrArray::GetAt(nIndex) : (CGRDLayoutParameter *)NULL);
}

VOID CGRDLayout::RemoveAll()
{
	INT  nParameter;
	INT  nParameters;
	CGRDLayoutParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter))) delete pParameter;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CGRDLayout::Copy(CONST CGRDLayout *pGRDLayout)
{
	INT  nParameter;
	INT  nParameters;
	CGRDLayoutParameter  *pParameter;

	for (nParameter = 0, nParameters = (INT)pGRDLayout->GetSize(), m_szName = pGRDLayout->m_szName, m_szTitle = pGRDLayout->m_szTitle, m_nType = pGRDLayout->m_nType, m_nMode = pGRDLayout->m_nMode, m_nColumns.Copy(pGRDLayout->m_nColumns), m_sizePlot = pGRDLayout->m_sizePlot, m_tDuration = pGRDLayout->m_tDuration, m_tInterval[0] = pGRDLayout->m_tInterval[0], m_tInterval[1] = pGRDLayout->m_tInterval[1], m_nGrids[0] = pGRDLayout->m_nGrids[0], m_nGrids[1] = pGRDLayout->m_nGrids[1], m_nGridsColor = pGRDLayout->m_nGridsColor, m_nTicks[0] = pGRDLayout->m_nTicks[0], m_nTicks[1] = pGRDLayout->m_nTicks[1], m_nTicksColor = pGRDLayout->m_nTicksColor, m_nWidth[0] = pGRDLayout->m_nWidth[0], m_nWidth[1] = pGRDLayout->m_nWidth[1], m_nBkgndColor = pGRDLayout->m_nBkgndColor, m_nLabelColor = pGRDLayout->m_nLabelColor, m_nCount = pGRDLayout->m_nCount, m_szXmlCode = pGRDLayout->m_szXmlCode, m_szFileName = pGRDLayout->m_szFileName, m_nStatus = pGRDLayout->m_nStatus, RemoveAll(); nParameter < nParameters; nParameter++)
	{
		if ((pParameter = new CGRDLayoutParameter))
		{
			pParameter->Copy(pGRDLayout->GetAt(nParameter));
			if (Add(pParameter) >= 0) continue;
		}
		break;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CGRDLayout::Compare(CONST CGRDLayout *pGRDLayout) CONST
{
	INT  nParameter;
	INT  nParameters;
	CStringTools  cStringTools;

	for (nParameter = 0, nParameters = (((pGRDLayout->m_szName == cStringTools.ConvertIntToPaddedString(_ttoi(pGRDLayout->m_szName), pGRDLayout->m_szName.GetLength()) && m_szName == cStringTools.ConvertIntToPaddedString(_ttoi(m_szName), m_szName.GetLength()) && _ttoi(pGRDLayout->m_szName) == _ttoi(m_szName)) || (pGRDLayout->m_szName != cStringTools.ConvertIntToPaddedString(_ttoi(pGRDLayout->m_szName), pGRDLayout->m_szName.GetLength()) && m_szName != cStringTools.ConvertIntToPaddedString(_ttoi(m_szName), m_szName.GetLength()) && pGRDLayout->m_szName == m_szName)) && pGRDLayout->m_szTitle == m_szTitle && pGRDLayout->m_nType == m_nType && pGRDLayout->m_nMode == m_nMode && pGRDLayout->m_nColumns.GetSize() == m_nColumns.GetSize() && !memcmp(pGRDLayout->m_nColumns.GetData(), m_nColumns.GetData(), m_nColumns.GetSize()*sizeof(UINT)) && pGRDLayout->m_sizePlot == m_sizePlot && pGRDLayout->m_tDuration == m_tDuration && pGRDLayout->m_tInterval[0] == m_tInterval[0] && pGRDLayout->m_tInterval[1] == m_tInterval[1] && pGRDLayout->m_nGrids[0] == m_nGrids[0] && pGRDLayout->m_nGrids[1] == m_nGrids[1] && pGRDLayout->m_nGridsColor == m_nGridsColor && pGRDLayout->m_nTicks[0] == m_nTicks[0] && pGRDLayout->m_nTicks[1] == m_nTicks[1] && pGRDLayout->m_nTicksColor == m_nTicksColor && pGRDLayout->m_nWidth[0] == m_nWidth[0] && pGRDLayout->m_nWidth[1] == m_nWidth[1] && pGRDLayout->m_nBkgndColor == m_nBkgndColor && pGRDLayout->m_nLabelColor == m_nLabelColor && pGRDLayout->m_nCount == m_nCount && pGRDLayout->m_szXmlCode == m_szXmlCode && !pGRDLayout->m_szFileName.CompareNoCase(m_szFileName) && pGRDLayout->m_nStatus == m_nStatus && pGRDLayout->GetSize() == GetSize()) ? (INT)GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if (!pGRDLayout->GetAt(nParameter)->Compare(GetAt(nParameter))) break;
		continue;
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CGRDLayout::Map(CByteArray &nInfo, BOOL bDirectory) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nParameter;
	INT  nParameters;
	CByteArray  nParametersData[2];
	CGRDLayoutParameter  *pParameter;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbTitle = (m_szTitle.GetLength() + 1)*sizeof(TCHAR);
	sData.cbColumns = (INT)(m_nColumns.GetSize()*sizeof(UINT));
	for (nParameter = 0, nParameters = (!bDirectory) ? (INT)GetSize() : 0, sData.nType = m_nType, sData.nMode = m_nMode, sData.nCount = m_nCount, sData.sizePlot = m_sizePlot, sData.tDuration = m_tDuration.GetTotalSeconds(), sData.tInterval[0] = m_tInterval[0].GetTotalSeconds(), sData.tInterval[1] = m_tInterval[1].GetTotalSeconds(), sData.nGrids[0] = m_nGrids[0], sData.nGrids[1] = m_nGrids[1], sData.nTicks[0] = m_nTicks[0], sData.nTicks[1] = m_nTicks[1], sData.nWidth[0] = m_nWidth[0], sData.nWidth[1] = m_nWidth[1], sData.nGridsColor = m_nGridsColor, sData.nTicksColor = m_nTicksColor, sData.nBkgndColor = m_nBkgndColor, sData.nLabelColor = m_nLabelColor, sData.nStatus = m_nStatus; nParameter < nParameters; nParameter++)
	{
		if ((pParameter = GetAt(nParameter)) && pParameter->Map(nParametersData[1]) && nParametersData[0].Append(nParametersData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbTitle + sData.cbColumns + (sData.cbParameters = (INT)(nParametersData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nParameter == nParameters; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szTitle, sData.cbTitle);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTitle), m_nColumns.GetData(), sData.cbColumns);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbColumns), nParametersData[0].GetData(), sData.cbParameters);
		return TRUE;
	}
	return FALSE;
}

BOOL CGRDLayout::Unmap(CONST CByteArray &nInfo, BOOL bDirectory)
{
	DATA  sData;
	INT  cbData;
	INT  cbParameter;
	INT  cbParameters;
	CByteArray  nParametersData[2];
	CGRDLayoutParameter  *pParameter;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbTitle + sData.cbColumns + sData.cbParameters && sData.cbName > 0 && sData.cbTitle > 0 && sData.cbColumns >= 0 && sData.cbParameters >= 0; )
	{
		for (CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szTitle.GetBufferSetLength(STRINGCHARS(sData.cbTitle)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbTitle)), m_nColumns.SetSize(sData.cbColumns / sizeof(UINT)), nParametersData[0].SetSize(sData.cbParameters), CopyMemory(m_nColumns.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbTitle), sData.cbColumns), CopyMemory(nParametersData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbColumns), sData.cbParameters), m_nType = sData.nType, m_nMode = sData.nMode, m_nCount = sData.nCount, m_sizePlot = sData.sizePlot, m_tDuration = sData.tDuration, m_tInterval[0] = sData.tInterval[0], m_tInterval[1] = sData.tInterval[1], m_nGrids[0] = sData.nGrids[0], m_nGrids[1] = sData.nGrids[1], m_nTicks[0] = sData.nTicks[0], m_nTicks[1] = sData.nTicks[1], m_nWidth[0] = sData.nWidth[0], m_nWidth[1] = sData.nWidth[1], m_nGridsColor = sData.nGridsColor, m_nTicksColor = sData.nTicksColor, m_nBkgndColor = sData.nBkgndColor, m_nLabelColor = sData.nLabelColor, m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), m_szTitle.ReleaseBuffer(), RemoveAll(), cbParameter = cbParameters = 0; cbParameters < sData.cbParameters && !bDirectory; cbParameters += cbParameter)
		{
			for (CopyMemory(&cbParameter, nParametersData[0].GetData() + cbParameters, sizeof(cbParameter)), nParametersData[1].SetSize(max(min(cbParameter, nParametersData[0].GetSize() - cbParameters), 0)); nParametersData[1].GetSize() >= 0; )
			{
				CopyMemory(nParametersData[1].GetData(), nParametersData[0].GetData() + cbParameters, nParametersData[1].GetSize());
				break;
			}
			if ((pParameter = new CGRDLayoutParameter))
			{
				if (pParameter->Unmap(nParametersData[1]) && Add(pParameter) >= 0) continue;
				delete pParameter;
			}
			break;
		}
		return((cbParameters == sData.cbParameters) ? TRUE : bDirectory);
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CGRDLayouts

CGRDLayouts::CGRDLayouts() : CPtrArray()
{
	return;
}

CGRDLayouts::~CGRDLayouts()
{
	RemoveAll();
}

INT CGRDLayouts::Add(CGRDLayout *pGRDLayout)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pGRDLayout->GetName(), TRUE)) >= 0) InsertAt(nIndex, pGRDLayout, 1);
	return nIndex;
}

INT CGRDLayouts::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CGRDLayout *CGRDLayouts::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CGRDLayout *)CPtrArray::GetAt(nIndex) : (CGRDLayout *)NULL);
}

CGRDLayout *CGRDLayouts::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CGRDLayout *)CPtrArray::GetAt(nIndex) : (CGRDLayout *)NULL);
}

VOID CGRDLayouts::RemoveAll()
{
	INT  nLayout;
	INT  nLayouts;
	CGRDLayout  *pLayout;

	for (nLayout = 0, nLayouts = (INT)GetSize(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = GetAt(nLayout))) delete pLayout;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CGRDLayouts::Copy(CONST CGRDLayouts *pGRDLayouts)
{
	INT  nLayout;
	INT  nLayouts;
	CGRDLayout  *pLayout;

	for (nLayout = 0, nLayouts = (INT)pGRDLayouts->GetSize(), RemoveAll(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = new CGRDLayout) != (CGRDLayout *)NULL)
		{
			pLayout->Copy(pGRDLayouts->GetAt(nLayout));
			InsertAt(nLayout, pLayout, 1);
			continue;
		}
		break;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CGRDLayouts::Compare(CONST CGRDLayouts *pGRDLayouts) CONST
{
	INT  nLayout;
	INT  nLayouts;

	for (nLayout = 0, nLayouts = (pGRDLayouts->GetSize() == GetSize()) ? (INT)GetSize() : -1; nLayout < nLayouts; nLayout++)
	{
		if (!pGRDLayouts->GetAt(nLayout)->Compare(GetAt(nLayout))) break;
		continue;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CGRDLayouts::Map(CByteArray &nInfo, BOOL bDirectory) CONST
{
	INT  nLayout;
	INT  nLayouts;
	CByteArray  nLayoutsData;
	CGRDLayout  *pLayout;

	for (nLayout = 0, nLayouts = (INT)GetSize(), nInfo.RemoveAll(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = GetAt(nLayout)) && pLayout->Map(nLayoutsData, bDirectory) && nInfo.Append(nLayoutsData) >= 0) continue;
		break;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CGRDLayouts::Unmap(CONST CByteArray &nInfo, BOOL bDirectory)
{
	INT  cbLayout;
	INT  cbLayouts;
	CByteArray  nLayoutsData;
	CGRDLayout  *pLayout;

	for (cbLayouts = 0, RemoveAll(); cbLayouts < nInfo.GetSize(); cbLayouts += cbLayout)
	{
		for (CopyMemory(&cbLayout, nInfo.GetData() + cbLayouts, sizeof(cbLayout)), nLayoutsData.SetSize(max(min(cbLayout, nInfo.GetSize() - cbLayouts), 0)); nLayoutsData.GetSize() >= 0; )
		{
			CopyMemory(nLayoutsData.GetData(), nInfo.GetData() + cbLayouts, nLayoutsData.GetSize());
			break;
		}
		if ((pLayout = new CGRDLayout))
		{
			if (pLayout->Unmap(nLayoutsData, bDirectory) && Add(pLayout) >= 0) continue;
			delete pLayout;
		}
		break;
	}
	return((cbLayouts == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CGRDLayouts::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CGRDLayout  *pLayout;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pLayout = GetAt(nIndex[0]))) ? ((nIndex[1] = (pLayout->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pLayout = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pLayout->GetName() == pszName) || (bInsert && (((pLayout = GetAt(max(nIndex[0] - 1, 0))) && pLayout->GetName() != pszName && (pLayout = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pLayout->GetName() != pszName) || !GetSize()) && lstrlen(pszName) > 0)) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CMMDLayoutItem

CMMDLayoutItem::CMMDLayoutItem() : CObject()
{
	m_xForm.eM11 = 1.0;
	m_xForm.eM12 = 0.0;
	m_xForm.eM21 = 0.0;
	m_xForm.eM22 = 1.0;
	m_xForm.eDx = 0.0;
	m_xForm.eDy = 0.0;
	m_rPosition.SetRectEmpty();
	m_bVisible = TRUE;
}
CMMDLayoutItem::CMMDLayoutItem(LPCTSTR pszName) : CObject()
{
	m_szName = pszName;
	m_xForm.eM11 = 1.0;
	m_xForm.eM12 = 0.0;
	m_xForm.eM21 = 0.0;
	m_xForm.eM22 = 1.0;
	m_xForm.eDx = 0.0;
	m_xForm.eDy = 0.0;
	m_rPosition.SetRectEmpty();
	m_bVisible = TRUE;
}

VOID CMMDLayoutItem::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CMMDLayoutItem::GetName() CONST
{
	return m_szName;
}

VOID CMMDLayoutItem::SetType(LPCTSTR pszType)
{
	m_szType = pszType;
}

CString CMMDLayoutItem::GetType() CONST
{
	return m_szType;
}

VOID CMMDLayoutItem::SetClassID(CLSID clsid)
{
	m_clsid = clsid;
}

CLSID CMMDLayoutItem::GetClassID() CONST
{
	return m_clsid;
}

VOID CMMDLayoutItem::SetToolTipText(LPCTSTR pszText)
{
	m_szText = pszText;
}

CString CMMDLayoutItem::GetToolTipText() CONST
{
	return m_szText;
}

VOID CMMDLayoutItem::SetLink(LPCTSTR pszName)
{
	m_szLink = pszName;
}

CString CMMDLayoutItem::GetLink() CONST
{
	return m_szLink;
}

VOID CMMDLayoutItem::SetPosition(CONST RECT &rect)
{
	m_rPosition = rect;
}

CRect CMMDLayoutItem::GetPosition() CONST
{
	return m_rPosition;
}

VOID CMMDLayoutItem::SetTransformation(CONST XFORM &xForm)
{
	CopyMemory(&m_xForm, &xForm, sizeof(XFORM));
}

VOID CMMDLayoutItem::GetTransformation(XFORM &xForm) CONST
{
	CopyMemory(&xForm, &m_xForm, sizeof(XFORM));
}

VOID CMMDLayoutItem::SetProperties(CONST CByteArray &nInfo)
{
	m_nInfo.Copy(nInfo);
}

BOOL CMMDLayoutItem::GetProperties(CByteArray &nInfo) CONST
{
	nInfo.Copy(m_nInfo);
	return((nInfo.GetSize() > 0) ? TRUE : FALSE);
}

VOID CMMDLayoutItem::SetVisible(BOOL bFlag)
{
	m_bVisible = bFlag;
}

BOOL CMMDLayoutItem::IsVisible() CONST
{
	return m_bVisible;
}

VOID CMMDLayoutItem::Copy(CONST CMMDLayoutItem *pMMDLayoutItem)
{
	m_szName = pMMDLayoutItem->m_szName;
	m_szType = pMMDLayoutItem->m_szType;
	m_szText = pMMDLayoutItem->m_szText;
	m_szLink = pMMDLayoutItem->m_szLink;
	m_clsid = pMMDLayoutItem->m_clsid;
	m_rPosition = pMMDLayoutItem->m_rPosition;
	m_bVisible = pMMDLayoutItem->m_bVisible;
	m_nInfo.Copy(pMMDLayoutItem->m_nInfo);
	CopyMemory(&m_xForm, &pMMDLayoutItem->m_xForm, sizeof(XFORM));
}

BOOL CMMDLayoutItem::Compare(CONST CMMDLayoutItem *pMMDLayoutItem) CONST
{
	return((pMMDLayoutItem->m_szName == m_szName  &&  pMMDLayoutItem->m_szType == m_szType  &&  pMMDLayoutItem->m_szText == m_szText  &&  pMMDLayoutItem->m_szLink == m_szLink  &&  pMMDLayoutItem->m_clsid == m_clsid  &&  pMMDLayoutItem->m_rPosition == m_rPosition  &&  pMMDLayoutItem->m_bVisible == m_bVisible  &&  pMMDLayoutItem->m_nInfo.GetSize() == m_nInfo.GetSize() && !memcmp(pMMDLayoutItem->m_nInfo.GetData(), m_nInfo.GetData(), m_nInfo.GetSize()) && !memcmp(&pMMDLayoutItem->m_xForm, &m_xForm, sizeof(XFORM))) ? TRUE : FALSE);
}

BOOL CMMDLayoutItem::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbType = (m_szType.GetLength() + 1)*sizeof(TCHAR);
	sData.cbText = (m_szText.GetLength() + 1)*sizeof(TCHAR);
	sData.cbLink = (m_szLink.GetLength() + 1)*sizeof(TCHAR);
	sData.cbInfo = (INT)(m_nInfo.GetSize()*sizeof(BYTE));
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbType + sData.cbText + sData.cbLink + sData.cbInfo)), sData.clsid = m_clsid, CopyMemory(&sData.xForm, &m_xForm, sizeof(XFORM)), sData.rPosition = m_rPosition, sData.bVisible = m_bVisible; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szType, sData.cbType);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbType), (LPCTSTR)m_szText, sData.cbText);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbText), (LPCTSTR)m_szLink, sData.cbLink);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbLink), m_nInfo.GetData(), sData.cbInfo);
		return TRUE;
	}
	return FALSE;
}

BOOL CMMDLayoutItem::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbType + sData.cbText + sData.cbLink + sData.cbInfo && sData.cbName > 0 && sData.cbType > 0 && sData.cbText > 0 && sData.cbLink > 0 && sData.cbInfo >= 0; )
	{
		for (m_nInfo.SetSize(sData.cbInfo), CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szType.GetBufferSetLength(STRINGCHARS(sData.cbType)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbType)), CopyMemory(m_szText.GetBufferSetLength(STRINGCHARS(sData.cbText)), nInfo.GetData() + (cbData = cbData + sData.cbType), STRINGBYTES(sData.cbText)), CopyMemory(m_szLink.GetBufferSetLength(STRINGCHARS(sData.cbLink)), nInfo.GetData() + (cbData = cbData + sData.cbText), STRINGBYTES(sData.cbLink)), CopyMemory(&m_xForm, &sData.xForm, sizeof(XFORM)), m_szName.ReleaseBuffer(), m_szType.ReleaseBuffer(), m_szText.ReleaseBuffer(), m_szLink.ReleaseBuffer(); m_nInfo.GetSize() == sData.cbInfo; )
		{
			CopyMemory(m_nInfo.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbLink), sData.cbInfo);
			m_clsid = sData.clsid;
			m_rPosition = sData.rPosition;
			m_bVisible = sData.bVisible;
			return TRUE;
		}
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CMMDLayout

CMMDLayout::CMMDLayout() : CPtrArray()
{
	m_sizeImage.cx = 0;
	m_sizeImage.cy = 0;
	m_sizeGrid.cx = 0;
	m_sizeGrid.cy = 0;
	m_nImageMargin[0] = 0;
	m_nImageMargin[1] = 0;
	m_nImageMargin[2] = 0;
	m_nImageMargin[3] = 0;
	m_nImageBkgnd = GetSysColor(COLOR_WINDOW);
	m_nImageGrid = GetSysColor(COLOR_WINDOW);
	m_bUseGrid = FALSE;

}
CMMDLayout::CMMDLayout(LPCTSTR pszName) : CPtrArray()
{
	m_szName = pszName;
	m_sizeImage.cx = 0;
	m_sizeImage.cy = 0;
	m_sizeGrid.cx = 0;
	m_sizeGrid.cy = 0;
	m_nImageMargin[0] = 0;
	m_nImageMargin[1] = 0;
	m_nImageMargin[2] = 0;
	m_nImageMargin[3] = 0;
	m_nImageBkgnd = GetSysColor(COLOR_WINDOW);
	m_nImageGrid = GetSysColor(COLOR_WINDOW);
	m_bUseGrid = FALSE;
}

CMMDLayout::~CMMDLayout()
{
	RemoveAll();
}

VOID CMMDLayout::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CMMDLayout::GetName() CONST
{
	return m_szName;
}

VOID CMMDLayout::SetTitle(LPCTSTR pszTitle)
{
	m_szTitle = pszTitle;
}

CString CMMDLayout::GetTitle() CONST
{
	return m_szTitle;
}

VOID CMMDLayout::SetImage(CONST SIZE &sizeImage, INT nMarginLeft, INT nMarginTop, INT nMarginRight, INT nMarginBottom, COLORREF nImageBkgnd, CONST SIZE &sizeGrid, COLORREF nImageGrid, BOOL bUseGrid)
{
	m_sizeImage = sizeImage;
	m_nImageMargin[0] = nMarginLeft;
	m_nImageMargin[1] = nMarginTop;
	m_nImageMargin[2] = nMarginRight;
	m_nImageMargin[3] = nMarginBottom;
	m_nImageBkgnd = nImageBkgnd;
	m_nImageGrid = nImageGrid;
	m_sizeGrid = sizeGrid;
	m_bUseGrid = bUseGrid;
}

VOID CMMDLayout::GetImage(SIZE &sizeImage, INT &nMarginLeft, INT &nMarginTop, INT &nMarginRight, INT &nMarginBottom, COLORREF &nImageBkgnd, SIZE &sizeGrid, COLORREF &nImageGrid, BOOL &bUseGrid) CONST
{
	sizeImage = m_sizeImage;
	nMarginLeft = m_nImageMargin[0];
	nMarginTop = m_nImageMargin[1];
	nMarginRight = m_nImageMargin[2];
	nMarginBottom = m_nImageMargin[3];
	nImageBkgnd = m_nImageBkgnd;
	nImageGrid = m_nImageGrid;
	sizeGrid = m_sizeGrid;
	bUseGrid = m_bUseGrid;
}

VOID CMMDLayout::SetSourceCode(LPCTSTR pszCode)
{
	m_szCode = pszCode;
}
VOID CMMDLayout::SetSourceCode(CONST CByteArray &nCode)
{
	m_nCode.Copy(nCode);
}

CString CMMDLayout::GetSourceCode() CONST
{
	return m_szCode;
}
INT CMMDLayout::GetSourceCode(CByteArray &nCode) CONST
{
	nCode.Copy(m_nCode);
	return((INT)nCode.GetSize());
}

INT CMMDLayout::Add(CMMDLayoutItem *pMMDLayoutItem)
{
	return((INT)CPtrArray::Add(pMMDLayoutItem));
}

INT CMMDLayout::Find(LPCTSTR pszName) CONST
{
	INT  nItem;
	INT  nItems;

	for (nItem = 0, nItems = (INT)GetSize(); nItem < nItems; nItem++)
	{
		if (GetAt(nItem)->GetName() == pszName) break;
		continue;
	}
	return((nItem < nItems) ? nItem : -1);
}

CMMDLayoutItem *CMMDLayout::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CMMDLayoutItem *)CPtrArray::GetAt(nIndex) : (CMMDLayoutItem *)NULL);
}

CMMDLayoutItem *CMMDLayout::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CMMDLayoutItem *)CPtrArray::GetAt(nIndex) : (CMMDLayoutItem *)NULL);
}

VOID CMMDLayout::RemoveAll()
{
	INT  nItem;
	INT  nItems;
	CMMDLayoutItem  *pItem;

	for (nItem = 0, nItems = (INT)GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = GetAt(nItem))) delete pItem;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CMMDLayout::Copy(CONST CMMDLayout *pMMDLayout)
{
	INT  nItem;
	INT  nItems;
	CMMDLayoutItem  *pItem;

	for (nItem = 0, nItems = (INT)pMMDLayout->GetSize(), m_szName = pMMDLayout->m_szName, m_szTitle = pMMDLayout->m_szTitle, m_szCode = pMMDLayout->m_szCode, m_nCode.Copy(pMMDLayout->m_nCode), m_sizeImage = pMMDLayout->m_sizeImage, m_nImageMargin[0] = pMMDLayout->m_nImageMargin[0], m_nImageMargin[1] = pMMDLayout->m_nImageMargin[1], m_nImageMargin[2] = pMMDLayout->m_nImageMargin[2], m_nImageMargin[3] = pMMDLayout->m_nImageMargin[3], m_nImageBkgnd = pMMDLayout->m_nImageBkgnd, m_nImageGrid = pMMDLayout->m_nImageGrid, m_bUseGrid = pMMDLayout->m_bUseGrid, m_sizeGrid = pMMDLayout->m_sizeGrid, RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem = new CMMDLayoutItem))
		{
			pItem->Copy(pMMDLayout->GetAt(nItem));
			if (Add(pItem) >= 0) continue;
		}
		break;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CMMDLayout::Compare(CONST CMMDLayout *pMMDLayout) CONST
{
	INT  nItem;
	INT  nItems;

	for (nItem = 0, nItems = (_ttoi(pMMDLayout->m_szName) == _ttoi(m_szName) && pMMDLayout->m_szTitle == m_szTitle && pMMDLayout->m_szCode == m_szCode && pMMDLayout->m_nCode.GetSize() == m_nCode.GetSize() && !memcmp(pMMDLayout->m_nCode.GetData(), m_nCode.GetData(), m_nCode.GetSize()) && pMMDLayout->m_sizeImage == m_sizeImage && pMMDLayout->m_nImageMargin[0] == m_nImageMargin[0] && pMMDLayout->m_nImageMargin[1] == m_nImageMargin[1] && pMMDLayout->m_nImageMargin[2] == m_nImageMargin[2] && pMMDLayout->m_nImageMargin[3] == m_nImageMargin[3] && pMMDLayout->m_nImageBkgnd == m_nImageBkgnd && pMMDLayout->m_nImageGrid == m_nImageGrid && pMMDLayout->m_bUseGrid == m_bUseGrid && pMMDLayout->m_sizeGrid == m_sizeGrid && pMMDLayout->GetSize() == GetSize()) ? (INT)GetSize() : -1; nItem < nItems; nItem++)
	{
		if (!pMMDLayout->GetAt(nItem)->Compare(GetAt(nItem))) break;
		continue;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CMMDLayout::Map(CByteArray &nInfo, BOOL bDirectory) CONST
{
	INT  nItem;
	INT  nItems;
	INT  cbData;
	DATA  sData;
	CByteArray  nCodeData[2];
	CByteArray  nItemsData[2];
	CCompressionTools  cCompressionTools;
	CMMDLayoutItem  *pItem;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbTitle = (m_szTitle.GetLength() + 1)*sizeof(TCHAR);
	sData.cbCode[0] = cCompressionTools.CompressText(m_szCode, nCodeData[0]);
	sData.cbCode[1] = cCompressionTools.Compress(m_nCode, nCodeData[1]);
	for (nItem = 0, nItems = (!bDirectory) ? (INT)GetSize() : 0, sData.sizeImage.cx = m_sizeImage.cx, sData.sizeImage.cy = m_sizeImage.cy, sData.nImageMargin[0] = m_nImageMargin[0], sData.nImageMargin[1] = m_nImageMargin[1], sData.nImageMargin[2] = m_nImageMargin[2], sData.nImageMargin[3] = m_nImageMargin[3], sData.nImageBkgnd = m_nImageBkgnd, sData.sizeGrid.cx = m_sizeGrid.cx, sData.sizeGrid.cy = m_sizeGrid.cy, sData.nImageGrid = m_nImageGrid, sData.bUseGrid = m_bUseGrid; nItem < nItems; nItem++)
	{
		if ((pItem = GetAt(nItem)) && pItem->Map(nItemsData[1]) && nItemsData[0].Append(nItemsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbTitle + (sData.cbItems = (INT)(nItemsData[0].GetSize()*sizeof(BYTE))) + sData.cbCode[0] + sData.cbCode[1])); nInfo.GetSize() == sData.cbSize && nItem == nItems; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szTitle, sData.cbTitle);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTitle), nCodeData[0].GetData(), sData.cbCode[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbCode[0]), nCodeData[1].GetData(), sData.cbCode[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbCode[1]), nItemsData[0].GetData(), sData.cbItems);
		return TRUE;
	}
	return FALSE;
}

BOOL CMMDLayout::Unmap(CONST CByteArray &nInfo, BOOL bDirectory)
{
	INT  cbData;
	INT  cbItem;
	INT  cbItems;
	DATA  sData;
	CByteArray  nCodeData[2];
	CByteArray  nItemsData[2];
	CCompressionTools  cCompressionTools;
	CMMDLayoutItem  *pItem;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbTitle + sData.cbCode[0] + sData.cbCode[1] + sData.cbItems && sData.cbName > 0 && sData.cbTitle > 0 && sData.cbCode[0] > 0 && sData.cbCode[1] >= 0 && sData.cbItems >= 0; )
	{
		for (CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szTitle.GetBufferSetLength(STRINGCHARS(sData.cbTitle)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbTitle)), nCodeData[0].SetSize(sData.cbCode[0]), nCodeData[1].SetSize(sData.cbCode[1]), nItemsData[0].SetSize(sData.cbItems), CopyMemory(nCodeData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbTitle), sData.cbCode[0]), CopyMemory(nCodeData[1].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbCode[0]), sData.cbCode[1]), CopyMemory(nItemsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbCode[1]), sData.cbItems), cCompressionTools.DecompressText(nCodeData[0], m_szCode), cCompressionTools.Decompress(nCodeData[1], m_nCode), m_sizeImage.cx = sData.sizeImage.cx, m_sizeImage.cy = sData.sizeImage.cy, m_nImageMargin[0] = sData.nImageMargin[0], m_nImageMargin[1] = sData.nImageMargin[1], m_nImageMargin[2] = sData.nImageMargin[2], m_nImageMargin[3] = sData.nImageMargin[3], m_nImageBkgnd = sData.nImageBkgnd, m_sizeGrid.cx = sData.sizeGrid.cx, m_sizeGrid.cy = sData.sizeGrid.cy, m_nImageGrid = sData.nImageGrid, m_bUseGrid = sData.bUseGrid, m_szName.ReleaseBuffer(), m_szTitle.ReleaseBuffer(), RemoveAll(), cbItem = cbItems = 0; cbItems < sData.cbItems && !bDirectory; cbItems += cbItem)
		{
			for (CopyMemory(&cbItem, nItemsData[0].GetData() + cbItems, sizeof(cbItem)), nItemsData[1].SetSize(max(min(cbItem, nItemsData[0].GetSize() - cbItems), 0)); nItemsData[1].GetSize() >= 0; )
			{
				CopyMemory(nItemsData[1].GetData(), nItemsData[0].GetData() + cbItems, nItemsData[1].GetSize());
				break;
			}
			if ((pItem = new CMMDLayoutItem))
			{
				if (pItem->Unmap(nItemsData[1]) && Add(pItem) >= 0) continue;
				delete pItem;
			}
			break;
		}
		return((cbItems == sData.cbItems) ? TRUE : bDirectory);
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CMMDLayouts

CMMDLayouts::CMMDLayouts() : CPtrArray()
{
	return;
}

CMMDLayouts::~CMMDLayouts()
{
	RemoveAll();
}

INT CMMDLayouts::Add(CMMDLayout *pMMDLayout)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pMMDLayout->GetName(), TRUE)) >= 0) InsertAt(nIndex, pMMDLayout, 1);
	return nIndex;
}

INT CMMDLayouts::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CMMDLayout *CMMDLayouts::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CMMDLayout *)CPtrArray::GetAt(nIndex) : (CMMDLayout *)NULL);
}

CMMDLayout *CMMDLayouts::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CMMDLayout *)CPtrArray::GetAt(nIndex) : (CMMDLayout *)NULL);
}

VOID CMMDLayouts::RemoveAll()
{
	INT  nLayout;
	INT  nLayouts;
	CMMDLayout  *pLayout;

	for (nLayout = 0, nLayouts = (INT)GetSize(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = GetAt(nLayout))) delete pLayout;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CMMDLayouts::Copy(CONST CMMDLayouts *pMMDLayouts)
{
	INT  nLayout;
	INT  nLayouts;
	CMMDLayout  *pLayout;

	for (nLayout = 0, nLayouts = (INT)pMMDLayouts->GetSize(), RemoveAll(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = new CMMDLayout) != (CMMDLayout *)NULL)
		{
			pLayout->Copy(pMMDLayouts->GetAt(nLayout));
			InsertAt(nLayout, pLayout, 1);
			continue;
		}
		break;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CMMDLayouts::Compare(CONST CMMDLayouts *pMMDLayouts) CONST
{
	INT  nLayout;
	INT  nLayouts;

	for (nLayout = 0, nLayouts = (pMMDLayouts->GetSize() == GetSize()) ? (INT)GetSize() : -1; nLayout < nLayouts; nLayout++)
	{
		if (!pMMDLayouts->GetAt(nLayout)->Compare(GetAt(nLayout))) break;
		continue;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CMMDLayouts::Map(CByteArray &nInfo, BOOL bDirectory) CONST
{
	INT  nLayout;
	INT  nLayouts;
	CByteArray  nLayoutsData;
	CMMDLayout  *pLayout;

	for (nLayout = 0, nLayouts = (INT)GetSize(), nInfo.RemoveAll(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = GetAt(nLayout)) && pLayout->Map(nLayoutsData, bDirectory) && nInfo.Append(nLayoutsData) >= 0) continue;
		break;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CMMDLayouts::Unmap(CONST CByteArray &nInfo, BOOL bDirectory)
{
	INT  cbLayout;
	INT  cbLayouts;
	CByteArray  nLayoutsData;
	CMMDLayout  *pLayout;

	for (cbLayouts = 0, RemoveAll(); cbLayouts < nInfo.GetSize(); cbLayouts += cbLayout)
	{
		for (CopyMemory(&cbLayout, nInfo.GetData() + cbLayouts, sizeof(cbLayout)), nLayoutsData.SetSize(max(min(cbLayout, nInfo.GetSize() - cbLayouts), 0)); nLayoutsData.GetSize() >= 0; )
		{
			CopyMemory(nLayoutsData.GetData(), nInfo.GetData() + cbLayouts, nLayoutsData.GetSize());
			break;
		}
		if ((pLayout = new CMMDLayout))
		{
			if (pLayout->Unmap(nLayoutsData, bDirectory) && Add(pLayout) >= 0) continue;
			delete pLayout;
		}
		break;
	}
	return((cbLayouts == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CMMDLayouts::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CMMDLayout  *pLayout;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pLayout = GetAt(nIndex[0]))) ? ((nIndex[1] = (_ttoi(pLayout->GetName()) <= _ttoi(pszName))) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pLayout = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && _ttoi(pLayout->GetName()) == _ttoi(pszName)) || (bInsert && (((pLayout = GetAt(max(nIndex[0] - 1, 0))) && _ttoi(pLayout->GetName()) != _ttoi(pszName) && (pLayout = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && _ttoi(pLayout->GetName()) != _ttoi(pszName)) || !GetSize()) && lstrlen(pszName) > 0)) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CPODLayoutExpression

CPODLayoutExpression::CPODLayoutExpression() : CObject()
{
	m_szFunction.Empty();
	m_szOperator.Empty();
	m_szParameter.Empty();
	m_nAttributes = 0;
	m_nNumberFlag = 0;
	m_fNumber = 0.0;
	m_nSample = 0;
}

VOID CPODLayoutExpression::SetFunction(LPCTSTR pszFunction)
{
	m_szFunction = pszFunction;
	m_szParameter.Empty();
	m_szOperator.Empty();
}

CString CPODLayoutExpression::GetFunction() CONST
{
	return m_szFunction;
}

BOOL CPODLayoutExpression::IsFunction() CONST
{
	return !m_szFunction.IsEmpty();
}

VOID CPODLayoutExpression::SetOperator(LPCTSTR pszOperator)
{
	m_szOperator = pszOperator;
	m_szParameter.Empty();
	m_szFunction.Empty();
}

CString CPODLayoutExpression::GetOperator() CONST
{
	return m_szOperator;
}

BOOL CPODLayoutExpression::IsOperator() CONST
{
	return !m_szOperator.IsEmpty();
}

VOID CPODLayoutExpression::SetParameter(LPCTSTR pszParameter)
{
	m_szParameter = pszParameter;
	m_szFunction.Empty();
	m_szOperator.Empty();
	m_nAttributes = 0;
	m_nSample = 0;
}
VOID CPODLayoutExpression::SetParameter(LPCTSTR pszParameter, INT nSample, ULONGLONG nAttributes)
{
	m_szParameter = pszParameter;
	m_szFunction.Empty();
	m_szOperator.Empty();
	m_nAttributes = nAttributes;
	m_nSample = nSample;
}

CString CPODLayoutExpression::GetParameter() CONST
{
	return m_szParameter;
}
BOOL CPODLayoutExpression::GetParameter(CString &szParameter, INT &nSample, ULONGLONG &nAttributes) CONST
{
	for (szParameter.Empty(), nAttributes = 0, nSample = 0; IsParameter(); )
	{
		szParameter = m_szParameter;
		nAttributes = m_nAttributes;
		nSample = m_nSample;
		return TRUE;
	}
	return FALSE;
}

BOOL CPODLayoutExpression::IsParameter() CONST
{
	return !m_szParameter.IsEmpty();
}

VOID CPODLayoutExpression::SetNumber(double fNumber, BOOL bPoint)
{
	m_szFunction.Empty();
	m_szOperator.Empty();
	m_szParameter.Empty();
	m_nNumberFlag = (floor(fNumber) != fNumber || !bPoint) ? TRUE : -1;
	m_fNumber = fNumber;
}

double CPODLayoutExpression::GetNumber() CONST
{
	return m_fNumber;
}

CString CPODLayoutExpression::GetNumberAsText() CONST
{
	CString  szNumber;
	CStringTools  cStringTools;

	if (floor(m_fNumber) == m_fNumber  &&  m_nNumberFlag > 0)
	{
		if (m_fNumber >= 0.0  &&  m_fNumber == (double)(ULONGLONG)m_fNumber)
		{
			szNumber = cStringTools.ConvertLongUIntToString((ULONGLONG)m_fNumber);
			return szNumber;
		}
		if (m_fNumber < 0.0  &&  m_fNumber == (double)(LONGLONG)m_fNumber)
		{
			szNumber = cStringTools.ConvertLongIntToString((LONGLONG)m_fNumber);
			return szNumber;
		}
	}
	if (floor(m_fNumber) == m_fNumber  &&  m_nNumberFlag < 0)
	{
		szNumber = cStringTools.ConvertFloatToString(m_fNumber);
		return szNumber.Left(szNumber.GetLength() - 1);
	}
	return cStringTools.ConvertFloatToString(m_fNumber);
}

BOOL CPODLayoutExpression::IsNumber() CONST
{
	return((m_nNumberFlag != 0) ? TRUE : FALSE);
}

VOID CPODLayoutExpression::SetComment(LPCTSTR pszComment)
{
	m_szComment = pszComment;
}

CString CPODLayoutExpression::GetComment() CONST
{
	return m_szComment;
}

BOOL CPODLayoutExpression::IsEmpty() CONST
{
	return((m_szFunction.IsEmpty() && m_szOperator.IsEmpty() && m_szParameter.IsEmpty() && !m_nNumberFlag) ? TRUE : FALSE);
}

VOID CPODLayoutExpression::Copy(CONST CPODLayoutExpression *pPODLayoutExpression)
{
	m_szFunction = pPODLayoutExpression->m_szFunction;
	m_szOperator = pPODLayoutExpression->m_szOperator;
	m_szParameter = pPODLayoutExpression->m_szParameter;
	m_szComment = pPODLayoutExpression->m_szComment;
	m_nAttributes = pPODLayoutExpression->m_nAttributes;
	m_nNumberFlag = pPODLayoutExpression->m_nNumberFlag;
	m_fNumber = pPODLayoutExpression->m_fNumber;
	m_nSample = pPODLayoutExpression->m_nSample;
}

BOOL CPODLayoutExpression::Compare(CONST CPODLayoutExpression *pPODLayoutExpression) CONST
{
	return((pPODLayoutExpression->m_szFunction == m_szFunction  &&  pPODLayoutExpression->m_szOperator == m_szOperator && ((pPODLayoutExpression->m_szParameter.IsEmpty() && m_szParameter.IsEmpty()) || (pPODLayoutExpression->m_szParameter == m_szParameter  &&  pPODLayoutExpression->m_nAttributes == m_nAttributes  &&  pPODLayoutExpression->m_nSample == m_nSample)) && ((!pPODLayoutExpression->m_nNumberFlag  &&  !m_nNumberFlag) || (pPODLayoutExpression->m_nNumberFlag == m_nNumberFlag  &&  pPODLayoutExpression->m_fNumber == m_fNumber)) && pPODLayoutExpression->m_szComment == m_szComment) ? TRUE : FALSE);
}

BOOL CPODLayoutExpression::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbFunction = (m_szFunction.GetLength() + 1)*sizeof(TCHAR);
	sData.cbOperator = (m_szOperator.GetLength() + 1)*sizeof(TCHAR);
	sData.cbParameter = (m_szParameter.GetLength() + 1)*sizeof(TCHAR);
	sData.cbComment = (m_szComment.GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbFunction + sData.cbOperator + sData.cbParameter + sData.cbComment)), sData.nAttributes = m_nAttributes, sData.nSample = m_nSample, sData.fNumber = m_fNumber, sData.nNumberFlag = m_nNumberFlag; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szFunction, sData.cbFunction);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbFunction), (LPCTSTR)m_szOperator, sData.cbOperator);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbOperator), (LPCTSTR)m_szParameter, sData.cbParameter);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbParameter), (LPCTSTR)m_szComment, sData.cbComment);
		return TRUE;
	}
	return FALSE;
}

BOOL CPODLayoutExpression::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbFunction + sData.cbOperator + sData.cbParameter + sData.cbComment && sData.cbFunction > 0 && sData.cbOperator > 0 && sData.cbParameter > 0 && sData.cbComment > 0; )
	{
		CopyMemory(m_szFunction.GetBufferSetLength(STRINGCHARS(sData.cbFunction)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbFunction));
		CopyMemory(m_szOperator.GetBufferSetLength(STRINGCHARS(sData.cbOperator)), nInfo.GetData() + (cbData = cbData + sData.cbFunction), STRINGBYTES(sData.cbOperator));
		CopyMemory(m_szParameter.GetBufferSetLength(STRINGCHARS(sData.cbParameter)), nInfo.GetData() + (cbData = cbData + sData.cbOperator), STRINGBYTES(sData.cbParameter));
		CopyMemory(m_szComment.GetBufferSetLength(STRINGCHARS(sData.cbComment)), nInfo.GetData() + (cbData = cbData + sData.cbParameter), STRINGBYTES(sData.cbComment));
		m_nAttributes = sData.nAttributes;
		m_nNumberFlag = sData.nNumberFlag;
		m_fNumber = sData.fNumber;
		m_nSample = sData.nSample;
		m_szFunction.ReleaseBuffer();
		m_szOperator.ReleaseBuffer();
		m_szParameter.ReleaseBuffer();
		m_szComment.ReleaseBuffer();
		return TRUE;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CPODLayout

CPODLayout::CPODLayout() : CPtrArray()
{
	m_nColumns = 0;
	m_nColors[0] = GetSysColor(COLOR_WINDOW);
	m_nColors[1] = GetSysColor(COLOR_WINDOW);
	m_nColors[2] = GetSysColor(COLOR_WINDOW);
	m_nStatus = PODLAYOUT_RECORDSTATUS_NONE;
}
CPODLayout::CPODLayout(LPCTSTR pszName) : CPtrArray()
{
	m_szName = pszName;
	m_nColumns = 0;
	m_nColors[0] = GetSysColor(COLOR_WINDOW);
	m_nColors[1] = GetSysColor(COLOR_WINDOW);
	m_nColors[2] = GetSysColor(COLOR_WINDOW);
	m_nStatus = PODLAYOUT_RECORDSTATUS_NONE;
}

CPODLayout::~CPODLayout()
{
	RemoveAll();
}

VOID CPODLayout::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CPODLayout::GetName() CONST
{
	return m_szName;
}

VOID CPODLayout::SetTitle(LPCTSTR pszTitle)
{
	m_szTitle = pszTitle;
}

CString CPODLayout::GetTitle() CONST
{
	return m_szTitle;
}

VOID CPODLayout::SetColumns(UINT nColumns)
{
	m_nColumns = nColumns;
}

UINT CPODLayout::GetColumns() CONST
{
	return m_nColumns;
}

VOID CPODLayout::SetParameters(CONST CStringArray &szParameters)
{
	for (m_szParameters.Copy(szParameters), m_nAttributes.RemoveAll(); m_szParameters.GetSize() > 0; )
	{
		m_nAttributes.SetSize(m_szParameters.GetSize());
		break;
	}
}
VOID CPODLayout::SetParameters(CONST CStringArray &szParameters, CONST CLongUIntArray &nAttributes)
{
	for (m_szParameters.Copy(szParameters), m_nAttributes.Copy(nAttributes); m_szParameters.GetSize() != m_nAttributes.GetSize(); )
	{
		m_nAttributes.SetSize(m_szParameters.GetSize());
		break;
	}
}

INT CPODLayout::GetParameters(CStringArray &szParameters) CONST
{
	szParameters.Copy(m_szParameters);
	return((INT)szParameters.GetSize());
}
INT CPODLayout::GetParameters(CStringArray &szParameters, CLongUIntArray &nAttributes) CONST
{
	for (szParameters.Copy(m_szParameters), nAttributes.Copy(m_nAttributes); szParameters.GetSize() != nAttributes.GetSize(); )
	{
		nAttributes.SetSize(szParameters.GetSize());
		break;
	}
	return((INT)szParameters.GetSize());
}

VOID CPODLayout::SetParametersColor(COLORREF nColor)
{
	m_nColors[0] = nColor;
}

COLORREF CPODLayout::GetParametersColor() CONST
{
	return m_nColors[0];
}

VOID CPODLayout::SetFunctions(CONST CStringArray &szFunctions)
{
	m_szFunctions.Copy(szFunctions);
}

INT CPODLayout::GetFunctions(CStringArray &szFunctions) CONST
{
	szFunctions.Copy(m_szFunctions);
	return((INT)szFunctions.GetSize());
}

VOID CPODLayout::SetFunctionsColor(COLORREF nColor)
{
	m_nColors[1] = nColor;
}

COLORREF CPODLayout::GetFunctionsColor() CONST
{
	return m_nColors[1];
}

VOID CPODLayout::SetExpressionColor(COLORREF nColor)
{
	m_nColors[2] = nColor;
}

COLORREF CPODLayout::GetExpressionColor() CONST
{
	return m_nColors[2];
}

VOID CPODLayout::SetXmlCode(LPCTSTR pszCode)
{
	m_szXmlCode = pszCode;
}

CString CPODLayout::GetXmlCode() CONST
{
	return m_szXmlCode;
}

VOID CPODLayout::SetFileName(LPCTSTR pszFileName)
{
	m_szFileName = pszFileName;
}

CString CPODLayout::GetFileName() CONST
{
	return m_szFileName;
}

VOID CPODLayout::SetStatus(INT nStatus)
{
	m_nStatus = nStatus;
}

INT CPODLayout::GetStatus() CONST
{
	return m_nStatus;
}

INT CPODLayout::Add(CPODLayoutExpression *pPODExpression)
{
	return((INT)CPtrArray::Add(pPODExpression));
}

INT CPODLayout::Find(LPCTSTR pszExpression, INT nIndex) CONST
{
	INT  nExpression;
	INT  nExpressions;
	CPODLayoutExpression  *pExpression;

	for (nExpression = max(nIndex, 0), nExpressions = (INT)GetSize(); nExpression < nExpressions; nExpression++)
	{
		if ((pExpression = GetAt(nExpression)) && ((pExpression->IsFunction() && pExpression->GetFunction() == pszExpression) || (pExpression->IsOperator() && pExpression->GetOperator() == pszExpression) || (pExpression->IsParameter() && pExpression->GetParameter() == pszExpression))) break;
		continue;
	}
	return((nExpression < nExpressions) ? nExpression : -1);
}

CPODLayoutExpression *CPODLayout::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CPODLayoutExpression *)CPtrArray::GetAt(nIndex) : (CPODLayoutExpression *)NULL);
}

CPODLayoutExpression *CPODLayout::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CPODLayoutExpression *)CPtrArray::GetAt(nIndex) : (CPODLayoutExpression *)NULL);
}

VOID CPODLayout::RemoveAll()
{
	INT  nExpression;
	INT  nExpressions;
	CPODLayoutExpression  *pExpression;

	for (nExpression = 0, nExpressions = (INT)GetSize(); nExpression < nExpressions; nExpression++)
	{
		if ((pExpression = GetAt(nExpression))) delete pExpression;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CPODLayout::Copy(CONST CPODLayout *pPODLayout)
{
	INT  nExpression;
	INT  nExpressions;
	CPODLayoutExpression  *pExpression;

	for (nExpression = 0, nExpressions = (INT)pPODLayout->GetSize(), m_szName = pPODLayout->m_szName, m_szTitle = pPODLayout->m_szTitle, m_nColumns = pPODLayout->m_nColumns, m_szFunctions.Copy(pPODLayout->m_szFunctions), m_szParameters.Copy(pPODLayout->m_szParameters), m_nAttributes.Copy(pPODLayout->m_nAttributes), m_nColors[0] = pPODLayout->m_nColors[0], m_nColors[1] = pPODLayout->m_nColors[1], m_nColors[2] = pPODLayout->m_nColors[2], m_szXmlCode = pPODLayout->m_szXmlCode, m_szFileName = pPODLayout->m_szFileName, m_nStatus = pPODLayout->m_nStatus, RemoveAll(); nExpression < nExpressions; nExpression++)
	{
		if ((pExpression = new CPODLayoutExpression))
		{
			pExpression->Copy(pPODLayout->GetAt(nExpression));
			if (Add(pExpression) >= 0) continue;
		}
		break;
	}
	return((nExpression == nExpressions) ? TRUE : FALSE);
}

BOOL CPODLayout::Compare(CONST CPODLayout *pPODLayout) CONST
{
	INT  nFunction;
	INT  nFunctions;
	INT  nParameter;
	INT  nParameters;
	INT  nExpression;
	INT  nExpressions;
	CStringTools  cStringTools;

	for (nFunction = 0, nFunctions = (((pPODLayout->m_szName == cStringTools.ConvertIntToPaddedString(_ttoi(pPODLayout->m_szName), pPODLayout->m_szName.GetLength()) && m_szName == cStringTools.ConvertIntToPaddedString(_ttoi(m_szName), m_szName.GetLength()) && _ttoi(pPODLayout->m_szName) == _ttoi(m_szName)) || (pPODLayout->m_szName != cStringTools.ConvertIntToPaddedString(_ttoi(pPODLayout->m_szName), pPODLayout->m_szName.GetLength()) && m_szName != cStringTools.ConvertIntToPaddedString(_ttoi(m_szName), m_szName.GetLength()) && pPODLayout->m_szName == m_szName)) && pPODLayout->m_szTitle == m_szTitle && pPODLayout->m_nColumns == m_nColumns && pPODLayout->m_nColors[0] == m_nColors[0] && pPODLayout->m_nColors[1] == m_nColors[1] && pPODLayout->m_nColors[2] == m_nColors[2] && pPODLayout->m_szXmlCode == m_szXmlCode && !pPODLayout->m_szFileName.CompareNoCase(m_szFileName) && pPODLayout->m_nStatus == m_nStatus && pPODLayout->m_szFunctions.GetSize() == m_szFunctions.GetSize()) ? (INT)m_szFunctions.GetSize() : -1; nFunction < nFunctions; nFunction++)
	{
		if (pPODLayout->m_szFunctions.GetAt(nFunction) != m_szFunctions.GetAt(nFunction)) break;
		continue;
	}
	for (nParameter = 0, nParameters = (pPODLayout->m_szParameters.GetSize() == m_szParameters.GetSize() && pPODLayout->m_nAttributes.GetSize() == m_nAttributes.GetSize() && m_szParameters.GetSize() == m_nAttributes.GetSize()) ? (INT)m_szParameters.GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if (pPODLayout->m_szParameters.GetAt(nParameter) != m_szParameters.GetAt(nParameter) || pPODLayout->m_nAttributes.GetAt(nParameter) != m_nAttributes.GetAt(nParameter)) break;
		continue;
	}
	for (nExpression = 0, nExpressions = (pPODLayout->GetSize() == GetSize()) ? (INT)GetSize() : -1; nExpression < nExpressions; nExpression++)
	{
		if (pPODLayout->GetAt(nExpression)->Compare(GetAt(nExpression))) continue;
		break;
	}
	return((nFunction == nFunctions  &&  nParameter == nParameters  &&  nExpression == nExpressions) ? TRUE : FALSE);
}

BOOL CPODLayout::Map(CByteArray &nInfo, BOOL bDirectory) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nFunction;
	INT  nFunctions;
	INT  nParameter;
	INT  nParameters;
	INT  nExpression;
	INT  nExpressions;
	CByteArray  nFunctionsData;
	CByteArray  nParametersData;
	CByteArray  nExpressionsData[2];
	CPODLayoutExpression  *pExpression;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbTitle = (m_szTitle.GetLength() + 1)*sizeof(TCHAR);
	for (nFunction = 0, nFunctions = (INT)m_szFunctions.GetSize(), sData.cbFunctions = 0; nFunction < nFunctions; nFunction++, sData.cbFunctions += cbData)
	{
		nFunctionsData.SetSize(sData.cbFunctions + (cbData = (m_szFunctions.GetAt(nFunction).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nFunctionsData.GetData() + sData.cbFunctions, (LPCTSTR)m_szFunctions.GetAt(nFunction), cbData);
	}
	for (nParameter = 0, nParameters = (INT)m_szParameters.GetSize(), sData.cbParameters[0] = 0; nParameter < nParameters; nParameter++, sData.cbParameters[0] += cbData)
	{
		nParametersData.SetSize(sData.cbParameters[0] + (cbData = (m_szParameters.GetAt(nParameter).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nParametersData.GetData() + sData.cbParameters[0], (LPCTSTR)m_szParameters.GetAt(nParameter), cbData);
	}
	for (nExpression = 0, nExpressions = (!bDirectory) ? (INT)GetSize() : 0, sData.nColumns = m_nColumns, sData.nColors[0] = m_nColors[0], sData.nColors[1] = m_nColors[1], sData.nColors[2] = m_nColors[2], sData.nStatus = m_nStatus, sData.cbExpressions = 0; nExpression < nExpressions; nExpression++)
	{
		if ((pExpression = GetAt(nExpression)) && pExpression->Map(nExpressionsData[1]) && nExpressionsData[0].Append(nExpressionsData[1]) >= 0) continue;
		break;
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbTitle + sData.cbFunctions + sData.cbParameters[0] + (sData.cbParameters[1] = (INT)(m_nAttributes.GetSize()*sizeof(ULONGLONG))) + (sData.cbExpressions = (INT)(nExpressionsData[0].GetSize()*sizeof(BYTE))))); nInfo.GetSize() == sData.cbSize && nExpression == nExpressions; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szTitle, sData.cbTitle);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTitle), nFunctionsData.GetData(), sData.cbFunctions);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbFunctions), nParametersData.GetData(), sData.cbParameters[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbParameters[0]), m_nAttributes.GetData(), sData.cbParameters[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbParameters[1]), nExpressionsData[0].GetData(), sData.cbExpressions);
		return TRUE;
	}
	return FALSE;
}

BOOL CPODLayout::Unmap(CONST CByteArray &nInfo, BOOL bDirectory)
{
	DATA  sData;
	INT  cbData;
	INT  cbFunction;
	INT  cbFunctions;
	INT  cbParameter;
	INT  cbParameters;
	INT  cbExpression;
	INT  cbExpressions;
	CByteArray  nFunctionsData;
	CByteArray  nParametersData;
	CByteArray  nExpressionsData[2];
	CPODLayoutExpression  *pExpression;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbTitle + sData.cbFunctions + sData.cbParameters[0] + sData.cbParameters[1] + sData.cbExpressions && sData.cbName > 0 && sData.cbTitle > 0 && sData.cbFunctions >= 0 && sData.cbParameters[0] >= 0 && sData.cbParameters[1] >= 0 && sData.cbExpressions >= 0; )
	{
		for (CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szTitle.GetBufferSetLength(STRINGCHARS(sData.cbTitle)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbTitle)), nFunctionsData.SetSize(sData.cbFunctions), nParametersData.SetSize(sData.cbParameters[0]), m_nAttributes.SetSize(sData.cbParameters[1] / sizeof(ULONGLONG)), nExpressionsData[0].SetSize(sData.cbExpressions), CopyMemory(nFunctionsData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbTitle), sData.cbFunctions), CopyMemory(nParametersData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbFunctions), sData.cbParameters[0]), CopyMemory(m_nAttributes.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbParameters[0]), sData.cbParameters[1]), CopyMemory(nExpressionsData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbParameters[1]), sData.cbExpressions), m_nColumns = sData.nColumns, m_nColors[0] = sData.nColors[0], m_nColors[1] = sData.nColors[1], m_nColors[2] = sData.nColors[2], m_nStatus = sData.nStatus, m_szName.ReleaseBuffer(), m_szTitle.ReleaseBuffer(), RemoveAll(), cbExpression = cbExpressions = 0; cbExpressions < sData.cbExpressions && !bDirectory; cbExpressions += cbExpression)
		{
			for (CopyMemory(&cbExpression, nExpressionsData[0].GetData() + cbExpressions, sizeof(cbExpression)), nExpressionsData[1].SetSize(max(min(cbExpression, nExpressionsData[0].GetSize() - cbExpressions), 0)); nExpressionsData[1].GetSize() >= 0; )
			{
				CopyMemory(nExpressionsData[1].GetData(), nExpressionsData[0].GetData() + cbExpressions, nExpressionsData[1].GetSize());
				break;
			}
			if ((pExpression = new CPODLayoutExpression))
			{
				if (pExpression->Unmap(nExpressionsData[1]) && Add(pExpression) >= 0) continue;
				delete pExpression;
			}
			break;
		}
		for (m_szFunctions.RemoveAll(), cbFunction = cbFunctions = 0; cbFunctions < sData.cbFunctions; cbFunctions += (cbFunction = (m_szFunctions.GetAt(m_szFunctions.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
		{
			m_szFunctions.Add((LPCTSTR)(nFunctionsData.GetData() + cbFunctions));
			continue;
		}
		for (m_szParameters.RemoveAll(), cbParameter = cbParameters = 0; cbParameters < sData.cbParameters[0]; cbParameters += (cbParameter = (m_szParameters.GetAt(m_szParameters.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
		{
			m_szParameters.Add((LPCTSTR)(nParametersData.GetData() + cbParameters));
			continue;
		}
		return((cbExpressions == sData.cbExpressions  &&  cbFunctions == sData.cbFunctions  &&  cbParameters == sData.cbParameters[0]) ? TRUE : bDirectory);
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CPODLayouts

CPODLayouts::CPODLayouts() : CPtrArray()
{
	return;
}

CPODLayouts::~CPODLayouts()
{
	RemoveAll();
}

INT CPODLayouts::Add(CPODLayout *pPODLayout)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pPODLayout->GetName(), TRUE)) >= 0) InsertAt(nIndex, pPODLayout, 1);
	return nIndex;
}

INT CPODLayouts::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CPODLayout *CPODLayouts::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CPODLayout *)CPtrArray::GetAt(nIndex) : (CPODLayout *)NULL);
}

CPODLayout *CPODLayouts::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CPODLayout *)CPtrArray::GetAt(nIndex) : (CPODLayout *)NULL);
}

VOID CPODLayouts::RemoveAll()
{
	INT  nLayout;
	INT  nLayouts;
	CPODLayout  *pLayout;

	for (nLayout = 0, nLayouts = (INT)GetSize(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = GetAt(nLayout))) delete pLayout;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CPODLayouts::Copy(CONST CPODLayouts *pPODLayouts)
{
	INT  nLayout;
	INT  nLayouts;
	CPODLayout  *pLayout;

	for (nLayout = 0, nLayouts = (INT)pPODLayouts->GetSize(), RemoveAll(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = new CPODLayout) != (CPODLayout *)NULL)
		{
			pLayout->Copy(pPODLayouts->GetAt(nLayout));
			InsertAt(nLayout, pLayout, 1);
			continue;
		}
		break;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CPODLayouts::Compare(CONST CPODLayouts *pPODLayouts) CONST
{
	INT  nLayout;
	INT  nLayouts;

	for (nLayout = 0, nLayouts = (pPODLayouts->GetSize() == GetSize()) ? (INT)GetSize() : -1; nLayout < nLayouts; nLayout++)
	{
		if (!pPODLayouts->GetAt(nLayout)->Compare(GetAt(nLayout))) break;
		continue;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CPODLayouts::Map(CByteArray &nInfo, BOOL bDirectory) CONST
{
	INT  nLayout;
	INT  nLayouts;
	CByteArray  nLayoutsData;
	CPODLayout  *pLayout;

	for (nLayout = 0, nLayouts = (INT)GetSize(), nInfo.RemoveAll(); nLayout < nLayouts; nLayout++)
	{
		if ((pLayout = GetAt(nLayout)) && pLayout->Map(nLayoutsData, bDirectory) && nInfo.Append(nLayoutsData) >= 0) continue;
		break;
	}
	return((nLayout == nLayouts) ? TRUE : FALSE);
}

BOOL CPODLayouts::Unmap(CONST CByteArray &nInfo, BOOL bDirectory)
{
	INT  cbLayout;
	INT  cbLayouts;
	CByteArray  nLayoutsData;
	CPODLayout  *pLayout;

	for (cbLayouts = 0, RemoveAll(); cbLayouts < nInfo.GetSize(); cbLayouts += cbLayout)
	{
		for (CopyMemory(&cbLayout, nInfo.GetData() + cbLayouts, sizeof(cbLayout)), nLayoutsData.SetSize(max(min(cbLayout, nInfo.GetSize() - cbLayouts), 0)); nLayoutsData.GetSize() >= 0; )
		{
			CopyMemory(nLayoutsData.GetData(), nInfo.GetData() + cbLayouts, nLayoutsData.GetSize());
			break;
		}
		if ((pLayout = new CPODLayout))
		{
			if (pLayout->Unmap(nLayoutsData, bDirectory) && Add(pLayout) >= 0) continue;
			delete pLayout;
		}
		break;
	}
	return((cbLayouts == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CPODLayouts::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CPODLayout  *pLayout;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pLayout = GetAt(nIndex[0]))) ? ((nIndex[1] = (pLayout->GetName() <= pszName)) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pLayout = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && pLayout->GetName() == pszName) || (bInsert && (((pLayout = GetAt(max(nIndex[0] - 1, 0))) && pLayout->GetName() != pszName && (pLayout = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && pLayout->GetName() != pszName) || !GetSize()) && lstrlen(pszName) > 0)) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CAutomationScript

CAutomationScript::CAutomationScript() : CObject()
{
	m_nType = AUTOMATIONSCRIPT_TYPE_NONE;
}

VOID CAutomationScript::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CAutomationScript::GetName() CONST
{
	return m_szName;
}

VOID CAutomationScript::SetTitle(LPCTSTR pszTitle)
{
	m_szTitle = pszTitle;
}

CString CAutomationScript::GetTitle() CONST
{
	return m_szTitle;
}

VOID CAutomationScript::SetType(UINT nType)
{
	m_nType = nType;
}

UINT CAutomationScript::GetType() CONST
{
	return m_nType;
}

VOID CAutomationScript::SetSourceCode(LPCTSTR pszCode)
{
	m_szCode = pszCode;
}
VOID CAutomationScript::SetSourceCode(CONST CByteArray &nCode)
{
	m_nCode.Copy(nCode);
}

CString CAutomationScript::GetSourceCode() CONST
{
	return m_szCode;
}
INT CAutomationScript::GetSourceCode(CByteArray &nCode) CONST
{
	nCode.Copy(m_nCode);
	return((INT)nCode.GetSize());
}

VOID CAutomationScript::SetExecutableFileName(LPCTSTR pszFileName)
{
	m_szFileName[0] = pszFileName;
}

CString CAutomationScript::GetExecutableFileName() CONST
{
	return m_szFileName[0];
}

VOID CAutomationScript::SetInputFileName(LPCTSTR pszFileName)
{
	m_szFileName[1] = pszFileName;
}

CString CAutomationScript::GetInputFileName() CONST
{
	return m_szFileName[1];
}

VOID CAutomationScript::SetOutputFileName(LPCTSTR pszFileName)
{
	m_szFileName[2] = pszFileName;
}

CString CAutomationScript::GetOutputFileName() CONST
{
	return m_szFileName[2];
}

BOOL CAutomationScript::Copy(CONST CAutomationScript *pScript)
{
	m_szName = pScript->m_szName;
	m_szTitle = pScript->m_szTitle;
	m_szCode = pScript->m_szCode;
	m_nType = pScript->m_nType;
	m_nCode.Copy(pScript->m_nCode);
	m_szFileName[0] = pScript->m_szFileName[0];
	m_szFileName[1] = pScript->m_szFileName[1];
	m_szFileName[2] = pScript->m_szFileName[2];
	return TRUE;
}

BOOL CAutomationScript::Compare(CONST CAutomationScript *pScript) CONST
{
	return((pScript->m_szName == m_szName  &&  pScript->m_szTitle == m_szTitle  &&  pScript->m_szCode == m_szCode  &&  pScript->m_nCode.GetSize() == m_nCode.GetSize() && !memcmp(pScript->m_nCode.GetData(), m_nCode.GetData(), m_nCode.GetSize()) && pScript->m_nType == m_nType  &&  !pScript->m_szFileName[0].CompareNoCase(m_szFileName[0]) && !pScript->m_szFileName[1].CompareNoCase(m_szFileName[1]) && !pScript->m_szFileName[2].CompareNoCase(m_szFileName[2])) ? TRUE : FALSE);
}

BOOL CAutomationScript::Map(CByteArray &nInfo, BOOL bDirectory) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbTitle = (m_szTitle.GetLength() + 1)*sizeof(TCHAR);
	sData.cbCode[0] = (m_szCode.GetLength() + 1)*sizeof(TCHAR);
	sData.cbCode[1] = (INT)(m_nCode.GetSize()*sizeof(BYTE));
	sData.cbFileName[0] = (m_szFileName[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbFileName[1] = (m_szFileName[1].GetLength() + 1)*sizeof(TCHAR);
	sData.cbFileName[2] = (m_szFileName[2].GetLength() + 1)*sizeof(TCHAR);
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbTitle + sData.cbFileName[0] + sData.cbFileName[1] + sData.cbFileName[2] + sData.cbCode[0] + sData.cbCode[1])), sData.nType = m_nType; nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szTitle, sData.cbTitle);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbTitle), (LPCTSTR)m_szCode, sData.cbCode[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbCode[0]), (LPCTSTR)m_szFileName[0], sData.cbFileName[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbFileName[0]), (LPCTSTR)m_szFileName[1], sData.cbFileName[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbFileName[1]), (LPCTSTR)m_szFileName[2], sData.cbFileName[2]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbFileName[2]), m_nCode.GetData(), sData.cbCode[1]);
		return TRUE;
	}
	return FALSE;
}

BOOL CAutomationScript::Unmap(CONST CByteArray &nInfo, BOOL bDirectory)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbTitle + sData.cbCode[0] + sData.cbCode[1] + sData.cbFileName[0] + sData.cbFileName[1] + sData.cbFileName[2] && sData.cbName > 0 && sData.cbTitle > 0 && sData.cbCode[0] > 0 && sData.cbCode[1] >= 0 && sData.cbFileName[0] > 0 && sData.cbFileName[1] > 0 && sData.cbFileName[2] > 0; )
	{
		for (m_nCode.SetSize(sData.cbCode[1]), CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szTitle.GetBufferSetLength(STRINGCHARS(sData.cbTitle)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbTitle)), CopyMemory(m_szCode.GetBufferSetLength(STRINGCHARS(sData.cbCode[0])), nInfo.GetData() + (cbData = cbData + sData.cbTitle), STRINGBYTES(sData.cbCode[0])), CopyMemory(m_szFileName[0].GetBufferSetLength(STRINGCHARS(sData.cbFileName[0])), nInfo.GetData() + (cbData = cbData + sData.cbCode[0]), STRINGBYTES(sData.cbFileName[0])), CopyMemory(m_szFileName[1].GetBufferSetLength(STRINGCHARS(sData.cbFileName[1])), nInfo.GetData() + (cbData = cbData + sData.cbFileName[0]), STRINGBYTES(sData.cbFileName[1])), CopyMemory(m_szFileName[2].GetBufferSetLength(STRINGCHARS(sData.cbFileName[2])), nInfo.GetData() + (cbData = cbData + sData.cbFileName[1]), STRINGBYTES(sData.cbFileName[2])), m_nType = sData.nType, m_szName.ReleaseBuffer(), m_szTitle.ReleaseBuffer(), m_szCode.ReleaseBuffer(), m_szFileName[0].ReleaseBuffer(), m_szFileName[1].ReleaseBuffer(), m_szFileName[2].ReleaseBuffer(); m_nCode.GetSize() == sData.cbCode[1]; )
		{
			CopyMemory(m_nCode.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbFileName[2]), sData.cbCode[1]);
			return TRUE;
		}
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CAutomationScripts

CAutomationScripts::CAutomationScripts() : CPtrArray()
{
	return;
}

CAutomationScripts::~CAutomationScripts()
{
	RemoveAll();
}

INT CAutomationScripts::Add(CAutomationScript *pScript)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pScript->GetName(), TRUE)) >= 0) InsertAt(nIndex, pScript, 1);
	return nIndex;
}

INT CAutomationScripts::Find(LPCTSTR pszName) CONST
{
	return FindIndex(pszName);
}

CAutomationScript *CAutomationScripts::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CAutomationScript *)CPtrArray::GetAt(nIndex) : (CAutomationScript *)NULL);
}

CAutomationScript *CAutomationScripts::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CAutomationScript *)CPtrArray::GetAt(nIndex) : (CAutomationScript *)NULL);
}

VOID CAutomationScripts::RemoveAll()
{
	INT  nScript;
	INT  nScripts;
	CAutomationScript  *pScript;

	for (nScript = 0, nScripts = (INT)GetSize(); nScript < nScripts; nScript++)
	{
		if ((pScript = GetAt(nScript))) delete pScript;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CAutomationScripts::Copy(CONST CAutomationScripts *pScripts)
{
	INT  nScript;
	INT  nScripts;
	CAutomationScript  *pScript;

	for (nScript = 0, nScripts = (INT)pScripts->GetSize(), RemoveAll(); nScript < nScripts; nScript++)
	{
		if ((pScript = new CAutomationScript) != (CAutomationScript *)NULL)
		{
			pScript->Copy(pScripts->GetAt(nScript));
			InsertAt(nScript, pScript, 1);
			continue;
		}
		break;
	}
	return((nScript == nScripts) ? TRUE : FALSE);
}

BOOL CAutomationScripts::Compare(CONST CAutomationScripts *pScripts) CONST
{
	INT  nScript;
	INT  nScripts;

	for (nScript = 0, nScripts = (pScripts->GetSize() == GetSize()) ? (INT)GetSize() : -1; nScript < nScripts; nScript++)
	{
		if (!pScripts->GetAt(nScript)->Compare(GetAt(nScript))) break;
		continue;
	}
	return((nScript == nScripts) ? TRUE : FALSE);
}

BOOL CAutomationScripts::Map(CByteArray &nInfo, BOOL bDirectory) CONST
{
	INT  nScript;
	INT  nScripts;
	CByteArray  nScriptsData;
	CAutomationScript  *pScript;

	for (nScript = 0, nScripts = (INT)GetSize(), nInfo.RemoveAll(); nScript < nScripts; nScript++)
	{
		if ((pScript = GetAt(nScript)) && pScript->Map(nScriptsData, bDirectory) && nInfo.Append(nScriptsData) >= 0) continue;
		break;
	}
	return((nScript == nScripts) ? TRUE : FALSE);
}

BOOL CAutomationScripts::Unmap(CONST CByteArray &nInfo, BOOL bDirectory)
{
	INT  cbScript;
	INT  cbScripts;
	CByteArray  nScriptsData;
	CAutomationScript  *pScript;

	for (cbScripts = 0, RemoveAll(); cbScripts < nInfo.GetSize(); cbScripts += cbScript)
	{
		for (CopyMemory(&cbScript, nInfo.GetData() + cbScripts, sizeof(cbScript)), nScriptsData.SetSize(max(min(cbScript, nInfo.GetSize() - cbScripts), 0)); nScriptsData.GetSize() >= 0; )
		{
			CopyMemory(nScriptsData.GetData(), nInfo.GetData() + cbScripts, nScriptsData.GetSize());
			break;
		}
		if ((pScript = new CAutomationScript))
		{
			if (pScript->Unmap(nScriptsData, bDirectory) && Add(pScript) >= 0) continue;
			delete pScript;
		}
		break;
	}
	return((cbScripts == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CAutomationScripts::FindIndex(LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CAutomationScript  *pScript;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pScript = GetAt(nIndex[0]))) ? ((nIndex[1] = (_ttoi(pScript->GetName()) <= _ttoi(pszName))) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return(((!bInsert && (pScript = GetAt((nIndex[0] = max(nIndex[0] - 1, 0)))) && _ttoi(pScript->GetName()) == _ttoi(pszName)) || (bInsert && (((pScript = GetAt(max(nIndex[0] - 1, 0))) && _ttoi(pScript->GetName()) != _ttoi(pszName) && (pScript = GetAt(min(nIndex[0], (INT)GetUpperBound()))) && _ttoi(pScript->GetName()) != _ttoi(pszName)) || !GetSize()) && lstrlen(pszName) > 0)) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseLogInfo

CDatabaseLogInfo::CDatabaseLogInfo() : CObject()
{
	m_nComponent = 0;
}

VOID CDatabaseLogInfo::SetLog(LPCTSTR pszName, LPCTSTR pszText, LPCTSTR pszUser, ULONGLONG nComponent, CONST CTimeKey &tTime, CONST CByteArray &nData)
{
	m_szName = pszName;
	m_szText = pszText;
	m_szUser = pszUser;
	m_nComponent = nComponent;
	m_tTime = tTime.GetTime();
	m_nData.Copy(nData);
}

BOOL CDatabaseLogInfo::GetLog(CString &szName, CString &szText, CString &szUser, ULONGLONG &nComponent, CTimeKey &tTime, CByteArray &nData) CONST
{
	if ((nComponent = m_nComponent) != 0)
	{
		szName = m_szName;
		szText = m_szText;
		szUser = m_szUser;
		tTime = m_tTime;
		nData.Copy(m_nData);
		return TRUE;
	}
	return FALSE;
}

VOID CDatabaseLogInfo::SetLogName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseLogInfo::GetLogName() CONST
{
	return m_szName;
}

VOID CDatabaseLogInfo::SetLogText(LPCTSTR pszText)
{
	m_szText = pszText;
}

CString CDatabaseLogInfo::GetLogText() CONST
{
	return m_szText;
}

VOID CDatabaseLogInfo::SetLogUser(LPCTSTR pszUser)
{
	m_szUser = pszUser;
}

CString CDatabaseLogInfo::GetLogUser() CONST
{
	return m_szUser;
}

VOID CDatabaseLogInfo::SetLogType(ULONGLONG nComponent)
{
	m_nComponent = nComponent;
}

ULONGLONG CDatabaseLogInfo::GetLogType() CONST
{
	return m_nComponent;
}

VOID CDatabaseLogInfo::SetLogTime(CONST CTimeKey &tTime)
{
	m_tTime = tTime;
}

CTimeKey CDatabaseLogInfo::GetLogTime() CONST
{
	return m_tTime;
}

VOID CDatabaseLogInfo::SetLogData(CONST CByteArray &nData)
{
	m_nData.Copy(nData);
}

INT CDatabaseLogInfo::GetLogData(CByteArray &nData) CONST
{
	nData.Copy(m_nData);
	return((INT)nData.GetSize());
}

VOID CDatabaseLogInfo::Reset()
{
	m_szName.Empty();
	m_szText.Empty();
	m_szUser.Empty();
	m_nComponent = 0;
	m_tTime = 0;
	m_nData.RemoveAll();
}

VOID CDatabaseLogInfo::Copy(CONST CDatabaseLogInfo *pLogInfo)
{
	m_szName = pLogInfo->m_szName;
	m_szText = pLogInfo->m_szText;
	m_szUser = pLogInfo->m_szUser;
	m_nComponent = pLogInfo->m_nComponent;
	m_tTime = pLogInfo->m_tTime.GetTime();
	m_nData.Copy(pLogInfo->m_nData);
}

BOOL CDatabaseLogInfo::Compare(CONST CDatabaseLogInfo *pLogInfo) CONST
{
	return((pLogInfo->m_szName == m_szName  &&  pLogInfo->m_szText == m_szText  &&  pLogInfo->m_szUser == m_szUser  &&  pLogInfo->m_nComponent == m_nComponent  &&  pLogInfo->m_tTime == m_tTime  &&  pLogInfo->m_nData.GetSize() == m_nData.GetSize() && !memcmp(pLogInfo->m_nData.GetData(), m_nData.GetData(), m_nData.GetSize())) ? TRUE : FALSE);
}

BOOL CDatabaseLogInfo::Map(CByteArray &nInfo) CONST
{
	INT  cbData;
	DATA  sData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbText = (m_szText.GetLength() + 1)*sizeof(TCHAR);
	sData.cbUser = (m_szUser.GetLength() + 1)*sizeof(TCHAR);
	sData.cbData = (INT)(m_nData.GetSize()*sizeof(BYTE));
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbText + sData.cbUser + sData.cbData)), sData.nComponent = m_nComponent, sData.tTime = m_tTime.GetTime(); nInfo.GetSize() == sData.cbSize; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szText, sData.cbText);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbText), (LPCTSTR)m_szUser, sData.cbUser);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbUser), m_nData.GetData(), sData.cbData);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseLogInfo::Unmap(CONST CByteArray &nInfo)
{
	INT  cbData;
	DATA  sData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbText + sData.cbUser + sData.cbData && sData.cbName > 0 && sData.cbText > 0 && sData.cbUser > 0 && sData.cbData >= 0; )
	{
		for (m_nData.SetSize(sData.cbData), CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName)), CopyMemory(m_szText.GetBufferSetLength(STRINGCHARS(sData.cbText)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbText)), CopyMemory(m_szUser.GetBufferSetLength(STRINGCHARS(sData.cbUser)), nInfo.GetData() + (cbData = cbData + sData.cbText), STRINGBYTES(sData.cbUser)), m_nComponent = sData.nComponent, m_tTime = sData.tTime, m_szName.ReleaseBuffer(), m_szText.ReleaseBuffer(), m_szUser.ReleaseBuffer(); m_nData.GetSize() == sData.cbData; )
		{
			CopyMemory(m_nData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbUser), sData.cbData);
			return TRUE;
		}
		break;
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseLogs

CDatabaseLogs::CDatabaseLogs() : CPtrArray()
{
	return;
}

CDatabaseLogs::~CDatabaseLogs()
{
	RemoveAll();
}

INT CDatabaseLogs::Add(CDatabaseLogInfo *pLogInfo)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pLogInfo->GetLogTime(), TRUE)) >= 0) InsertAt(nIndex, pLogInfo, 1);
	return nIndex;
}

INT CDatabaseLogs::Find(CONST CDatabaseLogInfo *pLogInfo) CONST
{
	return FindIndex(pLogInfo->GetLogTime());
}

CDatabaseLogInfo *CDatabaseLogs::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseLogInfo *)CPtrArray::GetAt(nIndex) : (CDatabaseLogInfo *)NULL);
}

CDatabaseLogInfo *CDatabaseLogs::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseLogInfo *)CPtrArray::GetAt(nIndex) : (CDatabaseLogInfo *)NULL);
}

VOID CDatabaseLogs::RemoveAll()
{
	INT  nLog;
	INT  nLogs;
	CDatabaseLogInfo  *pLogInfo;

	for (nLog = 0, nLogs = (INT)GetSize(); nLog < nLogs; nLog++)
	{
		if ((pLogInfo = GetAt(nLog))) delete pLogInfo;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseLogs::Copy(CONST CDatabaseLogs *pLogs)
{
	INT  nLog;
	INT  nLogs;
	CDatabaseLogInfo  *pLogInfo;

	for (nLog = 0, nLogs = (INT)pLogs->GetSize(), RemoveAll(); nLog < nLogs; nLog++)
	{
		if ((pLogInfo = new CDatabaseLogInfo))
		{
			pLogInfo->Copy(pLogs->GetAt(nLog));
			InsertAt(nLog, pLogInfo, 1);
			continue;
		}
		break;
	}
	return((nLog == nLogs) ? TRUE : FALSE);
}

BOOL CDatabaseLogs::Compare(CONST CDatabaseLogs *pLogs) CONST
{
	INT  nLog;
	INT  nLogs;

	for (nLog = 0, nLogs = (pLogs->GetSize() == GetSize()) ? (INT)GetSize() : -1; nLog < nLogs; nLog++)
	{
		if (!pLogs->GetAt(nLog)->Compare(GetAt(nLog))) break;
		continue;
	}
	return((nLog == nLogs) ? TRUE : FALSE);
}

BOOL CDatabaseLogs::Map(CByteArray &nInfo) CONST
{
	INT  nLog;
	INT  nLogs;
	CByteArray  nLogsData;
	CDatabaseLogInfo  *pLogInfo;

	for (nLog = 0, nLogs = (INT)GetSize(), nInfo.RemoveAll(); nLog < nLogs; nLog++)
	{
		if ((pLogInfo = GetAt(nLog)) && pLogInfo->Map(nLogsData) && nInfo.Append(nLogsData) >= 0) continue;
		break;
	}
	return((nLog == nLogs) ? TRUE : FALSE);
}

BOOL CDatabaseLogs::Unmap(CONST CByteArray &nInfo)
{
	INT  cbLog;
	INT  cbLogs;
	CByteArray  nLogsData;
	CDatabaseLogInfo  *pLogInfo;

	for (cbLogs = 0, RemoveAll(); cbLogs < nInfo.GetSize(); cbLogs += cbLog)
	{
		for (CopyMemory(&cbLog, nInfo.GetData() + cbLogs, sizeof(cbLog)), nLogsData.SetSize(max(min(cbLog, nInfo.GetSize() - cbLogs), 0)); nLogsData.GetSize() >= 0; )
		{
			CopyMemory(nLogsData.GetData(), nInfo.GetData() + cbLogs, nLogsData.GetSize());
			break;
		}
		if ((pLogInfo = new CDatabaseLogInfo))
		{
			if (pLogInfo->Unmap(nLogsData) && Add(pLogInfo) >= 0) continue;
			delete pLogInfo;
		}
		break;
	}
	return((cbLogs == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseLogs::FindIndex(CONST CTimeKey &tTime, BOOL bInsert) CONST
{
	INT  nIndex[2];
	INT  nMinIndex;
	INT  nMaxIndex;
	CDatabaseLogInfo  *pLogInfo;

	for (nMinIndex = 0, nMaxIndex = (INT)GetSize(), nIndex[0] = (nMinIndex + nMaxIndex) / 2; nMinIndex != nMaxIndex; nIndex[0] = (nMinIndex + nMaxIndex) / 2)
	{
		nMinIndex = ((pLogInfo = GetAt(nIndex[0]))) ? ((nIndex[1] = ((!bInsert  &&  pLogInfo->GetLogTime() < tTime) || (bInsert  &&  pLogInfo->GetLogTime() <= tTime))) ? (nIndex[0] + 1) : nMinIndex) : (nIndex[0] = -1);
		nMaxIndex = (nIndex[0] < 0 || !nIndex[1]) ? nIndex[0] : nMaxIndex;
	}
	return((((!bInsert  &&  nIndex[0] >= 0 && nIndex[0] < GetSize()) || (bInsert  &&  nIndex[0] >= 0 && nIndex[0] <= GetSize())) && tTime > 0) ? nIndex[0] : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseTableView

CDatabaseTableView::CDatabaseTableView(ULONGLONG nComponent) : CTableView()
{
	CFontTools  cTitleFont(&m_lfTable[0]);
	CFontTools  cItemsFont(&m_lfTable[1]);

	m_nComponent = nComponent;
	m_lfTable[0].lfWeight = FW_BOLD;
	m_lfTable[1].lfWeight = FW_NORMAL;
	m_nTableColors[0] = GetSysColor(COLOR_WINDOWTEXT);
	m_nTableColors[1] = GetSysColor(COLOR_3DFACE);
	m_nTableFontColors[0] = GetSysColor(COLOR_WINDOW);
	m_nTableFontColors[1] = GetSysColor(COLOR_WINDOWTEXT);
	m_nDatabaseTMPacketIndex = -1;
	m_nDatabaseTCFunctionIndex = -1;
	m_nDatabaseTCSequenceIndex = -1;
	m_nDatabaseOBProcessorIndex = -1;
	m_nDatabaseTMParameterIndex = -1;
	m_nDatabaseTCParameterIndex = -1;
	m_nANDLayoutIndex = -1;
	m_nGRDLayoutIndex = -1;
	m_nPODLayoutIndex = -1;
}

VOID CDatabaseTableView::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseTableView::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseTableView::SetComponent(ULONGLONG nComponent)
{
	m_nComponent = nComponent;
}

ULONGLONG CDatabaseTableView::GetComponent() CONST
{
	return m_nComponent;
}

INT CDatabaseTableView::ExtractTextItems(LPCTSTR pszText, CStringArray &szItems) CONST
{
	INT  nPos;
	CString  szText;

	for (szText = pszText, szItems.RemoveAll(); (nPos = szText.Find(TAB)) >= 0; szText = szText.Mid(nPos + 1))
	{
		szItems.Add(ConvertTabbedTextItem(szText.Left(nPos), FALSE));
		continue;
	}
	if (!szItems.GetSize() || !szText.IsEmpty()) szItems.Add(ConvertTabbedTextItem(szText, FALSE));
	return((INT)szItems.GetSize());
}

CString CDatabaseTableView::ConvertTabbedTextItem(LPCTSTR pszText, BOOL bConvert) CONST
{
	INT  nPos;
	CString  szText;

	for (szText = pszText; (nPos = szText.Find((bConvert) ? TAB : FF)) >= 0; )
	{
		szText.SetAt(nPos, (bConvert) ? FF : TAB);
		continue;
	}
	return szText;
}

BEGIN_MESSAGE_MAP(CDatabaseTableView, CTableView)
	//{{AFX_MSG_MAP(CDatabaseTableView)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CDatabaseTableView message handlers


/////////////////////////////////////////////////////////////////////////////
// CDatabaseProfileInfo

CDatabaseProfileInfo::CDatabaseProfileInfo() : CDatabaseVersions()
{
	CTimeKey  tTime;

	m_nType = 0;
	m_tTime[0] = tTime;
	m_tTime[1] = tTime;
	m_tValidity[0] = 0;
	m_tValidity[1] = 0;
	m_nLoggingRetention = 0;
	m_tLoggingRetention = 0;
	m_fLoggingRetention = LOGFILE_DEFAULT_SIZE / 16;
	m_nLoggingPolicy = LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_RETENTIONBYSIZE;
}

VOID CDatabaseProfileInfo::SetName(LPCTSTR pszName)
{
	m_szName = pszName;
}

CString CDatabaseProfileInfo::GetName() CONST
{
	return m_szName;
}

VOID CDatabaseProfileInfo::SetType(UINT nType)
{
	m_nType = nType;
}

UINT CDatabaseProfileInfo::GetType() CONST
{
	return m_nType;
}

VOID CDatabaseProfileInfo::SetServer(LPCTSTR pszServer)
{
	m_szServer = pszServer;
}

CString CDatabaseProfileInfo::GetServer() CONST
{
	return m_szServer;
}

VOID CDatabaseProfileInfo::SetSpacecraft(LPCTSTR pszSpacecraft)
{
	m_szSpacecraft = pszSpacecraft;
}

CString CDatabaseProfileInfo::GetSpacecraft() CONST
{
	return m_szSpacecraft;
}

VOID CDatabaseProfileInfo::SetImplementationStandard(LPCTSTR pszStandard)
{
	m_szStandard = pszStandard;
}

CString CDatabaseProfileInfo::GetImplementationStandard() CONST
{
	return((m_szStandard.IsEmpty()) ? TranslateImplementationStandard(m_nType) : m_szStandard);
}

VOID CDatabaseProfileInfo::SetFileName(LPCTSTR pszFileName)
{
	m_szFileName[0] = pszFileName;
}

CString CDatabaseProfileInfo::GetFileName() CONST
{
	return m_szFileName[0];
}

VOID CDatabaseProfileInfo::SetUpdateFileName(LPCTSTR pszFileName)
{
	m_szFileName[1] = pszFileName;
}

CString CDatabaseProfileInfo::GetUpdateFileName() CONST
{
	return m_szFileName[1];
}

VOID CDatabaseProfileInfo::SetLibraryFileName(LPCTSTR pszFileName)
{
	m_szFileName[2] = pszFileName;
}

CString CDatabaseProfileInfo::GetLibraryFileName() CONST
{
	return m_szFileName[2];
}

VOID CDatabaseProfileInfo::SetLibraryUpdateFileName(LPCTSTR pszFileName)
{
	m_szFileName[3] = pszFileName;
}

CString CDatabaseProfileInfo::GetLibraryUpdateFileName() CONST
{
	return m_szFileName[3];
}

VOID CDatabaseProfileInfo::SetUsers(CONST CStringArray &szUsers, CONST CStringArray &szPasswords, CONST CUIntArray &nPrivileges)
{
	m_szUsers.Copy(szUsers);
	m_szPasswords.Copy(szPasswords);
	m_nPrivileges.Copy(nPrivileges);
}

INT CDatabaseProfileInfo::GetUsers(CStringArray &szUsers, CStringArray &szPasswords, CUIntArray &nPrivileges) CONST
{
	szUsers.Copy(m_szUsers);
	szPasswords.Copy(m_szPasswords);
	nPrivileges.Copy(m_nPrivileges);
	return((szUsers.GetSize() == szPasswords.GetSize() && szUsers.GetSize() == nPrivileges.GetSize()) ? (INT)szUsers.GetSize() : 0);
}
INT CDatabaseProfileInfo::GetUsers(CStringArray &szUsers) CONST
{
	szUsers.Copy(m_szUsers);
	return((INT)szUsers.GetSize());
}

VOID CDatabaseProfileInfo::SetCreationTime(CONST CTimeKey &tTime)
{
	m_tTime[0] = tTime;
}

CTimeKey CDatabaseProfileInfo::GetCreationTime() CONST
{
	return m_tTime[0];
}

VOID CDatabaseProfileInfo::SetLastUpdateTime(CONST CTimeKey &tTime)
{
	m_tTime[1] = tTime;
}

CTimeKey CDatabaseProfileInfo::GetLastUpdateTime() CONST
{
	return m_tTime[1];
}

VOID CDatabaseProfileInfo::SetValidity(CONST CTimeKey &tStartTime, CONST CTimeKey &tEndTime)
{
	if (tStartTime <= tEndTime)
	{
		m_tValidity[0] = tStartTime;
		m_tValidity[1] = tEndTime;
	}
}

BOOL CDatabaseProfileInfo::GetValidity(CTimeKey &tStartTime, CTimeKey &tEndTime) CONST
{
	CTimeKey  tTime;

	tStartTime = m_tValidity[0];
	tEndTime = m_tValidity[1];
	return(((!tStartTime.GetTime() && !tEndTime.GetTime()) || (tStartTime < tEndTime  &&  tTime >= tStartTime  &&  tTime <= tEndTime)) ? TRUE : FALSE);
}

BOOL CDatabaseProfileInfo::SetVersion(LPCTSTR pszName, LPCTSTR pszRelease, LPCTSTR pszIssue, LPCTSTR pszComment)
{
	CDatabaseVersion  *pDatabaseVersion;

	if (!GetSize())
	{
		if ((pDatabaseVersion = new CDatabaseVersion))
		{
			pDatabaseVersion->SetName(pszName);
			pDatabaseVersion->SetDomain(GetName());
			pDatabaseVersion->SetRelease(pszRelease);
			pDatabaseVersion->SetIssue(pszIssue);
			pDatabaseVersion->SetComment(pszComment);
			if (Add(pDatabaseVersion) >= 0) return TRUE;
			delete pDatabaseVersion;
		}
		return FALSE;
	}
	if ((pDatabaseVersion = GetAt((INT)GetUpperBound())))
	{
		pDatabaseVersion->SetName(pszName);
		pDatabaseVersion->SetRelease(pszRelease);
		pDatabaseVersion->SetIssue(pszIssue);
		pDatabaseVersion->SetComment(pszComment);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseProfileInfo::GetVersion(CString &szName, CString &szRelease, CString &szIssue, CString &szComment) CONST
{
	CDatabaseVersion  *pDatabaseVersion;

	for (szName.Empty(), szRelease.Empty(), szIssue.Empty(), szComment.Empty(); (pDatabaseVersion = (GetSize() > 0) ? GetAt((INT)GetUpperBound()) : (CDatabaseVersion *)NULL); )
	{
		szName = pDatabaseVersion->GetName();
		szRelease = pDatabaseVersion->GetRelease();
		szIssue = pDatabaseVersion->GetIssue();
		szComment = pDatabaseVersion->GetComment();
		return TRUE;
	}
	return FALSE;
}

VOID CDatabaseProfileInfo::SetLoggingMode(UINT nMode)
{
	m_nLoggingPolicy &= ~(LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_NONCYCLICMODE);
	m_nLoggingPolicy |= nMode & (LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_NONCYCLICMODE);
}

UINT CDatabaseProfileInfo::GetLoggingMode() CONST
{
	return(m_nLoggingPolicy & (LOGFILE_POLICY_CYCLICMODE | LOGFILE_POLICY_NONCYCLICMODE));
}

VOID CDatabaseProfileInfo::SetLoggingPolicy(UINT nPolicy)
{
	m_nLoggingPolicy = nPolicy;
}

UINT CDatabaseProfileInfo::GetLoggingPolicy() CONST
{
	return m_nLoggingPolicy;
}

VOID CDatabaseProfileInfo::SetLoggingRetentionByItem(INT nRetention)
{
	m_nLoggingRetention = nRetention;
}

UINT CDatabaseProfileInfo::GetLoggingRetentionByItem() CONST
{
	return m_nLoggingRetention;
}

VOID CDatabaseProfileInfo::SetLoggingRetentionBySize(DWORDLONG fRetention)
{
	m_fLoggingRetention = fRetention;
}

DWORDLONG CDatabaseProfileInfo::GetLoggingRetentionBySize() CONST
{
	return m_fLoggingRetention;
}

VOID CDatabaseProfileInfo::SetLoggingRetentionByTime(CONST CTimeSpan &tRetention)
{
	m_tLoggingRetention = tRetention;
}

CTimeSpan CDatabaseProfileInfo::GetLoggingRetentionByTime() CONST
{
	return m_tLoggingRetention;
}

VOID CDatabaseProfileInfo::SetLoggingFileName(LPCTSTR pszFileName)
{
	m_szLoggingFileName = pszFileName;
}

CString CDatabaseProfileInfo::GetLoggingFileName() CONST
{
	return m_szLoggingFileName;
}

BOOL CDatabaseProfileInfo::WriteLog(CONST CDatabaseLogInfo *pLogInfo)
{
	CTimeKey  tTime;
	CByteArray  nInfo;
	CFileFindEx  cFileFind;
	CSecurityDescriptor  cSecurityDescriptor[2];

	if (m_cLogFile.Open(m_szLoggingFileName, m_szSpacecraft, STRING(IDS_LOGFILETYPE_EVENTLOG), CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
	{
		if (pLogInfo->Map(nInfo) && m_cLogFile.Write(tTime, nInfo))
		{
			if (cFileFind.FindFile(m_szLoggingFileName) && !cFileFind.FindNextFile())
			{
				if (cSecurityDescriptor[0].SetRightsOfSystem(GENERIC_ALL | STANDARD_RIGHTS_ALL | SPECIFIC_RIGHTS_ALL, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) && cSecurityDescriptor[0].SetRightsOfAdministrators(GENERIC_ALL | STANDARD_RIGHTS_ALL | SPECIFIC_RIGHTS_ALL, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) && (cSecurityDescriptor[0].SetRightsOfSystemOperators(GENERIC_READ | GENERIC_WRITE | STANDARD_RIGHTS_READ | STANDARD_RIGHTS_WRITE | SYNCHRONIZE | FILE_LIST_DIRECTORY | FILE_READ_EA | FILE_WRITE_EA | FILE_TRAVERSE | FILE_READ_ATTRIBUTES | FILE_WRITE_ATTRIBUTES, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) || cSecurityDescriptor[0].SetRightsOfPowerUsers(GENERIC_READ | GENERIC_WRITE | STANDARD_RIGHTS_READ | STANDARD_RIGHTS_WRITE | SYNCHRONIZE | FILE_LIST_DIRECTORY | FILE_READ_EA | FILE_WRITE_EA | FILE_TRAVERSE | FILE_READ_ATTRIBUTES | FILE_WRITE_ATTRIBUTES, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE)) && cSecurityDescriptor[0].SetRightsOfAuthenticatedUsers(GENERIC_READ | STANDARD_RIGHTS_READ | SYNCHRONIZE | FILE_LIST_DIRECTORY | FILE_READ_EA | FILE_TRAVERSE | FILE_READ_ATTRIBUTES, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) && cSecurityDescriptor[0].SetRightsOfEveryone(GENERIC_READ | STANDARD_RIGHTS_READ | SYNCHRONIZE | FILE_LIST_DIRECTORY | FILE_READ_EA | FILE_TRAVERSE | FILE_READ_ATTRIBUTES, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) && cSecurityDescriptor[1].SetRightsOfSystem(FILE_ALL_ACCESS) && cSecurityDescriptor[1].SetRightsOfAdministrators(FILE_ALL_ACCESS) && (cSecurityDescriptor[1].SetRightsOfSystemOperators(FILE_GENERIC_READ | FILE_GENERIC_WRITE) || cSecurityDescriptor[1].SetRightsOfPowerUsers(FILE_GENERIC_READ | FILE_GENERIC_WRITE)) && cSecurityDescriptor[1].SetRightsOfAuthenticatedUsers(FILE_GENERIC_READ) && cSecurityDescriptor[1].SetRightsOfEveryone(FILE_GENERIC_READ) && CSecurity::SecureDirectory(cFileFind.GetRoot(), cSecurityDescriptor[0]) && CSecurity::SecureFile(cFileFind.GetFilePath(), cSecurityDescriptor[1]))
				{
					m_cLogFile.Close();
					cFileFind.Close();
					return TRUE;
				}
				cFileFind.Close();
			}
		}
		m_cLogFile.Close();
	}
	return FALSE;
}

UINT CDatabaseProfileInfo::ReadLog(CDatabaseLogs &pLogs)
{
	CTimeKey  tStartTime(MIN_TIMEKEY);
	CTimeKey  tStopTime(MAX_TIMEKEY);

	return ReadLog(pLogs, tStartTime, tStopTime);
}
UINT CDatabaseProfileInfo::ReadLog(CDatabaseLogs &pLogs, CONST CTimeKey &tStartTime, INT nCount)
{
	CTimeKey  tTime;
	CByteArray  nInfo;
	CDatabaseLogInfo  *pLogInfo;

	if (m_cLogFile.Open(m_szLoggingFileName, m_szSpacecraft, STRING(IDS_LOGFILETYPE_EVENTLOG), CFile::modeNoTruncate | CFile::modeRead))
	{
		if (m_cLogFile.SeekTo(tStartTime))
		{
			for (pLogs.RemoveAll(); pLogs.GetSize() < nCount; )
			{
				if (m_cLogFile.Read(tTime, nInfo))
				{
					if (tTime < tStartTime) continue;
					if ((pLogInfo = new CDatabaseLogInfo))
					{
						if (pLogInfo->Unmap(nInfo) && pLogs.Add(pLogInfo)) continue;
						delete pLogInfo;
					}
				}
				break;
			}
			m_cLogFile.Close();
			return TRUE;
		}
		if (m_cLogFile.IsEmpty())
		{
			m_cLogFile.Close();
			pLogs.RemoveAll();
			return TRUE;
		}
		m_cLogFile.Close();
		pLogs.RemoveAll();
		return FALSE;
	}
	pLogs.RemoveAll();
	return -1;
}
UINT CDatabaseProfileInfo::ReadLog(CDatabaseLogs &pLogs, CONST CTimeKey &tStartTime, CONST CTimeKey &tEndTime)
{
	CTimeKey  tTime;
	CByteArray  nInfo;
	CDatabaseLogInfo  *pLogInfo;

	if (m_cLogFile.Open(m_szLoggingFileName, m_szSpacecraft, STRING(IDS_LOGFILETYPE_EVENTLOG), CFile::modeNoTruncate | CFile::modeRead))
	{
		if (m_cLogFile.SeekTo(tStartTime))
		{
			for (pLogs.RemoveAll(); m_cLogFile.Read(tTime, nInfo) && tTime <= tEndTime; )
			{
				if (tTime < tStartTime) continue;
				if ((pLogInfo = new CDatabaseLogInfo))
				{
					if (pLogInfo->Unmap(nInfo) && pLogs.Add(pLogInfo) >= 0) continue;
					delete pLogInfo;
				}
				break;
			}
			m_cLogFile.Close();
			return TRUE;
		}
		if (m_cLogFile.IsEmpty())
		{
			m_cLogFile.Close();
			pLogs.RemoveAll();
			return TRUE;
		}
		m_cLogFile.Close();
		pLogs.RemoveAll();
		return FALSE;
	}
	pLogs.RemoveAll();
	return -1;
}

BOOL CDatabaseProfileInfo::UpdateLog()
{
	CFileFindEx  cFileFind;
	CSecurityDescriptor  cSecurityDescriptor[2];

	if (m_cLogFile.Open(m_szLoggingFileName, m_szSpacecraft, STRING(IDS_LOGFILETYPE_EVENTLOG), CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite))
	{
		if (m_cLogFile.SetMode(GetLoggingMode()) && m_cLogFile.SetPolicy(GetLoggingPolicy()) && m_cLogFile.SetRetentionBySize(GetLoggingRetentionBySize()) && m_cLogFile.SetRetentionByTime(GetLoggingRetentionByTime()))
		{
			if (cFileFind.FindFile(m_szLoggingFileName) && !cFileFind.FindNextFile())
			{
				if (cSecurityDescriptor[0].SetRightsOfSystem(GENERIC_ALL | STANDARD_RIGHTS_ALL | SPECIFIC_RIGHTS_ALL, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) && cSecurityDescriptor[0].SetRightsOfAdministrators(GENERIC_ALL | STANDARD_RIGHTS_ALL | SPECIFIC_RIGHTS_ALL, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) && (cSecurityDescriptor[0].SetRightsOfSystemOperators(GENERIC_READ | GENERIC_WRITE | STANDARD_RIGHTS_READ | STANDARD_RIGHTS_WRITE | SYNCHRONIZE | FILE_LIST_DIRECTORY | FILE_READ_EA | FILE_WRITE_EA | FILE_TRAVERSE | FILE_READ_ATTRIBUTES | FILE_WRITE_ATTRIBUTES, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) || cSecurityDescriptor[0].SetRightsOfPowerUsers(GENERIC_READ | GENERIC_WRITE | STANDARD_RIGHTS_READ | STANDARD_RIGHTS_WRITE | SYNCHRONIZE | FILE_LIST_DIRECTORY | FILE_READ_EA | FILE_WRITE_EA | FILE_TRAVERSE | FILE_READ_ATTRIBUTES | FILE_WRITE_ATTRIBUTES, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE)) && cSecurityDescriptor[0].SetRightsOfAuthenticatedUsers(GENERIC_READ | STANDARD_RIGHTS_READ | SYNCHRONIZE | FILE_LIST_DIRECTORY | FILE_READ_EA | FILE_TRAVERSE | FILE_READ_ATTRIBUTES, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) && cSecurityDescriptor[0].SetRightsOfEveryone(GENERIC_READ | STANDARD_RIGHTS_READ | SYNCHRONIZE | FILE_LIST_DIRECTORY | FILE_READ_EA | FILE_TRAVERSE | FILE_READ_ATTRIBUTES, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) && cSecurityDescriptor[1].SetRightsOfSystem(FILE_ALL_ACCESS) && cSecurityDescriptor[1].SetRightsOfAdministrators(FILE_ALL_ACCESS) && (cSecurityDescriptor[1].SetRightsOfSystemOperators(FILE_GENERIC_READ | FILE_GENERIC_WRITE) || cSecurityDescriptor[1].SetRightsOfPowerUsers(FILE_GENERIC_READ | FILE_GENERIC_WRITE)) && cSecurityDescriptor[1].SetRightsOfAuthenticatedUsers(FILE_GENERIC_READ) && cSecurityDescriptor[1].SetRightsOfEveryone(FILE_GENERIC_READ) && CSecurity::SecureDirectory(cFileFind.GetRoot(), cSecurityDescriptor[0]) && CSecurity::SecureFile(cFileFind.GetFilePath(), cSecurityDescriptor[1]))
				{
					m_cLogFile.Close();
					cFileFind.Close();
					return TRUE;
				}
				cFileFind.Close();
			}
		}
		m_cLogFile.Close();
	}
	return FALSE;
}

BOOL CDatabaseProfileInfo::ResetLog()
{
	if (m_cLogFile.Open(m_szLoggingFileName, m_szSpacecraft, STRING(IDS_LOGFILETYPE_EVENTLOG), CFile::modeNoTruncate | CFile::modeReadWrite))
	{
		if (m_cLogFile.Reset())
		{
			m_cLogFile.Close();
			return TRUE;
		}
		m_cLogFile.Close();
	}
	return FALSE;
}

BOOL CDatabaseProfileInfo::Copy(CONST CDatabaseProfileInfo *pProfileInfo)
{
	m_nType = pProfileInfo->m_nType;
	m_szName = pProfileInfo->m_szName;
	m_szServer = pProfileInfo->m_szServer;
	m_szStandard = pProfileInfo->m_szStandard;
	m_szSpacecraft = pProfileInfo->m_szSpacecraft;
	m_szFileName[0] = pProfileInfo->m_szFileName[0];
	m_szFileName[1] = pProfileInfo->m_szFileName[1];
	m_szFileName[2] = pProfileInfo->m_szFileName[2];
	m_szFileName[3] = pProfileInfo->m_szFileName[3];
	m_szUsers.Copy(pProfileInfo->m_szUsers);
	m_szPasswords.Copy(pProfileInfo->m_szPasswords);
	m_nPrivileges.Copy(pProfileInfo->m_nPrivileges);
	m_tTime[0] = pProfileInfo->m_tTime[0];
	m_tTime[1] = pProfileInfo->m_tTime[1];
	m_tValidity[0] = pProfileInfo->m_tValidity[0];
	m_tValidity[1] = pProfileInfo->m_tValidity[1];
	m_nLoggingPolicy = pProfileInfo->m_nLoggingPolicy;
	m_nLoggingRetention = pProfileInfo->m_nLoggingRetention;
	m_fLoggingRetention = pProfileInfo->m_fLoggingRetention;
	m_tLoggingRetention = pProfileInfo->m_tLoggingRetention;
	m_szLoggingFileName = pProfileInfo->m_szLoggingFileName;
	return CDatabaseVersions::Copy(pProfileInfo);
}

BOOL CDatabaseProfileInfo::Compare(CONST CDatabaseProfileInfo *pProfileInfo) CONST
{
	INT  nUser[2];
	INT  nUsers[2];

	for (nUser[0] = 0, nUsers[0] = (pProfileInfo->m_nType == m_nType && pProfileInfo->m_szName == m_szName && pProfileInfo->m_szServer == m_szServer && pProfileInfo->m_szStandard == m_szStandard && pProfileInfo->m_szSpacecraft == m_szSpacecraft && !pProfileInfo->m_szFileName[0].CompareNoCase(m_szFileName[0]) && !pProfileInfo->m_szFileName[1].CompareNoCase(m_szFileName[1]) && !pProfileInfo->m_szFileName[2].CompareNoCase(m_szFileName[2]) && !pProfileInfo->m_szFileName[3].CompareNoCase(m_szFileName[3]) && pProfileInfo->m_szUsers.GetSize() == m_szUsers.GetSize() && pProfileInfo->m_szPasswords.GetSize() == m_szPasswords.GetSize() && pProfileInfo->m_nPrivileges.GetSize() == m_nPrivileges.GetSize() && m_szUsers.GetSize() == m_szPasswords.GetSize() && m_szUsers.GetSize() == m_nPrivileges.GetSize() && pProfileInfo->m_tTime[0] == m_tTime[0] && pProfileInfo->m_tTime[1] == m_tTime[1] && pProfileInfo->m_tValidity[0] == m_tValidity[0] && pProfileInfo->m_tValidity[1] == m_tValidity[1] && pProfileInfo->m_nLoggingPolicy == m_nLoggingPolicy && pProfileInfo->m_nLoggingRetention == m_nLoggingRetention && pProfileInfo->m_fLoggingRetention == m_fLoggingRetention && pProfileInfo->m_tLoggingRetention == m_tLoggingRetention && !pProfileInfo->m_szLoggingFileName.CompareNoCase(m_szLoggingFileName)) ? (INT)m_szUsers.GetSize() : -1; nUser[0] < nUsers[0]; nUser[0]++)
	{
		for (nUser[1] = 0, nUsers[1] = (INT)pProfileInfo->m_szUsers.GetSize(); nUser[1] < nUsers[1]; nUser[1]++)
		{
			if (pProfileInfo->m_szUsers.GetAt(nUser[1]) != m_szUsers.GetAt(nUser[0])) continue;
			if (pProfileInfo->m_szPasswords.GetAt(nUser[1]) != m_szPasswords.GetAt(nUser[0])) continue;
			if (pProfileInfo->m_nPrivileges.GetAt(nUser[1]) != m_nPrivileges.GetAt(nUser[0])) continue;
			break;
		}
		if (nUser[1] == nUsers[1]) break;
	}
	return((nUser[0] == nUsers[0]) ? CDatabaseVersions::Compare(pProfileInfo) : FALSE);
}

BOOL CDatabaseProfileInfo::Map(CByteArray &nInfo) CONST
{
	DATA  sData;
	INT  cbData;
	INT  nUser;
	INT  nUsers;
	INT  nPassword;
	INT  nPasswords;
	CByteArray  nUsersData[2];
	CByteArray  nVersionsData;

	sData.cbName = (m_szName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbServer = (m_szServer.GetLength() + 1)*sizeof(TCHAR);
	sData.cbStandard = (m_szStandard.GetLength() + 1)*sizeof(TCHAR);
	sData.cbSpacecraft = (m_szSpacecraft.GetLength() + 1)*sizeof(TCHAR);
	sData.cbFileName[0] = (m_szFileName[0].GetLength() + 1)*sizeof(TCHAR);
	sData.cbFileName[1] = (m_szFileName[1].GetLength() + 1)*sizeof(TCHAR);
	sData.cbFileName[2] = (m_szFileName[2].GetLength() + 1)*sizeof(TCHAR);
	sData.cbFileName[3] = (m_szFileName[3].GetLength() + 1)*sizeof(TCHAR);
	sData.cbLoggingFileName = (m_szLoggingFileName.GetLength() + 1)*sizeof(TCHAR);
	sData.cbPrivileges = (INT)(m_nPrivileges.GetSize()*sizeof(UINT));
	sData.cbVersions = (CDatabaseVersions::Map(nVersionsData)) ? (INT)nVersionsData.GetSize() : -1;
	for (nUser = 0, nUsers = (INT)m_szUsers.GetSize(), sData.cbUsers = 0; nUser < nUsers; nUser++, sData.cbUsers += cbData)
	{
		nUsersData[0].SetSize(sData.cbUsers + (cbData = (m_szUsers.GetAt(nUser).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nUsersData[0].GetData() + sData.cbUsers, (LPCTSTR)m_szUsers.GetAt(nUser), cbData);
	}
	for (nPassword = 0, nPasswords = (INT)m_szPasswords.GetSize(), sData.cbPasswords = 0; nPassword < nPasswords; nPassword++, sData.cbPasswords += cbData)
	{
		nUsersData[1].SetSize(sData.cbPasswords + (cbData = (m_szPasswords.GetAt(nPassword).GetLength() + 1)*sizeof(TCHAR)));
		CopyMemory(nUsersData[1].GetData() + sData.cbPasswords, (LPCTSTR)m_szPasswords.GetAt(nPassword), cbData);
	}
	for (nInfo.SetSize((sData.cbSize = sizeof(DATA) + sData.cbName + sData.cbServer + sData.cbStandard + sData.cbSpacecraft + sData.cbFileName[0] + sData.cbFileName[1] + sData.cbFileName[2] + sData.cbFileName[3] + sData.cbLoggingFileName + sData.cbUsers + sData.cbPasswords + sData.cbPrivileges + max(sData.cbVersions, 0))), sData.nType = m_nType, sData.nLoggingPolicy = m_nLoggingPolicy, sData.nLoggingRetention = m_nLoggingRetention, sData.fLoggingRetention = m_fLoggingRetention, sData.tTime[0] = m_tTime[0].GetTime(), sData.tTime[1] = m_tTime[1].GetTime(), sData.tValidity[0] = m_tValidity[0].GetTime(), sData.tValidity[1] = m_tValidity[1].GetTime(), sData.tLoggingRetention = m_tLoggingRetention.GetTimeSpan(); nInfo.GetSize() == sData.cbSize && sData.cbVersions >= 0; )
	{
		CopyMemory(nInfo.GetData(), &sData, sizeof(DATA));
		CopyMemory(nInfo.GetData() + (cbData = sizeof(DATA)), (LPCTSTR)m_szName, sData.cbName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbName), (LPCTSTR)m_szServer, sData.cbServer);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbServer), (LPCTSTR)m_szStandard, sData.cbStandard);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbStandard), (LPCTSTR)m_szSpacecraft, sData.cbSpacecraft);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbSpacecraft), (LPCTSTR)m_szFileName[0], sData.cbFileName[0]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbFileName[0]), (LPCTSTR)m_szFileName[1], sData.cbFileName[1]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbFileName[1]), (LPCTSTR)m_szFileName[2], sData.cbFileName[2]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbFileName[2]), (LPCTSTR)m_szFileName[3], sData.cbFileName[3]);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbFileName[3]), (LPCTSTR)m_szLoggingFileName, sData.cbLoggingFileName);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbLoggingFileName), nUsersData[0].GetData(), sData.cbUsers);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbUsers), nUsersData[1].GetData(), sData.cbPasswords);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbPasswords), m_nPrivileges.GetData(), sData.cbPrivileges);
		CopyMemory(nInfo.GetData() + (cbData = cbData + sData.cbPrivileges), nVersionsData.GetData(), sData.cbVersions);
		return TRUE;
	}
	return FALSE;
}

BOOL CDatabaseProfileInfo::Unmap(CONST CByteArray &nInfo)
{
	DATA  sData;
	INT  cbData;
	INT  cbUser;
	INT  cbUsers;
	INT  cbPassword;
	INT  cbPasswords;
	CByteArray  nUsersData[2];
	CByteArray  nVersionsData;

	for (CopyMemory(&sData, nInfo.GetData(), (nInfo.GetSize() >= sizeof(DATA)) ? sizeof(DATA) : 0); nInfo.GetSize() >= sizeof(DATA) && nInfo.GetSize() == sData.cbSize && sData.cbSize == sizeof(DATA) + sData.cbName + sData.cbServer + sData.cbStandard + sData.cbSpacecraft + sData.cbFileName[0] + sData.cbFileName[1] + sData.cbFileName[2] + sData.cbFileName[3] + sData.cbLoggingFileName + sData.cbUsers + sData.cbPasswords + sData.cbPrivileges + sData.cbVersions && sData.cbName > 0 && sData.cbServer > 0 && sData.cbStandard > 0 && sData.cbSpacecraft > 0 && sData.cbFileName[0] > 0 && sData.cbFileName[1] > 0 && sData.cbFileName[2] > 0 && sData.cbFileName[3] > 0 && sData.cbLoggingFileName > 0 && sData.cbUsers >= 0 && sData.cbPasswords >= 0 && sData.cbPrivileges >= 0 && sData.cbVersions >= 0; )
	{
		CopyMemory(m_szName.GetBufferSetLength(STRINGCHARS(sData.cbName)), nInfo.GetData() + (cbData = sizeof(DATA)), STRINGBYTES(sData.cbName));
		CopyMemory(m_szServer.GetBufferSetLength(STRINGCHARS(sData.cbServer)), nInfo.GetData() + (cbData = cbData + sData.cbName), STRINGBYTES(sData.cbServer));
		CopyMemory(m_szStandard.GetBufferSetLength(STRINGCHARS(sData.cbStandard)), nInfo.GetData() + (cbData = cbData + sData.cbServer), STRINGBYTES(sData.cbStandard));
		CopyMemory(m_szSpacecraft.GetBufferSetLength(STRINGCHARS(sData.cbSpacecraft)), nInfo.GetData() + (cbData = cbData + sData.cbStandard), STRINGBYTES(sData.cbSpacecraft));
		CopyMemory(m_szFileName[0].GetBufferSetLength(STRINGCHARS(sData.cbFileName[0])), nInfo.GetData() + (cbData = cbData + sData.cbSpacecraft), STRINGBYTES(sData.cbFileName[0]));
		CopyMemory(m_szFileName[1].GetBufferSetLength(STRINGCHARS(sData.cbFileName[1])), nInfo.GetData() + (cbData = cbData + sData.cbFileName[0]), STRINGBYTES(sData.cbFileName[1]));
		CopyMemory(m_szFileName[2].GetBufferSetLength(STRINGCHARS(sData.cbFileName[2])), nInfo.GetData() + (cbData = cbData + sData.cbFileName[1]), STRINGBYTES(sData.cbFileName[2]));
		CopyMemory(m_szFileName[3].GetBufferSetLength(STRINGCHARS(sData.cbFileName[3])), nInfo.GetData() + (cbData = cbData + sData.cbFileName[2]), STRINGBYTES(sData.cbFileName[3]));
		CopyMemory(m_szLoggingFileName.GetBufferSetLength(STRINGCHARS(sData.cbLoggingFileName)), nInfo.GetData() + (cbData = cbData + sData.cbFileName[3]), STRINGBYTES(sData.cbLoggingFileName));
		for (nUsersData[0].SetSize(sData.cbUsers), nUsersData[1].SetSize(sData.cbPasswords), m_nPrivileges.SetSize(sData.cbPrivileges / sizeof(UINT)), nVersionsData.SetSize(sData.cbVersions), CopyMemory(nUsersData[0].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbLoggingFileName), sData.cbUsers), CopyMemory(nUsersData[1].GetData(), nInfo.GetData() + (cbData = cbData + sData.cbUsers), sData.cbPasswords), CopyMemory(m_nPrivileges.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbPasswords), sData.cbPrivileges), CopyMemory(nVersionsData.GetData(), nInfo.GetData() + (cbData = cbData + sData.cbPrivileges), sData.cbVersions), m_nType = sData.nType, m_tTime[0] = sData.tTime[0], m_tTime[1] = sData.tTime[1], m_tValidity[0] = sData.tValidity[0], m_tValidity[1] = sData.tValidity[1], m_nLoggingRetention = sData.nLoggingRetention, m_fLoggingRetention = sData.fLoggingRetention, m_tLoggingRetention = sData.tLoggingRetention, m_nLoggingPolicy = sData.nLoggingPolicy, m_szName.ReleaseBuffer(), m_szServer.ReleaseBuffer(), m_szStandard.ReleaseBuffer(), m_szSpacecraft.ReleaseBuffer(), m_szFileName[0].ReleaseBuffer(), m_szFileName[1].ReleaseBuffer(), m_szFileName[2].ReleaseBuffer(), m_szFileName[3].ReleaseBuffer(), m_szLoggingFileName.ReleaseBuffer(), m_szUsers.RemoveAll(), cbUser = cbUsers = 0; cbUsers < sData.cbUsers; cbUsers += (cbUser = (m_szUsers.GetAt(m_szUsers.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
		{
			m_szUsers.Add((LPCTSTR)(nUsersData[0].GetData() + cbUsers));
			continue;
		}
		for (m_szPasswords.RemoveAll(), cbPassword = cbPasswords = 0; cbPasswords < sData.cbPasswords; cbPasswords += (cbPassword = (m_szPasswords.GetAt(m_szPasswords.GetUpperBound()).GetLength() + 1)*sizeof(TCHAR)))
		{
			m_szPasswords.Add((LPCTSTR)(nUsersData[1].GetData() + cbPasswords));
			continue;
		}
		return CDatabaseVersions::Unmap(nVersionsData);
	}
	return FALSE;
}

CString CDatabaseProfileInfo::TranslateImplementationStandard(UINT nType)
{
	if (nType & DATABASE_TYPE_IMPLEMENTATION_SCOS) return STRING(IDS_DATABASE_IMPLEMENTATIONLIBRARY_SCOS);
	if (nType & DATABASE_TYPE_IMPLEMENTATION_ALTEL) return STRING(IDS_DATABASE_IMPLEMENTATIONLIBRARY_ALTEL);
	return EMPTYSTRING;
}
UINT CDatabaseProfileInfo::TranslateImplementationStandard(LPCTSTR pszType)
{
	if (!_tcscmp(pszType, STRING(IDS_DATABASE_IMPLEMENTATION_SCOS))) return DATABASE_TYPE_IMPLEMENTATION_SCOS;
	if (!_tcscmp(pszType, STRING(IDS_DATABASE_IMPLEMENTATION_ALTEL))) return DATABASE_TYPE_IMPLEMENTATION_ALTEL;
	return 0;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseProfiles

CDatabaseProfiles::CDatabaseProfiles() : CPtrArray()
{
	return;
}

CDatabaseProfiles::~CDatabaseProfiles()
{
	RemoveAll();
}

INT CDatabaseProfiles::Add(CDatabaseProfileInfo *pProfileInfo)
{
	INT  nIndex;

	if ((nIndex = FindIndex(pProfileInfo->GetServer(), pProfileInfo->GetName(), TRUE)) >= 0) InsertAt(nIndex, pProfileInfo, 1);
	return nIndex;
}

INT CDatabaseProfiles::Find(LPCTSTR pszName) CONST
{
	return FindIndex(EMPTYSTRING, pszName);
}
INT CDatabaseProfiles::Find(LPCTSTR pszServer, LPCTSTR pszName) CONST
{
	return FindIndex(pszServer, pszName);
}

CDatabaseProfileInfo *CDatabaseProfiles::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseProfileInfo *)CPtrArray::GetAt(nIndex) : (CDatabaseProfileInfo *)NULL);
}

CDatabaseProfileInfo *CDatabaseProfiles::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CDatabaseProfileInfo *)CPtrArray::GetAt(nIndex) : (CDatabaseProfileInfo *)NULL);
}

VOID CDatabaseProfiles::RemoveAll()
{
	INT  nProfile;
	INT  nProfiles;
	CDatabaseProfileInfo  *pProfileInfo;

	for (nProfile = 0, nProfiles = (INT)GetSize(); nProfile < nProfiles; nProfile++)
	{
		if ((pProfileInfo = GetAt(nProfile))) delete pProfileInfo;
		continue;
	}
	CPtrArray::RemoveAll();
}

BOOL CDatabaseProfiles::Copy(CONST CDatabaseProfiles *pProfiles)
{
	INT  nProfile;
	INT  nProfiles;
	CDatabaseProfileInfo  *pProfileInfo;

	for (nProfile = 0, nProfiles = (INT)pProfiles->GetSize(), RemoveAll(); nProfile < nProfiles; nProfile++)
	{
		if ((pProfileInfo = new CDatabaseProfileInfo))
		{
			pProfileInfo->Copy(pProfiles->GetAt(nProfile));
			InsertAt(nProfile, pProfileInfo, 1);
			continue;
		}
		break;
	}
	return((nProfile == nProfiles) ? TRUE : FALSE);
}

BOOL CDatabaseProfiles::Compare(CONST CDatabaseProfiles *pProfiles) CONST
{
	INT  nProfile;
	INT  nProfiles;

	for (nProfile = 0, nProfiles = (pProfiles->GetSize() == GetSize()) ? (INT)GetSize() : -1; nProfile < nProfiles; nProfile++)
	{
		if (!pProfiles->GetAt(nProfile)->Compare(GetAt(nProfile))) break;
		continue;
	}
	return((nProfile == nProfiles) ? TRUE : FALSE);
}

BOOL CDatabaseProfiles::Map(CByteArray &nInfo) CONST
{
	INT  nProfile;
	INT  nProfiles;
	CByteArray  nProfilesData;
	CDatabaseProfileInfo  *pProfileInfo;

	for (nProfile = 0, nProfiles = (INT)GetSize(), nInfo.RemoveAll(); nProfile < nProfiles; nProfile++)
	{
		if ((pProfileInfo = GetAt(nProfile)) && pProfileInfo->Map(nProfilesData) && nInfo.Append(nProfilesData) >= 0) continue;
		break;
	}
	return((nProfile == nProfiles) ? TRUE : FALSE);
}

BOOL CDatabaseProfiles::Unmap(CONST CByteArray &nInfo)
{
	INT  cbProfile;
	INT  cbProfiles;
	CByteArray  nProfilesData;
	CDatabaseProfileInfo  *pProfileInfo;

	for (cbProfiles = 0, RemoveAll(); cbProfiles < nInfo.GetSize(); cbProfiles += cbProfile)
	{
		for (CopyMemory(&cbProfile, nInfo.GetData() + cbProfiles, sizeof(cbProfile)), nProfilesData.SetSize(max(min(cbProfile, nInfo.GetSize() - cbProfiles), 0)); nProfilesData.GetSize() >= 0; )
		{
			CopyMemory(nProfilesData.GetData(), nInfo.GetData() + cbProfiles, nProfilesData.GetSize());
			break;
		}
		if ((pProfileInfo = new CDatabaseProfileInfo))
		{
			if (pProfileInfo->Unmap(nProfilesData) && Add(pProfileInfo) >= 0) continue;
			delete pProfileInfo;
		}
		break;
	}
	return((cbProfiles == nInfo.GetSize()) ? TRUE : FALSE);
}

INT CDatabaseProfiles::FindIndex(LPCTSTR pszServer, LPCTSTR pszName, BOOL bInsert) CONST
{
	INT  nIndex;
	INT  nCount;
	CDatabaseProfileInfo  *pProfileInfo;

	for (nIndex = 0, nCount = (INT)GetSize(); nIndex < nCount; nIndex++)
	{
		if ((pProfileInfo = GetAt(nIndex)) && (!pProfileInfo->GetServer().CompareNoCase(pszServer) || !lstrlen(pszServer)) && pProfileInfo->GetName() == pszName) break;
		continue;
	}
	return(((!bInsert  &&  nIndex < nCount) || (bInsert  &&  nIndex == nCount)) ? nIndex : -1);
}


/////////////////////////////////////////////////////////////////////////////
// CBinaryDatabase

CBinaryDatabase::CBinaryDatabase() : CDatabaseProfileInfo()
{
	m_pTMPackets = new CDatabaseTMPackets;
	m_pTCPackets = new CDatabaseTCPackets;
	m_pTCFunctions = new CDatabaseTCFunctions;
	m_pTCSequences = new CDatabaseTCSequences;
	m_pTCProcedures = new CDatabaseTCProcedures;
	m_pOBProcessors = new CDatabaseOBProcessors;
	m_pTMParameters = new CDatabaseTMParameters;
	m_pTCParameters = new CDatabaseTCParameters;
	m_pTMNumCalTables = new CDatabaseTMNumCalTables;
	m_pTMTxtCalTables = new CDatabaseTMTxtCalTables;
	m_pTMNumOolTables = new CDatabaseTMNumOolTables;
	m_pTMTxtOolTables = new CDatabaseTMTxtOolTables;
	m_pTCNumCalTables = new CDatabaseTCNumCalTables;
	m_pTCTxtCalTables = new CDatabaseTCTxtCalTables;
	m_pTCNumOolTables = new CDatabaseTCNumOolTables;
	m_pTCTxtOolTables = new CDatabaseTCTxtOolTables;
	m_pTCPreExeGroups = new CDatabaseTCPreExeGroups;
	m_pTCExeVerGroups = new CDatabaseTCExeVerGroups;
	m_pTMPacketGroups = new CDatabaseTMPacketGroups;
	m_pTMPacketHeaders = new CDatabaseTMPacketHeaders;
	m_pTMPacketStreams = new CDatabaseTMPacketStreams;
	m_pTCParameterSets = new CDatabaseTCParameterSets;
	m_pTCFunctionBlocks = new CDatabaseTCFunctionBlocks;
	m_pTMParameterGroups = new CDatabaseTMParameterGroups;
	m_pTCPacketParameters = new CDatabaseTCPacketParameters;
	m_pTMPacketIdentifications = new CDatabaseTMPacketIdentifications;
	m_pTMPacketIdentificationCriteria = new CDatabaseTMPacketIdentificationCriteria;
	m_pOBProcessorMemoryImages = new CDatabaseOBProcessorMemoryImages;
	m_pTMPacketSubTags = new CDatabaseTMPacket;
	m_pANDs[0] = new CANDLayouts;
	m_pANDs[1] = new CANDLayouts;
	m_pGRDs = new CGRDLayouts;
	m_pMMDs = new CMMDLayouts;
	m_pPODs = new CPODLayouts;
	m_pScripts = new CAutomationScripts;
	m_hLibrary = (HINSTANCE)NULL;
}
CBinaryDatabase::CBinaryDatabase(CDatabaseProfileInfo *pDatabaseInfo)
{
	Copy(pDatabaseInfo);
	m_pTMPackets = new CDatabaseTMPackets;
	m_pTCPackets = new CDatabaseTCPackets;
	m_pTCFunctions = new CDatabaseTCFunctions;
	m_pTCSequences = new CDatabaseTCSequences;
	m_pTCProcedures = new CDatabaseTCProcedures;
	m_pOBProcessors = new CDatabaseOBProcessors;
	m_pTMParameters = new CDatabaseTMParameters;
	m_pTCParameters = new CDatabaseTCParameters;
	m_pTMNumCalTables = new CDatabaseTMNumCalTables;
	m_pTMTxtCalTables = new CDatabaseTMTxtCalTables;
	m_pTMNumOolTables = new CDatabaseTMNumOolTables;
	m_pTMTxtOolTables = new CDatabaseTMTxtOolTables;
	m_pTCNumCalTables = new CDatabaseTCNumCalTables;
	m_pTCTxtCalTables = new CDatabaseTCTxtCalTables;
	m_pTCNumOolTables = new CDatabaseTCNumOolTables;
	m_pTCTxtOolTables = new CDatabaseTCTxtOolTables;
	m_pTCPreExeGroups = new CDatabaseTCPreExeGroups;
	m_pTCExeVerGroups = new CDatabaseTCExeVerGroups;
	m_pTMPacketGroups = new CDatabaseTMPacketGroups;
	m_pTMPacketHeaders = new CDatabaseTMPacketHeaders;
	m_pTMPacketStreams = new CDatabaseTMPacketStreams;
	m_pTCParameterSets = new CDatabaseTCParameterSets;
	m_pTCFunctionBlocks = new CDatabaseTCFunctionBlocks;
	m_pTMParameterGroups = new CDatabaseTMParameterGroups;
	m_pTCPacketParameters = new CDatabaseTCPacketParameters;
	m_pTMPacketIdentifications = new CDatabaseTMPacketIdentifications;
	m_pTMPacketIdentificationCriteria = new CDatabaseTMPacketIdentificationCriteria;
	m_pOBProcessorMemoryImages = new CDatabaseOBProcessorMemoryImages;
	m_pTMPacketSubTags = new CDatabaseTMPacket;
	m_pANDs[0] = new CANDLayouts;
	m_pANDs[1] = new CANDLayouts;
	m_pGRDs = new CGRDLayouts;
	m_pMMDs = new CMMDLayouts;
	m_pPODs = new CPODLayouts;
	m_pScripts = new CAutomationScripts;
	m_hLibrary = (HINSTANCE)NULL;
}

CBinaryDatabase::~CBinaryDatabase()
{
	Reset();
	delete m_pTMPackets;
	delete m_pTCPackets;
	delete m_pTCFunctions;
	delete m_pTCSequences;
	delete m_pTCProcedures;
	delete m_pOBProcessors;
	delete m_pTMParameters;
	delete m_pTCParameters;
	delete m_pTMNumCalTables;
	delete m_pTMTxtCalTables;
	delete m_pTMNumOolTables;
	delete m_pTMTxtOolTables;
	delete m_pTCNumCalTables;
	delete m_pTCTxtCalTables;
	delete m_pTCNumOolTables;
	delete m_pTCTxtOolTables;
	delete m_pTCPreExeGroups;
	delete m_pTCExeVerGroups;
	delete m_pTMPacketGroups;
	delete m_pTMPacketHeaders;
	delete m_pTMPacketStreams;
	delete m_pTCParameterSets;
	delete m_pTCFunctionBlocks;
	delete m_pTMParameterGroups;
	delete m_pTCPacketParameters;
	delete m_pTMPacketIdentifications;
	delete m_pTMPacketIdentificationCriteria;
	delete m_pOBProcessorMemoryImages;
	delete m_pTMPacketSubTags;
	delete m_pANDs[0];
	delete m_pANDs[1];
	delete m_pGRDs;
	delete m_pMMDs;
	delete m_pPODs;
	delete m_pScripts;
}

BOOL CBinaryDatabase::Save(ULONGLONG nComponents)
{
	INT  nLayout;
	INT  nLayouts;
	INT  nParameter;
	INT  nParameters;
	DWORD  cbFile;
	DWORD  cbInfo;
	CFileEx  cFile;
	CString  szFileName;
	CByteArray  nInfo;
	CByteArray  nHeader;
	CByteArray  nTMPackets;
	CByteArray  nTCPackets;
	CByteArray  nTCFunctions;
	CByteArray  nTCSequences;
	CByteArray  nTCProcedures;
	CByteArray  nOBProcessors;
	CByteArray  nTMParameters;
	CByteArray  nTCParameters;
	CByteArray  nTMNumCalTables;
	CByteArray  nTMTxtCalTables;
	CByteArray  nTMNumOolTables;
	CByteArray  nTMTxtOolTables;
	CByteArray  nTCNumCalTables;
	CByteArray  nTCTxtCalTables;
	CByteArray  nTCNumOolTables;
	CByteArray  nTCTxtOolTables;
	CByteArray  nTCPreExeGroups;
	CByteArray  nTCExeVerGroups;
	CByteArray  nTMPacketGroups;
	CByteArray  nTMPacketHeaders;
	CByteArray  nTMPacketStreams;
	CByteArray  nTCParameterSets;
	CByteArray  nTCFunctionBlocks;
	CByteArray  nTMParameterGroups;
	CByteArray  nTCPacketParameters;
	CByteArray  nTMPacketIdentifications;
	CByteArray  nTMPacketIdentificationCriteria;
	CByteArray  nOBProcessorMemoryImages;
	CByteArray  nTMPacketSubTags;
	CByteArray  nANDs[2][2];
	CByteArray  nGRDs[2];
	CByteArray  nMMDs[2];
	CByteArray  nPODs[2];
	CByteArray  nScripts[2];
	CANDLayout  *pANDLayout;
	CGRDLayout  *pGRDLayout;
	CANDLayoutParameter  *pANDParameter;
	CGRDLayoutParameter  *pGRDParameter;
	DATABASEHEADER  sDatabaseHeader = { 0 };
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (nComponents & DATABASE_COMPONENT_AND)
	{
		if (nComponents & DATABASE_SUBCOMPONENT_AND_NORMAL)
		{
			for (nLayout = 0, nLayouts = (INT)GetANDs(DATABASE_SUBCOMPONENT_AND_NORMAL)->GetSize(); nLayout < nLayouts; nLayout++)
			{
				if ((pANDLayout = GetANDs(DATABASE_SUBCOMPONENT_AND_NORMAL)->GetAt(nLayout)) != (CANDLayout *)NULL)
				{
					for (nParameter = 0, nParameters = (INT)pANDLayout->GetSize(); nParameter < nParameters; nParameter++)
					{
						if ((pANDParameter = pANDLayout->GetAt(nParameter)) != (CANDLayoutParameter *)NULL)
						{
							pANDParameter->SetRef(GetTMParameters()->Find(pANDParameter->GetName()));
							continue;
						}
					}
				}
			}
		}
		if (nComponents & DATABASE_SUBCOMPONENT_AND_GENERIC)
		{
			for (nLayout = 0, nLayouts = (INT)GetANDs(DATABASE_SUBCOMPONENT_AND_GENERIC)->GetSize(); nLayout < nLayouts; nLayout++)
			{
				if ((pANDLayout = GetANDs(DATABASE_SUBCOMPONENT_AND_GENERIC)->GetAt(nLayout)) != (CANDLayout *)NULL)
				{
					for (nParameter = 0, nParameters = (INT)pANDLayout->GetSize(); nParameter < nParameters; nParameter++)
					{
						if ((pANDParameter = pANDLayout->GetAt(nParameter)) != (CANDLayoutParameter *)NULL)
						{
							pANDParameter->SetRef(GetTMParameters()->Find(pANDParameter->GetName()));
							continue;
						}
					}
				}
			}
		}
	}
	if (nComponents & DATABASE_COMPONENT_GRD)
	{
		for (nLayout = 0, nLayouts = (INT)GetGRDs()->GetSize(); nLayout < nLayouts; nLayout++)
		{
			if ((pGRDLayout = (CGRDLayout *)GetGRDs()->GetAt(nLayout)) != (CGRDLayout *)NULL)
			{
				for (nParameter = 0, nParameters = (INT)pGRDLayout->GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pGRDParameter = pGRDLayout->GetAt(nParameter)) != (CGRDLayoutParameter *)NULL)
					{
						pGRDParameter->SetRef(GetTMParameters()->Find(pGRDParameter->GetName()));
						continue;
					}
				}
			}
		}
	}
	for (; nComponents != (DATABASE_COMPONENTS_ALL | DATABASE_SUBCOMPONENTS_ALL); )
	{
		if (cFile.Open(GetLoadFileName(), CFile::modeRead | CFile::shareDenyNone))
		{
			if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, &fOverlapped))
			{
				if (ReadFile(cFile.m_hFile, &sDatabaseHeader, (cbInfo = sizeof(sDatabaseHeader)), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  sDatabaseHeader.dwSize == sizeof(sDatabaseHeader))
				{
					nHeader.SetSize(sDatabaseHeader.dwHeader[1]);
					nTMPackets.SetSize(sDatabaseHeader.dwTMPackets[1]);
					nTCPackets.SetSize(sDatabaseHeader.dwTCPackets[1]);
					nTCFunctions.SetSize(sDatabaseHeader.dwTCFunctions[1]);
					nTCSequences.SetSize(sDatabaseHeader.dwTCSequences[1]);
					nTCProcedures.SetSize(sDatabaseHeader.dwTCProcedures[1]);
					nOBProcessors.SetSize(sDatabaseHeader.dwOBProcessors[1]);
					nTMParameters.SetSize(sDatabaseHeader.dwTMParameters[1]);
					nTCParameters.SetSize(sDatabaseHeader.dwTCParameters[1]);
					nTMNumCalTables.SetSize(sDatabaseHeader.dwTMNumCalTables[1]);
					nTMTxtCalTables.SetSize(sDatabaseHeader.dwTMTxtCalTables[1]);
					nTMNumOolTables.SetSize(sDatabaseHeader.dwTMNumOolTables[1]);
					nTMTxtOolTables.SetSize(sDatabaseHeader.dwTMTxtOolTables[1]);
					nTCNumCalTables.SetSize(sDatabaseHeader.dwTCNumCalTables[1]);
					nTCTxtCalTables.SetSize(sDatabaseHeader.dwTCTxtCalTables[1]);
					nTCNumOolTables.SetSize(sDatabaseHeader.dwTCNumOolTables[1]);
					nTCTxtOolTables.SetSize(sDatabaseHeader.dwTCTxtOolTables[1]);
					nTCPreExeGroups.SetSize(sDatabaseHeader.dwTCPreExeGroups[1]);
					nTCExeVerGroups.SetSize(sDatabaseHeader.dwTCExeVerGroups[1]);
					nTMPacketGroups.SetSize(sDatabaseHeader.dwTMPacketGroups[1]);
					nTMPacketHeaders.SetSize(sDatabaseHeader.dwTMPacketHeaders[1]);
					nTMPacketStreams.SetSize(sDatabaseHeader.dwTMPacketStreams[1]);
					nTCParameterSets.SetSize(sDatabaseHeader.dwTCParameterSets[1]);
					nTCFunctionBlocks.SetSize(sDatabaseHeader.dwTCFunctionBlocks[1]);
					nTMParameterGroups.SetSize(sDatabaseHeader.dwTMParameterGroups[1]);
					nTCPacketParameters.SetSize(sDatabaseHeader.dwTCPacketParameters[1]);
					nTMPacketIdentifications.SetSize(sDatabaseHeader.dwTMPacketIdentifications[1]);
					nTMPacketIdentificationCriteria.SetSize(sDatabaseHeader.dwTMPacketIdentificationCriteria[1]);
					nOBProcessorMemoryImages.SetSize(sDatabaseHeader.dwOBProcessorMemoryImages[1]);
					nTMPacketSubTags.SetSize(sDatabaseHeader.dwTMPacketSubTags[1]);
					nANDs[0][0].SetSize(sDatabaseHeader.dwANDDirectory[0][1]);
					nANDs[0][1].SetSize(sDatabaseHeader.dwANDDirectory[1][1]);
					nGRDs[0].SetSize(sDatabaseHeader.dwGRDDirectory[1]);
					nMMDs[0].SetSize(sDatabaseHeader.dwMMDDirectory[1]);
					nPODs[0].SetSize(sDatabaseHeader.dwPODDirectory[1]);
					nScripts[0].SetSize(sDatabaseHeader.dwScriptsDirectory[1]);
					nANDs[1][0].SetSize(sDatabaseHeader.dwANDs[0][1]);
					nANDs[1][1].SetSize(sDatabaseHeader.dwANDs[1][1]);
					nGRDs[1].SetSize(sDatabaseHeader.dwGRDs[1]);
					nMMDs[1].SetSize(sDatabaseHeader.dwMMDs[1]);
					nPODs[1].SetSize(sDatabaseHeader.dwPODs[1]);
					nScripts[1].SetSize(sDatabaseHeader.dwScripts[1]);
					if (nHeader.GetSize() == sDatabaseHeader.dwHeader[1] && nTMPackets.GetSize() == sDatabaseHeader.dwTMPackets[1] && nTCPackets.GetSize() == sDatabaseHeader.dwTCPackets[1] && nTCFunctions.GetSize() == sDatabaseHeader.dwTCFunctions[1] && nTCSequences.GetSize() == sDatabaseHeader.dwTCSequences[1] && nTCProcedures.GetSize() == sDatabaseHeader.dwTCProcedures[1] && nTMParameters.GetSize() == sDatabaseHeader.dwTMParameters[1] && nTCParameters.GetSize() == sDatabaseHeader.dwTCParameters[1] && nTMNumCalTables.GetSize() == sDatabaseHeader.dwTMNumCalTables[1] && nTMTxtCalTables.GetSize() == sDatabaseHeader.dwTMTxtCalTables[1] && nTMNumOolTables.GetSize() == sDatabaseHeader.dwTMNumOolTables[1] && nTMTxtOolTables.GetSize() == sDatabaseHeader.dwTMTxtOolTables[1] && nTCNumCalTables.GetSize() == sDatabaseHeader.dwTCNumCalTables[1] && nTCTxtCalTables.GetSize() == sDatabaseHeader.dwTCTxtCalTables[1] && nTCNumOolTables.GetSize() == sDatabaseHeader.dwTCNumOolTables[1] && nTCTxtOolTables.GetSize() == sDatabaseHeader.dwTCTxtOolTables[1] && nOBProcessors.GetSize() == sDatabaseHeader.dwOBProcessors[1] && nTCPreExeGroups.GetSize() == sDatabaseHeader.dwTCPreExeGroups[1] && nTCExeVerGroups.GetSize() == sDatabaseHeader.dwTCExeVerGroups[1] && nTMPacketGroups.GetSize() == sDatabaseHeader.dwTMPacketGroups[1] && nTMPacketHeaders.GetSize() == sDatabaseHeader.dwTMPacketHeaders[1] && nTMPacketStreams.GetSize() == sDatabaseHeader.dwTMPacketStreams[1] && nTCParameterSets.GetSize() == sDatabaseHeader.dwTCParameterSets[1] && nTCFunctionBlocks.GetSize() == sDatabaseHeader.dwTCFunctionBlocks[1] && nTMParameterGroups.GetSize() == sDatabaseHeader.dwTMParameterGroups[1] && nTCPacketParameters.GetSize() == sDatabaseHeader.dwTCPacketParameters[1] && nTMPacketIdentifications.GetSize() == sDatabaseHeader.dwTMPacketIdentifications[1] && nTMPacketIdentificationCriteria.GetSize() == sDatabaseHeader.dwTMPacketIdentificationCriteria[1] && nOBProcessorMemoryImages.GetSize() == sDatabaseHeader.dwOBProcessorMemoryImages[1] && nTMPacketSubTags.GetSize() == sDatabaseHeader.dwTMPacketSubTags[1] && nANDs[0][0].GetSize() == sDatabaseHeader.dwANDDirectory[0][1] && nANDs[0][1].GetSize() == sDatabaseHeader.dwANDDirectory[1][1] && nGRDs[0].GetSize() == sDatabaseHeader.dwGRDDirectory[1] && nMMDs[0].GetSize() == sDatabaseHeader.dwMMDDirectory[1] && nPODs[0].GetSize() == sDatabaseHeader.dwPODDirectory[1] && nScripts[0].GetSize() == sDatabaseHeader.dwScriptsDirectory[1] && nANDs[1][0].GetSize() == sDatabaseHeader.dwANDs[0][1] && nANDs[1][1].GetSize() == sDatabaseHeader.dwANDs[1][1] && nGRDs[1].GetSize() == sDatabaseHeader.dwGRDs[1] && nMMDs[1].GetSize() == sDatabaseHeader.dwMMDs[1] && nPODs[1].GetSize() == sDatabaseHeader.dwPODs[1] && nScripts[1].GetSize() == sDatabaseHeader.dwScripts[1] &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwHeader[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwHeader[0] && ReadFile(cFile.m_hFile, nHeader.GetData(), (cbInfo = (DWORD)nHeader.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMPackets[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMPackets[0] && ReadFile(cFile.m_hFile, nTMPackets.GetData(), (cbInfo = (DWORD)nTMPackets.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCPackets[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCPackets[0] && ReadFile(cFile.m_hFile, nTCPackets.GetData(), (cbInfo = (DWORD)nTCPackets.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCFunctions[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCFunctions[0] && ReadFile(cFile.m_hFile, nTCFunctions.GetData(), (cbInfo = (DWORD)nTCFunctions.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCSequences[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCSequences[0] && ReadFile(cFile.m_hFile, nTCSequences.GetData(), (cbInfo = (DWORD)nTCSequences.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCProcedures[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCProcedures[0] && ReadFile(cFile.m_hFile, nTCProcedures.GetData(), (cbInfo = (DWORD)nTCProcedures.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwOBProcessors[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwOBProcessors[0] && ReadFile(cFile.m_hFile, nOBProcessors.GetData(), (cbInfo = (DWORD)nOBProcessors.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMParameters[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMParameters[0] && ReadFile(cFile.m_hFile, nTMParameters.GetData(), (cbInfo = (DWORD)nTMParameters.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCParameters[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCParameters[0] && ReadFile(cFile.m_hFile, nTCParameters.GetData(), (cbInfo = (DWORD)nTCParameters.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMNumCalTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMNumCalTables[0] && ReadFile(cFile.m_hFile, nTMNumCalTables.GetData(), (cbInfo = (DWORD)nTMNumCalTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMTxtCalTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMTxtCalTables[0] && ReadFile(cFile.m_hFile, nTMTxtCalTables.GetData(), (cbInfo = (DWORD)nTMTxtCalTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMNumOolTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMNumOolTables[0] && ReadFile(cFile.m_hFile, nTMNumOolTables.GetData(), (cbInfo = (DWORD)nTMNumOolTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMTxtOolTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMTxtOolTables[0] && ReadFile(cFile.m_hFile, nTMTxtOolTables.GetData(), (cbInfo = (DWORD)nTMTxtOolTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCNumCalTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCNumCalTables[0] && ReadFile(cFile.m_hFile, nTCNumCalTables.GetData(), (cbInfo = (DWORD)nTCNumCalTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCTxtCalTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCTxtCalTables[0] && ReadFile(cFile.m_hFile, nTCTxtCalTables.GetData(), (cbInfo = (DWORD)nTCTxtCalTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCNumOolTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCNumOolTables[0] && ReadFile(cFile.m_hFile, nTCNumOolTables.GetData(), (cbInfo = (DWORD)nTCNumOolTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCTxtOolTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCTxtOolTables[0] && ReadFile(cFile.m_hFile, nTCTxtOolTables.GetData(), (cbInfo = (DWORD)nTCTxtOolTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCPreExeGroups[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCPreExeGroups[0] && ReadFile(cFile.m_hFile, nTCPreExeGroups.GetData(), (cbInfo = (DWORD)nTCPreExeGroups.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCExeVerGroups[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCExeVerGroups[0] && ReadFile(cFile.m_hFile, nTCExeVerGroups.GetData(), (cbInfo = (DWORD)nTCExeVerGroups.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMPacketGroups[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMPacketGroups[0] && ReadFile(cFile.m_hFile, nTMPacketGroups.GetData(), (cbInfo = (DWORD)nTMPacketGroups.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMPacketHeaders[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMPacketHeaders[0] && ReadFile(cFile.m_hFile, nTMPacketHeaders.GetData(), (cbInfo = (DWORD)nTMPacketHeaders.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMPacketStreams[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMPacketStreams[0] && ReadFile(cFile.m_hFile, nTMPacketStreams.GetData(), (cbInfo = (DWORD)nTMPacketStreams.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCParameterSets[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCParameterSets[0] && ReadFile(cFile.m_hFile, nTCParameterSets.GetData(), (cbInfo = (DWORD)nTCParameterSets.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCFunctionBlocks[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCFunctionBlocks[0] && ReadFile(cFile.m_hFile, nTCFunctionBlocks.GetData(), (cbInfo = (DWORD)nTCFunctionBlocks.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMParameterGroups[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMParameterGroups[0] && ReadFile(cFile.m_hFile, nTMParameterGroups.GetData(), (cbInfo = (DWORD)nTMParameterGroups.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCPacketParameters[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCPacketParameters[0] && ReadFile(cFile.m_hFile, nTCPacketParameters.GetData(), (cbInfo = (DWORD)nTCPacketParameters.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMPacketIdentifications[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMPacketIdentifications[0] && ReadFile(cFile.m_hFile, nTMPacketIdentifications.GetData(), (cbInfo = (DWORD)nTMPacketIdentifications.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMPacketIdentificationCriteria[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMPacketIdentificationCriteria[0] && ReadFile(cFile.m_hFile, nTMPacketIdentificationCriteria.GetData(), (cbInfo = (DWORD)nTMPacketIdentificationCriteria.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwOBProcessorMemoryImages[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwOBProcessorMemoryImages[0] && ReadFile(cFile.m_hFile, nOBProcessorMemoryImages.GetData(), (cbInfo = (DWORD)nOBProcessorMemoryImages.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMPacketSubTags[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMPacketSubTags[0] && ReadFile(cFile.m_hFile, nTMPacketSubTags.GetData(), (cbInfo = (DWORD)nTMPacketSubTags.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwANDDirectory[0][0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwANDDirectory[0][0] && ReadFile(cFile.m_hFile, nANDs[0][0].GetData(), (cbInfo = (DWORD)nANDs[0][0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwANDDirectory[1][0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwANDDirectory[1][0] && ReadFile(cFile.m_hFile, nANDs[0][1].GetData(), (cbInfo = (DWORD)nANDs[0][1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwGRDDirectory[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwGRDDirectory[0] && ReadFile(cFile.m_hFile, nGRDs[0].GetData(), (cbInfo = (DWORD)nGRDs[0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwMMDDirectory[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwMMDDirectory[0] && ReadFile(cFile.m_hFile, nMMDs[0].GetData(), (cbInfo = (DWORD)nMMDs[0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwPODDirectory[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwPODDirectory[0] && ReadFile(cFile.m_hFile, nPODs[0].GetData(), (cbInfo = (DWORD)nPODs[0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwScriptsDirectory[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwScriptsDirectory[0] && ReadFile(cFile.m_hFile, nScripts[0].GetData(), (cbInfo = (DWORD)nScripts[0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwANDs[0][0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwANDs[0][0] && ReadFile(cFile.m_hFile, nANDs[1][0].GetData(), (cbInfo = (DWORD)nANDs[1][0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwANDs[1][0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwANDs[1][0] && ReadFile(cFile.m_hFile, nANDs[1][1].GetData(), (cbInfo = (DWORD)nANDs[1][1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwGRDs[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwGRDs[0] && ReadFile(cFile.m_hFile, nGRDs[1].GetData(), (cbInfo = (DWORD)nGRDs[1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwMMDs[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwMMDs[0] && ReadFile(cFile.m_hFile, nMMDs[1].GetData(), (cbInfo = (DWORD)nMMDs[1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwPODs[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwPODs[0] && ReadFile(cFile.m_hFile, nPODs[1].GetData(), (cbInfo = (DWORD)nPODs[1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&
						SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwScripts[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwScripts[0] && ReadFile(cFile.m_hFile, nScripts[1].GetData(), (cbInfo = (DWORD)nScripts[1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo)
					{
						UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
						cFile.Close();
						break;
					}
				}
				UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
			}
			cFile.Close();
			return FALSE;
		}
		break;
	}
	for (szFileName = GetSaveFileName(); !szFileName.IsEmpty(); )
	{
		CFileEx::SetAttributes(szFileName, CFileEx::GetAttributes(szFileName) & ~FILE_ATTRIBUTE_READONLY);
		break;
	}
	if (cFile.Open(szFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite | CFile::shareDenyNone))
	{
		if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, (LPOVERLAPPED)&fOverlapped))
		{
			if (SetFilePointer(cFile.m_hFile, sizeof(sDatabaseHeader), (PLONG)NULL, FILE_BEGIN) != INVALID_SET_FILE_POINTER)
			{
				if ((sDatabaseHeader.dwHeader[0] = (CDatabaseProfileInfo::Map(nInfo) && (sDatabaseHeader.dwHeader[1] = (DWORD)nInfo.GetSize()) >= 0) ? sizeof(sDatabaseHeader) : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nInfo.GetData(), (cbInfo = (DWORD)nInfo.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTMPackets[0] = (((nComponents & DATABASE_COMPONENT_TMPACKET) != DATABASE_COMPONENT_TMPACKET || GetTMPackets()->Map(nTMPackets)) && (sDatabaseHeader.dwTMPackets[1] = (DWORD)nTMPackets.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTMPackets.GetData(), (cbInfo = (DWORD)nTMPackets.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTCPackets[0] = (((nComponents & DATABASE_COMPONENT_TCFUNCTION) != DATABASE_COMPONENT_TCFUNCTION || (nComponents & DATABASE_SUBCOMPONENT_TCFUNCTIONPACKET) != DATABASE_SUBCOMPONENT_TCFUNCTIONPACKET || GetTCPackets()->Map(nTCPackets)) && (sDatabaseHeader.dwTCPackets[1] = (DWORD)nTCPackets.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTCPackets.GetData(), (cbInfo = (DWORD)nTCPackets.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTCFunctions[0] = (((nComponents & DATABASE_COMPONENT_TCFUNCTION) != DATABASE_COMPONENT_TCFUNCTION || GetTCFunctions()->Map(nTCFunctions)) && (sDatabaseHeader.dwTCFunctions[1] = (DWORD)nTCFunctions.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTCFunctions.GetData(), (cbInfo = (DWORD)nTCFunctions.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTCSequences[0] = (((nComponents & DATABASE_COMPONENT_TCSEQUENCE) != DATABASE_COMPONENT_TCSEQUENCE || GetTCSequences()->Map(nTCSequences)) && (sDatabaseHeader.dwTCSequences[1] = (DWORD)nTCSequences.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTCSequences.GetData(), (cbInfo = (DWORD)nTCSequences.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTCProcedures[0] = (((nComponents & DATABASE_COMPONENT_TCPROCEDURE) != DATABASE_COMPONENT_TCPROCEDURE || GetTCProcedures()->Map(nTCProcedures)) && (sDatabaseHeader.dwTCProcedures[1] = (DWORD)nTCProcedures.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTCProcedures.GetData(), (cbInfo = (DWORD)nTCProcedures.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwOBProcessors[0] = (((nComponents & DATABASE_COMPONENT_OBPROCESSOR) != DATABASE_COMPONENT_OBPROCESSOR || GetOBProcessors()->Map(nOBProcessors)) && (sDatabaseHeader.dwOBProcessors[1] = (DWORD)nOBProcessors.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nOBProcessors.GetData(), (cbInfo = (DWORD)nOBProcessors.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTMParameters[0] = (((nComponents & DATABASE_COMPONENT_TMPARAMETER) != DATABASE_COMPONENT_TMPARAMETER || GetTMParameters()->Map(nTMParameters)) && (sDatabaseHeader.dwTMParameters[1] = (DWORD)nTMParameters.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTMParameters.GetData(), (cbInfo = (DWORD)nTMParameters.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTCParameters[0] = (((nComponents & DATABASE_COMPONENT_TCPARAMETER) != DATABASE_COMPONENT_TCPARAMETER || GetTCParameters()->Map(nTCParameters)) && (sDatabaseHeader.dwTCParameters[1] = (DWORD)nTCParameters.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTCParameters.GetData(), (cbInfo = (DWORD)nTCParameters.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTMNumCalTables[0] = ((((nComponents & DATABASE_COMPONENT_TMPARAMETER) != DATABASE_COMPONENT_TMPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TMNUMCALTABLE) != DATABASE_SUBCOMPONENT_TMNUMCALTABLE) || GetTMNumCalTables()->Map(nTMNumCalTables)) && (sDatabaseHeader.dwTMNumCalTables[1] = (DWORD)nTMNumCalTables.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTMNumCalTables.GetData(), (cbInfo = (DWORD)nTMNumCalTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTMTxtCalTables[0] = ((((nComponents & DATABASE_COMPONENT_TMPARAMETER) != DATABASE_COMPONENT_TMPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TMTXTCALTABLE) != DATABASE_SUBCOMPONENT_TMTXTCALTABLE) || GetTMTxtCalTables()->Map(nTMTxtCalTables)) && (sDatabaseHeader.dwTMTxtCalTables[1] = (DWORD)nTMTxtCalTables.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTMTxtCalTables.GetData(), (cbInfo = (DWORD)nTMTxtCalTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTMNumOolTables[0] = ((((nComponents & DATABASE_COMPONENT_TMPARAMETER) != DATABASE_COMPONENT_TMPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TMNUMOOLTABLE) != DATABASE_SUBCOMPONENT_TMNUMOOLTABLE) || GetTMNumOolTables()->Map(nTMNumOolTables)) && (sDatabaseHeader.dwTMNumOolTables[1] = (DWORD)nTMNumOolTables.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTMNumOolTables.GetData(), (cbInfo = (DWORD)nTMNumOolTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTMTxtOolTables[0] = ((((nComponents & DATABASE_COMPONENT_TMPARAMETER) != DATABASE_COMPONENT_TMPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TMTXTOOLTABLE) != DATABASE_SUBCOMPONENT_TMTXTOOLTABLE) || GetTMTxtOolTables()->Map(nTMTxtOolTables)) && (sDatabaseHeader.dwTMTxtOolTables[1] = (DWORD)nTMTxtOolTables.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTMTxtOolTables.GetData(), (cbInfo = (DWORD)nTMTxtOolTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTCNumCalTables[0] = ((((nComponents & DATABASE_COMPONENT_TCPARAMETER) != DATABASE_COMPONENT_TCPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TCNUMCALTABLE) != DATABASE_SUBCOMPONENT_TCNUMCALTABLE) || GetTCNumCalTables()->Map(nTCNumCalTables)) && (sDatabaseHeader.dwTCNumCalTables[1] = (DWORD)nTCNumCalTables.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTCNumCalTables.GetData(), (cbInfo = (DWORD)nTCNumCalTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTCTxtCalTables[0] = ((((nComponents & DATABASE_COMPONENT_TCPARAMETER) != DATABASE_COMPONENT_TCPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TCTXTCALTABLE) != DATABASE_SUBCOMPONENT_TCTXTCALTABLE) || GetTCTxtCalTables()->Map(nTCTxtCalTables)) && (sDatabaseHeader.dwTCTxtCalTables[1] = (DWORD)nTCTxtCalTables.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTCTxtCalTables.GetData(), (cbInfo = (DWORD)nTCTxtCalTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTCNumOolTables[0] = ((((nComponents & DATABASE_COMPONENT_TCPARAMETER) != DATABASE_COMPONENT_TCPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TCNUMOOLTABLE) != DATABASE_SUBCOMPONENT_TCNUMOOLTABLE) || GetTCNumOolTables()->Map(nTCNumOolTables)) && (sDatabaseHeader.dwTCNumOolTables[1] = (DWORD)nTCNumOolTables.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTCNumOolTables.GetData(), (cbInfo = (DWORD)nTCNumOolTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTCTxtOolTables[0] = ((((nComponents & DATABASE_COMPONENT_TCPARAMETER) != DATABASE_COMPONENT_TCPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TCTXTOOLTABLE) != DATABASE_SUBCOMPONENT_TCTXTOOLTABLE) || GetTCTxtOolTables()->Map(nTCTxtOolTables)) && (sDatabaseHeader.dwTCTxtOolTables[1] = (DWORD)nTCTxtOolTables.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTCTxtOolTables.GetData(), (cbInfo = (DWORD)nTCTxtOolTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTCPreExeGroups[0] = (((nComponents & DATABASE_COMPONENT_TCFUNCTION) != DATABASE_COMPONENT_TCFUNCTION || (nComponents & DATABASE_SUBCOMPONENT_TCFUNCTIONPREEXEGROUP) != DATABASE_SUBCOMPONENT_TCFUNCTIONPREEXEGROUP || GetTCPreExeGroups()->Map(nTCPreExeGroups)) && (sDatabaseHeader.dwTCPreExeGroups[1] = (DWORD)nTCPreExeGroups.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTCPreExeGroups.GetData(), (cbInfo = (DWORD)nTCPreExeGroups.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTCExeVerGroups[0] = (((nComponents & DATABASE_COMPONENT_TCFUNCTION) != DATABASE_COMPONENT_TCFUNCTION || (nComponents & DATABASE_SUBCOMPONENT_TCFUNCTIONEXEVERGROUP) != DATABASE_SUBCOMPONENT_TCFUNCTIONEXEVERGROUP || GetTCExeVerGroups()->Map(nTCExeVerGroups)) && (sDatabaseHeader.dwTCExeVerGroups[1] = (DWORD)nTCExeVerGroups.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTCExeVerGroups.GetData(), (cbInfo = (DWORD)nTCExeVerGroups.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTMPacketGroups[0] = (((nComponents & DATABASE_COMPONENT_TMPACKET) != DATABASE_COMPONENT_TMPACKET || (nComponents & DATABASE_SUBCOMPONENT_TMPACKETGROUP) != DATABASE_SUBCOMPONENT_TMPACKETGROUP || GetTMPacketGroups()->Map(nTMPacketGroups)) && (sDatabaseHeader.dwTMPacketGroups[1] = (DWORD)nTMPacketGroups.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTMPacketGroups.GetData(), (cbInfo = (DWORD)nTMPacketGroups.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTMPacketHeaders[0] = (((nComponents & DATABASE_COMPONENT_TMPACKET) != DATABASE_COMPONENT_TMPACKET || (nComponents & DATABASE_SUBCOMPONENT_TMPACKETHEADER) != DATABASE_SUBCOMPONENT_TMPACKETHEADER || GetTMPacketHeaders()->Map(nTMPacketHeaders)) && (sDatabaseHeader.dwTMPacketHeaders[1] = (DWORD)nTMPacketHeaders.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTMPacketHeaders.GetData(), (cbInfo = (DWORD)nTMPacketHeaders.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTMPacketStreams[0] = (((nComponents & DATABASE_COMPONENT_TMPACKET) != DATABASE_COMPONENT_TMPACKET || (nComponents & DATABASE_SUBCOMPONENT_TMPACKETSTREAM) != DATABASE_SUBCOMPONENT_TMPACKETSTREAM || GetTMPacketStreams()->Map(nTMPacketStreams)) && (sDatabaseHeader.dwTMPacketStreams[1] = (DWORD)nTMPacketStreams.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTMPacketStreams.GetData(), (cbInfo = (DWORD)nTMPacketStreams.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTCParameterSets[0] = (((nComponents & DATABASE_COMPONENT_TCFUNCTION) != DATABASE_COMPONENT_TCFUNCTION || (nComponents & DATABASE_SUBCOMPONENT_TCPARAMETERSET) != DATABASE_SUBCOMPONENT_TCPARAMETERSET || GetTCParameterSets()->Map(nTCParameterSets)) && (sDatabaseHeader.dwTCParameterSets[1] = (DWORD)nTCParameterSets.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTCParameterSets.GetData(), (cbInfo = (DWORD)nTCParameterSets.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTCFunctionBlocks[0] = (((nComponents & DATABASE_COMPONENT_TCSEQUENCE) != DATABASE_COMPONENT_TCSEQUENCE || (nComponents & DATABASE_SUBCOMPONENT_TCFUNCTIONBLOCK) != DATABASE_SUBCOMPONENT_TCFUNCTIONBLOCK || GetTCFunctionBlocks()->Map(nTCFunctionBlocks)) && (sDatabaseHeader.dwTCFunctionBlocks[1] = (DWORD)nTCFunctionBlocks.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTCFunctionBlocks.GetData(), (cbInfo = (DWORD)nTCFunctionBlocks.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTMParameterGroups[0] = (((nComponents & DATABASE_COMPONENT_TMPARAMETER) != DATABASE_COMPONENT_TMPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TMPARAMETERGROUP) != DATABASE_SUBCOMPONENT_TMPARAMETERGROUP || GetTMParameterGroups()->Map(nTMParameterGroups)) && (sDatabaseHeader.dwTMParameterGroups[1] = (DWORD)nTMParameterGroups.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTMParameterGroups.GetData(), (cbInfo = (DWORD)nTMParameterGroups.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTCPacketParameters[0] = (((nComponents & DATABASE_COMPONENT_TCFUNCTION) != DATABASE_COMPONENT_TCFUNCTION || (nComponents & DATABASE_SUBCOMPONENT_TCFUNCTIONPACKETPARAMETER) != DATABASE_SUBCOMPONENT_TCFUNCTIONPACKETPARAMETER || GetTCPacketParameters()->Map(nTCPacketParameters)) && (sDatabaseHeader.dwTCPacketParameters[1] = (DWORD)nTCPacketParameters.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTCPacketParameters.GetData(), (cbInfo = (DWORD)nTCPacketParameters.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTMPacketIdentifications[0] = (((nComponents & DATABASE_COMPONENT_TMPACKET) != DATABASE_COMPONENT_TMPACKET || (nComponents & DATABASE_SUBCOMPONENT_TMPACKETIDENTIFICATION) != DATABASE_SUBCOMPONENT_TMPACKETIDENTIFICATION || GetTMPacketIdentifications()->Map(nTMPacketIdentifications)) && (sDatabaseHeader.dwTMPacketIdentifications[1] = (DWORD)nTMPacketIdentifications.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTMPacketIdentifications.GetData(), (cbInfo = (DWORD)nTMPacketIdentifications.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTMPacketIdentificationCriteria[0] = (((nComponents & DATABASE_COMPONENT_TMPACKET) != DATABASE_COMPONENT_TMPACKET || (nComponents & DATABASE_SUBCOMPONENT_TMPACKETIDENTIFICATION) != DATABASE_SUBCOMPONENT_TMPACKETIDENTIFICATION || GetTMPacketIdentificationCriteria()->Map(nTMPacketIdentificationCriteria)) && (sDatabaseHeader.dwTMPacketIdentificationCriteria[1] = (DWORD)nTMPacketIdentificationCriteria.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTMPacketIdentificationCriteria.GetData(), (cbInfo = (DWORD)nTMPacketIdentificationCriteria.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwOBProcessorMemoryImages[0] = (((nComponents & DATABASE_COMPONENT_OBPROCESSOR) != DATABASE_COMPONENT_OBPROCESSOR || (nComponents & DATABASE_SUBCOMPONENT_OBPROCESSORMEMORYIMAGE) != DATABASE_SUBCOMPONENT_OBPROCESSORMEMORYIMAGE || GetOBProcessorMemoryImages()->Map(nOBProcessorMemoryImages)) && (sDatabaseHeader.dwOBProcessorMemoryImages[1] = (DWORD)nOBProcessorMemoryImages.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nOBProcessorMemoryImages.GetData(), (cbInfo = (DWORD)nOBProcessorMemoryImages.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwTMPacketSubTags[0] = (((nComponents & DATABASE_COMPONENT_TMPACKET) != DATABASE_COMPONENT_TMPACKET || GetTMPacketSubTags()->Map(nTMPacketSubTags)) && (sDatabaseHeader.dwTMPacketSubTags[1] = (DWORD)nTMPacketSubTags.GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nTMPacketSubTags.GetData(), (cbInfo = (DWORD)nTMPacketSubTags.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwANDDirectory[0][0] = (((nComponents & (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_NORMAL)) != (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_NORMAL) || m_pANDs[0]->Map(nANDs[0][0], TRUE)) && (sDatabaseHeader.dwANDDirectory[0][1] = (DWORD)nANDs[0][0].GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nANDs[0][0].GetData(), (cbInfo = (DWORD)nANDs[0][0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwANDDirectory[1][0] = (((nComponents & (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_GENERIC)) != (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_GENERIC) || m_pANDs[1]->Map(nANDs[0][1], TRUE)) && (sDatabaseHeader.dwANDDirectory[1][1] = (DWORD)nANDs[0][1].GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nANDs[0][1].GetData(), (cbInfo = (DWORD)nANDs[0][1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwANDs[0][0] = (((nComponents & (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_NORMAL)) != (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_NORMAL) || m_pANDs[0]->Map(nANDs[1][0])) && (sDatabaseHeader.dwANDs[0][1] = (DWORD)nANDs[1][0].GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nANDs[1][0].GetData(), (cbInfo = (DWORD)nANDs[1][0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwANDs[1][0] = (((nComponents & (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_GENERIC)) != (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_GENERIC) || m_pANDs[1]->Map(nANDs[1][1])) && (sDatabaseHeader.dwANDs[1][1] = (DWORD)nANDs[1][1].GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nANDs[1][1].GetData(), (cbInfo = (DWORD)nANDs[1][1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwGRDDirectory[0] = (((nComponents & DATABASE_COMPONENT_GRD) != DATABASE_COMPONENT_GRD || m_pGRDs->Map(nGRDs[0], TRUE)) && (sDatabaseHeader.dwGRDDirectory[1] = (DWORD)nGRDs[0].GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nGRDs[0].GetData(), (cbInfo = (DWORD)nGRDs[0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwGRDs[0] = (((nComponents & DATABASE_COMPONENT_GRD) != DATABASE_COMPONENT_GRD || m_pGRDs->Map(nGRDs[1])) && (sDatabaseHeader.dwGRDs[1] = (DWORD)nGRDs[1].GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nGRDs[1].GetData(), (cbInfo = (DWORD)nGRDs[1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwMMDDirectory[0] = (((nComponents & DATABASE_COMPONENT_MMD) != DATABASE_COMPONENT_MMD || m_pMMDs->Map(nMMDs[0], TRUE)) && (sDatabaseHeader.dwMMDDirectory[1] = (DWORD)nMMDs[0].GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nMMDs[0].GetData(), (cbInfo = (DWORD)nMMDs[0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwMMDs[0] = (((nComponents & DATABASE_COMPONENT_MMD) != DATABASE_COMPONENT_MMD || m_pMMDs->Map(nMMDs[1])) && (sDatabaseHeader.dwMMDs[1] = (DWORD)nMMDs[1].GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nMMDs[1].GetData(), (cbInfo = (DWORD)nMMDs[1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwPODDirectory[0] = (((nComponents & DATABASE_COMPONENT_POD) != DATABASE_COMPONENT_POD || m_pPODs->Map(nPODs[0], TRUE)) && (sDatabaseHeader.dwPODDirectory[1] = (DWORD)nPODs[0].GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nPODs[0].GetData(), (cbInfo = (DWORD)nPODs[0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwPODs[0] = (((nComponents & DATABASE_COMPONENT_POD) != DATABASE_COMPONENT_POD || m_pPODs->Map(nPODs[1])) && (sDatabaseHeader.dwPODs[1] = (DWORD)nPODs[1].GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nPODs[1].GetData(), (cbInfo = (DWORD)nPODs[1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwScriptsDirectory[0] = (((nComponents & DATABASE_COMPONENT_SCRIPT) != DATABASE_COMPONENT_SCRIPT || m_pScripts->Map(nScripts[0], TRUE)) && (sDatabaseHeader.dwScriptsDirectory[1] = (DWORD)nScripts[0].GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nScripts[0].GetData(), (cbInfo = (DWORD)nScripts[0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&
					(sDatabaseHeader.dwScripts[0] = (((nComponents & DATABASE_COMPONENT_SCRIPT) != DATABASE_COMPONENT_SCRIPT || m_pScripts->Map(nScripts[1])) && (sDatabaseHeader.dwScripts[1] = (DWORD)nScripts[1].GetSize()) >= 0) ? (DWORD)cFile.GetPosition() : -1) != (DWORD)-1 && WriteFile(cFile.m_hFile, nScripts[1].GetData(), (cbInfo = (DWORD)nScripts[1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  SetEndOfFile((HANDLE)cFile.m_hFile) &&
					(sDatabaseHeader.dwSize = sizeof(sDatabaseHeader)) > 0 && SetFilePointer(cFile.m_hFile, 0, (PLONG)NULL, FILE_BEGIN) == 0 && WriteFile(cFile.m_hFile, &sDatabaseHeader, (cbInfo = sizeof(sDatabaseHeader)), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo)
				{
					if (CFileEx::SetAttributes(szFileName, CFileEx::GetAttributes(szFileName) | FILE_ATTRIBUTE_READONLY) && SecureDirectoryOrFile(szFileName))
					{
						UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
						cFile.Close();
						return TRUE;
					}
				}
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
		cFile.Remove(szFileName);
	}
	return FALSE;
}

UINT CBinaryDatabase::Load(ULONGLONG nComponents, BOOL bAll)
{
	DWORD  cbFile;
	DWORD  cbInfo;
	CFileEx  cFile;
	CString  szFileName;
	CByteArray  nHeader;
	CByteArray  nTMPackets;
	CByteArray  nTCPackets;
	CByteArray  nTCFunctions;
	CByteArray  nTCSequences;
	CByteArray  nTCProcedures;
	CByteArray  nOBProcessors;
	CByteArray  nTMParameters;
	CByteArray  nTCParameters;
	CByteArray  nTMNumCalTables;
	CByteArray  nTMTxtCalTables;
	CByteArray  nTMNumOolTables;
	CByteArray  nTMTxtOolTables;
	CByteArray  nTCNumCalTables;
	CByteArray  nTCTxtCalTables;
	CByteArray  nTCNumOolTables;
	CByteArray  nTCTxtOolTables;
	CByteArray  nTCPreExeGroups;
	CByteArray  nTCExeVerGroups;
	CByteArray  nTMPacketGroups;
	CByteArray  nTMPacketHeaders;
	CByteArray  nTMPacketStreams;
	CByteArray  nTCParameterSets;
	CByteArray  nTCFunctionBlocks;
	CByteArray  nTMParameterGroups;
	CByteArray  nTCPacketParameters;
	CByteArray  nTMPacketIdentifications;
	CByteArray  nTMPacketIdentificationCriteria;
	CByteArray  nOBProcessorMemoryImages;
	CByteArray  nTMPacketSubTags;
	CByteArray  nANDs[2][2];
	CByteArray  nGRDs[2];
	CByteArray  nMMDs[2];
	CByteArray  nPODs[2];
	CByteArray  nScripts[2];
	CANDLayouts  pANDLayouts[2];
	CGRDLayouts  pGRDLayouts;
	CMMDLayouts  pMMDLayouts;
	CPODLayouts  pPODLayouts;
	CAutomationScripts  pScriptLayouts;
	CDatabaseTMPackets  pDatabaseTMPackets;
	CDatabaseTCPackets  pDatabaseTCPackets;
	CDatabaseTCFunctions  pDatabaseTCFunctions;
	CDatabaseTCSequences  pDatabaseTCSequences;
	CDatabaseTCProcedures  pDatabaseTCProcedures;
	CDatabaseOBProcessors  pDatabaseOBProcessors;
	CDatabaseTMParameters  pDatabaseTMParameters;
	CDatabaseTCParameters  pDatabaseTCParameters;
	CDatabaseTMNumCalTables  pDatabaseTMNumCalTables;
	CDatabaseTMTxtCalTables  pDatabaseTMTxtCalTables;
	CDatabaseTMNumOolTables  pDatabaseTMNumOolTables;
	CDatabaseTMTxtOolTables  pDatabaseTMTxtOolTables;
	CDatabaseTCNumCalTables  pDatabaseTCNumCalTables;
	CDatabaseTCTxtCalTables  pDatabaseTCTxtCalTables;
	CDatabaseTCNumOolTables  pDatabaseTCNumOolTables;
	CDatabaseTCTxtOolTables  pDatabaseTCTxtOolTables;
	CDatabaseTCPreExeGroups  pDatabaseTCPreExeGroups;
	CDatabaseTCExeVerGroups  pDatabaseTCExeVerGroups;
	CDatabaseTMPacketGroups  pDatabaseTMPacketGroups;
	CDatabaseTMPacketHeaders  pDatabaseTMPacketHeaders;
	CDatabaseTMPacketStreams  pDatabaseTMPacketStreams;
	CDatabaseTCParameterSets  pDatabaseTCParameterSets;
	CDatabaseTCFunctionBlocks  pDatabaseTCFunctionBlocks;
	CDatabaseTMParameterGroups  pDatabaseTMParameterGroups;
	CDatabaseTCPacketParameters  pDatabaseTCPacketParameters;
	CDatabaseTMPacketIdentifications  pDatabaseTMPacketIdentifications;
	CDatabaseTMPacketIdentificationCriteria  pDatabaseTMPacketIdentificationCriteria;
	CDatabaseOBProcessorMemoryImages  pDatabaseOBProcessorMemoryImages;
	CDatabaseTMPacket  pDatabaseTMPacketSubTags;
	DATABASEHEADER  sDatabaseHeader = { 0 };
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open((szFileName = GetLoadFileName()), CFile::modeRead | CFile::shareDenyNone))
	{
		if (LockFileEx(cFile.m_hFile, 0, 0, MAXDWORD, MAXDWORD, (LPOVERLAPPED)&fOverlapped))
		{
			if (ReadFile(cFile.m_hFile, &sDatabaseHeader, (cbInfo = sizeof(sDatabaseHeader)), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  sDatabaseHeader.dwSize == sizeof(sDatabaseHeader))
			{
				nHeader.SetSize(sDatabaseHeader.dwHeader[1]);
				nTMPackets.SetSize(sDatabaseHeader.dwTMPackets[1]);
				nTCPackets.SetSize(sDatabaseHeader.dwTCPackets[1]);
				nTCFunctions.SetSize(sDatabaseHeader.dwTCFunctions[1]);
				nTCSequences.SetSize(sDatabaseHeader.dwTCSequences[1]);
				nTCProcedures.SetSize(sDatabaseHeader.dwTCProcedures[1]);
				nOBProcessors.SetSize(sDatabaseHeader.dwOBProcessors[1]);
				nTMParameters.SetSize(sDatabaseHeader.dwTMParameters[1]);
				nTCParameters.SetSize(sDatabaseHeader.dwTCParameters[1]);
				nTMNumCalTables.SetSize(sDatabaseHeader.dwTMNumCalTables[1]);
				nTMTxtCalTables.SetSize(sDatabaseHeader.dwTMTxtCalTables[1]);
				nTMNumOolTables.SetSize(sDatabaseHeader.dwTMNumOolTables[1]);
				nTMTxtOolTables.SetSize(sDatabaseHeader.dwTMTxtOolTables[1]);
				nTCNumCalTables.SetSize(sDatabaseHeader.dwTCNumCalTables[1]);
				nTCTxtCalTables.SetSize(sDatabaseHeader.dwTCTxtCalTables[1]);
				nTCNumOolTables.SetSize(sDatabaseHeader.dwTCNumOolTables[1]);
				nTCTxtOolTables.SetSize(sDatabaseHeader.dwTCTxtOolTables[1]);
				nTCPreExeGroups.SetSize(sDatabaseHeader.dwTCPreExeGroups[1]);
				nTCExeVerGroups.SetSize(sDatabaseHeader.dwTCExeVerGroups[1]);
				nTMPacketGroups.SetSize(sDatabaseHeader.dwTMPacketGroups[1]);
				nTMPacketHeaders.SetSize(sDatabaseHeader.dwTMPacketHeaders[1]);
				nTMPacketStreams.SetSize(sDatabaseHeader.dwTMPacketStreams[1]);
				nTCParameterSets.SetSize(sDatabaseHeader.dwTCParameterSets[1]);
				nTCFunctionBlocks.SetSize(sDatabaseHeader.dwTCFunctionBlocks[1]);
				nTMParameterGroups.SetSize(sDatabaseHeader.dwTMParameterGroups[1]);
				nTCPacketParameters.SetSize(sDatabaseHeader.dwTCPacketParameters[1]);
				nTMPacketIdentifications.SetSize(sDatabaseHeader.dwTMPacketIdentifications[1]);
				nTMPacketIdentificationCriteria.SetSize(sDatabaseHeader.dwTMPacketIdentificationCriteria[1]);
				nOBProcessorMemoryImages.SetSize(sDatabaseHeader.dwOBProcessorMemoryImages[1]);
				nTMPacketSubTags.SetSize(sDatabaseHeader.dwTMPacketSubTags[1]);
				nANDs[0][0].SetSize(sDatabaseHeader.dwANDDirectory[0][1]);
				nANDs[0][1].SetSize(sDatabaseHeader.dwANDDirectory[1][1]);
				nGRDs[0].SetSize(sDatabaseHeader.dwGRDDirectory[1]);
				nMMDs[0].SetSize(sDatabaseHeader.dwMMDDirectory[1]);
				nPODs[0].SetSize(sDatabaseHeader.dwPODDirectory[1]);
				nScripts[0].SetSize(sDatabaseHeader.dwScriptsDirectory[1]);
				nANDs[1][0].SetSize(sDatabaseHeader.dwANDs[0][1]);
				nANDs[1][1].SetSize(sDatabaseHeader.dwANDs[1][1]);
				nGRDs[1].SetSize(sDatabaseHeader.dwGRDs[1]);
				nMMDs[1].SetSize(sDatabaseHeader.dwMMDs[1]);
				nPODs[1].SetSize(sDatabaseHeader.dwPODs[1]);
				nScripts[1].SetSize(sDatabaseHeader.dwScripts[1]);
				if (nHeader.GetSize() == sDatabaseHeader.dwHeader[1] && nTMPackets.GetSize() == sDatabaseHeader.dwTMPackets[1] && nTCPackets.GetSize() == sDatabaseHeader.dwTCPackets[1] && nTCFunctions.GetSize() == sDatabaseHeader.dwTCFunctions[1] && nTCSequences.GetSize() == sDatabaseHeader.dwTCSequences[1] && nTCProcedures.GetSize() == sDatabaseHeader.dwTCProcedures[1] && nOBProcessors.GetSize() == sDatabaseHeader.dwOBProcessors[1] && nTMParameters.GetSize() == sDatabaseHeader.dwTMParameters[1] && nTCParameters.GetSize() == sDatabaseHeader.dwTCParameters[1] && nTMNumCalTables.GetSize() == sDatabaseHeader.dwTMNumCalTables[1] && nTMTxtCalTables.GetSize() == sDatabaseHeader.dwTMTxtCalTables[1] && nTMNumOolTables.GetSize() == sDatabaseHeader.dwTMNumOolTables[1] && nTMTxtOolTables.GetSize() == sDatabaseHeader.dwTMTxtOolTables[1] && nTCNumCalTables.GetSize() == sDatabaseHeader.dwTCNumCalTables[1] && nTCTxtCalTables.GetSize() == sDatabaseHeader.dwTCTxtCalTables[1] && nTCNumOolTables.GetSize() == sDatabaseHeader.dwTCNumOolTables[1] && nTCTxtOolTables.GetSize() == sDatabaseHeader.dwTCTxtOolTables[1] && nTCPreExeGroups.GetSize() == sDatabaseHeader.dwTCPreExeGroups[1] && nTCExeVerGroups.GetSize() == sDatabaseHeader.dwTCExeVerGroups[1] && nTMPacketGroups.GetSize() == sDatabaseHeader.dwTMPacketGroups[1] && nTMPacketHeaders.GetSize() == sDatabaseHeader.dwTMPacketHeaders[1] && nTMPacketStreams.GetSize() == sDatabaseHeader.dwTMPacketStreams[1] && nTCParameterSets.GetSize() == sDatabaseHeader.dwTCParameterSets[1] && nTCFunctionBlocks.GetSize() == sDatabaseHeader.dwTCFunctionBlocks[1] && nTMParameterGroups.GetSize() == sDatabaseHeader.dwTMParameterGroups[1] && nTCPacketParameters.GetSize() == sDatabaseHeader.dwTCPacketParameters[1] && nTMPacketIdentifications.GetSize() == sDatabaseHeader.dwTMPacketIdentifications[1] && nTMPacketIdentificationCriteria.GetSize() == sDatabaseHeader.dwTMPacketIdentificationCriteria[1] && nOBProcessorMemoryImages.GetSize() == sDatabaseHeader.dwOBProcessorMemoryImages[1] && nTMPacketSubTags.GetSize() == sDatabaseHeader.dwTMPacketSubTags[1] && nANDs[0][0].GetSize() == sDatabaseHeader.dwANDDirectory[0][1] && nANDs[0][1].GetSize() == sDatabaseHeader.dwANDDirectory[1][1] && nGRDs[0].GetSize() == sDatabaseHeader.dwGRDDirectory[1] && nMMDs[0].GetSize() == sDatabaseHeader.dwMMDDirectory[1] && nPODs[0].GetSize() == sDatabaseHeader.dwPODDirectory[1] && nScripts[0].GetSize() == sDatabaseHeader.dwScriptsDirectory[1] && nANDs[1][0].GetSize() == sDatabaseHeader.dwANDs[0][1] && nANDs[1][1].GetSize() == sDatabaseHeader.dwANDs[1][1] && nGRDs[1].GetSize() == sDatabaseHeader.dwGRDs[1] && nMMDs[1].GetSize() == sDatabaseHeader.dwMMDs[1] && nPODs[1].GetSize() == sDatabaseHeader.dwPODs[1] && nScripts[1].GetSize() == sDatabaseHeader.dwScripts[1])
				{
					if (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwHeader[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwHeader[0] && ReadFile(cFile.m_hFile, nHeader.GetData(), (cbInfo = (DWORD)nHeader.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  CDatabaseProfileInfo::Unmap(nHeader) &&
						((nComponents & DATABASE_COMPONENT_TMPACKET) != DATABASE_COMPONENT_TMPACKET || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMPackets[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMPackets[0] && ReadFile(cFile.m_hFile, nTMPackets.GetData(), (cbInfo = (DWORD)nTMPackets.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTMPackets.Unmap(nTMPackets))) &&
						((nComponents & DATABASE_COMPONENT_TCFUNCTION) != DATABASE_COMPONENT_TCFUNCTION || (nComponents & DATABASE_SUBCOMPONENT_TCFUNCTIONPACKET) != DATABASE_SUBCOMPONENT_TCFUNCTIONPACKET || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCPackets[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCPackets[0] && ReadFile(cFile.m_hFile, nTCPackets.GetData(), (cbInfo = (DWORD)nTCPackets.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTCPackets.Unmap(nTCPackets))) &&
						((nComponents & DATABASE_COMPONENT_TCFUNCTION) != DATABASE_COMPONENT_TCFUNCTION || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCFunctions[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCFunctions[0] && ReadFile(cFile.m_hFile, nTCFunctions.GetData(), (cbInfo = (DWORD)nTCFunctions.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTCFunctions.Unmap(nTCFunctions))) &&
						((nComponents & DATABASE_COMPONENT_TCSEQUENCE) != DATABASE_COMPONENT_TCSEQUENCE || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCSequences[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCSequences[0] && ReadFile(cFile.m_hFile, nTCSequences.GetData(), (cbInfo = (DWORD)nTCSequences.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo &&  pDatabaseTCSequences.Unmap(nTCSequences))) &&
						((nComponents & DATABASE_COMPONENT_TCPROCEDURE) != DATABASE_COMPONENT_TCPROCEDURE || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCProcedures[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCProcedures[0] && ReadFile(cFile.m_hFile, nTCProcedures.GetData(), (cbInfo = (DWORD)nTCProcedures.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTCProcedures.Unmap(nTCProcedures))) &&
						((nComponents & DATABASE_COMPONENT_OBPROCESSOR) != DATABASE_COMPONENT_OBPROCESSOR || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwOBProcessors[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwOBProcessors[0] && ReadFile(cFile.m_hFile, nOBProcessors.GetData(), (cbInfo = (DWORD)nOBProcessors.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseOBProcessors.Unmap(nOBProcessors))) &&
						((nComponents & DATABASE_COMPONENT_TMPARAMETER) != DATABASE_COMPONENT_TMPARAMETER || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMParameters[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMParameters[0] && ReadFile(cFile.m_hFile, nTMParameters.GetData(), (cbInfo = (DWORD)nTMParameters.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTMParameters.Unmap(nTMParameters))) &&
						((nComponents & DATABASE_COMPONENT_TCPARAMETER) != DATABASE_COMPONENT_TCPARAMETER || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCParameters[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCParameters[0] && ReadFile(cFile.m_hFile, nTCParameters.GetData(), (cbInfo = (DWORD)nTCParameters.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTCParameters.Unmap(nTCParameters))) &&
						(((nComponents & DATABASE_COMPONENT_TMPARAMETER) != DATABASE_COMPONENT_TMPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TMNUMCALTABLE) != DATABASE_SUBCOMPONENT_TMNUMCALTABLE) || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMNumCalTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMNumCalTables[0] && ReadFile(cFile.m_hFile, nTMNumCalTables.GetData(), (cbInfo = (DWORD)nTMNumCalTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTMNumCalTables.Unmap(nTMNumCalTables))) &&
						(((nComponents & DATABASE_COMPONENT_TMPARAMETER) != DATABASE_COMPONENT_TMPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TMTXTCALTABLE) != DATABASE_SUBCOMPONENT_TMTXTCALTABLE) || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMTxtCalTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMTxtCalTables[0] && ReadFile(cFile.m_hFile, nTMTxtCalTables.GetData(), (cbInfo = (DWORD)nTMTxtCalTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTMTxtCalTables.Unmap(nTMTxtCalTables))) &&
						(((nComponents & DATABASE_COMPONENT_TMPARAMETER) != DATABASE_COMPONENT_TMPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TMNUMOOLTABLE) != DATABASE_SUBCOMPONENT_TMNUMOOLTABLE) || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMNumOolTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMNumOolTables[0] && ReadFile(cFile.m_hFile, nTMNumOolTables.GetData(), (cbInfo = (DWORD)nTMNumOolTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTMNumOolTables.Unmap(nTMNumOolTables))) &&
						(((nComponents & DATABASE_COMPONENT_TMPARAMETER) != DATABASE_COMPONENT_TMPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TMTXTOOLTABLE) != DATABASE_SUBCOMPONENT_TMTXTOOLTABLE) || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMTxtOolTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMTxtOolTables[0] && ReadFile(cFile.m_hFile, nTMTxtOolTables.GetData(), (cbInfo = (DWORD)nTMTxtOolTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTMTxtOolTables.Unmap(nTMTxtOolTables))) &&
						(((nComponents & DATABASE_COMPONENT_TCPARAMETER) != DATABASE_COMPONENT_TCPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TCNUMCALTABLE) != DATABASE_SUBCOMPONENT_TCNUMCALTABLE) || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCNumCalTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCNumCalTables[0] && ReadFile(cFile.m_hFile, nTCNumCalTables.GetData(), (cbInfo = (DWORD)nTCNumCalTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTCNumCalTables.Unmap(nTCNumCalTables))) &&
						(((nComponents & DATABASE_COMPONENT_TCPARAMETER) != DATABASE_COMPONENT_TCPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TCTXTCALTABLE) != DATABASE_SUBCOMPONENT_TCTXTCALTABLE) || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCTxtCalTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCTxtCalTables[0] && ReadFile(cFile.m_hFile, nTCTxtCalTables.GetData(), (cbInfo = (DWORD)nTCTxtCalTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTCTxtCalTables.Unmap(nTCTxtCalTables))) &&
						(((nComponents & DATABASE_COMPONENT_TCPARAMETER) != DATABASE_COMPONENT_TCPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TCNUMOOLTABLE) != DATABASE_SUBCOMPONENT_TCNUMOOLTABLE) || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCNumOolTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCNumOolTables[0] && ReadFile(cFile.m_hFile, nTCNumOolTables.GetData(), (cbInfo = (DWORD)nTCNumOolTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTCNumOolTables.Unmap(nTCNumOolTables))) &&
						(((nComponents & DATABASE_COMPONENT_TCPARAMETER) != DATABASE_COMPONENT_TCPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TCTXTOOLTABLE) != DATABASE_SUBCOMPONENT_TCTXTOOLTABLE) || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCTxtOolTables[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCTxtOolTables[0] && ReadFile(cFile.m_hFile, nTCTxtOolTables.GetData(), (cbInfo = (DWORD)nTCTxtOolTables.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTCTxtOolTables.Unmap(nTCTxtOolTables))) &&
						((nComponents & DATABASE_COMPONENT_TCFUNCTION) != DATABASE_COMPONENT_TCFUNCTION || (nComponents & DATABASE_SUBCOMPONENT_TCFUNCTIONPREEXEGROUP) != DATABASE_SUBCOMPONENT_TCFUNCTIONPREEXEGROUP || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCPreExeGroups[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCPreExeGroups[0] && ReadFile(cFile.m_hFile, nTCPreExeGroups.GetData(), (cbInfo = (DWORD)nTCPreExeGroups.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTCPreExeGroups.Unmap(nTCPreExeGroups))) &&
						((nComponents & DATABASE_COMPONENT_TCFUNCTION) != DATABASE_COMPONENT_TCFUNCTION || (nComponents & DATABASE_SUBCOMPONENT_TCFUNCTIONEXEVERGROUP) != DATABASE_SUBCOMPONENT_TCFUNCTIONEXEVERGROUP || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCExeVerGroups[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCExeVerGroups[0] && ReadFile(cFile.m_hFile, nTCExeVerGroups.GetData(), (cbInfo = (DWORD)nTCExeVerGroups.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTCExeVerGroups.Unmap(nTCExeVerGroups))) &&
						((nComponents & DATABASE_COMPONENT_TMPACKET) != DATABASE_COMPONENT_TMPACKET || (nComponents & DATABASE_SUBCOMPONENT_TMPACKETGROUP) != DATABASE_SUBCOMPONENT_TMPACKETGROUP || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMPacketGroups[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMPacketGroups[0] && ReadFile(cFile.m_hFile, nTMPacketGroups.GetData(), (cbInfo = (DWORD)nTMPacketGroups.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTMPacketGroups.Unmap(nTMPacketGroups))) &&
						((nComponents & DATABASE_COMPONENT_TMPACKET) != DATABASE_COMPONENT_TMPACKET || (nComponents & DATABASE_SUBCOMPONENT_TMPACKETHEADER) != DATABASE_SUBCOMPONENT_TMPACKETHEADER || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMPacketHeaders[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMPacketHeaders[0] && ReadFile(cFile.m_hFile, nTMPacketHeaders.GetData(), (cbInfo = (DWORD)nTMPacketHeaders.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTMPacketHeaders.Unmap(nTMPacketHeaders))) &&
						((nComponents & DATABASE_COMPONENT_TMPACKET) != DATABASE_COMPONENT_TMPACKET || (nComponents & DATABASE_SUBCOMPONENT_TMPACKETSTREAM) != DATABASE_SUBCOMPONENT_TMPACKETSTREAM || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMPacketStreams[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMPacketStreams[0] && ReadFile(cFile.m_hFile, nTMPacketStreams.GetData(), (cbInfo = (DWORD)nTMPacketStreams.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTMPacketStreams.Unmap(nTMPacketStreams))) &&
						((nComponents & DATABASE_COMPONENT_TCFUNCTION) != DATABASE_COMPONENT_TCFUNCTION || (nComponents & DATABASE_SUBCOMPONENT_TCPARAMETERSET) != DATABASE_SUBCOMPONENT_TCPARAMETERSET || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCParameterSets[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCParameterSets[0] && ReadFile(cFile.m_hFile, nTCParameterSets.GetData(), (cbInfo = (DWORD)nTCParameterSets.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTCParameterSets.Unmap(nTCParameterSets))) &&
						((nComponents & DATABASE_COMPONENT_TCSEQUENCE) != DATABASE_COMPONENT_TCSEQUENCE || (nComponents & DATABASE_SUBCOMPONENT_TCFUNCTIONBLOCK) != DATABASE_SUBCOMPONENT_TCFUNCTIONBLOCK || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCFunctionBlocks[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCFunctionBlocks[0] && ReadFile(cFile.m_hFile, nTCFunctionBlocks.GetData(), (cbInfo = (DWORD)nTCFunctionBlocks.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTCFunctionBlocks.Unmap(nTCFunctionBlocks))) &&
						((nComponents & DATABASE_COMPONENT_TMPARAMETER) != DATABASE_COMPONENT_TMPARAMETER || (nComponents & DATABASE_SUBCOMPONENT_TMPARAMETERGROUP) != DATABASE_SUBCOMPONENT_TMPARAMETERGROUP || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMParameterGroups[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMParameterGroups[0] && ReadFile(cFile.m_hFile, nTMParameterGroups.GetData(), (cbInfo = (DWORD)nTMParameterGroups.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTMParameterGroups.Unmap(nTMParameterGroups))) &&
						((nComponents & DATABASE_COMPONENT_TCFUNCTION) != DATABASE_COMPONENT_TCFUNCTION || (nComponents & DATABASE_SUBCOMPONENT_TCFUNCTIONPACKETPARAMETER) != DATABASE_SUBCOMPONENT_TCFUNCTIONPACKETPARAMETER || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCPacketParameters[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCPacketParameters[0] && ReadFile(cFile.m_hFile, nTCPacketParameters.GetData(), (cbInfo = (DWORD)nTCPacketParameters.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTCPacketParameters.Unmap(nTCPacketParameters))) &&
						((nComponents & DATABASE_COMPONENT_TMPACKET) != DATABASE_COMPONENT_TMPACKET || (nComponents & DATABASE_SUBCOMPONENT_TMPACKETIDENTIFICATION) != DATABASE_SUBCOMPONENT_TMPACKETIDENTIFICATION || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMPacketIdentifications[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMPacketIdentifications[0] && ReadFile(cFile.m_hFile, nTMPacketIdentifications.GetData(), (cbInfo = (DWORD)nTMPacketIdentifications.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTMPacketIdentifications.Unmap(nTMPacketIdentifications))) &&
						((nComponents & DATABASE_COMPONENT_TMPACKET) != DATABASE_COMPONENT_TMPACKET || (nComponents & DATABASE_SUBCOMPONENT_TMPACKETIDENTIFICATION) != DATABASE_SUBCOMPONENT_TMPACKETIDENTIFICATION || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMPacketIdentificationCriteria[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMPacketIdentificationCriteria[0] && ReadFile(cFile.m_hFile, nTMPacketIdentificationCriteria.GetData(), (cbInfo = (DWORD)nTMPacketIdentificationCriteria.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseTMPacketIdentificationCriteria.Unmap(nTMPacketIdentificationCriteria))) &&
						((nComponents & DATABASE_COMPONENT_OBPROCESSOR) != DATABASE_COMPONENT_OBPROCESSOR || (nComponents & DATABASE_SUBCOMPONENT_OBPROCESSORMEMORYIMAGE) != DATABASE_SUBCOMPONENT_OBPROCESSORMEMORYIMAGE || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwOBProcessorMemoryImages[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwOBProcessorMemoryImages[0] && ReadFile(cFile.m_hFile, nOBProcessorMemoryImages.GetData(), (cbInfo = (DWORD)nOBProcessorMemoryImages.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pDatabaseOBProcessorMemoryImages.Unmap(nOBProcessorMemoryImages))) &&
						((nComponents & DATABASE_COMPONENT_TMPACKET) != DATABASE_COMPONENT_TMPACKET || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTMPacketSubTags[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTMPacketSubTags[0] && ReadFile(cFile.m_hFile, nTMPacketSubTags.GetData(), (cbInfo = (DWORD)nTMPacketSubTags.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo && (!nTMPacketSubTags.GetSize() || pDatabaseTMPacketSubTags.Unmap(nTMPacketSubTags)))) &&
						((nComponents & (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_NORMAL)) != (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_NORMAL) || bAll || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwANDDirectory[0][0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwANDDirectory[0][0] && ReadFile(cFile.m_hFile, nANDs[0][0].GetData(), (cbInfo = (DWORD)nANDs[0][0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pANDLayouts[0].Unmap(nANDs[0][0], TRUE))) &&
						((nComponents & (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_GENERIC)) != (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_GENERIC) || bAll || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwANDDirectory[1][0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwANDDirectory[1][0] && ReadFile(cFile.m_hFile, nANDs[0][1].GetData(), (cbInfo = (DWORD)nANDs[0][1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pANDLayouts[1].Unmap(nANDs[0][1], TRUE))) &&
						((nComponents & DATABASE_COMPONENT_GRD) != DATABASE_COMPONENT_GRD || bAll || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwGRDDirectory[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwGRDDirectory[0] && ReadFile(cFile.m_hFile, nGRDs[0].GetData(), (cbInfo = (DWORD)nGRDs[0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pGRDLayouts.Unmap(nGRDs[0], TRUE))) &&
						((nComponents & DATABASE_COMPONENT_MMD) != DATABASE_COMPONENT_MMD || bAll || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwMMDDirectory[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwMMDDirectory[0] && ReadFile(cFile.m_hFile, nMMDs[0].GetData(), (cbInfo = (DWORD)nMMDs[0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pMMDLayouts.Unmap(nMMDs[0], TRUE))) &&
						((nComponents & DATABASE_COMPONENT_POD) != DATABASE_COMPONENT_POD || bAll || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwPODDirectory[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwPODDirectory[0] && ReadFile(cFile.m_hFile, nPODs[0].GetData(), (cbInfo = (DWORD)nPODs[0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pPODLayouts.Unmap(nPODs[0], TRUE))) &&
						((nComponents & DATABASE_COMPONENT_SCRIPT) != DATABASE_COMPONENT_SCRIPT || bAll || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwScriptsDirectory[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwScriptsDirectory[0] && ReadFile(cFile.m_hFile, nScripts[0].GetData(), (cbInfo = (DWORD)nScripts[0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pScriptLayouts.Unmap(nScripts[0], TRUE))) &&
						((nComponents & (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_NORMAL)) != (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_NORMAL) || !bAll || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwANDs[0][0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwANDs[0][0] && ReadFile(cFile.m_hFile, nANDs[1][0].GetData(), (cbInfo = (DWORD)nANDs[1][0].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pANDLayouts[0].Unmap(nANDs[1][0], FALSE))) &&
						((nComponents & (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_GENERIC)) != (DATABASE_COMPONENT_AND | DATABASE_SUBCOMPONENT_AND_GENERIC) || !bAll || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwANDs[1][0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwANDs[1][0] && ReadFile(cFile.m_hFile, nANDs[1][1].GetData(), (cbInfo = (DWORD)nANDs[1][1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pANDLayouts[1].Unmap(nANDs[1][1], FALSE))) &&
						((nComponents & DATABASE_COMPONENT_GRD) != DATABASE_COMPONENT_GRD || !bAll || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwGRDs[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwGRDs[0] && ReadFile(cFile.m_hFile, nGRDs[1].GetData(), (cbInfo = (DWORD)nGRDs[1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pGRDLayouts.Unmap(nGRDs[1], FALSE))) &&
						((nComponents & DATABASE_COMPONENT_MMD) != DATABASE_COMPONENT_MMD || !bAll || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwMMDs[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwMMDs[0] && ReadFile(cFile.m_hFile, nMMDs[1].GetData(), (cbInfo = (DWORD)nMMDs[1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pMMDLayouts.Unmap(nMMDs[1], FALSE))) &&
						((nComponents & DATABASE_COMPONENT_POD) != DATABASE_COMPONENT_POD || !bAll || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwPODs[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwPODs[0] && ReadFile(cFile.m_hFile, nPODs[1].GetData(), (cbInfo = (DWORD)nPODs[1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pPODLayouts.Unmap(nPODs[1], FALSE))) &&
						((nComponents & DATABASE_COMPONENT_SCRIPT) != DATABASE_COMPONENT_SCRIPT || !bAll || (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwScripts[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwScripts[0] && ReadFile(cFile.m_hFile, nScripts[1].GetData(), (cbInfo = (DWORD)nScripts[1].GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  pScriptLayouts.Unmap(nScripts[1], FALSE))))
					{
						if (nComponents & DATABASE_COMPONENT_TMPACKET)
						{
							m_pTMPackets->RemoveAll();
							m_pTMPacketGroups->RemoveAll();
							m_pTMPacketHeaders->RemoveAll();
							m_pTMPacketStreams->RemoveAll();
							m_pTMPacketSubTags->RemoveAll();
							m_pTMPacketIdentifications->RemoveAll();
							m_pTMPacketIdentificationCriteria->RemoveAll();
							m_pTMPackets->CPtrArray::Copy(pDatabaseTMPackets);
							m_pTMPacketGroups->CPtrArray::Copy(pDatabaseTMPacketGroups);
							m_pTMPacketHeaders->CPtrArray::Copy(pDatabaseTMPacketHeaders);
							m_pTMPacketStreams->CPtrArray::Copy(pDatabaseTMPacketStreams);
							m_pTMPacketSubTags->CPtrArray::Copy(pDatabaseTMPacketSubTags);
							m_pTMPacketIdentifications->CPtrArray::Copy(pDatabaseTMPacketIdentifications);
							m_pTMPacketIdentificationCriteria->CPtrArray::Copy(pDatabaseTMPacketIdentificationCriteria);
							pDatabaseTMPackets.CPtrArray::RemoveAll();
							pDatabaseTMPacketGroups.CPtrArray::RemoveAll();
							pDatabaseTMPacketHeaders.CPtrArray::RemoveAll();
							pDatabaseTMPacketStreams.CPtrArray::RemoveAll();
							pDatabaseTMPacketSubTags.CPtrArray::RemoveAll();
							pDatabaseTMPacketIdentifications.CPtrArray::RemoveAll();
							pDatabaseTMPacketIdentificationCriteria.CPtrArray::RemoveAll();
						}
						if (nComponents & DATABASE_COMPONENT_TCFUNCTION)
						{
							m_pTCPackets->RemoveAll();
							m_pTCFunctions->RemoveAll();
							m_pTCPreExeGroups->RemoveAll();
							m_pTCExeVerGroups->RemoveAll();
							m_pTCPackets->CPtrArray::Copy(pDatabaseTCPackets);
							m_pTCFunctions->CPtrArray::Copy(pDatabaseTCFunctions);
							m_pTCPreExeGroups->CPtrArray::Copy(pDatabaseTCPreExeGroups);
							m_pTCExeVerGroups->CPtrArray::Copy(pDatabaseTCExeVerGroups);
							m_pTCPacketParameters->CPtrArray::Copy(pDatabaseTCPacketParameters);
							pDatabaseTCPackets.CPtrArray::RemoveAll();
							pDatabaseTCFunctions.CPtrArray::RemoveAll();
							pDatabaseTCPreExeGroups.CPtrArray::RemoveAll();
							pDatabaseTCExeVerGroups.CPtrArray::RemoveAll();
							pDatabaseTCPacketParameters.CPtrArray::RemoveAll();
						}
						if (nComponents & DATABASE_COMPONENT_TCSEQUENCE)
						{
							m_pTCSequences->RemoveAll();
							m_pTCParameterSets->RemoveAll();
							m_pTCFunctionBlocks->RemoveAll();
							m_pTCSequences->CPtrArray::Copy(pDatabaseTCSequences);
							m_pTCParameterSets->CPtrArray::Copy(pDatabaseTCParameterSets);
							m_pTCFunctionBlocks->CPtrArray::Copy(pDatabaseTCFunctionBlocks);
							pDatabaseTCSequences.CPtrArray::RemoveAll();
							pDatabaseTCParameterSets.CPtrArray::RemoveAll();
							pDatabaseTCFunctionBlocks.CPtrArray::RemoveAll();
						}
						if (nComponents & DATABASE_COMPONENT_TCPROCEDURE)
						{
							m_pTCProcedures->RemoveAll();
							m_pTCProcedures->CPtrArray::Copy(pDatabaseTCProcedures);
							pDatabaseTCProcedures.CPtrArray::RemoveAll();
						}
						if (nComponents & DATABASE_COMPONENT_OBPROCESSOR)
						{
							m_pOBProcessors->RemoveAll();
							m_pOBProcessorMemoryImages->RemoveAll();
							m_pOBProcessors->CPtrArray::Copy(pDatabaseOBProcessors);
							m_pOBProcessorMemoryImages->CPtrArray::Copy(pDatabaseOBProcessorMemoryImages);
							pDatabaseOBProcessors.CPtrArray::RemoveAll();
							pDatabaseOBProcessorMemoryImages.CPtrArray::RemoveAll();
						}
						if (nComponents & DATABASE_COMPONENT_TMPARAMETER)
						{
							m_pTMParameters->RemoveAll();
							m_pTMNumCalTables->RemoveAll();
							m_pTMTxtCalTables->RemoveAll();
							m_pTMNumOolTables->RemoveAll();
							m_pTMTxtOolTables->RemoveAll();
							m_pTMParameterGroups->RemoveAll();
							m_pTMParameters->CPtrArray::Copy(pDatabaseTMParameters);
							m_pTMNumCalTables->CPtrArray::Copy(pDatabaseTMNumCalTables);
							m_pTMTxtCalTables->CPtrArray::Copy(pDatabaseTMTxtCalTables);
							m_pTMNumOolTables->CPtrArray::Copy(pDatabaseTMNumOolTables);
							m_pTMTxtOolTables->CPtrArray::Copy(pDatabaseTMTxtOolTables);
							m_pTMParameterGroups->CPtrArray::Copy(pDatabaseTMParameterGroups);
							pDatabaseTMParameters.CPtrArray::RemoveAll();
							pDatabaseTMNumCalTables.CPtrArray::RemoveAll();
							pDatabaseTMTxtCalTables.CPtrArray::RemoveAll();
							pDatabaseTMNumOolTables.CPtrArray::RemoveAll();
							pDatabaseTMTxtOolTables.CPtrArray::RemoveAll();
							pDatabaseTMParameterGroups.CPtrArray::RemoveAll();
						}
						if (nComponents & DATABASE_COMPONENT_TCPARAMETER)
						{
							m_pTCParameters->RemoveAll();
							m_pTCNumCalTables->RemoveAll();
							m_pTCTxtCalTables->RemoveAll();
							m_pTCNumOolTables->RemoveAll();
							m_pTCTxtOolTables->RemoveAll();
							m_pTCParameters->CPtrArray::Copy(pDatabaseTCParameters);
							m_pTCNumCalTables->CPtrArray::Copy(pDatabaseTCNumCalTables);
							m_pTCTxtCalTables->CPtrArray::Copy(pDatabaseTCTxtCalTables);
							m_pTCNumOolTables->CPtrArray::Copy(pDatabaseTCNumOolTables);
							m_pTCTxtOolTables->CPtrArray::Copy(pDatabaseTCTxtOolTables);
							pDatabaseTCParameters.CPtrArray::RemoveAll();
							pDatabaseTCNumCalTables.CPtrArray::RemoveAll();
							pDatabaseTCTxtCalTables.CPtrArray::RemoveAll();
							pDatabaseTCNumOolTables.CPtrArray::RemoveAll();
							pDatabaseTCTxtOolTables.CPtrArray::RemoveAll();
						}
						if (nComponents & DATABASE_COMPONENT_AND)
						{
							if (nComponents & DATABASE_SUBCOMPONENT_AND_NORMAL)
							{
								m_pANDs[0]->RemoveAll();
								m_pANDs[0]->CPtrArray::Copy(pANDLayouts[0]);
								pANDLayouts[0].CPtrArray::RemoveAll();
							}
							if (nComponents & DATABASE_SUBCOMPONENT_AND_GENERIC)
							{
								m_pANDs[1]->RemoveAll();
								m_pANDs[1]->CPtrArray::Copy(pANDLayouts[1]);
								pANDLayouts[1].CPtrArray::RemoveAll();
							}
						}
						if (nComponents & DATABASE_COMPONENT_GRD)
						{
							m_pGRDs->RemoveAll();
							m_pGRDs->CPtrArray::Copy(pGRDLayouts);
							pGRDLayouts.CPtrArray::RemoveAll();
						}
						if (nComponents & DATABASE_COMPONENT_MMD)
						{
							m_pMMDs->RemoveAll();
							m_pMMDs->CPtrArray::Copy(pMMDLayouts);
							pMMDLayouts.CPtrArray::RemoveAll();
						}
						if (nComponents & DATABASE_COMPONENT_POD)
						{
							m_pPODs->RemoveAll();
							m_pPODs->CPtrArray::Copy(pPODLayouts);
							pPODLayouts.CPtrArray::RemoveAll();
						}
						if (nComponents & DATABASE_COMPONENT_SCRIPT)
						{
							m_pScripts->RemoveAll();
							m_pScripts->CPtrArray::Copy(pScriptLayouts);
							pScriptLayouts.CPtrArray::RemoveAll();
						}
						if ((nComponents & DATABASE_COMPONENTS_ALL) == DATABASE_COMPONENTS_ALL  &&  szFileName == GetUpdateFileName())
						{
							for (CFileEx::SetAttributes(GetFileName(), CFileEx::GetAttributes(GetFileName()) & ~FILE_ATTRIBUTE_READONLY), CFileEx::SetAttributes(GetUpdateFileName(), CFileEx::GetAttributes(GetUpdateFileName()) & ~FILE_ATTRIBUTE_READONLY); CFileEx::Copy(GetUpdateFileName(), GetFileName()) && CFileEx::SetAttributes(GetFileName(), CFileEx::GetAttributes(GetFileName()) | FILE_ATTRIBUTE_READONLY); )
							{
								UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
								cFile.Close();
								SecureDirectoryOrFile(GetFileName());
								CFileEx::Remove(szFileName);
								return((UINT)-1);
							}
							CFileEx::SetAttributes(GetFileName(), CFileEx::GetAttributes(GetFileName()) | FILE_ATTRIBUTE_READONLY);
							CFileEx::SetAttributes(GetUpdateFileName(), CFileEx::GetAttributes(GetUpdateFileName()) | FILE_ATTRIBUTE_READONLY);
						}
						UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
						cFile.Close();
						return TRUE;
					}
				}
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	if (szFileName == GetUpdateFileName() && !szFileName.IsEmpty())
	{
		CFileEx::SetAttributes(szFileName, CFileEx::GetAttributes(szFileName) & ~FILE_ATTRIBUTE_READONLY);
		CFileEx::Remove(szFileName);
		return Load(nComponents, bAll);
	}
	return FALSE;
}

BOOL CBinaryDatabase::Attach(CONST CDatabaseProfileInfo *pDatabaseInfo)
{
	return((CDatabaseProfileInfo::Compare(pDatabaseInfo) || Copy(pDatabaseInfo)) ? TRUE : FALSE);
}

BOOL CBinaryDatabase::Update(CONST CDatabaseProfileInfo *pDatabaseInfo)
{
	CFileFindEx  cFileFind;

	for (SetName(pDatabaseInfo->GetName()), SetFileName(pDatabaseInfo->GetFileName()), SetUpdateFileName(pDatabaseInfo->GetUpdateFileName()); !cFileFind.FindFile(GetLoadFileName()) || Load() != 0; )
	{
		Copy(pDatabaseInfo);
		return Save();
	}
	return FALSE;
}

BOOL CBinaryDatabase::Copy(CONST CDatabaseProfileInfo *pDatabaseInfo)
{
	return CDatabaseProfileInfo::Copy(pDatabaseInfo);
}
BOOL CBinaryDatabase::Copy(CONST CBinaryDatabase *pDatabase)
{
	return((CDatabaseProfileInfo::Copy(pDatabase) && CDatabaseVersions::Copy(pDatabase) && m_pTMPackets->Copy(pDatabase->m_pTMPackets) && m_pTCPackets->Copy(pDatabase->m_pTCPackets) && m_pTCFunctions->Copy(pDatabase->m_pTCFunctions) && m_pTCSequences->Copy(pDatabase->m_pTCSequences) && m_pTCProcedures->Copy(pDatabase->m_pTCProcedures) && m_pOBProcessors->Copy(pDatabase->m_pOBProcessors) && m_pTMParameters->Copy(pDatabase->m_pTMParameters) && m_pTCParameters->Copy(pDatabase->m_pTCParameters) && m_pTMNumCalTables->Copy(pDatabase->m_pTMNumCalTables) && m_pTMTxtCalTables->Copy(pDatabase->m_pTMTxtCalTables) && m_pTMNumOolTables->Copy(pDatabase->m_pTMNumOolTables) && m_pTMTxtOolTables->Copy(pDatabase->m_pTMTxtOolTables) && m_pTCNumCalTables->Copy(pDatabase->m_pTCNumCalTables) && m_pTCTxtCalTables->Copy(pDatabase->m_pTCTxtCalTables) && m_pTCNumOolTables->Copy(pDatabase->m_pTCNumOolTables) && m_pTCTxtOolTables->Copy(pDatabase->m_pTCTxtOolTables) && m_pTCPreExeGroups->Copy(pDatabase->m_pTCPreExeGroups) && m_pTCExeVerGroups->Copy(pDatabase->m_pTCExeVerGroups) && m_pTMPacketGroups->Copy(pDatabase->m_pTMPacketGroups) && m_pTMPacketHeaders->Copy(pDatabase->m_pTMPacketHeaders) && m_pTMPacketStreams->Copy(pDatabase->m_pTMPacketStreams) && m_pTCParameterSets->Copy(pDatabase->m_pTCParameterSets) && m_pTCFunctionBlocks->Copy(pDatabase->m_pTCFunctionBlocks) && m_pTMParameterGroups->Copy(pDatabase->m_pTMParameterGroups) && m_pTMPacketIdentifications->Copy(pDatabase->m_pTMPacketIdentifications) && m_pTMPacketIdentificationCriteria->Copy(pDatabase->m_pTMPacketIdentificationCriteria) && m_pOBProcessorMemoryImages->Copy(pDatabase->GetOBProcessorMemoryImages()) && m_pTMPacketSubTags->Copy(pDatabase->m_pTMPacketSubTags) && m_pANDs[0]->Copy(pDatabase->m_pANDs[0]) && m_pANDs[1]->Copy(pDatabase->m_pANDs[1]) && m_pGRDs->Copy(pDatabase->m_pGRDs) && m_pMMDs->Copy(pDatabase->m_pMMDs) && m_pPODs->Copy(pDatabase->m_pPODs) && m_pScripts->Copy(pDatabase->m_pScripts)) ? TRUE : FALSE);
}

VOID CBinaryDatabase::Detach()
{
	CDatabaseProfileInfo  cDatabaseInfo;

	Reset();
	Copy(&cDatabaseInfo);
}

BOOL CBinaryDatabase::Delete()
{
	INT  nItem;
	INT  nItems;
	CString  szFile;
	CString  szLocation;
	CMMDLayouts  pLayouts;
	CFileFindEx  cFileFind;
	CLogicalDrives  cDrives;
	CAutomationScripts  pScripts;
	CDatabaseTCProcedures  pProcedures;

	for (szLocation = GetFileName(); PathRemoveFileSpec(szLocation.GetBufferSetLength(MAX_PATH)); )
	{
		for (nItem = 0, nItems = EnumMMDs(pLayouts), szLocation.ReleaseBuffer(), szLocation += cDrives.GetPathDelimiter(); nItem < nItems; nItem++)
		{
			for (szFile.Format(STRING(IDS_MIMICSDISPLAYCODE_NORMAL_FILENAME), (LPCTSTR)pLayouts.GetAt(nItem)->GetName()), szFile = szLocation + szFile; cFileFind.FindFile(szFile) && !cFileFind.FindNextFile(); )
			{
				CFileEx::SetAttributes(szFile, CFileEx::GetAttributes(szFile) & ~FILE_ATTRIBUTE_READONLY);
				CFileEx::Remove(cFileFind.GetFilePath());
				cFileFind.Close();
				break;
			}
			for (szFile.Format(STRING(IDS_MIMICSDISPLAYCODE_UPDATE_FILENAME), (LPCTSTR)pLayouts.GetAt(nItem)->GetName()), szFile = szLocation + szFile; cFileFind.FindFile(szFile) && !cFileFind.FindNextFile(); )
			{
				CFileEx::SetAttributes(cFileFind.GetFilePath(), CFileEx::GetAttributes(cFileFind.GetFilePath()) & ~FILE_ATTRIBUTE_READONLY);
				CFileEx::Remove(cFileFind.GetFilePath());
				cFileFind.Close();
				break;
			}
		}
		for (nItem = 0, nItems = EnumScripts(pScripts); nItem < nItems; nItem++)
		{
			for (szFile.Format(STRING(IDS_SCRIPTDISPLAYCODE_NORMAL_FILENAME), (LPCTSTR)pScripts.GetAt(nItem)->GetName()), szFile = szLocation + szFile; cFileFind.FindFile(szFile) && !cFileFind.FindNextFile(); )
			{
				CFileEx::SetAttributes(cFileFind.GetFilePath(), CFileEx::GetAttributes(cFileFind.GetFilePath()) & ~FILE_ATTRIBUTE_READONLY);
				CFileEx::Remove(cFileFind.GetFilePath());
				cFileFind.Close();
				break;
			}
			for (szFile.Format(STRING(IDS_SCRIPTDISPLAYCODE_UPDATE_FILENAME), (LPCTSTR)pScripts.GetAt(nItem)->GetName()), szFile = szLocation + szFile; cFileFind.FindFile(szFile) && !cFileFind.FindNextFile(); )
			{
				CFileEx::SetAttributes(cFileFind.GetFilePath(), CFileEx::GetAttributes(cFileFind.GetFilePath()) & ~FILE_ATTRIBUTE_READONLY);
				CFileEx::Remove(cFileFind.GetFilePath());
				cFileFind.Close();
				break;
			}
		}
		for (nItem = 0, nItems = EnumProcedures(pProcedures); nItem < nItems; nItem++)
		{
			for (szFile.Format(STRING(IDS_TELECOMMANDPROCEDURECODE_NORMAL_FILENAME), (LPCTSTR)pProcedures.GetAt(nItem)->GetName()), szFile = szLocation + szFile; cFileFind.FindFile(szFile) && !cFileFind.FindNextFile(); )
			{
				CFileEx::SetAttributes(cFileFind.GetFilePath(), CFileEx::GetAttributes(cFileFind.GetFilePath()) & ~FILE_ATTRIBUTE_READONLY);
				CFileEx::Remove(cFileFind.GetFilePath());
				cFileFind.Close();
				break;
			}
			for (szFile.Format(STRING(IDS_TELECOMMANDPROCEDURECODE_UPDATE_FILENAME), (LPCTSTR)pProcedures.GetAt(nItem)->GetName()), szFile = szLocation + szFile; cFileFind.FindFile(szFile) && !cFileFind.FindNextFile(); )
			{
				CFileEx::SetAttributes(cFileFind.GetFilePath(), CFileEx::GetAttributes(cFileFind.GetFilePath()) & ~FILE_ATTRIBUTE_READONLY);
				CFileEx::Remove(cFileFind.GetFilePath());
				cFileFind.Close();
				break;
			}
		}
		for (szFile.Format(STRING(IDS_DATABASE_DERIVEDPARAMETERS_FILENAME), (LPCTSTR)GetName()), szFile = szLocation + szFile; cFileFind.FindFile(szFile) && !cFileFind.FindNextFile(); )
		{
			CFileEx::SetAttributes(cFileFind.GetFilePath(), CFileEx::GetAttributes(cFileFind.GetFilePath()) & ~FILE_ATTRIBUTE_READONLY);
			CFileEx::Remove(cFileFind.GetFilePath());
			cFileFind.Close();
			break;
		}
		for (szFile = szLocation + STRING(IDS_DATABASE_SCRIPTRESOURCE_FILENAME); cFileFind.FindFile(szFile) && !cFileFind.FindNextFile(); )
		{
			CFileEx::SetAttributes(cFileFind.GetFilePath(), CFileEx::GetAttributes(cFileFind.GetFilePath()) & ~FILE_ATTRIBUTE_READONLY);
			CFileEx::Remove(cFileFind.GetFilePath());
			cFileFind.Close();
			break;
		}
		for (szFile = szLocation + STRING(IDS_DATABASE_SCRIPTBINARY_FILENAME); cFileFind.FindFile(szFile) && !cFileFind.FindNextFile(); )
		{
			CFileEx::SetAttributes(cFileFind.GetFilePath(), CFileEx::GetAttributes(cFileFind.GetFilePath()) & ~FILE_ATTRIBUTE_READONLY);
			CFileEx::Remove(cFileFind.GetFilePath());
			cFileFind.Close();
			break;
		}
		if (cFileFind.FindFile(GetFileName()) && !cFileFind.FindNextFile())
		{
			CFileEx::SetAttributes(cFileFind.GetFilePath(), CFileEx::GetAttributes(cFileFind.GetFilePath()) & ~FILE_ATTRIBUTE_READONLY);
			CFileEx::Remove(cFileFind.GetFilePath());
			cFileFind.Close();
		}
		if (cFileFind.FindFile(GetUpdateFileName()) && !cFileFind.FindNextFile())
		{
			CFileEx::SetAttributes(cFileFind.GetFilePath(), CFileEx::GetAttributes(cFileFind.GetFilePath()) & ~FILE_ATTRIBUTE_READONLY);
			CFileEx::Remove(cFileFind.GetFilePath());
			cFileFind.Close();
		}
		if (cFileFind.FindFile(GetLibraryFileName()) && !cFileFind.FindNextFile())
		{
			CFileEx::SetAttributes(cFileFind.GetFilePath(), CFileEx::GetAttributes(cFileFind.GetFilePath()) & ~FILE_ATTRIBUTE_READONLY);
			CFileEx::Remove(cFileFind.GetFilePath());
			cFileFind.Close();
		}
		if (cFileFind.FindFile(GetLibraryUpdateFileName()) && !cFileFind.FindNextFile())
		{
			CFileEx::SetAttributes(cFileFind.GetFilePath(), CFileEx::GetAttributes(cFileFind.GetFilePath()) & ~FILE_ATTRIBUTE_READONLY);
			CFileEx::Remove(cFileFind.GetFilePath());
			cFileFind.Close();
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CBinaryDatabase::LoadLibrary(CStringArray &szErrors)
{
	CString  szLibrary[2];
	CString  szProcedure;
	CFileFindEx  cFileFind;
	BOOL(__cdecl *pInitializeParameters)(CONST CBinaryDatabase *pDatabase, CStringArray &szErrors);

	for (szLibrary[0] = GetLibraryFileName(), szLibrary[1] = GetLibraryUpdateFileName(); cFileFind.FindFile(szLibrary[1]) && !cFileFind.FindNextFile(); )
	{
		CFileEx::SetAttributes(szLibrary[0], CFileEx::GetAttributes(szLibrary[0]) & ~FILE_ATTRIBUTE_READONLY);
		CFileEx::SetAttributes(szLibrary[1], CFileEx::GetAttributes(szLibrary[1]) & ~FILE_ATTRIBUTE_READONLY);
		if (CFileEx::Copy(szLibrary[1], szLibrary[0]))
		{
			CFileEx::Remove(szLibrary[1]);
			SecureDirectoryOrFile(szLibrary[0]);
		}
		CFileEx::SetAttributes(szLibrary[0], CFileEx::GetAttributes(szLibrary[0]) | FILE_ATTRIBUTE_READONLY);
		CFileEx::SetAttributes(szLibrary[1], CFileEx::GetAttributes(szLibrary[1]) | FILE_ATTRIBUTE_READONLY);
		cFileFind.Close();
		break;
	}
	if (cFileFind.FindFile(szLibrary[0]) && !cFileFind.FindNextFile())
	{
		if ((m_hLibrary = (!(m_hLibrary = AfxLoadLibrary(cFileFind.GetFileName()))) ? AfxLoadLibrary(szLibrary[0]) : m_hLibrary))
		{
#ifndef UNICODE
			szProcedure = STRING(IDS_EXPORTINTERFACE_INITIALIZEDERIVEDPARAMETERS);
#else
			WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_INITIALIZEDERIVEDPARAMETERS), -1, (LPSTR)szProcedure.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_INITIALIZEDERIVEDPARAMETERS))), lstrlen(STRING(IDS_EXPORTINTERFACE_INITIALIZEDERIVEDPARAMETERS)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
			szProcedure.ReleaseBuffer();
#endif
			if ((pInitializeParameters = (BOOL(__cdecl *)(CONST CBinaryDatabase *pDatabase, CStringArray &szErrors)) GetProcAddress(m_hLibrary, (LPCSTR)(LPCTSTR)szProcedure)))
			{
				(*pInitializeParameters)(this, szErrors);
				cFileFind.Close();
				return TRUE;
			}
			FreeLibrary();
		}
		cFileFind.Close();
	}
	return FALSE;
}

HINSTANCE CBinaryDatabase::GetLibrary() CONST
{
	return m_hLibrary;
}

VOID CBinaryDatabase::FreeLibrary()
{
	if (m_hLibrary)
	{
		AfxFreeLibrary(m_hLibrary);
		m_hLibrary = (HINSTANCE)NULL;
	}
}

BOOL CBinaryDatabase::IsInitialized() CONST
{
	return((!m_szName.IsEmpty() && m_nType != DATABASE_TYPE_NONE) ? TRUE : FALSE);
}

BOOL CBinaryDatabase::IsLocal() CONST
{
	CComputerToken  cComputerToken;

	return(!cComputerToken.GetComputerName().CompareNoCase(GetServer()));
}

BOOL CBinaryDatabase::IsValid() CONST
{
	DWORD  cbFile;
	DWORD  cbInfo;
	CFileEx  cFile;
	CTimeKey  tValidity[2];
	CByteArray  nDatabaseInfo;
	CDatabaseProfileInfo  cDatabaseInfo;
	DATABASEHEADER  sDatabaseHeader = { 0 };
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open(GetUpdateFileName(), CFile::modeRead | CFile::shareDenyNone))
	{
		if (LockFileEx(cFile.m_hFile, 0, 0, MAXDWORD, MAXDWORD, (OVERLAPPED *)&fOverlapped))
		{
			if (ReadFile(cFile.m_hFile, &sDatabaseHeader, (cbInfo = sizeof(sDatabaseHeader)), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo)
			{
				for (nDatabaseInfo.SetSize(sDatabaseHeader.dwHeader[1]); nDatabaseInfo.GetSize() == sDatabaseHeader.dwHeader[1]; )
				{
					if (SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwHeader[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwHeader[0] && ReadFile(cFile.m_hFile, nDatabaseInfo.GetData(), (cbInfo = (DWORD)nDatabaseInfo.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  cDatabaseInfo.Unmap(nDatabaseInfo))
					{
						if (cDatabaseInfo.GetValidity(tValidity[0], tValidity[1]))
						{
							UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
							cFile.Close();
							return TRUE;
						}
					}
					break;
				}
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	return FALSE;
}

VOID CBinaryDatabase::Reset()
{
	m_pTMPackets->RemoveAll();
	m_pTCPackets->RemoveAll();
	m_pTCFunctions->RemoveAll();
	m_pTCSequences->RemoveAll();
	m_pTCProcedures->RemoveAll();
	m_pOBProcessors->RemoveAll();
	m_pTMParameters->RemoveAll();
	m_pTCParameters->RemoveAll();
	m_pTMNumCalTables->RemoveAll();
	m_pTMTxtCalTables->RemoveAll();
	m_pTMNumOolTables->RemoveAll();
	m_pTMTxtOolTables->RemoveAll();
	m_pTCNumCalTables->RemoveAll();
	m_pTCTxtCalTables->RemoveAll();
	m_pTCNumOolTables->RemoveAll();
	m_pTCTxtOolTables->RemoveAll();
	m_pTCPreExeGroups->RemoveAll();
	m_pTCExeVerGroups->RemoveAll();
	m_pTMPacketHeaders->RemoveAll();
	m_pTMPacketStreams->RemoveAll();
	m_pTCParameterSets->RemoveAll();
	m_pTCFunctionBlocks->RemoveAll();
	m_pTCPacketParameters->RemoveAll();
	m_pOBProcessorMemoryImages->RemoveAll();
	m_pTMPacketSubTags->RemoveAll();
	m_pANDs[0]->RemoveAll();
	m_pANDs[1]->RemoveAll();
	m_pGRDs->RemoveAll();
	m_pMMDs->RemoveAll();
	m_pPODs->RemoveAll();
	m_pScripts->RemoveAll();
}

INT CBinaryDatabase::EnumANDs(CANDLayouts &pLayouts, ULONGLONG nSubComponent, BOOL bDirectory) CONST
{
	INT  nLayout;
	INT  nLayouts;
	INT  nParameter;
	INT  nParameters;
	DWORD  cbFile;
	DWORD  cbInfo;
	CFileEx  cFile;
	CByteArray  nData;
	CANDLayout  *pLayout;
	CANDLayoutParameter  *pParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	DATABASEHEADER  sDatabaseHeader = { 0 };
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open(GetLoadFileName(), CFile::modeRead | CFile::shareDenyNone))
	{
		if (LockFileEx(cFile.m_hFile, 0, 0, MAXDWORD, MAXDWORD, (LPOVERLAPPED)&fOverlapped))
		{
			if (ReadFile(cFile.m_hFile, &sDatabaseHeader, (cbInfo = sizeof(sDatabaseHeader)), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  sDatabaseHeader.dwSize == sizeof(sDatabaseHeader))
			{
				for (nData.SetSize((nSubComponent == DATABASE_SUBCOMPONENT_AND_NORMAL) ? sDatabaseHeader.dwANDs[0][1] : sDatabaseHeader.dwANDs[1][1]); ((nSubComponent == DATABASE_SUBCOMPONENT_AND_NORMAL && SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwANDs[0][0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwANDs[0][0]) || (nSubComponent == DATABASE_SUBCOMPONENT_AND_GENERIC && SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwANDs[1][0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwANDs[1][0])) && ReadFile(cFile.m_hFile, nData.GetData(), (cbInfo = (DWORD)nData.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo && pLayouts.Unmap(nData, bDirectory); )
				{
					for (nLayout = 0, nLayouts = (INT)pLayouts.GetSize(); nLayout < nLayouts; nLayout++)
					{
						if ((pLayout = pLayouts.GetAt(nLayout)) && pLayout->GetSize() > 0)
						{
							for (nParameter = 0, nParameters = (INT)pLayout->GetSize(); nParameter < nParameters; nParameter++)
							{
								if ((pDatabaseTMParameter = ((pParameter = pLayout->GetAt(nParameter)) && !pParameter->IsLabel() && !pParameter->GetDigits()) ? GetTMParameters()->GetAt(GetTMParameters()->Find(pParameter->GetName())) : (CDatabaseTMParameter *)NULL) && pDatabaseTMParameter->GetDecimalDigits() > 0)
								{
									pParameter->SetDigits(pDatabaseTMParameter->GetDecimalDigits());
									continue;
								}
							}
						}
					}
					UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
					cFile.Close();
					return((INT)pLayouts.GetSize());
				}
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	return -1;
}

INT CBinaryDatabase::EnumGRDs(CGRDLayouts &pLayouts, BOOL bDirectory) CONST
{
	INT  nLayout;
	INT  nLayouts;
	INT  nParameter;
	INT  nParameters;
	DWORD  cbFile;
	DWORD  cbInfo;
	CFileEx  cFile;
	CByteArray  nData;
	CGRDLayout  *pLayout;
	CGRDLayoutParameter  *pParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	DATABASEHEADER  sDatabaseHeader = { 0 };
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open(GetLoadFileName(), CFile::modeRead | CFile::shareDenyNone))
	{
		if (LockFileEx(cFile.m_hFile, 0, 0, MAXDWORD, MAXDWORD, (LPOVERLAPPED)&fOverlapped))
		{
			if (ReadFile(cFile.m_hFile, &sDatabaseHeader, (cbInfo = sizeof(sDatabaseHeader)), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  sDatabaseHeader.dwSize == sizeof(sDatabaseHeader))
			{
				for (nData.SetSize(sDatabaseHeader.dwGRDs[1]); SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwGRDs[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwGRDs[0] && ReadFile(cFile.m_hFile, nData.GetData(), (cbInfo = (DWORD)nData.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo && pLayouts.Unmap(nData, bDirectory); )
				{
					for (nLayout = 0, nLayouts = (INT)pLayouts.GetSize(); nLayout < nLayouts; nLayout++)
					{
						if ((pLayout = pLayouts.GetAt(nLayout)) && pLayout->GetSize() > 0)
						{
							for (nParameter = 0, nParameters = (INT)pLayout->GetSize(); nParameter < nParameters; nParameter++)
							{
								if ((pDatabaseTMParameter = ((pParameter = pLayout->GetAt(nParameter)) && !pParameter->GetDigits()) ? GetTMParameters()->GetAt(GetTMParameters()->Find(pParameter->GetName())) : (CDatabaseTMParameter *)NULL) && pDatabaseTMParameter->GetDecimalDigits() > 0)
								{
									pParameter->SetDigits(pDatabaseTMParameter->GetDecimalDigits());
									continue;
								}
							}
						}
					}
					UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
					cFile.Close();
					return((INT)pLayouts.GetSize());
				}
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	return -1;
}

INT CBinaryDatabase::EnumMMDs(CMMDLayouts &pLayouts, BOOL bDirectory) CONST
{
	DWORD  cbFile;
	DWORD  cbInfo;
	CFileEx  cFile;
	CByteArray  nData;
	DATABASEHEADER  sDatabaseHeader = { 0 };
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open(GetLoadFileName(), CFile::modeRead | CFile::shareDenyNone))
	{
		if (LockFileEx(cFile.m_hFile, 0, 0, MAXDWORD, MAXDWORD, (LPOVERLAPPED)&fOverlapped))
		{
			if (ReadFile(cFile.m_hFile, &sDatabaseHeader, (cbInfo = sizeof(sDatabaseHeader)), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  sDatabaseHeader.dwSize == sizeof(sDatabaseHeader))
			{
				for (nData.SetSize(sDatabaseHeader.dwMMDs[1]); SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwMMDs[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwMMDs[0] && ReadFile(cFile.m_hFile, nData.GetData(), (cbInfo = (DWORD)nData.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo && pLayouts.Unmap(nData, bDirectory); )
				{
					UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
					cFile.Close();
					return((INT)pLayouts.GetSize());
				}
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	return -1;
}

INT CBinaryDatabase::EnumPODs(CPODLayouts &pLayouts, BOOL bDirectory) CONST
{
	DWORD  cbFile;
	DWORD  cbInfo;
	CFileEx  cFile;
	CByteArray  nData;
	DATABASEHEADER  sDatabaseHeader = { 0 };
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open(GetLoadFileName(), CFile::modeRead | CFile::shareDenyNone))
	{
		if (LockFileEx(cFile.m_hFile, 0, 0, MAXDWORD, MAXDWORD, (LPOVERLAPPED)&fOverlapped))
		{
			if (ReadFile(cFile.m_hFile, &sDatabaseHeader, (cbInfo = sizeof(sDatabaseHeader)), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  sDatabaseHeader.dwSize == sizeof(sDatabaseHeader))
			{
				for (nData.SetSize(sDatabaseHeader.dwPODs[1]); SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwPODs[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwPODs[0] && ReadFile(cFile.m_hFile, nData.GetData(), (cbInfo = (DWORD)nData.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo && pLayouts.Unmap(nData, bDirectory); )
				{
					UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
					cFile.Close();
					return((INT)pLayouts.GetSize());
				}
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	return -1;
}

INT CBinaryDatabase::EnumScripts(CAutomationScripts &pScripts, BOOL bDirectory) CONST
{
	DWORD  cbFile;
	DWORD  cbInfo;
	CFileEx  cFile;
	CByteArray  nData;
	DATABASEHEADER  sDatabaseHeader = { 0 };
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open(GetLoadFileName(), CFile::modeRead | CFile::shareDenyNone))
	{
		if (LockFileEx(cFile.m_hFile, 0, 0, MAXDWORD, MAXDWORD, (LPOVERLAPPED)&fOverlapped))
		{
			if (ReadFile(cFile.m_hFile, &sDatabaseHeader, (cbInfo = sizeof(sDatabaseHeader)), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  sDatabaseHeader.dwSize == sizeof(sDatabaseHeader))
			{
				for (nData.SetSize(sDatabaseHeader.dwScripts[1]); SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwScripts[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwScripts[0] && ReadFile(cFile.m_hFile, nData.GetData(), (cbInfo = (DWORD)nData.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo && pScripts.Unmap(nData, bDirectory); )
				{
					UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
					cFile.Close();
					return((INT)pScripts.GetSize());
				}
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	return -1;
}

INT CBinaryDatabase::EnumProcedures(CDatabaseTCProcedures &pProcedures) CONST
{
	DWORD  cbFile;
	DWORD  cbInfo;
	CFileEx  cFile;
	CByteArray  nData;
	DATABASEHEADER  sDatabaseHeader = { 0 };
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (cFile.Open(GetLoadFileName(), CFile::modeRead | CFile::shareDenyNone))
	{
		if (LockFileEx(cFile.m_hFile, 0, 0, MAXDWORD, MAXDWORD, (LPOVERLAPPED)&fOverlapped))
		{
			if (ReadFile(cFile.m_hFile, &sDatabaseHeader, (cbInfo = sizeof(sDatabaseHeader)), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo  &&  sDatabaseHeader.dwSize == sizeof(sDatabaseHeader))
			{
				for (nData.SetSize(sDatabaseHeader.dwTCProcedures[1]); SetFilePointer(cFile.m_hFile, sDatabaseHeader.dwTCProcedures[0], (PLONG)NULL, FILE_BEGIN) == sDatabaseHeader.dwTCProcedures[0] && ReadFile(cFile.m_hFile, nData.GetData(), (cbInfo = (DWORD)nData.GetSize()), &cbFile, (LPOVERLAPPED)NULL) && cbFile == cbInfo && pProcedures.Unmap(nData); )
				{
					UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
					cFile.Close();
					return((INT)pProcedures.GetSize());
				}
			}
			UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
		}
		cFile.Close();
	}
	return -1;
}

INT CBinaryDatabase::SaveAND(CONST CANDLayout &cLayout, ULONGLONG nSubComponent)
{
	INT  nIndex;
	CANDLayout  *pLayout;

	if ((pLayout = GetANDs(nSubComponent)->GetAt((nIndex = GetANDs(nSubComponent)->Find(cLayout.GetName())))))
	{
		if (pLayout->Copy(&cLayout) && Save(DATABASE_COMPONENT_AND | nSubComponent)) return nIndex;
		return -1;
	}
	if ((pLayout = new CANDLayout))
	{
		if ((nIndex = (pLayout->Copy(&cLayout)) ? GetANDs(nSubComponent)->Add(pLayout) : -1) >= 0)
		{
			if (Save(DATABASE_COMPONENT_AND | nSubComponent)) return nIndex;
			return -1;
		}
		delete pLayout;
	}
	return -1;
}

INT CBinaryDatabase::SaveGRD(CONST CGRDLayout &cLayout)
{
	INT  nIndex;
	CGRDLayout  *pLayout;

	if ((pLayout = GetGRDs()->GetAt((nIndex = GetGRDs()->Find(cLayout.GetName())))))
	{
		if (pLayout->Copy(&cLayout) && Save(DATABASE_COMPONENT_GRD)) return nIndex;
		return -1;
	}
	if ((pLayout = new CGRDLayout))
	{
		if ((nIndex = (pLayout->Copy(&cLayout)) ? GetGRDs()->Add(pLayout) : -1) >= 0)
		{
			if (Save(DATABASE_COMPONENT_GRD)) return nIndex;
			return -1;
		}
		delete pLayout;
	}
	return -1;
}

INT CBinaryDatabase::SaveMMD(CONST CMMDLayout &cLayout)
{
	INT  nIndex;
	CMMDLayout  *pLayout;

	if ((pLayout = GetMMDs()->GetAt((nIndex = GetMMDs()->Find(cLayout.GetName())))))
	{
		if (pLayout->Copy(&cLayout) && Save(DATABASE_COMPONENT_MMD)) return nIndex;
		return -1;
	}
	if ((pLayout = new CMMDLayout))
	{
		if ((nIndex = (pLayout->Copy(&cLayout)) ? GetMMDs()->Add(pLayout) : -1) >= 0)
		{
			if (Save(DATABASE_COMPONENT_MMD)) return nIndex;
			return -1;
		}
		delete pLayout;
	}
	return -1;
}

INT CBinaryDatabase::SavePOD(CONST CPODLayout &cLayout)
{
	INT  nIndex;
	CPODLayout  *pLayout;

	if ((pLayout = GetPODs()->GetAt((nIndex = GetPODs()->Find(cLayout.GetName())))))
	{
		if (pLayout->Copy(&cLayout) && Save(DATABASE_COMPONENT_POD)) return nIndex;
		return -1;
	}
	if ((pLayout = new CPODLayout))
	{
		if ((nIndex = (pLayout->Copy(&cLayout)) ? GetPODs()->Add(pLayout) : -1) >= 0)
		{
			if (Save(DATABASE_COMPONENT_POD)) return nIndex;
			return -1;
		}
		delete pLayout;
	}
	return -1;
}

INT CBinaryDatabase::SaveScript(CONST CAutomationScript &cScript)
{
	INT  nIndex;
	CAutomationScript  *pScript;

	if ((pScript = GetScripts()->GetAt((nIndex = GetScripts()->Find(cScript.GetName())))))
	{
		if (pScript->Copy(&cScript) && Save(DATABASE_COMPONENT_SCRIPT)) return nIndex;
		return -1;
	}
	if ((pScript = new CAutomationScript))
	{
		if ((nIndex = (pScript->Copy(&cScript)) ? GetScripts()->Add(pScript) : -1) >= 0)
		{
			if (Save(DATABASE_COMPONENT_SCRIPT)) return nIndex;
			return -1;
		}
		delete pScript;
	}
	return -1;
}

BOOL CBinaryDatabase::LoadAND(LPCTSTR pszName, CANDLayout &cLayout, ULONGLONG nSubComponent) CONST
{
	CANDLayout  *pLayout;
	CANDLayouts  pLayouts;

	return(((pLayout = (EnumANDs(pLayouts, nSubComponent, FALSE) > 0) ? pLayouts.GetAt(pLayouts.Find(pszName)) : (CANDLayout *)NULL) && cLayout.Copy(pLayout)) ? TRUE : FALSE);
}

BOOL CBinaryDatabase::LoadGRD(LPCTSTR pszName, CGRDLayout &cLayout) CONST
{
	CGRDLayout  *pLayout;
	CGRDLayouts  pLayouts;

	return(((pLayout = (EnumGRDs(pLayouts, FALSE) > 0) ? pLayouts.GetAt(pLayouts.Find(pszName)) : (CGRDLayout *)NULL) && cLayout.Copy(pLayout)) ? TRUE : FALSE);
}

BOOL CBinaryDatabase::LoadMMD(LPCTSTR pszName, CMMDLayout &cLayout) CONST
{
	CMMDLayout  *pLayout;
	CMMDLayouts  pLayouts;

	return(((pLayout = (EnumMMDs(pLayouts, FALSE) > 0) ? pLayouts.GetAt(pLayouts.Find(pszName)) : (CMMDLayout *)NULL) && cLayout.Copy(pLayout)) ? TRUE : FALSE);
}

BOOL CBinaryDatabase::LoadPOD(LPCTSTR pszName, CPODLayout &cLayout) CONST
{
	CPODLayout  *pLayout;
	CPODLayouts  pLayouts;

	return(((pLayout = (EnumPODs(pLayouts, FALSE) > 0) ? pLayouts.GetAt(pLayouts.Find(pszName)) : (CPODLayout *)NULL) && cLayout.Copy(pLayout)) ? TRUE : FALSE);
}

BOOL CBinaryDatabase::LoadScript(LPCTSTR pszName, CAutomationScript &cScript) CONST
{
	CAutomationScript  *pScript;
	CAutomationScripts  pScripts;

	return(((pScript = (EnumScripts(pScripts, FALSE) > 0) ? pScripts.GetAt(pScripts.Find(pszName)) : (CAutomationScript *)NULL) && cScript.Copy(pScript)) ? TRUE : FALSE);
}

INT CBinaryDatabase::DeleteAND(CONST CANDLayout &cLayout, ULONGLONG nSubComponent)
{
	INT  nIndex;
	CANDLayout  *pLayout;

	if ((pLayout = GetANDs(nSubComponent)->GetAt((nIndex = GetANDs(nSubComponent)->Find(cLayout.GetName())))))
	{
		for (GetANDs(nSubComponent)->RemoveAt(nIndex); Save(DATABASE_COMPONENT_AND | nSubComponent); )
		{
			delete pLayout;
			return nIndex;
		}
		delete pLayout;
	}
	return -1;
}

INT CBinaryDatabase::DeleteGRD(CONST CGRDLayout &cLayout)
{
	INT  nIndex;
	CGRDLayout  *pLayout;

	if ((pLayout = GetGRDs()->GetAt((nIndex = GetGRDs()->Find(cLayout.GetName())))))
	{
		for (GetGRDs()->RemoveAt(nIndex); Save(DATABASE_COMPONENT_GRD); )
		{
			delete pLayout;
			return nIndex;
		}
		delete pLayout;
	}
	return -1;
}

INT CBinaryDatabase::DeleteMMD(CONST CMMDLayout &cLayout)
{
	INT  nIndex;
	CMMDLayout  *pLayout;

	if ((pLayout = GetMMDs()->GetAt((nIndex = GetMMDs()->Find(cLayout.GetName())))))
	{
		for (GetMMDs()->RemoveAt(nIndex); Save(DATABASE_COMPONENT_MMD); )
		{
			delete pLayout;
			return nIndex;
		}
		delete pLayout;
	}
	return -1;
}

INT CBinaryDatabase::DeletePOD(CONST CPODLayout &cLayout)
{
	INT  nIndex;
	CPODLayout  *pLayout;

	if ((pLayout = GetPODs()->GetAt((nIndex = GetPODs()->Find(cLayout.GetName())))))
	{
		for (GetPODs()->RemoveAt(nIndex); Save(DATABASE_COMPONENT_POD); )
		{
			delete pLayout;
			return nIndex;
		}
		delete pLayout;
	}
	return -1;
}

INT CBinaryDatabase::DeleteScript(CONST CAutomationScript &cScript)
{
	INT  nIndex;
	CAutomationScript  *pScript;

	if ((pScript = GetScripts()->GetAt((nIndex = GetScripts()->Find(cScript.GetName())))))
	{
		for (GetScripts()->RemoveAt(nIndex); Save(DATABASE_COMPONENT_SCRIPT); )
		{
			delete pScript;
			return nIndex;
		}
		delete pScript;
	}
	return -1;
}

CDatabaseTMPackets *CBinaryDatabase::GetTMPackets() CONST
{
	return m_pTMPackets;
}

CDatabaseTCPackets *CBinaryDatabase::GetTCPackets() CONST
{
	return m_pTCPackets;
}

CDatabaseTCFunctions *CBinaryDatabase::GetTCFunctions() CONST
{
	return m_pTCFunctions;
}

CDatabaseTCSequences *CBinaryDatabase::GetTCSequences() CONST
{
	return m_pTCSequences;
}

CDatabaseTCProcedures *CBinaryDatabase::GetTCProcedures() CONST
{
	return m_pTCProcedures;
}

CDatabaseOBProcessors *CBinaryDatabase::GetOBProcessors() CONST
{
	return m_pOBProcessors;
}

CDatabaseTMParameters *CBinaryDatabase::GetTMParameters() CONST
{
	return m_pTMParameters;
}

CDatabaseTCParameters *CBinaryDatabase::GetTCParameters() CONST
{
	return m_pTCParameters;
}

CDatabaseTMNumCalTables *CBinaryDatabase::GetTMNumCalTables() CONST
{
	return m_pTMNumCalTables;
}

CDatabaseTMTxtCalTables *CBinaryDatabase::GetTMTxtCalTables() CONST
{
	return m_pTMTxtCalTables;
}

CDatabaseTMNumOolTables *CBinaryDatabase::GetTMNumOolTables() CONST
{
	return m_pTMNumOolTables;
}

CDatabaseTMTxtOolTables *CBinaryDatabase::GetTMTxtOolTables() CONST
{
	return m_pTMTxtOolTables;
}

CDatabaseTCNumCalTables *CBinaryDatabase::GetTCNumCalTables() CONST
{
	return m_pTCNumCalTables;
}

CDatabaseTCTxtCalTables *CBinaryDatabase::GetTCTxtCalTables() CONST
{
	return m_pTCTxtCalTables;
}

CDatabaseTCNumOolTables *CBinaryDatabase::GetTCNumOolTables() CONST
{
	return m_pTCNumOolTables;
}

CDatabaseTCTxtOolTables *CBinaryDatabase::GetTCTxtOolTables() CONST
{
	return m_pTCTxtOolTables;
}

CDatabaseTCPreExeGroups *CBinaryDatabase::GetTCPreExeGroups() CONST
{
	return m_pTCPreExeGroups;
}

CDatabaseTCExeVerGroups *CBinaryDatabase::GetTCExeVerGroups() CONST
{
	return m_pTCExeVerGroups;
}

CDatabaseTMPacketGroups *CBinaryDatabase::GetTMPacketGroups() CONST
{
	return m_pTMPacketGroups;
}

CDatabaseTMPacketHeaders *CBinaryDatabase::GetTMPacketHeaders() CONST
{
	return m_pTMPacketHeaders;
}

CDatabaseTMPacketStreams *CBinaryDatabase::GetTMPacketStreams() CONST
{
	return m_pTMPacketStreams;
}

CDatabaseTCParameterSets *CBinaryDatabase::GetTCParameterSets() CONST
{
	return m_pTCParameterSets;
}

CDatabaseTCFunctionBlocks *CBinaryDatabase::GetTCFunctionBlocks() CONST
{
	return m_pTCFunctionBlocks;
}

CDatabaseTMParameterGroups *CBinaryDatabase::GetTMParameterGroups() CONST
{
	return m_pTMParameterGroups;
}

CDatabaseTCPacketParameters *CBinaryDatabase::GetTCPacketParameters() CONST
{
	return m_pTCPacketParameters;
}

CDatabaseTMPacketIdentifications *CBinaryDatabase::GetTMPacketIdentifications() CONST
{
	return m_pTMPacketIdentifications;
}

CDatabaseTMPacketIdentificationCriteria *CBinaryDatabase::GetTMPacketIdentificationCriteria() CONST
{
	return m_pTMPacketIdentificationCriteria;
}

CDatabaseOBProcessorMemoryImages *CBinaryDatabase::GetOBProcessorMemoryImages() CONST
{
	return m_pOBProcessorMemoryImages;
}

CDatabaseTMPacket *CBinaryDatabase::GetTMPacketSubTags() CONST
{
	return m_pTMPacketSubTags;
}

CANDLayouts *CBinaryDatabase::GetANDs(ULONGLONG nSubComponent) CONST
{
	return((nSubComponent != DATABASE_SUBCOMPONENT_AND_GENERIC) ? m_pANDs[0] : m_pANDs[1]);
}

CGRDLayouts *CBinaryDatabase::GetGRDs() CONST
{
	return m_pGRDs;
}

CMMDLayouts *CBinaryDatabase::GetMMDs() CONST
{
	return m_pMMDs;
}

CPODLayouts *CBinaryDatabase::GetPODs() CONST
{
	return m_pPODs;
}

CAutomationScripts *CBinaryDatabase::GetScripts() CONST
{
	return m_pScripts;
}

BOOL CBinaryDatabase::SecureDirectoryOrFile(LPCTSTR pszDirectoryOrFile)
{
	CFileFindEx  cFileFind;
	CSecurityDescriptor  cSecurityDescriptor[2];

	if (cFileFind.FindFile(pszDirectoryOrFile) && !cFileFind.FindNextFile())
	{
		if (cSecurityDescriptor[0].SetRightsOfSystem(GENERIC_ALL | STANDARD_RIGHTS_ALL | SPECIFIC_RIGHTS_ALL, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) && cSecurityDescriptor[0].SetRightsOfService(GENERIC_ALL | STANDARD_RIGHTS_ALL | SPECIFIC_RIGHTS_ALL, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) && cSecurityDescriptor[0].SetRightsOfLocalService(GENERIC_ALL | STANDARD_RIGHTS_ALL | SPECIFIC_RIGHTS_ALL, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) && cSecurityDescriptor[0].SetRightsOfNetworkService(GENERIC_ALL | STANDARD_RIGHTS_ALL | SPECIFIC_RIGHTS_ALL, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) && cSecurityDescriptor[0].SetRightsOfAdministrators(GENERIC_ALL | STANDARD_RIGHTS_ALL | SPECIFIC_RIGHTS_ALL, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) && (cSecurityDescriptor[0].SetRightsOfSystemOperators(GENERIC_READ | GENERIC_WRITE | STANDARD_RIGHTS_READ | STANDARD_RIGHTS_WRITE | SYNCHRONIZE | FILE_LIST_DIRECTORY | FILE_READ_EA | FILE_WRITE_EA | FILE_TRAVERSE | FILE_READ_ATTRIBUTES | FILE_WRITE_ATTRIBUTES, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) || cSecurityDescriptor[0].SetRightsOfPowerUsers(GENERIC_READ | GENERIC_WRITE | STANDARD_RIGHTS_READ | STANDARD_RIGHTS_WRITE | SYNCHRONIZE | FILE_LIST_DIRECTORY | FILE_READ_EA | FILE_WRITE_EA | FILE_TRAVERSE | FILE_READ_ATTRIBUTES | FILE_WRITE_ATTRIBUTES, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE)) && cSecurityDescriptor[0].SetRightsOfAuthenticatedUsers(GENERIC_READ | STANDARD_RIGHTS_READ | SYNCHRONIZE | FILE_LIST_DIRECTORY | FILE_READ_EA | FILE_TRAVERSE | FILE_READ_ATTRIBUTES, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) && cSecurityDescriptor[0].SetRightsOfEveryone(GENERIC_READ | STANDARD_RIGHTS_READ | SYNCHRONIZE | FILE_LIST_DIRECTORY | FILE_READ_EA | FILE_TRAVERSE | FILE_READ_ATTRIBUTES, CONTAINER_INHERIT_ACE | OBJECT_INHERIT_ACE) && cSecurityDescriptor[1].SetRightsOfSystem(FILE_ALL_ACCESS) && cSecurityDescriptor[1].SetRightsOfNetworkService(FILE_ALL_ACCESS) && cSecurityDescriptor[1].SetRightsOfAdministrators(FILE_ALL_ACCESS) && (cSecurityDescriptor[1].SetRightsOfSystemOperators(FILE_GENERIC_READ | FILE_GENERIC_WRITE) || cSecurityDescriptor[1].SetRightsOfPowerUsers(FILE_GENERIC_READ | FILE_GENERIC_WRITE)) && cSecurityDescriptor[1].SetRightsOfAuthenticatedUsers(FILE_GENERIC_READ) && cSecurityDescriptor[1].SetRightsOfEveryone(FILE_GENERIC_READ))
		{
			if ((cFileFind.IsDirectory() || CSecurity::SecureDirectory(cFileFind.GetRoot(), cSecurityDescriptor[0])) && ((cFileFind.IsDirectory() && CSecurity::SecureDirectory(cFileFind.GetFilePath(), cSecurityDescriptor[0])) || (!cFileFind.IsDirectory() && CSecurity::SecureFile(cFileFind.GetFilePath(), cSecurityDescriptor[1]))))
			{
				cFileFind.Close();
				return TRUE;
			}
		}
		cFileFind.Close();
	}
	return FALSE;
}

CString CBinaryDatabase::GetSaveFileName() CONST
{
	CString  szFileName;
	CFileFindEx  cFileFind;

	for (szFileName = GetUpdateFileName(); cFileFind.FindFile(GetFileName()); )
	{
		cFileFind.Close();
		return szFileName;
	}
	return GetFileName();
}

CString CBinaryDatabase::GetLoadFileName() CONST
{
	CString  szFileName;
	CFileFindEx  cFileFind;

	for (szFileName = GetUpdateFileName(); cFileFind.FindFile(szFileName); )
	{
		cFileFind.Close();
		return szFileName;
	}
	return GetFileName();
}


/////////////////////////////////////////////////////////////////////////////
// CDatabaseEngine

CDatabaseEngine::CDatabaseEngine() : CBinaryDatabase()
{
	m_pDatabase = (CDatabase *)NULL;
	m_hDatabaseEngine = (HINSTANCE)NULL;
	m_pDatabaseEngine = (CDatabaseEngine *)NULL;
	m_pDatabaseHelpTopicProc = (DATABASEHELPBYTOPICPROC)NULL;
	m_pDatabaseMessagesIDProc = (DATABASEMESSAGESBYIDPROC)NULL;
	m_pDatabaseMessagesTextProc = (DATABASEMESSAGESBYTEXTPROC)NULL;
	m_pDatabaseCompareMessagesProc = (DATABASECOMPAREMESSAGESPROC)NULL;
	m_pDatabaseCompileMessagesProc = (DATABASECOMPILEMESSAGESPROC)NULL;
	m_bDatabaseComparing[0] = m_bDatabaseComparing[1] = FALSE;
	m_bDatabaseCompiling[0] = m_bDatabaseCompiling[1] = FALSE;
	m_nDBMSCount = 0;
	m_bReloaded = FALSE;
}

CDatabaseEngine::~CDatabaseEngine()
{
	Close();
}

BOOL CDatabaseEngine::Open(CONST CDatabaseProfileInfo *pDatabaseProfileInfo, BOOL bLoad, BOOL bBinary)
{
	return Open(pDatabaseProfileInfo, STRING(IDS_DATABASE_DBMS_ODBCDRIVERSQLSERVER), bLoad, bBinary);
}
BOOL CDatabaseEngine::Open(CONST CDatabaseProfileInfo *pDatabaseProfileInfo, LPCTSTR pszDBMS, BOOL bLoad, BOOL bBinary)
{
	CString  szDatabaseEngine;
	CDatabaseEngine *(__cdecl *pDatabaseEngine)(VOID);

	if (IsOpen())
	{
		if (CDatabaseProfileInfo::Compare(pDatabaseProfileInfo))
		{
			for (m_pDatabaseEngine->m_pDatabase = m_pDatabase, m_pDatabaseEngine->m_szDatabaseEngine = m_szDatabaseEngine, m_pDatabaseEngine->m_szDatabase = m_szDatabase = pszDBMS, m_pDatabaseEngine->Copy(pDatabaseProfileInfo); (bLoad && ((!bBinary && m_pDatabaseEngine->Load()) || (bBinary && m_pDatabaseEngine->CBinaryDatabase::Load()))) || !bLoad; )
			{
				m_pDatabaseEngine->Copy(pDatabaseProfileInfo);
				return TRUE;
			}
		}
		Close();
	}
	if ((m_hDatabaseEngine = AfxLoadLibrary(pDatabaseProfileInfo->GetSpacecraft())))
	{
#ifndef UNICODE
		szDatabaseEngine = STRING(IDS_EXPORTINTERFACE_DATABASEENGINE);
#else
		WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_DATABASEENGINE), -1, (LPSTR)szDatabaseEngine.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_DATABASEENGINE))), lstrlen(STRING(IDS_EXPORTINTERFACE_DATABASEENGINE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
		szDatabaseEngine.ReleaseBuffer();
#endif
		if ((pDatabaseEngine = (CDatabaseEngine *(__cdecl *)(VOID)) GetProcAddress(m_hDatabaseEngine, (LPCSTR)(LPCTSTR)szDatabaseEngine)))
		{
			if (pDatabaseEngine()->m_pDatabaseEngine == pDatabaseEngine() && pDatabaseEngine()->m_pDatabaseEngine != (CDatabaseEngine *)NULL)
			{
				for (m_pDatabaseEngine = pDatabaseEngine(), m_pDatabase = m_pDatabaseEngine->m_pDatabase; pDatabaseEngine()->m_szDatabaseEngine != pDatabaseProfileInfo->GetName(); )
				{
					m_pDatabase = new CDatabase;
					break;
				}
				for (m_szDatabaseEngine = pDatabaseProfileInfo->GetName(), m_szDatabase = pszDBMS, m_bReloaded = TRUE, Copy(pDatabaseProfileInfo); m_pDatabase != (CDatabase *)NULL; )
				{
					if ((bLoad  &&  bBinary  &&  CBinaryDatabase::Load()) || !bLoad) return TRUE;
					break;
				}
				Close();
				return FALSE;
			}
			for (pDatabaseEngine()->m_pDatabaseEngine = m_pDatabaseEngine = pDatabaseEngine(), m_pDatabaseEngine->m_szDatabaseEngine = m_szDatabaseEngine = pDatabaseProfileInfo->GetName(), m_pDatabaseEngine->m_szDatabase = m_szDatabase = pszDBMS, m_bReloaded = FALSE, m_pDatabaseEngine->Copy(pDatabaseProfileInfo), Copy(pDatabaseProfileInfo); (m_pDatabaseEngine->m_pDatabase = m_pDatabase = new CDatabase); )
			{
				if ((bLoad && ((!bBinary  &&  m_pDatabaseEngine->Load()) || (bBinary  &&  m_pDatabaseEngine->CBinaryDatabase::Load()))) || !bLoad)
				{
					m_pDatabaseEngine->Copy(pDatabaseProfileInfo);
					return TRUE;
				}
				break;
			}
		}
		Close();
		return FALSE;
	}
	if ((m_hDatabaseEngine = AfxLoadLibrary(pDatabaseProfileInfo->GetImplementationStandard())))
	{
#ifndef UNICODE
		szDatabaseEngine = STRING(IDS_EXPORTINTERFACE_STANDARDDATABASEENGINE);
#else
		WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_STANDARDDATABASEENGINE), -1, (LPSTR)szDatabaseEngine.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_STANDARDDATABASEENGINE))), lstrlen(STRING(IDS_EXPORTINTERFACE_STANDARDDATABASEENGINE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
		szDatabaseEngine.ReleaseBuffer();
#endif
		if ((pDatabaseEngine = (CDatabaseEngine *(__cdecl *)(VOID)) GetProcAddress(m_hDatabaseEngine, (LPCSTR)(LPCTSTR)szDatabaseEngine)))
		{
			if (pDatabaseEngine()->m_pDatabaseEngine == pDatabaseEngine() && pDatabaseEngine()->m_pDatabaseEngine != (CDatabaseEngine *)NULL)
			{
				for (m_pDatabaseEngine = pDatabaseEngine(), m_pDatabase = m_pDatabaseEngine->m_pDatabase; pDatabaseEngine()->m_szDatabaseEngine != pDatabaseProfileInfo->GetName(); )
				{
					m_pDatabase = new CDatabase;
					break;
				}
				for (m_szDatabaseEngine = pDatabaseProfileInfo->GetName(), m_szDatabase = pszDBMS, m_bReloaded = TRUE, Copy(pDatabaseProfileInfo); m_pDatabase != (CDatabase *)NULL; )
				{
					if ((bLoad  &&  bBinary  &&  CBinaryDatabase::Load()) || !bLoad) return TRUE;
					break;
				}
				Close();
				return FALSE;
			}
			for (pDatabaseEngine()->m_pDatabaseEngine = m_pDatabaseEngine = pDatabaseEngine(), m_pDatabaseEngine->m_szDatabaseEngine = m_szDatabaseEngine = pDatabaseProfileInfo->GetName(), m_pDatabaseEngine->m_szDatabase = m_szDatabase = pszDBMS, m_bReloaded = FALSE, m_pDatabaseEngine->Copy(pDatabaseProfileInfo), Copy(pDatabaseProfileInfo); (m_pDatabaseEngine->m_pDatabase = m_pDatabase = new CDatabase); )
			{
				if ((bLoad && ((!bBinary  &&  m_pDatabaseEngine->Load()) || (bBinary  &&  m_pDatabaseEngine->CBinaryDatabase::Load()))) || !bLoad)
				{
					m_pDatabaseEngine->Copy(pDatabaseProfileInfo);
					return TRUE;
				}
				break;
			}
		}
		Close();
	}
	return FALSE;
}

BOOL CDatabaseEngine::Initialize(DATABASEMESSAGESBYIDPROC pMessagesIDProc, DATABASEMESSAGESBYTEXTPROC pMessagesTextProc, DATABASEHELPBYTOPICPROC pHelpTopicProc)
{
	return((IsOpen()) ? (((m_pDatabaseEngine->m_pDatabaseMessagesIDProc = m_pDatabaseMessagesIDProc = pMessagesIDProc) && (m_pDatabaseEngine->m_pDatabaseMessagesTextProc = m_pDatabaseMessagesTextProc = pMessagesTextProc) && (m_pDatabaseEngine->m_pDatabaseHelpTopicProc = m_pDatabaseHelpTopicProc = pHelpTopicProc)) ? TRUE : FALSE) : FALSE);
}

BOOL CDatabaseEngine::IsOpen() CONST
{
	return(m_pDatabaseEngine != (CDatabaseEngine *)NULL);
}

VOID CDatabaseEngine::Close()
{
	CDatabaseProfileInfo  cDatabaseProfileInfo;

	for (CloseDBMS(), m_szDatabaseEngine.Empty(), m_szDatabase.Empty(), Copy(&cDatabaseProfileInfo); m_hDatabaseEngine != (HINSTANCE)NULL; )
	{
		if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  !m_bReloaded)
		{
			m_pDatabaseEngine->m_pDatabaseMessagesIDProc = m_pDatabaseMessagesIDProc = (DATABASEMESSAGESBYIDPROC)NULL;
			m_pDatabaseEngine->m_pDatabaseMessagesTextProc = m_pDatabaseMessagesTextProc = (DATABASEMESSAGESBYTEXTPROC)NULL;
			m_pDatabaseEngine->m_pDatabaseHelpTopicProc = m_pDatabaseHelpTopicProc = (DATABASEHELPBYTOPICPROC)NULL;
			m_pDatabaseEngine->Reset();
			delete m_pDatabase;
		}
		if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_bReloaded)
		{
			if (m_pDatabaseEngine->m_pDatabase != m_pDatabase) delete m_pDatabase;
			CBinaryDatabase::Reset();
		}
		if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  !m_bReloaded)
		{
			m_pDatabaseEngine->m_pDatabaseEngine = (CDatabaseEngine *)NULL;
			m_pDatabaseEngine->m_pDatabase = (CDatabase *)NULL;
		}
		AfxFreeLibrary(m_hDatabaseEngine);
		m_hDatabaseEngine = (HINSTANCE)NULL;
		break;
	}
	m_pDatabaseEngine = (CDatabaseEngine *)NULL;
	m_pDatabase = (CDatabase *)NULL;
	m_bReloaded = FALSE;
}

BOOL CDatabaseEngine::OpenDBMS(DWORD dwOptions)
{
	INT  nUser;
	INT  nUsers;
	CString  szCredentials;
	CUserAccounts  cUserAccounts;
	CAccountToken  *pAccountToken;
	CAccountTokens  pAccountTokens;
	CComputerToken  cComputerToken;

	if (IsOpen())
	{
		for (nUser = 0, nUsers = (cUserAccounts.SetComputerName((GetServer().IsEmpty()) ? (LPCTSTR)cComputerToken.GetComputerName() : (LPCTSTR)GetServer())) ? cUserAccounts.EnumAccounts(pAccountTokens) : 0; nUser < nUsers; nUser++)
		{
			if ((pAccountToken = pAccountTokens.GetAt(nUser)) != (CAccountToken *)NULL  &&  pAccountToken->IsAdministrator(TRUE))
			{
				for (szCredentials.Format(STRING(IDS_DATABASE_DBMS_ODBCDATABASECONNECT), m_szDatabase, cUserAccounts.GetComputerName(), (LPCTSTR)pAccountToken->GetPassword(), (LPCTSTR)GetName()); m_pDatabaseEngine->m_pDatabase == m_pDatabase; )
				{
					if (!m_pDatabaseEngine->m_nDBMSCount)
					{
						try
						{
							m_pDatabaseEngine->GetDBMS()->OpenEx(szCredentials, dwOptions);
						}
						catch (CException *pException)
						{
							pException->Delete();
							return FALSE;
						}
					}
					m_nDBMSCount = ++m_pDatabaseEngine->m_nDBMSCount;
					return TRUE;
				}
				if (!m_nDBMSCount)
				{
					try
					{
						GetDBMS()->OpenEx(szCredentials, dwOptions);
					}
					catch (CException *pException)
					{
						pException->Delete();
						return FALSE;
					}
				}
				m_nDBMSCount++;
				return TRUE;
			}
		}
	}
	return FALSE;
}

BOOL CDatabaseEngine::CloseDBMS()
{
	if (IsOpen())
	{
		if (m_pDatabaseEngine->m_pDatabase == m_pDatabase)
		{
			if (m_pDatabaseEngine->m_nDBMSCount == 1)
			{
				try
				{
					m_pDatabaseEngine->GetDBMS()->Close();
				}
				catch (CException *pException)
				{
					pException->Delete();
					return FALSE;
				}
			}
			if (m_pDatabaseEngine->m_nDBMSCount > 0)
			{
				m_nDBMSCount = --m_pDatabaseEngine->m_nDBMSCount;
				return TRUE;
			}
			return FALSE;
		}
		if (m_nDBMSCount == 1)
		{
			try
			{
				GetDBMS()->Close();
			}
			catch (CException *pException)
			{
				pException->Delete();
				return FALSE;
			}
		}
		if (m_nDBMSCount > 0)
		{
			m_nDBMSCount--;
			return TRUE;
		}
	}
	return FALSE;
}

CString CDatabaseEngine::GetName() CONST
{
	return m_szDatabaseEngine;
}

BOOL CDatabaseEngine::Save()
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save() : FALSE);
}
BOOL CDatabaseEngine::Save(ULONGLONG nComponents)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CBinaryDatabase::Save(nComponents) : FALSE);
}

BOOL CDatabaseEngine::Load()
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Load() : FALSE);
}
UINT CDatabaseEngine::Load(ULONGLONG nComponents, BOOL bAll)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CBinaryDatabase::Load(nComponents, bAll) : FALSE);
}

BOOL CDatabaseEngine::Save(CONST CDatabaseVersion *pDatabaseVersion)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseVersion) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTMPacket *pDatabaseTMPacket)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTMPacket) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTCPacket *pDatabaseTCPacket)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTCPacket) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTCFunction *pDatabaseTCFunction)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTCFunction) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTCSequence *pDatabaseTCSequence)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTCSequence) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseOBProcessor *pDatabaseOBProcessor)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseOBProcessor) : FALSE);
}
INT CDatabaseEngine::Save(CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTCProcedure) : -1);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTMParameter *pDatabaseTMParameter)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTMParameter) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTCParameter) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTMNumCalTable *pDatabaseTMNumCalTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTMNumCalTable) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTMTxtCalTable *pDatabaseTMTxtCalTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTMTxtCalTable) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTMNumOolTable *pDatabaseTMNumOolTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTMNumOolTable) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTMTxtOolTable *pDatabaseTMTxtOolTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTMTxtOolTable) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTCNumCalTable *pDatabaseTCNumCalTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTCNumCalTable) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTCTxtCalTable *pDatabaseTCTxtCalTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTCTxtCalTable) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTCNumOolTable *pDatabaseTCNumOolTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTCNumOolTable) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTCTxtOolTable *pDatabaseTCTxtOolTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTCTxtOolTable) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTCPreExeGroup *pDatabaseTCPreExeGroup)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTCPreExeGroup) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTCExeVerGroup *pDatabaseTCExeVerGroup)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTCExeVerGroup) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTMPacketGroup *pDatabaseTMPacketGroup)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTMPacketGroup) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTMPacketHeader *pDatabaseTMPacketHeader)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTMPacketHeader) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTMPacketStream *pDatabaseTMPacketStream)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTMPacketStream) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTCParameterSet *pDatabaseTCParameterSet)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTCParameterSet) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTCFunctionBlock *pDatabaseTCFunctionBlock)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTCFunctionBlock) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTMParameterGroup *pDatabaseTMParameterGroup)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTMParameterGroup) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTCPacketParameter *pDatabaseTCPacketParameter)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTCPacketParameter) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTMPacketIdentification *pDatabaseTMPacketIdentification)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTMPacketIdentification) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseTMPacketIdentificationCriterion *pDatabaseTMPacketIdentificationCriterion)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseTMPacketIdentificationCriterion) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CDatabaseOBProcessorMemoryImage *pDatabaseOBProcessorMemoryImage)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pDatabaseOBProcessorMemoryImage) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CANDLayout *pANDLayout)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pANDLayout) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CGRDLayout *pGRDLayout)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pGRDLayout) : FALSE);
}
BOOL CDatabaseEngine::Save(CONST CPODLayout *pPODLayout)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Save(pPODLayout) : FALSE);
}

BOOL CDatabaseEngine::Flush(CONST CDatabaseVersions *pDatabaseVersions, BOOL bDelete)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Flush(pDatabaseVersions, bDelete) : FALSE);
}
BOOL CDatabaseEngine::Flush(CONST CDatabaseOBProcessor *pDatabaseOBProcessor, CONST CDatabaseOBProcessorMemoryImage *pDatabaseOBProcessorMemoryImage, BOOL bDelete)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Flush(pDatabaseOBProcessor, pDatabaseOBProcessorMemoryImage, bDelete) : FALSE);
}

BOOL CDatabaseEngine::Clean(CONST CDatabaseTMPacketIdentifications *pDatabaseTMPacketIdentifications)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Clean(pDatabaseTMPacketIdentifications) : FALSE);
}

BOOL CDatabaseEngine::Delete(CONST CDatabaseVersion *pDatabaseVersion)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseVersion) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTMPacket *pDatabaseTMPacket)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTMPacket) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTCPacket *pDatabaseTCPacket)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTCPacket) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTCFunction *pDatabaseTCFunction)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTCFunction) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTCSequence *pDatabaseTCSequence)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTCSequence) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseOBProcessor *pDatabaseOBProcessor)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseOBProcessor) : FALSE);
}
INT CDatabaseEngine::Delete(CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTCProcedure) : -1);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTMParameter *pDatabaseTMParameter)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTMParameter) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTCParameter) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTMNumCalTable *pDatabaseTMNumCalTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTMNumCalTable) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTMTxtCalTable *pDatabaseTMTxtCalTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTMTxtCalTable) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTMNumOolTable *pDatabaseTMNumOolTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTMNumOolTable) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTMTxtOolTable *pDatabaseTMTxtOolTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTMTxtOolTable) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTCNumCalTable *pDatabaseTCNumCalTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTCNumCalTable) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTCTxtCalTable *pDatabaseTCTxtCalTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTCTxtCalTable) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTCNumOolTable *pDatabaseTCNumOolTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTCNumOolTable) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTCTxtOolTable *pDatabaseTCTxtOolTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTCTxtOolTable) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTCPreExeGroup *pDatabaseTCPreExeGroup)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTCPreExeGroup) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTCExeVerGroup *pDatabaseTCExeVerGroup)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTCExeVerGroup) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTMPacketGroup *pDatabaseTMPacketGroup)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTMPacketGroup) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTMPacketHeader *pDatabaseTMPacketHeader)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTMPacketHeader) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTMPacketStream *pDatabaseTMPacketStream)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTMPacketStream) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTCParameterSet *pDatabaseTCParameterSet)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTCParameterSet) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTCFunctionBlock *pDatabaseTCFunctionBlock)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTCFunctionBlock) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTMParameterGroup *pDatabaseTMParameterGroup)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTMParameterGroup) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTCPacketParameter *pDatabaseTCPacketParameter)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTCPacketParameter) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTMPacketIdentification *pDatabaseTMPacketIdentification)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTMPacketIdentification) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseTMPacketIdentificationCriterion *pDatabaseTMPacketIdentificationCriterion)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseTMPacketIdentificationCriterion) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CDatabaseOBProcessorMemoryImage *pDatabaseOBProcessorMemoryImage)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pDatabaseOBProcessorMemoryImage) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CANDLayout *pANDLayout)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pANDLayout) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CGRDLayout *pGRDLayout)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pGRDLayout) : FALSE);
}
BOOL CDatabaseEngine::Delete(CONST CPODLayout *pPODLayout)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Delete(pPODLayout) : FALSE);
}

BOOL CDatabaseEngine::Compare(CONST CDatabaseEngine *pDatabase, DATABASECOMPAREMESSAGESPROC pCompareMessagesProc, ULONGLONG nComponents)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Compare(pDatabase, pCompareMessagesProc, nComponents) : FALSE);
}

BOOL CDatabaseEngine::IsComparing() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->IsComparing() : FALSE);
}

BOOL CDatabaseEngine::StopComparing()
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->StopComparing() : FALSE);
}

BOOL CDatabaseEngine::Compile(CBinaryDatabase *pDatabase, DATABASECOMPILEMESSAGESPROC pCompileMessagesProc, ULONGLONG nComponents)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->Compile(pDatabase, pCompileMessagesProc, nComponents) : FALSE);
}

BOOL CDatabaseEngine::IsCompiling() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->IsCompiling() : FALSE);
}

BOOL CDatabaseEngine::StopCompiling()
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->StopCompiling() : FALSE);
}

BOOL CDatabaseEngine::LoadLibrary(CStringArray &szErrors)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->LoadLibrary(szErrors) : FALSE);
}

HINSTANCE CDatabaseEngine::GetLibrary() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetLibrary() : FALSE);
}

VOID CDatabaseEngine::FreeLibrary()
{
	if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this)
	{
		m_pDatabaseEngine->FreeLibrary();
		return;
	}
}

BOOL CDatabaseEngine::IsVersioningSupported() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->IsVersioningSupported() : FALSE);
}

BOOL CDatabaseEngine::IsInitialized() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->IsInitialized() : CBinaryDatabase::IsInitialized());
}

BOOL CDatabaseEngine::IsLocal() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->IsLocal() : CBinaryDatabase::IsLocal());
}

BOOL CDatabaseEngine::IsValid() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->IsValid() : CBinaryDatabase::IsValid());
}

VOID CDatabaseEngine::Reset()
{
	if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded)
	{
		m_pDatabaseEngine->Reset();
		return;
	}
	CBinaryDatabase::Reset();
}

INT CDatabaseEngine::EnumTCSequences(LPCTSTR pszXmlCode, CDatabaseTCSequences &pDatabaseTCSequences) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequences(pszXmlCode, pDatabaseTCSequences) : -1);
}

INT CDatabaseEngine::EnumANDs(CANDLayouts &pLayouts, ULONGLONG nSubcomponent, BOOL bDirectory) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->EnumANDs(pLayouts, nSubcomponent, bDirectory) : CBinaryDatabase::EnumANDs(pLayouts, nSubcomponent, bDirectory));
}
INT CDatabaseEngine::EnumANDs(LPCTSTR pszXmlCode, CANDLayouts &pLayouts) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumANDs(pszXmlCode, pLayouts) : -1);
}

INT CDatabaseEngine::EnumGRDs(CGRDLayouts &pLayouts, BOOL bDirectory) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->EnumGRDs(pLayouts, bDirectory) : CBinaryDatabase::EnumGRDs(pLayouts, bDirectory));
}
INT CDatabaseEngine::EnumGRDs(LPCTSTR pszXmlCode, CGRDLayouts &pLayouts) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumGRDs(pszXmlCode, pLayouts) : -1);
}

INT CDatabaseEngine::EnumMMDs(CMMDLayouts &pLayouts, BOOL bDirectory) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->EnumMMDs(pLayouts, bDirectory) : CBinaryDatabase::EnumMMDs(pLayouts, bDirectory));
}

INT CDatabaseEngine::EnumPODs(CPODLayouts &pLayouts, BOOL bDirectory) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->EnumPODs(pLayouts, bDirectory) : CBinaryDatabase::EnumPODs(pLayouts, bDirectory));
}
INT CDatabaseEngine::EnumPODs(LPCTSTR pszXmlCode, CPODLayouts &pLayouts) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumPODs(pszXmlCode, pLayouts) : -1);
}

INT CDatabaseEngine::EnumScripts(CAutomationScripts &pScripts, BOOL bDirectory) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->EnumScripts(pScripts, bDirectory) : CBinaryDatabase::EnumScripts(pScripts, bDirectory));
}

INT CDatabaseEngine::EnumProcedures(CDatabaseTCProcedures &pProcedures) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->EnumProcedures(pProcedures) : CBinaryDatabase::EnumProcedures(pProcedures));
}

BOOL CDatabaseEngine::LoadAND(LPCTSTR pszName, CANDLayout &cLayout, ULONGLONG nSubcomponent) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->LoadAND(pszName, cLayout, nSubcomponent) : CBinaryDatabase::LoadAND(pszName, cLayout, nSubcomponent));
}

BOOL CDatabaseEngine::LoadGRD(LPCTSTR pszName, CGRDLayout &cLayout) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->LoadGRD(pszName, cLayout) : CBinaryDatabase::LoadGRD(pszName, cLayout));
}

BOOL CDatabaseEngine::LoadMMD(LPCTSTR pszName, CMMDLayout &cLayout) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->LoadMMD(pszName, cLayout) : CBinaryDatabase::LoadMMD(pszName, cLayout));
}

BOOL CDatabaseEngine::LoadPOD(LPCTSTR pszName, CPODLayout &cLayout) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->LoadPOD(pszName, cLayout) : CBinaryDatabase::LoadPOD(pszName, cLayout));
}

BOOL CDatabaseEngine::LoadScript(LPCTSTR pszName, CAutomationScript &cScript) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->LoadScript(pszName, cScript) : CBinaryDatabase::LoadScript(pszName, cScript));
}

INT CDatabaseEngine::SaveAND(CONST CANDLayout &cLayout, ULONGLONG nSubcomponent)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->SaveAND(cLayout, nSubcomponent) : CBinaryDatabase::SaveAND(cLayout, nSubcomponent));
}

INT CDatabaseEngine::SaveGRD(CONST CGRDLayout &cLayout)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->SaveGRD(cLayout) : CBinaryDatabase::SaveGRD(cLayout));
}

INT CDatabaseEngine::SaveMMD(CONST CMMDLayout &cLayout)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->SaveMMD(cLayout) : CBinaryDatabase::SaveMMD(cLayout));
}

INT CDatabaseEngine::SavePOD(CONST CPODLayout &cLayout)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->SavePOD(cLayout) : CBinaryDatabase::SavePOD(cLayout));
}

INT CDatabaseEngine::SaveScript(CONST CAutomationScript &cScript)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->SaveScript(cScript) : CBinaryDatabase::SaveScript(cScript));
}

INT CDatabaseEngine::DeleteAND(CONST CANDLayout &cLayout, ULONGLONG nSubcomponent)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->DeleteAND(cLayout, nSubcomponent) : CBinaryDatabase::DeleteAND(cLayout, nSubcomponent));
}

INT CDatabaseEngine::DeleteGRD(CONST CGRDLayout &cLayout)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->DeleteGRD(cLayout) : CBinaryDatabase::DeleteGRD(cLayout));
}

INT CDatabaseEngine::DeleteMMD(CONST CMMDLayout &cLayout)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->DeleteMMD(cLayout) : CBinaryDatabase::DeleteMMD(cLayout));
}

INT CDatabaseEngine::DeletePOD(CONST CPODLayout &cLayout)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->DeletePOD(cLayout) : CBinaryDatabase::DeletePOD(cLayout));
}

INT CDatabaseEngine::DeleteScript(CONST CAutomationScript &cScript)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->DeleteScript(cScript) : CBinaryDatabase::DeleteScript(cScript));
}

CDatabaseTMPackets *CDatabaseEngine::GetTMPackets() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTMPackets() : CBinaryDatabase::GetTMPackets());
}

CDatabaseTCPackets *CDatabaseEngine::GetTCPackets() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTCPackets() : CBinaryDatabase::GetTCPackets());
}

CDatabaseTCFunctions *CDatabaseEngine::GetTCFunctions() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTCFunctions() : CBinaryDatabase::GetTCFunctions());
}

CDatabaseTCSequences *CDatabaseEngine::GetTCSequences() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTCSequences() : CBinaryDatabase::GetTCSequences());
}

CDatabaseTCProcedures *CDatabaseEngine::GetTCProcedures() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTCProcedures() : CBinaryDatabase::GetTCProcedures());
}

CDatabaseOBProcessors *CDatabaseEngine::GetOBProcessors() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetOBProcessors() : CBinaryDatabase::GetOBProcessors());
}

CDatabaseTMParameters *CDatabaseEngine::GetTMParameters() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTMParameters() : CBinaryDatabase::GetTMParameters());
}

CDatabaseTCParameters *CDatabaseEngine::GetTCParameters() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTCParameters() : CBinaryDatabase::GetTCParameters());
}

CDatabaseTMNumCalTables *CDatabaseEngine::GetTMNumCalTables() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTMNumCalTables() : CBinaryDatabase::GetTMNumCalTables());
}

CDatabaseTMTxtCalTables *CDatabaseEngine::GetTMTxtCalTables() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTMTxtCalTables() : CBinaryDatabase::GetTMTxtCalTables());
}

CDatabaseTMNumOolTables *CDatabaseEngine::GetTMNumOolTables() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTMNumOolTables() : CBinaryDatabase::GetTMNumOolTables());
}

CDatabaseTMTxtOolTables *CDatabaseEngine::GetTMTxtOolTables() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTMTxtOolTables() : CBinaryDatabase::GetTMTxtOolTables());
}

CDatabaseTCNumCalTables *CDatabaseEngine::GetTCNumCalTables() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTCNumCalTables() : CBinaryDatabase::GetTCNumCalTables());
}

CDatabaseTCTxtCalTables *CDatabaseEngine::GetTCTxtCalTables() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTCTxtCalTables() : CBinaryDatabase::GetTCTxtCalTables());
}

CDatabaseTCNumOolTables *CDatabaseEngine::GetTCNumOolTables() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTCNumOolTables() : CBinaryDatabase::GetTCNumOolTables());
}

CDatabaseTCTxtOolTables *CDatabaseEngine::GetTCTxtOolTables() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTCTxtOolTables() : CBinaryDatabase::GetTCTxtOolTables());
}

CDatabaseTCPreExeGroups *CDatabaseEngine::GetTCPreExeGroups() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTCPreExeGroups() : CBinaryDatabase::GetTCPreExeGroups());
}

CDatabaseTCExeVerGroups *CDatabaseEngine::GetTCExeVerGroups() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTCExeVerGroups() : CBinaryDatabase::GetTCExeVerGroups());
}

CDatabaseTMPacketGroups *CDatabaseEngine::GetTMPacketGroups() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTMPacketGroups() : CBinaryDatabase::GetTMPacketGroups());
}

CDatabaseTMPacketHeaders *CDatabaseEngine::GetTMPacketHeaders() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTMPacketHeaders() : CBinaryDatabase::GetTMPacketHeaders());
}

CDatabaseTMPacketStreams *CDatabaseEngine::GetTMPacketStreams() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTMPacketStreams() : CBinaryDatabase::GetTMPacketStreams());
}

CDatabaseTCParameterSets *CDatabaseEngine::GetTCParameterSets() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTCParameterSets() : CBinaryDatabase::GetTCParameterSets());
}

CDatabaseTCFunctionBlocks *CDatabaseEngine::GetTCFunctionBlocks() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTCFunctionBlocks() : CBinaryDatabase::GetTCFunctionBlocks());
}

CDatabaseTMParameterGroups *CDatabaseEngine::GetTMParameterGroups() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTMParameterGroups() : CBinaryDatabase::GetTMParameterGroups());
}

CDatabaseTCPacketParameters *CDatabaseEngine::GetTCPacketParameters() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTCPacketParameters() : CBinaryDatabase::GetTCPacketParameters());
}

CDatabaseTMPacketIdentifications *CDatabaseEngine::GetTMPacketIdentifications() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTMPacketIdentifications() : CBinaryDatabase::GetTMPacketIdentifications());
}

CDatabaseTMPacketIdentificationCriteria *CDatabaseEngine::GetTMPacketIdentificationCriteria() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTMPacketIdentificationCriteria() : CBinaryDatabase::GetTMPacketIdentificationCriteria());
}

CDatabaseOBProcessorMemoryImages *CDatabaseEngine::GetOBProcessorMemoryImages() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetOBProcessorMemoryImages() : CBinaryDatabase::GetOBProcessorMemoryImages());
}

CDatabaseTMPacket *CDatabaseEngine::GetTMPacketSubTags() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetTMPacketSubTags() : CBinaryDatabase::GetTMPacketSubTags());
}

CANDLayouts *CDatabaseEngine::GetANDs(ULONGLONG nSubcomponent) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetANDs(nSubcomponent) : CBinaryDatabase::GetANDs(nSubcomponent));
}

CGRDLayouts *CDatabaseEngine::GetGRDs() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetGRDs() : CBinaryDatabase::GetGRDs());
}

CMMDLayouts *CDatabaseEngine::GetMMDs() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetMMDs() : CBinaryDatabase::GetMMDs());
}

CPODLayouts *CDatabaseEngine::GetPODs() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetPODs() : CBinaryDatabase::GetPODs());
}

CAutomationScripts *CDatabaseEngine::GetScripts() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this  &&  !m_bReloaded) ? m_pDatabaseEngine->GetScripts() : CBinaryDatabase::GetScripts());
}

BOOL CDatabaseEngine::DeleteTMPacket(LPCTSTR pszTag)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTMPacket(pszTag) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCPacket(LPCTSTR pszTag)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCPacket(pszTag) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCFunction(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCFunction(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCSequence(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCSequence(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteOBProcessor(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteOBProcessor(pszName) : FALSE);
}

INT CDatabaseEngine::DeleteTCProcedure(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCProcedure(pszName) : -1);
}

BOOL CDatabaseEngine::DeleteTMParameter(LPCTSTR pszTag)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTMParameter(pszTag) : FALSE);
}

BOOL CDatabaseEngine::DeleteTMNumCalTable(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTMNumCalTable(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTMTxtCalTable(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTMTxtCalTable(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTMNumOolTable(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTMNumOolTable(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTMTxtOolTable(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTMTxtOolTable(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCParameter(LPCTSTR pszTag)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCParameter(pszTag) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCNumCalTable(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCNumCalTable(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCTxtCalTable(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCTxtCalTable(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCNumOolTable(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCNumOolTable(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCTxtOolTable(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCTxtOolTable(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCPreExeGroup(LPCTSTR pszID)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCPreExeGroup(pszID) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCExeVerStage(LPCTSTR pszID)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCExeVerStage(pszID) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCExeVerGroup(LPCTSTR pszID)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCExeVerGroup(pszID) : FALSE);
}

BOOL CDatabaseEngine::DeleteTMPacketGroup(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTMPacketGroup(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTMPacketHeader(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTMPacketHeader(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTMPacketStream(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTMPacketStream(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCParameterSet(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCParameterSet(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCFunctionBlock(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCFunctionBlock(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTMParameterGroup(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTMParameterGroup(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCPacketParameter(LPCTSTR pszTag)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCPacketParameter(pszTag) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCParameterValueSet(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCParameterValueSet(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTCFunctionRoutingPath(INT nID)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTCFunctionRoutingPath(nID) : FALSE);
}

BOOL CDatabaseEngine::DeleteTMPacketIdentification(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTMPacketIdentification(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteTMPacketIdentificationCriterion(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTMPacketIdentificationCriterion(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteOBProcessorMemoryImage(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteOBProcessorMemoryImage(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteAND(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetDatabaseEngine()->DeleteAND(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeleteGRD(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteGRD(pszName) : FALSE);
}

BOOL CDatabaseEngine::DeletePOD(LPCTSTR pszName)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeletePOD(pszName) : FALSE);
}

BOOL CDatabaseEngine::CheckVersionName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckVersionName(pszName) : FALSE);
}

INT CDatabaseEngine::GetVersionNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetVersionNameLength() : 0);
}

BOOL CDatabaseEngine::CheckVersionComment(LPCTSTR pszComment) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckVersionComment(pszComment) : FALSE);
}

INT CDatabaseEngine::GetVersionCommentLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetVersionCommentLength() : 0);
}

BOOL CDatabaseEngine::CheckVersionDomain(LPCTSTR pszDomain) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckVersionDomain(pszDomain) : FALSE);
}

INT CDatabaseEngine::GetVersionDomainLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetVersionDomainLength() : 0);
}

INT CDatabaseEngine::TranslateVersionDomain(LPCTSTR pszDomain) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateVersionDomain(pszDomain) : 0);
}
CString CDatabaseEngine::TranslateVersionDomain(INT nDomain) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateVersionDomain(nDomain) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckVersionRelease(LPCTSTR pszRelease) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckVersionRelease(pszRelease) : FALSE);
}

INT CDatabaseEngine::GetVersionReleaseLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetVersionReleaseLength() : 0);
}

INT CDatabaseEngine::TranslateVersionRelease(LPCTSTR pszRelease) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateVersionRelease(pszRelease) : 0);
}
CString CDatabaseEngine::TranslateVersionRelease(INT nRelease) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateVersionRelease(nRelease) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckVersionIssue(LPCTSTR pszIssue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckVersionIssue(pszIssue) : FALSE);
}

INT CDatabaseEngine::GetVersionIssueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetVersionIssueLength() : 0);
}

INT CDatabaseEngine::TranslateVersionIssue(LPCTSTR pszIssue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateVersionIssue(pszIssue) : 0);
}
CString CDatabaseEngine::TranslateVersionIssue(INT nIssue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateVersionIssue(nIssue) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketTag(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketTag(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTMPacketTagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketTagLength() : 0);
}

CString CDatabaseEngine::GetTMPacketSubTag() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketSubTag() : EMPTYSTRING);
}

CString CDatabaseEngine::GetTMPacketDummyTag() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketDummyTag() : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketID(UINT nID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketID(nID) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketIDRange(UINT &nLow, UINT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketIDRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketType(INT nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketType(nType) : FALSE);
}

INT CDatabaseEngine::GetTMPacketTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketTypeLength() : 0);
}

BOOL CDatabaseEngine::GetTMPacketTypeRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketTypeRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTMPacketType(LPCTSTR pszType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketType(pszType) : 0);
}
CString CDatabaseEngine::TranslateTMPacketType(INT nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketType(nType) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketSubType(INT nSubType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketSubType(nSubType) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketSubTypeRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketSubTypeRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTMPacketDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTMPacketDetails(LPCTSTR pszDetails) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketDetails(pszDetails) : FALSE);
}

INT CDatabaseEngine::GetTMPacketDetailsLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketDetailsLength() : 0);
}

BOOL CDatabaseEngine::CheckTMPacketSubSystem(LPCTSTR pszSubSystem) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketSubSystem(pszSubSystem) : FALSE);
}

INT CDatabaseEngine::GetTMPacketSubSystemLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketSubSystemLength() : 0);
}

INT CDatabaseEngine::EnumTMPacketDataFieldHeaderFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketDataFieldHeaderFlags(szFlags, nFlags) : 0);
}

INT CDatabaseEngine::TranslateTMPacketDataFieldHeaderFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketDataFieldHeaderFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketDataFieldHeaderFlag(INT nFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketDataFieldHeaderFlag(nFlag, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketDataFieldHeader(INT bPresent) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketDataFieldHeader(bPresent) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketDataFieldHeaderName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketDataFieldHeaderName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTMPacketDataFieldHeaderNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketDataFieldHeaderNameLength() : 0);
}

INT CDatabaseEngine::EnumTMPacketAPIDs(CStringArray &szAPIDs, CUIntArray &nAPIDs) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketAPIDs(szAPIDs, nAPIDs) : 0);
}

BOOL CDatabaseEngine::CheckTMPacketAPID(LPCTSTR pszTag, INT nAPID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketAPID(pszTag, nAPID) : FALSE);
}
BOOL CDatabaseEngine::CheckTMPacketAPID(INT nAPID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketAPID(nAPID) : FALSE);
}

INT CDatabaseEngine::GetTMPacketAPIDLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketAPIDLength() : 0);
}

BOOL CDatabaseEngine::GetTMPacketAPIDRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketAPIDRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTMPacketAPID(LPCTSTR pszAPID, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketAPID(pszAPID, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketAPID(INT nAPID, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketAPID(nAPID, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMPacketTMTypes(CStringArray &szTMTypes, CUIntArray &nTMTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketTMTypes(szTMTypes, nTMTypes) : 0);
}

BOOL CDatabaseEngine::CheckTMPacketTMType(INT nTMType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketTMType(nTMType) : FALSE);
}

INT CDatabaseEngine::GetTMPacketTMTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketTMTypeLength() : 0);
}

INT CDatabaseEngine::TranslateTMPacketTMType(LPCTSTR pszTMType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketTMType(pszTMType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketTMType(INT nTMType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketTMType(nTMType, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketTMID(INT nTMID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketTMID(nTMID) : FALSE);
}

INT CDatabaseEngine::GetTMPacketTMIDLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketTMIDLength() : 0);
}

BOOL CDatabaseEngine::GetTMPacketTMIDRange(UINT &nLow, UINT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketTMIDRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTMPacketTMID(LPCTSTR pszTMID, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketTMID(pszTMID, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketTMID(INT nTMID, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketTMID(nTMID, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacket3Disc(INT n3Disc) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacket3Disc(n3Disc) : FALSE);
}

INT CDatabaseEngine::GetTMPacket3DiscLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacket3DiscLength() : 0);
}

BOOL CDatabaseEngine::GetTMPacket3DiscRange(UINT &nLow, UINT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacket3DiscRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTMPacket3Disc(LPCTSTR psz3Disc, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacket3Disc(psz3Disc, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacket3Disc(INT n3Disc, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacket3Disc(n3Disc, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketFirstFieldOffset(INT nOffset) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketFirstFieldOffset(nOffset) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketFirstFieldOffsetRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketFirstFieldOffsetRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketFirstFieldWidth(INT nWidth) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketFirstFieldWidth(nWidth) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketFirstFieldWidthRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketFirstFieldWidthRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketFirstFieldValue(INT nValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketFirstFieldValue(nValue) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketFirstFieldValueRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketFirstFieldValueRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketSecondFieldOffset(INT nOffset) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketSecondFieldOffset(nOffset) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketSecondFieldOffsetRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketSecondFieldOffsetRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketSecondFieldWidth(INT nWidth) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketSecondFieldWidth(nWidth) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketSecondFieldWidthRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketSecondFieldWidthRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketSecondFieldValue(INT nValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketSecondFieldValue(nValue) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketSecondFieldValueRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketSecondFieldValueRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketDataFieldHeaderSize(INT nSize) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketDataFieldHeaderSize(nSize) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketDataFieldHeaderSizeRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketDataFieldHeaderSizeRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketContentID(INT nID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketContentID(nID) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketContentIDRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketContentIDRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketTransmissionRate(INT nType, INT nInterval) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketTransmissionRate(nType, nInterval) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketTransmissionRateRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketTransmissionRateRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketTransmissionRetries(INT nRetries) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketTransmissionRetries(nRetries) : FALSE);
}

INT CDatabaseEngine::GetTMPacketTransmissionRetriesLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketTransmissionRetriesLength() : 0);
}

BOOL CDatabaseEngine::GetTMPacketTransmissionRetriesRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketTransmissionRetriesRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTMPacketTransmissionRetries(LPCTSTR pszRetries) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketTransmissionRetries(pszRetries) : 0);
}
CString CDatabaseEngine::TranslateTMPacketTransmissionRetries(INT nRetries) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketTransmissionRetries(nRetries) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMPacketTimestampFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketTimestampFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTMPacketTimestampFlag(LPCTSTR pszFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketTimestampFlag(pszFlag) : FALSE);
}

INT CDatabaseEngine::GetTMPacketTimestampFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketTimestampFlagLength() : 0);
}

INT CDatabaseEngine::TranslateTMPacketTimestampFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketTimestampFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketTimestampFlag(INT nFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketTimestampFlag(nFlag, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketVirtualChannel(INT nAPID, INT nChannelID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketVirtualChannel(nAPID, nChannelID) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketVirtualChannelRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketVirtualChannelRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumTMPacketEventTypes(CStringArray &szTypes, CUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketEventTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTMPacketEventType(UINT nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketEventType(nType) : FALSE);
}

INT CDatabaseEngine::GetTMPacketEventTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketEventTypeLength() : 0);
}

INT CDatabaseEngine::TranslateTMPacketEventType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketEventType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketEventType(INT nType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketEventType(nType, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketEventID(INT nType, LPCTSTR pszEventID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketEventID(nType, pszEventID) : FALSE);
}
BOOL CDatabaseEngine::CheckTMPacketEventID(LPCTSTR pszEventID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketEventID(pszEventID) : FALSE);
}

INT CDatabaseEngine::GetTMPacketEventIDLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketEventIDLength() : 0);
}

INT CDatabaseEngine::EnumTMPacketCyclicRedundancyCheckFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketCyclicRedundancyCheckFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTMPacketCyclicRedundancyCheckFlag(INT nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketCyclicRedundancyCheckFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTMPacketCyclicRedundancyCheckFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketCyclicRedundancyCheckFlagLength() : 0);
}

INT CDatabaseEngine::TranslateTMPacketCyclicRedundancyCheckFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketCyclicRedundancyCheckFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketCyclicRedundancyCheckFlag(INT nFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketCyclicRedundancyCheckFlag(nFlag, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMPacketIdentificationValidityFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketIdentificationValidityFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTMPacketIdentificationValidityFlag(LPCTSTR pszFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketIdentificationValidityFlag(pszFlag) : FALSE);
}

INT CDatabaseEngine::GetTMPacketIdentificationValidityFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketIdentificationValidityFlagLength() : 0);
}

INT CDatabaseEngine::TranslateTMPacketIdentificationValidityFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketIdentificationValidityFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketIdentificationValidityFlag(INT nFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketIdentificationValidityFlag(nFlag, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMPacketDataSizes(CStringArray &szSizes, CUIntArray &nSizes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketDataSizes(szSizes, nSizes) : 0);
}

BOOL CDatabaseEngine::CheckTMPacketDataSize(INT cbData, INT nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketDataSize(cbData, nFlag) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketDataSizeRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketDataSizeRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTMPacketDataSize(LPCTSTR pszSize, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketDataSize(pszSize, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketDataSize(INT nSize, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketDataSize(nSize, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::GetTMPacketDataSize() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketDataSize() : 0);
}

INT CDatabaseEngine::GetTMPacketDataFieldHeaderSize() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketDataFieldHeaderSize() : 0);
}

INT CDatabaseEngine::GetTMPacketTotalSize() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketTotalSize() : 0);
}

INT CDatabaseEngine::EnumTMPacketStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTMPacketStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTMPacketStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTMPacketStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketHeaderName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketHeaderName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTMPacketHeaderNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketHeaderNameLength() : 0);
}

INT CDatabaseEngine::EnumTMPacketHeaderTMTypeFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketHeaderTMTypeFlags(szFlags, nFlags) : 0);
}

INT CDatabaseEngine::TranslateTMPacketHeaderTMTypeFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketHeaderTMTypeFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketHeaderTMTypeFlag(INT nFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketHeaderTMTypeFlag(nFlag, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketHeaderTMTypePosition(INT nByte, INT nBit, INT nLength) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketHeaderTMTypePosition(nByte, nBit, nLength) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketHeaderTMTypePositionRange(INT &nOffsetLow, INT &nOffsetHigh, INT &nLengthLow, INT &nLengthHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketHeaderTMTypePositionRange(nOffsetLow, nOffsetHigh, nLengthLow, nLengthHigh) : FALSE);
}

INT CDatabaseEngine::EnumTMPacketHeaderTMIDFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketHeaderTMIDFlags(szFlags, nFlags) : 0);
}

INT CDatabaseEngine::TranslateTMPacketHeaderTMIDFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketHeaderTMIDFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketHeaderTMIDFlag(INT nFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketHeaderTMIDFlag(nFlag, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketHeaderTMIDPosition(INT nByte, INT nBit, INT nLength) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketHeaderTMIDPosition(nByte, nBit, nLength) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketHeaderTMIDPositionRange(INT &nOffsetLow, INT &nOffsetHigh, INT &nLengthLow, INT &nLengthHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketHeaderTMIDPositionRange(nOffsetLow, nOffsetHigh, nLengthLow, nLengthHigh) : FALSE);
}

INT CDatabaseEngine::EnumTMPacketHeader3DiscFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketHeader3DiscFlags(szFlags, nFlags) : 0);
}

INT CDatabaseEngine::TranslateTMPacketHeader3DiscFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketHeader3DiscFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketHeader3DiscFlag(INT nFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketHeader3DiscFlag(nFlag, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketHeader3DiscPosition(INT nByte, INT nBit, INT nLength) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketHeader3DiscPosition(nByte, nBit, nLength) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketHeader3DiscPositionRange(INT &nOffsetLow, INT &nOffsetHigh, INT &nLengthLow, INT &nLengthHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketHeader3DiscPositionRange(nOffsetLow, nOffsetHigh, nLengthLow, nLengthHigh) : FALSE);
}

INT CDatabaseEngine::EnumTMPacketHeaderTimestampFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketHeaderTimestampFlags(szFlags, nFlags) : 0);
}

INT CDatabaseEngine::TranslateTMPacketHeaderTimestampFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketHeaderTimestampFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketHeaderTimestampFlag(INT nFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketHeaderTimestampFlag(nFlag, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketHeaderTimestampPosition(INT nByte, INT nBit, INT nLength) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketHeaderTimestampPosition(nByte, nBit, nLength) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketHeaderTimestampPositionRange(INT &nOffsetLow, INT &nOffsetHigh, INT &nLengthLow, INT &nLengthHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketHeaderTimestampPositionRange(nOffsetLow, nOffsetHigh, nLengthLow, nLengthHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketParameterTag(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterTag(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTMPacketParameterTagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterTagLength() : 0);
}

BOOL CDatabaseEngine::CheckTMPacketParameterDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTMPacketParameterDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTMPacketParameterSequenceNumber(INT nNumber) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterSequenceNumber(nNumber) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketParameterSequenceNumberRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterSequenceNumberRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketParameterGroupSize(INT nSize) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterGroupSize(nSize) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketParameterGroupSizeRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterGroupSizeRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketParameterGroupRepetitionCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterGroupRepetitionCount(nCount) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketParameterGroupRepetitionCountRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterGroupRepetitionCountRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumTMPacketParameterChoiceFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketParameterChoiceFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTMPacketParameterChoiceFlag(UINT nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterChoiceFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTMPacketParameterChoiceFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterChoiceFlagLength() : 0);
}

UINT CDatabaseEngine::TranslateTMPacketParameterChoiceFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketParameterChoiceFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketParameterChoiceFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketParameterChoiceFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMPacketParameterOnBoardIDFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketParameterOnBoardIDFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTMPacketParameterOnBoardIDFlag(UINT nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterOnBoardIDFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTMPacketParameterOnBoardIDFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterOnBoardIDFlagLength() : 0);
}

UINT CDatabaseEngine::TranslateTMPacketParameterOnBoardIDFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketParameterOnBoardIDFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketParameterOnBoardIDFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketParameterOnBoardIDFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketParameterBytePosition(INT nByte) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterBytePosition(nByte) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketParameterBytePositionRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterBytePositionRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketParameterBitPosition(INT nBit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterBitPosition(nBit) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketParameterBitPositionRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterBitPositionRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketParameterWidth(INT nWidth) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterWidth(nWidth) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketParameterWidthRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterWidthRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketParameterOffset(INT nOffset) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterOffset(nOffset) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketParameterOffsetRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterOffsetRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketParameterOccurrence(INT nOccurrence) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterOccurrence(nOccurrence) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketParameterOccurrenceRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterOccurrenceRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketParameterOccurrenceCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterOccurrenceCount(nCount) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketParameterOccurrenceCountRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterOccurrenceCountRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketParameterOccurrenceInterval(INT nOccurrence, INT nInterval) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterOccurrenceInterval(nOccurrence, nInterval) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketParameterOccurrenceIntervalRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterOccurrenceIntervalRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketParameterOccurrenceTimeOffset(INT nOffset) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterOccurrenceTimeOffset(nOffset) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketParameterOccurrenceTimeOffsetRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterOccurrenceTimeOffsetRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketParameterOccurrenceTimeInterval(INT nOccurrence, INT nInterval) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterOccurrenceTimeInterval(nOccurrence, nInterval) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketParameterOccurrenceTimeIntervalRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterOccurrenceTimeIntervalRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketParameterValidity(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterValidity(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTMPacketParameterValidityLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterValidityLength() : 0);
}

INT CDatabaseEngine::EnumTMPacketParameterDisplayColumnsFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketParameterDisplayColumnsFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTMPacketParameterDisplayColumnsFlag(UINT nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterDisplayColumnsFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTMPacketParameterDisplayColumnsFlagRange(UINT &nLow, UINT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterDisplayColumnsFlagRange(nLow, nHigh) : 0);
}

UINT CDatabaseEngine::TranslateTMPacketParameterDisplayColumnsFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketParameterDisplayColumnsFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketParameterDisplayColumnsFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketParameterDisplayColumnsFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMPacketParameterDisplayAlignmentFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketParameterDisplayAlignmentFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTMPacketParameterDisplayAlignmentFlag(UINT nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterDisplayAlignmentFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTMPacketParameterDisplayAlignmentFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterDisplayAlignmentFlagLength() : 0);
}

UINT CDatabaseEngine::TranslateTMPacketParameterDisplayAlignmentFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketParameterDisplayAlignmentFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketParameterDisplayAlignmentFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketParameterDisplayAlignmentFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMPacketParameterDisplayNewLineFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketParameterDisplayNewLineFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTMPacketParameterDisplayNewLineFlag(UINT nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterDisplayNewLineFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTMPacketParameterDisplayNewLineFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterDisplayNewLineFlagLength() : 0);
}

UINT CDatabaseEngine::TranslateTMPacketParameterDisplayNewLineFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketParameterDisplayNewLineFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketParameterDisplayNewLineFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketParameterDisplayNewLineFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMPacketParameterDisplayFormatFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketParameterDisplayFormatFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTMPacketParameterDisplayFormatFlag(UINT nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketParameterDisplayFormatFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTMPacketParameterDisplayFormatFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketParameterDisplayFormatFlagLength() : 0);
}

UINT CDatabaseEngine::TranslateTMPacketParameterDisplayFormatFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketParameterDisplayFormatFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketParameterDisplayFormatFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketParameterDisplayFormatFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketStreamName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketStreamName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTMPacketStreamNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketStreamNameLength() : 0);
}

INT CDatabaseEngine::EnumTMPacketStreamAPIDs(CStringArray &szAPIDs, CUIntArray &nAPIDs) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMPacketStreamAPIDs(szAPIDs, nAPIDs) : 0);
}

BOOL CDatabaseEngine::CheckTMPacketStreamAPID(INT nAPID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketStreamAPID(nAPID) : FALSE);
}

INT CDatabaseEngine::GetTMPacketStreamAPIDLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketStreamAPIDLength() : 0);
}

INT CDatabaseEngine::TranslateTMPacketStreamAPID(LPCTSTR pszAPID, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketStreamAPID(pszAPID, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketStreamAPID(INT nAPID, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketStreamAPID(nAPID, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketStreamTMID(INT nTMID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketStreamTMID(nTMID) : FALSE);
}

INT CDatabaseEngine::GetTMPacketStreamTMIDLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketStreamTMIDLength() : 0);
}

BOOL CDatabaseEngine::GetTMPacketStreamTMIDRange(UINT &nLow, UINT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketStreamTMIDRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTMPacketStreamTMID(LPCTSTR pszTMID, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketStreamTMID(pszTMID, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketStreamTMID(INT nTMID, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketStreamTMID(nTMID, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketStreamPeriod(INT nPeriod) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketStreamPeriod(nPeriod) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketStreamPeriodRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketStreamPeriodRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketStreamTimeout(INT nTimeout) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketStreamTimeout(nTimeout) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketStreamTimeoutRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketStreamTimeoutRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketStreamValidityParameter(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketStreamValidityParameter(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTMPacketStreamValidityParameterLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketStreamValidityParameterLength() : 0);
}

BOOL CDatabaseEngine::CheckTMPacketStreamValidityValue(INT nValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketStreamValidityValue(nValue) : FALSE);
}

BOOL CDatabaseEngine::GetTMPacketStreamValidityValueRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketStreamValidityValueRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMPacketGroupName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketGroupName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTMPacketGroupNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketGroupNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTMPacketGroupDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketGroupDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTMPacketGroupDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketGroupDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTMPacketGroupType(LPCTSTR pszType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketGroupType(pszType) : FALSE);
}

INT CDatabaseEngine::GetTMPacketGroupTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMPacketGroupTypeLength() : 0);
}

INT CDatabaseEngine::TranslateTMPacketGroupType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketGroupType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMPacketGroupType(INT nType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMPacketGroupType(nType, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMPacketGroupMember(UINT nID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMPacketGroupMember(nID) : FALSE);
}

BOOL CDatabaseEngine::CheckTCPacketTag(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketTag(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTCPacketTagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketTagLength() : 0);
}

BOOL CDatabaseEngine::CheckTCPacketType(INT nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketType(nType) : FALSE);
}

INT CDatabaseEngine::GetTCPacketTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketTypeLength() : 0);
}

INT CDatabaseEngine::TranslateTCPacketType(LPCTSTR pszType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketType(pszType) : 0);
}
CString CDatabaseEngine::TranslateTCPacketType(INT nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketType(nType) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCPacketDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCPacketDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTCPacketDetails(LPCTSTR pszDetails) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketDetails(pszDetails) : FALSE);
}

INT CDatabaseEngine::GetTCPacketDetailsLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketDetailsLength() : 0);
}

INT CDatabaseEngine::EnumTCPacketDataFieldHeaderFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCPacketDataFieldHeaderFlags(szFlags, nFlags) : 0);
}

INT CDatabaseEngine::TranslateTCPacketDataFieldHeaderFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketDataFieldHeaderFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCPacketDataFieldHeaderFlag(INT nFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketDataFieldHeaderFlag(nFlag, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCPacketDataFieldHeader(INT bPresent) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketDataFieldHeader(bPresent) : FALSE);
}

INT CDatabaseEngine::EnumTCPacketAPIDs(CStringArray &szAPIDs, CUIntArray &nAPIDs) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCPacketAPIDs(szAPIDs, nAPIDs) : 0);
}

BOOL CDatabaseEngine::CheckTCPacketAPID(INT nAPID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketAPID(nAPID) : FALSE);
}

INT CDatabaseEngine::GetTCPacketAPIDLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketAPIDLength() : 0);
}

INT CDatabaseEngine::TranslateTCPacketAPID(LPCTSTR pszAPID, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketAPID(pszAPID, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCPacketAPID(INT nAPID, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketAPID(nAPID, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCPacketDataSizes(CStringArray &szSizes, CUIntArray &nSizes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCPacketDataSizes(szSizes, nSizes) : 0);
}

BOOL CDatabaseEngine::GetTCPacketDataSizeRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketDataSizeRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTCPacketDataSize(LPCTSTR pszSize, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketDataSize(pszSize, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCPacketDataSize(INT nSize, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketDataSize(nSize, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCPacketDataSize(ULONGLONG nAttributes, INT nFlag, INT cbData) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketDataSize(nAttributes, nFlag, cbData) : FALSE);
}

INT CDatabaseEngine::GetTCPacketDataSize() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketDataSize() : 0);
}

INT CDatabaseEngine::GetTCPacketDataFieldHeaderSize() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketDataFieldHeaderSize() : 0);
}

INT CDatabaseEngine::GetTCPacketTotalSize() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketTotalSize() : 0);
}

INT CDatabaseEngine::EnumTCPacketStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCPacketStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTCPacketStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTCPacketStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTCPacketStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCPacketStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCPacketParameterTag(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketParameterTag(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTCPacketParameterTagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketParameterTagLength() : 0);
}

BOOL CDatabaseEngine::CheckTCPacketParameterDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketParameterDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCPacketParameterDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketParameterDescriptionLength() : 0);
}

INT CDatabaseEngine::EnumTCPacketParameterTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCPacketParameterTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCPacketParameterType(LPCTSTR pszTag, ULONGLONG nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketParameterType(pszTag, nType) : FALSE);
}

INT CDatabaseEngine::GetTCPacketParameterTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketParameterTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCPacketParameterType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketParameterType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCPacketParameterType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketParameterType(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCPacketParameterValueInterpretations(CStringArray &szInterpretations, CLongUIntArray &nInterpretations) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCPacketParameterValueInterpretations(szInterpretations, nInterpretations) : 0);
}

BOOL CDatabaseEngine::CheckTCPacketParameterValueInterpretation(ULONGLONG nAttributes, ULONGLONG nInterpretation) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketParameterValueInterpretation(nAttributes, nInterpretation) : FALSE);
}

INT CDatabaseEngine::GetTCPacketParameterValueInterpretationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketParameterValueInterpretationLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCPacketParameterValueInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketParameterValueInterpretation(pszInterpretation, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCPacketParameterValueInterpretation(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketParameterValueInterpretation(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCPacketParameterValueCodings(CStringArray &szCodings, CLongUIntArray &nCodings) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCPacketParameterValueCodings(szCodings, nCodings) : 0);
}

BOOL CDatabaseEngine::CheckTCPacketParameterValueCoding(ULONGLONG nAttributes, ULONGLONG nCoding) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketParameterValueCoding(nAttributes, nCoding) : FALSE);
}

INT CDatabaseEngine::GetTCPacketParameterValueCodingLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketParameterValueCodingLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCPacketParameterValueCoding(LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketParameterValueCoding(pszCoding, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCPacketParameterValueCoding(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketParameterValueCoding(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCPacketParameterValueRadixes(CStringArray &szRadixes, CLongUIntArray &nRadixes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCPacketParameterValueRadixes(szRadixes, nRadixes) : 0);
}

BOOL CDatabaseEngine::CheckTCPacketParameterValueRadix(ULONGLONG nAttributes, ULONGLONG nRadix) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketParameterValueRadix(nAttributes, nRadix) : FALSE);
}

INT CDatabaseEngine::GetTCPacketParameterValueRadixLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketParameterValueRadixLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCPacketParameterValueRadix(LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketParameterValueRadix(pszRadix, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCPacketParameterValueRadix(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketParameterValueRadix(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCPacketParameterValueBitWidth(INT nWidth) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketParameterValueBitWidth(nWidth) : FALSE);
}

BOOL CDatabaseEngine::GetTCPacketParameterValueBitWidthRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketParameterValueBitWidthRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCPacketParameterValueBitOffset(INT nOffset) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketParameterValueBitOffset(nOffset) : FALSE);
}

BOOL CDatabaseEngine::GetTCPacketParameterValueBitOffsetRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketParameterValueBitOffsetRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCPacketParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketParameterConstValue(nAttributes, pszConstValue) : FALSE);
}

INT CDatabaseEngine::GetTCPacketParameterConstValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketParameterConstValueLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCPacketParameterConstValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketParameterConstValue(nAttributes, nWidth, pszConstValue) : 0);
}
CString CDatabaseEngine::TranslateTCPacketParameterConstValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketParameterConstValue(nAttributes, nWidth, nConstValue) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCPacketParameterConstTimeType(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketParameterConstTimeType(pszTag) : FALSE);
}

BOOL CDatabaseEngine::CheckTCPacketParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPacketParameterConstTime(nAttributes, pszConstTime) : FALSE);
}

INT CDatabaseEngine::GetTCPacketParameterConstTimeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPacketParameterConstTimeLength() : 0);
}

CTimeTag CDatabaseEngine::TranslateTCPacketParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPacketParameterConstTime(nAttributes, pszConstTime) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionExtendedDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionExtendedDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionExtendedDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionExtendedDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionDetails(LPCTSTR pszDetails) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionDetails(pszDetails) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionDetailsLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionDetailsLength() : 0);
}

INT CDatabaseEngine::EnumTCFunctionTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCFunctionTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionType(ULONGLONG nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionType(nType) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCFunctionType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionType(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCFunctionAPID(INT nAPID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionAPID(nAPID) : FALSE);
}

BOOL CDatabaseEngine::GetTCFunctionAPIDRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionAPIDRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumTCFunctionTCTypes(CStringArray &szTCTypes, CLongUIntArray &nTCTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCFunctionTCTypes(szTCTypes, nTCTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionTCType(ULONGLONG nTCType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionTCType(nTCType) : FALSE);
}

BOOL CDatabaseEngine::GetTCFunctionTCTypeRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionTCTypeRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionTCTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionTCTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCFunctionTCType(LPCTSTR pszTCType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionTCType(pszTCType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionTCType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionTCType(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCFunctionTCID(INT nTCID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionTCID(nTCID) : FALSE);
}

BOOL CDatabaseEngine::GetTCFunctionTCIDRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionTCIDRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionTCIDLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionTCIDLength() : 0);
}

INT CDatabaseEngine::TranslateTCFunctionTCID(LPCTSTR pszTCID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionTCID(pszTCID) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionTCID(INT nTCID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionTCID(nTCID) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCFunctionMapID(INT nMapID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionMapID(nMapID) : FALSE);
}

BOOL CDatabaseEngine::GetTCFunctionMapIDRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionMapIDRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCFunctionPacketTag(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionPacketTag(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionPacketTagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionPacketTagLength() : 0);
}

INT CDatabaseEngine::EnumTCFunctionExecutionFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCFunctionExecutionFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionExecutionFlag(ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionExecutionFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionExecutionFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionExecutionFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCFunctionExecutionFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionExecutionFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionExecutionFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionExecutionFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCFunctionPriorityFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCFunctionPriorityFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionPriorityFlag(ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionPriorityFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionPriorityFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionPriorityFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCFunctionPriorityFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionPriorityFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionPriorityFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionPriorityFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCFunctionHazardousFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCFunctionHazardousFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionHazardousFlag(ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionHazardousFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionHazardousFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionHazardousFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCFunctionHazardousFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionHazardousFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionHazardousFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionHazardousFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCFunctionPlanningFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCFunctionPlanningFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionPlanningFlag(ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionPlanningFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionPlanningFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionPlanningFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCFunctionPlanningFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionPlanningFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionPlanningFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionPlanningFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCFunctionAcknowledgementFlags(INT nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionAcknowledgementFlags(nFlags) : FALSE);
}

BOOL CDatabaseEngine::GetTCFunctionAcknowledgementFlagsRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionAcknowledgementFlagsRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumTCFunctionInterlockScopes(CStringArray &szScopes, CLongUIntArray &nScopes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCFunctionInterlockScopes(szScopes, nScopes) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionInterlockScope(ULONGLONG nScope) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionInterlockScope(nScope) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionInterlockScopeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionInterlockScopeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCFunctionInterlockScope(LPCTSTR pszScope, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionInterlockScope(pszScope, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionInterlockScope(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionInterlockScope(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCFunctionInterlockStages(CStringArray &szStages, CLongUIntArray &nStages) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCFunctionInterlockStages(szStages, nStages) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionInterlockStage(ULONGLONG nAttributes, ULONGLONG nStage) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionInterlockStage(nAttributes, nStage) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionInterlockStageLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionInterlockStageLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCFunctionInterlockStage(LPCTSTR pszStage, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionInterlockStage(pszStage, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionInterlockStage(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionInterlockStage(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCFunctionRouteAndDestinationPath(LPCTSTR pszPath) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionRouteAndDestinationPath(pszPath) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionRouteAndDestinationPathLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionRouteAndDestinationPathLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionRouterEquipment(LPCTSTR pszEquipment) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionRouterEquipment(pszEquipment) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionRouterEquipmentLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionRouterEquipmentLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionRouterSubSystem(LPCTSTR pszSubSystem) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionRouterSubSystem(pszSubSystem) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionRouterSubSystemLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionRouterSubSystemLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionDestinationEquipment(LPCTSTR pszEquipment) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionDestinationEquipment(pszEquipment) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionDestinationEquipmentLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionDestinationEquipmentLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionDestinationSubSystem(LPCTSTR pszSubSystem) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionDestinationSubSystem(pszSubSystem) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionDestinationSubSystemLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionDestinationSubSystemLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionDestinationSubSystemID(INT nSubSystemID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionDestinationSubSystemID(nSubSystemID) : FALSE);
}

BOOL CDatabaseEngine::GetTCFunctionDestinationSubSystemIDRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionDestinationSubSystemIDRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCFunctionDestinationSubSchedule(LPCTSTR pszSubSchedule) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionDestinationSubSchedule(pszSubSchedule) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionDestinationSubScheduleLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionDestinationSubScheduleLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionDestinationSubScheduleID(INT nSubScheduleID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionDestinationSubScheduleID(nSubScheduleID) : FALSE);
}

BOOL CDatabaseEngine::GetTCFunctionDestinationSubScheduleIDRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionDestinationSubScheduleIDRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCFunctionOperationalInfo(LPCTSTR pszInfo) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionOperationalInfo(pszInfo) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionOperationalInfoLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionOperationalInfoLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionValidityConditions(LPCTSTR pszConditions) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionValidityConditions(pszConditions) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionValidityConditionsLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionValidityConditionsLength() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterAlternativeParameters(LPCTSTR pszParameters) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterAlternativeParameters(pszParameters) : FALSE);
}

INT CDatabaseEngine::GetTMParameterAlternativeParametersLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterAlternativeParametersLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionAssociatedTelecommands(LPCTSTR pszTelecommands) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionAssociatedTelecommands(pszTelecommands) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionAssociatedTelecommandsLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionAssociatedTelecommandsLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionComplementaryTelecommands(LPCTSTR pszTelecommands) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionComplementaryTelecommands(pszTelecommands) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionComplementaryTelecommandsLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionComplementaryTelecommandsLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionDefaultParameterSetName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionDefaultParameterSetName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionDefaultParameterSetNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionDefaultParameterSetNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionMissionPlannerEvent(LPCTSTR pszEvent) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionMissionPlannerEvent(pszEvent) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionMissionPlannerEventLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionMissionPlannerEventLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionPreExeGroup(LPCTSTR pszGroup) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionPreExeGroup(pszGroup) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionPreExeGroupLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionPreExeGroupLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionExeVerGroup(LPCTSTR pszGroup) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionExeVerGroup(pszGroup) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionExeVerGroupLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionExeVerGroupLength() : 0);
}

INT CDatabaseEngine::EnumTCFunctionStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCFunctionStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTCFunctionStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCFunctionElementName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionElementName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionElementNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionElementNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionElementDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionElementDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionElementDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionElementDescriptionLength() : 0);
}

INT CDatabaseEngine::EnumTCFunctionElementTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCFunctionElementTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionElementType(LPCTSTR pszName, ULONGLONG nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionElementType(pszName, nType) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionElementTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionElementTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCFunctionElementType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionElementType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionElementType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionElementType(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCFunctionElementGroupSize(INT nSize) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionElementGroupSize(nSize) : FALSE);
}

BOOL CDatabaseEngine::GetTCFunctionElementGroupSizeRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionElementGroupSizeRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumTCFunctionElementValueInterpretations(CStringArray &szInterpretations, CLongUIntArray &nInterpretations) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCFunctionElementValueInterpretations(szInterpretations, nInterpretations) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionElementValueInterpretation(ULONGLONG nAttributes, ULONGLONG nInterpretation) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionElementValueInterpretation(nAttributes, nInterpretation) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionElementValueInterpretationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionElementValueInterpretationLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCFunctionElementValueInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionElementValueInterpretation(pszInterpretation, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionElementValueInterpretation(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionElementValueInterpretation(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCFunctionElementValueRadixes(CStringArray &szRadixes, CLongUIntArray &nRadixes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCFunctionElementValueRadixes(szRadixes, nRadixes) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionElementValueRadix(ULONGLONG nAttributes, ULONGLONG nRadix) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionElementValueRadix(nAttributes, nRadix) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionElementValueRadixLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionElementValueRadixLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCFunctionElementValueRadix(LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionElementValueRadix(pszRadix, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionElementValueRadix(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionElementValueRadix(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCFunctionElementValueBitWidth(INT nWidth) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionElementValueBitWidth(nWidth) : FALSE);
}

BOOL CDatabaseEngine::GetTCFunctionElementValueBitWidthRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionElementValueBitWidthRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCFunctionElementValueBitOffset(INT nOffset) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionElementValueBitOffset(nOffset) : FALSE);
}

BOOL CDatabaseEngine::GetTCFunctionElementValueBitOffsetRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionElementValueBitOffsetRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCFunctionElementConstValue(ULONGLONG nAttributes, LPCTSTR pszConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionElementConstValue(nAttributes, pszConstValue) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionElementConstValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionElementConstValueLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCFunctionElementConstValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionElementConstValue(nAttributes, nWidth, pszConstValue) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionElementConstValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionElementConstValue(nAttributes, nWidth, nConstValue) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCFunctionElementConstValueSource(LPCTSTR pszParameter) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionElementConstValueSource(pszParameter) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionElementConstValueSourceLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionElementConstValueSourceLength() : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionElementConstTimeType(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionElementConstTimeType(pszName) : FALSE);
}

BOOL CDatabaseEngine::CheckTCFunctionElementConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionElementConstTime(nAttributes, pszConstTime) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionElementConstTimeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionElementConstTimeLength() : 0);
}

CTimeTag CDatabaseEngine::TranslateTCFunctionElementConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionElementConstTime(nAttributes, pszConstTime) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionBlockName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionBlockName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionBlockNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionBlockNameLength() : 0);
}

INT CDatabaseEngine::EnumTCFunctionBlockInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCFunctionBlockInterpretations(szInterpretations, nInterpretations) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionBlockInterpretation(UINT nInterpretation) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionBlockInterpretation(nInterpretation) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionBlockInterpretationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionBlockInterpretationLength() : 0);
}

UINT CDatabaseEngine::TranslateTCFunctionBlockInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionBlockInterpretation(pszInterpretation, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionBlockInterpretation(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionBlockInterpretation(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCFunctionBlockByteOffset(INT nOffset) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionBlockByteOffset(nOffset) : FALSE);
}

BOOL CDatabaseEngine::GetTCFunctionBlockByteOffsetRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionBlockByteOffsetRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCFunctionBlockMaxLength(INT nLength) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionBlockMaxLength(nLength) : FALSE);
}

BOOL CDatabaseEngine::GetTCFunctionBlockMaxLengthRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionBlockMaxLengthRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumTCFunctionBlockStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCFunctionBlockStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionBlockStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionBlockStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionBlockStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionBlockStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTCFunctionBlockStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionBlockStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionBlockStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionBlockStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCFunctionBlockElementName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionBlockElementName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionBlockElementNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionBlockElementNameLength() : 0);
}

INT CDatabaseEngine::EnumTCFunctionBlockElementInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCFunctionBlockElementInterpretations(szInterpretations, nInterpretations) : 0);
}

BOOL CDatabaseEngine::CheckTCFunctionBlockElementInterpretation(UINT nInterpretation) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCFunctionBlockElementInterpretation(nInterpretation) : FALSE);
}

INT CDatabaseEngine::GetTCFunctionBlockElementInterpretationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCFunctionBlockElementInterpretationLength() : 0);
}

UINT CDatabaseEngine::TranslateTCFunctionBlockElementInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionBlockElementInterpretation(pszInterpretation, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCFunctionBlockElementInterpretation(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionBlockElementInterpretation(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCSequenceName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceDetails(LPCTSTR pszDetails) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceDetails(pszDetails) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceDetailsLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceDetailsLength() : 0);
}

INT CDatabaseEngine::EnumTCSequenceTimeTaggedFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceTimeTaggedFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceTimeTaggedFlag(ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceTimeTaggedFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceTimeTaggedFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceTimeTaggedFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceTimeTaggedFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCFunctionBlockElementInterpretation(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceTimeTaggedFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceTimeTaggedFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceHazardousFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceHazardousFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceHazardousFlag(ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceHazardousFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceHazardousFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceHazardousFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceHazardousFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceHazardousFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceHazardousFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceHazardousFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequencePlanningFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequencePlanningFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTCSequencePlanningFlag(ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequencePlanningFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCSequencePlanningFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequencePlanningFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequencePlanningFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequencePlanningFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequencePlanningFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequencePlanningFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceExecutionFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceExecutionFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceExecutionFlag(ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceExecutionFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceExecutionFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceExecutionFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceExecutionFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceExecutionFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceExecutionFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceExecutionFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCSequenceSubSystemID(INT nSubSystemID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceSubSystemID(nSubSystemID) : FALSE);
}

BOOL CDatabaseEngine::GetTCSequenceSubSystemIDRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceSubSystemIDRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCSequenceSubScheduleID(INT nSubScheduleID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceSubScheduleID(nSubScheduleID) : FALSE);
}

BOOL CDatabaseEngine::GetTCSequenceSubScheduleIDRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceSubScheduleIDRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCSequenceSubScheduleDestination(LPCTSTR pszSubSchedule) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceSubScheduleDestination(pszSubSchedule) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceSubScheduleDestinationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceSubScheduleDestinationLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceDefaultParameterSetName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceDefaultParameterSetName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceDefaultParameterSetNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceDefaultParameterSetNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceMissionPlannerEvent(LPCTSTR pszEvent) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceMissionPlannerEvent(pszEvent) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceMissionPlannerEventLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceMissionPlannerEventLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceUserName(LPCTSTR pszUserName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceUserName(pszUserName) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceUserNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceUserNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceDate(LPCTSTR pszDate, LPCTSTR pszFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceDate(pszDate, pszFormat) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceDateLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceDateLength() : 0);
}

CTimeKey CDatabaseEngine::TranslateTCSequenceDate(LPCTSTR pszDate, LPCTSTR pszFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceDate(pszDate, pszFormat) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceDate(CONST CTimeKey &tDate, LPCTSTR pszFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceDate(tDate, pszFormat) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCSequenceDocumentName(LPCTSTR pszDocumentName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceDocumentName(pszDocumentName) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceDocumentNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceDocumentNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceDocumentIssue(LPCTSTR pszDocumentIssue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceDocumentIssue(pszDocumentIssue) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceDocumentIssueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceDocumentIssueLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceDocumentDate(LPCTSTR pszDate, LPCTSTR pszFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceDocumentDate(pszDate, pszFormat) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceDocumentDateLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceDocumentDateLength() : 0);
}

CTimeKey CDatabaseEngine::TranslateTCSequenceDocumentDate(LPCTSTR pszDate, LPCTSTR pszFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceDocumentDate(pszDate, pszFormat) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceDocumentDate(CONST CTimeKey &tDate, LPCTSTR pszFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceDocumentDate(tDate, pszFormat) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryCount(nCount) : FALSE);
}

BOOL CDatabaseEngine::GetTCSequenceEntryCountRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryCountRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterCount(nCount) : FALSE);
}

BOOL CDatabaseEngine::GetTCSequenceParameterCountRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterCountRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumTCSequenceStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTCSequenceStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterTag(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterTag(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceParameterTagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterTagLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceParameterDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterUnit(LPCTSTR pszUnit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterUnit(pszUnit) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceParameterUnitLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterUnitLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterPosition(INT nPosition) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterPosition(nPosition) : FALSE);
}

BOOL CDatabaseEngine::GetTCSequenceParameterPositionRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterPositionRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumTCSequenceParameterTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceParameterTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterType(ULONGLONG nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterType(nType) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceParameterTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceParameterType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceParameterType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterType(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceParameterCategories(CStringArray &szCategories, CLongUIntArray &nCategories) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceParameterCategories(szCategories, nCategories) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterCategory(ULONGLONG nCategory) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterCategory(nCategory) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceParameterCategoryLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterCategoryLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceParameterCategory(LPCTSTR pszCategory, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterCategory(pszCategory, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceParameterCategory(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterCategory(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceParameterTypeCodes(CStringArray &szPTCs, CUIntArray &nPTCs) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceParameterTypeCodes(szPTCs, nPTCs) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterTypeCode(INT nPTC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterTypeCode(nPTC) : FALSE);
}

BOOL CDatabaseEngine::GetTCSequenceParameterTypeCodeRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterTypeCodeRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTCSequenceParameterTypeCode(LPCTSTR pszPTC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterTypeCode(pszPTC) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceParameterTypeCode(INT nPTC, INT nPFC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterTypeCode(nPTC, nPFC) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceParameterFormatCodes(LPCTSTR pszPTC, CStringArray &szPFCs, CUIntArray &nPFCs) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceParameterFormatCodes(pszPTC, szPFCs, nPFCs) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterFormatCode(INT nPTC, INT nPFC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterFormatCode(nPTC, nPFC) : FALSE);
}

BOOL CDatabaseEngine::GetTCSequenceParameterFormatCodeRange(INT nPTC, INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterFormatCodeRange(nPTC, nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTCSequenceParameterFormatCode(LPCTSTR pszPFC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterFormatCode(pszPFC) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceParameterFormatCode(INT nPTC, INT nPFC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterFormatCode(nPTC, nPFC) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceParameterDisplayFormats(CStringArray &szFormats, CLongUIntArray &nFormats) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceParameterDisplayFormats(szFormats, nFormats) : 0);
}
INT CDatabaseEngine::EnumTCSequenceParameterDisplayFormats(ULONGLONG nAttributes, CStringArray &szFormats, CLongUIntArray &nFormats) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceParameterDisplayFormats(nAttributes, szFormats, nFormats) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterDisplayFormat(ULONGLONG nAttributes, ULONGLONG nFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterDisplayFormat(nAttributes, nFormat) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceParameterDisplayFormatLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterDisplayFormatLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceParameterDisplayFormat(LPCTSTR pszFormat, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterDisplayFormat(pszFormat, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceParameterDisplayFormat(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterDisplayFormat(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceParameterCodings(CStringArray &szCodings, CLongUIntArray &nCodings) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceParameterCodings(szCodings, nCodings) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterCoding(ULONGLONG nAttributes, ULONGLONG nCoding) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterCoding(nAttributes, nCoding) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceParameterCodingLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterCodingLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceParameterCoding(LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterCoding(pszCoding, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceParameterCoding(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterCoding(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceParameterValueTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceParameterValueTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterValueType(ULONGLONG nAttributes, ULONGLONG nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterValueType(nAttributes, nType) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceParameterValueTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterValueTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceParameterValueType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterValueType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceParameterValueType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterValueType(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceParameterValueRadixes(CStringArray &szRadixes, CLongUIntArray &nRadixes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceParameterValueRadixes(szRadixes, nRadixes) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterValueRadix(ULONGLONG nAttributes, ULONGLONG nRadix) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterValueRadix(nAttributes, nRadix) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceParameterValueRadixLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterValueRadixLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceParameterValueRadix(LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterValueRadix(pszRadix, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceParameterValueRadix(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterValueRadix(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterBitWidth(INT nWidth) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterBitWidth(nWidth) : FALSE);
}

BOOL CDatabaseEngine::GetTCSequenceParameterBitWidthRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterBitWidthRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterCalTable(ULONGLONG nAttributes, LPCTSTR pszTable) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterCalTable(nAttributes, pszTable) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceParameterCalTableLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterCalTableLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterOolTable(ULONGLONG nAttributes, LPCTSTR pszTable) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterOolTable(nAttributes, pszTable) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceParameterOolTableLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterOolTableLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterConstValue(nAttributes, pszConstValue) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceParameterConstValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterConstValueLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceParameterConstValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterConstValue(nAttributes, nWidth, pszConstValue) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceParameterConstValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterConstValue(nAttributes, nWidth, nConstValue) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterConstTimeType(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterConstTimeType(pszTag) : FALSE);
}

BOOL CDatabaseEngine::CheckTCSequenceParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceParameterConstTime(nAttributes, pszConstTime) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceParameterConstTimeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceParameterConstTimeLength() : 0);
}

CTimeTag CDatabaseEngine::TranslateTCSequenceParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceParameterConstTime(nAttributes, pszConstTime) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryDescriptionLength() : 0);
}

INT CDatabaseEngine::EnumTCSequenceEntryTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceEntryTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryType(ULONGLONG nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryType(nType) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntryType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryType(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceEntrySubTypes(CStringArray &szSubTypes, CLongUIntArray &nSubTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceEntrySubTypes(szSubTypes, nSubTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntrySubType(ULONGLONG nSubType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntrySubType(nSubType) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntrySubTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntrySubTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntrySubType(LPCTSTR pszSubType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntrySubType(pszSubType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntrySubType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntrySubType(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryIndex(INT nIndex) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryIndex(nIndex) : FALSE);
}

BOOL CDatabaseEngine::GetTCSequenceEntryIndexRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryIndexRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCSequenceEntry1Step(LPCTSTR psz1Step) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntry1Step(psz1Step) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntry1StepLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntry1StepLength() : 0);
}

INT CDatabaseEngine::EnumTCSequenceEntryDispatchModes(CStringArray &szModes, CLongUIntArray &nModes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceEntryDispatchModes(szModes, nModes) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryDispatchMode(ULONGLONG nAttributes, ULONGLONG nMode) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryDispatchMode(nAttributes, nMode) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryDispatchModeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryDispatchModeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntryDispatchMode(LPCTSTR pszMode, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryDispatchMode(pszMode, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryDispatchMode(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryDispatchMode(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceEntryReleaseTimeTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceEntryReleaseTimeTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryReleaseTimeType(ULONGLONG nAttributes, ULONGLONG nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryReleaseTimeType(nAttributes, nType) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryReleaseTimeTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryReleaseTimeTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntryReleaseTimeType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryReleaseTimeType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryReleaseTimeType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryReleaseTimeType(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryReleaseDeltaTime(ULONGLONG nAttributes, LPCTSTR pszDelta, LPCTSTR pszFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryReleaseDeltaTime(nAttributes, pszDelta, pszFormat) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryReleaseDeltaTimeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryReleaseDeltaTimeLength() : 0);
}

DWORD CDatabaseEngine::TranslateTCSequenceEntryReleaseDeltaTime(LPCTSTR pszDelta, LPCTSTR pszFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryReleaseDeltaTime(pszDelta, pszFormat) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryReleaseDeltaTime(DWORD dwDelta, LPCTSTR pszFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryReleaseDeltaTime(dwDelta, pszFormat) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceEntryExecutionTimeTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceEntryExecutionTimeTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryExecutionTimeType(ULONGLONG nAttributes, ULONGLONG nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryExecutionTimeType(nAttributes, nType) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryExecutionTimeTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryExecutionTimeTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntryExecutionTimeType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryExecutionTimeType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryExecutionTimeType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryExecutionTimeType(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryExecutionTime(LPCTSTR pszTime, LPCTSTR pszFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryExecutionTime(pszTime, pszFormat) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryExecutionTimeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryExecutionTimeLength() : 0);
}

CTimeTag CDatabaseEngine::TranslateTCSequenceEntryExecutionTime(LPCTSTR pszTime, LPCTSTR pszFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryExecutionTime(pszTime, pszFormat) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryExecutionTime(CONST CTimeTag &tTime, LPCTSTR pszFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryExecutionTime(tTime, pszFormat) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryExecutionDeltaTime(LPCTSTR pszDelta, LPCTSTR pszFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryExecutionDeltaTime(pszDelta, pszFormat) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryExecutionDeltaTimeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryExecutionDeltaTimeLength() : 0);
}

DWORD CDatabaseEngine::TranslateTCSequenceEntryExecutionDeltaTime(LPCTSTR pszDelta, BOOL &bEarlier, LPCTSTR pszFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryExecutionDeltaTime(pszDelta, bEarlier, pszFormat) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryExecutionDeltaTime(DWORD dwDelta, BOOL bEarlier, LPCTSTR pszFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryExecutionDeltaTime(dwDelta, bEarlier, pszFormat) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceEntryGroupFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceEntryGroupFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryGroupFlag(ULONGLONG nAttributes, ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryGroupFlag(nAttributes, nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryGroupFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryGroupFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntryGroupFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryGroupFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryGroupFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryGroupFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceEntryBlockFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceEntryBlockFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryBlockFlag(ULONGLONG nAttributes, ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryBlockFlag(nAttributes, nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryBlockFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryBlockFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntryBlockFlag(LPCTSTR pszFlag, LPCTSTR pszMember, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryBlockFlag(pszFlag, pszMember, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryBlockFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryBlockFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryBlockMembership(LPCTSTR pszMember) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryBlockMembership(pszMember) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryBlockMembershipLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryBlockMembershipLength() : 0);
}

INT CDatabaseEngine::TranslateTCSequenceEntryBlockMembership(LPCTSTR pszMember) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryBlockMembership(pszMember) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryBlockMembership(INT nMember) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryBlockMembership(nMember) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceEntryInterlockScopes(CStringArray &szScopes, CLongUIntArray &nScopes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceEntryInterlockScopes(szScopes, nScopes) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryInterlockScope(ULONGLONG nAttributes, ULONGLONG nScope) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryInterlockScope(nAttributes, nScope) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryInterlockScopeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryInterlockScopeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntryInterlockScope(LPCTSTR pszScope, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryInterlockScope(pszScope, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryInterlockScope(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryInterlockScope(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceEntryInterlockStages(CStringArray &szStages, CLongUIntArray &nStages) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceEntryInterlockStages(szStages, nStages) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryInterlockStage(ULONGLONG nAttributes, ULONGLONG nStage) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryInterlockStage(nAttributes, nStage) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryInterlockStageLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryInterlockStageLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntryInterlockStage(LPCTSTR pszStage, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryInterlockStage(pszStage, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryInterlockStage(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryInterlockStage(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceEntryPTVCheckFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceEntryPTVCheckFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryPTVCheckFlag(ULONGLONG nAttributes, ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryPTVCheckFlag(nAttributes, nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryPTVCheckFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryPTVCheckFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntryPTVCheckFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryPTVCheckFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryPTVCheckFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryPTVCheckFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceEntryPEVCheckFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceEntryPEVCheckFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryPEVCheckFlag(ULONGLONG nAttributes, ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryPEVCheckFlag(nAttributes, nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryPEVCheckFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryPEVCheckFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntryPEVCheckFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryPEVCheckFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryPEVCheckFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryPEVCheckFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceEntryCEVCheckFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceEntryCEVCheckFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryCEVCheckFlag(ULONGLONG nAttributes, ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryCEVCheckFlag(nAttributes, nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryCEVCheckFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryCEVCheckFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntryCEVCheckFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryCEVCheckFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryCEVCheckFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryCEVCheckFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryParameterCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryParameterCount(nCount) : FALSE);
}

BOOL CDatabaseEngine::GetTCSequenceEntryParameterCountRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryParameterCountRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryParameterTag(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryParameterTag(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryParameterTagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryParameterTagLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryParameterComment(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryParameterComment(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryParameterCommentLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryParameterCommentLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryParameterPosition(INT nPosition) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryParameterPosition(nPosition) : FALSE);
}

BOOL CDatabaseEngine::GetTCSequenceEntryParameterPositionRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryParameterPositionRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumTCSequenceEntryParameterModificationFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceEntryParameterModificationFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryParameterModificationFlag(ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryParameterModificationFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryParameterModificationFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryParameterModificationFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntryParameterModificationFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryParameterModificationFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryParameterModificationFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryParameterModificationFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceEntryParameterValueTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceEntryParameterValueTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryParameterValueType(ULONGLONG nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryParameterValueType(nType) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryParameterValueTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryParameterValueTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntryParameterValueType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryParameterValueType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryParameterValueType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryParameterValueType(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCSequenceEntryParameterValueRadixes(CStringArray &szRadixes, CLongUIntArray &nRadixes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCSequenceEntryParameterValueRadixes(szRadixes, nRadixes) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryParameterValueRadix(ULONGLONG nAttributes, ULONGLONG nRadix) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryParameterValueRadix(nAttributes, nRadix) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryParameterValueRadixLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryParameterValueRadixLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntryParameterValueRadix(LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryParameterValueRadix(pszRadix, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryParameterValueRadix(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryParameterValueRadix(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryParameterBitOffset(INT nOffset) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryParameterBitOffset(nOffset) : FALSE);
}

BOOL CDatabaseEngine::GetTCSequenceEntryParameterBitOffsetRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryParameterBitOffsetRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryParameterConstValue(nAttributes, pszConstValue) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryParameterConstValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryParameterConstValueLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCSequenceEntryParameterConstValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryParameterConstValue(nAttributes, nWidth, pszConstValue) : 0);
}
CString CDatabaseEngine::TranslateTCSequenceEntryParameterConstValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryParameterConstValue(nAttributes, nWidth, nConstValue) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryParameterConstTimeType(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryParameterConstTimeType(pszTag) : FALSE);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryParameterConstTime(nAttributes, pszConstTime) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryParameterConstTimeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryParameterConstTimeLength() : 0);
}

CTimeTag CDatabaseEngine::TranslateTCSequenceEntryParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCSequenceEntryParameterConstTime(nAttributes, pszConstTime) : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryParameterValueSetName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryParameterValueSetName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryParameterValueSetNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryParameterValueSetNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryParameterMemoryAreaName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryParameterMemoryAreaName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryParameterMemoryAreaNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryParameterMemoryAreaNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCSequenceEntryParameterMemoryAreaVersion(LPCTSTR pszVersion) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCSequenceEntryParameterMemoryAreaVersion(pszVersion) : FALSE);
}

INT CDatabaseEngine::GetTCSequenceEntryParameterMemoryAreaVersionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCSequenceEntryParameterMemoryAreaVersionLength() : 0);
}

BOOL CDatabaseEngine::CheckTCProcedureName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCProcedureName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCProcedureNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProcedureNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCProcedureDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCProcedureDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCProcedureDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProcedureDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTCProcedureCreationDate(CONST CTimeKey &tDate) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCProcedureCreationDate(tDate) : FALSE);
}

BOOL CDatabaseEngine::CheckTCProcedureModificationDate(CONST CTimeKey &tCreationDate, CONST CTimeKey &tModificationDate) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCProcedureModificationDate(tCreationDate, tModificationDate) : FALSE);
}

BOOL CDatabaseEngine::CheckTCProcedureExecutionMode(UINT nMode) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCProcedureExecutionMode(nMode) : FALSE);
}

BOOL CDatabaseEngine::CheckTCProcedureArgumentValue(ULONGLONG nAttributes, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCProcedureArgumentValue(nAttributes, pszValue) : FALSE);
}

ULONGLONG CDatabaseEngine::TranslateTCProcedureArgumentValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCProcedureArgumentValue(nAttributes, nWidth, pszValue) : 0);
}
CString CDatabaseEngine::TranslateTCProcedureArgumentValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCProcedureArgumentValue(nAttributes, nWidth, nValue) : EMPTYSTRING);
}

CTimeTag CDatabaseEngine::TranslateTCProcedureArgumentTime(ULONGLONG nAttributes, LPCTSTR pszTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCProcedureArgumentTime(nAttributes, pszTime) : 0);
}

BOOL CDatabaseEngine::CheckTCProcedureVariableValue(ULONGLONG nAttributes, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCProcedureVariableValue(nAttributes, pszValue) : FALSE);
}

ULONGLONG CDatabaseEngine::TranslateTCProcedureVariableValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCProcedureVariableValue(nAttributes, nWidth, pszValue) : 0);
}
CString CDatabaseEngine::TranslateTCProcedureVariableValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCProcedureVariableValue(nAttributes, nWidth, nValue) : EMPTYSTRING);
}

CTimeTag CDatabaseEngine::TranslateTCProcedureVariableTime(ULONGLONG nAttributes, LPCTSTR pszTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCProcedureVariableTime(nAttributes, pszTime) : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorName(pszName) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorNameLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorDescriptionLength() : 0);
}

INT CDatabaseEngine::EnumOBProcessorAddressBases(CStringArray &szBases, CUIntArray &nBases) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumOBProcessorAddressBases(szBases, nBases) : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorAddressBase(UINT nBase) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorAddressBase(nBase) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorAddressBaseLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorAddressBaseLength() : 0);
}

UINT CDatabaseEngine::TranslateOBProcessorAddressBase(LPCTSTR pszBase, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorAddressBase(pszBase, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateOBProcessorAddressBase(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorAddressBase(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckOBProcessorPatchCommand(LPCTSTR pszCommand) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorPatchCommand(pszCommand) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorPatchCommandLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorPatchCommandLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorDumpCommand(LPCTSTR pszCommand) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorDumpCommand(pszCommand) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorDumpCommandLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorDumpCommandLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorDumpPacket(LPCTSTR pszPacket) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorDumpPacket(pszPacket) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorDumpPacketLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorDumpPacketLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorDumpInterval(CONST CTimeSpan &tInterval) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorDumpInterval(tInterval) : FALSE);
}

BOOL CDatabaseEngine::GetOBProcessorDumpIntervalRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorDumpIntervalRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckOBProcessorDumpCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorDumpCount(nCount) : FALSE);
}

BOOL CDatabaseEngine::GetOBProcessorDumpCountRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorDumpCountRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckOBProcessorMasterImage(LPCTSTR pszImage) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMasterImage(pszImage) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMasterImageLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMasterImageLength() : 0);
}

UINT CDatabaseEngine::GetOBProcessorAddressWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorAddressWidth() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorAddressRange(UINT nStartPage, UINT nStartAddress, UINT nEndPage, UINT nEndAddress) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorAddressRange(nStartPage, nStartAddress, nEndPage, nEndAddress) : FALSE);
}

BOOL CDatabaseEngine::GetOBProcessorAddressRange(UINT &nPageLow, UINT &nPageHigh, UINT &nAddressLow, UINT &nAddressHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorAddressRange(nPageLow, nPageHigh, nAddressLow, nAddressHigh) : FALSE);
}

BOOL CDatabaseEngine::TranslateOBProcessorAddressRange(LPCTSTR pszAddressRange, UINT &nStartPage, UINT &nStartAddress, UINT &nEndPage, UINT &nEndAddress) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorAddressRange(pszAddressRange, nStartPage, nStartAddress, nEndPage, nEndAddress) : 0);
}
CString CDatabaseEngine::TranslateOBProcessorAddressRange(UINT nStartPage, UINT nStartAddress, UINT nEndPage, UINT nEndAddress) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorAddressRange(nStartPage, nStartAddress, nEndPage, nEndAddress) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumOBProcessorStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumOBProcessorStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorStatusLength() : 0);
}

INT CDatabaseEngine::TranslateOBProcessorStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateOBProcessorStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaName(pszName) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaNameLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaDescriptionLength() : 0);
}

INT CDatabaseEngine::EnumOBProcessorMemoryAreaTypes(CStringArray &szTypes, CUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumOBProcessorMemoryAreaTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaType(UINT nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaType(nType) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaTypeLength() : 0);
}

UINT CDatabaseEngine::TranslateOBProcessorMemoryAreaType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateOBProcessorMemoryAreaType(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaType(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaPatchCommand(LPCTSTR pszCommand) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaPatchCommand(pszCommand) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaPatchCommandLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaPatchCommandLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaDumpCommand(LPCTSTR pszCommand) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaDumpCommand(pszCommand) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaDumpCommandLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaDumpCommandLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaDumpPacket(LPCTSTR pszPacket) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaDumpPacket(pszPacket) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaDumpPacketLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaDumpPacketLength() : 0);
}

INT CDatabaseEngine::EnumOBProcessorMemoryAreaPatchFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumOBProcessorMemoryAreaPatchFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaPatchFlag(UINT nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaPatchFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaPatchFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaPatchFlagLength() : 0);
}

UINT CDatabaseEngine::TranslateOBProcessorMemoryAreaPatchFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaPatchFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateOBProcessorMemoryAreaPatchFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaPatchFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumOBProcessorMemoryAreaDumpFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumOBProcessorMemoryAreaDumpFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaDumpFlag(UINT nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaDumpFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaDumpFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaDumpFlagLength() : 0);
}

UINT CDatabaseEngine::TranslateOBProcessorMemoryAreaDumpFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaDumpFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateOBProcessorMemoryAreaDumpFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaDumpFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumOBProcessorMemoryAreaUpdateFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumOBProcessorMemoryAreaUpdateFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaUpdateFlag(UINT nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaUpdateFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaUpdateFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaUpdateFlagLength() : 0);
}

UINT CDatabaseEngine::TranslateOBProcessorMemoryAreaUpdateFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaUpdateFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateOBProcessorMemoryAreaUpdateFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaUpdateFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumOBProcessorMemoryAreaInhibitFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumOBProcessorMemoryAreaInhibitFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaInhibitFlag(UINT nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaInhibitFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaInhibitFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaInhibitFlagLength() : 0);
}

UINT CDatabaseEngine::TranslateOBProcessorMemoryAreaInhibitFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaInhibitFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateOBProcessorMemoryAreaInhibitFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaInhibitFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaBlockName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaBlockName(pszName) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaBlockNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaBlockNameLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaBlockDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaBlockDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaBlockDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaBlockDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaBlockTMParameter(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaBlockTMParameter(pszTag) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaBlockTMParameterLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaBlockTMParameterLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaBlockTCParameter(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaBlockTCParameter(pszTag) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaBlockTCParameterLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaBlockTCParameterLength() : 0);
}

UINT CDatabaseEngine::GetOBProcessorMemoryAreaBlockAddressWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaBlockAddressWidth() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaBlockAddress(UINT nPage, UINT nAddress) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaBlockAddress(nPage, nAddress) : FALSE);
}

BOOL CDatabaseEngine::GetOBProcessorMemoryAreaBlockAddressRange(UINT &nPageLow, UINT &nPageHigh, UINT &nAddressLow, UINT &nAddressHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaBlockAddressRange(nPageLow, nPageHigh, nAddressLow, nAddressHigh) : FALSE);
}

BOOL CDatabaseEngine::TranslateOBProcessorMemoryAreaBlockAddress(LPCTSTR pszAddress, UINT &nPage, UINT &nAddress) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaBlockAddress(pszAddress, nPage, nAddress) : 0);
}
CString CDatabaseEngine::TranslateOBProcessorMemoryAreaBlockAddress(UINT nPage, UINT nAddress) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaBlockAddress(nPage, nAddress) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaBlockBitOffset(INT nOffset) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaBlockBitOffset(nOffset) : FALSE);
}

BOOL CDatabaseEngine::GetOBProcessorMemoryAreaBlockBitOffsetRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaBlockBitOffsetRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaBlockBitWidth(INT nWidth) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaBlockBitWidth(nWidth) : FALSE);
}

BOOL CDatabaseEngine::GetOBProcessorMemoryAreaBlockBitWidthRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaBlockBitWidthRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaCheckSumName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaCheckSumName(pszName) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaCheckSumNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaCheckSumNameLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaCheckSumSeedValue(LPCTSTR pszSeedValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaCheckSumSeedValue(pszSeedValue) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaCheckSumSeedValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaCheckSumSeedValueLength() : 0);
}

BOOL CDatabaseEngine::GetOBProcessorMemoryAreaCheckSumSeedValueRange(UINT &nLow, UINT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaCheckSumSeedValueRange(nLow, nHigh) : FALSE);
}

UINT CDatabaseEngine::TranslateOBProcessorMemoryAreaCheckSumSeedValue(LPCTSTR pszSeedValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaCheckSumSeedValue(pszSeedValue) : 0);
}
CString CDatabaseEngine::TranslateOBProcessorMemoryAreaCheckSumSeedValue(UINT nSeedValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaCheckSumSeedValue(nSeedValue) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaCheckSumLength(INT nLength) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaCheckSumLength(nLength) : FALSE);
}

BOOL CDatabaseEngine::GetOBProcessorMemoryAreaCheckSumLengthRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaCheckSumLengthRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaCheckSumDestination(UINT nDestination) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaCheckSumDestination(nDestination) : FALSE);
}

BOOL CDatabaseEngine::GetOBProcessorMemoryAreaCheckSumDestinationRange(UINT &nLow, UINT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaCheckSumDestinationRange(nLow, nHigh) : FALSE);
}

UINT CDatabaseEngine::GetOBProcessorMemoryAreaCheckSumAddressWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaCheckSumAddressWidth() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaCheckSumAddressRange(UINT nPage, UINT nAddressLow, UINT nAddressHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaCheckSumAddressRange(nPage, nAddressLow, nAddressHigh) : FALSE);
}

BOOL CDatabaseEngine::GetOBProcessorMemoryAreaCheckSumAddressRange(UINT &nPageLow, UINT &nPageHigh, UINT &nAddressLow, UINT &nAddressHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaCheckSumAddressRange(nPageLow, nPageHigh, nAddressLow, nAddressHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaCatalogueName(pszName) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaCatalogueNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaCatalogueNameLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueEntryID(LPCTSTR pszID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaCatalogueEntryID(pszID) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaCatalogueEntryIDLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaCatalogueEntryIDLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueEntryDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaCatalogueEntryDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaCatalogueEntryDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaCatalogueEntryDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueEntryVersion(LPCTSTR pszVersion) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaCatalogueEntryVersion(pszVersion) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaCatalogueEntryVersionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaCatalogueEntryVersionLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueEntryDate(LPCTSTR pszDate) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaCatalogueEntryDate(pszDate) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaCatalogueEntryDateLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaCatalogueEntryDateLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueEntryTime(LPCTSTR pszTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaCatalogueEntryTime(pszTime) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaCatalogueEntryTimeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaCatalogueEntryTimeLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueEntryLocation(LPCTSTR pszLocation) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaCatalogueEntryLocation(pszLocation) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaCatalogueEntryLocationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaCatalogueEntryLocationLength() : 0);
}

INT CDatabaseEngine::EnumOBProcessorMemoryAreaCatalogueEntryFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumOBProcessorMemoryAreaCatalogueEntryFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryAreaCatalogueEntryFlag(UINT nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryAreaCatalogueEntryFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryAreaCatalogueEntryFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryAreaCatalogueEntryFlagLength() : 0);
}

UINT CDatabaseEngine::TranslateOBProcessorMemoryAreaCatalogueEntryFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaCatalogueEntryFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateOBProcessorMemoryAreaCatalogueEntryFlag(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryAreaCatalogueEntryFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryImageName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryImageName(pszName) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryImageNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryImageNameLength() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryImageBlockVersion(LPCTSTR pszVersion) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryImageBlockVersion(pszVersion) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryImageBlockVersionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryImageBlockVersionLength() : 0);
}

UINT CDatabaseEngine::GetOBProcessorMemoryImageBlockAddressWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryImageBlockAddressWidth() : 0);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryImageBlockAddress(UINT nPage, UINT nAddress) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryImageBlockAddress(nPage, nAddress) : FALSE);
}

BOOL CDatabaseEngine::GetOBProcessorMemoryImageBlockAddressRange(UINT &nPageLow, UINT &nPageHigh, UINT &nAddressLow, UINT &nAddressHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryImageBlockAddressRange(nPageLow, nPageHigh, nAddressLow, nAddressHigh) : FALSE);
}

BOOL CDatabaseEngine::TranslateOBProcessorMemoryImageBlockAddress(LPCTSTR pszAddress, UINT &nPage, UINT &nAddress) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryImageBlockAddress(pszAddress, nPage, nAddress) : 0);
}
CString CDatabaseEngine::TranslateOBProcessorMemoryImageBlockAddress(UINT nPage, UINT nAddress) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryImageBlockAddress(nPage, nAddress) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckOBProcessorMemoryImageBlockData(LPCTSTR pszData, BOOL bNumbersOnly) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryImageBlockData(pszData, bNumbersOnly) : FALSE);
}
BOOL CDatabaseEngine::CheckOBProcessorMemoryImageBlockData(CONST CByteArray &nData, CONST CByteArray &nMask, BOOL bAllowTemplates) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckOBProcessorMemoryImageBlockData(nData, nMask, bAllowTemplates) : FALSE);
}

INT CDatabaseEngine::GetOBProcessorMemoryImageBlockDataLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOBProcessorMemoryImageBlockDataLength() : 0);
}

INT CDatabaseEngine::TranslateOBProcessorMemoryImageBlockData(LPCTSTR pszData, CByteArray &nData, CByteArray &nMask, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryImageBlockData(pszData, nData, nMask, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateOBProcessorMemoryImageBlockData(CONST CByteArray &nData, CONST CByteArray &nMask, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryImageBlockData(nData, nMask, bDBMS) : EMPTYSTRING);
}
CString CDatabaseEngine::TranslateOBProcessorMemoryImageBlockData(LPCTSTR pszData, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateOBProcessorMemoryImageBlockData(pszData, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMParameterTag(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterTag(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTMParameterTagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterTagLength() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTMParameterDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterDetails(LPCTSTR pszDetails) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterDetails(pszDetails) : FALSE);
}

INT CDatabaseEngine::GetTMParameterDetailsLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterDetailsLength() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterUnit(LPCTSTR pszUnit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterUnit(pszUnit) : FALSE);
}

INT CDatabaseEngine::GetTMParameterUnitLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterUnitLength() : 0);
}

INT CDatabaseEngine::EnumTMParameterTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterType(ULONGLONG nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterType(nType) : FALSE);
}

INT CDatabaseEngine::GetTMParameterTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTMParameterType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMParameterType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterType(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMParameterCategories(CStringArray &szCategories, CLongUIntArray &nCategories) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterCategories(szCategories, nCategories) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterCategory(ULONGLONG nCategory) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterCategory(nCategory) : FALSE);
}

INT CDatabaseEngine::GetTMParameterCategoryLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterCategoryLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTMParameterCategory(LPCTSTR pszCategory, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterCategory(pszCategory, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMParameterCategory(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterCategory(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMParameterNatures(CStringArray &szNatures, CLongUIntArray &nNatures) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterNatures(szNatures, nNatures) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterNature(ULONGLONG nNature) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterNature(nNature) : FALSE);
}

INT CDatabaseEngine::GetTMParameterNatureLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterNatureLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTMParameterNature(LPCTSTR pszNature, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterNature(pszNature, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMParameterNature(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterNature(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMParameterTypeCodes(CStringArray &szPTCs, CUIntArray &nPTCs) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterTypeCodes(szPTCs, nPTCs) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterTypeCode(INT nPTC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterTypeCode(nPTC) : FALSE);
}

BOOL CDatabaseEngine::GetTMParameterTypeCodeRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterTypeCodeRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTMParameterTypeCode(LPCTSTR pszPTC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterTypeCode(pszPTC) : 0);
}
CString CDatabaseEngine::TranslateTMParameterTypeCode(INT nPTC, INT nPFC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterTypeCode(nPTC, nPFC) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMParameterFormatCodes(LPCTSTR pszPTC, CStringArray &szPFCs, CUIntArray &nPFCs) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterFormatCodes(pszPTC, szPFCs, nPFCs) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterFormatCode(INT nPTC, INT nPFC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterFormatCode(nPTC, nPFC) : FALSE);
}

BOOL CDatabaseEngine::GetTMParameterFormatCodeRange(INT nPTC, INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterFormatCodeRange(nPTC, nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTMParameterFormatCode(LPCTSTR pszPFC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterFormatCode(pszPFC) : 0);
}
CString CDatabaseEngine::TranslateTMParameterFormatCode(INT nPTC, INT nPFC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterFormatCode(nPTC, nPFC) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMParameterBitWidth(ULONGLONG nAttributes, INT nWidth) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterBitWidth(nAttributes, nWidth) : FALSE);
}

BOOL CDatabaseEngine::GetTMParameterBitWidthRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterBitWidthRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumTMParameterOBSTypes(CStringArray &szOBSTypes, CLongUIntArray &nOBSTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterOBSTypes(szOBSTypes, nOBSTypes) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterOBSType(ULONGLONG nAttributes, ULONGLONG nOBSType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterOBSType(nAttributes, nOBSType) : FALSE);
}

INT CDatabaseEngine::GetTMParameterOBSTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterOBSTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTMParameterOBSType(LPCTSTR pszOBSType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterOBSType(pszOBSType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMParameterOBSType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterOBSType(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMParameterCodings(CStringArray &szCodings, CLongUIntArray &nCodings) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterCodings(szCodings, nCodings) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterCoding(ULONGLONG nAttributes, ULONGLONG nCoding) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterCoding(nAttributes, nCoding) : FALSE);
}

INT CDatabaseEngine::GetTMParameterCodingLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterCodingLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTMParameterCoding(LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterCoding(pszCoding, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMParameterCoding(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterCoding(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMParameterInterpretations(CStringArray &szInterpretations, CLongUIntArray &nInterpretations) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterInterpretations(szInterpretations, nInterpretations) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterInterpretation(ULONGLONG nAttributes, ULONGLONG nInterpretation) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterInterpretation(nAttributes, nInterpretation) : FALSE);
}

INT CDatabaseEngine::GetTMParameterInterpretationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterInterpretationLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTMParameterInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterInterpretation(pszInterpretation, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMParameterInterpretation(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterInterpretation(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMParameterValidityParameters(CStringArray &szParameters) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterValidityParameters(szParameters) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterValidityParameter(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterValidityParameter(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTMParameterValidityParameterLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterValidityParameterLength() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterValidityValue(INT nValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterValidityValue(nValue) : FALSE);
}

BOOL CDatabaseEngine::GetTMParameterValidityValueRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterValidityValueRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMParameterRelatedParameter(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterRelatedParameter(pszTag) : FALSE);
}
BOOL CDatabaseEngine::CheckTMParameterRelatedParameter(ULONGLONG nAttributes, LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterRelatedParameter(nAttributes, pszTag) : FALSE);
}

INT CDatabaseEngine::GetTMParameterRelatedParameterLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterRelatedParameterLength() : 0);
}

CString CDatabaseEngine::TranslateTMParameterRelatedParameter(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterRelatedParameter(pszTag) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterConstValue(nAttributes, pszConstValue) : FALSE);
}

INT CDatabaseEngine::GetTMParameterConstValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterConstValueLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTMParameterConstValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterConstValue(nAttributes, nWidth, pszConstValue) : 0);
}
CString CDatabaseEngine::TranslateTMParameterConstValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterConstValue(nAttributes, nWidth, nConstValue) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMParameterDerivationExpression(LPCTSTR pszExpression) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterDerivationExpression(pszExpression) : FALSE);
}

INT CDatabaseEngine::GetTMParameterDerivationExpressionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterDerivationExpressionLength() : 0);
}

BOOL CDatabaseEngine::TranslateTMParameterDerivationExpression(LPCTSTR pszTag, LPCTSTR pszExpression, CONST CStringArray &pParameters, CString &szProcedure, CStringArray &szErrors) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterDerivationExpression(pszTag, pszExpression, pParameters, szProcedure, szErrors) : FALSE);
}

INT CDatabaseEngine::EnumTMParameterTriggerTypes(CStringArray &szTriggerTypes, CLongUIntArray &nTriggerTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterTriggerTypes(szTriggerTypes, nTriggerTypes) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterTriggerType(ULONGLONG nAttributes, ULONGLONG nTriggerType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterTriggerType(nAttributes, nTriggerType) : FALSE);
}

INT CDatabaseEngine::GetTMParameterTriggerTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterTriggerTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTMParameterTriggerType(LPCTSTR pszTriggerType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterTriggerType(pszTriggerType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMParameterTriggerType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterTriggerType(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMParameterTriggerExpression(ULONGLONG nNature, ULONGLONG nTriggerType, LPCTSTR pszExpression) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterTriggerExpression(nNature, nTriggerType, pszExpression) : FALSE);
}

INT CDatabaseEngine::GetTMParameterTriggerExpressionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterTriggerExpressionLength() : 0);
}

CString CDatabaseEngine::TranslateTMParameterTriggerExpression(LPCTSTR pszExpression) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterTriggerExpression(pszExpression) : EMPTYSTRING);
}
BOOL CDatabaseEngine::TranslateTMParameterTriggerExpression(LPCTSTR pszExpression, CString &szParameter, CString &szPacket) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterTriggerExpression(pszExpression, szParameter, szPacket) : FALSE);
}

BOOL CDatabaseEngine::CheckTMParameterCalibrationTable(ULONGLONG nAttributes, LPCTSTR pszTable) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterCalibrationTable(nAttributes, pszTable) : FALSE);
}

INT CDatabaseEngine::GetTMParameterCalibrationTableLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterCalibrationTableLength() : 0);
}

INT CDatabaseEngine::GetTMParameterNumCalTablesCount() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterNumCalTablesCount() : 0);
}

INT CDatabaseEngine::GetTMParameterTxtCalTablesCount() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterTxtCalTablesCount() : 0);
}

INT CDatabaseEngine::GetTMParameterNumOolTablesCount() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterNumOolTablesCount() : 0);
}

INT CDatabaseEngine::GetTMParameterTxtOolTablesCount() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterTxtOolTablesCount() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterSourceSubSystem(LPCTSTR pszSubSystem) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterSourceSubSystem(pszSubSystem) : FALSE);
}

INT CDatabaseEngine::GetTMParameterSourceSubSystemLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterSourceSubSystemLength() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterSourceEquipment(LPCTSTR pszEquipment) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterSourceEquipment(pszEquipment) : FALSE);
}

INT CDatabaseEngine::GetTMParameterSourceEquipmentLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterSourceEquipmentLength() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterRouterSubSystem(LPCTSTR pszSubSystem) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterRouterSubSystem(pszSubSystem) : FALSE);
}

INT CDatabaseEngine::GetTMParameterRouterSubSystemLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterRouterSubSystemLength() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterRouterEquipment(LPCTSTR pszEquipment) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterRouterEquipment(pszEquipment) : FALSE);
}

INT CDatabaseEngine::GetTMParameterRouterEquipmentLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterRouterEquipmentLength() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterOperationalInfo(LPCTSTR pszInfo) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterOperationalInfo(pszInfo) : FALSE);
}

INT CDatabaseEngine::GetTMParameterOperationalInfoLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterOperationalInfoLength() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterDangerConditions(LPCTSTR pszConditions) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterDangerConditions(pszConditions) : FALSE);
}

INT CDatabaseEngine::GetTMParameterDangerConditionsLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterDangerConditionsLength() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterValidityConditions(LPCTSTR pszConditions) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterValidityConditions(pszConditions) : FALSE);
}

INT CDatabaseEngine::GetTMParameterValidityConditionsLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterValidityConditionsLength() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterAssociatedTelecommands(LPCTSTR pszTelecommands) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterAssociatedTelecommands(pszTelecommands) : FALSE);
}

INT CDatabaseEngine::GetTMParameterAssociatedTelecommandsLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterAssociatedTelecommandsLength() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterInterrogationInstruction(LPCTSTR pszInstruction) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterInterrogationInstruction(pszInstruction) : FALSE);
}

INT CDatabaseEngine::GetTMParameterInterrogationInstructionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterInterrogationInstructionLength() : 0);
}

BOOL CDatabaseEngine::GetTMParameterInterrogationInstructionRange(UINT &nLow, UINT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterInterrogationInstructionRange(nLow, nHigh) : FALSE);
}

UINT CDatabaseEngine::TranslateTMParameterInterrogationInstruction(LPCTSTR pszInstruction) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterInterrogationInstruction(pszInstruction) : 0);
}
CString CDatabaseEngine::TranslateTMParameterInterrogationInstruction(UINT nInstruction) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterInterrogationInstruction(nInstruction) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMParameterOnBoardID(INT nPID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterOnBoardID(nPID) : FALSE);
}

BOOL CDatabaseEngine::GetTMParameterOnBoardIDRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterOnBoardIDRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMParameterOnBoardTimerID(INT nOBTID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterOnBoardTimerID(nOBTID) : FALSE);
}

BOOL CDatabaseEngine::GetTMParameterOnBoardTimerIDRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterOnBoardTimerIDRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMParameterDecimalDigits(INT nDigits) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterDecimalDigits(nDigits) : FALSE);
}

BOOL CDatabaseEngine::GetTMParameterDecimalDigitsRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterDecimalDigitsRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumTMParameterResultTypes(CStringArray &szResultTypes, CLongUIntArray &nResultTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterResultTypes(szResultTypes, nResultTypes) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterResultType(ULONGLONG nResultType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterResultType(nResultType) : FALSE);
}

INT CDatabaseEngine::GetTMParameterResultTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterResultTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTMParameterResultType(LPCTSTR pszResultType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterResultType(pszResultType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMParameterResultType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterResultType(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMParameterConsistencyChecksFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterConsistencyChecksFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterConsistencyChecksFlag(ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterConsistencyChecksFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTMParameterConsistenceChecksFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterConsistenceChecksFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTMParameterConsistencyChecksFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterConsistencyChecksFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMParameterConsistencyChecksFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterConsistencyChecksFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMParameterTimeCorrelationFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterTimeCorrelationFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterTimeCorrelationFlag(ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterTimeCorrelationFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTMParameterTimeCorrelationFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterTimeCorrelationFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTMParameterTimeCorrelationFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterTimeCorrelationFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMParameterTimeCorrelationFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterTimeCorrelationFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMParameterArchivingFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterArchivingFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterArchivingFlag(ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterArchivingFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTMParameterArchivingFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterArchivingFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTMParameterArchivingFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterArchivingFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMParameterArchivingFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterArchivingFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMParameterEndianityFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterEndianityFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterEndianityFlag(ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterEndianityFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTMParameterEndianityFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterEndianityFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTMParameterEndianityFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterEndianityFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMParameterEndianityFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterEndianityFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMParameterSpareList(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterSpareList(pszTag) : FALSE);
}

INT CDatabaseEngine::EnumTMParameterStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMParameterStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTMParameterStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTMParameterStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTMParameterStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMParameterStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMParameterGroupName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterGroupName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTMParameterGroupNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterGroupNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterGroupDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterGroupDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTMParameterGroupDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterGroupDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTMParameterGroupType(LPCTSTR pszType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterGroupType(pszType) : FALSE);
}

INT CDatabaseEngine::GetTMParameterGroupTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMParameterGroupTypeLength() : 0);
}

INT CDatabaseEngine::TranslateTMParameterGroupType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterGroupType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMParameterGroupType(INT nType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMParameterGroupType(nType, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMParameterGroupMember(LPCTSTR pszParameter) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMParameterGroupMember(pszParameter) : FALSE);
}

BOOL CDatabaseEngine::CheckTMNumCalTableName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumCalTableName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTMNumCalTableNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumCalTableNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTMNumCalTableDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumCalTableDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTMNumCalTableDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumCalTableDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTMNumCalTableUnit(LPCTSTR pszUnit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumCalTableUnit(pszUnit) : FALSE);
}

INT CDatabaseEngine::GetTMNumCalTableUnitLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumCalTableUnitLength() : 0);
}

INT CDatabaseEngine::EnumTMNumCalTableTypes(CStringArray &szTypes, CUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMNumCalTableTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTMNumCalTableType(UINT nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumCalTableType(nType) : FALSE);
}

INT CDatabaseEngine::GetTMNumCalTableTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumCalTableTypeLength() : 0);
}

UINT CDatabaseEngine::TranslateTMNumCalTableType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumCalTableType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMNumCalTableType(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumCalTableType(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMNumCalTableEngineeringValuesCodings(CStringArray &szCodings, CUIntArray &nCodings) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMNumCalTableEngineeringValuesCodings(szCodings, nCodings) : 0);
}

BOOL CDatabaseEngine::CheckTMNumCalTableEngineeringValuesCoding(UINT nCoding) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumCalTableEngineeringValuesCoding(nCoding) : FALSE);
}

INT CDatabaseEngine::GetTMNumCalTableEngineeringValuesCodingLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumCalTableEngineeringValuesCodingLength() : 0);
}

UINT CDatabaseEngine::TranslateTMNumCalTableEngineeringValuesCoding(LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumCalTableEngineeringValuesCoding(pszCoding, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMNumCalTableEngineeringValuesCoding(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumCalTableEngineeringValuesCoding(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMNumCalTableRawValuesCodings(CStringArray &szCodings, CUIntArray &nCodings) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMNumCalTableRawValuesCodings(szCodings, nCodings) : 0);
}

BOOL CDatabaseEngine::CheckTMNumCalTableRawValuesCoding(UINT nCoding) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumCalTableRawValuesCoding(nCoding) : FALSE);
}

INT CDatabaseEngine::GetTMNumCalTableRawValuesCodingLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumCalTableRawValuesCodingLength() : 0);
}

UINT CDatabaseEngine::TranslateTMNumCalTableRawValuesCoding(LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumCalTableRawValuesCoding(pszCoding, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMNumCalTableRawValuesCoding(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumCalTableRawValuesCoding(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMNumCalTableRawValuesRadixes(CStringArray &szRadixes, CUIntArray &nRadixes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMNumCalTableRawValuesRadixes(szRadixes, nRadixes) : 0);
}

BOOL CDatabaseEngine::CheckTMNumCalTableRawValuesRadix(UINT nCoding, UINT nRadix) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumCalTableRawValuesRadix(nCoding, nRadix) : FALSE);
}

INT CDatabaseEngine::GetTMNumCalTableRawValuesRadixLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumCalTableRawValuesRadixLength() : 0);
}

UINT CDatabaseEngine::TranslateTMNumCalTableRawValuesRadix(LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumCalTableRawValuesRadix(pszRadix, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMNumCalTableRawValuesRadix(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumCalTableRawValuesRadix(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMNumCalTableInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMNumCalTableRawValuesRadixes(szInterpretations, nInterpretations) : 0);
}

BOOL CDatabaseEngine::CheckTMNumCalTableInterpretation(UINT nInterpretation) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumCalTableInterpretation(nInterpretation) : FALSE);
}

INT CDatabaseEngine::GetTMNumCalTableInterpretationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumCalTableInterpretationLength() : 0);
}

UINT CDatabaseEngine::TranslateTMNumCalTableInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumCalTableInterpretation(pszInterpretation, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMNumCalTableInterpretation(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumCalTableInterpretation(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMNumCalTableValidityParameter(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumCalTableValidityParameter(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTMNumCalTableValidityParameterLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumCalTableValidityParameterLength() : 0);
}

BOOL CDatabaseEngine::CheckTMNumCalTableValidityValue(INT nValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumCalTableValidityValue(nValue) : FALSE);
}

BOOL CDatabaseEngine::GetTMNumCalTableValidityValueRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumCalTableValidityValueRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::GetTMNumCalTablePositionRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumCalTablePositionRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMNumCalTablePoints(INT nPoints) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumCalTablePoints(nPoints) : FALSE);
}

BOOL CDatabaseEngine::GetTMNumCalTablePointsRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumCalTablePointsRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMNumCalTablePointValue(LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumCalTablePointValue(pszValue) : FALSE);
}
BOOL CDatabaseEngine::CheckTMNumCalTablePointValue(UINT nAttributes, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumCalTablePointValue(nAttributes, pszValue) : FALSE);
}

INT CDatabaseEngine::GetTMNumCalTablePointValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumCalTablePointValueLength() : 0);
}

double CDatabaseEngine::TranslateTMNumCalTablePointValue(UINT nAttributes, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumCalTablePointValue(nAttributes, pszValue) : 0.0);
}
CString CDatabaseEngine::TranslateTMNumCalTablePointValue(UINT nAttributes, double fValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumCalTablePointValue(nAttributes, fValue) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMNumCalTablePointInterval(double X1, double X2) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumCalTablePointInterval(X1, X2) : FALSE);
}

CString CDatabaseEngine::GetTMNumCalTablePointOutsideText() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumCalTablePointOutsideText() : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMNumCalTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMNumCalTableStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTMNumCalTableStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumCalTableStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTMNumCalTableStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumCalTableStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTMNumCalTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumCalTableStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMNumCalTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumCalTableStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMTxtCalTableName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtCalTableName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTMTxtCalTableNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtCalTableNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTMTxtCalTableDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtCalTableDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTMTxtCalTableDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtCalTableDescriptionLength() : 0);
}

INT CDatabaseEngine::EnumTMTxtCalTableRawValuesCodings(CStringArray &szCodings, CUIntArray &nCodings) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMTxtCalTableRawValuesCodings(szCodings, nCodings) : 0);
}

BOOL CDatabaseEngine::CheckTMTxtCalTableRawValuesCoding(UINT nCoding) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtCalTableRawValuesCoding(nCoding) : FALSE);
}

INT CDatabaseEngine::GetTMTxtCalTableRawValuesCodingLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtCalTableRawValuesCodingLength() : 0);
}

UINT CDatabaseEngine::TranslateTMTxtCalTableRawValuesCoding(LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtCalTableRawValuesCoding(pszCoding, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMTxtCalTableRawValuesCoding(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtCalTableRawValuesCoding(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMTxtCalTableValidityParameter(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtCalTableValidityParameter(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTMTxtCalTableValidityParameterLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtCalTableValidityParameterLength() : 0);
}

BOOL CDatabaseEngine::CheckTMTxtCalTableValidityValue(INT nValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtCalTableValidityValue(nValue) : FALSE);
}

BOOL CDatabaseEngine::GetTMTxtCalTableValidityValueRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtCalTableValidityValueRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::GetTMTxtCalTablePositionRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtCalTablePositionRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMTxtCalTablePoints(INT nPoints) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtCalTablePoints(nPoints) : FALSE);
}

BOOL CDatabaseEngine::GetTMTxtCalTablePointsRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtCalTablePointsRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMTxtCalTablePointValue(LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtCalTablePointValue(pszValue) : FALSE);
}
BOOL CDatabaseEngine::CheckTMTxtCalTablePointValue(UINT nAttributes, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtCalTablePointValue(nAttributes, pszValue) : FALSE);
}

INT CDatabaseEngine::GetTMTxtCalTablePointValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtCalTablePointValueLength() : 0);
}

double CDatabaseEngine::TranslateTMTxtCalTablePointValue(UINT nAttributes, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtCalTablePointValue(nAttributes, pszValue) : 0.0);
}
CString CDatabaseEngine::TranslateTMTxtCalTablePointValue(UINT nAttributes, double fValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtCalTablePointValue(nAttributes, fValue) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMTxtCalTablePointInterval(double X1, double X2) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtCalTablePointInterval(X1, X2) : FALSE);
}

BOOL CDatabaseEngine::CheckTMTxtCalTablePointText(LPCTSTR pszText) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtCalTablePointText(pszText) : FALSE);
}

INT CDatabaseEngine::GetTMTxtCalTablePointTextLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtCalTablePointTextLength() : 0);
}

CString CDatabaseEngine::GetTMTxtCalTablePointOutsideText() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtCalTablePointOutsideText() : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMTxtCalTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMTxtCalTableStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTMTxtCalTableStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtCalTableStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTMTxtCalTableStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtCalTableStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTMTxtCalTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtCalTableStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMTxtCalTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtCalTableStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMNumOolTableName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumOolTableName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTMNumOolTableNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumOolTableNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTMNumOolTableDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumOolTableDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTMNumOolTableDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumOolTableDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTMNumOolTableUnit(LPCTSTR pszUnit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumOolTableUnit(pszUnit) : FALSE);
}

INT CDatabaseEngine::GetTMNumOolTableUnitLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumOolTableUnitLength() : 0);
}

BOOL CDatabaseEngine::CheckTMNumOolTableCheckCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumOolTableCheckCount(nCount) : FALSE);
}

BOOL CDatabaseEngine::GetTMNumOolTableCheckCountRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumOolTableCheckCountRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTMNumOolTableCheckCount(LPCTSTR pszCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableCheckCount(pszCount) : 0);
}
CString CDatabaseEngine::TranslateTMNumOolTableCheckCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableCheckCount(nCount) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMNumOolTableLimitCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumOolTableLimitCount(nCount) : FALSE);
}

BOOL CDatabaseEngine::GetTMNumOolTableLimitCountRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumOolTableLimitCountRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTMNumOolTableLimitCount(LPCTSTR pszCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableLimitCount(pszCount) : 0);
}
CString CDatabaseEngine::TranslateTMNumOolTableLimitCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableLimitCount(nCount) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMNumOolTableInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMNumOolTableInterpretations(szInterpretations, nInterpretations) : 0);
}

BOOL CDatabaseEngine::CheckTMNumOolTableInterpretation(UINT nInterpretation) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumOolTableInterpretation(nInterpretation) : FALSE);
}

INT CDatabaseEngine::GetTMNumOolTableInterpretationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumOolTableInterpretationLength() : 0);
}

UINT CDatabaseEngine::TranslateTMNumOolTableInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableInterpretation(pszInterpretation, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMNumOolTableInterpretation(UINT nInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableInterpretation(nInterpretation, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMNumOolTableCodings(CStringArray &szCodings, CUIntArray &nCodings) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMNumOolTableCodings(szCodings, nCodings) : 0);
}

BOOL CDatabaseEngine::CheckTMNumOolTableCoding(UINT nInterpretation, UINT nCoding) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumOolTableCoding(nInterpretation, nCoding) : FALSE);
}

INT CDatabaseEngine::GetTMNumOolTableCodingLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumOolTableCodingLength() : 0);
}

UINT CDatabaseEngine::TranslateTMNumOolTableCoding(UINT nInterpretation, LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableCoding(nInterpretation, pszCoding, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMNumOolTableCoding(UINT nCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableCoding(nCoding, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMNumOolTableRadixes(CStringArray &szRadixes, CUIntArray &nRadixes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMNumOolTableRadixes(szRadixes, nRadixes) : 0);
}

BOOL CDatabaseEngine::CheckTMNumOolTableRadix(UINT nInterpretation, UINT nCoding, UINT nRadix) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumOolTableRadix(nInterpretation, nCoding, nRadix) : FALSE);
}

INT CDatabaseEngine::GetTMNumOolTableRadixLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumOolTableRadixLength() : 0);
}

UINT CDatabaseEngine::TranslateTMNumOolTableRadix(UINT nInterpretation, LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableRadix(nInterpretation, pszRadix, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMNumOolTableRadix(UINT nRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableRadix(nRadix, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMNumOolTableLimitTypes(CStringArray &szLimitTypes, CUIntArray &nLimitTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMNumOolTableLimitTypes(szLimitTypes, nLimitTypes) : 0);
}

BOOL CDatabaseEngine::CheckTMNumOolTableLimitType(UINT nLimitType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumOolTableLimitType(nLimitType) : FALSE);
}

INT CDatabaseEngine::GetTMNumOolTableLimitTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumOolTableLimitTypeLength() : 0);
}

INT CDatabaseEngine::TranslateTMNumOolTableLimitType(LPCTSTR pszLimitType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableLimitType(pszLimitType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMNumOolTableLimitType(INT nLimitType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableLimitType(nLimitType, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::GetTMNumOolTableLimitPositionRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumOolTableLimitPositionRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMNumOolTableLimitOrder(INT nOrder) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumOolTableLimitOrder(nOrder) : FALSE);
}

INT CDatabaseEngine::GetTMNumOolTableLimitCount(UINT nAttributes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumOolTableLimitCount(nAttributes) : 0);
}

BOOL CDatabaseEngine::CheckTMNumOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumOolTableLimitValue(nAttributes, pszLimit) : FALSE);
}

INT CDatabaseEngine::GetTMNumOolTableLimitValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumOolTableLimitValueLength() : 0);
}

double CDatabaseEngine::TranslateTMNumOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableLimitValue(nAttributes, pszLimit) : 0.0);
}
CString CDatabaseEngine::TranslateTMNumOolTableLimitValue(UINT nAttributes, double fLimit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableLimitValue(nAttributes, fLimit) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMNumOolTableLimitValidityParameter(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumOolTableLimitValidityParameter(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTMNumOolTableLimitValidityParameterLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumOolTableLimitValidityParameterLength() : 0);
}

BOOL CDatabaseEngine::CheckTMNumOolTableLimitValidityValue(INT nValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumOolTableLimitValidityValue(nValue) : FALSE);
}

BOOL CDatabaseEngine::GetTMNumOolTableLimitValidityValueRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumOolTableLimitValidityValueRange(nLow, nHigh) : 0);
}

INT CDatabaseEngine::EnumTMNumOolTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMNumOolTableStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTMNumOolTableStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMNumOolTableStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTMNumOolTableStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMNumOolTableStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTMNumOolTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMNumOolTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMNumOolTableStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMTxtOolTableName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtOolTableName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTMTxtOolTableNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtOolTableNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTMTxtOolTableDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtOolTableDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTMTxtOolTableDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtOolTableDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTMTxtOolTableCheckCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtOolTableCheckCount(nCount) : FALSE);
}

BOOL CDatabaseEngine::GetTMTxtOolTableCheckCountRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtOolTableCheckCountRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTMTxtOolTableCheckCount(LPCTSTR pszCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableCheckCount(pszCount) : 0);
}
CString CDatabaseEngine::TranslateTMTxtOolTableCheckCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableCheckCount(nCount) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMTxtOolTableLimitCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtOolTableLimitCount(nCount) : FALSE);
}

BOOL CDatabaseEngine::GetTMTxtOolTableLimitCountRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtOolTableLimitCountRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTMTxtOolTableLimitCount(LPCTSTR pszCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableLimitCount(pszCount) : 0);
}
CString CDatabaseEngine::TranslateTMTxtOolTableLimitCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableLimitCount(nCount) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMTxtOolTableInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMTxtOolTableInterpretations(szInterpretations, nInterpretations) : 0);
}

BOOL CDatabaseEngine::CheckTMTxtOolTableInterpretation(UINT nInterpretation) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtOolTableInterpretation(nInterpretation) : FALSE);
}

INT CDatabaseEngine::GetTMTxtOolTableInterpretationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtOolTableInterpretationLength() : 0);
}

UINT CDatabaseEngine::TranslateTMTxtOolTableInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableInterpretation(pszInterpretation, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMTxtOolTableInterpretation(UINT nInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableInterpretation(nInterpretation, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMTxtOolTableCodings(CStringArray &szCodings, CUIntArray &nCodings) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMTxtOolTableCodings(szCodings, nCodings) : 0);
}

BOOL CDatabaseEngine::CheckTMTxtOolTableCoding(UINT nInterpretation, UINT nCoding) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtOolTableCoding(nInterpretation, nCoding) : FALSE);
}

INT CDatabaseEngine::GetTMTxtOolTableCodingLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtOolTableCodingLength() : 0);
}

UINT CDatabaseEngine::TranslateTMTxtOolTableCoding(UINT nInterpretation, LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableCoding(nInterpretation, pszCoding, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMTxtOolTableCoding(UINT nCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableCoding(nCoding, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMTxtOolTableRadixes(CStringArray &szRadixes, CUIntArray &nRadixes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMTxtOolTableRadixes(szRadixes, nRadixes) : 0);
}

BOOL CDatabaseEngine::CheckTMTxtOolTableRadix(UINT nInterpretation, UINT nCoding, UINT nRadix) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtOolTableRadix(nInterpretation, nCoding, nRadix) : FALSE);
}

INT CDatabaseEngine::GetTMTxtOolTableRadixLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtOolTableRadixLength() : 0);
}

UINT CDatabaseEngine::TranslateTMTxtOolTableRadix(UINT nInterpretation, LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableRadix(nInterpretation, pszRadix, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMTxtOolTableRadix(UINT nRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableRadix(nRadix, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTMTxtOolTableLimitTypes(CStringArray &szLimitTypes, CUIntArray &nLimitTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMTxtOolTableLimitTypes(szLimitTypes, nLimitTypes) : 0);
}

BOOL CDatabaseEngine::CheckTMTxtOolTableLimitType(UINT nLimitType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtOolTableLimitType(nLimitType) : FALSE);
}

INT CDatabaseEngine::GetTMTxtOolTableLimitTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtOolTableLimitTypeLength() : 0);
}

INT CDatabaseEngine::TranslateTMTxtOolTableLimitType(LPCTSTR pszLimitType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableLimitType(pszLimitType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMTxtOolTableLimitType(INT nLimitType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableLimitType(nLimitType, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::GetTMTxtOolTableLimitPositionRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtOolTableLimitPositionRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTMTxtOolTableLimitOrder(INT nOrder) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtOolTableLimitOrder(nOrder) : FALSE);
}

INT CDatabaseEngine::GetTMTxtOolTableLimitCount(UINT nAttributes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtOolTableLimitCount(nAttributes) : 0);
}

BOOL CDatabaseEngine::CheckTMTxtOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtOolTableLimitValue(nAttributes, pszLimit) : FALSE);
}

INT CDatabaseEngine::GetTMTxtOolTableLimitValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtOolTableLimitValueLength() : 0);
}

double CDatabaseEngine::TranslateTMTxtOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableLimitValue(nAttributes, pszLimit) : 0.0);
}
CString CDatabaseEngine::TranslateTMTxtOolTableLimitValue(UINT nAttributes, double fLimit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableLimitValue(nAttributes, fLimit) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTMTxtOolTableLimitValidityParameter(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtOolTableLimitValidityParameter(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTMTxtOolTableLimitValidityParameterLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtOolTableLimitValidityParameterLength() : 0);
}

BOOL CDatabaseEngine::CheckTMTxtOolTableLimitValidityValue(INT nValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtOolTableLimitValidityValue(nValue) : FALSE);
}

BOOL CDatabaseEngine::GetTMTxtOolTableLimitValidityValueRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? GetTMTxtOolTableLimitValidityValueRange(nLow, nHigh) : 0);
}

INT CDatabaseEngine::EnumTMTxtOolTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTMTxtOolTableStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTMTxtOolTableStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTMTxtOolTableStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTMTxtOolTableStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTMTxtOolTableStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTMTxtOolTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTMTxtOolTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTMTxtOolTableStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCParameterTag(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterTag(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTCParameterTagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterTagLength() : 0);
}

BOOL CDatabaseEngine::CheckTCParameterDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCParameterDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTCParameterUnit(LPCTSTR pszUnit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterUnit(pszUnit) : FALSE);
}

INT CDatabaseEngine::GetTCParameterUnitLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterUnitLength() : 0);
}

INT CDatabaseEngine::EnumTCParameterTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCParameterType(LPCTSTR pszTag, ULONGLONG nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterType(pszTag, nType) : FALSE);
}

INT CDatabaseEngine::GetTCParameterTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCParameterType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCParameterType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterType(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCParameterCategories(CStringArray &szCategories, CLongUIntArray &nCategories) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterCategories(szCategories, nCategories) : 0);
}

BOOL CDatabaseEngine::CheckTCParameterCategory(ULONGLONG nCategory) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterCategory(nCategory) : FALSE);
}

INT CDatabaseEngine::GetTCParameterCategoryLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterCategoryLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCParameterCategory(LPCTSTR pszCategory, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterCategory(pszCategory, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCParameterCategory(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterCategory(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCParameterTypeCodes(CStringArray &szPTCs, CUIntArray &nPTCs) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterTypeCodes(szPTCs, nPTCs) : 0);
}

BOOL CDatabaseEngine::CheckTCParameterTypeCode(INT nPTC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterTypeCode(nPTC) : FALSE);
}

BOOL CDatabaseEngine::GetTCParameterTypeCodeRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterTypeCodeRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTCParameterTypeCode(LPCTSTR pszPTC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterTypeCode(pszPTC) : 0);
}
CString CDatabaseEngine::TranslateTCParameterTypeCode(INT nPTC, INT nPFC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterTypeCode(nPTC, nPFC) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCParameterFormatCodes(LPCTSTR pszPTC, CStringArray &szPFCs, CUIntArray &nPFCs) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterFormatCodes(pszPTC, szPFCs, nPFCs) : 0);
}

BOOL CDatabaseEngine::CheckTCParameterFormatCode(INT nPTC, INT nPFC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterFormatCode(nPTC, nPFC) : FALSE);
}

BOOL CDatabaseEngine::GetTCParameterFormatCodeRange(INT nPTC, INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterFormatCodeRange(nPTC, nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTCParameterFormatCode(LPCTSTR pszPFC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterFormatCode(pszPFC) : 0);
}
CString CDatabaseEngine::TranslateTCParameterFormatCode(INT nPTC, INT nPFC) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterFormatCode(nPTC, nPFC) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCParameterDisplayFormats(CStringArray &szFormats, CLongUIntArray &nFormats) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterDisplayFormats(szFormats, nFormats) : 0);
}
INT CDatabaseEngine::EnumTCParameterDisplayFormats(ULONGLONG nAttributes, CStringArray &szFormats, CLongUIntArray &nFormats) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterDisplayFormats(nAttributes, szFormats, nFormats) : 0);
}

BOOL CDatabaseEngine::CheckTCParameterDisplayFormat(ULONGLONG nAttributes, ULONGLONG nFormat) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterDisplayFormat(nAttributes, nFormat) : FALSE);
}

INT CDatabaseEngine::GetTCParameterDisplayFormatLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterDisplayFormatLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCParameterDisplayFormat(LPCTSTR pszFormat, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterDisplayFormat(pszFormat, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCParameterDisplayFormat(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterDisplayFormat(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCParameterCodings(CStringArray &szCodings, CLongUIntArray &nCodings) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterCodings(szCodings, nCodings) : 0);
}

BOOL CDatabaseEngine::CheckTCParameterCoding(ULONGLONG nAttributes, ULONGLONG nCoding) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterCoding(nAttributes, nCoding) : FALSE);
}

INT CDatabaseEngine::GetTCParameterCodingLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterCodingLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCParameterCoding(LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterCoding(pszCoding, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCParameterCoding(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterCoding(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCParameterRadixes(CStringArray &szRadixes, CLongUIntArray &nRadixes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterRadixes(szRadixes, nRadixes) : 0);
}

BOOL CDatabaseEngine::CheckTCParameterRadix(ULONGLONG nAttributes, ULONGLONG nRadix) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterCoding(nAttributes, nRadix) : FALSE);
}

INT CDatabaseEngine::GetTCParameterRadixLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterRadixLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCParameterRadix(LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterRadix(pszRadix, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCParameterRadix(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterRadix(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCParameterBitWidth(INT nWidth) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterBitWidth(nWidth) : FALSE);
}

BOOL CDatabaseEngine::GetTCParameterBitWidthRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterBitWidthRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCParameterCalTable(ULONGLONG nAttributes, LPCTSTR pszTable) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterCalTable(nAttributes, pszTable) : FALSE);
}

INT CDatabaseEngine::GetTCParameterCalTableLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterCalTableLength() : 0);
}

BOOL CDatabaseEngine::CheckTCParameterOolTable(ULONGLONG nAttributes, LPCTSTR pszTable) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterOolTable(nAttributes, pszTable) : FALSE);
}

INT CDatabaseEngine::GetTCParameterOolTableLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterOolTableLength() : 0);
}

INT CDatabaseEngine::EnumTCParameterConstValueTypes(CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterConstValueTypes(szTypes, nTypes) : 0);
}
INT CDatabaseEngine::EnumTCParameterConstValueTypes(ULONGLONG nAttributes, CStringArray &szTypes, CLongUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterConstValueTypes(nAttributes, szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCParameterConstValueType(ULONGLONG nType, LPCTSTR pszConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterConstValueType(nType, pszConstValue) : FALSE);
}

INT CDatabaseEngine::GetTCParameterConstValueTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterConstValueTypeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCParameterConstValueType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterConstValueType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCParameterConstValueType(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterConstValueType(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterConstValue(nAttributes, pszConstValue) : FALSE);
}

INT CDatabaseEngine::GetTCParameterConstValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterConstValueLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCParameterConstValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterConstValue(nAttributes, nWidth, pszConstValue) : 0);
}
CString CDatabaseEngine::TranslateTCParameterConstValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterConstValue(nAttributes, nWidth, nConstValue) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCParameterConstTimeType(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterConstTimeType(pszTag) : FALSE);
}

BOOL CDatabaseEngine::CheckTCParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterConstTime(nAttributes, pszConstTime) : FALSE);
}

INT CDatabaseEngine::GetTCParameterConstTimeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterConstTimeLength() : 0);
}

CTimeTag CDatabaseEngine::TranslateTCParameterConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterConstTime(nAttributes, pszConstTime) : 0);
}
CString CDatabaseEngine::TranslateTCParameterConstTime(ULONGLONG nAttributes, CONST CTimeTag &tTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterConstTime(nAttributes, tTime) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCParameterOnBoardTimerID(INT nOBTID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterOnBoardTimerID(nOBTID) : FALSE);
}

BOOL CDatabaseEngine::GetTCParameterOnBoardTimerIDRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterOnBoardTimerIDRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumTCParameterTimeCorrelationFlags(CStringArray &szFlags, CLongUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterTimeCorrelationFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckTCParameterTimeCorrelationFlag(ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterTimeCorrelationFlag(nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCParameterTimeCorrelationFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterTimeCorrelationFlagLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCParameterTimeCorrelationFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterTimeCorrelationFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCParameterTimeCorrelationFlag(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterTimeCorrelationFlag(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCParameterStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTCParameterStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTCParameterStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTCParameterStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCParameterStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCNumCalTableName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumCalTableName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCNumCalTableNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumCalTableNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCNumCalTableDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumCalTableDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCNumCalTableDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumCalTableDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTCNumCalTableUnit(LPCTSTR pszUnit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumCalTableUnit(pszUnit) : FALSE);
}

INT CDatabaseEngine::GetTCNumCalTableUnitLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumCalTableUnitLength() : 0);
}

INT CDatabaseEngine::EnumTCNumCalTableTypes(CStringArray &szTypes, CUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCNumCalTableTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCNumCalTableType(UINT nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumCalTableType(nType) : FALSE);
}

INT CDatabaseEngine::GetTCNumCalTableTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumCalTableTypeLength() : 0);
}

UINT CDatabaseEngine::TranslateTCNumCalTableType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumCalTableType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCNumCalTableType(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumCalTableType(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCNumCalTableEngineeringValuesCodings(CStringArray &szCodings, CUIntArray &nCodings) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCNumCalTableEngineeringValuesCodings(szCodings, nCodings) : 0);
}

BOOL CDatabaseEngine::CheckTCNumCalTableEngineeringValuesCoding(UINT nCoding) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumCalTableEngineeringValuesCoding(nCoding) : FALSE);
}

INT CDatabaseEngine::GetTCNumCalTableEngineeringValuesCodingLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumCalTableEngineeringValuesCodingLength() : 0);
}

UINT CDatabaseEngine::TranslateTCNumCalTableEngineeringValuesCoding(LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumCalTableEngineeringValuesCoding(pszCoding, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCNumCalTableEngineeringValuesCoding(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumCalTableEngineeringValuesCoding(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCNumCalTableRawValuesCodings(CStringArray &szCodings, CUIntArray &nCodings) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCNumCalTableRawValuesCodings(szCodings, nCodings) : 0);
}

BOOL CDatabaseEngine::CheckTCNumCalTableRawValuesCoding(UINT nCoding) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumCalTableRawValuesCoding(nCoding) : FALSE);
}

INT CDatabaseEngine::GetTCNumCalTableRawValuesCodingLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumCalTableRawValuesCodingLength() : 0);
}

UINT CDatabaseEngine::TranslateTCNumCalTableRawValuesCoding(LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumCalTableRawValuesCoding(pszCoding, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCNumCalTableRawValuesCoding(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumCalTableRawValuesCoding(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCNumCalTableRawValuesRadixes(CStringArray &szRadixes, CUIntArray &nRadixes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCNumCalTableRawValuesRadixes(szRadixes, nRadixes) : 0);
}

BOOL CDatabaseEngine::CheckTCNumCalTableRawValuesRadix(UINT nCoding, UINT nRadix) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumCalTableRawValuesRadix(nCoding, nRadix) : FALSE);
}

INT CDatabaseEngine::GetTCNumCalTableRawValuesRadixLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumCalTableRawValuesRadixLength() : 0);
}

UINT CDatabaseEngine::TranslateTCNumCalTableRawValuesRadix(LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumCalTableRawValuesRadix(pszRadix, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCNumCalTableRawValuesRadix(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumCalTableRawValuesRadix(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCNumCalTableInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCNumCalTableRawValuesRadixes(szInterpretations, nInterpretations) : 0);
}

BOOL CDatabaseEngine::CheckTCNumCalTableInterpretation(UINT nInterpretation) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumCalTableInterpretation(nInterpretation) : FALSE);
}

INT CDatabaseEngine::GetTCNumCalTableInterpretationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumCalTableInterpretationLength() : 0);
}

UINT CDatabaseEngine::TranslateTCNumCalTableInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumCalTableInterpretation(pszInterpretation, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCNumCalTableInterpretation(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumCalTableInterpretation(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCNumCalTableValidityParameter(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumCalTableValidityParameter(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTCNumCalTableValidityParameterLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumCalTableValidityParameterLength() : 0);
}

BOOL CDatabaseEngine::CheckTCNumCalTableValidityValue(INT nValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumCalTableValidityValue(nValue) : FALSE);
}

BOOL CDatabaseEngine::GetTCNumCalTableValidityValueRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumCalTableValidityValueRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::GetTCNumCalTablePositionRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumCalTablePositionRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCNumCalTablePoints(INT nPoints) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumCalTablePoints(nPoints) : FALSE);
}

BOOL CDatabaseEngine::GetTCNumCalTablePointsRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumCalTablePointsRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCNumCalTablePointValue(LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumCalTablePointValue(pszValue) : FALSE);
}
BOOL CDatabaseEngine::CheckTCNumCalTablePointValue(UINT nAttributes, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumCalTablePointValue(nAttributes, pszValue) : FALSE);
}

INT CDatabaseEngine::GetTCNumCalTablePointValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumCalTablePointValueLength() : 0);
}

double CDatabaseEngine::TranslateTCNumCalTablePointValue(UINT nAttributes, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumCalTablePointValue(nAttributes, pszValue) : 0.0);
}
CString CDatabaseEngine::TranslateTCNumCalTablePointValue(UINT nAttributes, double fValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumCalTablePointValue(nAttributes, fValue) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCNumCalTablePointInterval(double X1, double X2) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumCalTablePointInterval(X1, X2) : FALSE);
}

CString CDatabaseEngine::GetTCNumCalTablePointOutsideText() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumCalTablePointOutsideText() : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCNumCalTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCNumCalTableStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTCNumCalTableStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumCalTableStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTCNumCalTableStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumCalTableStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTCNumCalTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumCalTableStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCNumCalTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumCalTableStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCTxtCalTableName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtCalTableName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCTxtCalTableNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtCalTableNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCTxtCalTableDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtCalTableDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCTxtCalTableDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtCalTableDescriptionLength() : 0);
}

INT CDatabaseEngine::EnumTCTxtCalTableRawValuesCodings(CStringArray &szCodings, CUIntArray &nCodings) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCTxtCalTableRawValuesCodings(szCodings, nCodings) : 0);
}

BOOL CDatabaseEngine::CheckTCTxtCalTableRawValuesCoding(UINT nCoding) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtCalTableRawValuesCoding(nCoding) : FALSE);
}

INT CDatabaseEngine::GetTCTxtCalTableRawValuesCodingLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtCalTableRawValuesCodingLength() : 0);
}

UINT CDatabaseEngine::TranslateTCTxtCalTableRawValuesCoding(LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtCalTableRawValuesCoding(pszCoding, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCTxtCalTableRawValuesCoding(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtCalTableRawValuesCoding(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCTxtCalTableValidityParameter(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtCalTableValidityParameter(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTCTxtCalTableValidityParameterLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtCalTableValidityParameterLength() : 0);
}

BOOL CDatabaseEngine::CheckTCTxtCalTableValidityValue(INT nValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtCalTableValidityValue(nValue) : FALSE);
}

BOOL CDatabaseEngine::GetTCTxtCalTableValidityValueRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtCalTableValidityValueRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::GetTCTxtCalTablePositionRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtCalTablePositionRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCTxtCalTablePoints(INT nPoints) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtCalTablePoints(nPoints) : FALSE);
}

BOOL CDatabaseEngine::GetTCTxtCalTablePointsRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtCalTablePointsRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCTxtCalTablePointValue(LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtCalTablePointValue(pszValue) : FALSE);
}
BOOL CDatabaseEngine::CheckTCTxtCalTablePointValue(UINT nAttributes, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtCalTablePointValue(nAttributes, pszValue) : FALSE);
}

INT CDatabaseEngine::GetTCTxtCalTablePointValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtCalTablePointValueLength() : 0);
}

double CDatabaseEngine::TranslateTCTxtCalTablePointValue(UINT nAttributes, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtCalTablePointValue(nAttributes, pszValue) : 0.0);
}
CString CDatabaseEngine::TranslateTCTxtCalTablePointValue(UINT nAttributes, double fValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtCalTablePointValue(nAttributes, fValue) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCTxtCalTablePointInterval(double X1, double X2) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtCalTablePointInterval(X1, X2) : FALSE);
}

BOOL CDatabaseEngine::CheckTCTxtCalTablePointText(LPCTSTR pszText) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtCalTablePointText(pszText) : FALSE);
}

INT CDatabaseEngine::GetTCTxtCalTablePointTextLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtCalTablePointTextLength() : 0);
}

CString CDatabaseEngine::GetTCTxtCalTablePointOutsideText() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtCalTablePointOutsideText() : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCTxtCalTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCTxtCalTableStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTCTxtCalTableStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtCalTableStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTCTxtCalTableStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtCalTableStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTCTxtCalTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtCalTableStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCTxtCalTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtCalTableStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCNumOolTableName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumOolTableName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCNumOolTableNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumOolTableNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCNumOolTableDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumOolTableDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCNumOolTableDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumOolTableDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTCNumOolTableUnit(LPCTSTR pszUnit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumOolTableUnit(pszUnit) : FALSE);
}

INT CDatabaseEngine::GetTCNumOolTableUnitLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumOolTableUnitLength() : 0);
}

BOOL CDatabaseEngine::CheckTCNumOolTableCheckCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumOolTableCheckCount(nCount) : FALSE);
}

BOOL CDatabaseEngine::GetTCNumOolTableCheckCountRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumOolTableCheckCountRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTCNumOolTableCheckCount(LPCTSTR pszCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableCheckCount(pszCount) : 0);
}
CString CDatabaseEngine::TranslateTCNumOolTableCheckCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableCheckCount(nCount) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCNumOolTableLimitCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumOolTableLimitCount(nCount) : FALSE);
}

BOOL CDatabaseEngine::GetTCNumOolTableLimitCountRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumOolTableLimitCountRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTCNumOolTableLimitCount(LPCTSTR pszCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableLimitCount(pszCount) : 0);
}
CString CDatabaseEngine::TranslateTCNumOolTableLimitCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableLimitCount(nCount) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCNumOolTableInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCNumOolTableInterpretations(szInterpretations, nInterpretations) : 0);
}

BOOL CDatabaseEngine::CheckTCNumOolTableInterpretation(UINT nInterpretation) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumOolTableInterpretation(nInterpretation) : FALSE);
}

INT CDatabaseEngine::GetTCNumOolTableInterpretationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumOolTableInterpretationLength() : 0);
}

UINT CDatabaseEngine::TranslateTCNumOolTableInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableInterpretation(pszInterpretation, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCNumOolTableInterpretation(UINT nInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableInterpretation(nInterpretation, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCNumOolTableCodings(CStringArray &szCodings, CUIntArray &nCodings) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCNumOolTableCodings(szCodings, nCodings) : 0);
}

BOOL CDatabaseEngine::CheckTCNumOolTableCoding(UINT nInterpretation, UINT nCoding) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumOolTableCoding(nInterpretation, nCoding) : FALSE);
}

INT CDatabaseEngine::GetTCNumOolTableCodingLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumOolTableCodingLength() : 0);
}

UINT CDatabaseEngine::TranslateTCNumOolTableCoding(UINT nInterpretation, LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableCoding(nInterpretation, pszCoding, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCNumOolTableCoding(UINT nCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableCoding(nCoding, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCNumOolTableRadixes(CStringArray &szRadixes, CUIntArray &nRadixes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCNumOolTableRadixes(szRadixes, nRadixes) : 0);
}

BOOL CDatabaseEngine::CheckTCNumOolTableRadix(UINT nInterpretation, UINT nCoding, UINT nRadix) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumOolTableRadix(nInterpretation, nCoding, nRadix) : FALSE);
}

INT CDatabaseEngine::GetTCNumOolTableRadixLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumOolTableRadixLength() : 0);
}

UINT CDatabaseEngine::TranslateTCNumOolTableRadix(UINT nInterpretation, LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableRadix(nInterpretation, pszRadix, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCNumOolTableRadix(UINT nRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableRadix(nRadix, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCNumOolTableLimitTypes(CStringArray &szLimitTypes, CUIntArray &nLimitTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCNumOolTableLimitTypes(szLimitTypes, nLimitTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCNumOolTableLimitType(UINT nLimitType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumOolTableLimitType(nLimitType) : FALSE);
}

INT CDatabaseEngine::GetTCNumOolTableLimitTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumOolTableLimitTypeLength() : 0);
}

INT CDatabaseEngine::TranslateTCNumOolTableLimitType(LPCTSTR pszLimitType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableLimitType(pszLimitType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCNumOolTableLimitType(INT nLimitType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableLimitType(nLimitType, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::GetTCNumOolTableLimitPositionRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumOolTableLimitPositionRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCNumOolTableLimitOrder(INT nOrder) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumOolTableLimitOrder(nOrder) : FALSE);
}

INT CDatabaseEngine::GetTCNumOolTableLimitCount(UINT nAttributes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumOolTableLimitCount(nAttributes) : 0);
}

BOOL CDatabaseEngine::CheckTCNumOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumOolTableLimitValue(nAttributes, pszLimit) : FALSE);
}

INT CDatabaseEngine::GetTCNumOolTableLimitValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumOolTableLimitValueLength() : 0);
}

double CDatabaseEngine::TranslateTCNumOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableLimitValue(nAttributes, pszLimit) : 0.0);
}
CString CDatabaseEngine::TranslateTCNumOolTableLimitValue(UINT nAttributes, double fLimit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableLimitValue(nAttributes, fLimit) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCNumOolTableLimitTime(ULONGLONG nAttributes, LPCTSTR pszTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumOolTableLimitTime(nAttributes, pszTime) : FALSE);
}

CTimeTag CDatabaseEngine::TranslateTCNumOolTableLimitTime(ULONGLONG nAttributes, LPCTSTR pszTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableLimitTime(nAttributes, pszTime) : 0);
}
CString CDatabaseEngine::TranslateTCNumOolTableLimitTime(ULONGLONG nAttributes, CONST CTimeTag &tTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableLimitTime(nAttributes, tTime) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCNumOolTableLimitValidityParameter(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumOolTableLimitValidityParameter(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTCNumOolTableLimitValidityParameterLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumOolTableLimitValidityParameterLength() : 0);
}

BOOL CDatabaseEngine::CheckTCNumOolTableLimitValidityValue(INT nValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumOolTableLimitValidityValue(nValue) : FALSE);
}

BOOL CDatabaseEngine::GetTCNumOolTableLimitValidityValueRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumOolTableLimitValidityValueRange(nLow, nHigh) : 0);
}

INT CDatabaseEngine::EnumTCNumOolTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCNumOolTableStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTCNumOolTableStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCNumOolTableStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTCNumOolTableStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCNumOolTableStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTCNumOolTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCNumOolTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCNumOolTableStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCTxtOolTableName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtOolTableName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCTxtOolTableNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtOolTableNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCTxtOolTableDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtOolTableDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCTxtOolTableDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtOolTableDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTCTxtOolTableCheckCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtOolTableCheckCount(nCount) : FALSE);
}

BOOL CDatabaseEngine::GetTCTxtOolTableCheckCountRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtOolTableCheckCountRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTCTxtOolTableCheckCount(UINT nInterpretation, LPCTSTR pszCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableCheckCount(nInterpretation, pszCount) : 0);
}
CString CDatabaseEngine::TranslateTCTxtOolTableCheckCount(UINT nInterpretation, INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableCheckCount(nInterpretation, nCount) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCTxtOolTableLimitCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtOolTableLimitCount(nCount) : FALSE);
}

BOOL CDatabaseEngine::GetTCTxtOolTableLimitCountRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtOolTableLimitCountRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::TranslateTCTxtOolTableLimitCount(LPCTSTR pszCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableLimitCount(pszCount) : 0);
}
CString CDatabaseEngine::TranslateTCTxtOolTableLimitCount(INT nCount) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableLimitCount(nCount) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCTxtOolTableInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCTxtOolTableInterpretations(szInterpretations, nInterpretations) : 0);
}

BOOL CDatabaseEngine::CheckTCTxtOolTableInterpretation(UINT nInterpretation) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtOolTableInterpretation(nInterpretation) : FALSE);
}

INT CDatabaseEngine::GetTCTxtOolTableInterpretationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtOolTableInterpretationLength() : 0);
}

UINT CDatabaseEngine::TranslateTCTxtOolTableInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableInterpretation(pszInterpretation, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCTxtOolTableInterpretation(UINT nInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableInterpretation(nInterpretation, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCTxtOolTableCodings(CStringArray &szCodings, CUIntArray &nCodings) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCTxtOolTableCodings(szCodings, nCodings) : 0);
}

BOOL CDatabaseEngine::CheckTCTxtOolTableCoding(UINT nInterpretation, UINT nCoding) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtOolTableCoding(nInterpretation, nCoding) : FALSE);
}

INT CDatabaseEngine::GetTCTxtOolTableCodingLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtOolTableCodingLength() : 0);
}

UINT CDatabaseEngine::TranslateTCTxtOolTableCoding(UINT nInterpretation, LPCTSTR pszCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableCoding(nInterpretation, pszCoding, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCTxtOolTableCoding(UINT nCoding, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableCoding(nCoding, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCTxtOolTableRadixes(CStringArray &szRadixes, CUIntArray &nRadixes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCTxtOolTableRadixes(szRadixes, nRadixes) : 0);
}

BOOL CDatabaseEngine::CheckTCTxtOolTableRadix(UINT nInterpretation, UINT nCoding, UINT nRadix) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtOolTableRadix(nInterpretation, nCoding, nRadix) : FALSE);
}

INT CDatabaseEngine::GetTCTxtOolTableRadixLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtOolTableRadixLength() : 0);
}

UINT CDatabaseEngine::TranslateTCTxtOolTableRadix(UINT nInterpretation, LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableRadix(nInterpretation, pszRadix, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCTxtOolTableRadix(UINT nRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableRadix(nRadix, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCTxtOolTableLimitTypes(CStringArray &szLimitTypes, CUIntArray &nLimitTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCTxtOolTableLimitTypes(szLimitTypes, nLimitTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCTxtOolTableLimitType(UINT nLimitType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtOolTableLimitType(nLimitType) : FALSE);
}

INT CDatabaseEngine::GetTCTxtOolTableLimitTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtOolTableLimitTypeLength() : 0);
}

INT CDatabaseEngine::TranslateTCTxtOolTableLimitType(LPCTSTR pszLimitType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableLimitType(pszLimitType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCTxtOolTableLimitType(INT nLimitType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableLimitType(nLimitType, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::GetTCTxtOolTableLimitPositionRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtOolTableLimitPositionRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCTxtOolTableLimitOrder(INT nOrder) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtOolTableLimitOrder(nOrder) : FALSE);
}

INT CDatabaseEngine::GetTCTxtOolTableLimitCount(UINT nAttributes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtOolTableLimitCount(nAttributes) : 0);
}

BOOL CDatabaseEngine::CheckTCTxtOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtOolTableLimitValue(nAttributes, pszLimit) : FALSE);
}

INT CDatabaseEngine::GetTCTxtOolTableLimitValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtOolTableLimitValueLength() : 0);
}

double CDatabaseEngine::TranslateTCTxtOolTableLimitValue(UINT nAttributes, LPCTSTR pszLimit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableLimitValue(nAttributes, pszLimit) : 0.0);
}
CString CDatabaseEngine::TranslateTCTxtOolTableLimitValue(UINT nAttributes, double fLimit) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableLimitValue(nAttributes, fLimit) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCTxtOolTableLimitValidityParameter(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtOolTableLimitValidityParameter(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTCTxtOolTableLimitValidityParameterLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtOolTableLimitValidityParameterLength() : 0);
}

BOOL CDatabaseEngine::CheckTCTxtOolTableLimitValidityValue(INT nValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtOolTableLimitValidityValue(nValue) : FALSE);
}

BOOL CDatabaseEngine::GetTCTxtOolTableLimitValidityValueRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? GetTCTxtOolTableLimitValidityValueRange(nLow, nHigh) : 0);
}

INT CDatabaseEngine::EnumTCTxtOolTableStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCTxtOolTableStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTCTxtOolTableStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCTxtOolTableStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTCTxtOolTableStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCTxtOolTableStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTCTxtOolTableStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCTxtOolTableStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCTxtOolTableStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCPreExeGroupID(LPCTSTR pszID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPreExeGroupID(pszID) : FALSE);
}

INT CDatabaseEngine::GetTCPreExeGroupIDLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPreExeGroupIDLength() : 0);
}

BOOL CDatabaseEngine::CheckTCPreExeGroupDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPreExeGroupDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCPreExeGroupDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPreExeGroupDescriptionLength() : 0);
}

INT CDatabaseEngine::EnumTCPreExeGroupStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCPreExeGroupStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTCPreExeGroupStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPreExeGroupStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTCPreExeGroupStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPreExeGroupStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTCPreExeGroupStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPreExeGroupStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCPreExeGroupStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPreExeGroupStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCPreExeGroupParameterTag(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPreExeGroupParameterTag(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTCPreExeGroupParameterTagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPreExeGroupParameterTagLength() : 0);
}

INT CDatabaseEngine::EnumTCPreExeGroupParameterInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCPreExeGroupParameterInterpretations(szInterpretations, nInterpretations) : 0);
}

BOOL CDatabaseEngine::CheckTCPreExeGroupParameterInterpretation(UINT nInterpretation) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPreExeGroupParameterInterpretation(nInterpretation) : FALSE);
}

INT CDatabaseEngine::GetTCPreExeGroupParameterInterpretationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPreExeGroupParameterInterpretationLength() : 0);
}

UINT CDatabaseEngine::TranslateTCPreExeGroupParameterInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPreExeGroupParameterInterpretation(pszInterpretation, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCPreExeGroupParameterInterpretation(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPreExeGroupParameterInterpretation(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCPreExeGroupParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCPreExeGroupParameterConstValue(nAttributes, pszValue) : FALSE);
}

INT CDatabaseEngine::GetTCPreExeGroupParameterConstValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCPreExeGroupParameterConstValueLength() : 0);
}

double CDatabaseEngine::TranslateTCPreExeGroupParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPreExeGroupParameterConstValue(nAttributes, pszValue) : 0.0);
}
CString CDatabaseEngine::TranslateTCPreExeGroupParameterConstValue(ULONGLONG nAttributes, double fValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCPreExeGroupParameterConstValue(nAttributes, fValue) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupID(LPCTSTR pszID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupID(pszID) : FALSE);
}

INT CDatabaseEngine::GetTCExeVerGroupIDLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupIDLength() : 0);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCExeVerGroupNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCExeVerGroupDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupStages(INT nStages) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupStages(nStages) : FALSE);
}

BOOL CDatabaseEngine::GetTCExeVerGroupStagesRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupStagesRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumTCExeVerGroupStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCExeVerGroupStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTCExeVerGroupStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTCExeVerGroupStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCExeVerGroupStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupParameterStageID(UINT nStageID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupParameterStageID(nStageID) : FALSE);
}

BOOL CDatabaseEngine::GetTCExeVerGroupParameterStageIDRange(UINT &nLow, UINT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupParameterStageIDRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupParameterStageTask(LPCTSTR pszTask) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupParameterStageTask(pszTask) : FALSE);
}

INT CDatabaseEngine::GetTCExeVerGroupParameterStageTaskLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupParameterStageTaskLength() : 0);
}

INT CDatabaseEngine::EnumTCExeVerGroupParameterStageTypes(CStringArray &szTypes, CUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCExeVerGroupParameterStageTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupParameterStageType(UINT nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupParameterStageType(nType) : FALSE);
}

INT CDatabaseEngine::GetTCExeVerGroupParameterStageTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupParameterStageTypeLength() : 0);
}

UINT CDatabaseEngine::TranslateTCExeVerGroupParameterStageType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupParameterStageType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCExeVerGroupParameterStageType(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupParameterStageType(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCExeVerGroupParameterStages(CStringArray &szStageIDs, CUIntArray &nStageIDs) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCExeVerGroupParameterStages(szStageIDs, nStageIDs) : 0);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupParameterStage(UINT nStageID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupParameterStage(nStageID) : FALSE);
}

INT CDatabaseEngine::GetTCExeVerGroupParameterStageLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupParameterStageLength() : 0);
}

UINT CDatabaseEngine::TranslateTCExeVerGroupParameterStage(LPCTSTR pszStageID, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupParameterStage(pszStageID, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCExeVerGroupParameterStage(UINT nStageID, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupParameterStage(nStageID, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupParameterTag(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupParameterTag(pszTag) : FALSE);
}

INT CDatabaseEngine::GetTCExeVerGroupParameterTagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupParameterTagLength() : 0);
}

INT CDatabaseEngine::EnumTCExeVerGroupParameterTypes(CStringArray &szTypes, CUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCExeVerGroupParameterTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupParameterType(UINT nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupParameterType(nType) : FALSE);
}

INT CDatabaseEngine::GetTCExeVerGroupParameterTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupParameterTypeLength() : 0);
}

UINT CDatabaseEngine::TranslateTCExeVerGroupParameterType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupParameterType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCExeVerGroupParameterType(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupParameterType(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCExeVerGroupParameterCheckings(CStringArray &szCheckings, CUIntArray &nCheckings) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCExeVerGroupParameterCheckings(szCheckings, nCheckings) : 0);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupParameterChecking(UINT nChecking) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupParameterChecking(nChecking) : FALSE);
}

INT CDatabaseEngine::GetTCExeVerGroupParameterCheckingLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupParameterCheckingLength() : 0);
}

UINT CDatabaseEngine::TranslateTCExeVerGroupParameterChecking(LPCTSTR pszChecking, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupParameterChecking(pszChecking, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCExeVerGroupParameterChecking(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupParameterChecking(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCExeVerGroupParameterInterpretations(CStringArray &szInterpretations, CUIntArray &nInterpretations) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCExeVerGroupParameterInterpretations(szInterpretations, nInterpretations) : 0);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupParameterInterpretation(UINT nInterpretation) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupParameterInterpretation(nInterpretation) : FALSE);
}

INT CDatabaseEngine::GetTCExeVerGroupParameterInterpretationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupParameterInterpretationLength() : 0);
}

UINT CDatabaseEngine::TranslateTCExeVerGroupParameterInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupParameterInterpretation(pszInterpretation, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCExeVerGroupParameterInterpretation(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupParameterInterpretation(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupParameterConstValue(nAttributes, pszValue) : FALSE);
}

INT CDatabaseEngine::GetTCExeVerGroupParameterConstValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupParameterConstValueLength() : 0);
}

double CDatabaseEngine::TranslateTCExeVerGroupParameterConstValue(ULONGLONG nAttributes, LPCTSTR pszValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupParameterConstValue(nAttributes, pszValue) : 0.0);
}
CString CDatabaseEngine::TranslateTCExeVerGroupParameterConstValue(ULONGLONG nAttributes, double fValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupParameterConstValue(nAttributes, fValue) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupParameterConstValueTolerance(ULONGLONG nAttributes, LPCTSTR pszDelta) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupParameterConstValueTolerance(nAttributes, pszDelta) : FALSE);
}

INT CDatabaseEngine::GetTCExeVerGroupParameterConstValueToleranceLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupParameterConstValueToleranceLength() : 0);
}

double CDatabaseEngine::TranslateTCExeVerGroupParameterConstValueTolerance(ULONGLONG nAttributes, LPCTSTR pszDelta) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupParameterConstValueTolerance(nAttributes, pszDelta) : 0.0);
}
CString CDatabaseEngine::TranslateTCExeVerGroupParameterConstValueTolerance(ULONGLONG nAttributes, double fDelta) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCExeVerGroupParameterConstValueTolerance(nAttributes, fDelta) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupParameterTimeWindowOffset(CONST CTimeSpan &tOffset) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupParameterTimeWindowOffset(tOffset) : FALSE);
}

BOOL CDatabaseEngine::GetTCExeVerGroupParameterTimeWindowOffsetRange(UINT &nLow, UINT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupParameterTimeWindowOffsetRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupParameterTimeWindowInterval(CONST CTimeSpan &tInterval) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupParameterTimeWindowInterval(tInterval) : FALSE);
}

BOOL CDatabaseEngine::GetTCExeVerGroupParameterTimeWindowIntervalRange(UINT &nLow, UINT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupParameterTimeWindowIntervalRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupParameterTimeWindowUncertainty(CONST CTimeSpan &tInterval) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupParameterTimeWindowUncertainty(tInterval) : FALSE);
}

BOOL CDatabaseEngine::GetTCExeVerGroupParameterTimeWindowUncertaintyRange(UINT &nLow, UINT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupParameterTimeWindowUncertaintyRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupParameterTimeWindowClosurePacketID(UINT nID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupParameterTimeWindowClosurePacketID(nID) : FALSE);
}

BOOL CDatabaseEngine::GetTCExeVerGroupParameterTimeWindowClosurePacketIDRange(UINT &nLow, UINT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupParameterTimeWindowClosurePacketIDRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCExeVerGroupParameterEventID(LPCTSTR pszEventID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCExeVerGroupParameterEventID(pszEventID) : FALSE);
}

INT CDatabaseEngine::GetTCExeVerGroupParameterEventIDLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCExeVerGroupParameterEventIDLength() : 0);
}

BOOL CDatabaseEngine::CheckTCParameterSetName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterSetName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCParameterSetNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterSetNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCParameterSetDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterSetDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCParameterSetDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterSetDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTCParameterSetTask(LPCTSTR pszTask) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterSetTask(pszTask) : FALSE);
}

INT CDatabaseEngine::GetTCParameterSetTaskLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterSetTaskLength() : 0);
}

INT CDatabaseEngine::EnumTCParameterSetTypes(CStringArray &szTypes, CUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterSetTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckTCParameterSetType(UINT nType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterSetType(nType) : FALSE);
}

INT CDatabaseEngine::GetTCParameterSetTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterSetTypeLength() : 0);
}

UINT CDatabaseEngine::TranslateTCParameterSetType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterSetType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCParameterSetType(UINT nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterSetType(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCParameterSetStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterSetStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckTCParameterSetStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterSetStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetTCParameterSetStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterSetStatusLength() : 0);
}

INT CDatabaseEngine::TranslateTCParameterSetStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterSetStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCParameterSetStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterSetStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCParameterValueSetName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterValueSetName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCParameterValueSetNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterValueSetNameLength() : 0);
}

BOOL CDatabaseEngine::CheckTCParameterValueSetDescription(LPCTSTR pszDescription) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterValueSetDescription(pszDescription) : FALSE);
}

INT CDatabaseEngine::GetTCParameterValueSetDescriptionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterValueSetDescriptionLength() : 0);
}

BOOL CDatabaseEngine::CheckTCParameterSetItemName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterSetItemName(pszName) : FALSE);
}

INT CDatabaseEngine::GetTCParameterSetItemNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterSetItemNameLength() : 0);
}

INT CDatabaseEngine::EnumTCParameterSetItemValueInterpretations(CStringArray &szInterpretations, CLongUIntArray &nInterpretations) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterSetItemValueInterpretations(szInterpretations, nInterpretations) : 0);
}

BOOL CDatabaseEngine::CheckTCParameterSetItemValueInterpretation(ULONGLONG nAttributes, ULONGLONG nFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterSetItemValueInterpretation(nAttributes, nFlag) : FALSE);
}

INT CDatabaseEngine::GetTCParameterSetItemValueInterpretationLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterSetItemValueInterpretationLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCParameterSetItemValueInterpretation(LPCTSTR pszInterpretation, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterSetItemValueInterpretation(pszInterpretation, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCParameterSetItemValueInterpretation(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterSetItemValueInterpretation(nAttributes, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumTCParameterSetItemValueRadixes(CStringArray &szRadixes, CLongUIntArray &nRadixes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTCParameterSetItemValueRadixes(szRadixes, nRadixes) : 0);
}

BOOL CDatabaseEngine::CheckTCParameterSetItemValueRadix(ULONGLONG nAttributes, ULONGLONG nRadix) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterSetItemValueRadix(nAttributes, nRadix) : FALSE);
}

INT CDatabaseEngine::GetTCParameterSetItemValueRadixLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterSetItemValueRadixLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCParameterSetItemValueRadix(LPCTSTR pszRadix, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterSetItemValueRadix(pszRadix, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateTCParameterSetItemValueRadix(ULONGLONG nAttributes, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterSetItemValueRadix(nAttributes, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCParameterSetItemValueBitOffset(INT nOffset) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterSetItemValueBitOffset(nOffset) : FALSE);
}

BOOL CDatabaseEngine::GetTCParameterSetItemValueBitOffsetRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterSetItemValueBitOffsetRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckTCParameterSetItemConstValue(ULONGLONG nAttributes, LPCTSTR pszConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterSetItemConstValue(nAttributes, pszConstValue) : FALSE);
}

INT CDatabaseEngine::GetTCParameterSetItemConstValueLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterSetItemConstValueLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateTCParameterSetItemConstValue(ULONGLONG nAttributes, INT nWidth, LPCTSTR pszConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterSetItemConstValue(nAttributes, nWidth, pszConstValue) : 0);
}
CString CDatabaseEngine::TranslateTCParameterSetItemConstValue(ULONGLONG nAttributes, INT nWidth, ULONGLONG nConstValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterSetItemConstValue(nAttributes, nWidth, nConstValue) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckTCParameterSetItemConstTimeType(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterSetItemConstTimeType(pszName) : FALSE);
}

BOOL CDatabaseEngine::CheckTCParameterSetItemConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTCParameterSetItemConstTime(nAttributes, pszConstTime) : FALSE);
}

INT CDatabaseEngine::GetTCParameterSetItemConstTimeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCParameterSetItemConstTimeLength() : 0);
}

CTimeTag CDatabaseEngine::TranslateTCParameterSetItemConstTime(ULONGLONG nAttributes, LPCTSTR pszConstTime) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTCParameterSetItemConstTime(nAttributes, pszConstTime) : 0);
}

BOOL CDatabaseEngine::CheckANDName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckANDName(pszName) : FALSE);
}

INT CDatabaseEngine::GetANDNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDNameLength() : 0);
}

BOOL CDatabaseEngine::CheckANDTitle(LPCTSTR pszTitle) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckANDTitle(pszTitle) : FALSE);
}

INT CDatabaseEngine::GetANDTitleLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDTitleLength() : 0);
}

INT CDatabaseEngine::EnumANDColumns(CStringArray &szColumns, CUIntArray &nColumns) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumANDColumns(szColumns, nColumns) : 0);
}

BOOL CDatabaseEngine::CheckANDColumns(LPCTSTR pszColumns) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckANDColumns(pszColumns) : FALSE);
}

INT CDatabaseEngine::GetANDColumnsLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDColumnsLength() : 0);
}

UINT CDatabaseEngine::TranslateANDColumns(LPCTSTR pszColumns, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDColumns(pszColumns, bDBMS) : 0);
}
BOOL CDatabaseEngine::TranslateANDColumns(LPCTSTR pszColumns, CUIntArray &nColumns, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDColumns(pszColumns, nColumns, bDBMS) : FALSE);
}
CString CDatabaseEngine::TranslateANDColumns(INT nColumns, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDColumns(nColumns, bDBMS) : EMPTYSTRING);
}
CString CDatabaseEngine::TranslateANDColumns(CONST CUIntArray &nColumns, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDColumns(nColumns, bDBMS) : EMPTYSTRING);
}

UINT CDatabaseEngine::TranslateANDColumn(LPCTSTR pszColumn, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDColumn(pszColumn, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateANDColumn(UINT nColumn, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDColumn(nColumn, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumANDStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumANDStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckANDStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckANDStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetANDStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDStatusLength() : 0);
}

INT CDatabaseEngine::TranslateANDStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateANDStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckANDParameterTag(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckANDParameterTag(pszTag) : FALSE);
}

INT CDatabaseEngine::GetANDParameterTagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDParameterTagLength() : 0);
}

BOOL CDatabaseEngine::CheckANDParameterComment(LPCTSTR pszComment) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckANDParameterComment(pszComment) : FALSE);
}

INT CDatabaseEngine::GetANDParameterCommentLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDParameterCommentLength() : 0);
}

CString CDatabaseEngine::TranslateANDParameterComment(LPCTSTR pszComment, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDParameterComment(pszComment, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckANDParameterRow(INT nRow) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckANDParameterRow(nRow) : FALSE);
}

BOOL CDatabaseEngine::GetANDParameterRowRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDParameterRowRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckANDParameterCol(INT nCol) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckANDParameterCol(nCol) : FALSE);
}

BOOL CDatabaseEngine::GetANDParameterColRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDParameterColRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumANDParameterModes(CStringArray &szModes, CLongUIntArray &nModes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumANDParameterModes(szModes, nModes) : 0);
}

BOOL CDatabaseEngine::CheckANDParameterMode(LPCTSTR pszParameter, LPCTSTR pszMode) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckANDParameterMode(pszParameter, pszMode) : FALSE);
}

INT CDatabaseEngine::GetANDParameterModeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDParameterModeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateANDParameterMode(LPCTSTR pszMode, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDParameterMode(pszMode, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateANDParameterMode(ULONGLONG nMode, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDParameterMode(nMode, bDBMS) : EMPTYSTRING);
}

ULONGLONG CDatabaseEngine::TranslateANDParameterAttributes(ULONGLONG nMode, ULONGLONG nAttributes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDParameterAttributes(nMode, nAttributes) : 0);
}

INT CDatabaseEngine::EnumANDParameterDisplayFlags(CStringArray &szFlags, CByteArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumANDParameterDisplayFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckANDParameterDisplayFlag(LPCTSTR pszParameter, LPCTSTR pszFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckANDParameterDisplayFlag(pszParameter, pszFlag) : FALSE);
}

INT CDatabaseEngine::GetANDParameterDisplayFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDParameterDisplayFlagLength() : 0);
}

INT CDatabaseEngine::TranslateANDParameterDisplayFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDParameterDisplayFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateANDParameterDisplayFlag(INT nFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDParameterDisplayFlag(nFlag, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckANDParameterOccurrence(LPCTSTR pszParameter, INT nOccurrence) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckANDParameterOccurrence(pszParameter, nOccurrence) : FALSE);
}

BOOL CDatabaseEngine::GetANDParameterOccurrenceRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDParameterOccurrenceRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckANDParameterColor(INT nColor) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckANDParameterColor(nColor) : FALSE);
}

BOOL CDatabaseEngine::CheckANDParameterDigits(LPCTSTR pszParameter, INT nDigits) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckANDParameterDigits(pszParameter, nDigits) : FALSE);
}

BOOL CDatabaseEngine::GetANDParameterDigitsRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDParameterDigitsRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumANDParameterAlignments(CStringArray &szAlignments, CUIntArray &nAlignments) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumANDParameterAlignments(szAlignments, nAlignments) : 0);
}

BOOL CDatabaseEngine::CheckANDParameterAlignment(LPCTSTR pszAlignment) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckANDParameterAlignment(pszAlignment) : FALSE);
}

INT CDatabaseEngine::GetANDParameterAlignmentLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDParameterAlignmentLength() : 0);
}

UINT CDatabaseEngine::TranslateANDParameterAlignment(LPCTSTR pszAlignment, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDParameterAlignment(pszAlignment, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateANDParameterAlignment(UINT nAlignment, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateANDParameterAlignment(nAlignment, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckGRDName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDName(pszName) : FALSE);
}

INT CDatabaseEngine::GetGRDNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDNameLength() : 0);
}

BOOL CDatabaseEngine::CheckGRDTitle(LPCTSTR pszTitle) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDTitle(pszTitle) : FALSE);
}

INT CDatabaseEngine::GetGRDTitleLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDTitleLength() : 0);
}

INT CDatabaseEngine::EnumGRDColumns(CStringArray &szColumns, CUIntArray &nColumns) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumGRDColumns(szColumns, nColumns) : 0);
}

BOOL CDatabaseEngine::CheckGRDColumns(INT nColumns) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDColumns(nColumns) : FALSE);
}

BOOL CDatabaseEngine::TranslateGRDColumns(LPCTSTR pszColumns, CUIntArray &nColumns, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDColumns(pszColumns, nColumns, bDBMS) : FALSE);
}
CString CDatabaseEngine::TranslateGRDColumns(CONST CUIntArray &nColumns, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDColumns(nColumns, bDBMS) : EMPTYSTRING);
}

UINT CDatabaseEngine::TranslateGRDColumn(LPCTSTR pszColumn, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDColumn(pszColumn, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateGRDColumn(UINT nColumn, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDColumn(nColumn, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumGRDTypes(CStringArray &szTypes, CUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumGRDTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckGRDType(LPCTSTR pszType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDType(pszType) : FALSE);
}

INT CDatabaseEngine::GetGRDTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDTypeLength() : 0);
}

INT CDatabaseEngine::TranslateGRDType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateGRDType(INT nType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDType(nType, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumGRDPlotTypes(CStringArray &szTypes, CUIntArray &nTypes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumGRDPlotTypes(szTypes, nTypes) : 0);
}

BOOL CDatabaseEngine::CheckGRDPlotType(LPCTSTR pszType, LPCTSTR pszPlotType) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDPlotType(pszType, pszPlotType) : FALSE);
}

INT CDatabaseEngine::GetGRDPlotTypeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDPlotTypeLength() : 0);
}

INT CDatabaseEngine::TranslateGRDPlotType(LPCTSTR pszType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDPlotType(pszType, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateGRDPlotType(INT nType, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDPlotType(nType, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumGRDPlotModes(CStringArray &szModes, CUIntArray &nModes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumGRDPlotModes(szModes, nModes) : 0);
}

BOOL CDatabaseEngine::CheckGRDPlotMode(LPCTSTR pszType, LPCTSTR pszMode) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDPlotMode(pszType, pszMode) : FALSE);
}

INT CDatabaseEngine::GetGRDPlotModeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDPlotModeLength() : 0);
}

INT CDatabaseEngine::TranslateGRDPlotMode(LPCTSTR pszMode, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDPlotMode(pszMode, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateGRDPlotMode(INT nMode, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDPlotMode(nMode, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckGRDPlotWidth(INT nWidth) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDPlotWidth(nWidth) : FALSE);
}

BOOL CDatabaseEngine::GetGRDPlotWidthRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDPlotWidthRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDPlotHeight(INT nHeight) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDPlotHeight(nHeight) : FALSE);
}

BOOL CDatabaseEngine::GetGRDPlotHeightRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDPlotHeightRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDXGrids(LPCTSTR pszType, INT nXGrids) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDXGrids(pszType, nXGrids) : FALSE);
}

BOOL CDatabaseEngine::GetGRDXGridsRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDXGridsRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDYGrids(LPCTSTR pszType, INT nYGrids) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDYGrids(pszType, nYGrids) : FALSE);
}

BOOL CDatabaseEngine::GetGRDYGridsRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDYGridsRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDXTicks(INT nXTicks) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDXTicks(nXTicks) : FALSE);
}

BOOL CDatabaseEngine::GetGRDXTicksRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDXTicksRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDYTicks(INT nYTicks) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDYTicks(nYTicks) : FALSE);
}

BOOL CDatabaseEngine::GetGRDYTicksRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDYTicksRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDGridsWidth(INT nWidth) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDGridsWidth(nWidth) : FALSE);
}

BOOL CDatabaseEngine::GetGRDGridsWidthRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDGridsWidthRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDTicksWidth(INT nWidth) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDTicksWidth(nWidth) : FALSE);
}

BOOL CDatabaseEngine::GetGRDTicksWidthRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDTicksWidthRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumGRDAxisColors(CStringArray &szColors, CUIntArray &nColors) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumGRDAxisColors(szColors, nColors) : 0);
}

BOOL CDatabaseEngine::CheckGRDAxisColor(INT nColor) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDAxisColor(nColor) : FALSE);
}

INT CDatabaseEngine::GetGRDAxisColorLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDAxisColorLength() : 0);
}

COLORREF CDatabaseEngine::TranslateGRDAxisColor(LPCTSTR pszColor, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDAxisColor(pszColor, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateGRDAxisColor(COLORREF nColor, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDAxisColor(nColor, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckGRDGridsColor(INT nGridsColor) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDGridsColor(nGridsColor) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDTicksColor(INT nTicksColor) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDTicksColor(nTicksColor) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDBackgroundColor(INT nBackgroundColor) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDBackgroundColor(nBackgroundColor) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDLabelColor(INT nLabelColor) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDLabelColor(nLabelColor) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDDurationDays(INT nDays, INT nHours, INT nMinutes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDDurationDays(nDays, nHours, nMinutes) : FALSE);
}

BOOL CDatabaseEngine::GetGRDDurationDaysRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDDurationDaysRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDDurationHours(INT nDays, INT nHours, INT nMinutes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDDurationHours(nDays, nHours, nMinutes) : FALSE);
}

BOOL CDatabaseEngine::GetGRDDurationHoursRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDDurationHoursRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDDurationMinutes(INT nDays, INT nHours, INT nMinutes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDDurationMinutes(nDays, nHours, nMinutes) : FALSE);
}

BOOL CDatabaseEngine::GetGRDDurationMinutesRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDDurationMinutesRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDInterval(LPCTSTR pszMode, INT nDays, INT nHours, INT nMinutes, INT nInterval) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDInterval(pszMode, nDays, nHours, nMinutes, nInterval) : FALSE);
}

BOOL CDatabaseEngine::GetGRDIntervalRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDIntervalRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDUpdateInterval(INT nDays, INT nHours, INT nMinutes, INT nInterval) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDUpdateInterval(nDays, nHours, nMinutes, nInterval) : FALSE);
}

BOOL CDatabaseEngine::GetGRDUpdateIntervalRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDUpdateIntervalRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumGRDHardcopyModes(CStringArray &szModes, CByteArray &nModes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumGRDHardcopyModes(szModes, nModes) : 0);
}

BOOL CDatabaseEngine::CheckGRDHardcopyMode(LPCTSTR pszMode) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDHardcopyMode(pszMode) : FALSE);
}

INT CDatabaseEngine::GetGRDHardcopyModeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDHardcopyModeLength() : 0);
}

INT CDatabaseEngine::TranslateGRDHardcopyMode(LPCTSTR pszMode, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDHardcopyMode(pszMode, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateGRDHardcopyMode(INT nMode, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDHardcopyMode(nMode, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckGRDParameters(LPCTSTR pszType, INT nParameters) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameters(pszType, nParameters) : FALSE);
}

BOOL CDatabaseEngine::GetGRDParametersRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDParametersRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumGRDStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumGRDStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckGRDStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetGRDStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDStatusLength() : 0);
}

INT CDatabaseEngine::TranslateGRDStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateGRDStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDStatus(nStatus, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckGRDParameterTag(LPCTSTR pszTag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameterTag(pszTag) : FALSE);
}

INT CDatabaseEngine::GetGRDParameterTagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDParameterTagLength() : 0);
}

BOOL CDatabaseEngine::CheckGRDParameterComment(LPCTSTR pszComment) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameterComment(pszComment) : FALSE);
}

INT CDatabaseEngine::GetGRDParameterCommentLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDParameterCommentLength() : 0);
}

INT CDatabaseEngine::EnumGRDParameterPositions(CStringArray &szPositions, CUIntArray &nPositions) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumGRDParameterPositions(szPositions, nPositions) : 0);
}

BOOL CDatabaseEngine::CheckGRDParameterPosition(INT nPosition) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameterPosition(nPosition) : FALSE);
}

BOOL CDatabaseEngine::GetGRDParameterPositionRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDParameterPositionRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::GetGRDParameterPositionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDParameterPositionLength() : 0);
}

INT CDatabaseEngine::TranslateGRDParameterPosition(LPCTSTR pszPosition, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDParameterPosition(pszPosition, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateGRDParameterPosition(INT nPosition, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDParameterPosition(nPosition, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumGRDParameterModes(CStringArray &szModes, CLongUIntArray &nModes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumGRDParameterModes(szModes, nModes) : 0);
}

BOOL CDatabaseEngine::CheckGRDParameterMode(LPCTSTR pszMode) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameterMode(pszMode) : FALSE);
}

INT CDatabaseEngine::GetGRDParameterModeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDParameterModeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslateGRDParameterMode(LPCTSTR pszMode, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDParameterMode(pszMode, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateGRDParameterMode(ULONGLONG nMode, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDParameterMode(nMode, bDBMS) : EMPTYSTRING);
}

ULONGLONG CDatabaseEngine::TranslateGRDParameterAttributes(ULONGLONG nMode, ULONGLONG nAttributes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDParameterAttributes(nMode, nAttributes) : 0);
}

BOOL CDatabaseEngine::CheckGRDParameterOccurrence(INT nOccurrence) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameterOccurrence(nOccurrence) : FALSE);
}

BOOL CDatabaseEngine::GetGRDParameterOccurrenceRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDParameterOccurrenceRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumGRDParameterColors(CStringArray &szColors, CUIntArray &nColors) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumGRDParameterColors(szColors, nColors) : 0);
}

BOOL CDatabaseEngine::CheckGRDParameterColor(INT nColor) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameterColor(nColor) : FALSE);
}

INT CDatabaseEngine::GetGRDParameterColorLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDParameterColorLength() : 0);
}

INT CDatabaseEngine::TranslateGRDParameterColor(LPCTSTR pszColor, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDParameterColor(pszColor, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateGRDParameterColor(INT nColor, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDParameterColor(nColor, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckGRDParameterDigits(INT nDigits) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameterDigits(nDigits) : FALSE);
}

BOOL CDatabaseEngine::GetGRDParameterDigitsRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDParameterDigitsRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumGRDParameterLineStyles(CStringArray &szStyles, CUIntArray &nStyles) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumGRDParameterLineStyles(szStyles, nStyles) : 0);
}

BOOL CDatabaseEngine::CheckGRDParameterLineStyle(LPCTSTR pszStyle) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameterLineStyle(pszStyle) : FALSE);
}

INT CDatabaseEngine::GetGRDParameterLineStyleLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDParameterLineStyleLength() : 0);
}

INT CDatabaseEngine::TranslateGRDParameterLineStyle(LPCTSTR pszStyle, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDParameterLineStyle(pszStyle, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateGRDParameterLineStyle(INT nStyle, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDParameterLineStyle(nStyle, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumGRDParameterLineSymbols(CStringArray &szSymbols, CUIntArray &nSymbols) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumGRDParameterLineSymbols(szSymbols, nSymbols) : 0);
}

BOOL CDatabaseEngine::CheckGRDParameterLineSymbol(LPCTSTR pszSymbol) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameterLineSymbol(pszSymbol) : FALSE);
}

INT CDatabaseEngine::GetGRDParameterLineSymbolLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDParameterLineSymbolLength() : 0);
}

INT CDatabaseEngine::TranslateGRDParameterLineSymbol(LPCTSTR pszSymbol, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDParameterLineSymbol(pszSymbol, bDBMS) : 0);
}
CString CDatabaseEngine::TranslateGRDParameterLineSymbol(INT nSymbol, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateGRDParameterLineSymbol(nSymbol, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckGRDParameterLineWidth(INT nWidth) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameterLineWidth(nWidth) : FALSE);
}

BOOL CDatabaseEngine::GetGRDParameterLineWidthRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDParameterLineWidthRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckGRDParameterMinimum(LPCTSTR pszMinimum) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameterMinimum(pszMinimum) : FALSE);
}
BOOL CDatabaseEngine::CheckGRDParameterMinimum(double fMinimum) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameterMinimum(fMinimum) : FALSE);
}

INT CDatabaseEngine::GetGRDParameterMinimumLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDParameterMinimumLength() : 0);
}

BOOL CDatabaseEngine::CheckGRDParameterMaximum(LPCTSTR pszMaximum) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameterMaximum(pszMaximum) : FALSE);
}
BOOL CDatabaseEngine::CheckGRDParameterMaximum(double fMaximum) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameterMaximum(fMaximum) : FALSE);
}

INT CDatabaseEngine::GetGRDParameterMaximumLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDParameterMaximumLength() : 0);
}

BOOL CDatabaseEngine::CheckGRDParameterRange(double fMinimum, double fMaximum) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckGRDParameterRange(fMinimum, fMaximum) : FALSE);
}

BOOL CDatabaseEngine::CheckPODName(LPCTSTR pszName) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODName(pszName) : FALSE);
}

INT CDatabaseEngine::GetPODNameLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODNameLength() : 0);
}

BOOL CDatabaseEngine::CheckPODTitle(LPCTSTR pszTitle) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODTitle(pszTitle) : FALSE);
}

INT CDatabaseEngine::GetPODTitleLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODTitleLength() : 0);
}

INT CDatabaseEngine::EnumPODColumns(CStringArray &szColumns, CUIntArray &nColumns) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumPODColumns(szColumns, nColumns) : 0);
}

BOOL CDatabaseEngine::CheckPODColumns(INT nColumns) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODColumns(nColumns) : FALSE);
}

BOOL CDatabaseEngine::TranslatePODColumns(LPCTSTR pszColumns, CUIntArray &nColumns, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODColumns(pszColumns, nColumns, bDBMS) : FALSE);
}
CString CDatabaseEngine::TranslatePODColumns(CONST CUIntArray &nColumns, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODColumns(nColumns, bDBMS) : EMPTYSTRING);
}

UINT CDatabaseEngine::TranslatePODColumn(LPCTSTR pszColumn, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODColumn(pszColumn, bDBMS) : 0);
}
CString CDatabaseEngine::TranslatePODColumn(UINT nColumn, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODColumn(nColumn, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumPODForegroundColors(CStringArray &szColors, CUIntArray &nColors) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumPODForegroundColors(szColors, nColors) : 0);
}

BOOL CDatabaseEngine::CheckPODForegroundColor(INT nColor) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODForegroundColor(nColor) : FALSE);
}

INT CDatabaseEngine::GetPODForegroundColorLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODForegroundColorLength() : 0);
}

INT CDatabaseEngine::TranslatePODForegroundColor(LPCTSTR pszColor, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODForegroundColor(pszColor, bDBMS) : 0);
}
CString CDatabaseEngine::TranslatePODForegroundColor(INT nColor, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODForegroundColor(nColor, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumPODBackgroundColors(CStringArray &szColors, CUIntArray &nColors) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumPODBackgroundColors(szColors, nColors) : 0);
}

BOOL CDatabaseEngine::CheckPODBackgroundColor(INT nColor) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODBackgroundColor(nColor) : FALSE);
}

INT CDatabaseEngine::GetPODBackgroundColorLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODBackgroundColorLength() : 0);
}

INT CDatabaseEngine::TranslatePODBackgroundColor(LPCTSTR pszColor, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODBackgroundColor(pszColor, bDBMS) : 0);
}
CString CDatabaseEngine::TranslatePODBackgroundColor(INT nColor, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODBackgroundColor(nColor, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumPODStatus(CStringArray &szStatus, CUIntArray &nStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumPODStatus(szStatus, nStatus) : 0);
}

BOOL CDatabaseEngine::CheckPODStatus(LPCTSTR pszStatus) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODStatus(pszStatus) : FALSE);
}

INT CDatabaseEngine::GetPODStatusLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODStatusLength() : 0);
}

INT CDatabaseEngine::TranslatePODStatus(LPCTSTR pszStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODStatus(pszStatus, bDBMS) : 0);
}
CString CDatabaseEngine::TranslatePODStatus(INT nStatus, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODStatus(nStatus, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumPODExpressionStack(CStringArray &szExpressions, CUIntArray &nExpressions) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumPODExpressionStack(szExpressions, nExpressions) : 0);
}

BOOL CDatabaseEngine::CheckPODExpressionStack(LPCTSTR pszStack) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODExpressionStack(pszStack) : FALSE);
}

INT CDatabaseEngine::GetPODExpressionStackLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODExpressionStackLength() : 0);
}

INT CDatabaseEngine::TranslatePODExpressionStack(LPCTSTR pszStack, CStringArray &szStack, CByteArray &bFunctions, CByteArray &bOperators, CByteArray &bParameters, CByteArray &bNumbers) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODExpressionStack(pszStack, szStack, bFunctions, bOperators, bParameters, bNumbers) : 0);
}
CString CDatabaseEngine::TranslatePODExpressionStack(CONST CStringArray &szStack) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODExpressionStack(szStack) : EMPTYSTRING);
}

BOOL CDatabaseEngine::TranslatePODExpressionStackElement(LPCTSTR pszElement, CPODLayoutExpression *pElement) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODExpressionStackElement(pszElement, pElement) : FALSE);
}

BOOL CDatabaseEngine::CheckPODExpressionStackElementComment(LPCTSTR pszComment) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODExpressionStackElementComment(pszComment) : FALSE);
}

INT CDatabaseEngine::GetPODExpressionStackElementCommentLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODExpressionStackElementCommentLength() : 0);
}

BOOL CDatabaseEngine::CheckPODExpressionStackElementColor(INT nColor) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODExpressionStackElementColor(nColor) : FALSE);
}

BOOL CDatabaseEngine::CheckPODParameters(LPCTSTR pszParameters) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODParameters(pszParameters) : FALSE);
}

INT CDatabaseEngine::GetPODParametersListLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODParametersListLength() : 0);
}

INT CDatabaseEngine::GetPODParameterTagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODParameterTagLength() : 0);
}

INT CDatabaseEngine::TranslatePODParameters(LPCTSTR pszParameters, CStringArray &szParameters) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODParameters(pszParameters, szParameters) : 0);
}
CString CDatabaseEngine::TranslatePODParameters(CONST CStringArray &szParameters) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODParameters(szParameters) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckPODParameterSample(INT nSample) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODParameterSample(nSample) : FALSE);
}

BOOL CDatabaseEngine::GetPODParameterSampleRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODParameterSampleRange(nLow, nHigh) : FALSE);
}

BOOL CDatabaseEngine::CheckPODParameterPosition(INT nPosition) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODParameterPosition(nPosition) : FALSE);
}

BOOL CDatabaseEngine::GetPODParameterPositionRange(INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODParameterPositionRange(nLow, nHigh) : FALSE);
}

INT CDatabaseEngine::EnumPODParameterModes(CStringArray &szModes, CLongUIntArray &nModes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumPODParameterModes(szModes, nModes) : 0);
}

BOOL CDatabaseEngine::CheckPODParameterMode(LPCTSTR pszMode) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODParameterMode(pszMode) : FALSE);
}

INT CDatabaseEngine::GetPODParameterModeLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODParameterModeLength() : 0);
}

ULONGLONG CDatabaseEngine::TranslatePODParameterMode(LPCTSTR pszMode, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODParameterMode(pszMode, bDBMS) : 0);
}
CString CDatabaseEngine::TranslatePODParameterMode(ULONGLONG nMode, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODParameterMode(nMode, bDBMS) : EMPTYSTRING);
}

ULONGLONG CDatabaseEngine::TranslatePODParameterAttributes(ULONGLONG nMode, ULONGLONG nAttributes) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODParameterAttributes(nMode, nAttributes) : 0);
}

INT CDatabaseEngine::EnumPODParameterUpdateWhenScrollFlags(CStringArray &szFlags, CUIntArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumPODParameterUpdateWhenScrollFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckPODParameterUpdateWhenScrollFlag(LPCTSTR pszFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODParameterUpdateWhenScrollFlag(pszFlag) : FALSE);
}

INT CDatabaseEngine::GetPODParameterUpdateWhenScrollFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODParameterUpdateWhenScrollFlagLength() : 0);
}

INT CDatabaseEngine::TranslatePODParameterUpdateWhenScrollFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODParameterUpdateWhenScrollFlag(pszFlag, bDBMS) : 0);
}
CString CDatabaseEngine::TranslatePODParameterUpdateWhenScrollFlag(INT nFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODParameterUpdateWhenScrollFlag(nFlag, bDBMS) : EMPTYSTRING);
}

INT CDatabaseEngine::EnumPODParameterDisplayFlags(CStringArray &szFlags, CByteArray &nFlags) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumPODParameterDisplayFlags(szFlags, nFlags) : 0);
}

BOOL CDatabaseEngine::CheckPODParameterDisplayFlag(LPCTSTR pszFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODParameterDisplayFlag(pszFlag) : FALSE);
}

INT CDatabaseEngine::GetPODParameterDisplayFlagLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODParameterDisplayFlagLength() : 0);
}

BOOL CDatabaseEngine::TranslatePODParameterDisplayFlag(LPCTSTR pszFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODParameterDisplayFlag(pszFlag, bDBMS) : FALSE);
}
CString CDatabaseEngine::TranslatePODParameterDisplayFlag(BOOL bFlag, BOOL bDBMS) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODParameterDisplayFlag(bFlag, bDBMS) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckPODParametersColor(INT nColor) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODParametersColor(nColor) : FALSE);
}

INT CDatabaseEngine::EnumPODFunctions(CStringArray &szFunctions, CUIntArray &nFunctions) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumPODFunctions(szFunctions, nFunctions) : 0);
}

BOOL CDatabaseEngine::CheckPODFunctions(LPCTSTR pszFunctions) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODFunctions(pszFunctions) : FALSE);
}

INT CDatabaseEngine::GetPODFunctionsListLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODFunctionsListLength() : 0);
}

INT CDatabaseEngine::GetPODFunctionLength() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODFunctionLength() : 0);
}

INT CDatabaseEngine::TranslatePODFunctions(LPCTSTR pszFunctions, CStringArray &szFunctions) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODFunctions(pszFunctions, szFunctions) : 0);
}
CString CDatabaseEngine::TranslatePODFunctions(CONST CStringArray &szFunctions) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslatePODFunctions(szFunctions) : EMPTYSTRING);
}

BOOL CDatabaseEngine::CheckPODFunctionsColor(INT nColor) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckPODFunctionsColor(nColor) : FALSE);
}

BOOL CDatabaseEngine::LoadTMParameterDerivationCodeFromFile(LPCTSTR pszTag, CString &szCode) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->LoadTMParameterDerivationCodeFromFile(pszTag, szCode) : FALSE);
}
BOOL CDatabaseEngine::LoadTMParameterDerivationCodeFromFile(CONST CDatabaseTMParameter *pDatabaseTMParameter, CString &szCode) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->LoadTMParameterDerivationCodeFromFile(pDatabaseTMParameter, szCode) : FALSE);
}

BOOL CDatabaseEngine::ConstructCustomDerivationCode(CONST CBinaryDatabase *pDatabase, CString &szStaticProcedures, CString &szInitCode, CString &szExecCode) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->ConstructCustomDerivationCode(pDatabase, szStaticProcedures, szInitCode, szExecCode) : FALSE);
}

INT CDatabaseEngine::GetANDIDColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDIDColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetANDIDColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDIDColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetANDDescriptionColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDDescriptionColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetANDDescriptionColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDDescriptionColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetANDValueColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDValueColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetANDValueColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDValueColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetANDUnitColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDUnitColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetANDUnitColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDUnitColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetANDChangeTMUnitColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDChangeTMUnitColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetANDChangeTMUnitColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDChangeTMUnitColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetANDUpdateTMUnitColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDUpdateTMUnitColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetANDUpdateTMUnitColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDUpdateTMUnitColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetANDChangeTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDChangeTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetANDChangeTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDChangeTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetANDUpdateTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDUpdateTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetANDUpdateTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDUpdateTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetANDExpectedValuesColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDExpectedValuesColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetANDExpectedValuesColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetANDExpectedValuesColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetGRDIDColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDIDColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetGRDIDColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDIDColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetGRDDescriptionColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDDescriptionColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetGRDDescriptionColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDDescriptionColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetGRDValueColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDValueColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetGRDValueColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDValueColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetGRDUnitColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDUnitColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetGRDUnitColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDUnitColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetGRDRangeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDRangeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetGRDRangeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDRangeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetGRDLineColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDLineColumnCharWidth() : 0);
}

INT CDatabaseEngine::GetGRDChangeTMUnitColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDChangeTMUnitColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetGRDChangeTMUnitColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDChangeTMUnitColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetGRDUpdateTMUnitColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDUpdateTMUnitColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetGRDUpdateTMUnitColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDUpdateTMUnitColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetGRDChangeTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDChangeTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetGRDChangeTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDChangeTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetGRDUpdateTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDUpdateTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetGRDUpdateTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetGRDUpdateTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetOOLIDColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOOLIDColumnCharWidth() : 0);
}

INT CDatabaseEngine::GetOOLDescriptionColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOOLDescriptionColumnCharWidth() : 0);
}

INT CDatabaseEngine::GetOOLValueColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOOLValueColumnCharWidth() : 0);
}

INT CDatabaseEngine::GetOOLLimitColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOOLLimitColumnCharWidth() : 0);
}

INT CDatabaseEngine::GetOOLUnitColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOOLUnitColumnCharWidth() : 0);
}

INT CDatabaseEngine::GetOOLTypeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOOLTypeColumnCharWidth() : 0);
}

INT CDatabaseEngine::GetOOLTMTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOOLTMTimeColumnCharWidth() : 0);
}

INT CDatabaseEngine::GetOOLTMUnitColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetOOLTMUnitColumnCharWidth() : 0);
}

INT CDatabaseEngine::GetPODIDColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODIDColumnCharWidth() : 0);
}

INT CDatabaseEngine::GetPODDescriptionColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODDescriptionColumnCharWidth() : 0);
}

INT CDatabaseEngine::GetPODValueColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODValueColumnCharWidth() : 0);
}

INT CDatabaseEngine::GetPODUnitColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODUnitColumnCharWidth() : 0);
}

INT CDatabaseEngine::GetPODTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetPODFunctionsColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODFunctionsColor() : GetSysColor(COLOR_WINDOW));
}

COLORREF CDatabaseEngine::GetPODParametersColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODParametersColor() : GetSysColor(COLOR_WINDOW));
}

COLORREF CDatabaseEngine::GetPODExpressionColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPODExpressionColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTPEPIDColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPIDColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTPEPIDColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPIDColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTPEPDescriptionColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPDescriptionColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTPEPDescriptionColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPDescriptionColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTPEPValueColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPValueColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTPEPValueColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPValueColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTPEPUnitColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPUnitColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTPEPUnitColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPUnitColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTPEPChangeTMUnitColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPChangeTMUnitColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTPEPChangeTMUnitColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPChangeTMUnitColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTPEPUpdateTMUnitColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPUpdateTMUnitColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTPEPUpdateTMUnitColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPUpdateTMUnitColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTPEPChangeTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPChangeTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTPEPChangeTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPChangeTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTPEPUpdateTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPUpdateTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTPEPUpdateTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTPEPUpdateTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackNumberColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackNumberColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackNumberColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackNumberColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackNameColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackNameColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackNameColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackNameColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackDescriptionColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackDescriptionColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackDescriptionColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackDescriptionColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackCategoryColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackCategoryColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackCategoryColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackCategoryColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackSubSystemColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackSubSystemColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackSubSystemColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackSubSystemColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackArgumentsColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackArgumentsColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackArgumentsColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackArgumentsColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackFlagsColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackFlagsColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackFlagsColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackFlagsColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackTCPacketColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackTCPacketColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackTCPacketColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackTCPacketColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackDispatchTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackDispatchTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackDispatchTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackDispatchTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackReleaseTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackReleaseTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackReleaseTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackReleaseTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackReleaseTimeOffsetColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackReleaseTimeOffsetColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackReleaseTimeOffsetColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackReleaseTimeOffsetColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackExecutionTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackExecutionTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackExcutionTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackExcutionTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackExecutionTimeOffsetColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackExecutionTimeOffsetColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackExcutionTimeOffsetColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackExcutionTimeOffsetColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackAuthorizationColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackAuthorizationColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackAuthorizationColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackAuthorizationColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackPTVTimeWindowColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackPTVTimeWindowColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackPTVTimeWindowColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackPTVTimeWindowColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackPTVChecksColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackPTVChecksColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackPTVChecksColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackPTVChecksColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackPTVResultColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackPTVResultColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackPTVResultColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackPTVResultColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackPEVChecksColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackPEVChecksColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackPEVChecksColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackPEVChecksColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackPEVResultColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackPEVResultColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackPEVResultColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackPEVResultColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackCEVTimeWindowColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackCEVTimeWindowColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackCEVTimeWindowColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackCEVTimeWindowColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackCEVChecksColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackCEVChecksColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackCEVChecksColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackCEVChecksColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCManualStackStatusColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackStatusColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCManualStackStatusColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCManualStackStatusColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackNumberColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackNumberColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackNumberColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackNumberColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackNameColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackNameColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackNameColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackNameColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackDescriptionColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackDescriptionColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackDescriptionColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackDescriptionColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackCategoryColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackCategoryColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackCategoryColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackCategoryColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackSubSystemColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackSubSystemColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackSubSystemColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackSubSystemColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackArgumentsColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackArgumentsColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackArgumentsColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackArgumentsColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackFlagsColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackFlagsColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackFlagsColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackFlagsColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackTCPacketColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackTCPacketColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackTCPacketColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackTCPacketColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackDispatchTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackDispatchTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackDispatchTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackDispatchTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackReleaseTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackReleaseTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackReleaseTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackReleaseTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackReleaseTimeOffsetColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackReleaseTimeOffsetColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackReleaseTimeOffsetColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackReleaseTimeOffsetColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackTransmissionTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackTransmissionTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackTransmissionTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackTransmissionTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackExecutionTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackExecutionTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackExcutionTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackExcutionTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackExecutionTimeOffsetColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackExecutionTimeOffsetColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackExcutionTimeOffsetColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackExcutionTimeOffsetColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackAuthorizationColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackAuthorizationColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackAuthorizationColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackAuthorizationColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackPTVTimeWindowColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackPTVTimeWindowColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackPTVTimeWindowColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackPTVTimeWindowColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackPTVChecksColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackPTVChecksColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackPTVChecksColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackPTVChecksColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackPTVResultColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackPTVResultColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackPTVResultColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackPTVResultColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackPEVChecksColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackPEVChecksColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackPEVChecksColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackPEVChecksColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackPEVResultColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackPEVResultColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackPEVResultColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackPEVResultColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackCEVTimeWindowColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackCEVTimeWindowColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackCEVTimeWindowColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackCEVTimeWindowColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackCEVChecksColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackCEVChecksColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackCEVChecksColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackCEVChecksColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackCEVResultColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackCEVResultColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackCEVResultColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackCEVResultColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCAutomaticStackStatusColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackStatusColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCAutomaticStackStatusColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCAutomaticStackStatusColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorNameColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorNameColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorNameColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorNameColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorDescriptionColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorDescriptionColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorDescriptionColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorDescriptionColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorCommentsColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorCommentsColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorCommentsColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorCommentsColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorAuthorColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorAuthorColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorAuthorColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorAuthorColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorCreationTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorCreationTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorCreationTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorCreationTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorModificationTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorModificationTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorModificationTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorModificationTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorVerificationStatusColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorVerificationStatusColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorVerificationStatusColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorVerificationStatusColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorNumberOfThreadsColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorNumberOfThreadsColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorNumberOfThreadsColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorNumberOfThreadsColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorArgumentsColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorArgumentsColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorArgumentsColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorArgumentsColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorTriggerTypeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorTriggerTypeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorTriggerTypeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorTriggerTypeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorExecutionModeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorExecutionModeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorExecutionModeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorExecutionModeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorExecutionCountColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorExecutionCountColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorExecutionCountColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorExecutionCountColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorRunningStateColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorRunningStateColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorRunningStateColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorRunningStateColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorAcknowledgeRequestColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorAcknowledgeRequestColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorAcknowledgeRequestColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorAcknowledgeRequestColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorAckRequestTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorAckRequestTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorAckRequestTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorAckRequestTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorPEVChecksColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorPEVChecksColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorPEVChecksColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorPEVChecksColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorCEVChecksColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorCEVChecksColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorCEVChecksColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorCEVChecksColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorStartTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorStartTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorStartTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorStartTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCProceduresMonitorEndTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorEndTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCProceduresMonitorEndTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCProceduresMonitorEndTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersNumberCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCDiagnosticsOversamplingDumpParametersNumberCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersNumberColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCDiagnosticsOversamplingDumpParametersNumberColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersTimeCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCDiagnosticsOversamplingDumpParametersTimeCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCDiagnosticsOversamplingDumpParametersTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersValueCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCDiagnosticsOversamplingDumpParametersValueCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersValueColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCDiagnosticsOversamplingDumpParametersValueColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersUnitCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCDiagnosticsOversamplingDumpParametersUnitCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCDiagnosticsOversamplingDumpParametersUnitColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCDiagnosticsOversamplingDumpParametersUnitColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCDiagnosticsOversamplingDumpRawDataNumberCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCDiagnosticsOversamplingDumpRawDataNumberCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCDiagnosticsOversamplingDumpRawDataNumberColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCDiagnosticsOversamplingDumpRawDataNumberColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCDiagnosticsOversamplingDumpRawDataTimeCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCDiagnosticsOversamplingDumpRawDataTimeCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCDiagnosticsOversamplingDumpRawDataTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCDiagnosticsOversamplingDumpRawDataTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCDiagnosticsOversamplingDumpRawDataContentsCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCDiagnosticsOversamplingDumpRawDataContentsCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCDiagnosticsOversamplingDumpRawDataContentsColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCDiagnosticsOversamplingDumpRawDataContentsColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesSummaryNameColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesSummaryNameColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesSummaryNameColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesSummaryNameColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesSummaryAPIDColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesSummaryAPIDColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesSummaryAPIDColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesSummaryAPIDColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesSummarySubScheduleIDColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesSummarySubScheduleIDColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesSummarySubScheduleIDColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesSummarySubScheduleIDColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesSummaryLimitColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesSummaryLimitColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesSummaryLimitColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesSummaryLimitColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesSummaryCountColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesSummaryCountColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesSummaryCountColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesSummaryCountColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesSummaryUpdateTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesSummaryUpdateTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesSummaryUpdateTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesSummaryUpdateTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesSummaryStatusColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesSummaryStatusColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesSummaryStatusColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesSummaryStatusColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsNumberColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsNumberColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsNumberColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsNumberColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsNameColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsNameColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsNameColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsNameColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsComputerColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsComputerColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsComputerColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsComputerColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCommandSourceColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsCommandSourceColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCommandSourceColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsCommandSourceColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsDescriptionColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsDescriptionColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsDescriptionColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsDescriptionColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCategoryColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsCategoryColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCategoryColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsCategoryColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsSubSystemColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsSubSystemColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsSubSystemColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsSubSystemColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsArgumentsColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsArgumentsColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsArgumentsColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsArgumentsColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsFlagsColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsFlagsColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsFlagsColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsFlagsColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsTCPacketColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsTCPacketColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsTCPacketColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsTCPacketColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPSCColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsPSCColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPSCColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsPSCColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsDispatchTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsDispatchTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsDispatchTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsDispatchTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsReleaseTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsReleaseTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsReleaseTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsReleaseTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsReleaseTimeOffsetColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsReleaseTimeOffsetColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsReleaseTimeOffsetColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsReleaseTimeOffsetColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsTransmissionTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsTransmissionTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsTransmissionTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsTransmissionTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsExecutionTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsExecutionTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsExcutionTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsExcutionTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsExecutionTimeOffsetColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsExecutionTimeOffsetColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsExcutionTimeOffsetColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsExcutionTimeOffsetColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsAuthorizationColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsAuthorizationColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsAuthorizationColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsAuthorizationColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPTVTimeWindowColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsPTVTimeWindowColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPTVTimeWindowColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsPTVTimeWindowColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPTVChecksColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsPTVChecksColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPTVChecksColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsPTVChecksColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPTVResultColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsPTVResultColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPTVResultColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsPTVResultColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPEVChecksColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsPEVChecksColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPEVChecksColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsPEVChecksColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPEVResultColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsPEVResultColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsPEVResultColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsPEVResultColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCEVTimeWindowColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsCEVTimeWindowColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCEVTimeWindowColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsCEVTimeWindowColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCEVChecksColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsCEVChecksColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCEVChecksColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsCEVChecksColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCEVResultColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsCEVResultColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsCEVResultColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsCEVResultColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsStatusColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsStatusColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardBufferQueuesDetailsStatusColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardBufferQueuesDetailsStatusColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardMemoryImagesProcessorColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesProcessorColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardMemoryImagesProcessorColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesProcessorColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardMemoryImagesAddressRangeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesAddressRangeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardMemoryImagesAddressRangeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesAddressRangeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardMemoryImagesSizeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesSizeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardMemoryImagesSizeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesSizeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardMemoryImagesPatchTCColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesPatchTCColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardMemoryImagesPatchTCColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesPatchTCColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardMemoryImagesLastPatchTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesLastPatchTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardMemoryImagesLastPatchTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesLastPatchTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardMemoryImagesDumpTCColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesDumpTCColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardMemoryImagesDumpTCColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesDumpTCColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardMemoryImagesDumpTMColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesDumpTMColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardMemoryImagesDumpTMColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesDumpTMColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCOnBoardMemoryImagesLastDumpTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesLastDumpTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCOnBoardMemoryImagesLastDumpTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCOnBoardMemoryImagesLastDumpTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryNumberColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryNumberColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryNumberColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryNumberColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryNameColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryNameColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryNameColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryNameColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryComputerColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryComputerColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryComputerColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryComputerColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryCommandSourceColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryCommandSourceColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryCommandSourceColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryCommandSourceColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryDescriptionColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryDescriptionColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryDescriptionColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryDescriptionColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryCategoryColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryCategoryColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryCategoryColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryCategoryColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistorySubSystemColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistorySubSystemColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistorySubSystemColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistorySubSystemColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryArgumentsColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryArgumentsColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryArgumentsColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryArgumentsColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryFlagsColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryFlagsColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryFlagsColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryFlagsColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryTCPacketColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryTCPacketColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryTCPacketColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryTCPacketColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryDispatchTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryDispatchTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryDispatchTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryDispatchTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryReleaseTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryReleaseTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryReleaseTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryReleaseTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryReleaseTimeOffsetColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryReleaseTimeOffsetColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryReleaseTimeOffsetColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryReleaseTimeOffsetColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryTransmissionTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryTransmissionTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryTransmissionTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryTransmissionTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryExecutionTimeColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryExecutionTimeColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryExcutionTimeColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryExcutionTimeColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryExecutionTimeOffsetColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryExecutionTimeOffsetColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryExcutionTimeOffsetColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryExcutionTimeOffsetColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryAuthorizationColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryAuthorizationColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryAuthorizationColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryAuthorizationColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryPTVTimeWindowColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryPTVTimeWindowColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryPTVTimeWindowColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryPTVTimeWindowColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryPTVChecksColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryPTVChecksColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryPTVChecksColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryPTVChecksColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryPTVResultColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryPTVResultColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryPTVResultColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryPTVResultColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryPEVChecksColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryPEVChecksColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryPEVChecksColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryPEVChecksColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryPEVResultColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryPEVResultColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryPEVResultColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryPEVResultColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryCEVTimeWindowColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryCEVTimeWindowColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryCEVTimeWindowColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryCEVTimeWindowColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryCEVChecksColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryCEVChecksColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryCEVChecksColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryCEVChecksColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryCEVResultColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryCEVResultColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryCEVResultColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryCEVResultColumnColor() : GetSysColor(COLOR_WINDOW));
}

INT CDatabaseEngine::GetTCHistoryStatusColumnCharWidth() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryStatusColumnCharWidth() : 0);
}

COLORREF CDatabaseEngine::GetTCHistoryStatusColumnColor() CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTCHistoryStatusColumnColor() : GetSysColor(COLOR_WINDOW));
}

BOOL CDatabaseEngine::CreateTables(CDatabaseTableView *pView, ULONGLONG nComponent)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CreateTables(pView, nComponent) : FALSE);
}

BOOL CDatabaseEngine::SaveTables(CDatabaseTableView *pView, ULONGLONG nComponent, BOOL bAll, BOOL bPrompt)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->SaveTables(pView, nComponent, bAll, bPrompt) : FALSE);
}

BOOL CDatabaseEngine::CanSaveTables(CONST CDatabaseTableView *pView, ULONGLONG nComponent) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CanSaveTables(pView, nComponent) : FALSE);
}

BOOL CDatabaseEngine::CheckTables(CDatabaseTableView *pView, ULONGLONG nComponent, CStringArray &szIssues) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTables(pView, nComponent, szIssues) : FALSE);
}

BOOL CDatabaseEngine::CanCheckTables(CONST CDatabaseTableView *pView, ULONGLONG nComponent) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CanCheckTables(pView, nComponent) : FALSE);
}

BOOL CDatabaseEngine::ImportTables(CDatabaseTableView *pView, ULONGLONG nComponent, BOOL bCustom)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->ImportTables(pView, nComponent, bCustom) : FALSE);
}

BOOL CDatabaseEngine::CanImportTables(CONST CDatabaseTableView *pView, ULONGLONG nComponent, BOOL bCustom) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CanImportTables(pView, nComponent, bCustom) : FALSE);
}

BOOL CDatabaseEngine::ExportTables(CDatabaseTableView *pView, ULONGLONG nComponent, BOOL bCustom)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->ExportTables(pView, nComponent, bCustom) : FALSE);
}

BOOL CDatabaseEngine::CanExportTables(CONST CDatabaseTableView *pView, ULONGLONG nComponent, BOOL bCustom) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CanExportTables(pView, nComponent, bCustom) : FALSE);
}

VOID CDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CDatabaseTMPackets &pDatabaseTMPackets)
{
	if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) return m_pDatabaseEngine->UpdateTables(pView, pDatabaseTMPackets);
}
VOID CDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CDatabaseTCFunctions &pDatabaseTCFunctions)
{
	if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) return m_pDatabaseEngine->UpdateTables(pView, pDatabaseTCFunctions);
}
VOID CDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CDatabaseTCSequences &pDatabaseTCSequences)
{
	if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) return m_pDatabaseEngine->UpdateTables(pView, pDatabaseTCSequences);
}
VOID CDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CDatabaseOBProcessors &pDatabaseOBProcessors)
{
	if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) return m_pDatabaseEngine->UpdateTables(pView, pDatabaseOBProcessors);
}
VOID CDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CDatabaseTMParameters &pDatabaseTMParameters)
{
	if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) return m_pDatabaseEngine->UpdateTables(pView, pDatabaseTMParameters);
}
VOID CDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CDatabaseTCParameters &pDatabaseTCParameters)
{
	if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) return m_pDatabaseEngine->UpdateTables(pView, pDatabaseTCParameters);
}
VOID CDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CANDLayouts &pANDLayouts)
{
	if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) return m_pDatabaseEngine->UpdateTables(pView, pANDLayouts);
}
VOID CDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CGRDLayouts &pGRDLayouts)
{
	if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) return m_pDatabaseEngine->UpdateTables(pView, pGRDLayouts);
}
VOID CDatabaseEngine::UpdateTables(CDatabaseTableView *pView, CONST CPODLayouts &pPODLayouts)
{
	if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) return m_pDatabaseEngine->UpdateTables(pView, pPODLayouts);
}
BOOL CDatabaseEngine::UpdateTables(CDatabaseTableView *pView, ULONGLONG nComponent, LPCTSTR pszName, BOOL bDelete)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->UpdateTables(pView, nComponent, pszName, bDelete) : FALSE);
}
BOOL CDatabaseEngine::UpdateTables(CDatabaseTableView *pView, ULONGLONG nComponent, INT nID, BOOL bDelete)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->UpdateTables(pView, nComponent, nID, bDelete) : FALSE);
}
VOID CDatabaseEngine::UpdateTables(CDatabaseTableView *pView, ULONGLONG nComponent)
{
	if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) return m_pDatabaseEngine->UpdateTables(pView, nComponent);
}
VOID CDatabaseEngine::UpdateTables(CDatabaseTableView *pView)
{
	if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) return m_pDatabaseEngine->UpdateTables(pView);
}

VOID CDatabaseEngine::ArrangeTables(CDatabaseTableView *pView)
{
	if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) return m_pDatabaseEngine->ArrangeTables(pView);
}
VOID CDatabaseEngine::ArrangeTables(CDatabaseTableView *pView, UINT nControlID)
{
	if (m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) return m_pDatabaseEngine->ArrangeTables(pView, nControlID);
}

BOOL CDatabaseEngine::DiscardTables(CDatabaseTableView *pView, ULONGLONG nComponent, BOOL bAll)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DiscardTables(pView, nComponent, bAll) : FALSE);
}

BOOL CDatabaseEngine::CanDiscardTables(CONST CDatabaseTableView *pView, ULONGLONG nComponent, BOOL bAll) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CanDiscardTables(pView, nComponent, bAll) : FALSE);
}

BOOL CDatabaseEngine::DeleteTables(CDatabaseTableView *pView, ULONGLONG nComponent)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTables(pView, nComponent) : FALSE);
}

BOOL CDatabaseEngine::CanDeleteTables(CONST CDatabaseTableView *pView, ULONGLONG nComponent) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CanDeleteTables(pView, nComponent) : FALSE);
}

BOOL CDatabaseEngine::DestroyTables(CDatabaseTableView *pView, ULONGLONG nComponent)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DestroyTables(pView, nComponent) : FALSE);
}

INT CDatabaseEngine::EnumTables(CONST CDatabaseTableView *pView, CStringArray &szTables, CUIntArray &nTypes, BOOL bMenu, BOOL bResetable) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTables(pView, szTables, nTypes, bMenu, bResetable) : 0);
}

BOOL CDatabaseEngine::GetTableTitle(CONST CDatabaseTableView *pView, LPCTSTR pszTable, CString &szTitle) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTableTitle(pView, pszTable, szTitle) : FALSE);
}

BOOL CDatabaseEngine::GetTableLayout(CONST CDatabaseTableView *pView, LPCTSTR pszTable, CUIntArray &nWidths) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTableLayout(pView, pszTable, nWidths) : FALSE);
}
BOOL CDatabaseEngine::GetTableLayout(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszItem, CUIntArray &nWidths) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTableLayout(pView, pszTable, pszItem, nWidths) : FALSE);
}

BOOL CDatabaseEngine::GetTablePosition(CONST CDatabaseTableView *pView, LPCTSTR pszTable, CString &szTable, CRect &rPosition) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTablePosition(pView, pszTable, szTable, rPosition) : FALSE);
}

BOOL CDatabaseEngine::GetTableOutline(CONST CDatabaseTableView *pView, LPCTSTR pszTable, COLORREF &nTitleRowColor, COLORREF &nFirstRowColor, COLORREF &nFirstColumnColor, COLORREF &nTitleFontColor, COLORREF &nItemsFontColor, INT &nOuterBorderSize, INT &nOuterBorderStyle, COLORREF &nOuterBorderColor, INT &nInnerBorderSize, INT &nInnerBorderStyle, COLORREF &nInnerBorderColor) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTableOutline(pView, pszTable, nTitleRowColor, nFirstRowColor, nFirstColumnColor, nTitleFontColor, nItemsFontColor, nOuterBorderSize, nOuterBorderStyle, nOuterBorderColor, nInnerBorderSize, nInnerBorderStyle, nInnerBorderColor) : FALSE);
}

BOOL CDatabaseEngine::GetTableOutlineFonts(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LOGFONT *plfTitleFont, LOGFONT *plfItemsFont) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTableOutlineFonts(pView, pszTable, plfTitleFont, plfItemsFont) : FALSE);
}

BOOL CDatabaseEngine::GetTableOutlineLimits(CONST CDatabaseTableView *pView, LPCTSTR pszTable, INT &nMinRows, INT &nMaxRows) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTableOutlineLimits(pView, pszTable, nMinRows, nMaxRows) : FALSE);
}

BOOL CDatabaseEngine::GetTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszItem, INT nRows, CStringArray &szContents, CStringArray &szDescriptions, CStringArray &szDataTypes, CUIntArray &nFormats, CUIntArray &nIDs, BOOL &bResize, BOOL &bVisible) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTableContents(pView, pszTable, pszItem, nRows, szContents, szDescriptions, szDataTypes, nFormats, nIDs, bResize, bVisible) : FALSE);
}

INT CDatabaseEngine::EnumTableFieldValues(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszField, CStringArray &szValues, CLongUIntArray &nValues) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTableFieldValues(pView, pszTable, pszField, szValues, nValues) : 0);
}

BOOL CDatabaseEngine::GetTableFieldLimits(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszField, INT &nLow, INT &nHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTableFieldLimits(pView, pszTable, pszField, nLow, nHigh) : FALSE);
}
BOOL CDatabaseEngine::GetTableFieldLimits(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszField, UINT &uLow, UINT &uHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTableFieldLimits(pView, pszTable, pszField, uLow, uHigh) : FALSE);
}
BOOL CDatabaseEngine::GetTableFieldLimits(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszField, double &fLow, double &fHigh) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTableFieldLimits(pView, pszTable, pszField, fLow, fHigh) : FALSE);
}

BOOL CDatabaseEngine::GetTableContext(CONST CDatabaseTableView *pView, LPCTSTR pszTable, CString &szTable, UINT &nControlID, CString &szValue) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTableContext(pView, pszTable, szTable, nControlID, szValue) : FALSE);
}

INT CDatabaseEngine::EnumTableUpdates(CONST CDatabaseTableView *pView, UINT nControlID, CStringArray &szTables) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTableUpdates(pView, nControlID, szTables) : 0);
}

BOOL CDatabaseEngine::GetTableUpdateContents(CONST CDatabaseTableView *pView, LPCTSTR pszTable, UINT nControlID, LPCTSTR pszValue, CString &szItem, CStringArray &szContents) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTableUpdateContents(pView, pszTable, nControlID, pszValue, szItem, szContents) : FALSE);
}

BOOL CDatabaseEngine::UpdateTableFieldData(CDatabaseTableView *pView, UINT nControlID, LPCTSTR pszValue, LPCTSTR pszOldValue)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->UpdateTableFieldData(pView, nControlID, pszValue, pszOldValue) : FALSE);
}

INT CDatabaseEngine::InsertTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszValue)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->InsertTableFieldData(pView, pszTable, pszValue) : -1);
}
BOOL CDatabaseEngine::InsertTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, INT nRow, INT nCol)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->InsertTableFieldData(pView, pszTable, nRow, nCol) : FALSE);
}

BOOL CDatabaseEngine::CheckTableFieldData(CONST CDatabaseTableView *pView, LPCTSTR pszTable, BOOL bModified, BOOL bExist) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTableFieldData(pView, pszTable, bModified, bExist) : FALSE);
}
BOOL CDatabaseEngine::CheckTableFieldData(CONST CDatabaseTableView *pView, LPCTSTR pszTable, CStringArray &szIssues) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->CheckTableFieldData(pView, pszTable, szIssues) : FALSE);
}

BOOL CDatabaseEngine::SelectTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, CONST POINT &pt)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->SelectTableFieldData(pView, pszTable, pt) : FALSE);
}
BOOL CDatabaseEngine::SelectTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszValue)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->SelectTableFieldData(pView, pszTable, pszValue) : FALSE);
}

BOOL CDatabaseEngine::SaveTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, BOOL bPrompt)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->SaveTableFieldData(pView, pszTable, bPrompt) : FALSE);
}

BOOL CDatabaseEngine::ProtectTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, BOOL bUndo)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->ProtectTableFieldData(pView, pszTable, bUndo) : FALSE);
}

BOOL CDatabaseEngine::DeleteTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTableFieldData(pView, pszTable) : FALSE);
}
INT CDatabaseEngine::DeleteTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszValue)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTableFieldData(pView, pszTable, pszValue) : -1);
}
BOOL CDatabaseEngine::DeleteTableFieldData(CDatabaseTableView *pView, LPCTSTR pszTable, INT nRow, INT nCol)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->DeleteTableFieldData(pView, pszTable, nRow, nCol) : FALSE);
}

BOOL CDatabaseEngine::GetTableFieldFlag(CONST CDatabaseTableView *pView, LPCTSTR pszTable, INT nRow, INT nCol, CString &szFlag) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetTableFieldFlag(pView, pszTable, nRow, nCol, szFlag) : FALSE);
}

INT CDatabaseEngine::EnumTableDropTargets(CONST CDatabaseTableView *pView, ULONGLONG nComponent, CStringArray &szTables, CStringArray &szFields) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumTableDropTargets(pView, nComponent, szTables, szFields) : 0);
}

BOOL CDatabaseEngine::FindTableDropTargetCell(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszField, ULONGLONG nComponent, LPCTSTR pszItem, CString &szItem, INT &nRow, INT &nCol) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->FindTableDropTargetCell(pView, pszTable, pszField, nComponent, pszItem, szItem, nRow, nCol) : FALSE);
}

INT CDatabaseEngine::EnumPrintTables(CONST CDatabaseTableView *pView, LPCTSTR pszTable, UINT nFlags, CStringArray &szTables) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumPrintTables(pView, pszTable, nFlags, szTables) : 0);
}

BOOL CDatabaseEngine::GetPrintTableContents(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszItem, CStringArray &szContents) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetPrintTableContents(pView, pszTable, pszItem, szContents) : FALSE);
}

BOOL CDatabaseEngine::PrintTable(CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszItem, CMetaFileDC &cMetaDC)
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->PrintTable(pView, pszTable, pszItem, cMetaDC) : FALSE);
}

ULONGLONG CDatabaseEngine::TranslateTableNameToComponent(CONST CDatabaseTableView *pView, LPCTSTR pszTable) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTableNameToComponent(pView, pszTable) : 0);
}

CString CDatabaseEngine::TranslateComponentToTableName(CONST CDatabaseTableView *pView, ULONGLONG nComponent) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateComponentToTableName(pView, nComponent) : EMPTYSTRING);
}

INT CDatabaseEngine::TranslateTableFieldToIndex(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszField) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTableFieldToIndex(pView, pszTable, pszField) : -1);
}

UINT CDatabaseEngine::TranslateTableFieldToID(CONST CDatabaseTableView *pView, LPCTSTR pszTable, LPCTSTR pszField) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->TranslateTableFieldToID(pView, pszTable, pszField) : (UINT)-1);
}

BOOL CDatabaseEngine::IsTableFieldID(CONST CDatabaseTableView *pView, LPCTSTR pszTable, UINT nControlID) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->IsTableFieldID(pView, pszTable, nControlID) : FALSE);
}

INT CDatabaseEngine::EnumDBMSTables(CStringArray &szTables, CStringArray &szDescriptions) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->EnumDBMSTables(szTables, szDescriptions) : 0);
}

BOOL CDatabaseEngine::GetDBMSTableCharacteristics(LPCTSTR pszTable, CStringArray &szColumns, CStringArray &szDataTypes, CStringArray &szDefaults, CByteArray &bAllowNulls) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->GetDBMSTableCharacteristics(pszTable, szColumns, szDataTypes, szDefaults, bAllowNulls) : FALSE);
}

BOOL CDatabaseEngine::UsesDBMSTables(ULONGLONG nComponent) CONST
{
	return((m_pDatabaseEngine != (CDatabaseEngine *)NULL  &&  m_pDatabaseEngine != this) ? m_pDatabaseEngine->UsesDBMSTables(nComponent) : FALSE);
}

CString CDatabaseEngine::ConstructDBMSTableDefaultStringValue(LPCTSTR pszValue) CONST
{
	CString  szDefault;

	szDefault.Format(STRING(IDS_DATABASE_DEFAULTFORMAT_STRING), pszValue);
	return szDefault;
}
CString CDatabaseEngine::ConstructDBMSTableDefaultNumericValue(LONGLONG nValue) CONST
{
	CStringTools  cStringTools;

	return cStringTools.ConvertLongIntToString(nValue);
}
CString CDatabaseEngine::ConstructDBMSTableDefaultRealValue(double fValue) CONST
{
	CStringTools  cStringTools;

	return cStringTools.ConvertFloatToString(fValue);
}

BOOL CDatabaseEngine::TranslateParameterTypeCode(INT nPTC, INT nPFC, BOOL bTC, ULONGLONG &nAttributes, INT &nWidth)
{
	switch (nPTC)
	{
	case 1:
	{ if (!nPFC)
	{
		nAttributes = (!bTC) ? (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY) : (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_RADIX_BINARY);
		nWidth = 1;
		return TRUE;
	}
	break;
	}
	case 2:
	{ if (nPFC > 0 && nPFC <= 32)
	{
		nAttributes = (!bTC) ? (TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL) : (TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL);
		nWidth = nPFC;
		return TRUE;
	}
	break;
	}
	case 3:
	{ if (nPFC >= 0 && nPFC <= 12)
	{
		nAttributes = (!bTC) ? (TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL) : (TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL);
		nWidth = nPFC + 4;
		return TRUE;
	}
	if (nPFC >= 13 && nPFC <= 14)
	{
		nAttributes = (!bTC) ? (TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL) : (TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL);
		nWidth = 24 + (nPFC - 13) * 8;
		return TRUE;
	}
	if (nPFC >= 15 && nPFC <= 16)
	{
		nAttributes = (!bTC) ? (TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL) : (TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL);
		nWidth = 48 + (nPFC - 15) * 16;
		return TRUE;
	}
	break;
	}
	case 4:
	{ if (nPFC >= 0 && nPFC <= 12)
	{
		nAttributes = (!bTC) ? (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL) : (TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL);
		nWidth = nPFC + 4;
		return TRUE;
	}
	if (nPFC >= 13 && nPFC <= 14)
	{
		nAttributes = (!bTC) ? (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL) : (TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL);
		nWidth = 24 + (nPFC - 13) * 8;
		return TRUE;
	}
	if (nPFC >= 15 && nPFC <= 16)
	{
		nAttributes = (!bTC) ? (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_RADIX_DECIMAL) : (TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL);
		nWidth = 48 + (nPFC - 15) * 16;
		return TRUE;
	}
	break;
	}
	case 5:
	{ if (nPFC == 1)
	{
		nAttributes = (!bTC) ? (TMPARAMETER_STANDARD_IEEE | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_DECIMAL) : (TCPARAMETER_STANDARD_IEEE | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_RADIX_DECIMAL);
		nWidth = 32;
		return TRUE;
	}
	if (nPFC == 2)
	{
		nAttributes = (!bTC) ? (TMPARAMETER_STANDARD_IEEE | TMPARAMETER_STANDARD_DOUBLEPRECISION | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_DECIMAL) : (TCPARAMETER_STANDARD_IEEE | TCPARAMETER_STANDARD_DOUBLEPRECISION | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_RADIX_DECIMAL);
		nWidth = 64;
		return TRUE;
	}
	if (nPFC == 3)
	{
		nAttributes = (!bTC) ? (TMPARAMETER_STANDARD_USAF | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_DECIMAL) : (TCPARAMETER_STANDARD_USAF | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_RADIX_DECIMAL);
		nWidth = 32;
		return TRUE;
	}
	if (nPFC == 4)
	{
		nAttributes = (!bTC) ? (TMPARAMETER_STANDARD_USAF | TMPARAMETER_STANDARD_DOUBLEPRECISION | TMPARAMETER_CODING_FLOATINGPOINT | TMPARAMETER_RADIX_DECIMAL) : (TCPARAMETER_STANDARD_USAF | TCPARAMETER_STANDARD_DOUBLEPRECISION | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_RADIX_DECIMAL);
		nWidth = 48;
		return TRUE;
	}
	break;
	}
	case 6:
	{ if (!nPFC)
	{
		nAttributes = (!bTC) ? (TMPARAMETER_CODING_TEXTSTRING | TMPARAMETER_RADIX_BINARY) : (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_RADIX_BINARY);
		nWidth = -1;
		return TRUE;
	}
	if (nPFC > 0 && nPFC <= 32)
	{
		nAttributes = (!bTC) ? (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_RADIX_BINARY) : (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_RADIX_BINARY);
		nWidth = nPFC;
		return TRUE;
	}
	break;
	}
	case 7:
	{ nAttributes = (!bTC) ? (TMPARAMETER_CODING_TEXTSTRING | TMPARAMETER_RADIX_HEXADECIMAL) : (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_RADIX_HEXADECIMAL);
	nWidth = (nPFC > 0) ? (8 * nPFC) : -1;
	return TRUE;
	}
	case 8:
	{ nAttributes = (!bTC) ? TMPARAMETER_CODING_TEXTSTRING : TCPARAMETER_CODING_TEXTSTRING;
	nWidth = (nPFC > 0) ? (8 * nPFC) : -1;
	return TRUE;
	}
	case 9:
	{ switch (nPFC)
	{
	case 0: nWidth = -1; break;
	case 1: nWidth = 48; break;
	case 2: nWidth = 64; break;
	case 3: nWidth = 8; break;
	case 4: nWidth = 16; break;
	case 5: nWidth = 24; break;
	case 6: nWidth = 32; break;
	case 7: nWidth = 16; break;
	case 8: nWidth = 24; break;
	case 9: nWidth = 32; break;
	case 10: nWidth = 40; break;
	case 11: nWidth = 24; break;
	case 12: nWidth = 32; break;
	case 13: nWidth = 40; break;
	case 14: nWidth = 48; break;
	case 15: nWidth = 32; break;
	case 16: nWidth = 40; break;
	case 17: nWidth = 48; break;
	case 18: nWidth = 56; break;
	case 30: nWidth = 64; break;
	default:
	{ nAttributes = 0;
	nWidth = 0;
	return FALSE;
	}
	}
	nAttributes = (!bTC) ? TMPARAMETER_CODING_ABSOLUTETIME : TCPARAMETER_CODING_ABSOLUTETIME;
	return TRUE;
	}
	case 10:
	{ switch (nPFC)
	{
	case 3: nWidth = 8; break;
	case 4: nWidth = 16; break;
	case 5: nWidth = 24; break;
	case 6: nWidth = 32; break;
	case 7: nWidth = 16; break;
	case 8: nWidth = 24; break;
	case 9: nWidth = 32; break;
	case 10: nWidth = 40; break;
	case 11: nWidth = 24; break;
	case 12: nWidth = 32; break;
	case 13: nWidth = 40; break;
	case 14: nWidth = 48; break;
	case 15: nWidth = 32; break;
	case 16: nWidth = 40; break;
	case 17: nWidth = 48; break;
	case 18: nWidth = 56; break;
	default:
	{ nAttributes = 0;
	nWidth = 0;
	return FALSE;
	}
	}
	nAttributes = (!bTC) ? TMPARAMETER_CODING_RELATIVETIME : TCPARAMETER_CODING_RELATIVETIME;
	return TRUE;
	}
	case 11:
	{ if (nPFC >= 0 && nPFC <= 64)
	{
		nAttributes = (!bTC) ? TMPARAMETER_TYPE_DEDUCED : nAttributes;
		nWidth = (nPFC > 0) ? nPFC : nWidth;
		return TRUE;
	}
	break;
	}
	case 13:
	{ if (!nPFC) return TRUE;
	break;
	}
	}
	nAttributes = 0;
	nWidth = 0;
	return FALSE;
}
CString CDatabaseEngine::TranslateParameterTypeCode(INT nPTC, INT nPFC, BOOL bTC)
{
	if (nPTC >= 1 && nPTC <= 3 || (nPTC == 6 && nPFC > 0)) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_UNSIGNEDINTEGER) : STRING(IDS_TCPARAMETER_TYPE_UNSIGNEDINTEGER));
	if (nPTC == 4) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_SIGNEDINTEGER) : STRING(IDS_TCPARAMETER_TYPE_SIGNEDINTEGER));
	if (nPTC == 5 && (nPFC == 1 || nPFC == 2)) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_FLOATINGPOINT_IEEE) : STRING(IDS_TCPARAMETER_TYPE_FLOATINGPOINT_IEEE));
	if (nPTC == 5 && (nPFC == 3 || nPFC == 4)) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_FLOATINGPOINT_USAF) : STRING(IDS_TCPARAMETER_TYPE_FLOATINGPOINT_USAF));
	if (nPTC == 6 && !nPFC) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_BITSTRING) : STRING(IDS_TCPARAMETER_TYPE_BITSTRING));
	if (nPTC == 7) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_OCTETSTRING) : STRING(IDS_TCPARAMETER_TYPE_OCTETSTRING));
	if (nPTC == 8) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_ASCIISTRING) : STRING(IDS_TCPARAMETER_TYPE_ASCIISTRING));
	if (nPTC == 9 && !nPFC) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_ABSOLUTETIME) : STRING(IDS_TCPARAMETER_TYPE_ABSOLUTETIME));
	if (nPTC == 9 && (nPFC == 1 || nPFC == 2)) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_ABSOLUTECDSTIME) : STRING(IDS_TCPARAMETER_TYPE_ABSOLUTECDSTIME));
	if (nPTC == 9 && nPFC >= 3 && nPFC < 30) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_ABSOLUTECUCTIME) : STRING(IDS_TCPARAMETER_TYPE_ABSOLUTECUCTIME));
	if (nPTC == 9 && nPFC == 30) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_ABSOLUTEUNIXTIME) : STRING(IDS_TCPARAMETER_TYPE_ABSOLUTEUNIXTIME));
	if (nPTC == 10) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_RELATIVECUCTIME) : STRING(IDS_TCPARAMETER_TYPE_RELATIVECUCTIME));
	if (nPTC == 11) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_DEDUCED) : STRING(IDS_TCPARAMETER_TYPE_DEDUCED));
	if (nPTC == 13) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_SAVEDSYNTHETIC) : EMPTYSTRING);
	return EMPTYSTRING;
}
CString CDatabaseEngine::TranslateParameterTypeCode(ULONGLONG nAttributes, BOOL bTC)
{
	if (!bTC)
	{
		if (nAttributes & TMPARAMETER_TYPE_DS16) return STRING(IDS_TMPARAMETER_TYPE_DS16);
		if (nAttributes & TMPARAMETER_TYPE_DS8) return STRING(IDS_TMPARAMETER_TYPE_DS8);
		if (nAttributes & TMPARAMETER_TYPE_BIL) return STRING(IDS_TMPARAMETER_TYPE_BIL);
		if (nAttributes & TMPARAMETER_TYPE_HBIL) return STRING(IDS_TMPARAMETER_TYPE_HBIL);
		if (nAttributes & TMPARAMETER_TYPE_AN) return STRING(IDS_TMPARAMETER_TYPE_AN);
		if (nAttributes & TMPARAMETER_TYPE_FLOAT) return STRING(IDS_TMPARAMETER_TYPE_FLOAT);
	}
	if ((!bTC && (nAttributes & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_UNSIGNEDINTEGER))) || (bTC && (nAttributes & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER)))) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_UNSIGNEDINTEGER) : STRING(IDS_TCPARAMETER_TYPE_UNSIGNEDINTEGER));
	if ((!bTC && (nAttributes & TMPARAMETER_CODING_SIGNEDINTEGER)) || (bTC && (nAttributes & TCPARAMETER_CODING_SIGNEDINTEGER))) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_SIGNEDINTEGER) : STRING(IDS_TCPARAMETER_TYPE_SIGNEDINTEGER));
	if ((!bTC && (nAttributes & TMPARAMETER_CODING_FLOATINGPOINT)) || (bTC && (nAttributes & TCPARAMETER_CODING_FLOATINGPOINT))) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_FLOATINGPOINT) : STRING(IDS_TCPARAMETER_TYPE_FLOATINGPOINT));
	if ((!bTC && (nAttributes & TMPARAMETER_CODING_TEXTSTRING)) || (bTC && (nAttributes & TCPARAMETER_CODING_TEXTSTRING))) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_STRING) : STRING(IDS_TCPARAMETER_TYPE_STRING));
	if ((!bTC && (nAttributes & TMPARAMETER_CODING_TIME)) || (bTC && (nAttributes & TCPARAMETER_CODING_TIME))) return((!bTC) ? STRING(IDS_TMPARAMETER_TYPE_TIME) : STRING(IDS_TCPARAMETER_TYPE_TIME));
	return EMPTYSTRING;
}

BOOL CDatabaseEngine::ParseValue(LPCTSTR pszValue, ULONGLONG &nValue)
{
	return ParseValue(pszValue, 10, nValue);
}
BOOL CDatabaseEngine::ParseValue(LPCTSTR pszValue, UINT nRadix, ULONGLONG &nValue)
{
	BOOL  bSign;

	return ParseValue(pszValue, nRadix, nValue, bSign);
}
BOOL CDatabaseEngine::ParseValue(LPCTSTR pszValue, UINT nRadix, ULONGLONG &nValue, BOOL &bSign)
{
	INT  nPos;
	INT  nLength;
	BOOL  bValue;
	TCHAR  szChar;
	TCHAR  szDigit[2];
	CStringTools  cStringTools;

	for (nPos = 0, nLength = lstrlen(pszValue), nValue = 0, bValue = FALSE, bSign = FALSE; nPos < nLength; nPos++)
	{
		if (!_istspace(pszValue[nPos])) break;
		continue;
	}
	if ((szChar = pszValue[nPos]) == PLUS || szChar == MINUS)
	{
		bSign = (szChar == MINUS);
		nPos++;
	}
	if (nRadix == 2 || nRadix == 8 || nRadix == 10)
	{
		for (szDigit[0] = cStringTools.ConvertUIntToString(0).GetAt(0), szDigit[1] = cStringTools.ConvertUIntToString(nRadix - 1).GetAt(0); nPos < nLength; nPos++)
		{
			if ((szChar = pszValue[nPos]) >= szDigit[0] && szChar <= szDigit[1])
			{
				nValue = nRadix*nValue + __toascii(szChar) - __toascii(szDigit[0]);
				bValue = TRUE;
				continue;
			}
			break;
		}
	}
	if (nRadix == 16)
	{
		for (szDigit[0] = cStringTools.ConvertUIntToString(0).GetAt(0), szDigit[1] = cStringTools.ConvertUIntToString(10, nRadix).GetAt(0); nPos < nLength; nPos++)
		{
			if (_istdigit((szChar = CString(pszValue[nPos]).MakeUpper().GetAt(0))))
			{
				nValue = nRadix*nValue + __toascii(szChar) - __toascii(szDigit[0]);
				bValue = TRUE;
				continue;
			}
			if (_istxdigit(szChar))
			{
				nValue = nRadix*nValue + __toascii(szChar) - __toascii(szDigit[1]) + 10;
				bValue = TRUE;
				continue;
			}
			break;
		}
	}
	for (nValue = (bSign) ? -(LONGLONG)nValue : nValue; nPos < nLength; nPos++)
	{
		if (!_istspace(pszValue[nPos])) break;
		continue;
	}
	if (nPos != nLength || !bValue)
	{
		nValue = 0;
		return FALSE;
	}
	return TRUE;
}
ULONGLONG CDatabaseEngine::ParseValue(LPCTSTR pszValue, UINT nRadix)
{
	ULONGLONG  nValue;

	return((ParseValue(pszValue, nRadix, nValue)) ? nValue : 0);
}
BOOL CDatabaseEngine::ParseValue(LPCTSTR pszValue, double &fValue)
{
	INT  nPos;
	INT  nLength;
	BOOL  bValue;
	BOOL  bSign[2];
	BOOL  bMantisse;
	BOOL  bExponent;
	TCHAR  szChar;
	TCHAR  szDigit;
	double  fNumber;
	double  fFactor;
	double  fMantisse;
	double  fExponent;
	CString  szNumber;
	CStringTools  cStringTools;

	for (nPos = 0, nLength = lstrlen(pszValue), fValue = 0.0, bValue = FALSE, bSign[0] = bSign[1] = FALSE; nPos < nLength; nPos++)
	{
		if (!_istspace(pszValue[nPos])) break;
		continue;
	}
	if ((szChar = pszValue[nPos]) == PLUS || szChar == MINUS)
	{
		bSign[0] = (szChar == MINUS);
		nPos++;
	}
	for (szDigit = cStringTools.ConvertUIntToString(0).GetAt(0), szNumber = cStringTools.ConvertFloatToString((fMantisse = 0.0)), bMantisse = TRUE; nPos < nLength; nPos++)
	{
		if (_istdigit((szChar = pszValue[nPos])))
		{
			fMantisse = 10.0*fMantisse;
			fMantisse += __toascii(szChar);
			fMantisse -= __toascii(szDigit);
			continue;
		}
		break;
	}
	if ((szChar = pszValue[nPos]) == szNumber.GetAt(szNumber.GetLength() / 2))
	{
		for (nPos++, fNumber = 0.0, fFactor = 1.0, bMantisse = FALSE; nPos < nLength; nPos++)
		{
			if (_istdigit((szChar = pszValue[nPos])))
			{
				fFactor = 10.0*fFactor;
				fNumber = 10.0*fNumber;
				fNumber += __toascii(szChar);
				fNumber -= __toascii(szDigit);
				bMantisse = TRUE;
				continue;
			}
			break;
		}
		fMantisse += fNumber / fFactor;
	}
	for (fExponent = 0.0; !(bExponent = (_tcscspn(&pszValue[nPos], STRING(IDS_CHARSET_NUMBEREXPONENTPREFIX)) > 0 || !lstrlen(&pszValue[nPos]))); )
	{
		if ((szChar = pszValue[++nPos]) == PLUS || szChar == MINUS)
		{
			bSign[1] = (szChar == MINUS);
			nPos++;
		}
		for (; nPos < nLength; nPos++)
		{
			if (_istdigit((szChar = pszValue[nPos])))
			{
				fExponent = 10.0*fExponent;
				fExponent += __toascii(szChar);
				fExponent -= __toascii(szDigit);
				bExponent = TRUE;
				continue;
			}
			break;
		}
		fExponent = (bSign[1]) ? -fExponent : fExponent;
		break;
	}
	for (fValue = (bMantisse && bExponent) ? fMantisse*pow(10, fExponent) : 0.0, fValue = (bSign[0]) ? -fValue : fValue; nPos < nLength; nPos++)
	{
		if (!_istspace(pszValue[nPos])) break;
		continue;
	}
	if (nPos != nLength || !bMantisse || !bExponent)
	{
		fValue = 0.0;
		return FALSE;
	}
	return TRUE;
}
double CDatabaseEngine::ParseValue(LPCTSTR pszValue)
{
	double  fValue;

	return((ParseValue(pszValue, fValue)) ? fValue : 0.0);
}

TIMETAG CDatabaseEngine::ParseTime(LPCTSTR pszTime, BOOL bAbsolute)
{
	TIMETAG  tTime;

	if (bAbsolute)
	{
		if ((tTime = CTimeTag(0).ParseGmt(pszTime, STRING(IDS_DATABASE_DATAFORMAT_TIME))) >= 0) return tTime;
		if ((tTime = CTimeTag(0).ParseGmt(pszTime, STRING(IDS_DATABASE_DATAFORMAT_ABSOLUTETIME))) >= 0) return tTime;
		if ((tTime = CTimeTag(0).ParseGmt(pszTime, STRING(IDS_DATABASE_DATAFORMAT_SHORTTIME))) >= 0) return tTime;
		if ((tTime = CTimeTag(0).ParseGmt(pszTime, STRING(IDS_DATABASE_DATAFORMAT_SHORTABSOLUTETIME))) >= 0) return tTime;
		return -1;
	}
	if ((tTime = CTimeTag(0).ParseGmt(pszTime, STRING(IDS_DATABASE_DATAFORMAT_RELATIVETIME))) >= 0) return tTime;
	if ((tTime = CTimeTag(0).ParseGmt(pszTime, STRING(IDS_DATABASE_DATAFORMAT_SHORTRELATIVETIME))) >= 0) return tTime;
	return -1;
}
TIMETAG CDatabaseEngine::ParseTime(CONST CByteArray &nCode, INT nPTC, INT nPFC)
{
	INT  i, j;
	INT  cbTime;
	INT  nOctets[3];
	UINT  nTicks[3];
	BYTE  szPField;
	FILETIME  fTime[2];
	SYSTEMTIME  sTime[2];
	CByteArray  nTime;

	if (nPTC == 9)
	{
		switch (nPFC)
		{
		case 0:
		{ if (nCode.GetSize() > 0)
		{
			for (szPField = nCode.GetAt(0); (szPField & 0xF0) == 0x10; )
			{
				for (nOctets[0] = ((szPField & 0x0C) >> 2) + 1, nOctets[1] = szPField & 0x03; nCode.GetSize() == 1 + nOctets[0] + nOctets[1]; )
				{
					for (i = 0, j = nOctets[0], nTicks[0] = 0; i < j; i++)
					{
						nTicks[0] = (nTicks[0] << 8) + nCode.GetAt(1 + i);
						continue;
					}
					for (i = 0, j = nOctets[1], nTicks[1] = 0; i < j; i++)
					{
						nTicks[1] = (nTicks[1] << 8) + nCode.GetAt(1 + nOctets[0] + i);
						continue;
					}
					for (sTime[0].wYear = DATABASE_CCSDS_TIMEEPOCH, sTime[0].wMonth = sTime[0].wDay = 1, sTime[0].wHour = sTime[0].wMinute = sTime[0].wSecond = sTime[0].wMilliseconds = 0, sTime[1].wYear = 1970, sTime[1].wMonth = sTime[1].wDay = 1, sTime[1].wHour = sTime[1].wMinute = sTime[1].wSecond = sTime[1].wMilliseconds = 0; SystemTimeToFileTime(&sTime[0], &fTime[0]) && SystemTimeToFileTime(&sTime[1], &fTime[1]); ) return((((TIMETAG)fTime[0].dwHighDateTime << 32) + (TIMETAG)fTime[0].dwLowDateTime - ((TIMETAG)fTime[1].dwHighDateTime << 32) - (TIMETAG)fTime[1].dwLowDateTime) / 10 + 1000000 * (TIMETAG)nTicks[0] + (1000000 * (TIMETAG)nTicks[1]) / ((TIMETAG)1 << (8 * nOctets[1])));
					break;
				}
				break;
			}
			if ((szPField & 0xF0) == 0x40 && (szPField & 0x08))
			{
				for (nOctets[0] = (szPField & 0x04) ? 3 : 2, nOctets[1] = 4, nOctets[2] = 2 * (szPField & 0x03); nCode.GetSize() == 1 + nOctets[0] + nOctets[1] + nOctets[2]; )
				{
					for (i = 0, j = nOctets[0], nTicks[0] = 0; i < j; i++)
					{
						nTicks[0] = (nTicks[0] << 8) + nCode.GetAt(1 + i);
						continue;
					}
					for (i = 0, j = nOctets[1], nTicks[1] = 0; i < j; i++)
					{
						nTicks[1] = (nTicks[1] << 8) + nCode.GetAt(1 + nOctets[0] + i);
						continue;
					}
					for (i = 0, j = nOctets[2], nTicks[2] = 0; i < j; i++)
					{
						nTicks[2] = (nTicks[2] << 8) + nCode.GetAt(1 + nOctets[0] + nOctets[1] + i);
						continue;
					}
					for (sTime[0].wYear = DATABASE_CCSDS_TIMEEPOCH, sTime[0].wMonth = sTime[0].wDay = 1, sTime[0].wHour = sTime[0].wMinute = sTime[0].wSecond = sTime[0].wMilliseconds = 0, sTime[1].wYear = 1970, sTime[1].wMonth = sTime[1].wDay = 1, sTime[1].wHour = sTime[1].wMinute = sTime[1].wSecond = sTime[1].wMilliseconds = 0; SystemTimeToFileTime(&sTime[0], &fTime[0]) && SystemTimeToFileTime(&sTime[1], &fTime[1]); ) return((((TIMETAG)fTime[0].dwHighDateTime << 32) + (TIMETAG)fTime[0].dwLowDateTime - ((TIMETAG)fTime[1].dwHighDateTime << 32) - (TIMETAG)fTime[1].dwLowDateTime) / 10 + (TIMETAG)SECONDSPERDAY*(TIMETAG)1000000 * (TIMETAG)nTicks[0] + (TIMETAG)1000 * (TIMETAG)nTicks[1] + (TIMETAG)nTicks[2] / (TIMETAG)(1 + ((1000000 - 1)*(nOctets[2] / 4))));
					break;
				}
			}
		}
		break;
		}
		case 1: if (nPFC == 1) cbTime = 6;
		case 2: if (nPFC == 2) cbTime = 8;
		{ for (i = 0, nTime.SetSize(1 + (j = cbTime)), nTime.SetAt(0, (BYTE)(0x48 + nPFC - 1)), j = (nCode.GetSize() == cbTime) ? j : -1; i < j; i++)
		{
			nTime.SetAt(1 + i, nCode.GetAt(i));
			continue;
		}
		return((i == j) ? ParseTime(nTime, nPTC, 0) : -1);
		}
		case 3: if (nPFC == 3) cbTime = 1;
		case 4: if (nPFC == 4) cbTime = 2;
		case 5: if (nPFC == 5) cbTime = 3;
		case 6: if (nPFC == 6) cbTime = 4;
		case 7: if (nPFC == 7) cbTime = 2;
		case 8: if (nPFC == 8) cbTime = 3;
		case 9: if (nPFC == 9) cbTime = 4;
		case 10: if (nPFC == 10) cbTime = 5;
		case 11: if (nPFC == 11) cbTime = 3;
		case 12: if (nPFC == 12) cbTime = 4;
		case 13: if (nPFC == 13) cbTime = 5;
		case 14: if (nPFC == 14) cbTime = 6;
		case 15: if (nPFC == 15) cbTime = 4;
		case 16: if (nPFC == 16) cbTime = 5;
		case 17: if (nPFC == 17) cbTime = 6;
		case 18: if (nPFC == 18) cbTime = 7;
		{ for (i = 0, nTime.SetSize(1 + (j = cbTime)), nTime.SetAt(0, (BYTE)(0x10 + nPFC - 3)), j = (nCode.GetSize() == cbTime) ? j : -1; i < j; i++)
		{
			nTime.SetAt(1 + i, nCode.GetAt(i));
			continue;
		}
		return((i == j) ? ParseTime(nTime, nPTC, 0) : -1);
		}
		case 30:
		{ for (nOctets[0] = nOctets[1] = 4; nCode.GetSize() == nOctets[0] + nOctets[1]; )
		{
			for (i = 0, j = nOctets[0], nTicks[0] = 0; i < j; i++)
			{
				nTicks[0] = (nTicks[0] << 8) + nCode.GetAt(i);
				continue;
			}
			for (i = 0, j = nOctets[1], nTicks[1] = 0; i < j; i++)
			{
				nTicks[1] = (nTicks[1] << 8) + nCode.GetAt(nOctets[0] + i);
				continue;
			}
			return((TIMETAG)1000000 * (TIMETAG)nTicks[0] + (TIMETAG)nTicks[1]);
		}
		}
		}
	}
	if (nPTC == 10)
	{
		switch (nPFC)
		{
		case 0:
		{ for (szPField = (nCode.GetSize() > 0) ? nCode.GetAt(0) : 0; (szPField & 0xF0) == 0x20; )
		{
			for (nOctets[0] = ((szPField & 0x0C) >> 2) + 1, nOctets[1] = szPField & 0x03; nCode.GetSize() == 1 + nOctets[0] + nOctets[1]; )
			{
				for (i = 0, j = nOctets[0], nTicks[0] = 0; i < j; i++)
				{
					nTicks[0] = (nTicks[0] << 8) + nCode.GetAt(1 + i);
					continue;
				}
				for (i = 0, j = nOctets[1], nTicks[1] = 0; i < j; i++)
				{
					nTicks[1] = (nTicks[1] << 8) + nCode.GetAt(1 + nOctets[0] + i);
					continue;
				}
				return(1000000 * (TIMETAG)nTicks[0] + (1000000 * (TIMETAG)nTicks[1]) / ((TIMETAG)1 << (8 * nOctets[1])));
			}
			break;
		}
		break;
		}
		case 3: if (nPFC == 3) cbTime = 1;
		case 4: if (nPFC == 4) cbTime = 2;
		case 5: if (nPFC == 5) cbTime = 3;
		case 6: if (nPFC == 6) cbTime = 4;
		case 7: if (nPFC == 7) cbTime = 2;
		case 8: if (nPFC == 8) cbTime = 3;
		case 9: if (nPFC == 9) cbTime = 4;
		case 10: if (nPFC == 10) cbTime = 5;
		case 11: if (nPFC == 11) cbTime = 3;
		case 12: if (nPFC == 12) cbTime = 4;
		case 13: if (nPFC == 13) cbTime = 5;
		case 14: if (nPFC == 14) cbTime = 6;
		case 15: if (nPFC == 15) cbTime = 4;
		case 16: if (nPFC == 16) cbTime = 5;
		case 17: if (nPFC == 17) cbTime = 6;
		case 18: if (nPFC == 18) cbTime = 7;
		{ for (i = 0, nTime.SetSize(1 + (j = cbTime)), nTime.SetAt(0, (BYTE)(0x20 + nPFC - 3)), j = (nCode.GetSize() == cbTime) ? j : -1; i < j; i++)
		{
			nTime.SetAt(1 + i, nCode.GetAt(i));
			continue;
		}
		return((i == j) ? ParseTime(nTime, nPTC, 0) : -1);
		}
		}
	}
	return -1;
}
BOOL CDatabaseEngine::ParseTime(TIMETAG tTime, INT nPTC, INT nPFC, CByteArray &nCode)
{
	TIMETAG  tDay;
	TIMETAG  tOffset;
	FILETIME  fTime[2];
	SYSTEMTIME  sTime[2];
	BOOL  bSuccess;

	for (nCode.RemoveAll(); nPTC == 9; )
	{
		for (sTime[0].wYear = DATABASE_CCSDS_TIMEEPOCH, sTime[0].wMonth = sTime[0].wDay = 1, sTime[0].wHour = sTime[0].wMinute = sTime[0].wSecond = sTime[0].wMilliseconds = 0, sTime[1].wYear = 1970, sTime[1].wMonth = sTime[1].wDay = 1, sTime[1].wHour = sTime[1].wMinute = sTime[1].wSecond = sTime[1].wMilliseconds = 0; SystemTimeToFileTime(&sTime[0], &fTime[0]) && SystemTimeToFileTime(&sTime[1], &fTime[1]); )
		{
			for (tOffset = (((TIMETAG)fTime[1].dwHighDateTime << 32) + (TIMETAG)fTime[1].dwLowDateTime - ((TIMETAG)fTime[0].dwHighDateTime << 32) - (TIMETAG)fTime[0].dwLowDateTime) / 10, tDay = (TIMETAG)1000000 * (TIMETAG)SECONDSPERDAY; nPFC == 0; )
			{
				bSuccess = EncodeValue(0x45, 8, FALSE, nCode);
				bSuccess &= EncodeValue((tTime + tOffset) / tDay, 24, TRUE, nCode);
				bSuccess &= EncodeValue(((tTime + tOffset) % tDay) / 1000, 32, TRUE, nCode);
				bSuccess &= EncodeValue(((tTime + tOffset) % tDay) % 1000, 16, TRUE, nCode);
				return bSuccess;
			}
			switch (nPFC)
			{
			case 1: return(EncodeValue((tTime + tOffset) / tDay, 16, FALSE, nCode) && EncodeValue(((tTime + tOffset) % tDay) / 1000, 32, TRUE, nCode));
			case 2: return(EncodeValue((tTime + tOffset) / tDay, 16, FALSE, nCode) && EncodeValue(((tTime + tOffset) % tDay) / 1000, 32, TRUE, nCode) && EncodeValue(((tTime + tOffset) % tDay) % 1000, 16, TRUE, nCode));
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
			case 14:
			case 15:
			case 16:
			case 17:
			case 18: return(EncodeValue((tTime + tOffset) / 1000000, ((nPFC + 1) / 4) * 8, FALSE, nCode) && ((nPFC + 1) % 4 == 0 || EncodeValue((((TIMETAG)1 << (((nPFC + 1) % 4) * 8))*((tTime + tOffset) % 1000000)) / 1000000, ((nPFC + 1) % 4) * 8, TRUE, nCode)));
			case 30: return(EncodeValue(tTime + tOffset, 64, FALSE, nCode));
			}
			break;
		}
		break;
	}
	if (nPTC == 10)
	{
		switch (nPFC)
		{
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
		case 16:
		case 17:
		case 18: return(EncodeValue(tTime / 1000000, ((nPFC + 1) / 4) * 8, FALSE, nCode) && ((nPFC + 1) % 4 == 0 || EncodeValue((((TIMETAG)1 << (((nPFC + 1) % 4) * 8))*(tTime % 1000000)) / 1000000, ((nPFC + 1) % 4) * 8, TRUE, nCode)));
		}
	}
	return FALSE;
}

ULONGLONG CDatabaseEngine::EncodeValue(UINT nType, ULONGLONG nAttributes, INT nWidth, ULONGLONG nValue, BOOL bTC)
{
	INT  nByte;
	INT  nBytes;
	BYTE  nByteBuffer[2];
	BYTE  nValueBuffer[sizeof(ULONGLONG)];

	if (!bTC && (nAttributes & (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX)) && (nAttributes & TMPARAMETER_FLAG_LITTLEENDIAN) && nWidth > 16)
	{
		for (nByte = 0, nBytes = ((nWidth - 1) / 8 + 1) / 2, CopyMemory(nValueBuffer, &nValue, sizeof(ULONGLONG)); nByte < nBytes; nByte++)
		{
			nByteBuffer[0] = nValueBuffer[sizeof(ULONGLONG) - nByte - 1];
			nByteBuffer[1] = nValueBuffer[sizeof(ULONGLONG) - (nWidth - 1) / 8 + nByte - 1];
			nValueBuffer[sizeof(ULONGLONG) - nByte - 1] = nByteBuffer[1];
			nValueBuffer[sizeof(ULONGLONG) - (nWidth - 1) / 8 + nByte - 1] = nByteBuffer[0];
		}
		CopyMemory(&nValue, nValueBuffer, sizeof(ULONGLONG));
	}
	return(((!bTC && (nAttributes & (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX))) || (bTC && (nAttributes & TCPARAMETER_CODING_SIGNEDINTEGER))) ? ((nWidth < 8 * sizeof(nValue) && (LONGLONG)nValue < 0) ? ((((ULONGLONG)1) << nWidth) + (LONGLONG)nValue) : nValue) : ((!bTC && (nAttributes & TMPARAMETER_CODING_INVERSEBITPATTERN)) ? (~nValue & ((((ULONGLONG)1) << (nWidth - 1)) + ((((ULONGLONG)1) << (nWidth - 1)) - 1))) : nValue));
}
ULONGLONG CDatabaseEngine::EncodeValue(UINT nType, ULONGLONG nAttributes, double fValue, BOOL bTC)
{
	INT  nPos;
	INT  nExponent;
	UINT  nsValue;
	float  fsValue;
	double  fNumber;
	double  fMantisse;
	ULONGLONG  nValue;

	if (((nType & DATABASE_TYPE_FLOATINGPOINTFORMAT_IEEE) && ((!bTC && (nAttributes & (TMPARAMETER_STANDARD_IEEE | TMPARAMETER_STANDARD_USAF)) == 0) || (bTC && (nAttributes & (TCPARAMETER_STANDARD_IEEE | TCPARAMETER_STANDARD_USAF)) == 0))) || (!bTC && (nAttributes & TMPARAMETER_STANDARD_IEEE)) || (bTC && (nAttributes & TCPARAMETER_STANDARD_IEEE)) || (!bTC && ((nAttributes & TMPARAMETER_NATURE_CONSTANT) || (nAttributes & (TMPARAMETER_NATURE_DERIVED | TMPARAMETER_NATURE_DERIVED_OL | TMPARAMETER_NATURE_DERIVED_SPEL | TMPARAMETER_NATURE_DERIVED_HARDCODED | TMPARAMETER_NATURE_DERIVED_SAVED)))))
	{
		if ((!bTC && ((nAttributes & TMPARAMETER_STANDARD_DOUBLEPRECISION) || (nAttributes & TMPARAMETER_NATURE_CONSTANT) || (nAttributes & (TMPARAMETER_NATURE_DERIVED | TMPARAMETER_NATURE_DERIVED_OL | TMPARAMETER_NATURE_DERIVED_SPEL | TMPARAMETER_NATURE_DERIVED_HARDCODED | TMPARAMETER_NATURE_DERIVED_SAVED)))) || (bTC && (nAttributes & TCPARAMETER_STANDARD_DOUBLEPRECISION)))
		{
			CopyMemory(&nValue, &fValue, sizeof(ULONGLONG));
			return nValue;
		}
		CopyMemory(&nsValue, &(fsValue = (float)fValue), sizeof(UINT));
		return nsValue;
	}
	if (((nType & DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF) && ((!bTC && (nAttributes & (TMPARAMETER_STANDARD_IEEE | TMPARAMETER_STANDARD_USAF)) == 0) || (bTC && (nAttributes & (TCPARAMETER_STANDARD_IEEE | TCPARAMETER_STANDARD_USAF)) == 0))) || (!bTC && (nAttributes & TMPARAMETER_STANDARD_USAF)) || (bTC && (nAttributes & TCPARAMETER_STANDARD_USAF)))
	{
		for (fNumber = fValue, nPos = 0, nExponent = 0; fabs(fNumber) > 1.0; nPos++)
		{
			fNumber = fValue / pow(2.0, (double)(nPos + 1));
			nExponent++;
		}
		if ((!bTC && (nAttributes & TMPARAMETER_STANDARD_DOUBLEPRECISION)) || (bTC && (nAttributes & TCPARAMETER_STANDARD_DOUBLEPRECISION)))
		{
			for (nPos = 0, nValue = (fValue < 0.0) ? (ULONGLONG)0x800000000000 : 0, fNumber += (fValue < 0.0) ? 1.0 : 0.0; nPos < 39; nPos++)
			{
				if ((fMantisse = pow(2.0, -((double)(nPos + 1)))) <= fNumber)
				{
					nValue += (nPos < 23) ? (((ULONGLONG)1) << (46 - nPos)) : (((ULONGLONG)1) << (38 - nPos));
					fNumber -= fMantisse;
				}
			}
			nValue |= (nExponent << 16);
			return nValue;
		}
		for (nPos = 0, nValue = (fValue < 0.0) ? 0x80000000 : 0, fNumber += (fValue < 0.0) ? 1.0 : 0.0; nPos < 23; nPos++)
		{
			if ((fMantisse = pow(2.0, -((double)(nPos + 1)))) <= fNumber)
			{
				nValue += ((ULONGLONG)1) << (30 - nPos);
				fNumber -= fMantisse;
			}
		}
		nValue |= nExponent;
		return nValue;
	}
	return 0;
}

ULONGLONG CDatabaseEngine::DecodeValue(UINT nType, ULONGLONG nAttributes, INT nWidth, ULONGLONG nCode, BOOL bTC)
{
	INT  nByte;
	INT  nBytes;
	BYTE  nByteBuffer[2];
	BYTE  nCodeBuffer[sizeof(ULONGLONG)];

	if (!bTC && (nAttributes & (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX)) && (nAttributes & TMPARAMETER_FLAG_LITTLEENDIAN) && nWidth > 16)
	{
		for (nByte = 0, nBytes = ((nWidth - 1) / 8 + 1) / 2, CopyMemory(nCodeBuffer, &nCode, sizeof(ULONGLONG)); nByte < nBytes; nByte++)
		{
			nByteBuffer[0] = nCodeBuffer[sizeof(ULONGLONG) - nByte - 1];
			nByteBuffer[1] = nCodeBuffer[sizeof(ULONGLONG) - (nWidth - 1) / 8 + nByte - 1];
			nCodeBuffer[sizeof(ULONGLONG) - nByte - 1] = nByteBuffer[1];
			nCodeBuffer[sizeof(ULONGLONG) - (nWidth - 1) / 8 + nByte - 1] = nByteBuffer[0];
		}
		CopyMemory(&nCode, nCodeBuffer, sizeof(ULONGLONG));
	}
	return(((!bTC && (nAttributes & (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX))) || (bTC && (nAttributes & TCPARAMETER_CODING_SIGNEDINTEGER))) ? ((nWidth < 8 * sizeof(nCode) && nCode >= (((ULONGLONG)1) << (nWidth - 1))) ? (nCode - (((ULONGLONG)1) << nWidth)) : nCode) : ((!bTC && (nAttributes & TMPARAMETER_CODING_INVERSEBITPATTERN)) ? (~nCode & ((((ULONGLONG)1) << (nWidth - 1)) + ((((ULONGLONG)1) << (nWidth - 1)) - 1))) : nCode));
}
double CDatabaseEngine::DecodeValue(UINT nType, ULONGLONG nAttributes, ULONGLONG nCode, BOOL bTC)
{
	INT  nPos;
	UINT  nsValue;
	float  fsValue;
	double  fValue;
	double  fFraction;
	double  fExponent;
	ULONGLONG  nMask;

	if (((nType & DATABASE_TYPE_FLOATINGPOINTFORMAT_IEEE) && ((!bTC && (nAttributes & (TMPARAMETER_STANDARD_IEEE | TMPARAMETER_STANDARD_USAF)) == 0) || (bTC && (nAttributes & (TCPARAMETER_STANDARD_IEEE | TCPARAMETER_STANDARD_USAF)) == 0))) || (!bTC && (nAttributes & TMPARAMETER_STANDARD_IEEE)) || (bTC && (nAttributes & TCPARAMETER_STANDARD_IEEE)) || (!bTC && ((nAttributes & TMPARAMETER_NATURE_CONSTANT) || (nAttributes & (TMPARAMETER_NATURE_DERIVED | TMPARAMETER_NATURE_DERIVED_OL | TMPARAMETER_NATURE_DERIVED_SPEL | TMPARAMETER_NATURE_DERIVED_HARDCODED | TMPARAMETER_NATURE_DERIVED_SAVED)))))
	{
		if ((!bTC && ((nAttributes & TMPARAMETER_STANDARD_DOUBLEPRECISION) || (nAttributes & TMPARAMETER_NATURE_CONSTANT) || (nAttributes & (TMPARAMETER_NATURE_DERIVED | TMPARAMETER_NATURE_DERIVED_OL | TMPARAMETER_NATURE_DERIVED_SPEL | TMPARAMETER_NATURE_DERIVED_HARDCODED | TMPARAMETER_NATURE_DERIVED_SAVED)))) || (bTC && (nAttributes & TCPARAMETER_STANDARD_DOUBLEPRECISION)))
		{
			CopyMemory(&fValue, &nCode, sizeof(double));
			return fValue;
		}
		CopyMemory(&fsValue, &(nsValue = (UINT)nCode), sizeof(float));
		return fsValue;
	}
	if (((nType & DATABASE_TYPE_FLOATINGPOINTFORMAT_USAF) && ((!bTC && (nAttributes & (TMPARAMETER_STANDARD_IEEE | TMPARAMETER_STANDARD_USAF)) == 0) || (bTC && (nAttributes & (TCPARAMETER_STANDARD_IEEE | TCPARAMETER_STANDARD_USAF)) == 0))) || (!bTC && (nAttributes & TMPARAMETER_STANDARD_USAF)) || (bTC && (nAttributes & TCPARAMETER_STANDARD_USAF)))
	{
		if ((!bTC && (nAttributes & TMPARAMETER_STANDARD_DOUBLEPRECISION)) || (bTC && (nAttributes & TCPARAMETER_STANDARD_DOUBLEPRECISION)))
		{
			for (nPos = 0, nMask = (ULONGLONG)0x400000000000, fFraction = (nCode & (ULONGLONG)0x800000000000) ? -1.0 : 0.0; nPos < 39; nPos++)
			{
				fFraction += (nCode & nMask) ? pow(2.0, -((double)(nPos + 1))) : 0.0;
				nMask >>= (nPos == 22) ? 9 : 1;
			}
			fExponent = pow(2.0, (double)((nCode >> 16) & 0xFF));
			return fFraction*fExponent;
		}
		for (nPos = 0, nMask = 0x40000000, fFraction = (nCode & 0x80000000) ? -1.0 : 0.0; nPos < 23; nPos++)
		{
			fFraction += (nCode & nMask) ? pow(2.0, -((double)(nPos + 1))) : 0.0;
			nMask >>= 1;
		}
		fExponent = pow(2.0, (double)(nCode & 0xFF));
		return fFraction*fExponent;
	}
	return 0.0;
}

ULONGLONG CDatabaseEngine::EncodeTime(TIMETAG tTime)
{
	return((ULONGLONG)tTime);
}

TIMETAG CDatabaseEngine::DecodeTime(ULONGLONG nCode)
{
	return((TIMETAG)nCode);
}

BOOL CDatabaseEngine::EncodeValue(ULONGLONG nValue, INT nWidth, BOOL bAppend, CByteArray &nCode)
{
	INT  i, j;
	INT  cbSize;

	for (i = 0, j = (nWidth > 0 && nWidth <= 8 * sizeof(ULONGLONG) && nWidth % 8 == 0) ? (nWidth / 8) : -1, nCode.SetSize((cbSize = (INT)(bAppend*nCode.GetSize()))); i < j; i++)
	{
		nCode.InsertAt(cbSize, (BYTE)(nValue & 0xFF));
		nValue >>= 8;
	}
	return((!nValue) ? (i == j) : FALSE);
}

BOOL CDatabaseEngine::ShowMessage(CONST EVENT_DESCRIPTOR nMessageID)
{
	return((m_pDatabaseMessagesIDProc != (DATABASEMESSAGESBYIDPROC)NULL) ? (*m_pDatabaseMessagesIDProc)(nMessageID) : FALSE);
}
BOOL CDatabaseEngine::ShowMessage(LPCTSTR pszMessage, BOOL bAudition)
{
	return((m_pDatabaseMessagesTextProc != (DATABASEMESSAGESBYTEXTPROC)NULL) ? (*m_pDatabaseMessagesTextProc)(pszMessage, bAudition) : FALSE);
}

BOOL CDatabaseEngine::ShowHelp(LPCTSTR pszTopic)
{
	return((m_pDatabaseHelpTopicProc != (DATABASEHELPBYTOPICPROC)NULL) ? (*m_pDatabaseHelpTopicProc)(pszTopic) : FALSE);
}

CString CDatabaseEngine::Required(CONST CTableViewCell *pCell) CONST
{
	return((!pCell || pCell->IsEnabled() || !pCell->GetText().IsEmpty()) ? STRING(IDS_DATABASE_DATAFLAG_REQUIRED) : STRING(IDS_DATABASE_DATAFLAG_NOTAPPLICABLE));
}

CString CDatabaseEngine::Optional(CONST CTableViewCell *pCell) CONST
{
	return((!pCell || pCell->IsEnabled() || !pCell->GetText().IsEmpty()) ? STRING(IDS_DATABASE_DATAFLAG_OPTIONAL) : STRING(IDS_DATABASE_DATAFLAG_NOTAPPLICABLE));
}

CString CDatabaseEngine::NotApplicable() CONST
{
	return STRING(IDS_DATABASE_DATAFLAG_NOTAPPLICABLE);
}

CString CDatabaseEngine::Char(INT nChars) CONST
{
	CString  szType;

	szType.Format(STRING(IDS_DATABASE_DATATYPE_CHAR), nChars);
	return szType;
}

CString CDatabaseEngine::Varchar(INT nChars) CONST
{
	CString  szType;

	szType.Format(STRING(IDS_DATABASE_DATATYPE_VARCHAR), nChars);
	return szType;
}

CString CDatabaseEngine::Text() CONST
{
	return STRING(IDS_DATABASE_DATATYPE_TEXT);
}

CString CDatabaseEngine::Integer() CONST
{
	return STRING(IDS_DATABASE_DATATYPE_INTEGER);
}

CString CDatabaseEngine::BigInt() CONST
{
	return STRING(IDS_DATABASE_DATATYPE_BIGINT);
}

CString CDatabaseEngine::SmallInt() CONST
{
	return STRING(IDS_DATABASE_DATATYPE_SMALLINT);
}

CString CDatabaseEngine::TinyInt() CONST
{
	return STRING(IDS_DATABASE_DATATYPE_TINYINT);
}

CString CDatabaseEngine::Float() CONST
{
	return STRING(IDS_DATABASE_DATATYPE_FLOAT);
}

CString CDatabaseEngine::Real() CONST
{
	return STRING(IDS_DATABASE_DATATYPE_REAL);
}

CString CDatabaseEngine::Double() CONST
{
	return STRING(IDS_DATABASE_DATATYPE_DOUBLE);
}

CString CDatabaseEngine::Numeric(INT nDigits, INT nPrecision) CONST
{
	CString  szType;

	szType.Format(STRING(IDS_DATABASE_DATATYPE_NUMERIC), nDigits, nPrecision);
	return szType;
}

CString CDatabaseEngine::Decimal(INT nDigits, INT nPrecision) CONST
{
	CString  szType;

	szType.Format(STRING(IDS_DATABASE_DATATYPE_DECIMAL), nDigits, nPrecision);
	return szType;
}

CString CDatabaseEngine::Binary(INT nDigits) CONST
{
	CString  szType;

	szType.Format(STRING(IDS_DATABASE_DATATYPE_BINARY), nDigits);
	return szType;
}

CString CDatabaseEngine::Varbinary(INT nDigits) CONST
{
	CString  szType;

	szType.Format(STRING(IDS_DATABASE_DATATYPE_VARBINARY), nDigits);
	return szType;
}

CString CDatabaseEngine::Bit() CONST
{
	return STRING(IDS_DATABASE_DATATYPE_BIT);
}

CString CDatabaseEngine::Date() CONST
{
	return STRING(IDS_DATABASE_DATATYPE_DATE);
}

CString CDatabaseEngine::Time() CONST
{
	return STRING(IDS_DATABASE_DATATYPE_TIME);
}

CString CDatabaseEngine::Timestamp() CONST
{
	return STRING(IDS_DATABASE_DATATYPE_TIMESTAMP);
}

CDatabaseEngine *CDatabaseEngine::GetDatabaseEngine() CONST
{
	return m_pDatabaseEngine;
}

CDatabase *CDatabaseEngine::GetDBMS() CONST
{
	return m_pDatabase;
}


/////////////////////////////////////////////////////////////////////////////
// CDatabases

BOOL CDatabases::SetDatabases(CONST CDatabaseProfiles &pDatabases)
{
	CByteArray  nDatabaseInfo;

	return(((pDatabases.GetSize() > 0 && pDatabases.Map(nDatabaseInfo) && SetMachineInfo(QuerySubKey(), STRING(IDS_REG_SUBKEYVALUE_DATABASEINFO), REG_BINARY, nDatabaseInfo.GetData(), (INT)nDatabaseInfo.GetSize()) && SecureSubKey(QuerySubKey())) || (!pDatabases.GetSize() && SetMachineInfo(QuerySubKey(), STRING(IDS_REG_SUBKEYVALUE_DATABASEINFO)))) ? TRUE : FALSE);
}

BOOL CDatabases::GetDatabases(CDatabaseProfiles &pDatabases, BOOL bAll) CONST
{
	INT  nSize;
	INT  nProfile;
	INT  nProfiles;
	DWORD  dwType;
	CTimeKey  tValidity[2];
	CByteArray  nDatabaseInfo;
	CDatabaseProfileInfo  *pDatabaseProfileInfo;

	for (nSize = GetMachineInfo(QuerySubKey(), STRING(IDS_REG_SUBKEYVALUE_DATABASEINFO)), pDatabases.RemoveAll(), nDatabaseInfo.SetSize(max(nSize, 0)); nSize > 0 && nDatabaseInfo.GetSize() == nSize; )
	{
		if (GetMachineInfo(QuerySubKey(), STRING(IDS_REG_SUBKEYVALUE_DATABASEINFO), &dwType, nDatabaseInfo.GetData(), nSize) == nSize  &&  pDatabases.Unmap(nDatabaseInfo))
		{
			for (nProfile = 0, nProfiles = (INT)pDatabases.GetSize(); nProfile < nProfiles; nProfile++)
			{
				if ((pDatabaseProfileInfo = pDatabases.GetAt(nProfile)) != (CDatabaseProfileInfo *)NULL)
				{
					if (!bAll  &&  !pDatabaseProfileInfo->GetValidity(tValidity[0], tValidity[1]))
					{
						pDatabases.RemoveAt(nProfile);
						delete pDatabaseProfileInfo;
						nProfiles--;
						nProfile--;
					}
				}
			}
			return TRUE;
		}
		return FALSE;
	}
	return((nSize <= 0) ? TRUE : FALSE);
}

INT CDatabases::EnumDatabases(CStringArray &szDatabases, BOOL bAll) CONST
{
	INT  nDatabase;
	INT  nDatabases;
	CDatabaseProfiles  pDatabases;
	CDatabaseProfileInfo  *pDatabaseProfileInfo;

	for (nDatabase = 0, nDatabases = (GetDatabases(pDatabases, bAll)) ? (INT)pDatabases.GetSize() : 0, szDatabases.RemoveAll(); nDatabase < nDatabases; nDatabase++)
	{
		if ((pDatabaseProfileInfo = pDatabases.GetAt(nDatabase)))
		{
			szDatabases.Add(pDatabaseProfileInfo->GetName());
			continue;
		}
	}
	return((INT)szDatabases.GetSize());
}

BOOL CDatabases::DeleteDatabases()
{
	return DeleteSubKey(QuerySubKey());
}

CString CDatabases::QuerySubKey() CONST
{
	CString  szSubKey;
	CVersionInfo  cVersionInfo;

	szSubKey = STRING(IDS_REG_SUBKEYPART_ROOTKEY) + cVersionInfo.QueryCompanyName();
	szSubKey += STRING(IDS_REG_SUBKEYPART_DELIMITER) + cVersionInfo.QueryProductName();
	szSubKey += STRING(IDS_REG_SUBKEYPART_DELIMITER);
	szSubKey += STRING(IDS_REG_SUBKEYPART_DATABASES);
	return szSubKey;
}

BOOL CDatabases::SecureSubKey(LPCTSTR pszSubKey)
{
	INT  nSubKey;
	INT  nSubKeys;
	CString  szSubKey;
	CStringArray  szSubKeys;
	CSecurityDescriptor  cSecurityDescriptor;

	for (nSubKey = 0, nSubKeys = (cSecurityDescriptor.SetRightsOfSystem(KEY_ALL_ACCESS) && cSecurityDescriptor.SetRightsOfOwner(KEY_ALL_ACCESS) && cSecurityDescriptor.SetRightsOfAdministrators(KEY_ALL_ACCESS) && cSecurityDescriptor.SetRightsOfEveryone(KEY_READ)) ? EnumMachineSubKeys(pszSubKey, szSubKeys) : -1; nSubKey < nSubKeys; nSubKey++)
	{
		if (SetMachineSecurity((szSubKey = CString(pszSubKey) + STRING(IDS_REG_SUBKEYPART_DELIMITER) + szSubKeys.GetAt(nSubKey)), cSecurityDescriptor) && SecureSubKey(szSubKey)) continue;
		break;
	}
	return(((!nSubKeys || nSubKey == nSubKeys) && SetMachineSecurity(pszSubKey, cSecurityDescriptor)) ? TRUE : FALSE);
}

BOOL CDatabases::DeleteSubKey(LPCTSTR pszSubKey)
{
	INT  nSubKey;
	INT  nSubKeys;
	CStringArray  szSubKeys;

	for (nSubKey = 0, nSubKeys = EnumMachineSubKeys(pszSubKey, szSubKeys); nSubKey < nSubKeys; nSubKey++)
	{
		if (!DeleteSubKey(CString(pszSubKey) + STRING(IDS_REG_SUBKEYPART_DELIMITER) + szSubKeys.GetAt(nSubKey))) break;
		continue;
	}
	return((nSubKey == nSubKeys  &&  SetMachineInfo(pszSubKey)) ? TRUE : FALSE);
}
