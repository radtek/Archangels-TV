// TCPROCEDURE.CPP : Telecommand Procedure Display Related Interface Definition.
//
// This is a part of the SatView(TM) spacecraft operating system.
// Copyright© 1992-2016 by BINARY SPACE, Switzerland.
// All rights reserved.
//
// This source code contains the definition of the telecommand
// procedure display related interface.
//
/**********************************************************************
* Modifications:                                                     *
*====================================================================*
* Date       | Release | Comments                                    *
*------------|---------|---------------------------------------------*
* 2006/06/09 | 1.00.00 | Initial creation. [AW]                      *
**********************************************************************/

#include "Editor.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif


static UINT BASED_CODE nStatusBarIndicators[] =
{
	ID_TCPROCEDURE_STATUSBAR_STEPSPANE,
	ID_TCPROCEDURE_STATUSBAR_MODEPANE,
	ID_TCPROCEDURE_STATUSBAR_TYPEPANE,
	ID_TCPROCEDURE_STATUSBAR_NAMEPANE
};



/////////////////////////////////////////////////////////////////////////////
// CTCProcedureItem

IMPLEMENT_DYNCREATE(CTCProcedureItem, CObject)

CTCProcedureItem::CTCProcedureItem() : CObject()
{
	m_tTime[0] = 0;
	m_tTime[1] = 0;
	m_tTime[2] = 0;
	m_tTime[3] = 0;
	m_dwOffset[0] = 0;
	m_dwOffset[1] = 0;
	m_bExeEarlier = FALSE;
	m_nEntries = 0;
	m_nEntryID = -1;
	m_nBlockID = -1;
	m_nAckFlags = 0;
	m_bFlag[0] = FALSE;
	m_bFlag[1] = FALSE;
	m_bFlag[2] = FALSE;
	m_bFlag[3] = FALSE;
	m_hEvent[0] = (HANDLE)NULL;
	m_hEvent[1] = (HANDLE)NULL;
	m_nStages = 0;
}
CTCProcedureItem::CTCProcedureItem(LPCTSTR pszThread, LPCTSTR pszStep, LPCTSTR pszSequence, CONST CDatabaseTCFunction *pDatabaseTCFunction, CONST CDatabaseTCPacket *pDatabaseTCPacket, BOOL bProcedure, INT nEntry, INT nEntries, CONST CTimeTag &tScheduleTime, CONST CTimeTag &tReleaseTime, DWORD dwReleaseOffset, CONST CTimeTag &tExecutionTime, DWORD dwExecutionOffset, BOOL bEarlierExecution, INT nBlockID, BOOL bGrouped, BOOL bCritical, ULONGLONG nAckFlags, HANDLE hSuccess, HANDLE hFailure) : CObject()
{
	m_szName[0] = pszThread;
	m_szName[1] = pszStep;
	m_szName[2] = pszSequence;
	m_cDatabaseTCFunction.Copy(pDatabaseTCFunction);
	m_cDatabaseTCPacket.Copy(pDatabaseTCPacket);
	m_tTime[0] = tScheduleTime;
	m_tTime[1] = tReleaseTime;
	m_tTime[2] = tExecutionTime;
	m_tTime[3] = CTimeTag(0);
	m_dwOffset[0] = dwReleaseOffset;
	m_dwOffset[1] = dwExecutionOffset;
	m_bExeEarlier = bEarlierExecution;
	m_nEntries = nEntries;
	m_nEntryID = nEntry;
	m_nBlockID = nBlockID;
	m_nAckFlags = nAckFlags;
	m_bFlag[0] = bProcedure;
	m_bFlag[1] = bGrouped;
	m_bFlag[2] = bCritical;
	m_bFlag[3] = FALSE;
	m_hEvent[0] = hSuccess;
	m_hEvent[1] = hFailure;
	m_nStages = 0;
}

VOID CTCProcedureItem::SetThread(LPCTSTR pszThread)
{
	m_szName[0] = pszThread;
}

CString CTCProcedureItem::GetThread() CONST
{
	return m_szName[0];
}

VOID CTCProcedureItem::SetStep(LPCTSTR pszStep)
{
	m_szName[1] = pszStep;
}

CString CTCProcedureItem::GetStep() CONST
{
	return m_szName[1];
}

VOID CTCProcedureItem::SetSequence(LPCTSTR pszSequence)
{
	m_szName[2] = pszSequence;
}

CString CTCProcedureItem::GetSequence() CONST
{
	return m_szName[2];
}

BOOL CTCProcedureItem::SetFunction(CONST CDatabaseTCFunction *pDatabaseTCFunction)
{
	return m_cDatabaseTCFunction.Copy(pDatabaseTCFunction);
}

BOOL CTCProcedureItem::GetFunction(CDatabaseTCFunction *pDatabaseTCFunction) CONST
{
	return pDatabaseTCFunction->Copy(&m_cDatabaseTCFunction);
}
CString CTCProcedureItem::GetFunction() CONST
{
	return m_cDatabaseTCFunction.GetName();
}

BOOL CTCProcedureItem::SetPacket(CONST CDatabaseTCPacket *pDatabaseTCPacket)
{
	return m_cDatabaseTCPacket.Copy(pDatabaseTCPacket);
}

BOOL CTCProcedureItem::GetPacket(CDatabaseTCPacket *pDatabaseTCPacket) CONST
{
	return pDatabaseTCPacket->Copy(&m_cDatabaseTCPacket);
}
CString CTCProcedureItem::GetPacket() CONST
{
	return m_cDatabaseTCPacket.GetTag();
}

VOID CTCProcedureItem::SetEntryID(INT nID)
{
	m_nEntryID = nID;
}

INT CTCProcedureItem::GetEntryID() CONST
{
	return m_nEntryID;
}

VOID CTCProcedureItem::SetEntryCount(INT nCount)
{
	m_nEntries = nCount;
}

INT CTCProcedureItem::GetEntryCount() CONST
{
	return m_nEntries;
}

VOID CTCProcedureItem::SetScheduleTime(CONST CTimeTag &tTime)
{
	m_tTime[0] = tTime;
}

CTimeTag CTCProcedureItem::GetScheduleTime() CONST
{
	return m_tTime[0];
}

VOID CTCProcedureItem::SetReleaseTime(CONST CTimeTag &tTime)
{
	m_tTime[1] = tTime;
}

CTimeTag CTCProcedureItem::GetReleaseTime() CONST
{
	return m_tTime[1];
}

VOID CTCProcedureItem::SetReleaseTimeOffset(DWORD dwOffset)
{
	m_dwOffset[0] = dwOffset;
}

DWORD CTCProcedureItem::GetReleaseTimeOffset() CONST
{
	return m_dwOffset[0];
}

VOID CTCProcedureItem::SetExecutionTime(CONST CTimeTag &tTime)
{
	m_tTime[2] = tTime;
}

CTimeTag CTCProcedureItem::GetExecutionTime() CONST
{
	return m_tTime[2];
}

VOID CTCProcedureItem::SetExecutionTimeOffset(DWORD dwOffset, BOOL bEarlier)
{
	m_dwOffset[1] = dwOffset;
	m_bExeEarlier = bEarlier;
}

DWORD CTCProcedureItem::GetExecutionTimeOffset(BOOL &bEarlier) CONST
{
	bEarlier = m_bExeEarlier;
	return m_dwOffset[1];
}
DWORD CTCProcedureItem::GetExecutionTimeOffset() CONST
{
	return m_dwOffset[1];
}

BOOL CTCProcedureItem::IsEarlierExecutionTimeOffset() CONST
{
	return m_bExeEarlier;
}

VOID CTCProcedureItem::SetBlockID(INT nID)
{
	m_nBlockID = nID;
}

INT CTCProcedureItem::GetBlockID() CONST
{
	return m_nBlockID;
}

VOID CTCProcedureItem::SetProcedureFlag(BOOL bFlag)
{
	m_bFlag[0] = bFlag;
}

BOOL CTCProcedureItem::GetProcedureFlag() CONST
{
	return m_bFlag[0];
}

VOID CTCProcedureItem::SetGroupFlag(BOOL bFlag)
{
	m_bFlag[1] = bFlag;
}

BOOL CTCProcedureItem::GetGroupFlag() CONST
{
	return m_bFlag[1];
}

VOID CTCProcedureItem::SetCriticalFlag(BOOL bFlag)
{
	m_bFlag[2] = bFlag;
}

BOOL CTCProcedureItem::GetCriticalFlag() CONST
{
	return m_bFlag[2];
}

VOID CTCProcedureItem::SetAckFlags(ULONGLONG nFlags)
{
	m_nAckFlags = nFlags;
}

ULONGLONG CTCProcedureItem::GetAckFlags() CONST
{
	return m_nAckFlags;
}

VOID CTCProcedureItem::SetVerificationTime(CONST CTimeTag &tTime)
{
	m_tTime[3] = tTime;
}

CTimeTag CTCProcedureItem::GetVerificationTime() CONST
{
	return m_tTime[3];
}

VOID CTCProcedureItem::SetVerificationFlag(BOOL bFlag)
{
	m_bFlag[3] = bFlag;
}

BOOL CTCProcedureItem::GetVerificationFlag() CONST
{
	return m_bFlag[3];
}

VOID CTCProcedureItem::SetVerificationStages(UINT nStages)
{
	m_nStages = nStages;
}

UINT CTCProcedureItem::GetVerificationStages() CONST
{
	return m_nStages;
}

VOID CTCProcedureItem::SetHandles(HANDLE hSuccess, HANDLE hFailure)
{
	m_hEvent[0] = hSuccess;
	m_hEvent[1] = hFailure;
}

BOOL CTCProcedureItem::GetHandles(HANDLE &hSuccess, HANDLE &hFailure) CONST
{
	hSuccess = m_hEvent[0];
	hFailure = m_hEvent[1];
	return((hSuccess != (HANDLE)NULL  &&  hFailure != (HANDLE)NULL) ? TRUE : FALSE);
}

VOID CTCProcedureItem::Copy(CONST CTCProcedureItem *pItem)
{
	m_szName[0] = pItem->m_szName[0];
	m_szName[1] = pItem->m_szName[1];
	m_szName[2] = pItem->m_szName[2];
	m_cDatabaseTCFunction.Copy(&pItem->m_cDatabaseTCFunction);
	m_cDatabaseTCPacket.Copy(&pItem->m_cDatabaseTCPacket);
	m_tTime[0] = pItem->m_tTime[0];
	m_tTime[1] = pItem->m_tTime[1];
	m_tTime[2] = pItem->m_tTime[2];
	m_tTime[3] = pItem->m_tTime[3];
	m_dwOffset[0] = pItem->m_dwOffset[0];
	m_dwOffset[1] = pItem->m_dwOffset[1];
	m_bExeEarlier = pItem->m_bExeEarlier;
	m_nEntries = pItem->m_nEntries;
	m_nEntryID = pItem->m_nEntryID;
	m_nBlockID = pItem->m_nBlockID;
	m_bFlag[0] = pItem->m_bFlag[0];
	m_bFlag[1] = pItem->m_bFlag[1];
	m_bFlag[2] = pItem->m_bFlag[2];
	m_bFlag[3] = pItem->m_bFlag[3];
	m_nAckFlags = pItem->m_nAckFlags;
	m_nStages = pItem->m_nStages;
	m_hEvent[0] = pItem->m_hEvent[0];
	m_hEvent[1] = pItem->m_hEvent[1];
}

BOOL CTCProcedureItem::Compare(CONST CTCProcedureItem *pItem) CONST
{
	return((pItem->m_szName[0] == m_szName[0] && pItem->m_szName[1] == m_szName[1] && pItem->m_szName[2] == m_szName[2] && pItem->m_cDatabaseTCFunction.Compare(&m_cDatabaseTCFunction) && pItem->m_cDatabaseTCPacket.Compare(&m_cDatabaseTCPacket) && pItem->m_tTime[0] == m_tTime[0] && pItem->m_tTime[1] == m_tTime[1] && pItem->m_tTime[2] == m_tTime[2] && pItem->m_tTime[3] == m_tTime[3] && pItem->m_dwOffset[0] == m_dwOffset[0] && pItem->m_dwOffset[1] == m_dwOffset[1] && pItem->m_bExeEarlier == m_bExeEarlier  &&  pItem->m_nEntries == m_nEntries  &&  pItem->m_nEntryID == m_nEntryID  &&  pItem->m_nBlockID == m_nBlockID  &&  pItem->m_bFlag[0] == m_bFlag[0] && pItem->m_bFlag[1] == m_bFlag[1] && pItem->m_bFlag[2] == m_bFlag[2] && pItem->m_bFlag[3] == m_bFlag[3] && pItem->m_nAckFlags == m_nAckFlags  &&  pItem->m_nStages == m_nStages  &&  pItem->m_hEvent[0] == m_hEvent[0] && pItem->m_hEvent[1] == m_hEvent[1]) ? TRUE : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureItems

CTCProcedureItems::CTCProcedureItems() : CPtrArray()
{
	return;
}

CTCProcedureItems::~CTCProcedureItems()
{
	RemoveAll();
}

INT CTCProcedureItems::Add(CTCProcedureItem *pItem)
{
	return((INT)CPtrArray::Add(pItem));
}

INT CTCProcedureItems::Find(LPCTSTR pszThread, LPCTSTR pszStep, LPCTSTR pszSequence, LPCTSTR pszFunction, INT nEntry, CONST CTimeTag &tScheduleTime) CONST
{
	INT  nIndex;
	CTCProcedureItem  *pItem;

	return(((pItem = GetAt((nIndex = Find(pszThread, pszStep, pszSequence, nEntry, tScheduleTime)))) && pItem->GetFunction() == pszFunction) ? nIndex : -1);
}
INT CTCProcedureItems::Find(LPCTSTR pszThread, LPCTSTR pszStep, LPCTSTR pszSequence, INT nEntry, CONST CTimeTag &tScheduleTime) CONST
{
	INT  nItem;
	INT  nItems;
	CTCProcedureItem  *pItem;

	for (nItem = Find(pszThread, pszStep, pszSequence, tScheduleTime), nItems = (INT)GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = GetAt(nItem)) && pItem->GetThread() == pszThread  &&  pItem->GetStep() == pszStep  &&  pItem->GetSequence() == pszSequence  &&  pItem->GetEntryID() == nEntry  &&  pItem->GetScheduleTime() == tScheduleTime) break;
		continue;
	}
	return((nItem < nItems) ? nItem : -1);
}
INT CTCProcedureItems::Find(LPCTSTR pszThread, LPCTSTR pszStep, LPCTSTR pszSequence, CONST CTimeTag &tScheduleTime) CONST
{
	INT  nItem;
	INT  nItems;
	CTCProcedureItem  *pItem;

	for (nItem = 0, nItems = (INT)GetSize(); nItem < nItems; nItem++)
	{
		if ((pItem = GetAt(nItem)) && pItem->GetThread() == pszThread  &&  pItem->GetStep() == pszStep  &&  pItem->GetSequence() == pszSequence  &&  pItem->GetScheduleTime() == tScheduleTime) break;
		continue;
	}
	return((nItem < nItems) ? nItem : -1);
}

INT CTCProcedureItems::Collect(INT nIndex, CUIntArray &nItemIDs) CONST
{
	INT  nItem;
	INT  nItems;
	CTCProcedureItem  *pItem[3];

	for (nItemIDs.RemoveAll(); (pItem[0] = GetAt(nIndex)); )
	{
		for (nItem = (!pItem[0]->GetSequence().IsEmpty()) ? Find(pItem[0]->GetThread(), pItem[0]->GetStep(), pItem[0]->GetSequence(), pItem[0]->GetScheduleTime()) : -1, nItems = (INT)GetSize(); nItem < nItems && pItem[0]->GetEntryCount() >(INT) nItemIDs.GetSize(); nItem++)
		{
			if ((pItem[1] = GetAt(nItem)) && pItem[0]->GetThread() == pItem[1]->GetThread() && pItem[0]->GetStep() == pItem[1]->GetStep() && pItem[0]->GetSequence() == pItem[1]->GetSequence() && pItem[0]->GetScheduleTime() == pItem[1]->GetScheduleTime())
			{
				nItemIDs.Add(nItem);
				continue;
			}
		}
		if (pItem[0]->GetSequence().IsEmpty())
		{
			for (nItem = nIndex; nItem >= 0; nItem--)
			{
				if ((pItem[1] = GetAt(nItem)) && pItem[1]->GetGroupFlag()) continue;
				if ((pItem[2] = GetAt(nItem - 1)) && pItem[1]->GetBlockID() >= 0 && pItem[2]->GetBlockID() >= 0) continue;
				break;
			}
			for (; nItem < nItems; nItem++)
			{
				if ((pItem[1] = GetAt(nItem)) && (pItem[1]->GetGroupFlag() || pItem[1]->GetBlockID() >= 0))
				{
					nItemIDs.Add(nItem);
					continue;
				}
				if ((pItem[2] = GetAt(nItem + 1)) && pItem[2]->GetGroupFlag())
				{
					nItemIDs.Add(nItem);
					continue;
				}
				for (; nItem == nIndex; )
				{
					nItemIDs.Add(nItem);
					break;
				}
				break;
			}
		}
		break;
	}
	return((INT)nItemIDs.GetSize());
}

CTCProcedureItem *CTCProcedureItems::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCProcedureItem *)CPtrArray::GetAt(nIndex) : (CTCProcedureItem *)NULL);
}

CTCProcedureItem *CTCProcedureItems::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCProcedureItem *)CPtrArray::GetAt(nIndex) : (CTCProcedureItem *)NULL);
}

VOID CTCProcedureItems::RemoveAll()
{
	INT  nItem;
	INT  nItems;

	for (nItem = 0, nItems = (INT)GetSize(); nItem < nItems; nItem++)
	{
		delete GetAt(nItem);
		RemoveAt(nItem);
		nItems--;
		nItem--;
	}
}

BOOL CTCProcedureItems::Copy(CONST CTCProcedureItems *pItems)
{
	INT  nItem;
	INT  nItems;
	CTCProcedureItem  *pItem;

	for (nItem = 0, nItems = (INT)pItems->GetSize(), RemoveAll(); nItem < nItems; nItem++)
	{
		if ((pItem = new CTCProcedureItem) != (CTCProcedureItem *)NULL)
		{
			pItem->Copy(pItems->GetAt(nItem));
			InsertAt(nItem, pItem, 1);
			continue;
		}
		break;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}

BOOL CTCProcedureItems::Compare(CONST CTCProcedureItems *pItems) CONST
{
	INT  nItem;
	INT  nItems;
	CTCProcedureItem  *pItem;

	for (nItem = 0, nItems = (pItems->GetSize() == GetSize()) ? (INT)GetSize() : -1; nItem < nItems; nItem++)
	{
		if ((pItem = pItems->GetAt(nItem)) && pItem->Compare(GetAt(nItem))) continue;
		break;
	}
	return((nItem == nItems) ? TRUE : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureDocumentUndoItem

IMPLEMENT_DYNCREATE(CTCProcedureDocumentUndoItem, CObject)

CTCProcedureDocumentUndoItem::CTCProcedureDocumentUndoItem() : CObject()
{
	m_nAction = TCPROCEDUREDOCUMENTUNDOITEM_ACTION_NONE;
	m_bCollected = FALSE;
}

CTCProcedureDocumentUndoItem::~CTCProcedureDocumentUndoItem()
{
	return;
}

BOOL CTCProcedureDocumentUndoItem::SetInfo(UINT nAction, CONST CTCProcedureDocumentItem *pStep, CONST CTCProcedureDocumentItem *pOldStep)
{
	CTCProcedureDocumentItem  cStep;

	m_nAction = nAction;
	return((((!pStep  &&  m_cStep[0].Copy(&cStep)) || (pStep != (CTCProcedureDocumentItem *)NULL  &&  m_cStep[0].Copy(pStep))) && ((!pOldStep  &&  m_cStep[1].Copy(&cStep)) || (pOldStep != (CTCProcedureDocumentItem *)NULL  &&  m_cStep[1].Copy(pOldStep)))) ? TRUE : FALSE);
}

UINT CTCProcedureDocumentUndoItem::GetInfo(CTCProcedureDocumentItem *pStep, CTCProcedureDocumentItem *pOldStep) CONST
{
	return(((!pStep || pStep->Copy(&m_cStep[0])) && (!pOldStep || pOldStep->Copy(&m_cStep[1]))) ? m_nAction : TCPROCEDUREDOCUMENTUNDOITEM_ACTION_NONE);
}

VOID CTCProcedureDocumentUndoItem::Collect(BOOL bEnable)
{
	m_bCollected = bEnable;
}

BOOL CTCProcedureDocumentUndoItem::IsCollected() CONST
{
	return m_bCollected;
}

BOOL CTCProcedureDocumentUndoItem::Copy(CONST CTCProcedureDocumentUndoItem *pItem)
{
	m_nAction = pItem->m_nAction;
	m_bCollected = pItem->m_bCollected;
	return m_cStep[0].Copy(&pItem->m_cStep[0]) && m_cStep[1].Copy(&pItem->m_cStep[1]);
}

BOOL CTCProcedureDocumentUndoItem::Compare(CONST CTCProcedureDocumentUndoItem *pItem) CONST
{
	return((pItem->m_nAction == m_nAction  &&  pItem->m_cStep[0].Compare(&m_cStep[0]) && pItem->m_cStep[1].Compare(&m_cStep[1]) && pItem->m_bCollected == m_bCollected) ? TRUE : FALSE);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureDocumentUndoList

CTCProcedureDocumentUndoList::CTCProcedureDocumentUndoList() : CPtrArray()
{
	m_nIndex[0] = -1;
	m_nIndex[1] = -1;
	m_bLocked = 0;
}

CTCProcedureDocumentUndoList::~CTCProcedureDocumentUndoList()
{
	Reset();
}

BOOL CTCProcedureDocumentUndoList::Add(CONST CTCProcedureDocumentUndoItem *pItem)
{
	INT  nItem;
	INT  nItems;
	CTCProcedureDocumentUndoItem  *pUndoItem;

	if (!IsLocked())
	{
		if (((pUndoItem = GetAt(m_nIndex[0])) && !pUndoItem->Compare(pItem)) || m_nIndex[0] < 0)
		{
			for (nItem = m_nIndex[0] + 1, nItems = (INT)GetSize(); nItem < nItems; nItem++)
			{
				delete GetAt(nItem);
				RemoveAt(nItem);
				nItems--;
				nItem--;
			}
			if ((pUndoItem = new CTCProcedureDocumentUndoItem))
			{
				for (pUndoItem->Copy(pItem); CPtrArray::Add(pUndoItem) >= 0; )
				{
					m_nIndex[1] = ++m_nIndex[0] + 1;
					return TRUE;
				}
				delete pUndoItem;
			}
		}
	}
	return FALSE;
}

BOOL CTCProcedureDocumentUndoList::Undo(CTCProcedureDocumentUndoItem *pItem)
{
	CTCProcedureDocumentUndoItem  *pUndoItem;

	if ((pUndoItem = GetAt(m_nIndex[0])))
	{
		pItem->Copy(pUndoItem);
		m_nIndex[1] = m_nIndex[0];
		m_nIndex[0]--;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureDocumentUndoList::Redo(CTCProcedureDocumentUndoItem *pItem)
{
	CTCProcedureDocumentUndoItem  *pUndoItem;

	if ((pUndoItem = GetAt(m_nIndex[1])))
	{
		pItem->Copy(pUndoItem);
		m_nIndex[0] = m_nIndex[1];
		m_nIndex[1]++;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureDocumentUndoList::CanUndo(BOOL bCollected) CONST
{
	CTCProcedureDocumentUndoItem  *pUndoItem;

	return((m_nIndex[0] >= 0 && (!bCollected || ((pUndoItem = GetAt(m_nIndex[0])) && pUndoItem->IsCollected()))) ? TRUE : FALSE);
}

BOOL CTCProcedureDocumentUndoList::CanRedo(BOOL bCollected) CONST
{
	CTCProcedureDocumentUndoItem  *pUndoItem;

	return((m_nIndex[1] < GetSize() && GetSize() > 0 && (!bCollected || ((pUndoItem = GetAt(m_nIndex[1] - 1)) && pUndoItem->IsCollected()))) ? TRUE : FALSE);
}

CTCProcedureDocumentUndoItem *CTCProcedureDocumentUndoList::GetAt(INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCProcedureDocumentUndoItem *)CPtrArray::GetAt(nIndex) : (CTCProcedureDocumentUndoItem *)NULL);
}

CTCProcedureDocumentUndoItem *CTCProcedureDocumentUndoList::operator[](INT nIndex) CONST
{
	return((nIndex >= 0 && nIndex < GetSize()) ? (CTCProcedureDocumentUndoItem *)CPtrArray::GetAt(nIndex) : (CTCProcedureDocumentUndoItem *)NULL);
}

VOID CTCProcedureDocumentUndoList::Reset()
{
	INT  nItem;
	INT  nItems;

	for (nItem = 0, nItems = (INT)GetSize(), m_nIndex[0] = m_nIndex[1] = -1; nItem < nItems; nItem++)
	{
		delete GetAt(nItem);
		RemoveAt(nItem);
		nItems--;
		nItem--;
	}
}

VOID CTCProcedureDocumentUndoList::Lock()
{
	m_bLocked++;
}

BOOL CTCProcedureDocumentUndoList::IsLocked() CONST
{
	return((m_bLocked > 0) ? TRUE : FALSE);
}

VOID CTCProcedureDocumentUndoList::Unlock()
{
	m_bLocked--;
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureSaveDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedureSaveDialog, CDisplayDialog)

CTCProcedureSaveDialog::CTCProcedureSaveDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedureSaveDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedureSaveDialog::Create(CWnd *pParentWnd)
{
	return CDisplayDialog::Create(pParentWnd, CTCProcedureSaveDialog::IDD);
}

BOOL CTCProcedureSaveDialog::Initialize()
{
	m_pDatabaseTCProcedures.Copy(GetDatabase()->GetTCProcedures());
	return TRUE;
}

CTCProcedureWnd *CTCProcedureSaveDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCProcedureSaveDialog::EnumProcedures()
{
	INT  nColumn;
	INT  nColumns;
	INT  nProcedure;
	INT  nProcedures;
	CString  szItem;
	CDatabaseTCProcedure  *pDatabaseTCProcedure;

	for (nProcedure = 0, nProcedures = (INT)m_pDatabaseTCProcedures.GetSize(); nProcedure < nProcedures; nProcedure++)
	{
		if ((pDatabaseTCProcedure = m_pDatabaseTCProcedures.GetAt(nProcedure)))
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDURESAVEDIALOG_DIRECTORYTITLEITEM_NAME); )
				{
					szItem = pDatabaseTCProcedure->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDURESAVEDIALOG_DIRECTORYTITLEITEM_DESCRIPTION); )
				{
					szItem = pDatabaseTCProcedure->GetDescription();
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_SAVE_DIRECTORY), nProcedure, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_SAVE_DIRECTORY), nProcedure, nColumn, szItem);
			}
		}
	}
	GetDlgItem(IDC_TCPROCEDURE_SAVE_DIRECTORY_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_SAVE_DIRECTORY, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_SAVE_DIRECTORY)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_SAVE_DIRECTORY, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCProcedureSaveDialog::FindProcedure(LPCTSTR pszName) CONST
{
	INT  nProcedure;
	INT  nProcedures;

	for (nProcedure = 0, nProcedures = (INT)m_pDatabaseTCProcedures.GetSize(); nProcedure < nProcedures; nProcedure++)
	{
		if (!m_pDatabaseTCProcedures.GetAt(nProcedure)->GetName().Compare(pszName)) break;
		continue;
	}
	return((nProcedure < nProcedures) ? TRUE : FALSE);
}

BOOL CTCProcedureSaveDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_TCPROCEDURE_SAVE_NAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCPROCEDURE_SAVE_TITLE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

void CTCProcedureSaveDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedureSaveDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedureSaveDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_pDatabaseTCProcedures.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedureSaveDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedureSaveDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_SAVE_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_SAVE_TITLE, OnEditchangeTitle)
	ON_EN_CHANGE(IDC_TCPROCEDURE_SAVE_NAME, OnEditchangeName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureSaveDialog message handlers

BOOL CTCProcedureSaveDialog::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	BOOL  bComment;
	CRect  rColumns[2];
	CStringTools  cStringTools;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_SAVE_NAME)->GetWindowRect(rColumns[0]);
	GetDlgItem(IDC_TCPROCEDURE_SAVE_DIRECTORY)->GetClientRect(rColumns[1]);
	m_szColumns.Add(STRING(IDS_TCPROCEDURESAVEDIALOG_DIRECTORYTITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCPROCEDURESAVEDIALOG_DIRECTORYTITLEITEM_DESCRIPTION));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nWidth = rColumns[0].Width(); nColumn < nColumns; nWidth = (++nColumn == nColumns - 1) ? (rColumns[1].Width() - nColumn*nWidth - GetSystemMetrics(SM_CXVSCROLL)) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_SAVE_DIRECTORY), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	EnumProcedures();
	SendDlgItemMessage(IDC_TCPROCEDURE_SAVE_DIRECTORY, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	SendDlgItemMessage(IDC_TCPROCEDURE_SAVE_NAME, EM_LIMITTEXT, GetDatabase()->GetTCProcedureNameLength(), (LPARAM)NULL);
	SendDlgItemMessage(IDC_TCPROCEDURE_SAVE_TITLE, EM_SETSEL, 0, (LPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_SAVE_DATABASE)->SetWindowText(GetAccountDatabase());
	GetDlgItem(IDC_TCPROCEDURE_SAVE_NAME)->SetWindowText(GetParentDisplay()->GetName());
	GetDlgItem(IDC_TCPROCEDURE_SAVE_TITLE)->SetWindowText(GetParentDisplay()->GetTitle());
	GetDlgItem(IDC_TCPROCEDURE_SAVE_COMMENT_STATIC)->ShowWindow(((bComment = FindProcedure(GetParentDisplay()->GetName()))) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCPROCEDURE_SAVE_COMMENT)->ShowWindow((bComment) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCPROCEDURE_SAVE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_SAVE_DATABASE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_SAVE_DATABASE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_SAVE_TITLE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_SAVE_TITLE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_SAVE_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_SAVE_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_SAVE_COMMENT_STATIC)->EnableWindow(bComment);
	GetDlgItem(IDC_TCPROCEDURE_SAVE_COMMENT)->EnableWindow(bComment);
	GetDlgItem(IDC_TCPROCEDURE_SAVE_TITLE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
	return FALSE;
}

BOOL CTCProcedureSaveDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	INT  nColumn;
	INT  nColumns;
	BOOL  bComment;
	CString  szName;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_SAVE_DIRECTORY)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED)
		{
			if (pNotifyListView->uNewState & LVIS_SELECTED)
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDURESAVEDIALOG_DIRECTORYTITLEITEM_NAME))
					{
						GetDlgItem(IDC_TCPROCEDURE_SAVE_NAME)->SetWindowText(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_SAVE_DIRECTORY), pNotifyListView->iItem, nColumn));
						continue;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDURESAVEDIALOG_DIRECTORYTITLEITEM_DESCRIPTION))
					{
						GetDlgItem(IDC_TCPROCEDURE_SAVE_TITLE)->SetWindowText(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_SAVE_DIRECTORY), pNotifyListView->iItem, nColumn));
						continue;
					}
				}
				GetDlgItem(IDC_TCPROCEDURE_SAVE_NAME)->GetWindowText(szName);
				GetDlgItem(IDC_TCPROCEDURE_SAVE_COMMENT_STATIC)->ShowWindow(((bComment = FindProcedure(szName) && GetParentDisplay()->GetName() != szName)) ? SW_SHOW : SW_HIDE);
				GetDlgItem(IDC_TCPROCEDURE_SAVE_COMMENT)->ShowWindow((bComment) ? SW_SHOW : SW_HIDE);
				GetDlgItem(IDC_TCPROCEDURE_SAVE_COMMENT_STATIC)->EnableWindow(bComment);
				GetDlgItem(IDC_TCPROCEDURE_SAVE_COMMENT)->EnableWindow(bComment);
			}
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK  &&  Check())
		{
			if (!GetDlgItem(IDC_TCPROCEDURE_SAVE_COMMENT)->IsWindowVisible())
			{
				OnOK();
				return TRUE;
			}
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCProcedureSaveDialog::OnEditchangeTitle()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureSaveDialog::OnEditchangeName()
{
	BOOL  bName;
	CString  szName;

	GetDlgItem(IDC_TCPROCEDURE_SAVE_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TCPROCEDURE_SAVE_COMMENT_STATIC)->ShowWindow(((bName = FindProcedure(szName) && GetParentDisplay()->GetName() != szName)) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCPROCEDURE_SAVE_COMMENT)->ShowWindow((bName) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCPROCEDURE_SAVE_COMMENT_STATIC)->EnableWindow(bName);
	GetDlgItem(IDC_TCPROCEDURE_SAVE_COMMENT)->EnableWindow(bName);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureSaveDialog::OnOK()
{
	CString  szName;
	CString  szTitle;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCPROCEDURE_SAVE_NAME)->GetWindowText(szName);
	GetDlgItem(IDC_TCPROCEDURE_SAVE_TITLE)->GetWindowText(szTitle);
	GetParentDisplay()->SetName(szName);
	GetParentDisplay()->SetTitle(szTitle);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedureSaveDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDURESAVEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedureSaveDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDURESAVEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureOpenDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedureOpenDialog, CLocaleDialog)

CTCProcedureOpenDialog::CTCProcedureOpenDialog(CWnd *pParentWnd) : CLocaleDialog(CTCProcedureOpenDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCProcedureOpenDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCProcedureOpenDialog::Initialize()
{
	m_pDatabaseTCProcedures.Copy(GetDatabase()->GetTCProcedures());
	return TRUE;
}

VOID CTCProcedureOpenDialog::EnumProcedures()
{
	INT  nColumn;
	INT  nColumns;
	INT  nProcedure;
	INT  nProcedures;
	CString  szItem;
	CDatabaseTCProcedure  *pDatabaseTCProcedure;

	for (nProcedure = 0, nProcedures = (INT)m_pDatabaseTCProcedures.GetSize(); nProcedure < nProcedures; nProcedure++)
	{
		if ((pDatabaseTCProcedure = m_pDatabaseTCProcedures.GetAt(nProcedure)))
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREOPENDIALOG_DIRECTORYTITLEITEM_NAME); )
				{
					szItem = pDatabaseTCProcedure->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREOPENDIALOG_DIRECTORYTITLEITEM_DESCRIPTION); )
				{
					szItem = pDatabaseTCProcedure->GetDescription();
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_OPEN_DIRECTORY), nProcedure, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_OPEN_DIRECTORY), nProcedure, nColumn, szItem);
			}
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_OPEN_DIRECTORY), 0);
	GetDlgItem(IDC_TCPROCEDURE_OPEN_DIRECTORY_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_OPEN_DIRECTORY, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_OPEN_DIRECTORY)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_OPEN_DIRECTORY, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

BOOL CTCProcedureOpenDialog::Check(BOOL bModified) CONST
{
	return((Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_OPEN_DIRECTORY)) >= 0) ? TRUE : FALSE);
}

void CTCProcedureOpenDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedureOpenDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedureOpenDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_pDatabaseTCProcedures.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedureOpenDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCProcedureOpenDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_OPEN_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureOpenDialog message handlers

BOOL CTCProcedureOpenDialog::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_OPEN_DIRECTORY)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCPROCEDUREOPENDIALOG_DIRECTORYTITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREOPENDIALOG_DIRECTORYTITLEITEM_DESCRIPTION));
	SendDlgItemMessage(IDC_TCPROCEDURE_OPEN_DIRECTORY, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nWidth = rColumns.Width() / 7; nColumn < nColumns; nWidth = (++nColumn == nColumns - 1) ? (rColumns.Width() - nColumn*nWidth - GetSystemMetrics(SM_CXVSCROLL)) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_OPEN_DIRECTORY), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	EnumProcedures();
	GetDlgItem(IDC_TCPROCEDURE_OPEN_DATABASE)->SetWindowText(GetAccountDatabase());
	GetDlgItem(IDC_TCPROCEDURE_OPEN_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_OPEN_DATABASE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_OPEN_DATABASE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_OPEN_DIRECTORY)->SetFocus();
	return FALSE;
}

BOOL CTCProcedureOpenDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_OPEN_DIRECTORY)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK)
		{
			OnOK();
			return TRUE;
		}
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

void CTCProcedureOpenDialog::OnOK()
{
	INT  nColumn;
	INT  nColumns;
	INT  nDisplay;
	INT  nDisplays;
	CString  szName;
	CString  szTitle;
	CString  szMessage;
	CPtrArray  pDisplays;
	CDisplayWnd  *pDisplayWnd;
	CTCProcedureWnd  *pTCProcedureWnd;
	CHourglassCursor  cCursor;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREOPENDIALOG_DIRECTORYTITLEITEM_NAME))
		{
			szName = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_OPEN_DIRECTORY), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_OPEN_DIRECTORY)), nColumn);
			continue;
		}
		if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREOPENDIALOG_DIRECTORYTITLEITEM_DESCRIPTION))
		{
			szTitle = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_OPEN_DIRECTORY), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_OPEN_DIRECTORY)), nColumn);
			continue;
		}
	}
	for (nDisplay = 0, nDisplays = EnumDisplayWindows(pDisplays); nDisplay < nDisplays; nDisplay++)
	{
		if ((pDisplayWnd = (CDisplayWnd *)pDisplays.GetAt(nDisplay)) && pDisplayWnd->GetType() == DISPLAY_TYPE_TCPROCEDURE)
		{
			if ((pTCProcedureWnd = (CTCProcedureWnd *)pDisplayWnd)->GetName() == szName)
			{
				pTCProcedureWnd->MDIActivate();
				break;
			}
		}
	}
	if (nDisplay == nDisplays)
	{
		if ((pTCProcedureWnd = new CTCProcedureWnd(szName)))
		{
			if (pTCProcedureWnd->Create(GetMainWnd()))
			{
				EndDialog(IDOK);
				return;
			}
		}
		szMessage.Format(STRING(IDS_TCPROCEDURE_FAILURE_LOAD), (LPCTSTR)szTitle);
		ShowMessage(szMessage);
	}
	EndDialog(IDOK);
}

void CTCProcedureOpenDialog::OnCancel()
{
	CHourglassCursor  cCursor;

	EndDialog(IDCANCEL);
}

BOOL CTCProcedureOpenDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREOPENDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedureOpenDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREOPENDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureImportDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedureImportDialog, CLocaleDialog)

CTCProcedureImportDialog::CTCProcedureImportDialog(CWnd *pParentWnd) : CLocaleDialog(CTCProcedureImportDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCProcedureImportDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT_PTR CTCProcedureImportDialog::DoModal()
{
	return CLocaleDialog::DoModal();
}

VOID CTCProcedureImportDialog::EnumProcedures()
{
	INT  nColumn;
	INT  nColumns;
	INT  nProcedure;
	INT  nProcedures;
	DWORD  dwBytes;
	CFileEx  cFile;
	CString  szItem;
	CString  szFileName;
	CByteArray  cFileBuffer;
	CFileFindEx  cFileFind;
	CDatabaseTCProcedure  *pDatabaseTCProcedure;

	SendDlgItemMessage(IDC_TCPROCEDURE_IMPORT_DIRECTORY, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_FILENAME)->GetWindowText(szFileName);
	for (; cFileFind.FindFile(szFileName) && !cFileFind.FindNextFile(); )
	{
		if (cFile.Open(szFileName, CFile::modeRead | CFile::shareDenyWrite))
		{
			for (cFileBuffer.SetSize((INT_PTR)cFile.GetLength()); ReadFile(cFile.m_hFile, cFileBuffer.GetData(), (DWORD)cFile.GetLength(), &dwBytes, (LPOVERLAPPED)NULL); )
			{
				for (nProcedure = 0, nProcedures = (m_pDatabaseTCProcedures.Unmap(cFileBuffer)) ? (INT)m_pDatabaseTCProcedures.GetSize() : 0; nProcedure < nProcedures; nProcedure++)
				{
					if ((pDatabaseTCProcedure = m_pDatabaseTCProcedures.GetAt(nProcedure)))
					{
						for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
						{
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREIMPORTDIALOG_DIRECTORYTITLEITEM_NAME); )
							{
								szItem = pDatabaseTCProcedure->GetName();
								break;
							}
							for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREIMPORTDIALOG_DIRECTORYTITLEITEM_DESCRIPTION); )
							{
								szItem = pDatabaseTCProcedure->GetDescription();
								break;
							}
							if (!nColumn)
							{
								Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_IMPORT_DIRECTORY), nProcedure, szItem);
								continue;
							}
							Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_IMPORT_DIRECTORY), nProcedure, nColumn, szItem);
						}
					}
				}
				break;
			}
			cFile.Close();
		}
		cFileFind.Close();
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_DIRECTORY)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_IMPORT_DIRECTORY, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCProcedureImportDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_TCPROCEDURE_IMPORT_FILENAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCPROCEDURE_IMPORT_DIRECTORY)->SendMessage(LVM_GETSELECTEDCOUNT) > 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_IMPORT_TYPE_DEFAULT) || (IsDlgButtonChecked(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM) && GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_NAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_DESCRIPTION)->GetWindowTextLength() > 0))) ? TRUE : FALSE);
}

void CTCProcedureImportDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedureImportDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedureImportDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_pDatabaseTCProcedures.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedureImportDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCProcedureImportDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_IMPORT_BROWSE, OnBrowse)
	ON_BN_CLICKED(IDC_TCPROCEDURE_IMPORT_TYPE_DEFAULT, OnDefault)
	ON_BN_CLICKED(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM, OnCustom)
	ON_BN_CLICKED(IDC_TCPROCEDURE_IMPORT_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_IMPORT_FILENAME, OnEditchangeFileName)
	ON_EN_CHANGE(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_NAME, OnEditchangeName)
	ON_EN_CHANGE(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_DESCRIPTION, OnEditchangeDescription)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureImportDialog message handlers

BOOL CTCProcedureImportDialog::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns[2];
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_DIRECTORY)->GetClientRect(rColumns[0]);
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_NAME)->GetClientRect(rColumns[1]);
	m_szColumns.Add(STRING(IDS_TCPROCEDUREIMPORTDIALOG_DIRECTORYTITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREIMPORTDIALOG_DIRECTORYTITLEITEM_DESCRIPTION));
	SendDlgItemMessage(IDC_TCPROCEDURE_IMPORT_DIRECTORY, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	SendDlgItemMessage(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_NAME, EM_LIMITTEXT, GetDatabase()->GetTCProcedureNameLength(), (LPARAM)NULL);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nWidth = rColumns[1].Width(); nColumn < nColumns; nWidth = (++nColumn == nColumns - 1) ? (rColumns[0].Width() - nColumn*nWidth - GetSystemMetrics(SM_CXVSCROLL)) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_IMPORT_DIRECTORY), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	CheckDlgButton(IDC_TCPROCEDURE_IMPORT_TYPE_DEFAULT, TRUE);
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_BROWSE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_DEFAULT)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_FILENAME)->SetFocus();
	return FALSE;
}

BOOL CTCProcedureImportDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_IMPORT_DIRECTORY)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED)
		{
			if (SendDlgItemMessage(IDC_TCPROCEDURE_IMPORT_DIRECTORY, LVM_GETSELECTEDCOUNT) == 1)
			{
				GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_DEFAULT)->EnableWindow();
				GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM)->EnableWindow();
			}
			else
			{
				CheckDlgButton(IDC_TCPROCEDURE_IMPORT_TYPE_DEFAULT, TRUE);
				CheckDlgButton(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM, FALSE);
				GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_NAME)->SetWindowText(EMPTYSTRING);
				GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_DESCRIPTION)->SetWindowText(EMPTYSTRING);
				GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_NAME)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_NAME_STATIC)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_DESCRIPTION_STATIC)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_DESCRIPTION)->EnableWindow(FALSE);
			}
			GetDlgItem(IDOK)->EnableWindow(Check());
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK  &&  Check())
		{
			OnOK();
			return TRUE;
		}
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

void CTCProcedureImportDialog::OnBrowse()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCPROCEDURE_IMPORT_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DATABASEFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK)
	{
		GetDlgItem(IDC_TCPROCEDURE_IMPORT_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
		EnumProcedures();
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_IMPORT_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureImportDialog::OnDefault()
{
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_DESCRIPTION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_NAME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_DESCRIPTION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_DESCRIPTION)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureImportDialog::OnCustom()
{
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureImportDialog::OnEditchangeFileName()
{
	EnumProcedures();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureImportDialog::OnEditchangeName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureImportDialog::OnEditchangeDescription()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureImportDialog::OnOK()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nProcedure;
	INT  nProcedures;
	CString  szName;
	CString  szTitle;
	CPtrArray  pProcedureIDs;
	CUIntArray  nProcedureIDs;
	CDatabaseTCProcedure  *pDatabaseTCProcedure[2];
	CDatabaseTCProcedures  pDatabaseTCProcedures;
	CHourglassCursor  cCursor;

	for (nProcedure = 0, nProcedures = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_IMPORT_DIRECTORY, LVM_GETITEMCOUNT); nProcedure < nProcedures; nProcedure++)
	{
		if (!Listview_IsSelText(GetDlgItem(IDC_TCPROCEDURE_IMPORT_DIRECTORY), nProcedure))
		{
			delete m_pDatabaseTCProcedures.GetAt(nProcedure);
			m_pDatabaseTCProcedures.SetAt(nProcedure, NULL);
		}
	}
	for (nProcedure = 0, nProcedures = (pDatabaseTCProcedures.Copy(GetDatabase()->GetTCProcedures())) ? nProcedures : -1; nProcedure < nProcedures; nProcedure++)
	{
		if ((pDatabaseTCProcedure[0] = m_pDatabaseTCProcedures.GetAt(nProcedure)))
		{
			if (IsDlgButtonChecked(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM))
			{
				GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_NAME)->GetWindowText(szName);
				GetDlgItem(IDC_TCPROCEDURE_IMPORT_TYPE_CUSTOM_DESCRIPTION)->GetWindowText(szTitle);
				pDatabaseTCProcedure[0]->SetDescription(szTitle);
				pDatabaseTCProcedure[0]->SetName(szName);
			}
			if ((pDatabaseTCProcedure[1] = pDatabaseTCProcedures.GetAt((nIndex = pDatabaseTCProcedures.Find(pDatabaseTCProcedure[0]->GetName())))))
			{
				pDatabaseTCProcedure[1]->Copy(pDatabaseTCProcedure[0]);
				pProcedureIDs.Add(pDatabaseTCProcedure[1]);
				nProcedureIDs.Add(nIndex);
				continue;
			}
			if ((pDatabaseTCProcedure[1] = new CDatabaseTCProcedure))
			{
				if (pDatabaseTCProcedure[1]->Copy(pDatabaseTCProcedure[0]))
				{
					if ((nIndex = pDatabaseTCProcedures.Add(pDatabaseTCProcedure[1])) >= 0)
					{
						pProcedureIDs.Add(pDatabaseTCProcedure[1]);
						nProcedureIDs.Add(-(nIndex + 1));
						continue;
					}
				}
				delete pDatabaseTCProcedure[1];
			}
			break;
		}
		m_pDatabaseTCProcedures.RemoveAt(nProcedure);
		nProcedures--;
		nProcedure--;
	}
	for (; nProcedure == nProcedures; )
	{
		if (GetDatabase()->GetTCProcedures()->Copy(&pDatabaseTCProcedures) && GetDatabase()->Save(DATABASE_COMPONENT_TCPROCEDURE))
		{
			for (nItem = 0, nItems = (INT)pProcedureIDs.GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCProcedure[0] = (CDatabaseTCProcedure *)pProcedureIDs.GetAt(nItem)))
				{
					UpdateDatabase(pDatabaseTCProcedure[0], (INT)nProcedureIDs.GetAt(nItem));
					continue;
				}
			}
			if (nItem == nItems) break;
		}
		nProcedures = -1;
		break;
	}
	for (; nProcedure != nProcedures; )
	{
		ShowMessage((SendDlgItemMessage(IDC_TCPROCEDURE_IMPORT_DIRECTORY, LVM_GETITEMCOUNT) > 1) ? SYSTEM_WARNING_TCPROCEDUREDIRECTORY_IMPORT_FAILURE : SYSTEM_WARNING_TCPROCEDURE_IMPORT_FAILURE);
		break;
	}
	EndDialog(IDOK);
}

void CTCProcedureImportDialog::OnCancel()
{
	CHourglassCursor  cCursor;

	EndDialog(IDCANCEL);
}

BOOL CTCProcedureImportDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREIMPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedureImportDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREIMPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureExportDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedureExportDialog, CLocaleDialog)

CTCProcedureExportDialog::CTCProcedureExportDialog(CWnd *pParentWnd) : CLocaleDialog(CTCProcedureExportDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCProcedureExportDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT_PTR CTCProcedureExportDialog::DoModal()
{
	return CLocaleDialog::DoModal();
}

BOOL CTCProcedureExportDialog::EnumProcedures()
{
	INT  nColumn;
	INT  nColumns;
	INT  nProcedure;
	INT  nProcedures;
	CString  szItem;
	CDatabaseTCProcedure  *pDatabaseTCProcedure;

	for (nProcedure = 0, nProcedures = (m_pDatabaseTCProcedures.Copy(GetDatabase()->GetTCProcedures())) ? (INT)m_pDatabaseTCProcedures.GetSize() : 0; nProcedure < nProcedures; nProcedure++)
	{
		if ((pDatabaseTCProcedure = m_pDatabaseTCProcedures.GetAt(nProcedure)))
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREEXPORTDIALOG_DIRECTORYTITLEITEM_NAME); )
				{
					szItem = pDatabaseTCProcedure->GetName();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREEXPORTDIALOG_DIRECTORYTITLEITEM_DESCRIPTION); )
				{
					szItem = pDatabaseTCProcedure->GetDescription();
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_EXPORT_DIRECTORY), nProcedure, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_EXPORT_DIRECTORY), nProcedure, nColumn, szItem);
			}
		}
	}
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_DIRECTORY_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_EXPORT_DIRECTORY, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_DIRECTORY)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_EXPORT_DIRECTORY, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCPROCEDURE_EXPORT_DIRECTORY, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCProcedureExportDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_TCPROCEDURE_EXPORT_FILENAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCPROCEDURE_EXPORT_DIRECTORY)->SendMessage(LVM_GETSELECTEDCOUNT) > 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_EXPORT_TYPE_DEFAULT) || (IsDlgButtonChecked(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM) && GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_DESCRIPTION)->GetWindowTextLength() > 0) || IsDlgButtonChecked(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_SOURCECODE))) ? TRUE : FALSE);
}

void CTCProcedureExportDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedureExportDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedureExportDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_pDatabaseTCProcedures.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedureExportDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCProcedureExportDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_EXPORT_BROWSE, OnBrowse)
	ON_BN_CLICKED(IDC_TCPROCEDURE_EXPORT_TYPE_DEFAULT, OnDefault)
	ON_BN_CLICKED(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM, OnCustom)
	ON_BN_CLICKED(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_SOURCECODE, OnSourceCode)
	ON_BN_CLICKED(IDC_TCPROCEDURE_EXPORT_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_EXPORT_FILENAME, OnEditchangeFileName)
	ON_EN_CHANGE(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME, OnEditchangeName)
	ON_EN_CHANGE(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_DESCRIPTION, OnEditchangeDescription)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureExportDialog message handlers

BOOL CTCProcedureExportDialog::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns[2];
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_DIRECTORY)->GetClientRect(rColumns[0]);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME)->GetClientRect(rColumns[1]);
	m_szColumns.Add(STRING(IDS_TCPROCEDUREEXPORTDIALOG_DIRECTORYTITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREEXPORTDIALOG_DIRECTORYTITLEITEM_DESCRIPTION));
	SendDlgItemMessage(IDC_TCPROCEDURE_EXPORT_DIRECTORY, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	SendDlgItemMessage(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME, EM_LIMITTEXT, GetDatabase()->GetTCProcedureNameLength(), (LPARAM)NULL);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nWidth = rColumns[1].Width(); nColumn < nColumns; nWidth = (++nColumn == nColumns - 1) ? (rColumns[0].Width() - nColumn*nWidth - GetSystemMetrics(SM_CXVSCROLL)) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_EXPORT_DIRECTORY), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	if (EnumProcedures())
	{
		CheckDlgButton(IDC_TCPROCEDURE_EXPORT_TYPE_DEFAULT, TRUE);
		GetDlgItem(IDC_TCPROCEDURE_EXPORT_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_EXPORT_FILENAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_EXPORT_FILENAME)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_EXPORT_BROWSE)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_DEFAULT)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_SOURCECODE)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_EXPORT_FILENAME)->SetFocus();
		return FALSE;
	}
	return TRUE;
}

BOOL CTCProcedureExportDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_EXPORT_DIRECTORY)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED)
		{
			if (SendDlgItemMessage(IDC_TCPROCEDURE_EXPORT_DIRECTORY, LVM_GETSELECTEDCOUNT) > 0)
			{
				if (SendDlgItemMessage(IDC_TCPROCEDURE_EXPORT_DIRECTORY, LVM_GETSELECTEDCOUNT) == 1)
				{
					GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM)->EnableWindow();
					GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_SOURCECODE)->EnableWindow();
				}
				else
				{
					CheckDlgButton(IDC_TCPROCEDURE_EXPORT_TYPE_DEFAULT, TRUE);
					CheckDlgButton(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM, FALSE);
					CheckDlgButton(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_SOURCECODE, FALSE);
					GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME)->SetWindowText(EMPTYSTRING);
					GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_DESCRIPTION)->SetWindowText(EMPTYSTRING);
					GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM)->EnableWindow(FALSE);
					GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME)->EnableWindow(FALSE);
					GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME_STATIC)->EnableWindow(FALSE);
					GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_DESCRIPTION_STATIC)->EnableWindow(FALSE);
					GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_DESCRIPTION)->EnableWindow(FALSE);
					GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_SOURCECODE)->EnableWindow(FALSE);
				}
			}
			GetDlgItem(IDOK)->EnableWindow(Check());
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK  &&  Check())
		{
			OnOK();
			return TRUE;
		}
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

void CTCProcedureExportDialog::OnBrowse()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCPROCEDURE_EXPORT_FILENAME, (!IsDlgButtonChecked(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_SOURCECODE)) ? STRING(IDS_FILEBROWSEDIALOG_DATABASEFILEEXTENSION) : STRING(IDS_FILEBROWSEDIALOG_DOCUMENTFILEEXTENSION), (!IsDlgButtonChecked(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_SOURCECODE)) ? STRING(IDS_FILEBROWSEDIALOG_DATABASEFILTER) : STRING(IDS_FILEBROWSEDIALOG_DOCUMENTFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TCPROCEDURE_EXPORT_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	SendDlgItemMessage(IDC_TCPROCEDURE_EXPORT_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureExportDialog::OnDefault()
{
	CheckDlgButton(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_SOURCECODE, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_DESCRIPTION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_DESCRIPTION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_DESCRIPTION)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureExportDialog::OnCustom()
{
	CheckDlgButton(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_SOURCECODE, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureExportDialog::OnSourceCode()
{
	CheckDlgButton(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_EXPORT_TYPE_DEFAULT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_SOURCECODE, TRUE);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_DESCRIPTION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_DESCRIPTION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_DESCRIPTION)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureExportDialog::OnEditchangeFileName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureExportDialog::OnEditchangeName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureExportDialog::OnEditchangeDescription()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureExportDialog::OnOK()
{
	INT  nProcedure;
	INT  nProcedures;
	DWORD  dwBytes;
	CFileEx  cFile;
	CString  szName;
	CString  szTitle;
	CString  szFileName;
	CString  szSourceCode;
	CByteArray  nProceduresData;
	CDatabaseTCProcedure  *pDatabaseTCProcedure;
	CHourglassCursor  cCursor;

	for (nProcedure = 0, nProcedures = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_EXPORT_DIRECTORY, LVM_GETITEMCOUNT); nProcedure < nProcedures; nProcedure++)
	{
		if (!Listview_IsSelText(GetDlgItem(IDC_TCPROCEDURE_EXPORT_DIRECTORY), nProcedure))
		{
			delete m_pDatabaseTCProcedures.GetAt(nProcedure);
			m_pDatabaseTCProcedures.SetAt(nProcedure, NULL);
		}
	}
	for (nProcedure = 0; nProcedure < nProcedures; nProcedure++)
	{
		if (!m_pDatabaseTCProcedures.GetAt(nProcedure))
		{
			m_pDatabaseTCProcedures.RemoveAt(nProcedure);
			nProcedures--;
			nProcedure--;
		}
	}
	if ((pDatabaseTCProcedure = (IsDlgButtonChecked(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM) || IsDlgButtonChecked(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_SOURCECODE)) ? m_pDatabaseTCProcedures.GetAt(nProcedure - 1) : (CDatabaseTCProcedure *)NULL))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_DESCRIPTION)->GetWindowText(szTitle), GetDlgItem(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_NAME)->GetWindowText(szName), szSourceCode = pDatabaseTCProcedure->GetSourceCode(); IsDlgButtonChecked(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM); )
		{
			pDatabaseTCProcedure->SetDescription(szTitle);
			pDatabaseTCProcedure->SetName(szName);
			break;
		}
	}
	for (; nProcedure == nProcedures; )
	{
		if (m_pDatabaseTCProcedures.Map(nProceduresData))
		{
			for (GetDlgItem(IDC_TCPROCEDURE_EXPORT_FILENAME)->GetWindowText(szFileName); IsDlgButtonChecked(IDC_TCPROCEDURE_EXPORT_TYPE_CUSTOM_SOURCECODE); )
			{
				nProceduresData.SetSize(szSourceCode.GetLength());
#ifndef UNICODE
				CopyMemory(nProceduresData.GetData(), (LPCTSTR)szSourceCode, nProceduresData.GetSize());
#else
				WideCharToMultiByte(CP_ACP, 0, szSourceCode, -1, (LPSTR)nProceduresData.GetData(), (INT)nProceduresData.GetSize(), (LPCSTR)NULL, (LPBOOL)NULL);
#endif
				break;
			}
			if (cFile.Open(szFileName, CFile::modeCreate | CFile::modeReadWrite | CFile::shareDenyWrite))
			{
				if (WriteFile(cFile.m_hFile, nProceduresData.GetData(), (DWORD)nProceduresData.GetSize(), &dwBytes, (LPOVERLAPPED)NULL))
				{
					cFile.Close();
					break;
				}
				cFile.Close();
			}
		}
		nProcedures = -1;
		break;
	}
	if (nProcedure != nProcedures) ShowMessage((SendDlgItemMessage(IDC_TCPROCEDURE_EXPORT_DIRECTORY, LVM_GETITEMCOUNT) > 1) ? SYSTEM_WARNING_TCPROCEDUREDIRECTORY_EXPORT_FAILURE : SYSTEM_WARNING_TCPROCEDURE_IMPORT_FAILURE);
	EndDialog(IDOK);
}

void CTCProcedureExportDialog::OnCancel()
{
	CHourglassCursor  cCursor;

	EndDialog(IDCANCEL);
}

BOOL CTCProcedureExportDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREEXPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedureExportDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREEXPORTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesDialog, CDisplayDialog)

CTCProcedurePropertiesDialog::CTCProcedurePropertiesDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesDialog::Create(CWnd *pParentWnd)
{
	return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesDialog::IDD);
}

BOOL CTCProcedurePropertiesDialog::Initialize()
{
	LOGFONT  lfFont;
	COLORREF  nColor[2];

	if (GetParentDisplay()->GetProperties(&lfFont, nColor[0], nColor[1]))
	{
		CopyMemory(&m_lfFont[0], &lfFont, sizeof(LOGFONT));
		CopyMemory(&m_lfFont[1], &lfFont, sizeof(LOGFONT));
		m_nBackgroundColor[0] = nColor[1];
		m_nBackgroundColor[1] = nColor[1];
		m_nFontColor[0] = nColor[0];
		m_nFontColor[1] = nColor[0];
		return TRUE;
	}
	return FALSE;
}

CTCProcedureWnd *CTCProcedurePropertiesDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCProcedurePropertiesDialog::ShowFontDetails()
{
	INT  nSize;
	INT  nSizes;
	INT  nStyle;
	INT  nStyles;
	BOOL  bUnderlined;
	CStringArray  szSizes;
	CStringArray  szStyles;
	CFontTools  cFontTools;

	for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE, CB_RESETCONTENT), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE, CB_RESETCONTENT); cFontTools.EnumerateFont(m_lfFont[0].lfFaceName, szStyles, szSizes, bUnderlined); )
	{
		for (nStyle = 0, nStyles = (INT)szStyles.GetSize(); nStyle < nStyles; nStyle++) SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szStyles.GetAt(nStyle));
		for (nSize = 0, nSizes = (INT)szSizes.GetSize(); nSize < nSizes; nSize++) SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szSizes.GetAt(nSize));
		break;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontStyle(&m_lfFont[0])), 0));
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_lfFont[0])), max(SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)cFontTools.TranslateFontSize(&m_lfFont[1])), 0)));
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_COLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nFontColor[0]);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_COLOR_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_COLOR)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_SAMPLE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_SAMPLETEXT)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesDialog::ShowFontSample()
{
	CRect  rSampleText;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_SAMPLETEXT)->GetWindowRect(rSampleText);
	ScreenToClient(rSampleText);
	InvalidateRect(rSampleText);
	UpdateWindow();
}

BOOL CTCProcedurePropertiesDialog::IsModified() CONST
{
	CFontTools  cFontTools;

	return((lstrcmp(m_lfFont[0].lfFaceName, m_lfFont[1].lfFaceName) || (m_lfFont[0].lfHeight != m_lfFont[1].lfHeight  &&  cFontTools.QueryPixels(cFontTools.QueryPoints(&m_lfFont[0])) != cFontTools.QueryPixels(cFontTools.QueryPoints(&m_lfFont[1]))) || m_lfFont[0].lfWeight != m_lfFont[1].lfWeight || m_lfFont[0].lfItalic != m_lfFont[1].lfItalic || GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_COLOR)->SendMessage(CCB_FINDCOLOR, (WPARAM)-1, (LPARAM)m_nFontColor[0]) != GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_COLOR)->SendMessage(CCB_FINDCOLOR, (WPARAM)-1, (LPARAM)m_nFontColor[1]) || GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_BACKGROUND_COLOR)->SendMessage(CCB_FINDCOLOR, (WPARAM)-1, (LPARAM)m_nBackgroundColor[0]) != GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_BACKGROUND_COLOR)->SendMessage(CCB_FINDCOLOR, (WPARAM)-1, (LPARAM)m_nBackgroundColor[1])) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesDialog::Check(BOOL bModified) CONST
{
	return((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_NAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE)->GetWindowTextLength() > 0) ? (!bModified || IsModified()) : FALSE);
}

void CTCProcedurePropertiesDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesDialog)
	ON_WM_PAINT()
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TCPROCEDURE_PROPERTIES_FONTS_NAME, OnEditchangeFontName)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_FONTS_NAME, OnSelchangeFontName)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE, OnSelchangeFontStyle)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE, OnSelchangeFontSize)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_FONTS_COLOR, OnSelchangeFontColor)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_BACKGROUND_COLOR, OnSelchangeBackgroundColor)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesDialog message handlers

BOOL CTCProcedurePropertiesDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_SAMPLETEXT)->GetWindowText(m_szFontSampleText);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_NAME, FCB_DIR, CF_EFFECTS | CF_SCREENFONTS);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)m_lfFont[0].lfFaceName));
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_COLOR, CCB_INSERTCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_COLOR, CB_GETCOUNT) - 1, (LPARAM)VGA_COLOR_WHITE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_BACKGROUND_COLOR, CCB_INSERTCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_BACKGROUND_COLOR, CB_GETCOUNT) - 1, (LPARAM)VGA_COLOR_WHITE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_COLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nFontColor[0]);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_BACKGROUND_COLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)m_nBackgroundColor[0]);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_FONTS_NAME, CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE, CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE, CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_FONTS_COLOR, CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_BACKGROUND_COLOR, CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_BACKGROUND_COLOR_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_BACKGROUND_COLOR)->EnableWindow();
	ShowFontDetails();
	return TRUE;
}

void CTCProcedurePropertiesDialog::OnPaint()
{
	INT  nBkMode;
	CFont  cFont;
	CFont  *pOldFont;
	CRect  rSampleText;
	COLORREF  nOldColor;
	CPaintDC  cDC(this);

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_SAMPLETEXT)->GetWindowRect(rSampleText), ScreenToClient(rSampleText); cFont.CreateFontIndirect(&m_lfFont[0]); )
	{
		if ((pOldFont = cDC.SelectObject(&cFont)))
		{
			nBkMode = cDC.SetBkMode(TRANSPARENT);
			nOldColor = cDC.SetTextColor((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? m_nFontColor[0] : GetSysColor(COLOR_GRAYTEXT));
			cDC.FillSolidRect(rSampleText, (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE, CB_GETCOUNT) > 0) ? m_nBackgroundColor[0] : GetSysColor(COLOR_3DFACE));
			cDC.DrawText(m_szFontSampleText, rSampleText, DT_SINGLELINE | DT_CENTER | DT_VCENTER);
			cDC.SetTextColor(nOldColor);
			cDC.SelectObject(pOldFont);
			cDC.SetBkMode(nBkMode);
			ValidateRect(rSampleText);
		}
		cFont.DeleteObject();
		break;
	}
}

void CTCProcedurePropertiesDialog::OnEditchangeFontName()
{
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesDialog::OnSelchangeFontName()
{
	CString  szSize;
	CString  szStyle;
	CFontTools  cFontTools;

	for (lstrcpy(m_lfFont[0].lfFaceName, Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_NAME), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_NAME, CB_GETCURSEL))); TRUE; )
	{
		ShowFontDetails();
		break;
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE)->GetWindowText(szSize), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE)->GetWindowText(szStyle), cFontTools.TranslateFontStyle(szStyle, m_lfFont[0].lfWeight, m_lfFont[0].lfItalic), cFontTools.TranslateFontSize(szSize, m_lfFont[0].lfHeight), cFontTools.EnumerateFontCharacteristics(&m_lfFont[0]); TRUE; )
	{
		ShowFontSample();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesDialog::OnSelchangeFontStyle()
{
	CString  szStyle;
	CFontTools  cFontTools;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_STYLE)->GetWindowText(szStyle), cFontTools.TranslateFontStyle(szStyle, m_lfFont[0].lfWeight, m_lfFont[0].lfItalic); TRUE; )
	{
		ShowFontSample();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesDialog::OnSelchangeFontSize()
{
	CString  szSize;
	CFontTools  cFontTools;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FONTS_SIZE)->GetWindowText(szSize), cFontTools.TranslateFontSize(szSize, m_lfFont[0].lfHeight); TRUE; )
	{
		ShowFontSample();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesDialog::OnSelchangeFontColor()
{
	for (m_nFontColor[0] = (COLORREF)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_COLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_FONTS_COLOR, CB_GETCURSEL)); TRUE; )
	{
		ShowFontSample();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesDialog::OnSelchangeBackgroundColor()
{
	for (m_nBackgroundColor[0] = (COLORREF)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_BACKGROUND_COLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_BACKGROUND_COLOR, CB_GETCURSEL)); TRUE; )
	{
		ShowFontSample();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesDialog::OnOK()
{
	CHourglassCursor  cCursor;

	GetParentDisplay()->GetFlowchartView()->SetStepsLabelFont(&m_lfFont[0], FALSE);
	GetParentDisplay()->GetFlowchartView()->SetStepsLabelColor(m_nFontColor[0], FALSE);
	GetParentDisplay()->GetFlowchartView()->SetBackgroundColor(m_nBackgroundColor[0]);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFindDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedureFindDialog, CDisplayDialog)

CTCProcedureFindDialog::CTCProcedureFindDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedureFindDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCProcedureFindDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCProcedureFindDialog::IDD, FALSE)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCProcedurePropertiesCodeDialog *CTCProcedureFindDialog::GetParent() CONST
{
	return((CTCProcedurePropertiesCodeDialog *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedureFindDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

void CTCProcedureFindDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedureFindDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCProcedureFindDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedureFindDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_FIND_NEXT, OnFindText)
	ON_BN_CLICKED(IDC_TCPROCEDURE_FIND_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_FIND_TEXT, OnSelchangeText)
	ON_CBN_EDITCHANGE(IDC_TCPROCEDURE_FIND_TEXT, OnEditchangeText)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFindDialog message handlers

BOOL CTCProcedureFindDialog::OnInitDialog()
{
	INT  nItem;
	INT  nItems;
	CRect  rDialog[2];
	BOOL  bFindDefaults[4];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (nItem = 0, nItems = (INT)m_szSearchItems.GetSize(), GetWindowRect(rDialog[0]), GetParent()->GetWindowRect(rDialog[1]), rDialog[0].OffsetRect(0, GetParent()->GetParent()->GetScrollPos(SB_VERT) + min(rDialog[1].top, 0)), MoveWindow(rDialog[0]), GetFindDefaults(bFindDefaults[0], bFindDefaults[1], bFindDefaults[2], bFindDefaults[3]); nItem < nItems; nItem++)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_FIND_TEXT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_szSearchItems.GetAt(nItem));
		continue;
	}
	CheckDlgButton(IDC_TCPROCEDURE_FIND_DIRECTION_DOWN, bFindDefaults[0]);
	CheckDlgButton(IDC_TCPROCEDURE_FIND_DIRECTION_UP, !bFindDefaults[0]);
	CheckDlgButton(IDC_TCPROCEDURE_FIND_ALL, bFindDefaults[1]);
	CheckDlgButton(IDC_TCPROCEDURE_FIND_CASE, bFindDefaults[2]);
	CheckDlgButton(IDC_TCPROCEDURE_FIND_WORD, bFindDefaults[3]);
	GetDlgItem(IDC_TCPROCEDURE_FIND_TEXT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_FIND_TEXT)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_FIND_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_FIND_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_FIND_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_FIND_ALL)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_FIND_CASE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_FIND_WORD)->EnableWindow();
	return TRUE;
}

void CTCProcedureFindDialog::OnFindText()
{
	CWnd  *pWnd;
	CString  szText;
	CHARRANGE  sRange;
	CHourglassCursor  cCursor;

	for (GetDlgItem(IDC_TCPROCEDURE_FIND_TEXT)->GetWindowText(szText); SendDlgItemMessage(IDC_TCPROCEDURE_FIND_TEXT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szText) == CB_ERR; )
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_FIND_TEXT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szText);
		m_szSearchItems.Add(szText);
		break;
	}
	if (!GetParent()->SearchCode(szText, IsDlgButtonChecked(IDC_TCPROCEDURE_FIND_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCPROCEDURE_FIND_ALL), IsDlgButtonChecked(IDC_TCPROCEDURE_FIND_CASE), IsDlgButtonChecked(IDC_TCPROCEDURE_FIND_WORD)))
	{
		for (ShowMessage(USER_INFORMATIONAL_TCPROCEDURE_FIND_TEXT_NOTHING); (pWnd = GetParent()->GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)); )
		{
			for (pWnd->SendMessage(EM_EXGETSEL, (WPARAM)NULL, (LPARAM)&sRange), pWnd->SetFocus(); sRange.cpMin <= sRange.cpMax; )
			{
				pWnd->SendMessage(EM_EXSETSEL, (WPARAM)NULL, (LPARAM)&sRange);
				break;
			}
			break;
		}
		DestroyWindow();
		return;
	}
	CheckDlgButton(IDC_TCPROCEDURE_FIND_ALL, FALSE);
}

void CTCProcedureFindDialog::OnSelchangeText()
{
	GetDlgItem(IDC_TCPROCEDURE_FIND_NEXT)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_FIND_TEXT, CB_GETCURSEL) != CB_ERR) ? TRUE : FALSE);
}

void CTCProcedureFindDialog::OnEditchangeText()
{
	GetDlgItem(IDC_TCPROCEDURE_FIND_NEXT)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_FIND_TEXT)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

void CTCProcedureFindDialog::OnCancel()
{
	CWnd  *pWnd;
	CHARRANGE  sRange;

	if ((pWnd = GetParent()->GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)))
	{
		for (pWnd->SendMessage(EM_EXGETSEL, (WPARAM)NULL, (LPARAM)&sRange), pWnd->SetFocus(); sRange.cpMin <= sRange.cpMax; )
		{
			pWnd->SendMessage(EM_EXSETSEL, (WPARAM)NULL, (LPARAM)&sRange);
			break;
		}
	}
	CDisplayDialog::OnCancel();
}

BOOL CTCProcedureFindDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREFINDDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedureFindDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREFINDDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureReplaceDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedureReplaceDialog, CDisplayDialog)

CTCProcedureReplaceDialog::CTCProcedureReplaceDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedureReplaceDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCProcedureReplaceDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCProcedureReplaceDialog::IDD, FALSE)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCProcedurePropertiesCodeDialog *CTCProcedureReplaceDialog::GetParent() CONST
{
	return((CTCProcedurePropertiesCodeDialog *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedureReplaceDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

void CTCProcedureReplaceDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedureReplaceDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCProcedureReplaceDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedureReplaceDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_REPLACE_FINDNEXT, OnFindNextText)
	ON_BN_CLICKED(IDC_TCPROCEDURE_REPLACE_NEXT, OnReplaceText)
	ON_BN_CLICKED(IDC_TCPROCEDURE_REPLACE_ALLNEXT, OnReplaceAllText)
	ON_BN_CLICKED(IDC_TCPROCEDURE_REPLACE_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_REPLACE_FINDTEXT, OnSelchangeFindText)
	ON_CBN_EDITCHANGE(IDC_TCPROCEDURE_REPLACE_FINDTEXT, OnEditchangeFindText)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureReplaceDialog message handlers

BOOL CTCProcedureReplaceDialog::OnInitDialog()
{
	INT  nItem;
	INT  nItems;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (nItem = 0, nItems = (INT)m_szItems[0].GetSize(), GetWindowRect(rDialog[0]), GetParent()->GetWindowRect(rDialog[1]), rDialog[0].OffsetRect(0, GetParent()->GetParent()->GetScrollPos(SB_VERT) + min(rDialog[1].top, 0)), MoveWindow(rDialog[0]); nItem < nItems; nItem++)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_REPLACE_FINDTEXT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_szItems[0].GetAt(nItem));
		continue;
	}
	for (nItem = 0, nItems = (INT)m_szItems[1].GetSize(); nItem < nItems; nItem++)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_REPLACE_TEXT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_szItems[1].GetAt(nItem));
		continue;
	}
	CheckDlgButton(IDC_TCPROCEDURE_REPLACE_ALL, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_REPLACE_DIRECTION_DOWN, TRUE);
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_FINDTEXT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_FINDTEXT)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_TEXT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_TEXT)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_DIRECTION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_DIRECTION_UP)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_DIRECTION_DOWN)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_ALL)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_CASE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_WORD)->EnableWindow();
	return TRUE;
}

void CTCProcedureReplaceDialog::OnFindNextText()
{
	CString  szText[2];
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCPROCEDURE_REPLACE_FINDTEXT)->GetWindowText(szText[0]);
	if (SendDlgItemMessage(IDC_TCPROCEDURE_REPLACE_FINDTEXT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szText[0]) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_REPLACE_FINDTEXT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szText[0]);
		m_szItems[0].Add(szText[0]);
	}
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_TEXT)->GetWindowText(szText[1]);
	if (SendDlgItemMessage(IDC_TCPROCEDURE_REPLACE_TEXT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szText[1]) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_REPLACE_TEXT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szText[1]);
		m_szItems[1].Add(szText[1]);
	}
	if (!GetParent()->SearchCode(szText[0], IsDlgButtonChecked(IDC_TCPROCEDURE_REPLACE_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCPROCEDURE_REPLACE_ALL), IsDlgButtonChecked(IDC_TCPROCEDURE_REPLACE_CASE), IsDlgButtonChecked(IDC_TCPROCEDURE_REPLACE_WORD)))
	{
		ShowMessage(USER_INFORMATIONAL_TCPROCEDURE_FIND_TEXT_NOTHING);
		GetParent()->SetFocus();
		DestroyWindow();
		return;
	}
	CheckDlgButton(IDC_TCPROCEDURE_REPLACE_ALL, FALSE);
}

void CTCProcedureReplaceDialog::OnReplaceText()
{
	CString  szText[2];
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCPROCEDURE_REPLACE_FINDTEXT)->GetWindowText(szText[0]);
	if (SendDlgItemMessage(IDC_TCPROCEDURE_REPLACE_FINDTEXT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szText[0]) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_REPLACE_FINDTEXT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szText[0]);
		m_szItems[0].Add(szText[0]);
	}
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_TEXT)->GetWindowText(szText[1]);
	if (SendDlgItemMessage(IDC_TCPROCEDURE_REPLACE_TEXT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szText[1]) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_REPLACE_TEXT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szText[1]);
		m_szItems[1].Add(szText[1]);
	}
	if (!GetParent()->ReplaceCode(szText[0], szText[1], IsDlgButtonChecked(IDC_TCPROCEDURE_REPLACE_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCPROCEDURE_REPLACE_ALL), IsDlgButtonChecked(IDC_TCPROCEDURE_REPLACE_CASE), IsDlgButtonChecked(IDC_TCPROCEDURE_REPLACE_WORD)))
	{
		ShowMessage(USER_INFORMATIONAL_TCPROCEDURE_FIND_TEXT_NOTHING);
		GetParent()->SetFocus();
		DestroyWindow();
	}
}

void CTCProcedureReplaceDialog::OnReplaceAllText()
{
	CWnd  *pWnd;
	CString  szText[2];
	CHARRANGE  sRange;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCPROCEDURE_REPLACE_FINDTEXT)->GetWindowText(szText[0]);
	if (SendDlgItemMessage(IDC_TCPROCEDURE_REPLACE_FINDTEXT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szText[0]) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_REPLACE_FINDTEXT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szText[0]);
		m_szItems[0].Add(szText[0]);
	}
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_TEXT)->GetWindowText(szText[1]);
	if (SendDlgItemMessage(IDC_TCPROCEDURE_REPLACE_TEXT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szText[1]) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_REPLACE_TEXT, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szText[1]);
		m_szItems[1].Add(szText[1]);
	}
	if (!GetParent()->ReplaceAllCode(szText[0], szText[1], IsDlgButtonChecked(IDC_TCPROCEDURE_REPLACE_DIRECTION_DOWN), IsDlgButtonChecked(IDC_TCPROCEDURE_REPLACE_ALL), IsDlgButtonChecked(IDC_TCPROCEDURE_REPLACE_CASE), IsDlgButtonChecked(IDC_TCPROCEDURE_REPLACE_WORD)))
	{
		for (ShowMessage(USER_INFORMATIONAL_TCPROCEDURE_FIND_TEXT_NOTHING); (pWnd = GetParent()->GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)); )
		{
			for (pWnd->SendMessage(EM_EXGETSEL, (WPARAM)NULL, (LPARAM)&sRange), pWnd->SetFocus(); sRange.cpMin <= sRange.cpMax; )
			{
				pWnd->SendMessage(EM_EXSETSEL, (WPARAM)NULL, (LPARAM)&sRange);
				break;
			}
			break;
		}
		GetParent()->SetFocus();
		DestroyWindow();
	}
}

void CTCProcedureReplaceDialog::OnSelchangeFindText()
{
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_FINDNEXT)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_REPLACE_FINDTEXT)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_NEXT)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_REPLACE_FINDTEXT)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_ALLNEXT)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_REPLACE_FINDTEXT)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

void CTCProcedureReplaceDialog::OnEditchangeFindText()
{
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_FINDNEXT)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_REPLACE_FINDTEXT)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_NEXT)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_REPLACE_FINDTEXT)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_REPLACE_ALLNEXT)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_REPLACE_FINDTEXT)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

void CTCProcedureReplaceDialog::OnCancel()
{
	CWnd  *pWnd;
	CHARRANGE  sRange;

	if ((pWnd = GetParent()->GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)))
	{
		for (pWnd->SendMessage(EM_EXGETSEL, (WPARAM)NULL, (LPARAM)&sRange), pWnd->SetFocus(); sRange.cpMin <= sRange.cpMax; )
		{
			pWnd->SendMessage(EM_EXSETSEL, (WPARAM)NULL, (LPARAM)&sRange);
			break;
		}
	}
	CDisplayDialog::OnCancel();
}

BOOL CTCProcedureReplaceDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREREPLACEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedureReplaceDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREREPLACEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureGoToDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedureGoToDialog, CDisplayDialog)

CTCProcedureGoToDialog::CTCProcedureGoToDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedureGoToDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCProcedureGoToDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCProcedureGoToDialog::IDD, FALSE)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCProcedurePropertiesCodeDialog *CTCProcedureGoToDialog::GetParent() CONST
{
	return((CTCProcedurePropertiesCodeDialog *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedureGoToDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

BOOL CTCProcedureGoToDialog::Check(BOOL bModified) CONST
{
	return(((IsDlgButtonChecked(IDC_TCPROCEDURE_GOTO_LINE) && GetDlgItem(IDC_TCPROCEDURE_GOTO_LINENUMBER)->GetWindowTextLength() > 0) || IsDlgButtonChecked(IDC_TCPROCEDURE_GOTO_JUMPDOWN) || IsDlgButtonChecked(IDC_TCPROCEDURE_GOTO_JUMPUP)) ? TRUE : FALSE);
}

void CTCProcedureGoToDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedureGoToDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCProcedureGoToDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedureGoToDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_GOTO_LINE, OnLineNumber)
	ON_BN_CLICKED(IDC_TCPROCEDURE_GOTO_JUMPDOWN, OnJumpLineDown)
	ON_BN_CLICKED(IDC_TCPROCEDURE_GOTO_JUMPUP, OnJumpLineUp)
	ON_BN_CLICKED(IDC_TCPROCEDURE_GOTO_JUMP, OnJump)
	ON_BN_CLICKED(IDC_TCPROCEDURE_GOTO_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_GOTO_LINENUMBER, OnEditchangeLineNumber)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureGoToDialog message handlers

BOOL CTCProcedureGoToDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CPoint  ptOffset;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetWindowRect(rDialog[0]), GetParent()->GetWindowRect(rDialog[1]), ptOffset.x = 0, ptOffset.y = GetParent()->GetParent()->GetScrollPos(SB_VERT) + min(rDialog[1].top, 0), rDialog[0].OffsetRect(ptOffset); ptOffset.x != 0 || ptOffset.y != 0; )
	{
		MoveWindow(rDialog[0]);
		break;
	}
	CheckDlgButton(IDC_TCPROCEDURE_GOTO_LINE, TRUE);
	Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPDOWNLINE), 1, INT_MAX);
	Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPUPLINE), 1, INT_MAX);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_LINE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_GOTO_LINE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_GOTO_LINENUMBER)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPDOWN)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPUP)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_GOTO_LINENUMBER)->SetFocus();
	return FALSE;
}

void CTCProcedureGoToDialog::OnLineNumber()
{
	CheckDlgButton(IDC_TCPROCEDURE_GOTO_LINE, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_GOTO_JUMPDOWN, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_GOTO_JUMPUP, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_LINENUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_LINENUMBER)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPDOWN_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPDOWNLINE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPUP_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPUPLINE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMP)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_LINENUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureGoToDialog::OnJumpLineDown()
{
	CheckDlgButton(IDC_TCPROCEDURE_GOTO_LINE, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_GOTO_JUMPDOWN, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_GOTO_JUMPUP, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPDOWNLINE), 10);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_LINENUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_LINENUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPDOWN_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPDOWNLINE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPUP_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPUPLINE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMP)->EnableWindow(TRUE);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPDOWNLINE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureGoToDialog::OnJumpLineUp()
{
	CheckDlgButton(IDC_TCPROCEDURE_GOTO_LINE, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_GOTO_JUMPDOWN, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_GOTO_JUMPUP, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPUPLINE), 10);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_LINENUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_LINENUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPDOWN_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPDOWNLINE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPUP_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPUPLINE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMP)->EnableWindow(TRUE);
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPUPLINE)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureGoToDialog::OnJump()
{
	CHourglassCursor  cCursor;

	if (IsDlgButtonChecked(IDC_TCPROCEDURE_GOTO_LINE)) ShowMessage((!GetParent()->GoToCode(GetDlgItemInt(IDC_TCPROCEDURE_GOTO_LINENUMBER, (LPBOOL)NULL, FALSE), FALSE, FALSE)) ? USER_INFORMATIONAL_TCPROCEDURE_GOTO_LINE_FAILURE : USER_NOERROR);
	if (IsDlgButtonChecked(IDC_TCPROCEDURE_GOTO_JUMPDOWN)) ShowMessage((!GetParent()->GoToCode((UINT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPDOWNLINE)), TRUE, FALSE)) ? USER_INFORMATIONAL_TCPROCEDURE_GOTO_LINE_FAILURE : USER_NOERROR);
	if (IsDlgButtonChecked(IDC_TCPROCEDURE_GOTO_JUMPUP)) ShowMessage((!GetParent()->GoToCode((UINT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPUPLINE)), FALSE, TRUE)) ? USER_INFORMATIONAL_TCPROCEDURE_GOTO_LINE_FAILURE : USER_NOERROR);
}

void CTCProcedureGoToDialog::OnEditchangeLineNumber()
{
	GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMP)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_GOTO_LINENUMBER)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedureGoToDialog::OnOK()
{
	CWnd  *pWnd;
	CHARRANGE  sRange;
	CHourglassCursor  cCursor;

	for (; IsDlgButtonChecked(IDC_TCPROCEDURE_GOTO_LINE); )
	{
		ShowMessage((!GetParent()->GoToCode(GetDlgItemInt(IDC_TCPROCEDURE_GOTO_LINENUMBER, (LPBOOL)NULL, FALSE), FALSE, FALSE)) ? USER_INFORMATIONAL_TCPROCEDURE_GOTO_LINE_FAILURE : USER_NOERROR);
		break;
	}
	for (; IsDlgButtonChecked(IDC_TCPROCEDURE_GOTO_JUMPDOWN); )
	{
		ShowMessage((!GetParent()->GoToCode((UINT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPDOWNLINE)), TRUE, FALSE)) ? USER_INFORMATIONAL_TCPROCEDURE_GOTO_LINE_FAILURE : USER_NOERROR);
		break;
	}
	for (; IsDlgButtonChecked(IDC_TCPROCEDURE_GOTO_JUMPUP); )
	{
		ShowMessage((!GetParent()->GoToCode((UINT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_GOTO_JUMPUPLINE)), FALSE, TRUE)) ? USER_INFORMATIONAL_TCPROCEDURE_GOTO_LINE_FAILURE : USER_NOERROR);
		break;
	}
	if ((pWnd = GetParent()->GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)))
	{
		for (pWnd->SendMessage(EM_EXGETSEL, (WPARAM)NULL, (LPARAM)&sRange), pWnd->SetFocus(); sRange.cpMin <= sRange.cpMax; )
		{
			pWnd->SendMessage(EM_EXSETSEL, (WPARAM)NULL, (LPARAM)&sRange);
			break;
		}
	}
	CDisplayDialog::OnOK();
}

BOOL CTCProcedureGoToDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREGOTODIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedureGoToDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREGOTODIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFlowchartFindStepDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedureFlowchartFindStepDialog, CDisplayDialog)

CTCProcedureFlowchartFindStepDialog::CTCProcedureFlowchartFindStepDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedureFlowchartFindStepDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCProcedureFlowchartFindStepDialog::Create(CWnd *pParentWnd)
{
	INT  nResult;

	return(((nResult = CDisplayDialog::Create(pParentWnd, CTCProcedureFlowchartFindStepDialog::IDD, FALSE)) == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

CTCProcedureFlowchartThreadView *CTCProcedureFlowchartFindStepDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedureFlowchartFindStepDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParentDisplay();
}

void CTCProcedureFlowchartFindStepDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedureFlowchartFindStepDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCProcedureFlowchartFindStepDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedureFlowchartFindStepDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP, OnFindStepName)
	ON_BN_CLICKED(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP_NAME, OnSelchangeStepName)
	ON_CBN_EDITCHANGE(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP_NAME, OnEditchangeStepName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFlowchartFindStepDialog message handlers

BOOL CTCProcedureFlowchartFindStepDialog::OnInitDialog()
{
	INT  nItem;
	INT  nItems;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (nItem = 0, nItems = (INT)m_szSearchItems.GetSize(); nItem < nItems; nItem++)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)m_szSearchItems.GetAt(nItem));
		continue;
	}
	GetDlgItem(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP_SEARCHHIDDENNAMES)->EnableWindow();
	return TRUE;
}

void CTCProcedureFlowchartFindStepDialog::OnFindStepName()
{
	CString  szStepName;
	CHourglassCursor  cCursor;

	GetDlgItem(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP_NAME)->GetWindowText(szStepName);
	if (SendDlgItemMessage(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szStepName) == CB_ERR)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szStepName);
		m_szSearchItems.Add(szStepName);
	}
	for (; !GetParent()->SearchStep(szStepName, IsDlgButtonChecked(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP_SEARCHHIDDENNAMES)); )
	{
		ShowMessage(USER_INFORMATIONAL_TCPROCEDURE_FIND_STEP_NOTHING);
		break;
	}
	DestroyWindow();
}

void CTCProcedureFlowchartFindStepDialog::OnSelchangeStepName()
{
	GetDlgItem(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP_NAME, CB_GETCURSEL) != CB_ERR) ? TRUE : FALSE);
}

void CTCProcedureFlowchartFindStepDialog::OnEditchangeStepName()
{
	GetDlgItem(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_FLOWCHART_FINDSTEP_NAME)->GetWindowTextLength() > 0) ? TRUE : FALSE);
}

BOOL CTCProcedureFlowchartFindStepDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREFLOWCHARTFINDSTEPDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedureFlowchartFindStepDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREFLOWCHARTFINDSTEPDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureStatusBar

IMPLEMENT_DYNCREATE(CTCProcedureStatusBar, CMFCStatusBar)

CTCProcedureStatusBar::CTCProcedureStatusBar() : CMFCStatusBar()
{
	m_pCriticalSection = new CCriticalSection;
}

CTCProcedureStatusBar::~CTCProcedureStatusBar()
{
	delete m_pCriticalSection;
}

BOOL CTCProcedureStatusBar::SetIndicators(CONST UINT *pIDs, INT nCount)
{
	INT  nIndex;
	CString  szText;
	CStringTools  cStringTools;
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	for (Initialize(); CMFCStatusBar::SetIndicators(pIDs, nCount); )
	{
		for (m_szPanesText.SetSize(nCount), m_nPanesID.SetSize(nCount), CopyMemory(m_nPanesID.GetData(), pIDs, nCount*sizeof(UINT)); (nIndex = CommandToIndex(ID_TCPROCEDURE_STATUSBAR_STEPSPANE)) >= 0; )
		{
			szText.Format(STRING(IDS_TCPROCEDURE_STATUSBAR_STEPS), (LPCTSTR)cStringTools.ConvertUIntToString(UINT_MAX));
			SetPaneInfo(nIndex, ID_TCPROCEDURE_STATUSBAR_STEPSPANE, SBPS_NOBORDERS | SBPS_STRETCH, CalcPaneWidth(nIndex, szText));
			break;
		}
		if ((nIndex = CommandToIndex(ID_TCPROCEDURE_STATUSBAR_MODEPANE)) >= 0)
		{
			SetTipText(nIndex, STRING(IDS_TCPROCEDURE_STATUSBAR_MODEPANE));
			SetPaneStyle(nIndex, SBPS_NORMAL);
		}
		if ((nIndex = CommandToIndex(ID_TCPROCEDURE_STATUSBAR_TYPEPANE)) >= 0)
		{
			SetTipText(nIndex, STRING(IDS_TCPROCEDURE_STATUSBAR_TYPEPANE));
			SetPaneStyle(nIndex, SBPS_NORMAL);
		}
		if ((nIndex = CommandToIndex(ID_TCPROCEDURE_STATUSBAR_NAMEPANE)) >= 0)
		{
			SetTipText(nIndex, STRING(IDS_TCPROCEDURE_STATUSBAR_NAMEPANE));
			SetPaneStyle(nIndex, SBPS_NORMAL);
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureStatusBar::SetPaneText(UINT nID, LPCTSTR pszText)
{
	INT  nIndex;
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	if ((nIndex = CommandToIndex(nID)) >= 0)
	{
		if (pszText != m_szPanesText.GetAt(nIndex))
		{
			m_szPanesText.SetAt(nIndex, pszText);
			Invalidate(FALSE);
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureStatusBar::GetPaneText(UINT nID, CString &szText) CONST
{
	INT  nIndex;
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	if ((nIndex = CommandToIndex(nID)) >= 0)
	{
		szText = m_szPanesText.GetAt(nIndex);
		return TRUE;
	}
	return FALSE;
}
CString CTCProcedureStatusBar::GetPaneText(UINT nID) CONST
{
	CString  szText;

	return((GetPaneText(nID, szText)) ? (LPCTSTR)szText : EMPTYSTRING);
}

INT CTCProcedureStatusBar::CommandToIndex(UINT nID) CONST
{
	INT  nIndex;
	INT  nCount;
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	for (nIndex = 0, nCount = (INT)m_nPanesID.GetSize(); nIndex < nCount; nIndex++)
	{
		if (nID == m_nPanesID.GetAt(nIndex)) break;
		continue;
	}
	return((nIndex < nCount) ? nIndex : -1);
}

INT CTCProcedureStatusBar::CalcPaneWidth(INT nIndex) CONST
{
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	return CalcPaneWidth(nIndex, (nIndex < m_szPanesText.GetSize()) ? m_szPanesText.GetAt(nIndex) : EMPTYSTRING);
}
INT CTCProcedureStatusBar::CalcPaneWidth(INT nIndex, LPCTSTR pszText) CONST
{
	INT  nWidth;
	CFont  *pOldFont;
	CClientDC  cDC(NULL);

	if ((pOldFont = cDC.SelectObject(GetFont())))
	{
		nWidth = cDC.GetTextExtent(CString(pszText)).cx;
		cDC.SelectObject(pOldFont);
		return nWidth;
	}
	return 0;
}

VOID CTCProcedureStatusBar::Initialize()
{
	INT  nIndex;
	INT  nCount;

	for (nIndex = 0, nCount = GetCount(); nIndex < nCount; nIndex++)
	{
		SetTipText(nIndex, (LPCTSTR)NULL);
		continue;
	}
	m_nPanesID.RemoveAll();
	m_szPanesText.RemoveAll();
}

void CTCProcedureStatusBar::PostNcDestroy()
{
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	m_nPanesID.RemoveAll();
	m_szPanesText.RemoveAll();
	CMFCStatusBar::PostNcDestroy();
}

BOOL CTCProcedureStatusBar::Lock()
{
	return m_pCriticalSection->Lock();
}

BOOL CTCProcedureStatusBar::Unlock()
{
	return m_pCriticalSection->Unlock();
}

BEGIN_MESSAGE_MAP(CTCProcedureStatusBar, CMFCStatusBar)
	//{{AFX_MSG_MAP(CTCProcedureStatusBar)
	ON_WM_PAINT()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureStatusBar message handlers

void CTCProcedureStatusBar::OnPaint()
{
	INT  nIndex;
	INT  nCount;
	CString  szText;
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	for (nIndex = 0, nCount = GetCount(); nIndex < nCount; nIndex++)
	{
		if (m_szPanesText.GetAt(nIndex).Compare(CMFCStatusBar::GetPaneText(nIndex)))
		{
			for (CMFCStatusBar::SetPaneText(nIndex, (szText = m_szPanesText.GetAt(nIndex))); (GetPaneStyle(nIndex) & SBPS_STRETCH) != SBPS_STRETCH; )
			{
				SetPaneWidth(nIndex, CalcPaneWidth(nIndex, szText));
				break;
			}
		}
	}
	CMFCStatusBar::OnPaint();
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFlowchartThreadViewToolTip

IMPLEMENT_DYNCREATE(CTCProcedureFlowchartThreadViewToolTip, CWnd)

BOOL CTCProcedureFlowchartThreadViewToolTip::Create(CWnd *pParentWnd, CONST POINT &point, LPCTSTR pszTitle, LPCTSTR pszText, BOOL bAutoDestroy)
{
	CPoint  pt(point);

	for (SetTitle(pszTitle), SetText(pszText), pParentWnd->ClientToScreen(&pt); CWnd::CreateEx(WS_EX_TOPMOST, AfxRegisterWndClass(CS_SAVEBITS | CS_DROPSHADOW | CS_NOCLOSE, (HCURSOR)(DWORD_PTR)GetClassLongPtr(GetSafeHwnd(), GCLP_HCURSOR)), EMPTYSTRING, WS_POPUP | WS_BORDER, pt.x, pt.y, 0, 0, pParentWnd->GetSafeHwnd(), (HMENU)NULL); )
	{
		if ((bAutoDestroy  &&  SetTimer(TCPROCEDUREFLOWCHARTTHREADVIEW_TOOLTIP_TIMERID, TCPROCEDUREFLOWCHARTTHREADVIEW_TOOLTIP_TIMEOUT, NULL)) || !bAutoDestroy)
		{
			pParentWnd->SetCapture();
			ShowWindow(SW_SHOWNA);
			return TRUE;
		}
		DestroyWindow();
		break;
	}
	return FALSE;
}

BOOL CTCProcedureFlowchartThreadViewToolTip::Destroy()
{
	if (IsWindow(GetSafeHwnd()))
	{
		ReleaseCapture();
		DestroyWindow();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureFlowchartThreadViewToolTip::SetTitleFont(CFont *pFont)
{
	LOGFONT  lfFont;

	if (pFont->GetLogFont(&lfFont) > 0 && ((!m_cFont[0].GetSafeHandle() || m_cFont[0].DeleteObject()) && m_cFont[0].CreateFontIndirect(&lfFont)))
	{
		Update();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureFlowchartThreadViewToolTip::GetTitleFont(CFont *pFont) CONST
{
	LOGFONT  lfFont;

	return((m_cFont[0].GetObject(sizeof(LOGFONT), &lfFont) && pFont->CreateFontIndirect(&lfFont)) ? TRUE : FALSE);
}

BOOL CTCProcedureFlowchartThreadViewToolTip::SetTextFont(CFont *pFont)
{
	LOGFONT  lfFont;

	if (pFont->GetLogFont(&lfFont) > 0 && ((!m_cFont[1].GetSafeHandle() || m_cFont[1].DeleteObject()) && m_cFont[1].CreateFontIndirect(&lfFont)))
	{
		Update();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureFlowchartThreadViewToolTip::GetTextFont(CFont *pFont) CONST
{
	LOGFONT  lfFont;

	return((m_cFont[1].GetObject(sizeof(LOGFONT), &lfFont) && pFont->CreateFontIndirect(&lfFont)) ? TRUE : FALSE);
}

VOID CTCProcedureFlowchartThreadViewToolTip::SetTabstops(CONST CUIntArray &nTabs)
{
	m_nTabs.Copy(nTabs);
}

INT CTCProcedureFlowchartThreadViewToolTip::GetTabstops(CUIntArray &nTabs) CONST
{
	nTabs.Copy(m_nTabs);
	return((INT)nTabs.GetSize());
}

VOID CTCProcedureFlowchartThreadViewToolTip::SetTitle(LPCTSTR pszTitle)
{
	m_szTitle = pszTitle;
}

CString CTCProcedureFlowchartThreadViewToolTip::GetTitle() CONST
{
	return m_szTitle;
}

VOID CTCProcedureFlowchartThreadViewToolTip::SetText(LPCTSTR pszText)
{
	m_szText = pszText;
}

CString CTCProcedureFlowchartThreadViewToolTip::GetText() CONST
{
	return m_szText;
}

VOID CTCProcedureFlowchartThreadViewToolTip::Update()
{
	Update(m_szTitle, m_szText, TRUE);
}
VOID CTCProcedureFlowchartThreadViewToolTip::Update(LPCTSTR pszTitle, LPCTSTR pszText, BOOL bForced)
{
	CRect  rToolTip;

	if (IsWindow(GetSafeHwnd()) && m_cFont[0].GetSafeHandle() && m_cFont[1].GetSafeHandle() && (GetTitle() != pszTitle || GetText() != pszText || bForced))
	{
		for (CalcTabstops((m_szTitle = pszTitle), (m_szText = pszText)), GetWindowRect(rToolTip); rToolTip.IsRectEmpty(); )
		{
			rToolTip.InflateRect(0, 0, 1, 1);
			MoveWindow(rToolTip);
			break;
		}
		Invalidate(FALSE);
	}
}

VOID CTCProcedureFlowchartThreadViewToolTip::CalcTabstops(LPCTSTR pszTitle, LPCTSTR pszText)
{
	INT  nPos;
	CDC  *pDC;
	CFont  *pOldFont;
	CString  szTabstop;
	CUIntArray  nTabs;
	TEXTMETRIC  tmFont;

	if ((pDC = GetDC()))
	{
		if ((pOldFont = pDC->SelectObject(&m_cFont[1])))
		{
			for (nPos = CString(pszText).Find(TAB); nPos >= 0; szTabstop = CString(pszText).GetAt(nPos--) + szTabstop)
			{
				if (CString(pszText).GetAt(nPos) != EOL) continue;
				break;
			}
			if (!szTabstop.IsEmpty())
			{
				nTabs.SetAtGrow(0, CalcMargin().cx + pDC->GetTextExtent(szTabstop.Left(szTabstop.GetLength() - 1) + SPACE).cx);
				SetTabstops(nTabs);
			}
			if (!GetTabstops(nTabs))
			{
				if (pDC->GetTextMetrics(&tmFont))
				{
					nTabs.SetAtGrow(0, tmFont.tmMaxCharWidth);
					SetTabstops(nTabs);
				}
			}
			pDC->SelectObject(pOldFont);
		}
		ReleaseDC(pDC);
	}
}

CSize CTCProcedureFlowchartThreadViewToolTip::CalcExtent(LPCTSTR pszTitle, LPCTSTR pszText, CPoint &ptTitle, CPoint &ptText)
{
	INT  nPos;
	CDC  *pDC;
	CRect  rText;
	CRect  rTitle;
	CSize  sizeText;
	CFont  *pOldFont;
	CString  szTitle;
	CString  szText;
	TEXTMETRIC  tmFont;

	if ((pDC = GetDC()))
	{
		rText.SetRectEmpty();
		rTitle.SetRectEmpty();
		if (lstrlen(pszTitle) > 0 || lstrlen(pszText) > 0)
		{
			if ((pOldFont = pDC->SelectObject(&m_cFont[0])))
			{
				if (pDC->GetTextMetrics((LPTEXTMETRIC)&tmFont))
				{
					for (szTitle = pszTitle; !szTitle.IsEmpty(); )
					{
						if ((nPos = szTitle.Find(EOL)) >= 0)
						{
							sizeText = pDC->GetTabbedTextExtent(szTitle.Left(nPos), (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData());
							rTitle.right = max(sizeText.cx, rTitle.right);
							rTitle.bottom += tmFont.tmHeight;
							szTitle = szTitle.Mid(nPos + 1);
							continue;
						}
						sizeText = pDC->GetTabbedTextExtent(szTitle, (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData());
						rTitle.right = max(sizeText.cx, rTitle.right);
						rTitle.bottom += tmFont.tmHeight;
						break;
					}
				}
				pDC->SelectObject(pOldFont);
			}
			if ((pOldFont = pDC->SelectObject(&m_cFont[1])))
			{
				if (pDC->GetTextMetrics((LPTEXTMETRIC)&tmFont))
				{
					for (szText = pszText; !szText.IsEmpty(); )
					{
						if ((nPos = szText.Find(EOL)) >= 0)
						{
							sizeText = pDC->GetTabbedTextExtent(szText.Left(nPos), (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData());
							rText.right = max(sizeText.cx, rText.right);
							rText.bottom += tmFont.tmHeight;
							szText = szText.Mid(nPos + 1);
							continue;
						}
						sizeText = pDC->GetTabbedTextExtent(szText, (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData());
						rText.right = max(sizeText.cx, rText.right);
						rText.bottom += tmFont.tmHeight;
						break;
					}
				}
				pDC->SelectObject(pOldFont);
			}
			ReleaseDC(pDC);
			ptTitle = ptText = CalcMargin();
			ptText.y = ptText.y + rTitle.Height();
			return CSize(max(rTitle.Width(), rText.Width()) + 2 * (ptTitle.x + 1), rTitle.Height() + rText.Height() + 2 * (ptTitle.y + 1));
		}
		ReleaseDC(pDC);
	}
	return CSize(0, 0);
}

CSize CTCProcedureFlowchartThreadViewToolTip::CalcMargin()
{
	CDC  *pDC;
	CFont  *pOldFont;
	CSize  sizeMargin;
	TEXTMETRIC  tmFont;

	for (sizeMargin.cx = sizeMargin.cy = 0; (pDC = GetDC()); )
	{
		if ((pOldFont = pDC->SelectObject(&m_cFont[0])))
		{
			if (pDC->GetTextMetrics(&tmFont))
			{
				sizeMargin.cx = tmFont.tmAveCharWidth / 2;
				sizeMargin.cy = tmFont.tmHeight / 6;
			}
			pDC->SelectObject(pOldFont);
		}
		if ((pOldFont = pDC->SelectObject(&m_cFont[1])))
		{
			if (pDC->GetTextMetrics(&tmFont))
			{
				sizeMargin.cx = max(tmFont.tmAveCharWidth / 2, sizeMargin.cx);
				sizeMargin.cy = max(tmFont.tmHeight / 6, sizeMargin.cy);
			}
			pDC->SelectObject(pOldFont);
		}
		ReleaseDC(pDC);
		break;
	}
	return sizeMargin;
}

CString CTCProcedureFlowchartThreadViewToolTip::TranslateText(LPCTSTR pszText) CONST
{
	INT  nPos;
	CString  szText;

	for (szText = pszText; (nPos = szText.Find(CString(CR) + CString(EOL))) >= 0; )
	{
		szText = szText.Left(nPos) + szText.Mid(nPos + 1);
		continue;
	}
	return szText;
}

VOID CTCProcedureFlowchartThreadViewToolTip::DrawContent(CDC *pDC)
{
	INT  nPos;
	INT  nBkgndMode;
	CRect  rToolTip;
	CSize  sizeToolTip;
	CSize  sizeToolText;
	CFont  *pOldFont;
	CPoint  ptText;
	CPoint  ptTitle;
	CBrush  cBkgndBrush;
	CString  szText;
	CString  szTitle;
	COLORREF  nOldColor;
	TEXTMETRIC  tmFont;

	GetWindowRect(rToolTip);
	sizeToolTip = CalcExtent(TranslateText(GetTitle()), TranslateText(GetText()), ptTitle, ptText);
	rToolTip.left = min(rToolTip.left, GetSystemMetrics(SM_CXVIRTUALSCREEN) - GetSystemMetrics(SM_CXFRAME) - sizeToolTip.cx);
	rToolTip.top = (rToolTip.top < GetSystemMetrics(SM_CYVIRTUALSCREEN) - GetSystemMetrics(SM_CYFRAME) - sizeToolTip.cy) ? rToolTip.top : (rToolTip.top - sizeToolTip.cy - 1);
	rToolTip.right = rToolTip.left + sizeToolTip.cx;
	rToolTip.bottom = rToolTip.top + sizeToolTip.cy;
	MoveWindow(rToolTip.left, rToolTip.top, rToolTip.Width(), rToolTip.Height());
	if (cBkgndBrush.CreateSysColorBrush(COLOR_INFOBK))
	{
		nBkgndMode = pDC->SetBkMode(TRANSPARENT);
		nOldColor = pDC->SetTextColor(GetSysColor(COLOR_INFOTEXT));
		if ((pOldFont = pDC->SelectObject(&m_cFont[0])) != (CFont *)NULL)
		{
			for (szTitle = TranslateText(GetTitle()); !szTitle.IsEmpty(); )
			{
				if ((nPos = szTitle.Find(EOL)) >= 0)
				{
					if (pDC->GetTextMetrics(&tmFont))
					{
						sizeToolText = pDC->GetTextExtent(szTitle.Left(nPos));
						pDC->FillRect(CRect(ptTitle.x, ptTitle.y, rToolTip.Width(), ptTitle.y + sizeToolText.cy), &cBkgndBrush);
						pDC->TabbedTextOut(ptTitle.x, ptTitle.y, szTitle.Left(nPos), (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData(), 0);
						szTitle = szTitle.Mid(nPos + 1);
						ptTitle.y += tmFont.tmHeight;
					}
					continue;
				}
				sizeToolText = pDC->GetTextExtent(szTitle);
				pDC->FillRect(CRect(ptTitle.x, ptTitle.y, rToolTip.Width(), ptTitle.y + sizeToolText.cy), &cBkgndBrush);
				pDC->TabbedTextOut(ptTitle.x, ptTitle.y, szTitle, (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData(), 0);
				break;
			}
			pDC->SelectObject(pOldFont);
		}
		if ((pOldFont = pDC->SelectObject(&m_cFont[1])))
		{
			for (szText = TranslateText(GetText()); !szText.IsEmpty(); )
			{
				if ((nPos = szText.Find(EOL)) >= 0)
				{
					if (pDC->GetTextMetrics(&tmFont))
					{
						sizeToolText = pDC->GetTextExtent(szText.Left(nPos));
						pDC->FillRect(CRect(ptText.x, ptText.y, rToolTip.Width(), ptText.y + sizeToolText.cy), &cBkgndBrush);
						pDC->TabbedTextOut(ptText.x, ptText.y, szText.Left(nPos), (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData(), 0);
						szText = szText.Mid(nPos + 1);
						ptText.y += tmFont.tmHeight;
					}
					continue;
				}
				sizeToolText = pDC->GetTextExtent(szText);
				pDC->FillRect(CRect(ptText.x, ptText.y, rToolTip.Width(), ptText.y + sizeToolText.cy), &cBkgndBrush);
				pDC->TabbedTextOut(ptText.x, ptText.y, szText, (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData(), 0);
				break;
			}
			pDC->SelectObject(pOldFont);
		}
		pDC->SetTextColor(nOldColor);
		pDC->SetBkMode(nBkgndMode);
	}
}

BEGIN_MESSAGE_MAP(CTCProcedureFlowchartThreadViewToolTip, CWnd)
	//{{AFX_MSG_MAP(CTCProcedureFlowchartThreadViewToolTip)
	ON_WM_CREATE()
	ON_WM_ERASEBKGND()
	ON_WM_PAINT()
	ON_WM_TIMER()
	ON_WM_DESTROY()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFlowchartThreadViewToolTip message handlers

int CTCProcedureFlowchartThreadViewToolTip::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	CRect  rToolTip;
	CSize  sizeToolTip;
	CPoint  ptToolTip[2];
	LOGFONT  lfFont[2];
	CFontTools  cFontTools[2] = { &lfFont[0],&lfFont[1] };

	if (CWnd::OnCreate(lpCreateStruct) != -1)
	{
		for (lfFont[0].lfWeight = FW_BOLD; (m_cFont[0].GetSafeHandle() || m_cFont[0].CreateFontIndirect(&lfFont[0])) && (m_cFont[1].GetSafeHandle() || m_cFont[1].CreateFontIndirect(&lfFont[1])); )
		{
			for (CalcTabstops(TranslateText(GetTitle()), TranslateText(GetText())), sizeToolTip = CalcExtent(TranslateText(GetTitle()), TranslateText(GetText()), ptToolTip[0], ptToolTip[1]); sizeToolTip.cx > 0 && sizeToolTip.cy > 0; )
			{
				rToolTip.top = (lpCreateStruct->y + GetSystemMetrics(SM_CYCURSOR) < GetSystemMetrics(SM_CYVIRTUALSCREEN) - GetSystemMetrics(SM_CYFRAME) - sizeToolTip.cy) ? (lpCreateStruct->y + GetSystemMetrics(SM_CYCURSOR)) : (lpCreateStruct->y - sizeToolTip.cy - 1);
				rToolTip.left = min(lpCreateStruct->x, GetSystemMetrics(SM_CXVIRTUALSCREEN) - GetSystemMetrics(SM_CXFRAME) - sizeToolTip.cx);
				rToolTip.right = rToolTip.left + sizeToolTip.cx;
				rToolTip.bottom = rToolTip.top + sizeToolTip.cy;
				MoveWindow(rToolTip);
				return 0;
			}
			break;
		}
	}
	return -1;
}

BOOL CTCProcedureFlowchartThreadViewToolTip::OnEraseBkgnd(CDC *pDC)
{
	CRect  rToolTip;
	CBrush  cBkgndBrush;

	for (GetClientRect(rToolTip); cBkgndBrush.CreateSysColorBrush(COLOR_INFOBK); )
	{
		pDC->FillRect(rToolTip, &cBkgndBrush);
		cBkgndBrush.DeleteObject();
		return TRUE;
	}
	return CWnd::OnEraseBkgnd(pDC);
}

void CTCProcedureFlowchartThreadViewToolTip::OnPaint()
{
	CPaintDC  cDC(this);

	DrawContent(&cDC);
}

void CTCProcedureFlowchartThreadViewToolTip::OnTimer(UINT_PTR nEventID)
{
	Destroy();
}

void CTCProcedureFlowchartThreadViewToolTip::OnDestroy()
{
	m_szText.Empty();
	m_szTitle.Empty();
	m_nTabs.RemoveAll();
	m_cFont[0].DeleteObject();
	m_cFont[1].DeleteObject();
	KillTimer(TCPROCEDUREFLOWCHARTTHREADVIEW_TOOLTIP_TIMERID);
	CWnd::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFlowchartThreadDocument

IMPLEMENT_DYNAMIC(CTCProcedureFlowchartThreadDocument, CDocument)

CTCProcedureFlowchartThreadDocument::CTCProcedureFlowchartThreadDocument() : CDocument()
{
	return;
}

CTCProcedureFlowchartThreadDocument::~CTCProcedureFlowchartThreadDocument()
{
	return;
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFlowchartThreadViewDebugPane

IMPLEMENT_DYNCREATE(CTCProcedureFlowchartThreadViewDebugPane, CWnd)

CTCProcedureFlowchartThreadViewDebugPane::CTCProcedureFlowchartThreadViewDebugPane() : CWnd()
{
	m_pParentWnd = (CWnd *)NULL;
}

BOOL CTCProcedureFlowchartThreadViewDebugPane::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	return CWnd::Create(AfxRegisterWndClass(CS_NOCLOSE, LoadCursor((HINSTANCE)NULL, IDC_ARROW), (HBRUSH)NULL), (LPCTSTR)NULL, WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_VISIBLE, rect, (m_pParentWnd = pParentWnd), 0);
}

VOID CTCProcedureFlowchartThreadViewDebugPane::SetBreakpoints(CONST CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints)
{
	INT  nBreakpoint[2];
	INT  nBreakpoints[2];
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nBreakpoint[0] = 0, nBreakpoints[0] = (INT)m_szBreakpoints.GetSize(), m_pDatabaseTCProcedureThreadBreakpoints.Copy(&pDatabaseTCProcedureThreadBreakpoints); nBreakpoint[0] < nBreakpoints[0]; nBreakpoint[0]++)
	{
		for (nBreakpoint[1] = 0, nBreakpoints[1] = (INT)pDatabaseTCProcedureThreadBreakpoints.GetSize(); nBreakpoint[1] < nBreakpoints[1]; nBreakpoint[1]++)
		{
			if ((pDatabaseTCProcedureThreadBreakpoint = pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint[1])))
			{
				if (m_szBreakpoints.GetAt(nBreakpoint[0]) == pDatabaseTCProcedureThreadBreakpoint->GetLocation()) break;
				continue;
			}
		}
		if (nBreakpoint[1] == nBreakpoints[1])
		{
			m_szBreakpoints.RemoveAt(nBreakpoint[0]);
			nBreakpoints[0]--;
			nBreakpoint[0]--;
		}
	}
	Update();
}

INT CTCProcedureFlowchartThreadViewDebugPane::GetBreakpoints(CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints) CONST
{
	pDatabaseTCProcedureThreadBreakpoints.Copy(&m_pDatabaseTCProcedureThreadBreakpoints);
	return((INT)pDatabaseTCProcedureThreadBreakpoints.GetSize());
}

VOID CTCProcedureFlowchartThreadViewDebugPane::Update()
{
	DrawContent();
}

CTCProcedureFlowchartThreadView *CTCProcedureFlowchartThreadViewDebugPane::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)m_pParentWnd);
}

VOID CTCProcedureFlowchartThreadViewDebugPane::DrawContent()
{
	CDC  *pDC;

	if ((pDC = GetDC()))
	{
		DrawContent(pDC);
		ReleaseDC(pDC);
	}
}
VOID CTCProcedureFlowchartThreadViewDebugPane::DrawContent(CDC *pDC)
{
	CDC  cDC;
	CRect  rPane;
	CBitmap  cBitmap;
	CBitmap  *pOldBitmap;

	GetClientRect(rPane);
	if (cDC.CreateCompatibleDC(pDC))
	{
		if (cBitmap.CreateCompatibleBitmap(pDC, rPane.Width(), rPane.Height()))
		{
			if ((pOldBitmap = cDC.SelectObject(&cBitmap)) != (CBitmap *)NULL)
			{
				cDC.FillSolidRect(rPane, GetSysColor(COLOR_3DFACE));
				cDC.DrawEdge(rPane, EDGE_ETCHED, BF_RIGHT);
				DrawBreakpoints(&cDC);
				DrawExecutionpoint(&cDC);
				pDC->BitBlt(0, 0, rPane.Width(), rPane.Height(), &cDC, 0, 0, SRCCOPY);
				cDC.SelectObject(pOldBitmap);
			}
			cBitmap.DeleteObject();
		}
		cDC.DeleteDC();
	}
}

VOID CTCProcedureFlowchartThreadViewDebugPane::DrawBreakpoints(CDC *pDC)
{
	INT  nBreakpoint;
	INT  nBreakpoints;
	CPen  *pOldPen;
	CPen  cBreakpointPen;
	CRect  rBreakpoint;
	CBrush  *pOldBrush;
	CBrush  cBreakpointBrush;
	CTCProcedureDocumentItem  *pStep;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nBreakpoint = 0, nBreakpoints = (INT)m_pDatabaseTCProcedureThreadBreakpoints.GetSize(); nBreakpoint < nBreakpoints; nBreakpoint++)
	{
		if ((pStep = ((pDatabaseTCProcedureThreadBreakpoint = m_pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint))) ? (CTCProcedureDocumentItem *)GetParent()->FindStep(pDatabaseTCProcedureThreadBreakpoint->GetLocation()) : (CTCProcedureDocumentItem *)NULL))
		{
			for (rBreakpoint = CalcBreakpointPosition(pStep); cBreakpointPen.CreatePen(PS_SOLID, 1, VGA_COLOR_RED) && cBreakpointBrush.CreateSolidBrush((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_DISABLED) ? GetSysColor(COLOR_3DLIGHT) : VGA_COLOR_RED); )
			{
				if ((pOldPen = pDC->SelectObject(&cBreakpointPen)) != (CPen *)NULL)
				{
					if ((pOldBrush = pDC->SelectObject(&cBreakpointBrush)))
					{
						pDC->Ellipse(rBreakpoint);
						pDC->SelectObject(pOldBrush);
					}
					pDC->SelectObject(pOldPen);
				}
				break;
			}
			cBreakpointBrush.DeleteObject();
			cBreakpointPen.DeleteObject();
		}
	}
}

VOID CTCProcedureFlowchartThreadViewDebugPane::DrawExecutionpoint(CDC *pDC)
{
	CPen  *pOldPen;
	CPen  cExecutionpointPen;
	CRect  rExecutionpoint;
	CBrush  *pOldBrush;
	CBrush  cExecutionpointBrush;
	CPoint  ptExecutionpoint[7];
	CUIntArray  nExecutionLines;
	CUIntArray  nExecutionStates;

	for (rExecutionpoint = CalcExecutionpointPosition(); !rExecutionpoint.IsRectEmpty(); )
	{
		if (cExecutionpointBrush.CreateSolidBrush((GetParent()->GetExecutionState() & TCPROCEDURETHREAD_RUNNINGSTATE_RUNNING) ? VGA_COLOR_GREEN : (((GetParent()->GetExecutionState() & TCPROCEDURETHREAD_ACTIONSTATE_ABORT) != TCPROCEDURETHREAD_ACTIONSTATE_ABORT) ? VGA_COLOR_LTYELLOW : VGA_COLOR_LTRED)))
		{
			if (cExecutionpointPen.CreatePen(PS_SOLID, 1, VGA_COLOR_BLACK))
			{
				if ((pOldPen = pDC->SelectObject(&cExecutionpointPen)))
				{
					if ((pOldBrush = pDC->SelectObject(&cExecutionpointBrush)))
					{
						ptExecutionpoint[0].x = rExecutionpoint.right;
						ptExecutionpoint[0].y = rExecutionpoint.CenterPoint().y;
						ptExecutionpoint[1].x = rExecutionpoint.CenterPoint().x;
						ptExecutionpoint[1].y = rExecutionpoint.top;
						ptExecutionpoint[2].x = ptExecutionpoint[1].x;
						ptExecutionpoint[2].y = ptExecutionpoint[1].y + rExecutionpoint.Height() / 4;
						ptExecutionpoint[3].x = rExecutionpoint.left;
						ptExecutionpoint[3].y = ptExecutionpoint[2].y;
						ptExecutionpoint[4].x = ptExecutionpoint[3].x;
						ptExecutionpoint[4].y = rExecutionpoint.bottom - rExecutionpoint.Height() / 4;
						ptExecutionpoint[5].x = ptExecutionpoint[2].x;
						ptExecutionpoint[5].y = ptExecutionpoint[4].y;
						ptExecutionpoint[6].x = ptExecutionpoint[5].x;
						ptExecutionpoint[6].y = rExecutionpoint.bottom;
						pDC->Polygon(ptExecutionpoint, sizeof(ptExecutionpoint) / sizeof(CPoint));
						pDC->SelectObject(pOldBrush);
					}
					pDC->SelectObject(pOldPen);
				}
				cExecutionpointPen.DeleteObject();
			}
			cExecutionpointBrush.DeleteObject();
		}
		break;
	}
}

CTCProcedureDocumentItem *CTCProcedureFlowchartThreadViewDebugPane::FindBreakpoint(CTCProcedureDocumentItem *pStep) CONST
{
	POSITION  lPosition;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pDatabaseTCProcedureThreadBreakpoint;

	for (lPosition = ((pDocument = GetParent()->GetDocument())) ? pDocument->GetStartPosition() : (POSITION)NULL; lPosition; )
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = pDocument->GetNextStep(lPosition)))
		{
			if (!pDatabaseTCProcedureThreadBreakpoint->GetSubSteps()->FindStep(pStep, TRUE)) continue;
			return((!pDatabaseTCProcedureThreadBreakpoint->GetSubSteps()->FindStep(pStep, FALSE)) ? FindBreakpoint(pDatabaseTCProcedureThreadBreakpoint->GetSubSteps(), pStep) : pDatabaseTCProcedureThreadBreakpoint);
		}
	}
	return((CTCProcedureDocumentItem *)NULL);
}
CTCProcedureDocumentItem *CTCProcedureFlowchartThreadViewDebugPane::FindBreakpoint(CTCProcedureDocument *pSubSteps, CTCProcedureDocumentItem *pStep) CONST
{
	POSITION  lPosition;
	CTCProcedureDocumentItem  *pDatabaseTCProcedureThreadBreakpoint;

	for (lPosition = pSubSteps->GetStartPosition(); lPosition; )
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = pSubSteps->GetNextStep(lPosition)))
		{
			if (!pDatabaseTCProcedureThreadBreakpoint->GetSubSteps()->FindStep(pStep, TRUE)) continue;
			return((!pDatabaseTCProcedureThreadBreakpoint->GetSubSteps()->FindStep(pStep, FALSE)) ? FindBreakpoint(pDatabaseTCProcedureThreadBreakpoint->GetSubSteps(), pStep) : pDatabaseTCProcedureThreadBreakpoint);
		}
	}
	return((CTCProcedureDocumentItem *)NULL);
}

CRect CTCProcedureFlowchartThreadViewDebugPane::CalcBreakpointPosition(CTCProcedureDocumentItem *pStep) CONST
{
	CTCProcedureDocumentItem  *pDatabaseTCProcedureThreadBreakpoint[2];

	for (pDatabaseTCProcedureThreadBreakpoint[0] = pStep; (pDatabaseTCProcedureThreadBreakpoint[1] = FindBreakpoint(pDatabaseTCProcedureThreadBreakpoint[0])) && !pDatabaseTCProcedureThreadBreakpoint[1]->IsExpanded(); )
	{
		pDatabaseTCProcedureThreadBreakpoint[0] = pDatabaseTCProcedureThreadBreakpoint[1];
		continue;
	}
	return CRect(CalcBreakpointIndent(), pDatabaseTCProcedureThreadBreakpoint[0]->GetPosition().top + (pDatabaseTCProcedureThreadBreakpoint[0]->GetImageSize().cy - 2 * CalcBreakpointRadius()) / 2, CalcBreakpointIndent() + 2 * CalcBreakpointRadius(), pDatabaseTCProcedureThreadBreakpoint[0]->GetPosition().top + (pDatabaseTCProcedureThreadBreakpoint[0]->GetImageSize().cy - 2 * CalcBreakpointRadius()) / 2 + 2 * CalcBreakpointRadius());
}

INT CTCProcedureFlowchartThreadViewDebugPane::CalcBreakpointRadius() CONST
{
	CRect  rBreakpoint;

	GetClientRect(rBreakpoint);
	return((rBreakpoint.Width() - 2 * CalcBreakpointIndent()) / 2);
}

INT CTCProcedureFlowchartThreadViewDebugPane::CalcBreakpointIndent() CONST
{
	return GetSystemMetrics(SM_CXEDGE);
}

CRect CTCProcedureFlowchartThreadViewDebugPane::CalcExecutionpointPosition() CONST
{
	CPoint  ptExecution;

	return(((ptExecution = GetParent()->GetExecutionpoint()).x != 0 && ptExecution.y != 0) ? CRect(CalcExecutionpointIndent(), ptExecution.y - (CalcExecutionpointExtent() - CalcExecutionpointExtent() % 2) / 2, CalcExecutionpointIndent() + CalcExecutionpointExtent(), ptExecution.y - (CalcExecutionpointExtent() - CalcExecutionpointExtent() % 2) / 2 + CalcExecutionpointExtent()) : CRect(0, 0, 0, 0));
}

INT CTCProcedureFlowchartThreadViewDebugPane::CalcExecutionpointExtent() CONST
{
	INT  nExtent;
	CRect  rExecutionpoint;

	GetClientRect(rExecutionpoint);
	return(((nExtent = (rExecutionpoint.Width() - 2 * CalcExecutionpointIndent())) % 2) ? (nExtent - 1) : nExtent);
}

INT CTCProcedureFlowchartThreadViewDebugPane::CalcExecutionpointIndent() CONST
{
	return GetSystemMetrics(SM_CXEDGE);
}

BEGIN_MESSAGE_MAP(CTCProcedureFlowchartThreadViewDebugPane, CWnd)
	//{{AFX_MSG_MAP(CTCProcedureFlowchartThreadViewDebugPane)
	ON_WM_PAINT()
	ON_WM_MOUSEMOVE()
	ON_WM_LBUTTONDOWN()
	ON_WM_RBUTTONDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFlowchartThreadViewDebugPane message handlers

void CTCProcedureFlowchartThreadViewDebugPane::OnPaint()
{
	CPaintDC  cDC(this);

	DrawContent(&cDC);
}

void CTCProcedureFlowchartThreadViewDebugPane::OnMouseMove(UINT nFlags, CPoint point)
{
	INT  nBreakpoint;
	INT  nBreakpoints;
	CRect  rBreakpoint;
	CString  szToolTipTitle;
	CString  szToolTipText;
	CTCProcedureDocumentItem  *pStep;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nBreakpoint = 0, nBreakpoints = (INT)m_pDatabaseTCProcedureThreadBreakpoints.GetSize(); nBreakpoint < nBreakpoints; nBreakpoint++)
	{
		if ((pStep = ((pDatabaseTCProcedureThreadBreakpoint = m_pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint))) ? (CTCProcedureDocumentItem *)GetParent()->FindStep(pDatabaseTCProcedureThreadBreakpoint->GetLocation()) : (CTCProcedureDocumentItem *)NULL))
		{
			rBreakpoint.SetRect(CalcBreakpointIndent(), pStep->GetPosition().top + (pStep->GetImageSize().cy - 2 * CalcBreakpointRadius()) / 2, CalcBreakpointIndent() + 2 * CalcBreakpointRadius(), pStep->GetPosition().top + (pStep->GetImageSize().cy - 2 * CalcBreakpointRadius()) / 2 + 2 * CalcBreakpointRadius());
			if ((point.x - rBreakpoint.CenterPoint().x)*(point.x - rBreakpoint.CenterPoint().x) + (point.y - rBreakpoint.CenterPoint().y)*(point.y - rBreakpoint.CenterPoint().y) <= (rBreakpoint.Width()*rBreakpoint.Width()) / 4)
			{
				for (szToolTipTitle.Format(STRING(IDS_TCPROCEDURETHREAD_BREAKPOINTTOOLTIP_STEPTITLE), (LPCTSTR)pDatabaseTCProcedureThreadBreakpoint->GetLocation()), szToolTipText = (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS) ? STRING(IDS_TCPROCEDURETHREAD_BREAKPOINTTOOLTIP_BREAKALWAYS) : EMPTYSTRING, szToolTipText = (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER) ? STRING(IDS_TCPROCEDURETHREAD_BREAKPOINTTOOLTIP_BREAKATFAILEDTRIGGER) : szToolTipText, szToolTipText += (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY) ? ((!szToolTipText.IsEmpty()) ? (CString(EOL) + STRING(IDS_TCPROCEDURETHREAD_BREAKPOINTTOOLTIP_BREAKATFAILEDBODY)) : STRING(IDS_TCPROCEDURETHREAD_BREAKPOINTTOOLTIP_BREAKATFAILEDBODY)) : EMPTYSTRING, szToolTipText += (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION) ? ((!szToolTipText.IsEmpty()) ? (CString(EOL) + STRING(IDS_TCPROCEDURETHREAD_BREAKPOINTTOOLTIP_BREAKATFAILEDCONFIRMATION)) : STRING(IDS_TCPROCEDURETHREAD_BREAKPOINTTOOLTIP_BREAKATFAILEDCONFIRMATION)) : EMPTYSTRING, szToolTipText += (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_DISABLED) ? (CString(EOL) + STRING(IDS_TCPROCEDURETHREAD_BREAKPOINTTOOLTIP_DISABLED)) : (CString(EOL) + STRING(IDS_TCPROCEDURETHREAD_BREAKPOINTTOOLTIP_ENABLED)); IsWindow(m_wndToolTip.GetSafeHwnd()) && m_szToolTip != szToolTipTitle; )
				{
					m_wndToolTip.Destroy();
					m_szToolTip.Empty();
					break;
				}
				if (!IsWindow(m_wndToolTip.GetSafeHwnd()) && m_szToolTip != szToolTipTitle && (nFlags & MK_RBUTTON) != MK_RBUTTON)
				{
					m_wndToolTip.Create(this, point, (m_szToolTip = szToolTipTitle), szToolTipText, TRUE);
					break;
				}
				break;
			}
		}
	}
	if (nBreakpoint == nBreakpoints)
	{
		m_wndToolTip.Destroy();
		m_szToolTip.Empty();
	}
	CWnd::OnMouseMove(nFlags, point);
}

void CTCProcedureFlowchartThreadViewDebugPane::OnLButtonDown(UINT nFlags, CPoint point)
{
	INT  nStep;
	INT  nSteps;
	INT  nBreakpoint[2];
	INT  nBreakpoints[2];
	BOOL  bBreakpoints;
	CRect  rBreakpoint;
	CString  szStep;
	CPtrArray  pSteps;
	CStringArray  szSteps;
	CTCProcedureDocumentItem  *pStep;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nBreakpoint[0] = 0, nBreakpoints[0] = (INT)m_pDatabaseTCProcedureThreadBreakpoints.GetSize(), bBreakpoints = FALSE; nBreakpoint[0] < nBreakpoints[0]; nBreakpoint[0]++)
	{
		if ((pStep = ((pDatabaseTCProcedureThreadBreakpoint = m_pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint[0]))) ? (CTCProcedureDocumentItem *)GetParent()->FindStep(pDatabaseTCProcedureThreadBreakpoint->GetLocation()) : (CTCProcedureDocumentItem *)NULL))
		{
			rBreakpoint.SetRect(CalcBreakpointIndent(), pStep->GetPosition().top + (pStep->GetImageSize().cy - 2 * CalcBreakpointRadius()) / 2, CalcBreakpointIndent() + 2 * CalcBreakpointRadius(), pStep->GetPosition().top + (pStep->GetImageSize().cy - 2 * CalcBreakpointRadius()) / 2 + 2 * CalcBreakpointRadius());
			if ((point.x - rBreakpoint.CenterPoint().x)*(point.x - rBreakpoint.CenterPoint().x) + (point.y - rBreakpoint.CenterPoint().y)*(point.y - rBreakpoint.CenterPoint().y) <= (rBreakpoint.Width()*rBreakpoint.Width()) / 4)
			{
				for (nStep = 0, nSteps = GetParent()->EnumSteps(point.y, pSteps, szSteps); nStep < nSteps; nStep++)
				{
					if ((pStep = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)) && pStep->GetName() == pDatabaseTCProcedureThreadBreakpoint->GetLocation())
					{
						for (nBreakpoint[1] = 0, nBreakpoints[1] = (INT)m_szBreakpoints.GetSize(); nBreakpoint[1] < nBreakpoints[1]; nBreakpoint[1]++)
						{
							if (m_szBreakpoints.GetAt(nBreakpoint[1]) == pDatabaseTCProcedureThreadBreakpoint->GetLocation())
							{
								m_szBreakpoints.RemoveAt(nBreakpoint[1]);
								pStep->SetName(EMPTYSTRING);
								break;
							}
						}
						bBreakpoints = TRUE;
						break;
					}
				}
				m_pDatabaseTCProcedureThreadBreakpoints.RemoveAt(nBreakpoint[0]);
				delete pDatabaseTCProcedureThreadBreakpoint;
				nBreakpoints[0]--;
				nBreakpoint[0]--;
				break;
			}
		}
	}
	for (nStep = 0, nSteps = (nBreakpoint[0] == nBreakpoints[0]) ? GetParent()->EnumSteps(point.y, pSteps, szSteps) : 0; nStep < nSteps; nStep++)
	{
		if ((pStep = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)) && pStep->IsActivated())
		{
			if ((pDatabaseTCProcedureThreadBreakpoint = new CDatabaseTCProcedureThreadBreakpoint))
			{
				pDatabaseTCProcedureThreadBreakpoint->SetLocation((szStep = szSteps.GetAt(nStep)));
				pDatabaseTCProcedureThreadBreakpoint->SetOptions(TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS);
				if (m_pDatabaseTCProcedureThreadBreakpoints.Add(pDatabaseTCProcedureThreadBreakpoint) >= 0)
				{
					if (pStep->GetName().IsEmpty())
					{
						m_szBreakpoints.Add(szStep);
						pStep->SetName(szStep);
						bBreakpoints = TRUE;
					}
					break;
				}
				delete pDatabaseTCProcedureThreadBreakpoint;
			}
		}
	}
	if (nBreakpoint[0] < nBreakpoints[0] || nStep < nSteps)
	{
		for (GetParent()->UpdateAllBreakpoints(); bBreakpoints; )
		{
			GetParent()->UpdateAllSteps();
			break;
		}
		Update();
	}
	for (; IsWindow(m_wndToolTip.GetSafeHwnd()) && nBreakpoint[0] < nBreakpoints[0]; )
	{
		m_wndToolTip.Destroy();
		break;
	}
	CWnd::OnLButtonDown(nFlags, point);
}

void CTCProcedureFlowchartThreadViewDebugPane::OnRButtonDown(UINT nFlags, CPoint point)
{
	INT  nItem;
	INT  nItems;
	INT  nItemID;
	INT  nBreakpoint;
	INT  nBreakpoints;
	CRect  rBreakpoint;
	CPoint  ptBreakpointMenu;
	CString  szBreakpointMenuItem;
	CLocaleMenu  cBreakpointMenu[2];
	CTCProcedureDocumentItem  *pStep;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nBreakpoint = 0, nBreakpoints = (INT)m_pDatabaseTCProcedureThreadBreakpoints.GetSize(), ptBreakpointMenu = point, ClientToScreen(&ptBreakpointMenu); nBreakpoint < nBreakpoints; nBreakpoint++)
	{
		if ((pStep = ((pDatabaseTCProcedureThreadBreakpoint = m_pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint))) ? (CTCProcedureDocumentItem *)GetParent()->FindStep(pDatabaseTCProcedureThreadBreakpoint->GetLocation()) : (CTCProcedureDocumentItem *)NULL))
		{
			rBreakpoint.SetRect(CalcBreakpointIndent(), pStep->GetPosition().top + (pStep->GetImageSize().cy - 2 * CalcBreakpointRadius()) / 2, CalcBreakpointIndent() + 2 * CalcBreakpointRadius(), pStep->GetPosition().top + (pStep->GetImageSize().cy - 2 * CalcBreakpointRadius()) / 2 + 2 * CalcBreakpointRadius());
			if ((point.x - rBreakpoint.CenterPoint().x)*(point.x - rBreakpoint.CenterPoint().x) + (point.y - rBreakpoint.CenterPoint().y)*(point.y - rBreakpoint.CenterPoint().y) <= (rBreakpoint.Width()*rBreakpoint.Width()) / 4)
			{
				for (nItem = 0, nItems = (cBreakpointMenu[0].CreatePopupMenu() && cBreakpointMenu[1].LoadMenu(IDR_TCSTEPBREAKPOINTMENU)) ? cBreakpointMenu[1].GetMenuItemCount() : 0, m_wndToolTip.Destroy(); nItem < nItems; nItem++)
				{
					if ((nItemID = cBreakpointMenu[1].GetMenuItemID(nItem)) >= 0 && (!nItemID || cBreakpointMenu[1].GetMenuString(nItem, szBreakpointMenuItem, MF_BYPOSITION) > 0))
					{
						cBreakpointMenu[0].AppendMenu(((nItemID > 0) ? MF_STRING : MF_SEPARATOR) | MF_ENABLED, (UINT_PTR)nItemID, szBreakpointMenuItem);
						cBreakpointMenu[0].CheckMenuItem(nItemID, (((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS) && nItemID == IDM_TCSTEPBREAKPOINT_BREAKALWAYS)) ? (MF_CHECKED | MF_BYCOMMAND) : ((cBreakpointMenu[0].GetMenuState(nItemID, MF_BYCOMMAND) & MF_CHECKED) | MF_BYCOMMAND));
						cBreakpointMenu[0].CheckMenuItem(nItemID, (((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER) && nItemID == IDM_TCSTEPBREAKPOINT_BREAKATFAILEDTRIGGER)) ? (MF_CHECKED | MF_BYCOMMAND) : ((cBreakpointMenu[0].GetMenuState(nItemID, MF_BYCOMMAND) & MF_CHECKED) | MF_BYCOMMAND));
						cBreakpointMenu[0].CheckMenuItem(nItemID, (((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY) && nItemID == IDM_TCSTEPBREAKPOINT_BREAKATFAILEDBODY)) ? (MF_CHECKED | MF_BYCOMMAND) : ((cBreakpointMenu[0].GetMenuState(nItemID, MF_BYCOMMAND) & MF_CHECKED) | MF_BYCOMMAND));
						cBreakpointMenu[0].CheckMenuItem(nItemID, (((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION) && nItemID == IDM_TCSTEPBREAKPOINT_BREAKATFAILEDCONFIRMATION)) ? (MF_CHECKED | MF_BYCOMMAND) : ((cBreakpointMenu[0].GetMenuState(nItemID, MF_BYCOMMAND) & MF_CHECKED) | MF_BYCOMMAND));
						cBreakpointMenu[0].CheckMenuItem(nItemID, (((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_DISABLED) && nItemID == IDM_TCSTEPBREAKPOINT_DISABLE)) ? (MF_CHECKED | MF_BYCOMMAND) : ((cBreakpointMenu[0].GetMenuState(nItemID, MF_BYCOMMAND) & MF_CHECKED) | MF_BYCOMMAND));
					}
				}
				if (nItems > 0)
				{
					if ((nItemID = cBreakpointMenu[0].TrackPopupMenu(TPM_LEFTALIGN | TPM_LEFTBUTTON | TPM_RETURNCMD, ptBreakpointMenu.x, ptBreakpointMenu.y, GetTopLevelFrame())) == IDM_TCSTEPBREAKPOINT_BREAKALWAYS)
					{
						pDatabaseTCProcedureThreadBreakpoint->SetOptions((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & ~(TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION)) | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS);
						GetParent()->UpdateAllBreakpoints();
						DrawContent();
					}
					if (nItemID == IDM_TCSTEPBREAKPOINT_BREAKATFAILEDTRIGGER)
					{
						pDatabaseTCProcedureThreadBreakpoint->SetOptions(((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & (TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION)) == TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER) ? ((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & ~TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER) | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS) : ((pDatabaseTCProcedureThreadBreakpoint->GetOptions() ^ TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER) & ~TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS));
						GetParent()->UpdateAllBreakpoints();
						DrawContent();
					}
					if (nItemID == IDM_TCSTEPBREAKPOINT_BREAKATFAILEDBODY)
					{
						pDatabaseTCProcedureThreadBreakpoint->SetOptions(((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & (TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION)) == TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY) ? ((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & ~TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY) | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS) : ((pDatabaseTCProcedureThreadBreakpoint->GetOptions() ^ TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY) & ~TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS));
						GetParent()->UpdateAllBreakpoints();
						DrawContent();
					}
					if (nItemID == IDM_TCSTEPBREAKPOINT_BREAKATFAILEDCONFIRMATION)
					{
						pDatabaseTCProcedureThreadBreakpoint->SetOptions(((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & (TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION)) == TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION) ? ((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & ~TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION) | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS) : ((pDatabaseTCProcedureThreadBreakpoint->GetOptions() ^ TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION) & ~TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS));
						GetParent()->UpdateAllBreakpoints();
						DrawContent();
					}
					if (nItemID == IDM_TCSTEPBREAKPOINT_DISABLE)
					{
						pDatabaseTCProcedureThreadBreakpoint->SetOptions(pDatabaseTCProcedureThreadBreakpoint->GetOptions() ^ TCPROCEDURETHREADBREAKPOINT_OPTION_DISABLED);
						GetParent()->UpdateAllBreakpoints();
						DrawContent();
					}
					cBreakpointMenu[1].DestroyMenu();
				}
				break;
			}
		}
	}
	CWnd::OnRButtonDown(nFlags, point);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFlowchartThreadView

IMPLEMENT_DYNCREATE(CTCProcedureFlowchartThreadView, CScrollView)

CTCProcedureFlowchartThreadView::CTCProcedureFlowchartThreadView() : CScrollView()
{
	CFontTools  cFontTools(&m_lfStepsLabelFont);

	m_nStepID = -1;
	m_nExecState = 0;
	m_ptScroll.x = 0;
	m_ptScroll.y = 0;
	m_ptDropStep.x = 0;
	m_ptDropStep.y = 0;
	m_bUndo[0] = FALSE;
	m_bUndo[1] = FALSE;
	m_hPointCursor = (HCURSOR)NULL;
	m_hToolTipCursor = (HCURSOR)NULL;
	m_pFlowchart[0] = (CTCProcedureDocument *)NULL;
	m_pFlowchart[1] = (CTCProcedureDocument *)NULL;
	m_nStepsLabelColor = GetSysColor(COLOR_WINDOWTEXT);
	m_nBackgroundColor[0] = GetSysColor(COLOR_WINDOW);
	m_nBackgroundColor[1] = GetSysColor(COLOR_WINDOW);
}

BOOL CTCProcedureFlowchartThreadView::Create(CWnd *pParentWnd, CONST RECT &rect, BOOL bVisible)
{
	CCreateContext  cContext;

	if ((m_pFlowchart[0] = new CTCProcedureDocument))
	{
		if ((m_pFlowchart[1] = new CTCProcedureDocument))
		{
			for (cContext.m_pCurrentDoc = m_pFlowchart[0]; CScrollView::Create(AfxRegisterWndClass(CS_DBLCLKS | CS_NOCLOSE, LoadCursor((HINSTANCE)NULL, IDC_ARROW), GetSysColorBrush(COLOR_WINDOW)), (LPCTSTR)NULL, WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | ((bVisible) ? WS_VISIBLE : 0), rect, pParentWnd, 0, &cContext); ) return TRUE;
			delete m_pFlowchart[1];
		}
		delete m_pFlowchart[0];
		m_pFlowchart[0] = (CTCProcedureDocument *)NULL;
		m_pFlowchart[1] = (CTCProcedureDocument *)NULL;
	}
	return FALSE;
}

BOOL CTCProcedureFlowchartThreadView::SetSteps(CONST CTCProcedureDocument *pFlowchart, BOOL bNew)
{
	CFontTools  cFontTools;
	CTCProcedureDocumentItem  *pStep[2];

	if (!pFlowchart->GetStepCount())
	{
		if ((pStep[0] = new CTCProcedureDocumentStartItem))
		{
			if ((pStep[1] = new CTCProcedureDocumentEndItem))
			{
				for (pStep[0]->SetPosition(CRect(CalcDebugPaneMarginSize() + TCPROCEDUREDOCUMENT_DEFAULT_STEPHORZINDENT, TCPROCEDUREDOCUMENT_DEFAULT_MARGIN + TCPROCEDUREDOCUMENT_DEFAULT_STEPLABELVERTINDENT + cFontTools.QueryHeight(&m_lfStepsLabelFont), CalcDebugPaneMarginSize() + TCPROCEDUREDOCUMENT_DEFAULT_STEPHORZINDENT + pStep[0]->GetImageSize().cx, TCPROCEDUREDOCUMENT_DEFAULT_MARGIN + TCPROCEDUREDOCUMENT_DEFAULT_STEPLABELVERTINDENT + cFontTools.QueryHeight(&m_lfStepsLabelFont) + pStep[0]->GetImageSize().cy)), pStep[1]->SetPosition(CRect(CalcDebugPaneMarginSize() + TCPROCEDUREDOCUMENT_DEFAULT_STEPHORZINDENT, pStep[0]->GetPosition().bottom + TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL, CalcDebugPaneMarginSize() + TCPROCEDUREDOCUMENT_DEFAULT_STEPHORZINDENT + pStep[1]->GetImageSize().cx, pStep[0]->GetPosition().bottom + TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL + pStep[1]->GetImageSize().cy)), GetDocument()->DeleteContents(), GetDocument()->AddStep(pStep[0]), GetDocument()->AddStep(pStep[1]); !bNew || m_pFlowchart[1]->Copy(m_pFlowchart[0]); )
				{
					m_nBackgroundColor[1] = (bNew) ? m_nBackgroundColor[0] : m_nBackgroundColor[1];
					SetStepsLabelFont(&m_lfStepsLabelFont, (bNew) ? -TRUE : FALSE);
					SetStepsLabelColor(m_nStepsLabelColor, (bNew) ? -TRUE : FALSE);
					UpdateAllSteps();
					return TRUE;
				}
				delete pStep[0];
			}
			delete pStep[1];
		}
		return FALSE;
	}
	if (GetDocument()->Copy(pFlowchart) && (!bNew || m_pFlowchart[1]->Copy(m_pFlowchart[0])))
	{
		m_nBackgroundColor[1] = (bNew) ? m_nBackgroundColor[0] : m_nBackgroundColor[1];
		SetStepsLabelFont(&m_lfStepsLabelFont, (bNew) ? -TRUE : FALSE);
		SetStepsLabelColor(m_nStepsLabelColor, (bNew) ? -TRUE : FALSE);
		UpdateAllSteps();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureFlowchartThreadView::GetSteps(CTCProcedureDocument *pFlowchart) CONST
{
	return pFlowchart->Copy(GetDocument());
}

INT CTCProcedureFlowchartThreadView::EnumSteps(INT nY, CPtrArray &pSteps, CStringArray &szSteps) CONST
{
	INT  nStep;
	INT  nSteps;
	CPtrArray  pNamedSteps;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pItem[2];

	if ((pDocument = new CTCProcedureDocument))
	{
		for (nStep = 0, nSteps = (pDocument->Copy(GetDocument()) && GetDocument()->EnumSteps(pSteps) == pDocument->EnumSteps(pNamedSteps, FALSE, TRUE)) ? (INT)pSteps.GetSize() : 0, szSteps.RemoveAll(); nStep < nSteps; nStep++)
		{
			if ((pItem[1] = ((pItem[0] = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)) && pItem[0]->GetPosition().top <= nY  &&  pItem[0]->GetPosition().top + pItem[0]->GetImageSize().cy >= nY) ? (CTCProcedureDocumentItem *)pNamedSteps.GetAt(nStep) : (CTCProcedureDocumentItem *)NULL))
			{
				szSteps.Add(pItem[1]->GetName());
				continue;
			}
			pNamedSteps.RemoveAt(nStep);
			pSteps.RemoveAt(nStep);
			nSteps--;
			nStep--;
		}
		delete pDocument;
	}
	return((INT)pSteps.GetSize());
}

BOOL CTCProcedureFlowchartThreadView::SetActiveStep(CONST CTCProcedureDocumentItem *pStep)
{
	INT  nStep;
	INT  nSteps;
	POSITION  lPosition;
	CPtrArray  pSteps;
	CTCProcedureDocumentItem  *pItem;

	if (!GetParentDisplay()->IsTesting())
	{
		for (; (pItem = GetActiveStep()) && pItem != pStep; )
		{
			pItem->Activate(FALSE);
			break;
		}
		for (nStep = 0, nSteps = GetDocument()->EnumSteps(pSteps, TRUE); nStep < nSteps; nStep++)
		{
			if ((pItem = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)) && pItem->IsSelected())
			{
				pItem->Select(FALSE);
				break;
			}
		}
		if ((pItem = FindStep((lPosition = FindStep(pStep, TRUE)))))
		{
			for (pItem->Activate(); GetActiveStep(); )
			{
				UpdateAllSteps();
				SetFocus();
				return TRUE;
			}
			if (pItem->Select())
			{
				UpdateAllSteps();
				SetFocus();
				return TRUE;
			}
		}
	}
	UpdateAllSteps();
	return FALSE;
}

CTCProcedureDocumentItem *CTCProcedureFlowchartThreadView::GetActiveStep(BOOL bAll) CONST
{
	INT  nStep;
	INT  nSteps;
	CPtrArray  pSteps;
	CTCProcedureDocumentItem  *pItem;

	for (nStep = 0, nSteps = GetDocument()->EnumSteps(pSteps, bAll); nStep < nSteps; nStep++)
	{
		if ((pItem = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)) && (pItem->IsActivated() || (bAll  &&  pItem->IsSelected()))) break;
		continue;
	}
	return((nStep < nSteps) ? (CTCProcedureDocumentItem *)pSteps.GetAt(nStep) : (CTCProcedureDocumentItem *)NULL);
}

CTCProcedureDocumentItem *CTCProcedureFlowchartThreadView::FindStep(LPCTSTR pszName) CONST
{
	INT  nStep;
	INT  nSteps;
	CPtrArray  pSteps;
	CTCProcedureDocumentItem  *pItem;

	for (nStep = 0, nSteps = GetDocument()->EnumSteps(pSteps); nStep < nSteps; nStep++)
	{
		if ((pItem = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)) && pItem->GetName() == pszName) break;
		continue;
	}
	return((nStep < nSteps) ? (CTCProcedureDocumentItem *)pSteps.GetAt(nStep) : (CTCProcedureDocumentItem *)NULL);
}

INT CTCProcedureFlowchartThreadView::GetTotalSteps() CONST
{
	return GetDocument()->GetStepCount();
}

VOID CTCProcedureFlowchartThreadView::SetBreakpoints(CONST CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints)
{
	m_wndDebugPane.SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints);
}

INT CTCProcedureFlowchartThreadView::GetBreakpoints(CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints) CONST
{
	return m_wndDebugPane.GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints);
}

VOID CTCProcedureFlowchartThreadView::SetExecutionpoint(LPCTSTR pszStep)
{
	m_szExecStep = pszStep;
}

CPoint CTCProcedureFlowchartThreadView::GetExecutionpoint() CONST
{
	INT  nStep;
	INT  nSteps;
	CRect  rStep;
	CPoint  ptStep;
	CPtrArray  pSteps[2];
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep[2];

	if ((pDocument = new CTCProcedureDocument))
	{
		for (nStep = 0, nSteps = (pDocument->Copy(GetDocument()) && GetDocument()->EnumSteps(pSteps[0]) == pDocument->EnumSteps(pSteps[1], FALSE, TRUE)) ? (INT)pSteps[1].GetSize() : 0; nStep < nSteps; nStep++)
		{
			if ((pStep[1] = ((pStep[0] = (CTCProcedureDocumentItem *)pSteps[1].GetAt(nStep)) && pStep[0]->GetName() == m_szExecStep) ? (CTCProcedureDocumentItem *)pSteps[0].GetAt(nStep) : (CTCProcedureDocumentItem *)NULL))
			{
				rStep = CalcExecutionpointPosition(pStep[1]);
				ptStep.x = rStep.CenterPoint().x;
				ptStep.y = rStep.top + pStep[1]->GetImageSize().cy / 2;
				delete pDocument;
				return ptStep;
			}
		}
		delete pDocument;
	}
	if ((pStep[0] = (m_szExecStep == STRING(IDS_TELECOMMANDPROCEDURESTEP_FLOWCONTROL_START)) ? GetDocument()->GetFirstStep() : (CTCProcedureDocumentItem *)NULL))
	{
		rStep = CalcExecutionpointPosition(pStep[0]);
		ptStep.x = rStep.CenterPoint().x;
		ptStep.y = rStep.top + pStep[0]->GetImageSize().cy / 2;
		return ptStep;
	}
	if ((pStep[1] = (m_szExecStep == STRING(IDS_TELECOMMANDPROCEDURESTEP_FLOWCONTROL_END)) ? GetDocument()->GetLastStep() : (CTCProcedureDocumentItem *)NULL))
	{
		rStep = CalcExecutionpointPosition(pStep[1]);
		ptStep.x = rStep.CenterPoint().x;
		ptStep.y = rStep.top + pStep[1]->GetImageSize().cy / 2;
		return ptStep;
	}
	return CPoint(0, 0);
}

VOID CTCProcedureFlowchartThreadView::SetExecutionState(UINT nState)
{
	m_nExecState = nState;
}

UINT CTCProcedureFlowchartThreadView::GetExecutionState() CONST
{
	return m_nExecState;
}

VOID CTCProcedureFlowchartThreadView::SetStepsLabelFont(CONST LOGFONT *plfFont, INT nFlags)
{
	INT  nStep;
	INT  nSteps;
	INT  nOffset;
	CFont  cFont;
	CPtrArray  pSteps;
	CTCProcedureDocumentItem  *pStep;

	for (nStep = 0, nSteps = (cFont.CreateFontIndirect(plfFont)) ? GetDocument()->EnumSteps(pSteps, TRUE) : 0; nStep < nSteps; nStep++)
	{
		if ((pStep = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)))
		{
			pStep->SetLabelFont(&cFont);
			continue;
		}
	}
	for (nStep = 0, nSteps = (nFlags < 0) ? m_pFlowchart[1]->EnumSteps(pSteps, TRUE) : 0; nStep < nSteps; nStep++)
	{
		if ((pStep = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)))
		{
			pStep->SetLabelFont(&cFont);
			continue;
		}
	}
	if ((pStep = GetDocument()->GetFirstStep()))
	{
		for (pStep->SetPosition(pStep->GetPosition() + CPoint(0, (nOffset = abs(plfFont->lfHeight) - abs(m_lfStepsLabelFont.lfHeight)))), AdjustSteps(pStep, nOffset); (pStep = (nFlags < 0) ? m_pFlowchart[1]->GetFirstStep() : (CTCProcedureDocumentItem *)NULL); )
		{
			pStep->SetPosition(pStep->GetPosition() + CPoint(0, nOffset));
			AdjustSteps(pStep, nOffset);
			break;
		}
	}
	for (CopyMemory(&m_lfStepsLabelFont, plfFont, sizeof(LOGFONT)); nFlags > 0; )
	{
		UpdateAllSteps();
		break;
	}
}

BOOL CTCProcedureFlowchartThreadView::GetStepsLabelFont(LOGFONT *plfFont) CONST
{
	CFont  cFont;
	CTCProcedureDocumentItem  *pStep;

	return(((pStep = GetDocument()->GetFirstStep())) ? (pStep->GetLabelFont(&cFont) && cFont.GetLogFont(plfFont) > 0) : FALSE);
}

VOID CTCProcedureFlowchartThreadView::SetStepsLabelColor(COLORREF nColor, INT nFlags)
{
	INT  nStep;
	INT  nSteps;
	CPtrArray  pSteps;
	CTCProcedureDocumentItem  *pStep;

	for (nStep = 0, nSteps = GetDocument()->EnumSteps(pSteps, TRUE); nStep < nSteps; nStep++)
	{
		if ((pStep = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)))
		{
			pStep->SetLabelColor(nColor);
			continue;
		}
	}
	for (nStep = 0, nSteps = (nFlags < 0) ? m_pFlowchart[1]->EnumSteps(pSteps, TRUE) : 0; nStep < nSteps; nStep++)
	{
		if ((pStep = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)))
		{
			pStep->SetLabelColor(nColor);
			continue;
		}
	}
	for (m_nStepsLabelColor = nColor; nFlags > 0; )
	{
		UpdateAllSteps();
		break;
	}
}

COLORREF CTCProcedureFlowchartThreadView::GetStepsLabelColor() CONST
{
	CTCProcedureDocumentItem  *pStep;

	return(((pStep = GetDocument()->GetFirstStep())) ? pStep->GetLabelColor() : GetSysColor(COLOR_WINDOWTEXT));
}

VOID CTCProcedureFlowchartThreadView::SetBackgroundColor(COLORREF nColor, INT nFlags)
{
	for (m_nBackgroundColor[0] = nColor, m_nBackgroundColor[1] = (nFlags < 0) ? nColor : m_nBackgroundColor[1]; nFlags > 0; )
	{
		UpdateAllSteps();
		break;
	}
}

COLORREF CTCProcedureFlowchartThreadView::GetBackgroundColor() CONST
{
	return m_nBackgroundColor[0];
}

VOID CTCProcedureFlowchartThreadView::UpdateAllSteps()
{
	CPoint  ptScroll;
	CString  szThread;
	CPtrArray  pSteps;
	CTCProcedureDocumentItem  *pStep;

	for (GetWindowText(szThread); GetParent()->IsSelected(this) && GetDocument()->EnumSteps(pSteps) >= 0 && (((pStep = GetActiveStep()) && pStep->GetDesignSize() == CSize(0, 0)) || !pStep); )
	{
		GetParentDisplay()->GetPropertiesView()->UpdateSteps(szThread, pSteps);
		break;
	}
	if ((pStep = GetActiveStep()) && pStep->GetDesignSize() != CSize(0, 0))
	{
		AdjustSteps(pStep, pStep->GetPosition().Height() - pStep->GetDesignSize().cy);
		pStep->SetDesignSize(CSize(0, 0));
	}
	for (SetScrollSizes(MM_TEXT, CalcScrollSizes()), m_wndDebugPane.MoveWindow(CalcDebugPanePosition()), GetParentDisplay()->UpdateBars(); (ptScroll = GetScrollPosition()) != m_ptScroll; )
	{
		m_ptScroll = ptScroll;
		break;
	}
	DrawContent();
}
VOID CTCProcedureFlowchartThreadView::UpdateAllSteps(CPtrArray &pSteps)
{
	GetDocument()->EnumSteps(pSteps);
}
VOID CTCProcedureFlowchartThreadView::UpdateAllSteps(UINT nState, CONST CStringArray &szSteps, CONST CUIntArray &nStates)
{
	INT  nStep[2];
	INT  nSteps[2];
	CPtrArray  pSteps[2];
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep[4];

	for (nStep[0] = 0, nSteps[0] = (INT)szSteps.GetSize(); nStep[0] < nSteps[0]; nStep[0]++)
	{
		if ((pDocument = (!nStep[0]) ? new CTCProcedureDocument : pDocument) != (CTCProcedureDocument *)NULL)
		{
			for (nStep[1] = 0, nSteps[1] = ((!nStep[0] && pDocument->Copy(GetDocument()) && GetDocument()->EnumSteps(pSteps[0]) == pDocument->EnumSteps(pSteps[1], FALSE, TRUE)) || nStep[0] > 0) ? (INT)pSteps[1].GetSize() : 0; nStep[1] < nSteps[1]; nStep[1]++)
			{
				if ((pStep[1] = ((pStep[0] = (CTCProcedureDocumentItem *)pSteps[1].GetAt(nStep[1])) && pStep[0]->GetName() == szSteps.GetAt(nStep[0])) ? (CTCProcedureDocumentItem *)pSteps[0].GetAt(nStep[1]) : (CTCProcedureDocumentItem *)NULL))
				{
					for (; (pStep[2] = GetActiveStep()) != pStep[1] && pStep[2] != (CTCProcedureDocumentItem *)NULL; )
					{
						pStep[2]->Activate(FALSE);
						break;
					}
					for (pStep[1]->SetState(nStates.GetAt(nStep[0])); ((nState & TCPROCEDURETHREAD_RUNNINGSTATE_RUNNING) || (nState & TCPROCEDURETHREAD_RUNNINGSTATE_STOPPED)) && nStep[0] == nSteps[0] - 1; )
					{
						SetExecutionpoint(szSteps.GetAt(nStep[0]));
						SetExecutionState(nState);
						pStep[1]->Activate();
						break;
					}
					if ((pStep[2] = (nState & TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING) ? GetDocument()->GetLastStep() : (CTCProcedureDocumentItem *)NULL) && pStep[2]->GetType() == TCPROCEDURETHREADSTEP_FLOWCONTROL_END)
					{
						for (SetExecutionpoint(STRING(IDS_TELECOMMANDPROCEDURESTEP_FLOWCONTROL_END)), SetExecutionState(nState); (pStep[3] = GetActiveStep()); )
						{
							pStep[3]->Activate(FALSE);
							break;
						}
					}
					break;
				}
			}
			if (nStep[0] == nSteps[0] - 1) delete pDocument;
		}
	}
	for (nStep[1] = 0, nSteps[1] = (!nState && !nSteps[0]) ? GetDocument()->EnumSteps(pSteps[0]) : 0; nStep[1] < nSteps[1]; nStep[1]++)
	{
		if (nStep[1] == nSteps[1] - 1)
		{
			SetExecutionpoint(EMPTYSTRING);
			SetExecutionState(0);
		}
		if ((pStep[0] = (CTCProcedureDocumentItem *)pSteps[0].GetAt(nStep[1])))
		{
			pStep[0]->SetState(0);
			continue;
		}
	}
	if ((nState & TCPROCEDURETHREAD_ACTIONSTATE_ABORT) != TCPROCEDURETHREAD_ACTIONSTATE_ABORT)
	{
		if ((pStep[0] = (nState & TCPROCEDURETHREAD_AUTHORITY_DISABLED) ? GetDocument()->GetFirstStep() : (CTCProcedureDocumentItem *)NULL) && pStep[0]->GetType() == TCPROCEDURETHREADSTEP_FLOWCONTROL_START)
		{
			for (SetExecutionpoint(STRING(IDS_TELECOMMANDPROCEDURESTEP_FLOWCONTROL_START)), SetExecutionState(nState); (pStep[1] = GetActiveStep()); )
			{
				pStep[1]->Activate(FALSE);
				break;
			}
		}
		if ((pStep[0] = (nState & TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING) ? GetDocument()->GetLastStep() : (CTCProcedureDocumentItem *)NULL) && pStep[0]->GetType() == TCPROCEDURETHREADSTEP_FLOWCONTROL_END)
		{
			for (SetExecutionpoint(STRING(IDS_TELECOMMANDPROCEDURESTEP_FLOWCONTROL_END)), SetExecutionState(nState); (pStep[1] = GetActiveStep()); )
			{
				pStep[1]->Activate(FALSE);
				break;
			}
		}
	}
	if (nState & TCPROCEDURETHREAD_ACTIONSTATE_ABORT) SetExecutionState(nState);
	DrawContent();
}

VOID CTCProcedureFlowchartThreadView::UpdateAllBreakpoints()
{
	CString  szThread;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;

	for (GetWindowText(szThread); GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) >= 0; )
	{
		GetParentDisplay()->GetPropertiesView()->SetBreakpoints(szThread, pDatabaseTCProcedureThreadBreakpoints);
		GetParentDisplay()->UpdateProcedureThreadBreakpoints(szThread, pDatabaseTCProcedureThreadBreakpoints);
		break;
	}
}

BOOL CTCProcedureFlowchartThreadView::UpdateUndoList(UINT nAction, CTCProcedureDocumentUndoItem *pItem, CONST CTCProcedureDocumentItem *pStep, CONST CTCProcedureDocumentItem *pOldStep)
{
	return ConvertUndoItem(nAction, pItem, pStep, pOldStep);
}

VOID CTCProcedureFlowchartThreadView::GetPrintProperties(CMetaFileDC *pMetaDC)
{
	CDC  cDC[2];
	INT  nOldMode;
	CPoint  pt[2];
	CBitmap  cBitmap[2];
	CBitmap  *pOldBitmap[2];
	POSITION  lPosition;
	BLENDFUNCTION  sBlend;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep[2];

	if ((pStep[0] = GetActiveStep()))
	{
		if (pStep[0]->IsActivated())
		{
			if (pStep[0]->IsExpanded())
			{
				if (cDC[0].CreateCompatibleDC(pMetaDC))
				{
					if (cDC[1].CreateCompatibleDC(pMetaDC))
					{
						if (cBitmap[0].CreateCompatibleBitmap(pMetaDC, pStep[0]->GetPosition().Width(), pStep[0]->GetPosition().Height()))
						{
							if (cBitmap[1].CreateCompatibleBitmap(pMetaDC, pStep[0]->GetPosition().Width(), pStep[0]->GetPosition().Height()))
							{
								if ((pOldBitmap[0] = cDC[0].SelectObject(&cBitmap[0])))
								{
									if ((pOldBitmap[1] = cDC[1].SelectObject(&cBitmap[1])))
									{
										nOldMode = cDC[0].SetROP2(R2_MERGEPEN);
										cDC[0].FillSolidRect(0, 0, pStep[0]->GetPosition().Width(), pStep[0]->GetPosition().Height(), VGA_COLOR_WHITE);
										cDC[0].FillSolidRect(0, 0, pStep[0]->GetPosition().Width(), pStep[0]->GetPosition().Height(), TCPROCEDUREDOCUMENTITEM_BACKGROUNDCOLOR);
										for (sBlend.BlendFlags = 0, sBlend.BlendOp = AC_SRC_OVER, sBlend.AlphaFormat = 0, sBlend.SourceConstantAlpha = TCPROCEDUREDOCUMENTITEM_BACKGROUNDALPHA; TRUE; )
										{
											cDC[1].FillSolidRect(0, 0, pStep[0]->GetPosition().Width(), pStep[0]->GetPosition().Height(), VGA_COLOR_WHITE);
											cDC[1].AlphaBlend(0, 0, pStep[0]->GetPosition().Width(), pStep[0]->GetPosition().Height(), &cDC[0], 0, 0, pStep[0]->GetPosition().Width(), pStep[0]->GetPosition().Height(), sBlend);
											pMetaDC->FillSolidRect(0, 0, GetTotalSize().cx, GetTotalSize().cy, m_nBackgroundColor[0]);
											pMetaDC->BitBlt(pStep[0]->GetPosition().left, pStep[0]->GetPosition().top + pStep[0]->GetImageSize().cy / 2, pStep[0]->GetPosition().Width(), pStep[0]->GetPosition().Height() - pStep[0]->GetImageSize().cy / 2, &cDC[1], 0, 0, SRCCOPY);
											pMetaDC->BitBlt(pStep[0]->GetPosition().left + pStep[0]->GetImageSize().cx / 2, pStep[0]->GetPosition().top, pStep[0]->GetPosition().Width() - pStep[0]->GetImageSize().cx / 2, pStep[0]->GetImageSize().cy / 2, &cDC[1], 0, 0, SRCCOPY);
											break;
										}
										cDC[1].SelectObject(pOldBitmap[1]);
										cDC[0].SetROP2(nOldMode);
									}
									cDC[0].SelectObject(pOldBitmap[0]);
								}
								cBitmap[1].DeleteObject();
							}
							cBitmap[0].DeleteObject();
						}
						cDC[1].DeleteDC();
					}
					cDC[0].DeleteDC();
				}
			}
		}
	}
	for (; (pStep[0] = GetActiveStep()) && (!pStep[0]->IsActivated() || !pStep[0]->IsExpanded()); )
	{
		pMetaDC->FillSolidRect(0, 0, GetTotalSize().cx, GetTotalSize().cy, m_nBackgroundColor[0]);
		break;
	}
	for (lPosition = ((pDocument = GetDocument())) ? pDocument->GetStartPosition() : (POSITION)NULL, pStep[0] = pStep[1] = (CTCProcedureDocumentItem *)NULL; lPosition; pStep[1] = pStep[0])
	{
		if ((pStep[0] = pDocument->GetNextStep(lPosition)) != (CTCProcedureDocumentItem *)NULL)
		{
			if (pStep[1] && pStep[1]->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO)
			{
				pt[0] = pStep[1]->CalcConnectionPoint(FALSE, pStep[1]->IsExpanded());
				pt[1] = pStep[0]->CalcConnectionPoint(TRUE);
				CTCProcedureDocumentItem::DrawConnectionLine(pMetaDC, pt[0], pt[1]);
			}
		}
	}
	for (lPosition = pDocument->GetStartPosition(); lPosition; )
	{
		if ((pStep[0] = pDocument->GetNextStep(lPosition)))
		{
			pStep[0]->Draw(pMetaDC);
			continue;
		}
	}
}

VOID CTCProcedureFlowchartThreadView::SetSelectedStepID(UINT nStepID)
{
	m_nStepID = nStepID;
}

UINT CTCProcedureFlowchartThreadView::GetSelectedStepID() CONST
{
	return m_nStepID;
}

BOOL CTCProcedureFlowchartThreadView::SearchStep(LPCTSTR pszName, BOOL bHiddenNames)
{
	INT  nStep;
	INT  nSteps;
	CPtrArray  pSteps[2];
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep[2];

	if ((pDocument = new CTCProcedureDocument))
	{
		for (nStep = 0, nSteps = (pDocument->Copy(GetDocument()) && pDocument->EnumSteps(pSteps[0], FALSE, bHiddenNames) == GetDocument()->EnumSteps(pSteps[1])) ? (INT)pSteps[0].GetSize() : 0; nStep < nSteps; nStep++)
		{
			if ((pStep[0] = (CTCProcedureDocumentItem *)pSteps[0].GetAt(nStep)) && pStep[0]->GetName() == pszName)
			{
				if ((pStep[1] = (CTCProcedureDocumentItem *)pSteps[1].GetAt(nStep)))
				{
					SetActiveStep(pStep[1]);
					break;
				}
			}
		}
		delete pDocument;
		return((nStep < nSteps) ? TRUE : FALSE);
	}
	return FALSE;
}

VOID CTCProcedureFlowchartThreadView::DoUndo()
{
	BOOL  bUndo;
	CTCProcedureDocumentUndoItem  cUndoItem;

	for (m_cUndoList.Lock(), m_bUndo[0] = TRUE; (bUndo = m_cUndoList.Undo(&cUndoItem)); )
	{
		ConvertUndoItem(&cUndoItem, TRUE);
		break;
	}
	for (; m_cUndoList.CanUndo(TRUE); )
	{
		DoUndo();
		break;
	}
	for (; !bUndo; )
	{
		SetActiveStep();
		break;
	}
	m_bUndo[0] = FALSE;
	m_cUndoList.Unlock();
	UpdateAllSteps();
}

BOOL CTCProcedureFlowchartThreadView::CanUndo() CONST
{
	return((m_cUndoList.CanUndo()) ? (CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) && !GetParentDisplay()->IsTesting()) : FALSE);
}

BOOL CTCProcedureFlowchartThreadView::IsUndoing() CONST
{
	return m_bUndo[0];
}

VOID CTCProcedureFlowchartThreadView::DoRedo()
{
	BOOL  bRedo;
	CTCProcedureDocumentUndoItem  cUndoItem;

	for (m_cUndoList.Lock(), m_bUndo[1] = TRUE; (bRedo = m_cUndoList.Redo(&cUndoItem)); )
	{
		ConvertUndoItem(&cUndoItem, FALSE);
		break;
	}
	for (; m_cUndoList.CanRedo(TRUE); )
	{
		DoRedo();
		break;
	}
	for (; !bRedo; )
	{
		SetActiveStep();
		break;
	}
	m_bUndo[1] = FALSE;
	m_cUndoList.Unlock();
	UpdateAllSteps();
}

BOOL CTCProcedureFlowchartThreadView::CanRedo() CONST
{
	return((m_cUndoList.CanRedo()) ? (CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) && !GetParentDisplay()->IsTesting()) : FALSE);
}

BOOL CTCProcedureFlowchartThreadView::IsRedoing() CONST
{
	return m_bUndo[1];
}

VOID CTCProcedureFlowchartThreadView::DoFindStep()
{
	CHourglassCursor  cCursor;

	ShowMessage((!m_dlgFind.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

BOOL CTCProcedureFlowchartThreadView::CanFindStep() CONST
{
	return((!IsWindow(m_dlgFind.GetSafeHwnd())) ? HasImage() : FALSE);
}

VOID CTCProcedureFlowchartThreadView::DoCutStep()
{
	CTCProcedureDocumentItem  *pStep;
	CTCProcedureDocumentUndoItem  cUndoItem;

	if ((pStep = GetActiveStep()))
	{
		ConvertUndoItem(TCPROCEDUREDOCUMENTUNDOITEM_ACTION_DELETE, &cUndoItem, pStep);
		CopyToClipboard(pStep);
		DeleteStep(pStep);
		UpdateAllSteps();
	}
}

BOOL CTCProcedureFlowchartThreadView::CanCutStep() CONST
{
	CTCProcedureDocumentItem  *pStep;

	return(((pStep = GetActiveStep()) && ((pStep->GetType() >= TCPROCEDURETHREADSTEP_FLOWCONTROL_FIRST  &&  pStep->GetType() <= TCPROCEDURETHREADSTEP_FLOWCONTROL_LAST) || (pStep->GetType() >= TCPROCEDURETHREADSTEP_ACTIONOBJECT_FIRST  &&  pStep->GetType() <= TCPROCEDURETHREADSTEP_ACTIONOBJECT_LAST))) ? (CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) && !GetParentDisplay()->IsTesting()) : FALSE);
}

VOID CTCProcedureFlowchartThreadView::DoCopyStep()
{
	POSITION  lPosition;
	CTCProcedureDocumentItem  *pStep;

	if ((pStep = GetActiveStep()))
	{
		if ((lPosition = FindStep(pStep)))
		{
			CopyToClipboard(pStep);
			UpdateAllSteps();
		}
	}
}

BOOL CTCProcedureFlowchartThreadView::CanCopyStep() CONST
{
	CTCProcedureDocumentItem  *pStep;

	return(((pStep = GetActiveStep()) && ((pStep->GetType() >= TCPROCEDURETHREADSTEP_FLOWCONTROL_FIRST  &&  pStep->GetType() <= TCPROCEDURETHREADSTEP_FLOWCONTROL_LAST) || (pStep->GetType() >= TCPROCEDURETHREADSTEP_ACTIONOBJECT_FIRST  &&  pStep->GetType() <= TCPROCEDURETHREADSTEP_ACTIONOBJECT_LAST))) ? (CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) && !GetParentDisplay()->IsTesting()) : FALSE);
}

VOID CTCProcedureFlowchartThreadView::DoPasteStep()
{
	CPoint  ptStep;
	CPoint  ptDrop;
	COleDataObject  cOleDataObject;
	CTCProcedureDocumentItem  *pStep[2];
	CTCProcedureDocumentUndoItem  cUndoItem;

	if ((pStep[0] = (cOleDataObject.AttachClipboard() && cOleDataObject.IsDataAvailable(GetParent()->GetClipboardFormat())) ? PasteFromClipboard() : (CTCProcedureDocumentItem *)NULL))
	{
		for (pStep[1] = (!GetActiveStep(TRUE)) ? GetDocument()->GetFirstStep() : GetActiveStep(TRUE), ptStep = pStep[1]->CalcConnectionPoint(FALSE, pStep[1]->IsExpanded()), ptStep.y += TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL / 2 + pStep[0]->GetImageSize().cy / 2; (ptDrop = CalcDropPoint(pStep[0]->GetType(), ptStep)) != CPoint(0, 0); )
		{
			for (pStep[0]->Relocate(CPoint(ptDrop.x - pStep[0]->GetImageSize().cx / 2 - pStep[0]->GetPosition().left, ptDrop.y - pStep[0]->GetImageSize().cy / 2 - pStep[0]->GetPosition().top)), pStep[0]->Relocate(CPoint(pStep[0]->GetPosition().left + pStep[0]->GetImageSize().cx / 2 - pStep[0]->CalcConnectionPoint().x, 0)), pStep[0]->SetSubThreadID(pStep[1]->GetSubThreadID()); InsertStep(pStep[0], pStep[1], FALSE); )
			{
				ConvertUndoItem(TCPROCEDUREDOCUMENTUNDOITEM_ACTION_INSERT, &cUndoItem, pStep[0], GetActiveStep(TRUE));
				SetActiveStep(pStep[0]);
				return;
			}
			break;
		}
		delete pStep[0];
	}
}

BOOL CTCProcedureFlowchartThreadView::CanPasteStep() CONST
{
	COleDataObject  cOleDataObject;

	return((cOleDataObject.AttachClipboard() && cOleDataObject.IsDataAvailable(GetParent()->GetClipboardFormat())) ? (CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) && !GetParentDisplay()->IsTesting()) : FALSE);
}

VOID CTCProcedureFlowchartThreadView::DoDeleteStep()
{
	CTCProcedureDocumentItem  *pStep;
	CTCProcedureDocumentUndoItem  cUndoItem;

	if ((pStep = GetActiveStep()))
	{
		ConvertUndoItem(TCPROCEDUREDOCUMENTUNDOITEM_ACTION_DELETE, &cUndoItem, pStep);
		DeleteStep(pStep);
		UpdateAllSteps();
	}
}

BOOL CTCProcedureFlowchartThreadView::CanDeleteStep() CONST
{
	CTCProcedureDocumentItem  *pStep;

	return(((pStep = GetActiveStep()) && ((pStep->GetType() >= TCPROCEDURETHREADSTEP_FLOWCONTROL_FIRST  &&  pStep->GetType() <= TCPROCEDURETHREADSTEP_FLOWCONTROL_LAST) || (pStep->GetType() >= TCPROCEDURETHREADSTEP_ACTIONOBJECT_FIRST  &&  pStep->GetType() <= TCPROCEDURETHREADSTEP_ACTIONOBJECT_LAST))) ? (CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) && !GetParentDisplay()->IsTesting()) : FALSE);
}

VOID CTCProcedureFlowchartThreadView::UnSelectAllSteps()
{
	SetActiveStep();
}

BOOL CTCProcedureFlowchartThreadView::HasImage() CONST
{
	return((GetDocument()->GetStepCount() > 0) ? TRUE : FALSE);
}

BOOL CTCProcedureFlowchartThreadView::IsModified() CONST
{
	return((!m_pFlowchart[0]->Compare(m_pFlowchart[1], FALSE) || m_nBackgroundColor[0] != m_nBackgroundColor[1]) ? TRUE : FALSE);
}

BOOL CTCProcedureFlowchartThreadView::Check(BOOL bModified) CONST
{
	return(!bModified || IsModified());
}

CTCProcedureDocument *CTCProcedureFlowchartThreadView::GetDocument() CONST
{
	return m_pFlowchart[0];
}

CTCProcedureFlowchartTabCtrl *CTCProcedureFlowchartThreadView::GetParent() CONST
{
	return((CTCProcedureFlowchartTabCtrl *)CScrollView::GetParent());
}

CTCProcedureWnd *CTCProcedureFlowchartThreadView::GetParentDisplay() CONST
{
	return GetParent()->GetParent()->GetParent()->GetParent();
}

VOID CTCProcedureFlowchartThreadView::DrawContent()
{
	CDC  *pDC;

	if ((pDC = GetDC()))
	{
		pDC->SetViewportOrg(-m_ptScroll);
		DrawContent(pDC);
		ReleaseDC(pDC);
	}
}
VOID CTCProcedureFlowchartThreadView::DrawContent(CDC *pDC)
{
	CDC  cDC[2];
	INT  nOldMode;
	CRect  rView;
	CPoint  pt[2];
	CBitmap  cBitmap[2];
	CBitmap  *pOldBitmap[2];
	POSITION  lPosition;
	BLENDFUNCTION  sBlend;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep[2];

	GetClientRect(rView);
	if (cDC[0].CreateCompatibleDC(pDC))
	{
		if (cBitmap[0].CreateCompatibleBitmap(pDC, rView.Width(), rView.Height()))
		{
			if ((pOldBitmap[0] = cDC[0].SelectObject(&cBitmap[0])) != (CBitmap *)NULL)
			{
				for (cDC[0].SetViewportOrg(-m_ptScroll), cDC[0].FillSolidRect(CalcDebugPaneMarginSize(), 0, max(GetTotalSize().cx, rView.Width()) - CalcDebugPaneMarginSize() + 1, max(GetTotalSize().cy, rView.Height()) + 1, m_nBackgroundColor[0]); (pStep[0] = GetActiveStep()); )
				{
					if (pStep[0]->IsActivated())
					{
						if (pStep[0]->IsExpanded())
						{
							if (cDC[1].CreateCompatibleDC(pDC))
							{
								if (cBitmap[1].CreateCompatibleBitmap(pDC, pStep[0]->GetPosition().Width(), pStep[0]->GetPosition().Height()))
								{
									if ((pOldBitmap[1] = cDC[1].SelectObject(&cBitmap[1])))
									{
										nOldMode = cDC[1].SetROP2(R2_MERGEPEN);
										cDC[1].FillSolidRect(0, 0, pStep[0]->GetPosition().Width(), pStep[0]->GetPosition().Height(), VGA_COLOR_WHITE);
										cDC[1].FillSolidRect(0, 0, pStep[0]->GetPosition().Width(), pStep[0]->GetPosition().Height(), TCPROCEDUREDOCUMENTITEM_BACKGROUNDCOLOR);
										for (sBlend.BlendFlags = 0, sBlend.BlendOp = AC_SRC_OVER, sBlend.AlphaFormat = 0, sBlend.SourceConstantAlpha = TCPROCEDUREDOCUMENTITEM_BACKGROUNDALPHA; TRUE; )
										{
											cDC[0].FillSolidRect(pStep[0]->GetPosition().left, pStep[0]->GetPosition().top + pStep[0]->GetImageSize().cy / 2, pStep[0]->GetPosition().Width(), pStep[0]->GetPosition().Height() - pStep[0]->GetImageSize().cy / 2, VGA_COLOR_WHITE);
											cDC[0].FillSolidRect(pStep[0]->GetPosition().left + pStep[0]->GetImageSize().cx / 2, pStep[0]->GetPosition().top, pStep[0]->GetPosition().Width() - pStep[0]->GetImageSize().cx / 2, pStep[0]->GetImageSize().cy / 2, VGA_COLOR_WHITE);
											cDC[0].AlphaBlend(pStep[0]->GetPosition().left, pStep[0]->GetPosition().top + pStep[0]->GetImageSize().cy / 2, pStep[0]->GetPosition().Width(), pStep[0]->GetPosition().Height() - pStep[0]->GetImageSize().cy / 2, &cDC[1], 0, 0, pStep[0]->GetPosition().Width(), pStep[0]->GetPosition().Height() - pStep[0]->GetImageSize().cy / 2, sBlend);
											cDC[0].AlphaBlend(pStep[0]->GetPosition().left + pStep[0]->GetImageSize().cx / 2, pStep[0]->GetPosition().top, pStep[0]->GetPosition().Width() - pStep[0]->GetImageSize().cx / 2, pStep[0]->GetImageSize().cy / 2, &cDC[1], 0, 0, pStep[0]->GetPosition().Width() - pStep[0]->GetImageSize().cx / 2, pStep[0]->GetImageSize().cy / 2, sBlend);
											break;
										}
										cDC[1].SelectObject(pOldBitmap[1]);
										cDC[1].SetROP2(nOldMode);
									}
									cBitmap[1].DeleteObject();
								}
								cDC[1].DeleteDC();
							}
						}
					}
					break;
				}
				for (lPosition = ((pDocument = GetDocument())) ? pDocument->GetStartPosition() : (POSITION)NULL, pStep[0] = pStep[1] = (CTCProcedureDocumentItem *)NULL; lPosition; pStep[1] = pStep[0])
				{
					if ((pStep[0] = pDocument->GetNextStep(lPosition)) != (CTCProcedureDocumentItem *)NULL)
					{
						if (pStep[1] && pStep[1]->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO)
						{
							pt[0] = pStep[1]->CalcConnectionPoint(FALSE, pStep[1]->IsExpanded());
							pt[1] = pStep[0]->CalcConnectionPoint(TRUE);
							CTCProcedureDocumentItem::DrawConnectionLine(&cDC[0], pt[0], pt[1]);
						}
					}
				}
				for (lPosition = pDocument->GetStartPosition(); lPosition; )
				{
					if ((pStep[0] = pDocument->GetNextStep(lPosition)))
					{
						pStep[0]->Draw(&cDC[0]);
						continue;
					}
				}
				pDC->BitBlt(m_ptScroll.x, m_ptScroll.y, rView.Width(), rView.Height(), &cDC[0], m_ptScroll.x, m_ptScroll.y, SRCCOPY);
				cDC[0].SelectObject(pOldBitmap[0]);
			}
			cBitmap[0].DeleteObject();
		}
		cDC[0].DeleteDC();
	}
	m_wndDebugPane.Update();
}

VOID CTCProcedureFlowchartThreadView::AdjustSteps(CONST CTCProcedureDocumentItem *pStep, INT nOffset)
{
	CRect  rStep[2];
	POSITION  lPosition;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pItem;

	for (lPosition = ((pDocument = (CTCProcedureDocument *)pStep->GetDocument())) ? pDocument->FindStep(pDocument->GetNextStep(pStep), FALSE) : (POSITION)NULL; lPosition; )
	{
		if ((pItem = pDocument->GetNextStep(lPosition)) && pItem->GetSubThreadID() == pStep->GetSubThreadID())
		{
			pItem->SetPosition(pItem->GetPosition() + CPoint(0, nOffset));
			AdjustSteps(pItem, pStep, nOffset);
		}
	}
	if ((pItem = FindContainerStep(pStep)))
	{
		rStep[0] = pItem->GetPosition();
		pItem->RecalcLayout();
		rStep[1] = pItem->GetPosition();
		AdjustSteps(pItem, rStep[1].Height() - rStep[0].Height());
	}
}
VOID CTCProcedureFlowchartThreadView::AdjustSteps(CONST CTCProcedureDocumentItem *pSteps, CONST CTCProcedureDocumentItem *pStep, INT nOffset)
{
	POSITION  lPosition;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pItem;

	for (lPosition = ((pDocument = pSteps->GetSubSteps())) ? pDocument->GetStartPosition() : (POSITION)NULL; lPosition; )
	{
		if ((pItem = pDocument->GetNextStep(lPosition)) != (CTCProcedureDocumentItem *)NULL)
		{
			pItem->SetPosition(pItem->GetPosition() + CPoint(0, nOffset));
			AdjustSteps(pItem, pStep, nOffset);
		}
	}
}

POSITION CTCProcedureFlowchartThreadView::InsertStep(CTCProcedureDocumentItem *pStep, CONST CTCProcedureDocumentItem *pPosition, BOOL bBefore)
{
	INT  nOffset;
	POSITION  lPosition[2];
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  cStep[2];
	CTCProcedureDocumentUndoItem  cUndoItem;

	if ((lPosition[0] = ((pDocument = (CTCProcedureDocument *)pPosition->GetDocument())) ? pDocument->FindStep(pPosition) : (POSITION)NULL))
	{
		for (cStep[0].Copy(pPosition), cStep[1].Copy(pPosition), nOffset = 0; (bBefore && pPosition->GetPosition().top - pStep->GetPosition().bottom < TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL) || (!bBefore && pStep->GetPosition().top - pPosition->GetPosition().bottom < TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL); )
		{
			for (pStep->Relocate((!IsUndoing() && !IsRedoing()) ? CPoint(0, (TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL + pStep->GetImageSize().cy) / 2) : CPoint(0, 0)), pStep->RecalcLayout(); TRUE; )
			{
				nOffset = TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL + pStep->GetPosition().Height();
				break;
			}
			break;
		}
		if ((lPosition[1] = pDocument->InsertStep(pStep, lPosition[0], bBefore)))
		{
			for (cStep[0].SetPosition(cStep[1].GetPosition() - CPoint(0, TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL + pStep->GetPosition().Height())), cUndoItem.Collect(); !nOffset && bBefore; )
			{
				ConvertUndoItem(TCPROCEDUREDOCUMENTUNDOITEM_ACTION_RELOCATE, &cUndoItem, &cStep[0], &cStep[1]);
				break;
			}
			AdjustSteps(pStep, nOffset);
			return lPosition[1];
		}
	}
	return((POSITION)NULL);
}

POSITION CTCProcedureFlowchartThreadView::FindStep(CONST CTCProcedureDocumentItem *pStep, BOOL bAll) CONST
{
	BOOL  bContinue;
	POSITION  lPosition[2];
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pItem;

	for (lPosition[0] = ((pDocument = GetDocument())) ? pDocument->GetStartPosition() : (POSITION)NULL; lPosition[0]; )
	{
		if ((pItem = pDocument->GetNextStep(lPosition[0])) != (CTCProcedureDocumentItem *)NULL)
		{
			if ((bContinue = (pItem != pStep)) && pItem->GetSubSteps()->GetStepCount(bAll) > 0)
			{
				if ((lPosition[1] = FindStep(pItem, pStep, bAll))) return lPosition[1];
				continue;
			}
			if (!bContinue) return pDocument->FindStep(pItem, bAll);
		}
	}
	return((POSITION)NULL);
}
POSITION CTCProcedureFlowchartThreadView::FindStep(CONST CTCProcedureDocumentItem *pSteps, CONST CTCProcedureDocumentItem *pStep, BOOL bAll) CONST
{
	BOOL  bContinue;
	POSITION  lPosition[2];
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pItem;

	for (lPosition[0] = ((pDocument = pSteps->GetSubSteps())) ? pDocument->GetStartPosition() : (POSITION)NULL; lPosition[0]; )
	{
		if ((pItem = pDocument->GetNextStep(lPosition[0])) != (CTCProcedureDocumentItem *)NULL)
		{
			if ((bContinue = (pItem != pStep)) && pItem->GetSubSteps()->GetStepCount(bAll) > 0)
			{
				if ((lPosition[1] = FindStep(pItem, pStep, bAll))) return lPosition[1];
				continue;
			}
			if (!bContinue) return pDocument->FindStep(pItem, bAll);
		}
	}
	return((POSITION)NULL);
}
CTCProcedureDocumentItem *CTCProcedureFlowchartThreadView::FindStep(CONST POINT &pt, BOOL bImage, BOOL bTreeSymbol, BOOL bAll) CONST
{
	POSITION  lPosition;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep[2];

	for (lPosition = ((pDocument = GetDocument())) ? pDocument->GetStartPosition() : (POSITION)NULL; lPosition; )
	{
		if ((pStep[0] = (CTCProcedureDocumentItem *)pDocument->GetNextStep(lPosition)) != (CTCProcedureDocumentItem *)NULL)
		{
			if ((!bImage || !pStep[0]->IsPtOnImage(pt)) && (!bTreeSymbol || !pStep[0]->IsPtOnTreeSymbol(pt)))
			{
				if ((pStep[1] = (pStep[0]->GetSubSteps()->GetStepCount(bAll) > 0 && pStep[0]->IsExpanded()) ? FindStep(pStep[0], pt, bImage, bTreeSymbol, bAll) : (CTCProcedureDocumentItem *)NULL)) return pStep[1];
				continue;
			}
			return pStep[0];
		}
	}
	return((CTCProcedureDocumentItem *)NULL);
}
CTCProcedureDocumentItem *CTCProcedureFlowchartThreadView::FindStep(CONST CTCProcedureDocumentItem *pSteps, CONST POINT &pt, BOOL bImage, BOOL bTreeSymbol, BOOL bAll) CONST
{
	POSITION  lPosition;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep[2];

	for (lPosition = ((pDocument = pSteps->GetSubSteps())) ? pDocument->GetStartPosition() : (POSITION)NULL; lPosition; )
	{
		if ((pStep[0] = (CTCProcedureDocumentItem *)pDocument->GetNextStep(lPosition)) != (CTCProcedureDocumentItem *)NULL)
		{
			if ((!bImage || !pStep[0]->IsPtOnImage(pt)) && (!bTreeSymbol || !pStep[0]->IsPtOnTreeSymbol(pt)))
			{
				if ((pStep[1] = (pStep[0]->GetSubSteps()->GetStepCount(bAll) > 0 && pStep[0]->IsExpanded()) ? FindStep(pStep[0], pt, bImage, bTreeSymbol, bAll) : (CTCProcedureDocumentItem *)NULL)) return pStep[1];
				continue;
			}
			return pStep[0];
		}
	}
	return((CTCProcedureDocumentItem *)NULL);
}
CTCProcedureDocumentItem *CTCProcedureFlowchartThreadView::FindStep(POSITION &lPosition) CONST
{
	POSITION  lDocumentPosition;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep[2];

	for (lDocumentPosition = ((pDocument = GetDocument())) ? pDocument->GetStartPosition() : (POSITION)NULL; lPosition != lDocumentPosition && lDocumentPosition; )
	{
		if ((pStep[0] = (CTCProcedureDocumentItem *)pDocument->GetNextStep(lDocumentPosition)))
		{
			if ((pStep[1] = FindStep(pStep[0], lPosition))) return pStep[1];
			continue;
		}
	}
	return((lDocumentPosition == lPosition  &&  lDocumentPosition) ? pDocument->GetNextStep(lDocumentPosition) : (CTCProcedureDocumentItem *)NULL);
}
CTCProcedureDocumentItem *CTCProcedureFlowchartThreadView::FindStep(CONST CTCProcedureDocumentItem *pSteps, POSITION &lPosition) CONST
{
	POSITION  lDocumentPosition;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep[2];

	for (lDocumentPosition = ((pDocument = pSteps->GetSubSteps())) ? pDocument->GetStartPosition() : (POSITION)NULL; lPosition != lDocumentPosition && lDocumentPosition; )
	{
		if ((pStep[0] = (CTCProcedureDocumentItem *)pDocument->GetNextStep(lDocumentPosition)))
		{
			if ((pStep[1] = FindStep(pStep[0], lPosition))) return pStep[1];
			continue;
		}
	}
	return((lDocumentPosition == lPosition  &&  lDocumentPosition) ? pDocument->GetNextStep(lDocumentPosition) : (CTCProcedureDocumentItem *)NULL);
}

BOOL CTCProcedureFlowchartThreadView::DeleteStep(CTCProcedureDocumentItem *pStep)
{
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pItem;

	if ((pItem = ((pDocument = (CTCProcedureDocument *)pStep->GetDocument())) ? pDocument->GetPreviousStep(pStep) : (CTCProcedureDocumentItem *)NULL) && pDocument->RemoveStep(pStep))
	{
		AdjustSteps(pItem, -TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL - pStep->GetPosition().Height());
		delete pStep;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureFlowchartThreadView::ShowStepProperties(CTCProcedureDocumentItem *pStep)
{
	INT  nResult;
	CSize  sizeDesign;
	CPtrArray  pSteps;
	CStringArray  szObjects;
	CTCProcedureDocumentItem  *pItem;
	CTCProcedurePropertiesGotoDialog  cGotoDialog;
	CTCProcedurePropertiesLabelDialog  cLabelDialog;
	CTCProcedurePropertiesBranchDialog  cBranchDialog;
	CTCProcedurePropertiesSwitchDialog  cSwitchDialog;
	CTCProcedurePropertiesDoLoopDialog  cDoLoopDialog;
	CTCProcedurePropertiesForLoopDialog  cForLoopDialog;
	CTCProcedurePropertiesWhileLoopDialog  cWhileLoopDialog;
	CTCProcedurePropertiesLogMessageDialog  cLogMessageDialog;
	CTCProcedurePropertiesInjectAlertDialog  cInjectAlertDialog;
	CTCProcedurePropertiesSetArgumentsDialog  cSetArgumentsDialog;
	CTCProcedurePropertiesSetVariablesDialog  cSetVariablesDialog;
	CTCProcedurePropertiesSetParametersDialog  cSetParametersDialog;
	CTCProcedurePropertiesControlThreadDialog  cControlThreadDialog;
	CTCProcedurePropertiesCallProcedureDialog  cCallProcedureDialog;
	CTCProcedurePropertiesSendTCFunctionDialog  cSendTCFunctionDialog;
	CTCProcedurePropertiesSendTCSequenceDialog  cSendTCSequenceDialog;
	CTCProcedurePropertiesStartProcedureDialog  cStartProcedureDialog;
	CTCProcedurePropertiesUserInteractionDialog  cUserInteractionDialog;
	CTCProcedurePropertiesControlProcedureDialog  cControlProcedureDialog;
	CTCProcedurePropertiesWaitTimeIntervalDialog  cWaitTimeIntervalDialog;
	CTCProcedurePropertiesSetSynchronizationObjectDialog  cSetSynchronizationObjectDialog;
	CTCProcedurePropertiesWaitSynchronizationObjectDialog  cWaitSynchronizationObjectDialog;
	CTCProcedureDocumentUndoItem  cUndoItem;

	if (!GetParentDisplay()->IsTesting())
	{
		for (sizeDesign.cx = pStep->GetPosition().Width(), sizeDesign.cy = pStep->GetPosition().Height(); pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETSYNCOBJECT || pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_WAITSYNCOBJECT; )
		{
			GetParent()->EnumSynchronizationObjects(szObjects);
			break;
		}
		if ((pItem = new CTCProcedureDocumentItem))
		{
			pItem->Copy(pStep, TRUE);
			switch (pStep->GetType())
			{
			case TCPROCEDURETHREADSTEP_FLOWCONTROL_BRANCH: nResult = cBranchDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_FLOWCONTROL_SWITCH: nResult = cSwitchDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_FLOWCONTROL_FORLOOP: nResult = cForLoopDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_FLOWCONTROL_DOLOOP: nResult = cDoLoopDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_FLOWCONTROL_WHILELOOP: nResult = cWhileLoopDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO: nResult = cGotoDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL: nResult = cLabelDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETARGUMENTS: nResult = cSetArgumentsDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETVARIABLES: nResult = cSetVariablesDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETPARAMETERS: nResult = cSetParametersDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETSYNCOBJECT: nResult = cSetSynchronizationObjectDialog.Create(this, szObjects, pStep); break;
			case TCPROCEDURETHREADSTEP_ACTIONOBJECT_INJECTALERT: nResult = cInjectAlertDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_ACTIONOBJECT_CALLPROCEDURE: nResult = cCallProcedureDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_ACTIONOBJECT_STARTPROCEDURE: nResult = cStartProcedureDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_ACTIONOBJECT_CONTROLPROCEDURE: nResult = cControlProcedureDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_ACTIONOBJECT_CONTROLTHREAD: nResult = cControlThreadDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_ACTIONOBJECT_WAITTIMEINTERVAL: nResult = cWaitTimeIntervalDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_ACTIONOBJECT_WAITSYNCOBJECT: nResult = cWaitSynchronizationObjectDialog.Create(this, szObjects, pStep); break;
			case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION: nResult = cSendTCFunctionDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE: nResult = cSendTCSequenceDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_ACTIONOBJECT_LOGMESSAGE: nResult = cLogMessageDialog.Create(this, pStep); break;
			case TCPROCEDURETHREADSTEP_ACTIONOBJECT_USERINTERACTION: nResult = cUserInteractionDialog.Create(this, pStep); break;
			default: nResult = 0; break;
			}
			if (nResult == IDOK)
			{
				pStep->SetDesignSize(sizeDesign);
				ConvertUndoItem(TCPROCEDUREDOCUMENTUNDOITEM_ACTION_PROPERTIES, &cUndoItem, pStep, pItem);
				UpdateAllSteps();
				delete pItem;
				return TRUE;
			}
			delete pItem;
		}
	}
	return FALSE;
}

VOID CTCProcedureFlowchartThreadView::DrawDropStep(CONST POINT &pt)
{
	CDC  *pDC;
	CPoint  ptOffset;
	CTCProcedureDocumentItem  *pStep;

	if ((pDC = GetDC()))
	{
		if ((pStep = CTCProcedureDocumentItem::Create(TranslateStepIDToType(GetSelectedStepID()))))
		{
			pStep->SetPosition(CRect(pt.x - pStep->GetImageSize().cx / 2, pt.y - pStep->GetImageSize().cy / 2, pt.x + pStep->GetImageSize().cx / 2, pt.y + pStep->GetImageSize().cy / 2));
			pStep->SetPosition(pStep->GetPosition() + CPoint(pStep->GetPosition().CenterPoint().x - pStep->CalcConnectionPoint().x, 0));
			for (pDC->SetViewportOrg(-m_ptScroll), DrawContent(pDC); pt.x != 0 || pt.y != 0; )
			{
				pStep->Draw(pDC, TRUE);
				break;
			}
			delete pStep;
		}
		ReleaseDC(pDC);
	}
}

CTCProcedureDocumentItem *CTCProcedureFlowchartThreadView::FindDropStep(UINT nType, CONST POINT &pt) CONST
{
	POSITION  lPosition;

	return((CalcDropPoint(nType, pt, lPosition) != CPoint(0, 0)) ? FindStep(lPosition) : (CTCProcedureDocumentItem *)NULL);
}

CTCProcedureDocumentItem *CTCProcedureFlowchartThreadView::FindContainerStep(CONST CTCProcedureDocumentItem *pStep) CONST
{
	INT  nStep;
	INT  nSteps;
	CPtrArray  pSteps;
	CTCProcedureDocumentItem  *pItem;

	for (nStep = 0, nSteps = GetDocument()->EnumSteps(pSteps); nStep < nSteps; nStep++)
	{
		if ((pItem = (CTCProcedureDocumentItem *)pSteps.GetAt(nSteps - nStep - 1)))
		{
			if (pItem->GetSubSteps()->FindStep(pStep, FALSE)) break;
			continue;
		}
	}
	return((nStep < nSteps) ? (CTCProcedureDocumentItem *)pSteps.GetAt(nSteps - nStep - 1) : (CTCProcedureDocumentItem *)NULL);
}

CPoint CTCProcedureFlowchartThreadView::CalcDropPoint(UINT nType, CONST POINT &pt) CONST
{
	POSITION  lPosition;

	return CalcDropPoint(nType, pt, lPosition);
}
CPoint CTCProcedureFlowchartThreadView::CalcDropPoint(UINT nType, CONST POINT &pt, POSITION &lDropPosition) CONST
{
	CSize  sizeStep;
	CPoint  ptDrop;
	CPoint  ptStep[3];
	POSITION  lPosition;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep[2];

	if ((pStep[0] = GetDocument()->GetFirstStep()))
	{
		if (pt.y < pStep[0]->GetPosition().bottom)
		{
			lDropPosition = (POSITION)NULL;
			ptDrop.x = 0;
			ptDrop.y = 0;
			return ptDrop;
		}
	}
	if ((pStep[0] = GetDocument()->GetLastStep()))
	{
		if (pt.y > pStep[0]->GetPosition().top)
		{
			lDropPosition = (POSITION)NULL;
			ptDrop.x = 0;
			ptDrop.y = 0;
			return ptDrop;
		}
	}
	for (sizeStep.cx = sizeStep.cy = 0; (pStep[0] = CTCProcedureDocumentItem::Create(nType)); )
	{
		sizeStep = pStep[0]->GetImageSize();
		delete pStep[0];
		break;
	}
	for (lPosition = ((pDocument = GetDocument()) && sizeStep.cx > 0 && sizeStep.cy > 0) ? pDocument->GetStartPosition() : (POSITION)NULL, ptDrop.x = ptDrop.y = 0, lDropPosition = (POSITION)NULL; lPosition; )
	{
		if ((pStep[1] = ((pStep[0] = pDocument->GetNextStep(lPosition)) != (CTCProcedureDocumentItem *)NULL) ? pDocument->GetPreviousStep(pStep[0]) : (CTCProcedureDocumentItem *)NULL))
		{
			for (ptStep[0] = pStep[0]->CalcConnectionPoint(), ptStep[1] = pStep[1]->CalcConnectionPoint(FALSE, pStep[1]->IsExpanded()), ptStep[2].x = ptStep[0].x, ptStep[2].y = (ptStep[0].y - ptStep[1].y < TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL || ptStep[0].y - ptStep[1].y >= 2 * TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL + sizeStep.cy) ? (ptStep[1].y + TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL + sizeStep.cy / 2) : ((ptStep[0].y + ptStep[1].y) / 2); ptStep[2].y <= ptStep[0].y - TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL / 2; ptStep[2].y += TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL + sizeStep.cy)
			{
				if ((pt.x - ptStep[2].x)*(pt.x - ptStep[2].x) + (pt.y - ptStep[2].y)*(pt.y - ptStep[2].y) < (pt.x - ptDrop.x)*(pt.x - ptDrop.x) + (pt.y - ptDrop.y)*(pt.y - ptDrop.y) || (!ptDrop.x  &&  !ptDrop.y))
				{
					lDropPosition = pDocument->FindStep(pStep[0]);
					ptDrop = ptStep[2];
				}
			}
			if (pStep[0]->IsExpanded())
			{
				ptDrop = CalcDropPoint(nType, pStep[0], sizeStep, pt, ptDrop, lDropPosition);
				continue;
			}
		}
	}
	return ptDrop;
}
CPoint CTCProcedureFlowchartThreadView::CalcDropPoint(UINT nType, CONST CTCProcedureDocumentItem *pSteps, CONST SIZE &sizeStep, CONST POINT &pt, CONST POINT &ptDrop, POSITION &lDropPosition) CONST
{
	CPoint  ptStep[3];
	CPoint  ptStepDrop;
	POSITION  lPosition;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep[2];

	for (lPosition = ((pDocument = pSteps->GetSubSteps())) ? pDocument->GetStartPosition() : (POSITION)NULL, ptStepDrop = ptDrop; lPosition; )
	{
		if ((pStep[1] = ((pStep[0] = pDocument->GetNextStep(lPosition))) ? pDocument->GetPreviousStep(pStep[0]) : (CTCProcedureDocumentItem *)NULL))
		{
			for (ptStep[0] = pStep[0]->CalcConnectionPoint(), ptStep[1] = pStep[1]->CalcConnectionPoint(FALSE, pStep[1]->IsExpanded()), ptStep[2].x = ptStep[0].x, ptStep[2].y = (ptStep[0].y - ptStep[1].y < TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL || ptStep[0].y - ptStep[1].y >= 2 * TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL + sizeStep.cy) ? (ptStep[1].y + TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL + sizeStep.cy / 2) : ((ptStep[0].y + ptStep[1].y) / 2); ptStep[2].y <= ptStep[0].y - TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL / 2; ptStep[2].y += TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL + sizeStep.cy)
			{
				if ((pt.x - ptStep[2].x)*(pt.x - ptStep[2].x) + (pt.y - ptStep[2].y)*(pt.y - ptStep[2].y) < (pt.x - ptStepDrop.x)*(pt.x - ptStepDrop.x) + (pt.y - ptStepDrop.y)*(pt.y - ptStepDrop.y) || (!ptStepDrop.x  &&  !ptStepDrop.y))
				{
					lDropPosition = pDocument->FindStep(pStep[0]);
					ptStepDrop = ptStep[2];
				}
			}
			if (pStep[0]->IsExpanded())
			{
				ptStepDrop = CalcDropPoint(nType, pStep[0], sizeStep, pt, ptStepDrop, lDropPosition);
				continue;
			}
		}
	}
	return ptStepDrop;
}

CRect CTCProcedureFlowchartThreadView::CalcExecutionpointPosition(CTCProcedureDocumentItem *pStep) CONST
{
	CTCProcedureDocumentItem  *pExecutionpoint[2];

	for (pExecutionpoint[0] = pStep; (pExecutionpoint[1] = FindContainerStep(pExecutionpoint[0])) && !pExecutionpoint[1]->IsExpanded(); )
	{
		pExecutionpoint[0] = pExecutionpoint[1];
		continue;
	}
	return pExecutionpoint[0]->GetPosition();
}

BOOL CTCProcedureFlowchartThreadView::ConvertUndoItem(UINT nAction, CTCProcedureDocumentUndoItem *pItem, CONST CTCProcedureDocumentItem *pStep, CONST CTCProcedureDocumentItem *pOldStep)
{
	return((pItem->SetInfo(nAction, pStep, pOldStep) && m_cUndoList.Add(pItem) >= 0) ? TRUE : FALSE);
}
BOOL CTCProcedureFlowchartThreadView::ConvertUndoItem(CONST CTCProcedureDocumentUndoItem *pItem, BOOL bUndo)
{
	UINT  nAction;
	CRect  rStep[2];
	CSize  sizeDesign;
	CPoint  ptDrop;
	POSITION  lPosition;
	CTCProcedureDocumentItem  *pStep[6];

	if (bUndo)
	{
		if ((pStep[0] = new CTCProcedureDocumentItem))
		{
			if ((pStep[1] = new CTCProcedureDocumentItem))
			{
				if ((nAction = pItem->GetInfo(pStep[0], pStep[1])))
				{
					if ((pStep[2] = CTCProcedureDocumentItem::AllocateFromItem(pStep[0])))
					{
						if ((pStep[3] = CTCProcedureDocumentItem::AllocateFromItem(pStep[1])))
						{
							if (nAction == TCPROCEDUREDOCUMENTUNDOITEM_ACTION_INSERT)
							{
								if ((pStep[4] = FindStep(CPoint(pStep[2]->GetPosition().left + pStep[2]->GetImageSize().cx / 2, pStep[2]->GetPosition().top + pStep[2]->GetImageSize().cy / 2), TRUE, FALSE)))
								{
									SetActiveStep(FindStep(CPoint(pStep[3]->GetPosition().left + pStep[3]->GetImageSize().cx / 2, pStep[3]->GetPosition().top + pStep[3]->GetImageSize().cy / 2), TRUE, FALSE, TRUE));
									DeleteStep(pStep[4]);
									delete pStep[3];
									delete pStep[2];
									delete pStep[1];
									delete pStep[0];
									return TRUE;
								}
							}
							if (nAction == TCPROCEDUREDOCUMENTUNDOITEM_ACTION_ACTIVATE)
							{
								SetActiveStep(FindStep(CPoint(pStep[3]->GetPosition().left + pStep[3]->GetImageSize().cx / 2, pStep[3]->GetPosition().top + pStep[3]->GetImageSize().cy / 2), TRUE, FALSE, TRUE));
								delete pStep[3];
								delete pStep[2];
								delete pStep[1];
								delete pStep[0];
								return TRUE;
							}
							if (nAction == TCPROCEDUREDOCUMENTUNDOITEM_ACTION_PROPERTIES)
							{
								if ((pStep[4] = FindStep(CPoint(pStep[2]->GetPosition().left + pStep[2]->GetImageSize().cx / 2, pStep[2]->GetPosition().top + pStep[2]->GetImageSize().cy / 2), TRUE, FALSE)))
								{
									for (sizeDesign.cx = pStep[4]->GetPosition().Width(), sizeDesign.cy = pStep[4]->GetPosition().Height(); pStep[4]->Copy(pStep[3]); )
									{
										pStep[4]->SetDesignSize(sizeDesign);
										break;
									}
									delete pStep[3];
									delete pStep[2];
									delete pStep[1];
									delete pStep[0];
									return TRUE;
								}
							}
							if (nAction == TCPROCEDUREDOCUMENTUNDOITEM_ACTION_RELOCATE)
							{
								if ((pStep[4] = FindStep(CPoint(pStep[2]->GetPosition().left + pStep[2]->GetImageSize().cx / 2, pStep[2]->GetPosition().top + pStep[2]->GetImageSize().cy / 2), TRUE, FALSE)))
								{
									for (pStep[4]->SetPosition(pStep[3]->GetPosition()), pStep[4]->RecalcLayout(); (pStep[5] = FindContainerStep(pStep[4])) != (CTCProcedureDocumentItem *)NULL; )
									{
										for (rStep[0] = pStep[5]->GetPosition(), pStep[5]->RecalcLayout(), rStep[1] = pStep[5]->GetPosition(); rStep[0].Height() != rStep[1].Height(); )
										{
											AdjustSteps(pStep[5], rStep[1].Height() - rStep[0].Height());
											break;
										}
										break;
									}
									SetActiveStep(pStep[4]);
									delete pStep[3];
									delete pStep[2];
									delete pStep[1];
									delete pStep[0];
									return TRUE;
								}
							}
							if (nAction == TCPROCEDUREDOCUMENTUNDOITEM_ACTION_EXPAND || nAction == TCPROCEDUREDOCUMENTUNDOITEM_ACTION_COLLAPSE)
							{
								if ((pStep[4] = FindStep(CPoint(pStep[2]->GetPosition().left + pStep[2]->GetImageSize().cx / 2, pStep[2]->GetPosition().top + pStep[2]->GetImageSize().cy / 2), TRUE, FALSE)))
								{
									for (rStep[0] = pStep[4]->GetPosition(), pStep[4]->Expand((nAction != TCPROCEDUREDOCUMENTUNDOITEM_ACTION_EXPAND) ? TRUE : FALSE), rStep[1] = pStep[4]->GetPosition(); rStep[0].Height() != rStep[1].Height(); )
									{
										AdjustSteps(pStep[4], rStep[1].Height() - rStep[0].Height());
										break;
									}
									SetActiveStep(pStep[4]);
									delete pStep[3];
									delete pStep[2];
									delete pStep[1];
									delete pStep[0];
									return TRUE;
								}
							}
							if (nAction == TCPROCEDUREDOCUMENTUNDOITEM_ACTION_DELETE)
							{
								if ((pStep[4] = ((ptDrop = CalcDropPoint(pStep[2]->GetType(), CPoint(pStep[2]->GetPosition().left + pStep[2]->GetImageSize().cx / 2, pStep[2]->GetPosition().top), lPosition)) != CPoint(0, 0)) ? FindStep(lPosition) : (CTCProcedureDocumentItem *)NULL))
								{
									if (InsertStep(pStep[2], pStep[4]))
									{
										SetActiveStep(pStep[2]);
										SetSelectedStepID();
										delete pStep[3];
										delete pStep[1];
										delete pStep[0];
										return TRUE;
									}
								}
							}
							delete pStep[3];
						}
						delete pStep[2];
					}
				}
				delete pStep[1];
			}
			delete pStep[0];
		}
		return FALSE;
	}
	if ((pStep[0] = new CTCProcedureDocumentItem))
	{
		if ((pStep[1] = new CTCProcedureDocumentItem))
		{
			if ((nAction = pItem->GetInfo(pStep[0], pStep[1])))
			{
				if ((pStep[2] = CTCProcedureDocumentItem::AllocateFromItem(pStep[0])))
				{
					if ((pStep[3] = CTCProcedureDocumentItem::AllocateFromItem(pStep[1])))
					{
						if (nAction == TCPROCEDUREDOCUMENTUNDOITEM_ACTION_INSERT)
						{
							if ((pStep[4] = ((ptDrop = CalcDropPoint(pStep[2]->GetType(), CPoint(pStep[2]->GetPosition().left + pStep[2]->GetImageSize().cx / 2, pStep[2]->GetPosition().top), lPosition)) != CPoint(0, 0)) ? FindStep(lPosition) : (CTCProcedureDocumentItem *)NULL))
							{
								if (InsertStep(pStep[2], pStep[4]))
								{
									SetActiveStep(pStep[2]);
									SetSelectedStepID();
									delete pStep[3];
									delete pStep[1];
									delete pStep[0];
									return TRUE;
								}
							}
						}
						if (nAction == TCPROCEDUREDOCUMENTUNDOITEM_ACTION_ACTIVATE)
						{
							SetActiveStep(FindStep(CPoint(pStep[2]->GetPosition().left + pStep[2]->GetImageSize().cx / 2, pStep[2]->GetPosition().top + pStep[2]->GetImageSize().cy / 2), TRUE, FALSE, TRUE));
							delete pStep[3];
							delete pStep[2];
							delete pStep[1];
							delete pStep[0];
							return TRUE;
						}
						if (nAction == TCPROCEDUREDOCUMENTUNDOITEM_ACTION_PROPERTIES)
						{
							if ((pStep[4] = FindStep(CPoint(pStep[2]->GetPosition().left + pStep[2]->GetImageSize().cx / 2, pStep[2]->GetPosition().top + pStep[2]->GetImageSize().cy / 2), TRUE, FALSE)))
							{
								for (sizeDesign.cx = pStep[4]->GetPosition().Width(), sizeDesign.cy = pStep[4]->GetPosition().Height(); pStep[4]->Copy(pStep[2]); )
								{
									pStep[4]->SetDesignSize(sizeDesign);
									break;
								}
								delete pStep[3];
								delete pStep[2];
								delete pStep[1];
								delete pStep[0];
								return TRUE;
							}
						}
						if (nAction == TCPROCEDUREDOCUMENTUNDOITEM_ACTION_RELOCATE)
						{
							if ((pStep[4] = FindStep(CPoint(pStep[3]->GetPosition().left + pStep[3]->GetImageSize().cx / 2, pStep[3]->GetPosition().top + pStep[3]->GetImageSize().cy / 2), TRUE, FALSE)))
							{
								for (pStep[4]->SetPosition(pStep[2]->GetPosition()), pStep[4]->RecalcLayout(); (pStep[5] = FindContainerStep(pStep[4])) != (CTCProcedureDocumentItem *)NULL; )
								{
									for (rStep[0] = pStep[5]->GetPosition(), pStep[5]->RecalcLayout(), rStep[1] = pStep[5]->GetPosition(); rStep[0].Height() != rStep[1].Height(); )
									{
										AdjustSteps(pStep[5], rStep[1].Height() - rStep[0].Height());
										break;
									}
									break;
								}
								SetActiveStep(pStep[4]);
								delete pStep[3];
								delete pStep[2];
								delete pStep[1];
								delete pStep[0];
								return TRUE;
							}
						}
						if (nAction == TCPROCEDUREDOCUMENTUNDOITEM_ACTION_EXPAND || nAction == TCPROCEDUREDOCUMENTUNDOITEM_ACTION_COLLAPSE)
						{
							if ((pStep[4] = FindStep(CPoint(pStep[2]->GetPosition().left + pStep[2]->GetImageSize().cx / 2, pStep[2]->GetPosition().top + pStep[2]->GetImageSize().cy / 2), TRUE, FALSE)))
							{
								for (rStep[0] = pStep[4]->GetPosition(), pStep[4]->Expand((nAction == TCPROCEDUREDOCUMENTUNDOITEM_ACTION_EXPAND) ? TRUE : FALSE), rStep[1] = pStep[4]->GetPosition(); rStep[0].Height() != rStep[1].Height(); )
								{
									AdjustSteps(pStep[4], rStep[1].Height() - rStep[0].Height());
									break;
								}
								SetActiveStep(pStep[4]);
								delete pStep[3];
								delete pStep[2];
								delete pStep[1];
								delete pStep[0];
								return TRUE;
							}
						}
						if (nAction == TCPROCEDUREDOCUMENTUNDOITEM_ACTION_DELETE)
						{
							if ((pStep[4] = FindStep(CPoint(pStep[2]->GetPosition().left + pStep[2]->GetImageSize().cx / 2, pStep[2]->GetPosition().top + pStep[2]->GetImageSize().cy / 2), TRUE, FALSE)))
							{
								DeleteStep(pStep[4]);
								delete pStep[3];
								delete pStep[2];
								delete pStep[1];
								delete pStep[0];
								return TRUE;
							}
						}
						delete pStep[3];
					}
					delete pStep[2];
				}
			}
			delete pStep[1];
		}
		delete pStep[0];
	}
	return FALSE;
}

BOOL CTCProcedureFlowchartThreadView::CopyToClipboard(CONST CTCProcedureDocumentItem *pStep)
{
	LPBYTE  pData;
	HGLOBAL  hData;
	CByteArray  nItemData;

	if (OpenClipboard())
	{
		if (EmptyClipboard())
		{
			if (pStep->Map(nItemData))
			{
				if ((hData = GlobalAlloc(GHND, nItemData.GetSize())))
				{
					if ((pData = (LPBYTE)GlobalLock(hData)) != (LPBYTE)NULL)
					{
						CopyMemory(pData, nItemData.GetData(), nItemData.GetSize());
						SetClipboardData(GetParent()->GetClipboardFormat(), hData);
						GlobalUnlock(hData);
						CloseClipboard();
						return TRUE;
					}
					GlobalFree(hData);
				}
			}
		}
		CloseClipboard();
	}
	return FALSE;
}

CTCProcedureDocumentItem *CTCProcedureFlowchartThreadView::PasteFromClipboard()
{
	LPBYTE  pData;
	HGLOBAL  hData;
	CByteArray  nItemData;
	CTCProcedureDocumentItem  *pStep;
	COleDataObject  cOleDataObject;

	if (cOleDataObject.AttachClipboard())
	{
		if ((hData = cOleDataObject.GetGlobalData(GetParent()->GetClipboardFormat())))
		{
			if ((pData = (LPBYTE)GlobalLock(hData)))
			{
				nItemData.SetSize(GlobalSize(hData));
				if (nItemData.GetSize() == GlobalSize(hData))
				{
					CopyMemory(nItemData.GetData(), pData, nItemData.GetSize());
					if ((pStep = CTCProcedureDocumentItem::AllocateFromData(nItemData)))
					{
						GlobalUnlock(hData);
						return pStep;
					}
				}
				GlobalUnlock(hData);
			}
		}
	}
	return((CTCProcedureDocumentItem *)NULL);
}

UINT CTCProcedureFlowchartThreadView::TranslateStepIDToType(UINT nStepID) CONST
{
	return((nStepID >= IDM_FIRSTTCFLOWCONTROLSTEP  &&  nStepID <= IDM_LASTTCFLOWCONTROLSTEP) ? (TCPROCEDURETHREADSTEP_FLOWCONTROL_FIRST + nStepID - IDM_FIRSTTCFLOWCONTROLSTEP) : ((nStepID >= IDM_FIRSTTCACTIONOBJECTSTEP  &&  nStepID <= IDM_LASTTCACTIONOBJECTSTEP) ? (TCPROCEDURETHREADSTEP_ACTIONOBJECT_FIRST + nStepID - IDM_FIRSTTCACTIONOBJECTSTEP) : -1));
}

CRect CTCProcedureFlowchartThreadView::CalcDebugPanePosition() CONST
{
	CRect  rView;

	GetClientRect(rView);
	return CalcDebugPanePosition(rView.Width(), rView.Height());
}
CRect CTCProcedureFlowchartThreadView::CalcDebugPanePosition(INT cx, INT cy) CONST
{
	return CRect(0, -m_ptScroll.y, CalcDebugPaneMarginSize(), max(CalcScrollSizes().cy - m_ptScroll.y, cy) + 1);
}

INT CTCProcedureFlowchartThreadView::CalcDebugPaneMarginSize() CONST
{
	return GetSystemMetrics(SM_CXVSCROLL);
}

CSize CTCProcedureFlowchartThreadView::CalcScrollSizes() CONST
{
	CRect  rView;
	CRect  rPosition;
	POSITION  lPosition;
	CFontTools  cFontTools;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep;

	if ((pDocument = GetDocument()))
	{
		for (lPosition = pDocument->GetStartPosition(), rView.SetRectEmpty(); lPosition; )
		{
			if ((pStep = (CTCProcedureDocumentItem *)pDocument->GetNextStep(lPosition)))
			{
				rPosition.SetRect(pStep->GetPosition().TopLeft(), pStep->GetPosition().BottomRight());
				rView.SetRect(min(rPosition.left, rView.left), min(rPosition.top, rView.top), max(rPosition.right + 1, rView.right), max(rPosition.bottom + 1, rView.bottom));
			}
		}
		return CSize(TCPROCEDUREDOCUMENT_DEFAULT_MARGIN + rView.right, TCPROCEDUREDOCUMENT_DEFAULT_MARGIN + TCPROCEDUREDOCUMENT_DEFAULT_STEPLABELVERTINDENT + cFontTools.QueryHeight(&m_lfStepsLabelFont) + rView.bottom);
	}
	return CSize(0, 0);
}

BEGIN_MESSAGE_MAP(CTCProcedureFlowchartThreadView, CScrollView)
	//{{AFX_MSG_MAP(CTCProcedureFlowchartThreadView)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_MOUSEMOVE()
	ON_WM_SETCURSOR()
	ON_WM_LBUTTONDOWN()
	ON_WM_RBUTTONDOWN()
	ON_WM_RBUTTONUP()
	ON_WM_LBUTTONDBLCLK()
	ON_WM_KEYDOWN()
	ON_WM_HSCROLL()
	ON_WM_VSCROLL()
	ON_WM_TIMER()
	ON_WM_DESTROY()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFlowchartThreadView drawing

void CTCProcedureFlowchartThreadView::OnDraw(CDC *pDC)
{
	for (m_ptScroll = GetScrollPosition(); m_ptScroll.x >= 0 && m_ptScroll.y >= 0; )
	{
		DrawContent(pDC);
		break;
	}
}

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFlowchartThreadView message handlers

int CTCProcedureFlowchartThreadView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	HCURSOR  hCursor[2];

	if (CScrollView::OnCreate(lpCreateStruct) != -1)
	{
		if (m_wndDebugPane.Create(this, CRect(0, 0, 0, 0)))
		{
			if ((hCursor[0] = (HCURSOR)LoadImage(GetModuleHandle((LPCTSTR)NULL), MAKEINTRESOURCE(IDC_TCSTEPPOINT), IMAGE_CURSOR, 0, 0, LR_DEFAULTCOLOR | LR_DEFAULTSIZE)))
			{
				if ((hCursor[1] = (HCURSOR)LoadImage(GetModuleHandle((LPCTSTR)NULL), MAKEINTRESOURCE(IDC_TCSTEPTIP), IMAGE_CURSOR, 0, 0, LR_DEFAULTCOLOR | LR_DEFAULTSIZE)))
				{
					SetScrollSizes(MM_TEXT, CalcScrollSizes());
					m_hToolTipCursor = hCursor[1];
					m_hPointCursor = hCursor[0];
					return 0;
				}
				DestroyCursor(hCursor[0]);
			}
		}
	}
	return -1;
}

void CTCProcedureFlowchartThreadView::OnSize(UINT nType, int cx, int cy)
{
	m_wndDebugPane.MoveWindow(CalcDebugPanePosition(cx, cy));
	CScrollView::OnSize(nType, cx, cy);
}

BOOL CTCProcedureFlowchartThreadView::OnEraseBkgnd(CDC *pDC)
{
	return TRUE;
}

void CTCProcedureFlowchartThreadView::OnMouseMove(UINT nFlags, CPoint point)
{
	CRect  rView;
	CPoint  ptDrop;

	if (CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) && !GetParentDisplay()->IsTesting())
	{
		for (GetClientRect(rView), rView.DeflateRect(CalcDebugPanePosition().Width(), 0, 0, 0); rView.PtInRect(point) && GetSelectedStepID() != (UINT)-1; )
		{
			for (ptDrop = CalcDropPoint(TranslateStepIDToType(GetSelectedStepID()), point + CPoint(GetScrollPosition().x, GetScrollPosition().y)); m_ptDropStep != ptDrop; )
			{
				m_ptDropStep.x = ptDrop.x;
				m_ptDropStep.y = ptDrop.y;
				DrawDropStep(ptDrop);
				break;
			}
			SetTimer(TCPROCEDUREFLOWCHARTTHREADVIEW_DROP_TIMERID, TCPROCEDUREFLOWCHARTTHREADVIEW_DROP_TIMEOUT, NULL);
			break;
		}
		if ((m_ptDropStep.x != 0 || m_ptDropStep.y != 0) && m_ptDropStep != ptDrop)
		{
			KillTimer(TCPROCEDUREFLOWCHARTTHREADVIEW_DROP_TIMERID);
			m_ptDropStep.x = 0;
			m_ptDropStep.y = 0;
			DrawContent();
		}
	}
	CScrollView::OnMouseMove(nFlags, point);
}

BOOL CTCProcedureFlowchartThreadView::OnSetCursor(CWnd *pWnd, UINT nHitTest, UINT message)
{
	POINT  ptCursor;
	CTCProcedureDocumentItem  *pStep;

	if (CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) && !GetParentDisplay()->IsTesting())
	{
		if (pWnd->GetSafeHwnd() == GetSafeHwnd() && nHitTest != HTHSCROLL  &&  nHitTest != HTVSCROLL  &&  GetSelectedStepID() != (UINT)-1)
		{
			SetCursor(m_hPointCursor);
			return TRUE;
		}
		for (GetCursorPos(&ptCursor), ScreenToClient(&ptCursor), ptCursor.x += GetScrollPosition().x, ptCursor.y += GetScrollPosition().y; (pStep = FindStep(ptCursor, TRUE, FALSE)) && !pStep->GetComments().IsEmpty(); )
		{
			SetCursor(m_hToolTipCursor);
			return TRUE;
		}
	}
	return CScrollView::OnSetCursor(pWnd, nHitTest, message);
}

void CTCProcedureFlowchartThreadView::OnLButtonDown(UINT nFlags, CPoint point)
{
	CRect  rStep[2];
	CPoint  ptStep;
	POSITION  lPosition;
	CTCProcedureDocumentItem  *pStep[2];
	CTCProcedureDocumentUndoItem  cUndoItem;

	if (CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) && !GetParentDisplay()->IsTesting())
	{
		if ((pStep[0] = ((pStep[1] = FindDropStep(TranslateStepIDToType(GetSelectedStepID()), m_ptDropStep))) ? CTCProcedureDocumentItem::Create(TranslateStepIDToType(GetSelectedStepID()), pStep[1]->GetSubThreadID()) : (CTCProcedureDocumentItem *)NULL))
		{
			for (pStep[0]->SetPosition(CRect(m_ptDropStep.x - pStep[0]->GetImageSize().cx / 2, m_ptDropStep.y - pStep[0]->GetImageSize().cy / 2, m_ptDropStep.x + pStep[0]->GetImageSize().cx / 2, m_ptDropStep.y + pStep[0]->GetImageSize().cy / 2)), pStep[0]->SetPosition(pStep[0]->GetPosition() + CPoint(pStep[0]->GetPosition().CenterPoint().x - pStep[0]->CalcConnectionPoint().x, 0)); (lPosition = InsertStep(pStep[0], pStep[1])); )
			{
				ConvertUndoItem(TCPROCEDUREDOCUMENTUNDOITEM_ACTION_INSERT, &cUndoItem, pStep[0], GetActiveStep(TRUE));
				SetActiveStep(pStep[0]);
				break;
			}
			for (m_ptDropStep.x = m_ptDropStep.y = 0; !lPosition; )
			{
				delete pStep[0];
				break;
			}
			KillTimer(TCPROCEDUREFLOWCHARTTHREADVIEW_DROP_TIMERID);
			SetSelectedStepID();
		}
		for (ptStep = point + GetScrollPosition(); !pStep[1]; )
		{
			if ((pStep[1] = FindStep(ptStep, TRUE, TRUE, TRUE)))
			{
				if (pStep[1]->IsPtOnTreeSymbol(ptStep))
				{
					rStep[0] = pStep[1]->GetPosition();
					pStep[1]->Expand(!pStep[1]->IsExpanded());
					rStep[1] = pStep[1]->GetPosition();
					AdjustSteps(pStep[1], rStep[1].Height() - rStep[0].Height());
					ConvertUndoItem((pStep[1]->IsExpanded()) ? TCPROCEDUREDOCUMENTUNDOITEM_ACTION_EXPAND : TCPROCEDUREDOCUMENTUNDOITEM_ACTION_COLLAPSE, &cUndoItem, pStep[1]);
					SetActiveStep(pStep[1]);
					SetSelectedStepID();
					UpdateAllSteps();
					break;
				}
			}
			if (pStep[1] != GetActiveStep(TRUE))
			{
				ConvertUndoItem(TCPROCEDUREDOCUMENTUNDOITEM_ACTION_ACTIVATE, &cUndoItem, pStep[1], GetActiveStep(TRUE));
				SetActiveStep(pStep[1]);
				SetSelectedStepID();
			}
			break;
		}
	}
	else
	{
		for (ptStep = point + GetScrollPosition(); (pStep[1] = FindStep(ptStep)); )
		{
			if (pStep[1]->IsPtOnTreeSymbol(ptStep))
			{
				rStep[0] = pStep[1]->GetPosition();
				pStep[1]->Expand(!pStep[1]->IsExpanded());
				rStep[1] = pStep[1]->GetPosition();
				for (AdjustSteps(pStep[1], rStep[1].Height() - rStep[0].Height()); pStep[1] != GetActiveStep() && !GetParentDisplay()->IsTesting(); )
				{
					ConvertUndoItem((pStep[1]->IsExpanded()) ? TCPROCEDUREDOCUMENTUNDOITEM_ACTION_EXPAND : TCPROCEDUREDOCUMENTUNDOITEM_ACTION_COLLAPSE, &cUndoItem, pStep[1]);
					SetActiveStep(pStep[1]);
					break;
				}
				UpdateAllSteps();
				break;
			}
			if (pStep[1] != GetActiveStep() && !GetParentDisplay()->IsTesting())
			{
				ConvertUndoItem(TCPROCEDUREDOCUMENTUNDOITEM_ACTION_ACTIVATE, &cUndoItem, pStep[1], GetActiveStep(TRUE));
				SetActiveStep(pStep[1]);
				SetSelectedStepID();
			}
			break;
		}
	}
	CScrollView::OnLButtonDown(nFlags, point);
}

void CTCProcedureFlowchartThreadView::OnRButtonDown(UINT nFlags, CPoint point)
{
	INT  nStep;
	INT  nSteps;
	CString  szText;
	CString  szTitle;
	CPtrArray  pSteps[2];
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep[2];

	if ((pStep[0] = FindStep(point + GetScrollPosition(), TRUE, FALSE)))
	{
		if ((pDocument = ((szTitle = pStep[0]->GetName()).IsEmpty()) ? new CTCProcedureDocument : (CTCProcedureDocument *)NULL))
		{
			for (nStep = 0, nSteps = (pDocument->Copy(GetDocument()) && GetDocument()->EnumSteps(pSteps[0]) == pDocument->EnumSteps(pSteps[1], FALSE, TRUE)) ? (INT)pSteps[0].GetSize() : 0; nStep < nSteps; nStep++)
			{
				if ((pStep[1] = (pStep[0] == (CTCProcedureDocumentItem *)pSteps[0].GetAt(nStep)) ? (CTCProcedureDocumentItem *)pSteps[1].GetAt(nStep) : (CTCProcedureDocumentItem *)NULL))
				{
					szTitle = pStep[1]->GetName();
					break;
				}
			}
		}
		for (szText = pStep[0]->GetComments(); !szTitle.IsEmpty(); )
		{
			m_wndToolTip.Create(this, point, szTitle, szText);
			break;
		}
		delete pDocument;
	}
	CScrollView::OnRButtonDown(nFlags, point);
}

void CTCProcedureFlowchartThreadView::OnRButtonUp(UINT nFlags, CPoint point)
{
	m_wndToolTip.Destroy();
	CScrollView::OnRButtonUp(nFlags, point);
}

void CTCProcedureFlowchartThreadView::OnLButtonDblClk(UINT nFlags, CPoint point)
{
	CPoint  ptStep;
	CTCProcedureDocumentItem  *pStep;

	for (ptStep = point + GetScrollPosition(); (pStep = FindStep(ptStep, TRUE, FALSE)); )
	{
		ShowStepProperties(pStep);
		break;
	}
	CScrollView::OnLButtonDblClk(nFlags, point);
}

void CTCProcedureFlowchartThreadView::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CRect  rStep[2];
	CPoint  ptDrop;
	CPoint  ptStep;
	POSITION  lPosition;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep[4];
	CTCProcedureDocumentUndoItem  cUndoItem;

	if (!GetParentDisplay()->IsTesting())
	{
		for (; (nChar == VK_UP || nChar == VK_DOWN) && !HIBYTE(GetKeyState(VK_SHIFT)); )
		{
			if ((pDocument = ((pStep[0] = GetActiveStep(TRUE))) ? (CTCProcedureDocument *)pStep[0]->GetDocument() : ((nChar == VK_DOWN) ? (CTCProcedureDocument *)(pStep[0] = GetDocument()->GetFirstStep())->GetDocument() : (CTCProcedureDocument *)(pStep[0] = GetDocument()->GetLastStep())->GetDocument())))
			{
				for (; (pStep[1] = (nChar == VK_DOWN) ? pDocument->GetNextStep(pStep[0]) : pDocument->GetPreviousStep(pStep[0])) != (CTCProcedureDocumentItem *)NULL; pStep[0] = pStep[1])
				{
					if (pStep[1]->CanActivate() || pStep[1]->CanSelect())
					{
						ConvertUndoItem(TCPROCEDUREDOCUMENTUNDOITEM_ACTION_ACTIVATE, &cUndoItem, pStep[1], GetActiveStep(TRUE));
						SetActiveStep(pStep[1]);
						break;
					}
				}
			}
			break;
		}
		for (; (nChar == VK_UP || nChar == VK_DOWN) && HIBYTE(GetKeyState(VK_SHIFT)); )
		{
			if ((pStep[1] = ((pStep[0] = GetActiveStep()) && !pStep[0]->IsExpanded()) ? FindContainerStep(pStep[0]) : (CTCProcedureDocumentItem *)NULL))
			{
				if ((pStep[3] = ((pStep[2] = ((pDocument = (CTCProcedureDocument *)pStep[0]->GetDocument())) ? ((nChar == VK_UP) ? pDocument->GetPreviousStep(pStep[0]) : pDocument->GetNextStep(pStep[0])) : (CTCProcedureDocumentItem *)NULL)) ? CTCProcedureDocumentItem::AllocateFromItem(pStep[0]) : (CTCProcedureDocumentItem *)NULL))
				{
					for (ptStep = pStep[0]->CalcConnectionPoint((nChar == VK_UP) ? TRUE : FALSE, pStep[0]->IsExpanded()), ptStep.Offset(0, (nChar == VK_UP) ? -(TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL + pStep[0]->GetImageSize().cy) : (TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL / 2 + pStep[0]->GetImageSize().cy / 2)); (ptDrop = CalcDropPoint(pStep[0]->GetType(), ptStep)) != CPoint(0, 0) && ptDrop.x == ptStep.x && ((nChar == VK_UP && ptDrop.y > pStep[2]->GetPosition().bottom) || (nChar == VK_DOWN && ptDrop.y < pStep[2]->GetPosition().top)); )
					{
						for (pStep[0]->SetPosition(CRect(ptDrop.x - pStep[0]->GetImageSize().cx / 2, ptDrop.y - pStep[0]->GetImageSize().cy / 2, ptDrop.x + pStep[0]->GetImageSize().cx / 2, ptDrop.y + pStep[0]->GetImageSize().cy / 2)), pStep[0]->SetPosition(pStep[0]->GetPosition() + CPoint(pStep[0]->GetPosition().CenterPoint().x - pStep[0]->CalcConnectionPoint().x, 0)); (nChar == VK_UP && pStep[0]->GetPosition().top - pStep[2]->GetPosition().bottom < TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL) || (nChar == VK_DOWN && pStep[2]->GetPosition().top - pStep[0]->GetPosition().bottom < TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL); )
						{
							pStep[0]->SetPosition(pStep[0]->GetPosition() + CPoint(0, TCPROCEDUREDOCUMENT_DEFAULT_STEPINTERVAL / 2 + pStep[0]->GetImageSize().cy / 2));
							break;
						}
						for (pStep[0]->RecalcLayout(), rStep[0] = pStep[1]->GetPosition(), pStep[1]->RecalcLayout(), rStep[1] = pStep[1]->GetPosition(); rStep[0].Height() != rStep[1].Height(); )
						{
							AdjustSteps(pStep[1], rStep[1].Height() - rStep[0].Height());
							break;
						}
						for (; pStep[0]->GetPosition() != pStep[3]->GetPosition(); )
						{
							ConvertUndoItem(TCPROCEDUREDOCUMENTUNDOITEM_ACTION_RELOCATE, &cUndoItem, pStep[0], pStep[3]);
							break;
						}
						SetActiveStep(pStep[0]);
						break;
					}
					delete pStep[3];
				}
			}
			break;
		}
		for (; nChar == VK_LEFT; )
		{
			if ((pStep[0] = GetActiveStep(TRUE)))
			{
				if ((pStep[1] = FindContainerStep(pStep[0])))
				{
					ConvertUndoItem(TCPROCEDUREDOCUMENTUNDOITEM_ACTION_ACTIVATE, &cUndoItem, pStep[1], GetActiveStep(TRUE));
					SetActiveStep(pStep[1]);
					break;
				}
			}
			break;
		}
		for (; nChar == VK_RIGHT; )
		{
			if ((pStep[0] = GetActiveStep(TRUE)))
			{
				if (!pStep[0]->IsExpanded())
				{
					for (rStep[0] = pStep[0]->GetPosition(), pStep[0]->Expand(), rStep[1] = pStep[0]->GetPosition(); rStep[0].Height() != rStep[1].Height(); )
					{
						AdjustSteps(pStep[0], rStep[1].Height() - rStep[0].Height());
						ConvertUndoItem((pStep[0]->IsExpanded()) ? TCPROCEDUREDOCUMENTUNDOITEM_ACTION_EXPAND : TCPROCEDUREDOCUMENTUNDOITEM_ACTION_COLLAPSE, &cUndoItem, pStep[0]);
						break;
					}
				}
				for (lPosition = ((pDocument = pStep[0]->GetSubSteps())) ? pDocument->GetStartPosition() : (POSITION)NULL; lPosition; )
				{
					if ((pStep[1] = pDocument->GetNextStep(lPosition)) && (pStep[1]->CanActivate() || pStep[1]->CanSelect()))
					{
						ConvertUndoItem(TCPROCEDUREDOCUMENTUNDOITEM_ACTION_ACTIVATE, &cUndoItem, pStep[1], GetActiveStep(TRUE));
						SetActiveStep(pStep[1]);
						break;
					}
				}
			}
			break;
		}
	}
	for (; nChar == VK_RETURN; )
	{
		if ((pStep[0] = GetActiveStep()))
		{
			if (!HIBYTE(GetKeyState(VK_SHIFT)))
			{
				if (!GetParentDisplay()->IsTesting())
				{
					ShowStepProperties(pStep[0]);
					break;
				}
				break;
			}
			for (rStep[0] = pStep[0]->GetPosition(), pStep[0]->Expand(!pStep[0]->IsExpanded()), rStep[1] = pStep[0]->GetPosition(); rStep[0].Height() != rStep[1].Height(); )
			{
				for (AdjustSteps(pStep[0], rStep[1].Height() - rStep[0].Height()); !GetParentDisplay()->IsTesting(); )
				{
					ConvertUndoItem((pStep[0]->IsExpanded()) ? TCPROCEDUREDOCUMENTUNDOITEM_ACTION_EXPAND : TCPROCEDUREDOCUMENTUNDOITEM_ACTION_COLLAPSE, &cUndoItem, pStep[0]);
					SetActiveStep(pStep[0]);
					break;
				}
				UpdateAllSteps();
				break;
			}
		}
		break;
	}
	for (; nChar == VK_ESCAPE; )
	{
		GetParent()->SetFocus();
		break;
	}
	CScrollView::OnKeyDown(nChar, nRepCnt, nFlags);
}

void CTCProcedureFlowchartThreadView::OnHScroll(UINT nSBCode, UINT nPos, CScrollBar *pScrollBar)
{
	CRect  rView;
	SCROLLINFO  sScrollInfo;

	for (GetClientRect(rView), rView.DeflateRect(CalcDebugPanePosition().Width(), 0, 0, 0), GetScrollInfo(SB_HORZ, &sScrollInfo); nSBCode == SB_THUMBPOSITION || nSBCode == SB_THUMBTRACK; )
	{
		ScrollWindow((nSBCode == SB_THUMBTRACK) ? (GetScrollPos(SB_HORZ) - sScrollInfo.nTrackPos) : (GetScrollPos(SB_HORZ) - sScrollInfo.nPos), 0, rView, rView);
		SetScrollPos(SB_HORZ, (nSBCode == SB_THUMBTRACK) ? sScrollInfo.nTrackPos : sScrollInfo.nPos);
		return;
	}
	if (nSBCode == SB_LEFT || nSBCode == SB_RIGHT)
	{
		ScrollWindow((nSBCode != SB_LEFT) ? (GetScrollPos(SB_HORZ) - (sScrollInfo.nMax - sScrollInfo.nPage + 1)) : GetScrollPos(SB_HORZ), 0, rView, rView);
		SetScrollPos(SB_HORZ, (nSBCode != SB_LEFT) ? (sScrollInfo.nMax - sScrollInfo.nPage + 1) : 0);
		return;
	}
	if (nSBCode == SB_LINELEFT || nSBCode == SB_LINERIGHT)
	{
		ScrollWindow((nSBCode != SB_LINELEFT) ? -min((INT)sScrollInfo.nPage / 16, (INT)(sScrollInfo.nMax - sScrollInfo.nPage + 1) - GetScrollPos(SB_HORZ)) : min((INT)sScrollInfo.nPage / 16, GetScrollPos(SB_HORZ)), 0, rView, rView);
		SetScrollPos(SB_HORZ, (nSBCode == SB_LINELEFT) ? max(GetScrollPos(SB_HORZ) - sScrollInfo.nPage / 16, 0) : min(GetScrollPos(SB_HORZ) + sScrollInfo.nPage / 16, sScrollInfo.nMax - sScrollInfo.nPage + 1));
		return;
	}
	if (nSBCode == SB_PAGELEFT || nSBCode == SB_PAGERIGHT)
	{
		ScrollWindow((nSBCode != SB_PAGELEFT) ? -min((INT)sScrollInfo.nPage, (INT)(sScrollInfo.nMax - sScrollInfo.nPage + 1) - GetScrollPos(SB_HORZ)) : min((INT)sScrollInfo.nPage, GetScrollPos(SB_HORZ)), 0, rView, rView);
		SetScrollPos(SB_HORZ, (nSBCode == SB_PAGELEFT) ? max(GetScrollPos(SB_HORZ) - sScrollInfo.nPage, 0) : min(GetScrollPos(SB_HORZ) + sScrollInfo.nPage, sScrollInfo.nMax - sScrollInfo.nPage + 1));
		return;
	}
	CScrollView::OnHScroll(nSBCode, nPos, pScrollBar);
}

void CTCProcedureFlowchartThreadView::OnVScroll(UINT nSBCode, UINT nPos, CScrollBar *pScrollBar)
{
	SCROLLINFO  sScrollInfo[2];

	for (GetScrollInfo(SB_HORZ, &sScrollInfo[0]), GetScrollInfo(SB_VERT, &sScrollInfo[1]); nSBCode == SB_THUMBPOSITION || nSBCode == SB_THUMBTRACK; )
	{
		ScrollToPosition(CPoint(sScrollInfo[0].nPos, (nSBCode == SB_THUMBTRACK) ? sScrollInfo[1].nTrackPos : sScrollInfo[1].nPos));
		return;
	}
	CScrollView::OnVScroll(nSBCode, nPos, pScrollBar);
}

void CTCProcedureFlowchartThreadView::OnTimer(UINT_PTR nEventID)
{
	CRect  rView;
	CPoint  ptDrop;
	POINT  ptCursor;

	for (GetClientRect(rView), GetCursorPos(&ptCursor), ScreenToClient(&ptCursor); nEventID == TCPROCEDUREFLOWCHARTTHREADVIEW_DROP_TIMERID; )
	{
		if ((ptDrop = (rView.PtInRect(ptCursor) && !CalcDebugPanePosition().PtInRect(ptCursor) && GetSelectedStepID() != (UINT)-1) ? CalcDropPoint(TranslateStepIDToType(GetSelectedStepID()), ptCursor) : CPoint(0, 0)) == CPoint(0, 0))
		{
			KillTimer(TCPROCEDUREFLOWCHARTTHREADVIEW_DROP_TIMERID);
			m_ptDropStep.x = 0;
			m_ptDropStep.y = 0;
			DrawContent();
		}
		break;
	}
	CScrollView::OnTimer(nEventID);
}

void CTCProcedureFlowchartThreadView::OnDestroy()
{
	m_cUndoList.Reset();
	delete m_pFlowchart[0];
	delete m_pFlowchart[1];
	DestroyCursor(m_hPointCursor);
	DestroyCursor(m_hToolTipCursor);
	m_wndDebugPane.DestroyWindow();
	CScrollView::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFlowchartTabCtrl

IMPLEMENT_DYNCREATE(CTCProcedureFlowchartTabCtrl, CTabCtrl)

CTCProcedureFlowchartTabCtrl::CTCProcedureFlowchartTabCtrl() : CTabCtrl()
{
	m_nIndex = -1;
	m_nClipboardFormat = 0;
	m_sizeTabMargins.cx = m_sizeTabMargins.cy = 0;
}

BOOL CTCProcedureFlowchartTabCtrl::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	CStringArray  szTabs;

	szTabs.Add(STRING(IDS_TCPROCEDURE_FLOWCHART_DEFAULTTAB));
	return Create(pParentWnd, rect, szTabs);
}
BOOL CTCProcedureFlowchartTabCtrl::Create(CWnd *pParentWnd, CONST RECT &rect, CONST CStringArray &szTabs)
{
	INT  nTab;
	INT  nTabs;
	CRect  rTabs;
	CRect  rView;
	CTCProcedureFlowchartThreadView  *pView;

	if (CTabCtrl::Create(TCS_TABS | TCS_SINGLELINE | WS_CHILD | WS_VISIBLE, rect, pParentWnd, 0))
	{
		for (nTab = 0, nTabs = (INT)szTabs.GetSize(), GetClientRect(rView), AdjustRect(FALSE, rView); nTab < nTabs; nTab++)
		{
			if ((pView = new CTCProcedureFlowchartThreadView))
			{
				if (InsertItem(nTab, szTabs.GetAt(nTab)) >= 0)
				{
					if (pView->Create(this, rView, nTab == 0))
					{
						pView->SetWindowText(szTabs.GetAt(nTab));
						m_pViews.Add(pView);
						continue;
					}
					DeleteItem(nTab);
				}
				delete pView;
			}
			break;
		}
		if (nTab == nTabs)
		{
			m_sizeTabMargins = (GetItemRect(0, rTabs)) ? CSize(rTabs.left, rTabs.top) : m_sizeTabMargins;
			m_nIndex = 0;
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCProcedureFlowchartTabCtrl::SetFlowcharts(CONST CDatabaseTCProcedure *pDatabaseTCProcedure, INT nFlags)
{
	INT  nTab;
	INT  nTabs;
	BOOL  bTab;
	CRect  rView;
	CString  szThread;
	CTCProcedureDocument  *pFlowchart;
	CTCProcedureFlowchartThreadView  *pView;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;

	for (nTab = 0, nTabs = (INT)pDatabaseTCProcedure->GetSize(); nTab < nTabs; nTab++)
	{
		if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(nTab)) && pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) >= 0)
		{
			if ((pView = (nTab < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab) : (CTCProcedureFlowchartThreadView *)NULL))
			{
				if (pView->GetWindowText(szThread.GetBufferSetLength(pView->GetWindowTextLength()), pView->GetWindowTextLength() + 1) > 0 && pDatabaseTCProcedureThread->GetName() == szThread)
				{
					if ((pFlowchart = (nFlags) ? new CTCProcedureDocument : (CTCProcedureDocument *)NULL))
					{
						if (pFlowchart->Unmap(pDatabaseTCProcedureThread) && pView->SetSteps(pFlowchart, nFlags < 0))
						{
							pView->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints);
							szThread.ReleaseBuffer();
							delete pFlowchart;
							continue;
						}
						delete pFlowchart;
					}
					szThread.ReleaseBuffer();
					if (nFlags) break;
					continue;
				}
			}
			if (!nFlags  &&  m_pViews.GetSize() == pDatabaseTCProcedure->GetSize() + 1)
			{
				if ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
				{
					m_pViews.RemoveAt(nTab);
					pView->DestroyWindow();
				}
				DeleteItem(nTab);
				nTab = nTab - 1;
				continue;
			}
			for (GetClientRect(rView), AdjustRect(FALSE, rView), bTab = (m_nIndex == nTab) ? TRUE : FALSE; (pView = new CTCProcedureFlowchartThreadView); )
			{
				if (InsertItem(nTab, pDatabaseTCProcedureThread->GetName()) >= 0)
				{
					if ((pFlowchart = new CTCProcedureDocument))
					{
						if (pView->Create(this, rView, bTab))
						{
							if (pFlowchart->Unmap(pDatabaseTCProcedureThread))
							{
								if (pView->SetSteps(pFlowchart))
								{
									pView->SetWindowText(pDatabaseTCProcedureThread->GetName());
									pView->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints);
									m_pViews.InsertAt(nTab, pView);
									delete pFlowchart;
									break;
								}
							}
						}
						delete pFlowchart;
					}
					DeleteItem(nTab);
				}
				nTabs = nTab;
				delete pView;
				break;
			}
			if (nTab == nTabs) break;
		}
	}
	while (pDatabaseTCProcedure->GetSize() > 0 && nTab < GetItemCount())
	{
		if ((pView = (nTab < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab) : (CTCProcedureFlowchartThreadView *)NULL))
		{
			m_pViews.RemoveAt(nTab);
			pView->DestroyWindow();
		}
		DeleteItem(nTab);
	}
	if ((pView = ((nTabs = GetItemCount()) > 0 && m_nIndex < 0) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(0) : (CTCProcedureFlowchartThreadView *)NULL))
	{
		pView->ShowWindow(SW_SHOW);
		SetCurSel((m_nIndex = 0));
	}
	if ((pView = (!pDatabaseTCProcedure->GetSize() && nTabs > 0) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(0) : (CTCProcedureFlowchartThreadView *)NULL))
	{
		if ((pFlowchart = new CTCProcedureDocument))
		{
			if (pView->SetSteps(pFlowchart))
			{
				delete pFlowchart;
				return TRUE;
			}
			delete pFlowchart;
		}
	}
	return((pDatabaseTCProcedure->GetSize() == nTabs) ? TRUE : FALSE);
}

BOOL CTCProcedureFlowchartTabCtrl::GetFlowcharts(CDatabaseTCProcedure *pDatabaseTCProcedure, INT nFlags) CONST
{
	INT  nTab;
	INT  nTabs;
	CString  szThread;
	CTCProcedureDocument  *pFlowchart;
	CTCProcedureFlowchartThreadView  *pView;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;

	for (nTab = 0, nTabs = GetItemCount(), pDatabaseTCProcedure->RemoveAll(); nTab < nTabs; nTab++)
	{
		if ((pDatabaseTCProcedureThread = new CDatabaseTCProcedureThread))
		{
			if ((pFlowchart = ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab))) ? new CTCProcedureDocument : (CTCProcedureDocument *)NULL))
			{
				for (pView->GetWindowText(szThread), pDatabaseTCProcedureThread->SetName(szThread); (nFlags && pView->GetSteps(pFlowchart) && pFlowchart->Map(pDatabaseTCProcedureThread) && pView->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) >= 0 && pDatabaseTCProcedureThread->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints)) || !nFlags; )
				{
					pDatabaseTCProcedure->Add(pDatabaseTCProcedureThread);
					break;
				}
				if (nTab == pDatabaseTCProcedure->GetSize() - 1)
				{
					delete pFlowchart;
					continue;
				}
				delete pFlowchart;
			}
			delete pDatabaseTCProcedureThread;
		}
		break;
	}
	return((nTab == nTabs) ? TRUE : FALSE);
}

BOOL CTCProcedureFlowchartTabCtrl::SetBreakpoints(LPCTSTR pszThread, CONST CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints)
{
	INT  nTab;
	INT  nTabs;
	CString  szTab;
	CTCProcedureFlowchartThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
		{
			for (pView->GetWindowText(szTab); szTab == pszThread; )
			{
				pView->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints);
				break;
			}
		}
	}
	return((nTab < nTabs) ? TRUE : FALSE);
}

INT CTCProcedureFlowchartTabCtrl::GetBreakpoints(LPCTSTR pszThread, CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints) CONST
{
	INT  nTab;
	INT  nTabs;
	CString  szTab;
	CTCProcedureFlowchartThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(), pDatabaseTCProcedureThreadBreakpoints.RemoveAll(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
		{
			for (pView->GetWindowText(szTab); szTab == pszThread; )
			{
				pView->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints);
				break;
			}
		}
	}
	return((INT)pDatabaseTCProcedureThreadBreakpoints.GetSize());
}

INT CTCProcedureFlowchartTabCtrl::EnumFlowchartViews(CStringArray &szThreads, CPtrArray &pViews) CONST
{
	INT  nTab;
	INT  nTabs;
	CString  szTab;
	CTCProcedureFlowchartThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(), szThreads.RemoveAll(), pViews.RemoveAll(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
		{
			pView->GetWindowText(szTab);
			szThreads.Add(szTab);
			pViews.Add(pView);
		}
	}
	return((INT)szThreads.GetSize());
}

INT CTCProcedureFlowchartTabCtrl::EnumSynchronizationObjects(CStringArray &szObjects) CONST
{
	INT  nTab;
	INT  nTabs;
	INT  nStep;
	INT  nSteps;
	INT  nObject[2];
	INT  nObjects[2];
	CPtrArray  pSteps;
	CTCProcedureDocumentItem  *pStep;
	CTCProcedureFlowchartThreadView  *pView;
	CTCProcedureDocumentSetSynchronizationObjectItem  *pSetSyncObjectItem;
	CTCProcedureDocumentWaitSynchronizationObjectItem  *pWaitSyncObjectItem;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(), szObjects.RemoveAll(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
		{
			for (pView->UpdateAllSteps(pSteps); pSteps.GetSize() > 0; )
			{
				for (nStep = 0, nSteps = (INT)pSteps.GetSize(); nStep < nSteps; nStep++)
				{
					if ((pStep = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)) != (CTCProcedureDocumentItem *)NULL)
					{
						if ((pSetSyncObjectItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETSYNCOBJECT) ? (CTCProcedureDocumentSetSynchronizationObjectItem *)pStep : (CTCProcedureDocumentSetSynchronizationObjectItem *)NULL) && !pSetSyncObjectItem->GetObjectName().IsEmpty())
						{
							szObjects.Add(pSetSyncObjectItem->GetObjectName());
							continue;
						}
						if ((pWaitSyncObjectItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_WAITSYNCOBJECT) ? (CTCProcedureDocumentWaitSynchronizationObjectItem *)pStep : (CTCProcedureDocumentWaitSynchronizationObjectItem *)NULL) && !pWaitSyncObjectItem->GetObjectName().IsEmpty())
						{
							szObjects.Add(pWaitSyncObjectItem->GetObjectName());
							continue;
						}
					}
				}
				break;
			}
		}
	}
	for (nObject[0] = 0, nObjects[0] = (INT)szObjects.GetSize(); nObject[0] < nObjects[0]; nObject[0]++)
	{
		for (nObject[1] = nObject[0] + 1, nObjects[1] = nObjects[0]; nObject[1] < nObjects[1]; nObject[1]++)
		{
			if (szObjects.GetAt(nObject[0]) == szObjects.GetAt(nObject[1]))
			{
				szObjects.RemoveAt(nObject[1]);
				nObjects[0]--;
				nObjects[1]--;
				nObject[1]--;
			}
		}
	}
	return((INT)szObjects.GetSize());
}

BOOL CTCProcedureFlowchartTabCtrl::SetActiveStep(CONST CTCProcedureDocumentItem *pStep)
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) ? pView->SetActiveStep(pStep) : FALSE);
}

CTCProcedureDocumentItem *CTCProcedureFlowchartTabCtrl::GetActiveStep(BOOL bAll) CONST
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) ? pView->GetActiveStep(bAll) : (CTCProcedureDocumentItem *)NULL);
}

INT CTCProcedureFlowchartTabCtrl::GetTotalSteps() CONST
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) ? pView->GetTotalSteps() : 0);
}

VOID CTCProcedureFlowchartTabCtrl::SetStepsLabelFont(CONST LOGFONT *plfFont, INT nFlags)
{
	INT  nTab;
	INT  nTabs;
	CTCProcedureFlowchartThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
		{
			pView->SetStepsLabelFont(plfFont, nFlags);
			continue;
		}
	}
}

BOOL CTCProcedureFlowchartTabCtrl::GetStepsLabelFont(LOGFONT *plfFont) CONST
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) ? pView->GetStepsLabelFont(plfFont) : FALSE);
}

VOID CTCProcedureFlowchartTabCtrl::SetStepsLabelColor(COLORREF nColor, INT nFlags)
{
	INT  nTab;
	INT  nTabs;
	CTCProcedureFlowchartThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
		{
			pView->SetStepsLabelColor(nColor, nFlags);
			continue;
		}
	}
}

COLORREF CTCProcedureFlowchartTabCtrl::GetStepsLabelColor() CONST
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) ? pView->GetStepsLabelColor() : GetSysColor(COLOR_WINDOWTEXT));
}

VOID CTCProcedureFlowchartTabCtrl::SetBackgroundColor(COLORREF nColor, INT nFlags)
{
	INT  nTab;
	INT  nTabs;
	CTCProcedureFlowchartThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
		{
			pView->SetBackgroundColor(nColor, nFlags);
			continue;
		}
	}
}

COLORREF CTCProcedureFlowchartTabCtrl::GetBackgroundColor() CONST
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) ? pView->GetBackgroundColor() : GetSysColor(COLOR_WINDOW));
}

VOID CTCProcedureFlowchartTabCtrl::UpdateSteps()
{
	CTCProcedureFlowchartThreadView  *pView;

	if ((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL))
	{
		pView->UpdateAllSteps();
		return;
	}
}
VOID CTCProcedureFlowchartTabCtrl::UpdateSteps(LPCTSTR pszThread, CPtrArray &pSteps)
{
	INT  nTab;
	INT  nTabs;
	CString  szTab;
	CTCProcedureFlowchartThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(), pSteps.RemoveAll(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
		{
			for (pView->GetWindowText(szTab); szTab == pszThread; )
			{
				pView->UpdateAllSteps(pSteps);
				return;
			}
		}
	}
}

BOOL CTCProcedureFlowchartTabCtrl::UpdateUndoList(UINT nAction, CTCProcedureDocumentUndoItem *pItem, CONST CTCProcedureDocumentItem *pStep, CONST CTCProcedureDocumentItem *pOldStep)
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) ? pView->UpdateUndoList(nAction, pItem, pStep, pOldStep) : FALSE);
}

BOOL CTCProcedureFlowchartTabCtrl::GetPrintProperties(CStringArray &szThreads, CPtrArray &pThreadMetaDCs)
{
	INT  nTab;
	INT  nTabs;
	CString  szTab;
	CMetaFileDC  *pMetaDC;
	CTCProcedureFlowchartThreadView  *pView;
	CClientDC  cDC(NULL);

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(), szThreads.RemoveAll(), pThreadMetaDCs.RemoveAll(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
		{
			for (pView->GetWindowText(szTab); (pMetaDC = new CMetaFileDC); )
			{
				if (pMetaDC->CreateEnhanced(&cDC, (LPCTSTR)NULL, (LPCRECT)NULL, (LPCTSTR)NULL))
				{
					pMetaDC->SetAttribDC(cDC.GetSafeHdc());
					pView->GetPrintProperties(pMetaDC);
					pThreadMetaDCs.Add(pMetaDC);
					szThreads.Add(szTab);
					break;
				}
				delete pMetaDC;
				break;
			}
		}
	}
	return((nTabs == szThreads.GetSize()) ? TRUE : FALSE);
}

VOID CTCProcedureFlowchartTabCtrl::SetSelectedThreadID(UINT nThreadID)
{
	CTCProcedureFlowchartThreadView  *pView[2];

	if ((pView[0] = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(max(m_nIndex, 0))))
	{
		if ((pView[1] = (nThreadID < (UINT)GetItemCount()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nThreadID) : (CTCProcedureFlowchartThreadView *)NULL))
		{
			pView[0]->ShowWindow((pView[0] == pView[1]) ? SW_SHOW : SW_HIDE);
			pView[1]->ShowWindow(SW_SHOW);
			pView[1]->RedrawWindow();
			SetCurSel((m_nIndex = nThreadID));
		}
	}
	GetParentDisplay()->UpdateBars();
}

UINT CTCProcedureFlowchartTabCtrl::GetSelectedThreadID() CONST
{
	return((GetItemCount() > 0) ? m_nIndex : -1);
}

VOID CTCProcedureFlowchartTabCtrl::SetSelectedStepID(UINT nStepID)
{
	CTCProcedureFlowchartThreadView  *pView;

	if ((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) pView->SetSelectedStepID(nStepID);
}

UINT CTCProcedureFlowchartTabCtrl::GetSelectedStepID() CONST
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) ? pView->GetSelectedStepID() : (UINT)-1);
}

BOOL CTCProcedureFlowchartTabCtrl::IsSelected(CView *pThreadView) CONST
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL) && pView == (CView *)pThreadView) ? TRUE : FALSE);
}

VOID CTCProcedureFlowchartTabCtrl::DoUndo()
{
	CTCProcedureFlowchartThreadView  *pView;

	if ((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) pView->DoUndo();
}

BOOL CTCProcedureFlowchartTabCtrl::CanUndo() CONST
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) ? pView->CanUndo() : FALSE);
}

VOID CTCProcedureFlowchartTabCtrl::DoRedo()
{
	CTCProcedureFlowchartThreadView  *pView;

	if ((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) pView->DoRedo();
}

BOOL CTCProcedureFlowchartTabCtrl::CanRedo() CONST
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) ? pView->CanRedo() : FALSE);
}

VOID CTCProcedureFlowchartTabCtrl::DoFindStep()
{
	CTCProcedureFlowchartThreadView  *pView;

	if ((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) pView->DoFindStep();
}

BOOL CTCProcedureFlowchartTabCtrl::CanFindStep() CONST
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) ? pView->CanFindStep() : FALSE);
}

VOID CTCProcedureFlowchartTabCtrl::DoCutStep()
{
	CTCProcedureFlowchartThreadView  *pView;

	if ((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) pView->DoCutStep();
}

BOOL CTCProcedureFlowchartTabCtrl::CanCutStep() CONST
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) ? pView->CanCutStep() : FALSE);
}

VOID CTCProcedureFlowchartTabCtrl::DoCopyStep()
{
	CTCProcedureFlowchartThreadView  *pView;

	if ((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) pView->DoCopyStep();
}

BOOL CTCProcedureFlowchartTabCtrl::CanCopyStep() CONST
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) ? pView->CanCopyStep() : FALSE);
}

VOID CTCProcedureFlowchartTabCtrl::DoPasteStep()
{
	CTCProcedureFlowchartThreadView  *pView;

	if ((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) pView->DoPasteStep();
}

BOOL CTCProcedureFlowchartTabCtrl::CanPasteStep() CONST
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) ? pView->CanPasteStep() : FALSE);
}

VOID CTCProcedureFlowchartTabCtrl::DoDeleteStep()
{
	CTCProcedureFlowchartThreadView  *pView;

	if ((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) pView->DoDeleteStep();
}

BOOL CTCProcedureFlowchartTabCtrl::CanDeleteStep() CONST
{
	CTCProcedureFlowchartThreadView  *pView;

	return(((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) ? pView->CanDeleteStep() : FALSE);
}

VOID CTCProcedureFlowchartTabCtrl::UnSelectAllSteps()
{
	CTCProcedureFlowchartThreadView  *pView;

	if ((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL)) pView->UnSelectAllSteps();
}

VOID CTCProcedureFlowchartTabCtrl::SetClipboardFormat(UINT nFormat)
{
	m_nClipboardFormat = nFormat;
}

UINT CTCProcedureFlowchartTabCtrl::GetClipboardFormat() CONST
{
	return m_nClipboardFormat;
}

CSize CTCProcedureFlowchartTabCtrl::GetMargins() CONST
{
	return m_sizeTabMargins;
}

BOOL CTCProcedureFlowchartTabCtrl::HasImage() CONST
{
	INT  nTab;
	INT  nTabs;
	CTCProcedureFlowchartThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
		{
			if (pView->HasImage()) break;
			continue;
		}
	}
	return((nTab < nTabs) ? TRUE : FALSE);
}

BOOL CTCProcedureFlowchartTabCtrl::IsModified() CONST
{
	INT  nTab;
	INT  nTabs;
	CTCProcedureFlowchartThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
		{
			if (pView->IsModified()) break;
			continue;
		}
	}
	return((nTab < nTabs) ? TRUE : FALSE);
}

BOOL CTCProcedureFlowchartTabCtrl::Check(BOOL bModified) CONST
{
	INT  nTab;
	INT  nTabs;
	CTCProcedureFlowchartThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
		{
			if (!pView->Check(bModified)) break;
			continue;
		}
	}
	return((nTab == nTabs) ? (!bModified || IsModified()) : FALSE);
}

CTCProcedureFlowchartView *CTCProcedureFlowchartTabCtrl::GetParent() CONST
{
	return((CTCProcedureFlowchartView *)CTabCtrl::GetParent());
}

CTCProcedureWnd *CTCProcedureFlowchartTabCtrl::GetParentDisplay() CONST
{
	return GetParent()->GetParent()->GetParent();
}

BEGIN_MESSAGE_MAP(CTCProcedureFlowchartTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTCProcedureFlowchartTabCtrl)
	ON_WM_CREATE()
	ON_WM_ERASEBKGND()
	ON_WM_PAINT()
	ON_WM_KEYDOWN()
	ON_WM_DESTROY()
	ON_NOTIFY_REFLECT(TCN_SELCHANGE, OnSelchange)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFlowchartTabCtrl message handlers

int CTCProcedureFlowchartTabCtrl::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	CFontTools  cFontTools(&m_cTabFont);

	if (CTabCtrl::OnCreate(lpCreateStruct) != -1)
	{
		SetClipboardFormat(RegisterClipboardFormat(STRING(IDS_TCPROCEDURE_FLOWCHART_CLIPBOARDFORMAT)));
		SetFont(&m_cTabFont);
		return 0;
	}
	return -1;
}

BOOL CTCProcedureFlowchartTabCtrl::OnEraseBkgnd(CDC *pDC)
{
	INT  nTab;
	INT  nTabs;
	CRect  rView[3];
	CTCProcedureFlowchartThreadView  *pView;

	GetClientRect(rView[0]);
	AdjustRect(FALSE, rView[0]);
	rView[0].DeflateRect(GetSystemMetrics(SM_CXEDGE), GetSystemMetrics(SM_CYEDGE));
	pDC->DrawEdge((rView[1] = rView[0]), EDGE_SUNKEN, BF_ADJUST | BF_RECT);
	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
		{
			for (pView->GetWindowRect(rView[2]), ScreenToClient(rView[2]); rView[1] != rView[2]; )
			{
				pView->MoveWindow(rView[1]);
				InvalidateRect(rView[0]);
				break;
			}
			pDC->ExcludeClipRect(rView[1]);
		}
	}
	pDC->ExcludeClipRect(rView[0].left, rView[0].top, rView[1].left, rView[0].bottom);
	pDC->ExcludeClipRect(rView[0].left, rView[0].top, rView[0].right, rView[1].top);
	pDC->ExcludeClipRect(rView[1].right, rView[0].top, rView[0].right, rView[0].bottom);
	pDC->ExcludeClipRect(rView[0].left, rView[1].bottom, rView[0].right, rView[0].bottom);
	return CTabCtrl::OnEraseBkgnd(pDC);
}

void CTCProcedureFlowchartTabCtrl::OnPaint()
{
	CDC  *pDC;
	CRect  rView[2];

	for (GetClientRect(rView[0]), AdjustRect(FALSE, rView[0]), rView[0].DeflateRect(GetSystemMetrics(SM_CXEDGE), GetSystemMetrics(SM_CYEDGE)); (pDC = GetDC()); )
	{
		pDC->DrawEdge((rView[1] = rView[0]), EDGE_SUNKEN, BF_ADJUST | BF_RECT);
		ValidateRect(CRect(rView[0].left, rView[0].top, rView[1].left, rView[0].bottom));
		ValidateRect(CRect(rView[0].left, rView[0].top, rView[0].right, rView[1].top));
		ValidateRect(CRect(rView[1].right, rView[0].top, rView[0].right, rView[0].bottom));
		ValidateRect(CRect(rView[0].left, rView[1].bottom, rView[0].right, rView[0].bottom));
		ReleaseDC(pDC);
		break;
	}
	CTabCtrl::OnPaint();
}

void CTCProcedureFlowchartTabCtrl::OnSelchange(NMHDR *pNotifyStruct, LRESULT *pResult)
{
	INT  nTab;
	INT  nTabs;
	CTCProcedureFlowchartThreadView  *pView[2];

	if ((pView[0] = ((m_nIndex = TabCtrl_GetCurSel(GetSafeHwnd())) >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL) && !pView[0]->IsWindowVisible())
	{
		for (nTab = 0, nTabs = (INT)m_pViews.GetSize(), pView[0]->ShowWindow(SW_SHOW); nTab < nTabs; nTab++)
		{
			if ((pView[1] = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
			{
				if (pView[0] != pView[1] && pView[1]->IsWindowVisible())
				{
					pView[1]->ShowWindow(SW_HIDE);
					*pResult = TRUE;
					break;
				}
			}
		}
		pView[0]->UpdateAllSteps();
	}
}

void CTCProcedureFlowchartTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CTCProcedureFlowchartThreadView  *pView;

	if (nChar == VK_DOWN)
	{
		if ((pView = (m_nIndex >= 0 && m_nIndex < m_pViews.GetSize()) ? (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(m_nIndex) : (CTCProcedureFlowchartThreadView *)NULL))
		{
			pView->SetFocus();
			return;
		}
	}
	if (nChar == VK_UP)
	{
		GetParent()->SetFocus();
		return;
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}

void CTCProcedureFlowchartTabCtrl::OnDestroy()
{
	INT  nTab;
	INT  nTabs;
	CTCProcedureFlowchartThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedureFlowchartThreadView *)m_pViews.GetAt(nTab)))
		{
			pView->DestroyWindow();
			continue;
		}
	}
	m_cTabFont.DeleteObject();
	CTabCtrl::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFlowchartView

IMPLEMENT_DYNCREATE(CTCProcedureFlowchartView, CView)

CTCProcedureFlowchartView::CTCProcedureFlowchartView() : CView()
{
	return;
}

BOOL CTCProcedureFlowchartView::SetFlowcharts(CONST CDatabaseTCProcedure *pDatabaseTCProcedure, INT nFlags)
{
	return m_wndTabCtrl.SetFlowcharts(pDatabaseTCProcedure, nFlags);
}

BOOL CTCProcedureFlowchartView::GetFlowcharts(CDatabaseTCProcedure *pDatabaseTCProcedure, INT nFlags) CONST
{
	return m_wndTabCtrl.GetFlowcharts(pDatabaseTCProcedure, nFlags);
}

BOOL CTCProcedureFlowchartView::SetBreakpoints(LPCTSTR pszThread, CONST CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints)
{
	return m_wndTabCtrl.SetBreakpoints(pszThread, pDatabaseTCProcedureThreadBreakpoints);
}

INT CTCProcedureFlowchartView::GetBreakpoints(LPCTSTR pszThread, CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints) CONST
{
	return m_wndTabCtrl.GetBreakpoints(pszThread, pDatabaseTCProcedureThreadBreakpoints);
}

INT CTCProcedureFlowchartView::EnumFlowchartViews(CStringArray &szThreads, CPtrArray &pViews) CONST
{
	return m_wndTabCtrl.EnumFlowchartViews(szThreads, pViews);
}

INT CTCProcedureFlowchartView::EnumSynchronizationObjects(CStringArray &szObjects) CONST
{
	return m_wndTabCtrl.EnumSynchronizationObjects(szObjects);
}

BOOL CTCProcedureFlowchartView::SetActiveStep(CONST CTCProcedureDocumentItem *pStep)
{
	return m_wndTabCtrl.SetActiveStep(pStep);
}

CTCProcedureDocumentItem *CTCProcedureFlowchartView::GetActiveStep(BOOL bAll) CONST
{
	return m_wndTabCtrl.GetActiveStep(bAll);
}

INT CTCProcedureFlowchartView::GetTotalSteps() CONST
{
	return m_wndTabCtrl.GetTotalSteps();
}

VOID CTCProcedureFlowchartView::SetStepsLabelFont(CONST LOGFONT *plfFont, INT nFlags)
{
	m_wndTabCtrl.SetStepsLabelFont(plfFont, nFlags);
}

BOOL CTCProcedureFlowchartView::GetStepsLabelFont(LOGFONT *plfFont) CONST
{
	return m_wndTabCtrl.GetStepsLabelFont(plfFont);
}

VOID CTCProcedureFlowchartView::SetStepsLabelColor(COLORREF nColor, INT nFlags)
{
	m_wndTabCtrl.SetStepsLabelColor(nColor, nFlags);
}

COLORREF CTCProcedureFlowchartView::GetStepsLabelColor() CONST
{
	return m_wndTabCtrl.GetStepsLabelColor();
}

VOID CTCProcedureFlowchartView::SetBackgroundColor(COLORREF nColor, INT nFlags)
{
	m_wndTabCtrl.SetBackgroundColor(nColor, nFlags);
}

COLORREF CTCProcedureFlowchartView::GetBackgroundColor() CONST
{
	return m_wndTabCtrl.GetBackgroundColor();
}

VOID CTCProcedureFlowchartView::UpdateSteps()
{
	m_wndTabCtrl.UpdateSteps();
}
VOID CTCProcedureFlowchartView::UpdateSteps(LPCTSTR pszThread, CPtrArray &pSteps)
{
	m_wndTabCtrl.UpdateSteps(pszThread, pSteps);
}

BOOL CTCProcedureFlowchartView::UpdateUndoList(UINT nAction, CTCProcedureDocumentUndoItem *pItem, CONST CTCProcedureDocumentItem *pStep, CONST CTCProcedureDocumentItem *pOldStep)
{
	return m_wndTabCtrl.UpdateUndoList(nAction, pItem, pStep, pOldStep);
}

BOOL CTCProcedureFlowchartView::GetPrintProperties(CStringArray &szThreads, CPtrArray &pThreadMetaDCs)
{
	return m_wndTabCtrl.GetPrintProperties(szThreads, pThreadMetaDCs);
}

VOID CTCProcedureFlowchartView::SetSelectedThreadID(UINT nThreadID)
{
	m_wndTabCtrl.SetSelectedThreadID(nThreadID);
}

UINT CTCProcedureFlowchartView::GetSelectedThreadID() CONST
{
	return m_wndTabCtrl.GetSelectedThreadID();
}

VOID CTCProcedureFlowchartView::SetSelectedStepID(UINT nStepID)
{
	m_wndTabCtrl.SetSelectedStepID(nStepID);
}

UINT CTCProcedureFlowchartView::GetSelectedStepID() CONST
{
	return m_wndTabCtrl.GetSelectedStepID();
}

VOID CTCProcedureFlowchartView::DoUndo()
{
	m_wndTabCtrl.DoUndo();
}

BOOL CTCProcedureFlowchartView::CanUndo() CONST
{
	return m_wndTabCtrl.CanUndo();
}

VOID CTCProcedureFlowchartView::DoRedo()
{
	m_wndTabCtrl.DoRedo();
}

BOOL CTCProcedureFlowchartView::CanRedo() CONST
{
	return m_wndTabCtrl.CanRedo();
}

VOID CTCProcedureFlowchartView::DoFindStep()
{
	m_wndTabCtrl.DoFindStep();
}

BOOL CTCProcedureFlowchartView::CanFindStep() CONST
{
	return m_wndTabCtrl.CanFindStep();
}

VOID CTCProcedureFlowchartView::DoCutStep()
{
	m_wndTabCtrl.DoCutStep();
}

BOOL CTCProcedureFlowchartView::CanCutStep() CONST
{
	return m_wndTabCtrl.CanCutStep();
}

VOID CTCProcedureFlowchartView::DoCopyStep()
{
	m_wndTabCtrl.DoCopyStep();
}

BOOL CTCProcedureFlowchartView::CanCopyStep() CONST
{
	return m_wndTabCtrl.CanCopyStep();
}

VOID CTCProcedureFlowchartView::DoPasteStep()
{
	m_wndTabCtrl.DoPasteStep();
}

BOOL CTCProcedureFlowchartView::CanPasteStep() CONST
{
	return m_wndTabCtrl.CanPasteStep();
}

VOID CTCProcedureFlowchartView::DoDeleteStep()
{
	m_wndTabCtrl.DoDeleteStep();
}

BOOL CTCProcedureFlowchartView::CanDeleteStep() CONST
{
	return m_wndTabCtrl.CanDeleteStep();
}

VOID CTCProcedureFlowchartView::UnSelectAllSteps()
{
	m_wndTabCtrl.UnSelectAllSteps();
}

BOOL CTCProcedureFlowchartView::HasImage() CONST
{
	return m_wndTabCtrl.HasImage();
}

BOOL CTCProcedureFlowchartView::IsModified() CONST
{
	return m_wndTabCtrl.IsModified();
}

BOOL CTCProcedureFlowchartView::Check(BOOL bModified) CONST
{
	return m_wndTabCtrl.Check(bModified);
}

CTCProcedureSplitterWnd *CTCProcedureFlowchartView::GetParent() CONST
{
	return((CTCProcedureSplitterWnd *)CView::GetParent());
}

BEGIN_MESSAGE_MAP(CTCProcedureFlowchartView, CView)
	//{{AFX_MSG_MAP(CTCProcedureFlowchartView)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFlowchartView drawing

void CTCProcedureFlowchartView::OnDraw(CDC *pDC)
{
	return;
}

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureFlowchartView message handlers

int CTCProcedureFlowchartView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	return((CView::OnCreate(lpCreateStruct) != -1 && m_wndTabCtrl.Create(this, CRect(0, 0, lpCreateStruct->cx, lpCreateStruct->cy))) ? 0 : -1);
}

void CTCProcedureFlowchartView::OnSize(UINT nType, int cx, int cy)
{
	m_wndTabCtrl.MoveWindow(0, 0, cx, cy);
	CView::OnSize(nType, cx, cy);
}

BOOL CTCProcedureFlowchartView::OnEraseBkgnd(CDC *pDC)
{
	CRect  rView;
	CRect  rPage[3];

	for (GetClientRect(rView), m_wndTabCtrl.GetItemRect(0, rPage[0]), m_wndTabCtrl.GetItemRect(m_wndTabCtrl.GetCurSel(), rPage[1]), m_wndTabCtrl.GetItemRect(m_wndTabCtrl.GetItemCount() - 1, rPage[2]), m_wndTabCtrl.ClientToScreen(rPage[0]), m_wndTabCtrl.ClientToScreen(rPage[1]), m_wndTabCtrl.ClientToScreen(rPage[2]), ScreenToClient(rPage[0]), ScreenToClient(rPage[1]), ScreenToClient(rPage[2]), rPage[0].InflateRect((!m_wndTabCtrl.GetCurSel()) ? m_wndTabCtrl.GetMargins().cx : 0, 0, 0, 0), rPage[1].InflateRect(0, m_wndTabCtrl.GetMargins().cy); m_wndTabCtrl.GetCurSel() != m_wndTabCtrl.GetItemCount() - 1; )
	{
		rPage[2].DeflateRect(0, 0, m_wndTabCtrl.GetMargins().cx, 0);
		break;
	}
	rView.SetRect(rView.left, rView.top, rView.right, rPage[0].bottom);
	pDC->ExcludeClipRect(rPage[0].left, rPage[0].top, rPage[2].right, (rView.Width() < rPage[2].right - rPage[0].left) ? (rPage[0].top + GetSystemMetrics(SM_CYHSCROLL)) : rPage[2].bottom);
	pDC->ExcludeClipRect(rPage[1].left, rPage[1].top, rPage[1].right, (rView.Width() < rPage[2].right - rPage[0].left) ? (rPage[0].top + GetSystemMetrics(SM_CYHSCROLL)) : rPage[1].bottom);
	pDC->FillSolidRect(rView, GetSysColor(COLOR_BTNFACE));
	return TRUE;
}

void CTCProcedureFlowchartView::OnSetFocus(CWnd *pOldWnd)
{
	if (IsChild(pOldWnd))
	{
		GetParent()->SetFocus();
		return;
	}
	if (IsWindow(pOldWnd->GetSafeHwnd()) && pOldWnd->IsChild(this))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CView::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesOverviewDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesOverviewDialog, CLocaleDialog)

CTCProcedurePropertiesOverviewDialog::CTCProcedurePropertiesOverviewDialog(CWnd *pParentWnd) : CLocaleDialog(CTCProcedurePropertiesOverviewDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesOverviewDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCProcedurePropertiesOverviewDialog::SetInfo(CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	if (m_cDatabaseTCProcedure[0].GetName() != pDatabaseTCProcedure->GetName() || m_cDatabaseTCProcedure[0].GetDescription() != pDatabaseTCProcedure->GetDescription() || m_cDatabaseTCProcedure[0].GetComments() != pDatabaseTCProcedure->GetComments() || m_cDatabaseTCProcedure[0].GetAuthor() != pDatabaseTCProcedure->GetAuthor() || m_cDatabaseTCProcedure[0].GetSubSystem() != pDatabaseTCProcedure->GetSubSystem() || m_cDatabaseTCProcedure[0].GetVerificationStatus() != pDatabaseTCProcedure->GetVerificationStatus() || m_cDatabaseTCProcedure[0].GetCreationDate() != pDatabaseTCProcedure->GetCreationDate() || m_cDatabaseTCProcedure[0].GetModificationDate() != pDatabaseTCProcedure->GetModificationDate() || (m_cDatabaseTCProcedure[0].GetAttributes() & (TCPROCEDURE_EXECUTIONMODE_AUTOMATIC | TCPROCEDURE_EXECUTIONMODE_SINGLESTEP | TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS | TCPROCEDURE_EXECUTIONMODE_COMMANDS | TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE)) != (pDatabaseTCProcedure->GetAttributes() & (TCPROCEDURE_EXECUTIONMODE_AUTOMATIC | TCPROCEDURE_EXECUTIONMODE_SINGLESTEP | TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS | TCPROCEDURE_EXECUTIONMODE_COMMANDS | TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE)))
	{
		m_cDatabaseTCProcedure[0].SetName(pDatabaseTCProcedure->GetName());
		m_cDatabaseTCProcedure[0].SetDescription(pDatabaseTCProcedure->GetDescription());
		m_cDatabaseTCProcedure[0].SetComments(pDatabaseTCProcedure->GetComments());
		m_cDatabaseTCProcedure[0].SetAuthor(pDatabaseTCProcedure->GetAuthor());
		m_cDatabaseTCProcedure[0].SetSubSystem(pDatabaseTCProcedure->GetSubSystem());
		m_cDatabaseTCProcedure[0].SetVerificationStatus(pDatabaseTCProcedure->GetVerificationStatus());
		m_cDatabaseTCProcedure[0].SetCreationDate(pDatabaseTCProcedure->GetCreationDate());
		m_cDatabaseTCProcedure[0].SetModificationDate(pDatabaseTCProcedure->GetModificationDate());
		m_cDatabaseTCProcedure[0].SetAttributes(pDatabaseTCProcedure->GetAttributes() & (TCPROCEDURE_EXECUTIONMODE_AUTOMATIC | TCPROCEDURE_EXECUTIONMODE_SINGLESTEP | TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS | TCPROCEDURE_EXECUTIONMODE_COMMANDS | TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE));
		ShowInfo();
	}
	if (m_bUpdate)
	{
		m_cDatabaseTCProcedure[1].SetName(pDatabaseTCProcedure->GetName());
		m_cDatabaseTCProcedure[1].SetDescription(pDatabaseTCProcedure->GetDescription());
		m_cDatabaseTCProcedure[1].SetComments(pDatabaseTCProcedure->GetComments());
		m_cDatabaseTCProcedure[1].SetAuthor(pDatabaseTCProcedure->GetAuthor());
		m_cDatabaseTCProcedure[1].SetSubSystem(pDatabaseTCProcedure->GetSubSystem());
		m_cDatabaseTCProcedure[1].SetVerificationStatus(pDatabaseTCProcedure->GetVerificationStatus());
		m_cDatabaseTCProcedure[1].SetCreationDate(pDatabaseTCProcedure->GetCreationDate());
		m_cDatabaseTCProcedure[1].SetModificationDate(pDatabaseTCProcedure->GetModificationDate());
		m_cDatabaseTCProcedure[1].SetAttributes(pDatabaseTCProcedure->GetAttributes() & (TCPROCEDURE_EXECUTIONMODE_AUTOMATIC | TCPROCEDURE_EXECUTIONMODE_SINGLESTEP | TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS | TCPROCEDURE_EXECUTIONMODE_COMMANDS | TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE));
	}
	return TRUE;
}

BOOL CTCProcedurePropertiesOverviewDialog::GetInfo(CDatabaseTCProcedure *pDatabaseTCProcedure) CONST
{
	pDatabaseTCProcedure->SetName(m_cDatabaseTCProcedure[0].GetName());
	pDatabaseTCProcedure->SetDescription(m_cDatabaseTCProcedure[0].GetDescription());
	pDatabaseTCProcedure->SetComments(m_cDatabaseTCProcedure[0].GetComments());
	pDatabaseTCProcedure->SetAuthor(m_cDatabaseTCProcedure[0].GetAuthor());
	pDatabaseTCProcedure->SetSubSystem(m_cDatabaseTCProcedure[0].GetSubSystem());
	pDatabaseTCProcedure->SetVerificationStatus(m_cDatabaseTCProcedure[0].GetVerificationStatus());
	pDatabaseTCProcedure->SetCreationDate(m_cDatabaseTCProcedure[0].GetCreationDate());
	pDatabaseTCProcedure->SetModificationDate(m_cDatabaseTCProcedure[0].GetModificationDate());
	pDatabaseTCProcedure->SetAttributes((pDatabaseTCProcedure->GetAttributes() & ~(TCPROCEDURE_EXECUTIONMODE_AUTOMATIC | TCPROCEDURE_EXECUTIONMODE_SINGLESTEP | TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS | TCPROCEDURE_EXECUTIONMODE_COMMANDS | TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE)) | m_cDatabaseTCProcedure[0].GetAttributes());
	return TRUE;
}

VOID CTCProcedurePropertiesOverviewDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_NAME, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_DESCRIPTION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_COMMENTS, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_AUTHOR, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_CREATIONDATETIME, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_MODIFICATIONDATETIME, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_DESTINATIONSUBSYSTEM, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_EXECUTIONMODE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_VERIFICATIONSTATUS, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_NOGRAPHICALINTERFACE, bCheck);
}

CTCProcedurePropertiesThreadView *CTCProcedurePropertiesOverviewDialog::GetParent() CONST
{
	return((CTCProcedurePropertiesThreadView *)CLocaleDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesOverviewDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParent()->GetParent()->GetParent()->GetParent();
}

BOOL CTCProcedurePropertiesOverviewDialog::EnumExecutionModes()
{
	for (m_bUpdate = TRUE; SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_EXECUTIONMODE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDURE_EXECUTIONMODE_AUTOMATIC)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_EXECUTIONMODE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDURE_EXECUTIONMODE_SINGLESTEP)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_EXECUTIONMODE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_EXECUTIONMODE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDURE_EXECUTIONMODE_COMMANDS)) >= 0; ) return TRUE;
	return FALSE;
}

VOID CTCProcedurePropertiesOverviewDialog::ShowInfo()
{
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_NAME)->SetWindowText(m_cDatabaseTCProcedure[0].GetName());
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_DESCRIPTION)->SetWindowText(m_cDatabaseTCProcedure[0].GetDescription());
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_COMMENTS)->SetWindowText(m_cDatabaseTCProcedure[0].GetComments());
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_AUTHOR)->SetWindowText(m_cDatabaseTCProcedure[0].GetAuthor());
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_DESTINATIONSUBSYSTEM)->SetWindowText(m_cDatabaseTCProcedure[0].GetSubSystem());
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_VERIFICATIONSTATUS)->SetWindowText(m_cDatabaseTCProcedure[0].GetVerificationStatus());
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_NOGRAPHICALINTERFACE, (m_cDatabaseTCProcedure[0].GetAttributes() & TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE) ? TRUE : FALSE);
	Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_CREATIONDATETIME), (m_cDatabaseTCProcedure[0].GetCreationDate() > 0) ? m_cDatabaseTCProcedure[0].GetCreationDate() : 0);
	Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_MODIFICATIONDATETIME), (m_cDatabaseTCProcedure[0].GetModificationDate() > 0) ? m_cDatabaseTCProcedure[0].GetModificationDate() : 0);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_EXECUTIONMODE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_EXECUTIONMODE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((m_cDatabaseTCProcedure[0].GetAttributes() & TCPROCEDURE_EXECUTIONMODE_AUTOMATIC) ? STRING(IDS_TCPROCEDURE_EXECUTIONMODE_AUTOMATIC) : ((m_cDatabaseTCProcedure[0].GetAttributes() & TCPROCEDURE_EXECUTIONMODE_SINGLESTEP) ? STRING(IDS_TCPROCEDURE_EXECUTIONMODE_SINGLESTEP) : ((m_cDatabaseTCProcedure[0].GetAttributes() & TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS) ? STRING(IDS_TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS) : ((m_cDatabaseTCProcedure[0].GetAttributes() & TCPROCEDURE_EXECUTIONMODE_COMMANDS) ? STRING(IDS_TCPROCEDURE_EXECUTIONMODE_COMMANDS) : EMPTYSTRING))))));
}

BOOL CTCProcedurePropertiesOverviewDialog::IsModified() CONST
{
	return((m_cDatabaseTCProcedure[0].GetName() != m_cDatabaseTCProcedure[1].GetName() || m_cDatabaseTCProcedure[0].GetDescription() != m_cDatabaseTCProcedure[1].GetDescription() || m_cDatabaseTCProcedure[0].GetComments() != m_cDatabaseTCProcedure[1].GetComments() || m_cDatabaseTCProcedure[0].GetAuthor() != m_cDatabaseTCProcedure[1].GetAuthor() || m_cDatabaseTCProcedure[0].GetSubSystem() != m_cDatabaseTCProcedure[1].GetSubSystem() || m_cDatabaseTCProcedure[0].GetVerificationStatus() != m_cDatabaseTCProcedure[1].GetVerificationStatus() || m_cDatabaseTCProcedure[0].GetCreationDate() != m_cDatabaseTCProcedure[1].GetCreationDate() || m_cDatabaseTCProcedure[0].GetModificationDate() != m_cDatabaseTCProcedure[1].GetModificationDate() || (m_cDatabaseTCProcedure[0].GetAttributes() & (TCPROCEDURE_EXECUTIONMODE_AUTOMATIC | TCPROCEDURE_EXECUTIONMODE_SINGLESTEP | TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS | TCPROCEDURE_EXECUTIONMODE_COMMANDS | TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE)) != (m_cDatabaseTCProcedure[1].GetAttributes() & (TCPROCEDURE_EXECUTIONMODE_AUTOMATIC | TCPROCEDURE_EXECUTIONMODE_SINGLESTEP | TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS | TCPROCEDURE_EXECUTIONMODE_COMMANDS | TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE))) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesOverviewDialog::Check(BOOL bModified) CONST
{
	CTimeKey  tTime[2];

	return((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_NAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_DESCRIPTION)->GetWindowTextLength() > 0 && (((tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_CREATIONDATETIME))) <= 0 && (tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_MODIFICATIONDATETIME))) <= 0) || (tTime[0] > 0 && tTime[0] <= tTime[1]))) ? (!bModified || IsModified()) : FALSE);
}

void CTCProcedurePropertiesOverviewDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesOverviewDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesOverviewDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesOverviewDialog)
	ON_WM_TIMER()
	ON_WM_HELPINFO()
	ON_MESSAGE(DM_GETDEFID, OnGetDefID)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_NOGRAPHICALINTERFACE, OnNoGraphicalInterface)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_NAME, OnEditchangeName)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_DESCRIPTION, OnEditchangeDescription)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_COMMENTS, OnEditchangeComments)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_AUTHOR, OnEditchangeAuthor)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_DESTINATIONSUBSYSTEM, OnEditchangeSubSystem)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_VERIFICATIONSTATUS, OnEditchangeVerificationStatus)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_EXECUTIONMODE, OnSelchangeExecutionMode)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_CREATIONDATETIME, OnSpinchangeCreationDate)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_MODIFICATIONDATETIME, OnSpinchangeModificationDate)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesOverviewDialog message handlers

BOOL CTCProcedurePropertiesOverviewDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_NAME, EM_LIMITTEXT, GetDatabase()->GetTCProcedureNameLength());
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_DESCRIPTION, EM_LIMITTEXT, GetDatabase()->GetTCProcedureDescriptionLength());
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_COMMENTS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_COMMENTS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_AUTHOR_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_AUTHOR)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_CREATIONDATETIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_CREATIONDATETIME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_MODIFICATIONDATETIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_MODIFICATIONDATETIME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_DESTINATIONSUBSYSTEM_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_DESTINATIONSUBSYSTEM)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_EXECUTIONMODE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_EXECUTIONMODE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_VERIFICATIONSTATUS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_VERIFICATIONSTATUS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_NOGRAPHICALINTERFACE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_HELP)->EnableWindow();
	EnumExecutionModes();
	AdjustToPrivileges();
	ShowInfo();
	return TRUE;
}

LRESULT CTCProcedurePropertiesOverviewDialog::OnGetDefID(WPARAM wParam, LPARAM lParam)
{
	return MAKELONG(0, DC_HASDEFID);
}

BOOL CTCProcedurePropertiesOverviewDialog::OnCommand(WPARAM wParam, LPARAM lParam)
{
	if (wParam == IDCANCEL) return TRUE;
	return CLocaleDialog::OnCommand(wParam, lParam);
}

void CTCProcedurePropertiesOverviewDialog::OnTimer(UINT_PTR nEventID)
{
	if (nEventID == TCPROCEDUREPROPERTIESOVERVIEW_UPDATE_TIMERID)
	{
		for (KillTimer(TCPROCEDUREPROPERTIESOVERVIEW_UPDATE_TIMERID), m_bUpdate = FALSE; TRUE; )
		{
			GetParentDisplay()->EnableGraphicalInterface(!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_NOGRAPHICALINTERFACE));
			m_bUpdate = TRUE;
			break;
		}
	}
	CLocaleDialog::OnTimer(nEventID);
}

void CTCProcedurePropertiesOverviewDialog::OnNoGraphicalInterface()
{
	UINT  nAttributes;

	SetTimer(TCPROCEDUREPROPERTIESOVERVIEW_UPDATE_TIMERID, TCPROCEDUREPROPERTIESOVERVIEW_UPDATE_TIMEOUT, NULL);
	nAttributes = (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_NOGRAPHICALINTERFACE)) ? (m_cDatabaseTCProcedure[0].GetAttributes() | TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE) : (m_cDatabaseTCProcedure[0].GetAttributes() & ~TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE);
	m_cDatabaseTCProcedure[0].SetAttributes(nAttributes);
}

void CTCProcedurePropertiesOverviewDialog::OnEditchangeName()
{
	CString  szName;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_NAME)->GetWindowText(szName);
	m_cDatabaseTCProcedure[0].SetName(szName);
}

void CTCProcedurePropertiesOverviewDialog::OnEditchangeDescription()
{
	CString  szDescription;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_DESCRIPTION)->GetWindowText(szDescription);
	m_cDatabaseTCProcedure[0].SetDescription(szDescription);
}

void CTCProcedurePropertiesOverviewDialog::OnEditchangeComments()
{
	CString  szComments;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_COMMENTS)->GetWindowText(szComments);
	m_cDatabaseTCProcedure[0].SetComments(szComments);
}

void CTCProcedurePropertiesOverviewDialog::OnEditchangeAuthor()
{
	CString  szAuthor;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_AUTHOR)->GetWindowText(szAuthor);
	m_cDatabaseTCProcedure[0].SetAuthor(szAuthor);
}

void CTCProcedurePropertiesOverviewDialog::OnEditchangeSubSystem()
{
	CString  szSubSystem;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_DESTINATIONSUBSYSTEM)->GetWindowText(szSubSystem);
	m_cDatabaseTCProcedure[0].SetSubSystem(szSubSystem);
}

void CTCProcedurePropertiesOverviewDialog::OnEditchangeVerificationStatus()
{
	CString  szVerificationStatus;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_VERIFICATIONSTATUS)->GetWindowText(szVerificationStatus);
	m_cDatabaseTCProcedure[0].SetVerificationStatus(szVerificationStatus);
}

void CTCProcedurePropertiesOverviewDialog::OnSelchangeExecutionMode()
{
	UINT  nAttributes;
	CString  szExecutionMode;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_EXECUTIONMODE)->GetWindowText(szExecutionMode);
	nAttributes = m_cDatabaseTCProcedure[0].GetAttributes() & TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE;
	nAttributes |= (szExecutionMode == STRING(IDS_TCPROCEDURE_EXECUTIONMODE_AUTOMATIC)) ? TCPROCEDURE_EXECUTIONMODE_AUTOMATIC : 0;
	nAttributes |= (szExecutionMode == STRING(IDS_TCPROCEDURE_EXECUTIONMODE_SINGLESTEP)) ? TCPROCEDURE_EXECUTIONMODE_SINGLESTEP : 0;
	nAttributes |= (szExecutionMode == STRING(IDS_TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS)) ? TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS : 0;
	nAttributes |= (szExecutionMode == STRING(IDS_TCPROCEDURE_EXECUTIONMODE_COMMANDS)) ? TCPROCEDURE_EXECUTIONMODE_COMMANDS : 0;
	m_cDatabaseTCProcedure[0].SetAttributes(nAttributes);
}

void CTCProcedurePropertiesOverviewDialog::OnSpinchangeCreationDate()
{
	CWnd  *pWnd;
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_CREATIONDATETIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_MODIFICATIONDATETIME)); (pWnd = GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_CREATIONDATETIME)) == CWnd::GetFocus() || pWnd->IsChild(CWnd::GetFocus()); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_MODIFICATIONDATETIME), (tTime[1] = (tTime[0] > 0 && tTime[1] > 0) ? max(tTime[0], tTime[1]) : 0));
		m_cDatabaseTCProcedure[0].SetModificationDate((tTime[1] > 0) ? tTime[1] : 0);
		break;
	}
	m_cDatabaseTCProcedure[0].SetCreationDate((tTime[0] > 0) ? tTime[0] : 0);
}

void CTCProcedurePropertiesOverviewDialog::OnSpinchangeModificationDate()
{
	CWnd  *pWnd;
	CTimeKey  tTime[2];

	for (tTime[0] = Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_CREATIONDATETIME)), tTime[1] = Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_MODIFICATIONDATETIME)); (pWnd = GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_MODIFICATIONDATETIME)) == CWnd::GetFocus() || pWnd->IsChild(CWnd::GetFocus()); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_OVERVIEW_CREATIONDATETIME), (tTime[0] = (tTime[0] > 0 && tTime[1] > 0) ? min(tTime[0], tTime[1]) : 0));
		m_cDatabaseTCProcedure[0].SetCreationDate((tTime[0] > 0) ? tTime[0] : 0);
		break;
	}
	m_cDatabaseTCProcedure[0].SetModificationDate((tTime[1] > 0) ? tTime[1] : 0);
}

BOOL CTCProcedurePropertiesOverviewDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESOVERVIEWDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesOverviewDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESOVERVIEWDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesArgumentsDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesArgumentsDialog, CLocaleDialog)

CTCProcedurePropertiesArgumentsDialog::CTCProcedurePropertiesArgumentsDialog(CWnd *pParentWnd) : CLocaleDialog(CTCProcedurePropertiesArgumentsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesArgumentsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCProcedurePropertiesArgumentsDialog::SetInfo(CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	BOOL  bNew;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;

	if (pDatabaseTCProcedure->GetArguments(pDatabaseTCProcedureArguments) >= 0)
	{
		if ((bNew = !m_pDatabaseTCProcedureArguments[0].Compare(&pDatabaseTCProcedureArguments)) && m_pDatabaseTCProcedureArguments[0].Copy(&pDatabaseTCProcedureArguments) && m_pDatabaseTCProcedureArguments[1].Copy(&pDatabaseTCProcedureArguments))
		{
			ShowInfo();
			return TRUE;
		}
		return((!bNew) ? m_pDatabaseTCProcedureArguments[1].Copy(&pDatabaseTCProcedureArguments) : FALSE);
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesArgumentsDialog::GetInfo(CDatabaseTCProcedure *pDatabaseTCProcedure) CONST
{
	return pDatabaseTCProcedure->SetArguments(m_pDatabaseTCProcedureArguments[0]);
}

VOID CTCProcedurePropertiesArgumentsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)), TRUE, FALSE);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DESCRIPTION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, bCheck, TRUE, FALSE);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, bCheck, TRUE, FALSE);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, bCheck, TRUE, FALSE);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, bCheck);
}

CTCProcedurePropertiesThreadView *CTCProcedurePropertiesArgumentsDialog::GetParent() CONST
{
	return((CTCProcedurePropertiesThreadView *)CLocaleDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesArgumentsDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParent()->GetParent()->GetParent()->GetParent();
}

BOOL CTCProcedurePropertiesArgumentsDialog::EnumParameters()
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;

	for (nParameter = 0, nParameters = (INT)GetDatabase()->GetTCParameters()->GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(nParameter)) != (CDatabaseTCParameter *)NULL)
		{
			szParameter.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETER_FORMAT), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)pDatabaseTCParameter->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)((pDatabaseTCParameter->GetDescription().IsEmpty()) ? (LPCTSTR)pDatabaseTCParameter->GetTag() : (LPCTSTR)szParameter));
		}
	}
	return((nParameter == nParameters) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesArgumentsDialog::EnumParameterTypes()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS)) >= 0) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesArgumentsDialog::EnumValueCodings()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_BITPATTERN)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_SIGNEDINTEGER)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_UNSIGNEDINTEGER)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_FLOATINGPOINT)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING)) >= 0) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesArgumentsDialog::EnumValueRadixes()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_BINARY)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_OCTAL)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_DECIMAL)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_HEXADECIMAL)) >= 0) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesArgumentsDialog::EnumCalibrationTables()
{
	INT  nTable[2];
	INT  nTables[2];
	CString  szType;
	CString  szTable;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE)->GetWindowText(szType);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_RESETCONTENT);
	for (nTable[0] = 0, nTables[0] = (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED) && szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL)) ? (INT)GetDatabase()->GetTCNumCalTables()->GetSize() : 0; nTable[0] < nTables[0]; nTable[0]++)
	{
		if ((pDatabaseTCNumCalTable = GetDatabase()->GetTCNumCalTables()->GetAt(nTable[0])))
		{
			szTable.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTABLE_FORMAT), (LPCTSTR)pDatabaseTCNumCalTable->GetName(), (LPCTSTR)pDatabaseTCNumCalTable->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)((pDatabaseTCNumCalTable->GetDescription().IsEmpty()) ? (LPCTSTR)pDatabaseTCNumCalTable->GetName() : (LPCTSTR)szTable));
		}
	}
	for (nTable[1] = 0, nTables[1] = (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED) && szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS)) ? (INT)GetDatabase()->GetTCTxtCalTables()->GetSize() : 0; nTable[1] < nTables[1]; nTable[1]++)
	{
		if ((pDatabaseTCTxtCalTable = GetDatabase()->GetTCTxtCalTables()->GetAt(nTable[1])))
		{
			szTable.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTABLE_FORMAT), (LPCTSTR)pDatabaseTCTxtCalTable->GetName(), (LPCTSTR)pDatabaseTCTxtCalTable->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)((pDatabaseTCTxtCalTable->GetDescription().IsEmpty()) ? (LPCTSTR)pDatabaseTCTxtCalTable->GetName() : (LPCTSTR)szTable));
		}
	}
	return(((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL) && nTables[0] == SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_GETCOUNT)) || (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS) && nTables[1] == SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_GETCOUNT))) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesArgumentsDialog::EnumDefaultValues()
{
	INT  nPoint;
	INT  nPoints;
	double  fX[2];
	CString  szType;
	CString  szTable;
	CString  szFormat;
	CString  szValue[2];
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE)->GetWindowText(szType);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE)->GetWindowText(szTable);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, CB_RESETCONTENT);
	szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTABLE_FORMAT), EMPTYSTRING, EMPTYSTRING);
	if ((pDatabaseTCTxtCalTable = (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS)) ? GetDatabase()->GetTCTxtCalTables()->GetAt(GetDatabase()->GetTCTxtCalTables()->Find((szTable = (szTable.Find(szFormat) >= 0) ? szTable.Left(szTable.Find(szFormat)) : szTable))) : (CDatabaseTCTxtCalTable *)NULL))
	{
		for (nPoint = 0, nPoints = (INT)pDatabaseTCTxtCalTable->GetSize(); nPoint < nPoints; nPoint++)
		{
			if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nPoint)))
			{
				for (szValue[0].Empty(); pDatabaseTCTxtCalPoint->GetRange(fX[0], fX[1], szValue[1]) && !pDatabaseTCTxtCalPoint->GetPoint(fX[0], szValue[1]); )
				{
					szValue[0].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERVALUE_RANGEFORMAT), (LPCTSTR)szValue[1], (LONGLONG)fX[0], (LONGLONG)fX[1]);
					break;
				}
				if (szValue[0].IsEmpty()) szValue[0].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERVALUE_POINTFORMAT), (LPCTSTR)szValue[1], (LONGLONG)fX[0]);
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[0]);
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[0]);
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[0]);
			}
		}
		return TRUE;
	}
	return FALSE;
}

VOID CTCProcedurePropertiesArgumentsDialog::ShowInfo()
{
	INT  nColumn;
	INT  nColumns;
	INT  nArgument;
	INT  nArguments;
	CString  szItem;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST, LVM_DELETEALLITEMS);
	for (nArgument = 0, nArguments = (INT)m_pDatabaseTCProcedureArguments[0].GetSize(); nArgument < nArguments; nArgument++)
	{
		if ((pDatabaseTCProcedureArgument = m_pDatabaseTCProcedureArguments[0].GetAt(nArgument)))
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (szItem.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME); )
				{
					szItem = pDatabaseTCProcedureArgument->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_DESCRIPTION); )
				{
					szItem = pDatabaseTCProcedureArgument->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE))
				{
					szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW) : EMPTYSTRING;
					szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL) : szItem;
					szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE); )
				{
					szItem = pDatabaseTCProcedureArgument->GetConstValueAsText();
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), nArgument, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), nArgument, nColumn, szItem);
			}
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), 0);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVE)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVE) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVEALL)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVEALL) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	ShowArgumentDetails();
}

VOID CTCProcedurePropertiesArgumentsDialog::ShowArgumentDetails()
{
	INT  nPoint;
	INT  nPoints;
	double  fX[2];
	CString  szName;
	CString  szTable;
	CString  szValue[2];
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	if ((pDatabaseTCProcedureArgument = GetArgument()))
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, CB_RESETCONTENT);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, CB_RESETCONTENT);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, CB_RESETCONTENT);
		if ((pDatabaseTCTxtCalTable = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTCTxtCalTables()->GetAt(GetDatabase()->GetTCTxtCalTables()->Find(pDatabaseTCProcedureArgument->GetCalTable())) : (CDatabaseTCTxtCalTable *)NULL))
		{
			for (nPoint = 0, nPoints = (INT)pDatabaseTCTxtCalTable->GetSize(); nPoint < nPoints; nPoint++)
			{
				if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nPoint)))
				{
					for (szValue[0].Empty(); pDatabaseTCTxtCalPoint->GetRange(fX[0], fX[1], szValue[1]) && !pDatabaseTCTxtCalPoint->GetPoint(fX[0], szValue[1]); )
					{
						szValue[0].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERVALUE_RANGEFORMAT), (LPCTSTR)szValue[1], (LONGLONG)fX[0], (LONGLONG)fX[1]);
						break;
					}
					if (szValue[0].IsEmpty()) szValue[0].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERVALUE_POINTFORMAT), (LPCTSTR)szValue[1], (LONGLONG)fX[0]);
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[0]);
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[0]);
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[0]);
				}
			}
		}
		if ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCProcedureArgument->GetTag()))))
		{
			szName.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETER_FORMAT), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)pDatabaseTCParameter->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szName = (pDatabaseTCParameter->GetDescription().IsEmpty()) ? pDatabaseTCParameter->GetTag() : szName)));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DESCRIPTION)->SetWindowText((pDatabaseTCProcedureArgument->GetDescription() != pDatabaseTCParameter->GetDescription()) ? pDatabaseTCProcedureArgument->GetDescription() : EMPTYSTRING);
		}
		else
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME)->SetWindowText(pDatabaseTCProcedureArgument->GetTag());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DESCRIPTION)->SetWindowText(pDatabaseTCProcedureArgument->GetDescription());
		}
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL) : ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW)))));
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_BITPATTERN) : ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_SIGNEDINTEGER) : ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_UNSIGNEDINTEGER) : ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_FLOATINGPOINT) : ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME) : ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING) : EMPTYSTRING))))))));
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_BINARY) : ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_OCTAL) : ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_DECIMAL) : ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_HEXADECIMAL) : EMPTYSTRING))))));
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE, (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW, (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED, (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) ? TRUE : FALSE);
		for (EnumCalibrationTables(); (pDatabaseTCNumCalTable = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTCNumCalTables()->GetAt(GetDatabase()->GetTCNumCalTables()->Find(pDatabaseTCProcedureArgument->GetCalTable())) : (CDatabaseTCNumCalTable *)NULL); )
		{
			szTable.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTABLE_FORMAT), (LPCTSTR)pDatabaseTCNumCalTable->GetName(), (LPCTSTR)pDatabaseTCNumCalTable->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szTable = (pDatabaseTCNumCalTable->GetDescription().IsEmpty()) ? pDatabaseTCNumCalTable->GetName() : szTable)));
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE)->SetWindowText(pDatabaseTCProcedureArgument->GetConstValueAsText());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE)->SetWindowText(pDatabaseTCProcedureArgument->GetMinValueAsText());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE)->SetWindowText(pDatabaseTCProcedureArgument->GetMaxValueAsText());
		if ((pDatabaseTCTxtCalTable = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTCTxtCalTables()->GetAt(GetDatabase()->GetTCTxtCalTables()->Find(pDatabaseTCProcedureArgument->GetCalTable())) : (CDatabaseTCTxtCalTable *)NULL))
		{
			for (nPoint = 0, nPoints = (!pDatabaseTCProcedureArgument->GetConstValueAsText().IsEmpty()) ? (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, CB_GETCOUNT) : 0, szTable.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTABLE_FORMAT), (LPCTSTR)pDatabaseTCTxtCalTable->GetName(), (LPCTSTR)pDatabaseTCTxtCalTable->GetDescription()), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szTable = (pDatabaseTCTxtCalTable->GetDescription().IsEmpty()) ? pDatabaseTCTxtCalTable->GetName() : szTable))); nPoint < nPoints; nPoint++)
			{
				if (Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE), nPoint).Left(pDatabaseTCProcedureArgument->GetConstValueAsText().GetLength()) == pDatabaseTCProcedureArgument->GetConstValueAsText())
				{
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, CB_SETCURSEL, nPoint);
					break;
				}
			}
			for (nPoint = 0, nPoints = (!pDatabaseTCProcedureArgument->GetMinValueAsText().IsEmpty()) ? (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, CB_GETCOUNT) : 0; nPoint < nPoints; nPoint++)
			{
				if (Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE), nPoint).Left(pDatabaseTCProcedureArgument->GetMinValueAsText().GetLength()) == pDatabaseTCProcedureArgument->GetMinValueAsText())
				{
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, CB_SETCURSEL, nPoint);
					break;
				}
			}
			for (nPoint = 0, nPoints = (!pDatabaseTCProcedureArgument->GetMaxValueAsText().IsEmpty()) ? (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, CB_GETCOUNT) : 0; nPoint < nPoints; nPoint++)
			{
				if (Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE), nPoint).Left(pDatabaseTCProcedureArgument->GetMaxValueAsText().GetLength()) == pDatabaseTCProcedureArgument->GetMaxValueAsText())
				{
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, CB_SETCURSEL, nPoint);
					break;
				}
			}
		}
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_SETCURSEL, (WPARAM)(((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) || (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_GETCURSEL) : -1));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE)->GetWindowTextLength() > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED)->EnableWindow(((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) || (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX_STATIC)->EnableWindow((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX)->EnableWindow((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) ? TRUE : FALSE);
		return;
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED, FALSE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DESCRIPTION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX)->EnableWindow();
}

CString CTCProcedurePropertiesArgumentsDialog::TranslateToIdentifierName(LPCTSTR pszName) CONST
{
	INT  nPos;
	INT  nLength;
	CString  szName;

	for (nPos = 0, nLength = lstrlen((szName = pszName)); nPos < nLength; nPos++)
	{
		if (_istspace(pszName[nPos])) szName.SetAt(nPos, STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE));
		continue;
	}
	return szName;
}

BOOL CTCProcedurePropertiesArgumentsDialog::CheckButton(UINT nButtonID) CONST
{
	CString  szName;
	CString  szFormat;
	CString  szCoding;

	if (nButtonID == IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)
	{
		for (szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETER_FORMAT), EMPTYSTRING, EMPTYSTRING), szName = Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME), (INT)GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME)->SendMessage(CB_GETCURSEL)); szName.IsEmpty(); )
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME)->GetWindowText(szName);
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING)->GetWindowText(szCoding);
		return((m_pDatabaseTCProcedureArguments[0].Find((szName = (szName.Find(szFormat.GetAt(0)) >= 0) ? szName.Left(szName.Find(szFormat.GetAt(0))) : szName)) < 0) ? (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE)->GetWindowTextLength() > 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED)) && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING)->GetWindowTextLength() > 0 && (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME) || szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING) || GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX)->GetWindowTextLength() > 0) && (!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED) || GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE)->GetWindowTextLength() > 0)) : FALSE);
	}
	if (nButtonID == IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVE  &&  Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)) >= 0) return TRUE;
	return((nButtonID == IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVEALL  &&  GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)->SendMessage(LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

CDatabaseTCProcedureArgument *CTCProcedurePropertiesArgumentsDialog::GetArgument() CONST
{
	CString  szName;
	CString  szFormat;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME)->GetWindowText(szName), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETER_FORMAT), EMPTYSTRING, EMPTYSTRING); GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME)->SendMessage(CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0; )
	{
		szName = (szName.Find(szFormat) >= 0) ? szName.Left(szName.Find(szFormat)) : szName;
		break;
	}
	return m_pDatabaseTCProcedureArguments[0].GetAt(m_pDatabaseTCProcedureArguments[0].Find(szName));
}

BOOL CTCProcedurePropertiesArgumentsDialog::IsModified() CONST
{
	return !m_pDatabaseTCProcedureArguments[0].Compare(&m_pDatabaseTCProcedureArguments[1]);
}

void CTCProcedurePropertiesArgumentsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesArgumentsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesArgumentsDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesArgumentsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesArgumentsDialog)
	ON_WM_HELPINFO()
	ON_MESSAGE(DM_GETDEFID, OnGetDefID)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE, OnFixedValue)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW, OnRawValue)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED, OnCalibratedValue)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DESCRIPTION, OnEditchangeDescription)
	ON_CBN_EDITCHANGE(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME, OnEditchangeName)
	ON_CBN_EDITCHANGE(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, OnEditchangeDefaultValue)
	ON_CBN_EDITCHANGE(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, OnEditchangeMinimumValue)
	ON_CBN_EDITCHANGE(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, OnEditchangeMaximumValue)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME, OnSelchangeName)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, OnSelchangeType)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, OnSelchangeDefaultValue)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, OnSelchangeMinimumValue)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, OnSelchangeMaximumValue)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, OnSelchangeValueCoding)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, OnSelchangeValueRadix)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, OnSelchangeCalibrationTable)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesArgumentsDialog message handlers

BOOL CTCProcedurePropertiesArgumentsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE)) ? (rColumns.Width() / 7) : (9 * rColumns.Width() / 35))));
		continue;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_HELP)->EnableWindow();
	EnumParameters();
	EnumParameterTypes();
	EnumValueCodings();
	EnumValueRadixes();
	EnumCalibrationTables();
	AdjustToPrivileges();
	ShowInfo();
	return TRUE;
}

LRESULT CTCProcedurePropertiesArgumentsDialog::OnGetDefID(WPARAM wParam, LPARAM lParam)
{
	return MAKELONG(0, DC_HASDEFID);
}

BOOL CTCProcedurePropertiesArgumentsDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	INT  nIndex;
	CString  szName;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			if ((pDatabaseTCProcedureArgument = m_pDatabaseTCProcedureArguments[0].GetAt(pNotifyListView->iItem)))
			{
				for (szName.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETER_FORMAT), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag(), (LPCTSTR)pDatabaseTCProcedureArgument->GetDescription()); (nIndex = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szName = (pDatabaseTCProcedureArgument->GetDescription().IsEmpty()) ? pDatabaseTCProcedureArgument->GetTag() : szName))) >= 0; )
				{
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME, CB_SETCURSEL, nIndex);
					break;
				}
				if (nIndex < 0) GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME)->SetWindowText(pDatabaseTCProcedureArgument->GetTag());
			}
			ShowArgumentDetails();
		}
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

BOOL CTCProcedurePropertiesArgumentsDialog::OnCommand(WPARAM wParam, LPARAM lParam)
{
	if (wParam == IDCANCEL) return TRUE;
	return CLocaleDialog::OnCommand(wParam, lParam);
}

void CTCProcedurePropertiesArgumentsDialog::OnAdd()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	UINT  nAttributes;
	CString  szItem;
	CString  szName;
	CString  szType;
	CString  szTable;
	CString  szRadix;
	CString  szCoding;
	CString  szValue[3];
	CString  szFormat[3];
	CString  szDescription;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureArgument = new CDatabaseTCProcedureArgument))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME)->GetWindowText(szName);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE)->GetWindowText(szType);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX)->GetWindowText(szRadix);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING)->GetWindowText(szCoding);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE)->GetWindowText(szTable);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DESCRIPTION)->GetWindowText(szDescription);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE)->GetWindowText(szValue[0]);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE)->GetWindowText(szValue[1]);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE)->GetWindowText(szValue[2]);
		nAttributes = (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW)) ? TCPARAMETER_CALIBRATION_NONE : 0;
		nAttributes |= (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL) && IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED)) ? TCPARAMETER_CALIBRATION_NUMERICAL : 0;
		nAttributes |= (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS) && IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED)) ? TCPARAMETER_CALIBRATION_STATUS : 0;
		nAttributes |= (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE)) ? TCPARAMETER_TYPE_CONSTANT : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_BITPATTERN)) ? TCPARAMETER_CODING_BITPATTERN : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_SIGNEDINTEGER)) ? TCPARAMETER_CODING_SIGNEDINTEGER : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_UNSIGNEDINTEGER)) ? TCPARAMETER_CODING_UNSIGNEDINTEGER : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_FLOATINGPOINT)) ? TCPARAMETER_CODING_FLOATINGPOINT : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME)) ? TCPARAMETER_CODING_TIME : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING)) ? TCPARAMETER_CODING_TEXTSTRING : 0;
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_BINARY)) ? TCPARAMETER_RADIX_BINARY : 0;
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_OCTAL)) ? TCPARAMETER_RADIX_OCTAL : 0;
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_DECIMAL)) ? TCPARAMETER_RADIX_DECIMAL : 0;
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_HEXADECIMAL)) ? TCPARAMETER_RADIX_HEXADECIMAL : 0;
		szFormat[0].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETER_FORMAT), EMPTYSTRING, EMPTYSTRING);
		szFormat[1].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTABLE_FORMAT), EMPTYSTRING, EMPTYSTRING);
		szFormat[2].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERVALUE_POINTFORMAT), EMPTYSTRING, 0);
		for (szName = (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szName) >= 0 && szName.Find(szFormat[0].GetAt(0)) >= 0) ? szName.Left(szName.Find(szFormat[0].GetAt(0))) : szName, szTable = (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szTable) >= 0 && szTable.Find(szFormat[1].GetAt(0)) >= 0) ? szTable.Left(szTable.Find(szFormat[1].GetAt(0))) : szTable, szValue[0] = (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[0]) >= 0 && szValue[0].ReverseFind(szFormat[2].GetAt(1)) >= 0) ? szValue[0].Left(max(szValue[0].ReverseFind(szFormat[2].GetAt(1)) - 1, 0)) : szValue[0], szValue[1] = (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[1]) >= 0 && szValue[1].ReverseFind(szFormat[2].GetAt(1)) >= 0) ? szValue[1].Left(max(szValue[1].ReverseFind(szFormat[2].GetAt(1)) - 1, 0)) : szValue[1], szValue[2] = (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[2]) >= 0 && szValue[2].ReverseFind(szFormat[2].GetAt(1)) >= 0) ? szValue[2].Left(max(szValue[2].ReverseFind(szFormat[2].GetAt(1)) - 1, 0)) : szValue[2]; (pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(szName))) && pDatabaseTCProcedureArgument->CDatabaseTCParameter::Copy(pDatabaseTCParameter); )
		{
			szDescription = (szDescription.IsEmpty()) ? pDatabaseTCParameter->GetDescription() : szDescription;
			break;
		}
		for (pDatabaseTCProcedureArgument->SetTag(TranslateToIdentifierName(szName)), pDatabaseTCProcedureArgument->SetDescription(szDescription), pDatabaseTCProcedureArgument->SetConstValueAsText(szValue[0]), pDatabaseTCProcedureArgument->SetMinValueAsText(szValue[1]), pDatabaseTCProcedureArgument->SetMaxValueAsText(szValue[2]), pDatabaseTCProcedureArgument->SetAttributes(nAttributes), pDatabaseTCProcedureArgument->SetCalTable(szTable); (nIndex = m_pDatabaseTCProcedureArguments[0].Add(pDatabaseTCProcedureArgument)) >= 0; )
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (szItem.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME); )
				{
					szItem = pDatabaseTCProcedureArgument->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_DESCRIPTION); )
				{
					szItem = pDatabaseTCProcedureArgument->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE))
				{
					szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW) : EMPTYSTRING;
					szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL) : szItem;
					szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS) : szItem;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE); )
				{
					szItem = pDatabaseTCProcedureArgument->GetConstValueAsText();
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), nIndex, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), nIndex, nColumn, szItem);
			}
			Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), nIndex);
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVE)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVEALL)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME)->SetFocus();
			return;
		}
		delete pDatabaseTCProcedureArgument;
	}
}

void CTCProcedurePropertiesArgumentsDialog::OnRemove()
{
	INT  nIndex;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CHourglassCursor  cCursor;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST))) < m_pDatabaseTCProcedureArguments[0].GetSize())
	{
		if ((pDatabaseTCProcedureArgument = m_pDatabaseTCProcedureArguments[0].GetAt(nIndex)))
		{
			m_pDatabaseTCProcedureArguments[0].RemoveAt(nIndex);
			delete pDatabaseTCProcedureArgument;
		}
		for (Listview_DeleteText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), nIndex); Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), 0); )
		{
			ShowArgumentDetails();
			break;
		}
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST, LVM_GETITEMCOUNT) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST, LVM_GETITEMCOUNT) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME)->SetFocus();
	}
}

void CTCProcedurePropertiesArgumentsDialog::OnRemoveAll()
{
	CHourglassCursor  cCursor;

	m_pDatabaseTCProcedureArguments[0].RemoveAll();
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME)->SetFocus();
	ShowArgumentDetails();
}

void CTCProcedurePropertiesArgumentsDialog::OnFixedValue()
{
	UINT  nAttributes;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	if ((pDatabaseTCProcedureArgument = GetArgument()))
	{
		nAttributes = pDatabaseTCProcedureArgument->GetAttributes() & ~TCPARAMETER_TYPE_CONSTANT;
		nAttributes |= (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE)) ? TCPARAMETER_TYPE_CONSTANT : 0;
		pDatabaseTCProcedureArgument->SetAttributes(nAttributes);
	}
}

void CTCProcedurePropertiesArgumentsDialog::OnRawValue()
{
	INT  nColumn[2];
	INT  nColumns[2];
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	if ((pDatabaseTCProcedureArgument = GetArgument()))
	{
		for (nColumn[0] = 0, nColumns[0] = (INT)m_szColumns.GetSize(); nColumn[0] < nColumns[0]; nColumn[0]++)
		{
			if (m_szColumns.GetAt(nColumn[0]) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE)) break;
			continue;
		}
		for (nColumn[1] = 0, nColumns[1] = (INT)m_szColumns.GetSize(); nColumn[1] < nColumns[1]; nColumn[1]++)
		{
			if (m_szColumns.GetAt(nColumn[1]) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE)) break;
			continue;
		}
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)), nColumn[0], STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW));
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)), nColumn[1], EMPTYSTRING);
		pDatabaseTCProcedureArgument->SetAttributes((pDatabaseTCProcedureArgument->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_CALIBRATION_NONE);
		pDatabaseTCProcedureArgument->SetConstValueAsText(EMPTYSTRING);
		pDatabaseTCProcedureArgument->SetMinValueAsText(EMPTYSTRING);
		pDatabaseTCProcedureArgument->SetMaxValueAsText(EMPTYSTRING);
		pDatabaseTCProcedureArgument->SetCalTable(EMPTYSTRING);
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE, FALSE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW)));
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, CB_RESETCONTENT);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesArgumentsDialog::OnCalibratedValue()
{
	INT  nColumn[2];
	INT  nColumns[2];
	CString  szType;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	for (EnumCalibrationTables(); (pDatabaseTCProcedureArgument = GetArgument()); )
	{
		for (nColumn[0] = 0, nColumns[0] = (INT)m_szColumns.GetSize(); nColumn[0] < nColumns[0]; nColumn[0]++)
		{
			if (m_szColumns.GetAt(nColumn[0]) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE)) break;
			continue;
		}
		for (nColumn[1] = 0, nColumns[1] = (INT)m_szColumns.GetSize(); nColumn[1] < nColumns[1]; nColumn[1]++)
		{
			if (m_szColumns.GetAt(nColumn[1]) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE)) break;
			continue;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE)->GetWindowText(szType);
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)), nColumn[0], szType);
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)), nColumn[1], EMPTYSTRING);
		pDatabaseTCProcedureArgument->SetAttributes((pDatabaseTCProcedureArgument->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | ((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL))*TCPARAMETER_CALIBRATION_NUMERICAL) | ((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS))*TCPARAMETER_CALIBRATION_STATUS));
		pDatabaseTCProcedureArgument->SetConstValueAsText(EMPTYSTRING);
		pDatabaseTCProcedureArgument->SetMinValueAsText(EMPTYSTRING);
		pDatabaseTCProcedureArgument->SetMaxValueAsText(EMPTYSTRING);
		pDatabaseTCProcedureArgument->SetCalTable(EMPTYSTRING);
		break;
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE, FALSE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, CB_RESETCONTENT);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesArgumentsDialog::OnEditchangeName()
{
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVE)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVE) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVEALL)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVEALL) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesArgumentsDialog::OnEditchangeDescription()
{
	INT  nColumn;
	INT  nColumns;
	CString  szName;
	CString  szDescription;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	if ((pDatabaseTCProcedureArgument = GetArgument()))
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_DESCRIPTION)) break;
			continue;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DESCRIPTION)->GetWindowText(szDescription);
		szName.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETER_FORMAT), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag(), (LPCTSTR)pDatabaseTCProcedureArgument->GetDescription());
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)), nColumn, (szDescription = (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szName = (pDatabaseTCProcedureArgument->GetDescription().IsEmpty()) ? pDatabaseTCProcedureArgument->GetTag() : szName)) >= 0 && szDescription.IsEmpty()) ? pDatabaseTCProcedureArgument->GetDescription() : szDescription));
		pDatabaseTCProcedureArgument->SetDescription(szDescription);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesArgumentsDialog::OnEditchangeDefaultValue()
{
	INT  nColumn;
	INT  nColumns;
	CString  szValue;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	if ((pDatabaseTCProcedureArgument = GetArgument()))
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE)) break;
			continue;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE)->GetWindowText(szValue);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE)->EnableWindow(!szValue.IsEmpty());
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE, (!szValue.IsEmpty()) ? IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE) : FALSE);
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)), nColumn, szValue);
		pDatabaseTCProcedureArgument->SetAttributes((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE)) ? (pDatabaseTCProcedureArgument->GetAttributes() | TCPARAMETER_TYPE_CONSTANT) : (pDatabaseTCProcedureArgument->GetAttributes() & ~TCPARAMETER_TYPE_CONSTANT));
		pDatabaseTCProcedureArgument->SetConstValueAsText(szValue);
	}
	else
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE)->GetWindowText(szValue);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE)->EnableWindow(!szValue.IsEmpty());
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE, (!szValue.IsEmpty()) ? IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE) : FALSE);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesArgumentsDialog::OnEditchangeMinimumValue()
{
	CString  szValue;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	if ((pDatabaseTCProcedureArgument = GetArgument()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE)->GetWindowText(szValue);
		pDatabaseTCProcedureArgument->SetMinValueAsText(szValue);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesArgumentsDialog::OnEditchangeMaximumValue()
{
	CString  szValue;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	if ((pDatabaseTCProcedureArgument = GetArgument()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE)->GetWindowText(szValue);
		pDatabaseTCProcedureArgument->SetMaxValueAsText(szValue);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesArgumentsDialog::OnSelchangeName()
{
	INT  nColumn[2];
	INT  nColumns[2];
	UINT  nAttributes;
	CString  szName;
	CString  szType;
	CString  szTable;
	CString  szRadix;
	CString  szFormat;
	CString  szCoding;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	for (szName = Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME, CB_GETCURSEL)), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETER_FORMAT), EMPTYSTRING, EMPTYSTRING), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_NAME, CB_GETCURSEL)); (pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find((szName = (szName.Find(szFormat) >= 0) ? szName.Left(szName.Find(szFormat)) : szName)))); )
	{
		if ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) == TCPARAMETER_CALIBRATION_NONE)
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW)));
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW, TRUE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED, FALSE);
			EnumCalibrationTables();
		}
		if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)
		{
			for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL))), CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW, FALSE), CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED, TRUE), EnumCalibrationTables(); (pDatabaseTCNumCalTable = GetDatabase()->GetTCNumCalTables()->GetAt(GetDatabase()->GetTCNumCalTables()->Find(pDatabaseTCParameter->GetCalTable()))); )
			{
				szTable.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTABLE_FORMAT), (LPCTSTR)pDatabaseTCNumCalTable->GetName(), (LPCTSTR)pDatabaseTCNumCalTable->GetDescription());
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szTable = (pDatabaseTCNumCalTable->GetDescription().IsEmpty()) ? pDatabaseTCNumCalTable->GetName() : szTable)));
				break;
			}
		}
		if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
		{
			for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS))), CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW, FALSE), CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED, TRUE), EnumCalibrationTables(); (pDatabaseTCTxtCalTable = GetDatabase()->GetTCTxtCalTables()->GetAt(GetDatabase()->GetTCTxtCalTables()->Find(pDatabaseTCParameter->GetCalTable()))); )
			{
				szTable.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTABLE_FORMAT), (LPCTSTR)pDatabaseTCTxtCalTable->GetName(), (LPCTSTR)pDatabaseTCTxtCalTable->GetDescription());
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szTable = (pDatabaseTCTxtCalTable->GetDescription().IsEmpty()) ? pDatabaseTCTxtCalTable->GetName() : szTable)));
				break;
			}
		}
		if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN)
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_BITPATTERN)));
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_BINARY)));
			break;
		}
		if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER)
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_SIGNEDINTEGER)));
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_DECIMAL)));
			break;
		}
		if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER)
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_UNSIGNEDINTEGER)));
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_DECIMAL)));
			break;
		}
		if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_FLOATINGPOINT)));
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_DECIMAL)));
			break;
		}
		if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME)
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME)));
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_SETCURSEL, (WPARAM)-1);
			break;
		}
		if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING)
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING)));
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_SETCURSEL, (WPARAM)-1);
			break;
		}
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_SETCURSEL, (WPARAM)-1);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_SETCURSEL, (WPARAM)-1);
		break;
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE)->GetWindowText(szType); (pDatabaseTCProcedureArgument = GetArgument()); )
	{
		for (pDatabaseTCProcedureArgument->SetAttributes((pDatabaseTCProcedureArgument->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | ((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW))*TCPARAMETER_CALIBRATION_NONE) | ((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL))*TCPARAMETER_CALIBRATION_NUMERICAL) | ((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS))*TCPARAMETER_CALIBRATION_STATUS)); szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW); )
		{
			pDatabaseTCProcedureArgument->SetConstValueAsText(EMPTYSTRING);
			pDatabaseTCProcedureArgument->SetMinValueAsText(EMPTYSTRING);
			pDatabaseTCProcedureArgument->SetMaxValueAsText(EMPTYSTRING);
			pDatabaseTCProcedureArgument->SetCalTable(EMPTYSTRING);
			break;
		}
		for (; (pDatabaseTCParameter = (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS)) ? GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(szName)) : (CDatabaseTCParameter *)NULL); )
		{
			pDatabaseTCProcedureArgument->SetCalTable(pDatabaseTCParameter->GetCalTable());
			break;
		}
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING)->GetWindowText(szCoding); (pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(szName))); )
		{
			nAttributes = pDatabaseTCProcedureArgument->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING);
			nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_BITPATTERN)) ? TCPARAMETER_CODING_BITPATTERN : 0;
			nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_SIGNEDINTEGER)) ? TCPARAMETER_CODING_SIGNEDINTEGER : 0;
			nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_UNSIGNEDINTEGER)) ? TCPARAMETER_CODING_UNSIGNEDINTEGER : 0;
			nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_FLOATINGPOINT)) ? TCPARAMETER_CODING_FLOATINGPOINT : 0;
			nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME)) ? TCPARAMETER_CODING_TIME : 0;
			nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING)) ? TCPARAMETER_CODING_TEXTSTRING : 0;
			pDatabaseTCProcedureArgument->SetAttributes(nAttributes);
			break;
		}
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX)->GetWindowText(szRadix); (pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(szName))); )
		{
			nAttributes = pDatabaseTCProcedureArgument->GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL);
			nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_BINARY)) ? TCPARAMETER_RADIX_BINARY : 0;
			nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_OCTAL)) ? TCPARAMETER_RADIX_OCTAL : 0;
			nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_DECIMAL)) ? TCPARAMETER_RADIX_DECIMAL : 0;
			nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_HEXADECIMAL)) ? TCPARAMETER_RADIX_HEXADECIMAL : 0;
			pDatabaseTCProcedureArgument->SetAttributes(nAttributes);
			break;
		}
		for (nColumn[0] = 0, nColumns[0] = (INT)m_szColumns.GetSize(); nColumn[0] < nColumns[0]; nColumn[0]++)
		{
			if (m_szColumns.GetAt(nColumn[0]) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE)) break;
			continue;
		}
		for (nColumn[1] = 0, nColumns[1] = (INT)m_szColumns.GetSize(); nColumn[1] < nColumns[1]; nColumn[1]++)
		{
			if (m_szColumns.GetAt(nColumn[1]) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE)) break;
			continue;
		}
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)), nColumn[0], szType);
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)), nColumn[1], EMPTYSTRING);
		break;
	}
	if (GetDatabase()->GetTCParameters()->Find(szName) < 0)
	{
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW, (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW)) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED, (szType != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW)) ? TRUE : FALSE);
		EnumCalibrationTables();
	}
	EnumDefaultValues();
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING)->GetWindowText(szCoding);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED)->EnableWindow((szType != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE_STATIC)->EnableWindow((szType != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE)->EnableWindow((szType != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX_STATIC)->EnableWindow((szCoding != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME) && szCoding != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX)->EnableWindow((szCoding != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME) && szCoding != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVE)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVE) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVEALL)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_REMOVEALL) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesArgumentsDialog::OnSelchangeType()
{
	INT  nColumn[2];
	INT  nColumns[2];
	CString  szType;
	CString  szCoding;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE)->GetWindowText(szType); (pDatabaseTCProcedureArgument = GetArgument()); )
	{
		for (pDatabaseTCProcedureArgument->SetAttributes((pDatabaseTCProcedureArgument->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | ((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW))*TCPARAMETER_CALIBRATION_NONE) | ((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL))*TCPARAMETER_CALIBRATION_NUMERICAL) | ((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS))*TCPARAMETER_CALIBRATION_STATUS)); szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW); )
		{
			pDatabaseTCProcedureArgument->SetConstValueAsText(EMPTYSTRING);
			pDatabaseTCProcedureArgument->SetMinValueAsText(EMPTYSTRING);
			pDatabaseTCProcedureArgument->SetMaxValueAsText(EMPTYSTRING);
			pDatabaseTCProcedureArgument->SetCalTable(EMPTYSTRING);
			break;
		}
		for (nColumn[0] = 0, nColumns[0] = (INT)m_szColumns.GetSize(); nColumn[0] < nColumns[0]; nColumn[0]++)
		{
			if (m_szColumns.GetAt(nColumn[0]) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE)) break;
			continue;
		}
		for (nColumn[1] = 0, nColumns[1] = (INT)m_szColumns.GetSize(); nColumn[1] < nColumns[1]; nColumn[1]++)
		{
			if (m_szColumns.GetAt(nColumn[1]) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE)) break;
			continue;
		}
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)), nColumn[0], szType);
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)), nColumn[1], EMPTYSTRING);
		break;
	}
	if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW))
	{
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW, TRUE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED, FALSE);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_SETCURSEL, (WPARAM)-1);
	}
	else
	{
		for (CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW, FALSE), CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED, TRUE), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING)->GetWindowText(szCoding); szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME) || szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING); )
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING, CB_SETCURSEL, (WPARAM)-1);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX)->EnableWindow();
			break;
		}
		EnumCalibrationTables();
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE, FALSE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, CB_RESETCONTENT);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING)->GetWindowText(szCoding);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX_STATIC)->EnableWindow((szCoding != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME) && szCoding != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX)->EnableWindow(((szCoding != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME) && szCoding != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING)) ? TRUE : FALSE) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED)->EnableWindow((szType != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE_STATIC)->EnableWindow((szType != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE)->EnableWindow((szType != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesArgumentsDialog::OnSelchangeDefaultValue()
{
	INT  nPos;
	INT  nColumn;
	INT  nColumns;
	CString  szValue;
	CString  szFormat;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	if ((pDatabaseTCProcedureArgument = GetArgument()))
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE)) break;
			continue;
		}
		for (szValue = Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, CB_GETCURSEL)), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERVALUE_POINTFORMAT), EMPTYSTRING, 0); (nPos = szValue.ReverseFind(szFormat.GetAt(1))) >= 0; )
		{
			szValue = szValue.Left(max(nPos - 1, 0));
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE)->EnableWindow(!szValue.IsEmpty());
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE, (!szValue.IsEmpty()) ? IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE) : FALSE);
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)), nColumn, szValue);
		pDatabaseTCProcedureArgument->SetAttributes((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE)) ? (pDatabaseTCProcedureArgument->GetAttributes() | TCPARAMETER_TYPE_CONSTANT) : (pDatabaseTCProcedureArgument->GetAttributes() & ~TCPARAMETER_TYPE_CONSTANT));
		pDatabaseTCProcedureArgument->SetConstValueAsText(szValue);
	}
	else
	{
		for (szValue = Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, CB_GETCURSEL)), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERVALUE_POINTFORMAT), EMPTYSTRING, 0); (nPos = szValue.ReverseFind(szFormat.GetAt(1))) >= 0; )
		{
			szValue = szValue.Left(max(nPos - 1, 0));
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE)->EnableWindow(!szValue.IsEmpty());
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE, (!szValue.IsEmpty()) ? IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE) : FALSE);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesArgumentsDialog::OnSelchangeMinimumValue()
{
	INT  nPos;
	CString  szValue;
	CString  szFormat;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	if ((pDatabaseTCProcedureArgument = GetArgument()))
	{
		for (szValue = Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, CB_GETCURSEL)), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERVALUE_POINTFORMAT), EMPTYSTRING, 0); (nPos = szValue.ReverseFind(szFormat.GetAt(1))) >= 0; )
		{
			szValue = szValue.Left(max(nPos - 1, 0));
			break;
		}
		pDatabaseTCProcedureArgument->SetMinValueAsText(szValue);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesArgumentsDialog::OnSelchangeMaximumValue()
{
	INT  nPos;
	CString  szValue;
	CString  szFormat;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	if ((pDatabaseTCProcedureArgument = GetArgument()))
	{
		for (szValue = Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, CB_GETCURSEL)), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERVALUE_POINTFORMAT), EMPTYSTRING, 0); (nPos = szValue.ReverseFind(szFormat.GetAt(1))) >= 0; )
		{
			szValue = szValue.Left(max(nPos - 1, 0));
			break;
		}
		pDatabaseTCProcedureArgument->SetMaxValueAsText(szValue);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesArgumentsDialog::OnSelchangeValueCoding()
{
	INT  nColumn;
	INT  nColumns;
	UINT  nAttributes;
	CString  szCoding;
	CString  szValue[3];
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	if ((pDatabaseTCProcedureArgument = GetArgument()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING)->GetWindowText(szCoding);
		nAttributes = pDatabaseTCProcedureArgument->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING);
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_BITPATTERN)) ? TCPARAMETER_CODING_BITPATTERN : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_SIGNEDINTEGER)) ? TCPARAMETER_CODING_SIGNEDINTEGER : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_UNSIGNEDINTEGER)) ? TCPARAMETER_CODING_UNSIGNEDINTEGER : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_FLOATINGPOINT)) ? TCPARAMETER_CODING_FLOATINGPOINT : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME)) ? TCPARAMETER_CODING_TIME : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING)) ? TCPARAMETER_CODING_TEXTSTRING : 0;
		for (pDatabaseTCProcedureArgument->SetAttributes((szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME) || szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING)) ? (nAttributes & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) : nAttributes); szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME) || szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING); )
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), pDatabaseTCProcedureArgument->SetAttributes((pDatabaseTCProcedureArgument->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_CALIBRATION_NONE), pDatabaseTCProcedureArgument->SetConstValueAsText(EMPTYSTRING), pDatabaseTCProcedureArgument->SetMinValueAsText(EMPTYSTRING), pDatabaseTCProcedureArgument->SetMaxValueAsText(EMPTYSTRING); nColumn < nColumns; nColumn++)
			{
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE)) break;
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)), nColumn, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW));
			break;
		}
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE)->GetWindowText(szValue[0]), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE)->GetWindowText(szValue[1]), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE)->GetWindowText(szValue[2]), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CODING)->GetWindowText(szCoding); szCoding != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME) && szCoding != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING); )
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX)->EnableWindow();
		break;
	}
	if (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME) || szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING))
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW)));
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX, CB_SETCURSEL, (WPARAM)-1);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE, CB_SETCURSEL, (WPARAM)-1);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE, CB_RESETCONTENT);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE, CB_RESETCONTENT);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE, CB_RESETCONTENT);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE, !szValue[0].IsEmpty());
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW, TRUE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED, FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_DEFAULTVALUE)->SetWindowText(szValue[0]);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MINIMUMVALUE)->SetWindowText(szValue[1]);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_MAXIMUMVALUE)->SetWindowText(szValue[2]);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_FIXEDVALUE)->EnableWindow(!szValue[0].IsEmpty());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RAW)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALIBRATED)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesArgumentsDialog::OnSelchangeValueRadix()
{
	UINT  nAttributes;
	CString  szRadix;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	if ((pDatabaseTCProcedureArgument = GetArgument()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_RADIX)->GetWindowText(szRadix);
		nAttributes = pDatabaseTCProcedureArgument->GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL);
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_BINARY)) ? TCPARAMETER_RADIX_BINARY : 0;
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_OCTAL)) ? TCPARAMETER_RADIX_OCTAL : 0;
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_DECIMAL)) ? TCPARAMETER_RADIX_DECIMAL : 0;
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_HEXADECIMAL)) ? TCPARAMETER_RADIX_HEXADECIMAL : 0;
		pDatabaseTCProcedureArgument->SetAttributes(nAttributes);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesArgumentsDialog::OnSelchangeCalibrationTable()
{
	INT  nColumn;
	INT  nColumns;
	CString  szTable;
	CString  szFormat;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	for (EnumDefaultValues(); (pDatabaseTCProcedureArgument = GetArgument()); )
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE)) break;
			continue;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_SPECIFICATION_VALUE_CALTABLE)->GetWindowText(szTable);
		szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTABLE_FORMAT), EMPTYSTRING, EMPTYSTRING);
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_LIST)), nColumn, EMPTYSTRING);
		pDatabaseTCProcedureArgument->SetCalTable((szTable = (szTable.Find(szFormat) >= 0) ? szTable.Left(szTable.Find(szFormat)) : szTable));
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_ARGUMENTS_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

BOOL CTCProcedurePropertiesArgumentsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESARGUMENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesArgumentsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESARGUMENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesVariablesDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesVariablesDialog, CLocaleDialog)

CTCProcedurePropertiesVariablesDialog::CTCProcedurePropertiesVariablesDialog(CWnd *pParentWnd) : CLocaleDialog(CTCProcedurePropertiesVariablesDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesVariablesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCProcedurePropertiesVariablesDialog::SetInfo(CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	BOOL  bNew;
	CDatabaseTCProcedureVariables  pDatabaseTCProcedureVariables;

	if (pDatabaseTCProcedure->GetVariables(pDatabaseTCProcedureVariables) >= 0)
	{
		if ((bNew = !m_pDatabaseTCProcedureVariables[0].Compare(&pDatabaseTCProcedureVariables)) && m_pDatabaseTCProcedureVariables[0].Copy(&pDatabaseTCProcedureVariables) && m_pDatabaseTCProcedureVariables[1].Copy(&pDatabaseTCProcedureVariables))
		{
			ShowInfo();
			return TRUE;
		}
		return((!bNew) ? m_pDatabaseTCProcedureVariables[1].Copy(&pDatabaseTCProcedureVariables) : FALSE);
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesVariablesDialog::GetInfo(CDatabaseTCProcedure *pDatabaseTCProcedure) CONST
{
	return pDatabaseTCProcedure->SetVariables(m_pDatabaseTCProcedureVariables[0]);
}

VOID CTCProcedurePropertiesVariablesDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DESCRIPTION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_TYPE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DEFAULTVALUE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MINIMUMVALUE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MAXIMUMVALUE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX, bCheck);
}

CTCProcedurePropertiesThreadView *CTCProcedurePropertiesVariablesDialog::GetParent() CONST
{
	return((CTCProcedurePropertiesThreadView *)CLocaleDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesVariablesDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParent()->GetParent()->GetParent()->GetParent();
}

BOOL CTCProcedurePropertiesVariablesDialog::EnumValueTypes()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUETYPE_RAW)) >= 0) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesVariablesDialog::EnumValueCodings()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_BITPATTERN)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_SIGNEDINTEGER)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_UNSIGNEDINTEGER)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_FLOATINGPOINT)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_DATETIME)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_STRING)) >= 0) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesVariablesDialog::EnumValueRadixes()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_BINARY)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_OCTAL)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_DECIMAL)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_HEXADECIMAL)) >= 0) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesVariablesDialog::ShowInfo()
{
	INT  nColumn;
	INT  nColumns;
	INT  nVariable;
	INT  nVariables;
	CString  szItem;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;

	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST, LVM_DELETEALLITEMS);
	for (nVariable = 0, nVariables = (INT)m_pDatabaseTCProcedureVariables[0].GetSize(); nVariable < nVariables; nVariable++)
	{
		if ((pDatabaseTCProcedureVariable = m_pDatabaseTCProcedureVariables[0].GetAt(nVariable)))
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (szItem.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_NAME); )
				{
					szItem = pDatabaseTCProcedureVariable->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_DESCRIPTION); )
				{
					szItem = pDatabaseTCProcedureVariable->GetDescription();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_TYPE); )
				{
					szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUETYPE_RAW) : EMPTYSTRING;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_VALUE); )
				{
					szItem = pDatabaseTCProcedureVariable->GetConstValueAsText();
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST), nVariable, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST), nVariable, nColumn, szItem);
			}
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST), 0);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVE)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVE) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVEALL)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVEALL) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	ShowVariableDetails();
}

VOID CTCProcedurePropertiesVariablesDialog::ShowVariableDetails()
{
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;

	if ((pDatabaseTCProcedureVariable = GetVariable()))
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_TYPE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUETYPE_RAW)));
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_BITPATTERN) : ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_SIGNEDINTEGER) : ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_UNSIGNEDINTEGER) : ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_FLOATINGPOINT) : ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_DATETIME) : ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_STRING) : EMPTYSTRING))))))));
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_BINARY) : ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_OCTAL) : ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_DECIMAL) : ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_HEXADECIMAL) : EMPTYSTRING))))));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME)->SetWindowText(pDatabaseTCProcedureVariable->GetTag());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DESCRIPTION)->SetWindowText(pDatabaseTCProcedureVariable->GetDescription());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DEFAULTVALUE)->SetWindowText(pDatabaseTCProcedureVariable->GetConstValueAsText());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MINIMUMVALUE)->SetWindowText(pDatabaseTCProcedureVariable->GetMinValueAsText());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MAXIMUMVALUE)->SetWindowText(pDatabaseTCProcedureVariable->GetMaxValueAsText());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX_STATIC)->EnableWindow((pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX)->EnableWindow((pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) ? TRUE : FALSE);
		return;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_TYPE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DESCRIPTION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DEFAULTVALUE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MINIMUMVALUE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MAXIMUMVALUE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX)->EnableWindow();
}

CString CTCProcedurePropertiesVariablesDialog::TranslateToIdentifierName(LPCTSTR pszName) CONST
{
	INT  nPos;
	INT  nLength;
	CString  szName;

	for (nPos = 0, nLength = lstrlen((szName = pszName)); nPos < nLength; nPos++)
	{
		if (_istspace(pszName[nPos])) szName.SetAt(nPos, STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE));
		continue;
	}
	return szName;
}

BOOL CTCProcedurePropertiesVariablesDialog::CheckButton(UINT nButtonID) CONST
{
	CString  szName;
	CString  szCoding;

	if (nButtonID == IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD)
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME)->GetWindowText(szName);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING)->GetWindowText(szCoding);
		return((m_pDatabaseTCProcedureVariables[0].Find(szName) < 0) ? (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_TYPE)->GetWindowTextLength() > 0 && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING)->GetWindowTextLength() > 0 && (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_DATETIME) || szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_STRING) || GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX)->GetWindowTextLength() > 0)) : FALSE);
	}
	if (nButtonID == IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVE  &&  Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST)) >= 0) return TRUE;
	return((nButtonID == IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVEALL  &&  GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST)->SendMessage(LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

CDatabaseTCProcedureVariable *CTCProcedurePropertiesVariablesDialog::GetVariable() CONST
{
	CString  szName;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME)->GetWindowText(szName);
	return m_pDatabaseTCProcedureVariables[0].GetAt(m_pDatabaseTCProcedureVariables[0].Find(szName));
}

BOOL CTCProcedurePropertiesVariablesDialog::IsModified() CONST
{
	return !m_pDatabaseTCProcedureVariables[0].Compare(&m_pDatabaseTCProcedureVariables[1]);
}

void CTCProcedurePropertiesVariablesDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesVariablesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesVariablesDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesVariablesDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesVariablesDialog)
	ON_WM_HELPINFO()
	ON_MESSAGE(DM_GETDEFID, OnGetDefID)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME, OnEditchangeName)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DESCRIPTION, OnEditchangeDescription)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DEFAULTVALUE, OnEditchangeDefaultValue)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MINIMUMVALUE, OnEditchangeMinimumValue)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MAXIMUMVALUE, OnEditchangeMaximumValue)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_TYPE, OnSelchangeType)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING, OnSelchangeValueCoding)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX, OnSelchangeValueRadix)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesVariablesDialog message handlers

BOOL CTCProcedurePropertiesVariablesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_VALUE));
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_NAME)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_TYPE)) ? (rColumns.Width() / 7) : (9 * rColumns.Width() / 35))));
		continue;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_TYPE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DEFAULTVALUE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DEFAULTVALUE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MINIMUMVALUE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MINIMUMVALUE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MAXIMUMVALUE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MAXIMUMVALUE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_HELP)->EnableWindow();
	EnumValueTypes();
	EnumValueCodings();
	EnumValueRadixes();
	AdjustToPrivileges();
	ShowInfo();
	return TRUE;
}

LRESULT CTCProcedurePropertiesVariablesDialog::OnGetDefID(WPARAM wParam, LPARAM lParam)
{
	return MAKELONG(0, DC_HASDEFID);
}

BOOL CTCProcedurePropertiesVariablesDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			if ((pDatabaseTCProcedureVariable = m_pDatabaseTCProcedureVariables[0].GetAt(pNotifyListView->iItem)))
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME)->SetWindowText(pDatabaseTCProcedureVariable->GetTag());
				ShowVariableDetails();
			}
		}
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

BOOL CTCProcedurePropertiesVariablesDialog::OnCommand(WPARAM wParam, LPARAM lParam)
{
	if (wParam == IDCANCEL) return TRUE;
	return CLocaleDialog::OnCommand(wParam, lParam);
}

void CTCProcedurePropertiesVariablesDialog::OnAdd()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	UINT  nAttributes;
	CString  szItem;
	CString  szName;
	CString  szType;
	CString  szRadix;
	CString  szCoding;
	CString  szValue[3];
	CString  szDescription;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureVariable = new CDatabaseTCProcedureVariable))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME)->GetWindowText(szName);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_TYPE)->GetWindowText(szType);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX)->GetWindowText(szRadix);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING)->GetWindowText(szCoding);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DESCRIPTION)->GetWindowText(szDescription);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DEFAULTVALUE)->GetWindowText(szValue[0]);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MINIMUMVALUE)->GetWindowText(szValue[1]);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MAXIMUMVALUE)->GetWindowText(szValue[2]);
		nAttributes = (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUETYPE_RAW)) ? TCPARAMETER_CALIBRATION_NONE : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_BITPATTERN)) ? TCPARAMETER_CODING_BITPATTERN : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_SIGNEDINTEGER)) ? TCPARAMETER_CODING_SIGNEDINTEGER : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_UNSIGNEDINTEGER)) ? TCPARAMETER_CODING_UNSIGNEDINTEGER : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_FLOATINGPOINT)) ? TCPARAMETER_CODING_FLOATINGPOINT : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_DATETIME)) ? TCPARAMETER_CODING_TIME : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_STRING)) ? TCPARAMETER_CODING_TEXTSTRING : 0;
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_BINARY)) ? TCPARAMETER_RADIX_BINARY : 0;
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_OCTAL)) ? TCPARAMETER_RADIX_OCTAL : 0;
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_DECIMAL)) ? TCPARAMETER_RADIX_DECIMAL : 0;
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_HEXADECIMAL)) ? TCPARAMETER_RADIX_HEXADECIMAL : 0;
		pDatabaseTCProcedureVariable->SetTag(TranslateToIdentifierName(szName));
		pDatabaseTCProcedureVariable->SetDescription(szDescription);
		pDatabaseTCProcedureVariable->SetConstValueAsText(szValue[0]);
		pDatabaseTCProcedureVariable->SetMinValueAsText(szValue[1]);
		pDatabaseTCProcedureVariable->SetMaxValueAsText(szValue[2]);
		pDatabaseTCProcedureVariable->SetAttributes(nAttributes);
		for (; (nIndex = m_pDatabaseTCProcedureVariables[0].Add(pDatabaseTCProcedureVariable)) >= 0; )
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (szItem.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_NAME); )
				{
					szItem = pDatabaseTCProcedureVariable->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_DESCRIPTION); )
				{
					szItem = pDatabaseTCProcedureVariable->GetDescription();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_TYPE); )
				{
					szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUETYPE_RAW) : EMPTYSTRING;
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_VALUE); )
				{
					szItem = pDatabaseTCProcedureVariable->GetConstValueAsText();
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST), nIndex, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST), nIndex, nColumn, szItem);
			}
			Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST), nIndex);
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME, EM_SETSEL, 0, -1);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVE)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVEALL)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME)->SetFocus();
			return;
		}
		delete pDatabaseTCProcedureVariable;
	}
}

void CTCProcedurePropertiesVariablesDialog::OnRemove()
{
	INT  nIndex;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;
	CHourglassCursor  cCursor;

	if ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST))) < m_pDatabaseTCProcedureVariables[0].GetSize())
	{
		if ((pDatabaseTCProcedureVariable = m_pDatabaseTCProcedureVariables[0].GetAt(nIndex)))
		{
			m_pDatabaseTCProcedureVariables[0].RemoveAt(nIndex);
			delete pDatabaseTCProcedureVariable;
		}
		for (Listview_DeleteText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST), nIndex); Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST), 0); )
		{
			ShowVariableDetails();
			break;
		}
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME, EM_SETSEL, 0, -1);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST, LVM_GETITEMCOUNT) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST, LVM_GETITEMCOUNT) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME)->SetFocus();
	}
}

void CTCProcedurePropertiesVariablesDialog::OnRemoveAll()
{
	CHourglassCursor  cCursor;

	m_pDatabaseTCProcedureVariables[0].RemoveAll();
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_NAME)->SetFocus();
	ShowVariableDetails();
}

void CTCProcedurePropertiesVariablesDialog::OnEditchangeName()
{
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVE)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVE) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVEALL)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_REMOVEALL) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesVariablesDialog::OnEditchangeDescription()
{
	INT  nColumn;
	INT  nColumns;
	CString  szDescription;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;

	if ((pDatabaseTCProcedureVariable = GetVariable()))
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_DESCRIPTION)) break;
			continue;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DESCRIPTION)->GetWindowText(szDescription);
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST)), nColumn, szDescription);
		pDatabaseTCProcedureVariable->SetDescription(szDescription);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesVariablesDialog::OnEditchangeDefaultValue()
{
	INT  nColumn;
	INT  nColumns;
	CString  szValue;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;

	if ((pDatabaseTCProcedureVariable = GetVariable()))
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_VALUE)) break;
			continue;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_DEFAULTVALUE)->GetWindowText(szValue);
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST)), nColumn, szValue);
		pDatabaseTCProcedureVariable->SetConstValueAsText(szValue);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesVariablesDialog::OnEditchangeMinimumValue()
{
	CString  szValue;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;

	if ((pDatabaseTCProcedureVariable = GetVariable()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MINIMUMVALUE)->GetWindowText(szValue);
		pDatabaseTCProcedureVariable->SetMinValueAsText(szValue);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesVariablesDialog::OnEditchangeMaximumValue()
{
	CString  szValue;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;

	if ((pDatabaseTCProcedureVariable = GetVariable()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_MAXIMUMVALUE)->GetWindowText(szValue);
		pDatabaseTCProcedureVariable->SetMaxValueAsText(szValue);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesVariablesDialog::OnSelchangeType()
{
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesVariablesDialog::OnSelchangeValueCoding()
{
	INT  nColumn;
	INT  nColumns;
	UINT  nAttributes;
	CString  szCoding;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;

	if ((pDatabaseTCProcedureVariable = GetVariable()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING)->GetWindowText(szCoding);
		nAttributes = pDatabaseTCProcedureVariable->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING);
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_BITPATTERN)) ? TCPARAMETER_CODING_BITPATTERN : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_SIGNEDINTEGER)) ? TCPARAMETER_CODING_SIGNEDINTEGER : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_UNSIGNEDINTEGER)) ? TCPARAMETER_CODING_UNSIGNEDINTEGER : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_FLOATINGPOINT)) ? TCPARAMETER_CODING_FLOATINGPOINT : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_DATETIME)) ? TCPARAMETER_CODING_TIME : 0;
		nAttributes |= (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_STRING)) ? TCPARAMETER_CODING_TEXTSTRING : 0;
		for (pDatabaseTCProcedureVariable->SetAttributes((szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_DATETIME) || szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_STRING)) ? (nAttributes & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) : nAttributes); szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_DATETIME) || szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_STRING); )
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), pDatabaseTCProcedureVariable->SetAttributes((pDatabaseTCProcedureVariable->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_CALIBRATION_NONE), pDatabaseTCProcedureVariable->SetConstValueAsText(EMPTYSTRING), pDatabaseTCProcedureVariable->SetMinValueAsText(EMPTYSTRING), pDatabaseTCProcedureVariable->SetMaxValueAsText(EMPTYSTRING); nColumn < nColumns; nColumn++)
			{
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_TYPE)) break;
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_LIST)), nColumn, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUETYPE_RAW));
			break;
		}
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_CODING)->GetWindowText(szCoding); szCoding != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_DATETIME) && szCoding != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_STRING); )
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX)->EnableWindow();
		break;
	}
	if (szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_DATETIME) || szCoding == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_STRING))
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_TYPE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUETYPE_RAW)));
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX, CB_SETCURSEL, (WPARAM)-1);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesVariablesDialog::OnSelchangeValueRadix()
{
	UINT  nAttributes;
	CString  szRadix;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;

	if ((pDatabaseTCProcedureVariable = GetVariable()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_SPECIFICATION_VALUE_RADIX)->GetWindowText(szRadix);
		nAttributes = pDatabaseTCProcedureVariable->GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL);
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_BINARY)) ? TCPARAMETER_RADIX_BINARY : 0;
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_OCTAL)) ? TCPARAMETER_RADIX_OCTAL : 0;
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_DECIMAL)) ? TCPARAMETER_RADIX_DECIMAL : 0;
		nAttributes |= (szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_HEXADECIMAL)) ? TCPARAMETER_RADIX_HEXADECIMAL : 0;
		pDatabaseTCProcedureVariable->SetAttributes(nAttributes);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_VARIABLES_ADD) && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

BOOL CTCProcedurePropertiesVariablesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESVARIABLESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesVariablesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESVARIABLESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesThreadsDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesThreadsDialog, CLocaleDialog)

CTCProcedurePropertiesThreadsDialog::CTCProcedurePropertiesThreadsDialog(CWnd *pParentWnd) : CLocaleDialog(CTCProcedurePropertiesThreadsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesThreadsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCProcedurePropertiesThreadsDialog::SetInfo(CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	INT  nIndex[2];
	INT  nThread[3];
	INT  nThreads[3];
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread[2];

	if (!pDatabaseTCProcedure->GetSize())
	{
		if ((pDatabaseTCProcedureThread[0] = new CDatabaseTCProcedureThread))
		{
			if ((pDatabaseTCProcedureThread[1] = new CDatabaseTCProcedureThread))
			{
				pDatabaseTCProcedureThread[0]->SetName(STRING(IDS_TCPROCEDURE_DEFAULTTHREAD_NAME));
				pDatabaseTCProcedureThread[1]->SetName(STRING(IDS_TCPROCEDURE_DEFAULTTHREAD_NAME));
				pDatabaseTCProcedureThread[0]->SetAttributes(TCPROCEDURETHREAD_AUTHORITY_AUTOENABLED);
				pDatabaseTCProcedureThread[1]->SetAttributes(TCPROCEDURETHREAD_AUTHORITY_AUTOENABLED);
				pDatabaseTCProcedureThread[0]->SetState(TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING | TCPROCEDURETHREAD_AUTHORITY_ENABLED);
				pDatabaseTCProcedureThread[1]->SetState(TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING | TCPROCEDURETHREAD_AUTHORITY_ENABLED);
				if (m_cDatabaseTCProcedure[0].Copy(pDatabaseTCProcedure) && m_cDatabaseTCProcedure[1].Copy(pDatabaseTCProcedure))
				{
					if ((nIndex[0] = m_cDatabaseTCProcedure[0].Add(pDatabaseTCProcedureThread[0])) >= 0)
					{
						if ((nIndex[1] = m_cDatabaseTCProcedure[1].Add(pDatabaseTCProcedureThread[1])) >= 0)
						{
							EnumThreads();
							ShowInfo();
							return TRUE;
						}
						m_cDatabaseTCProcedure[0].RemoveAt(nIndex[0]);
					}
				}
				delete pDatabaseTCProcedureThread[1];
			}
			delete pDatabaseTCProcedureThread[0];
		}
		return FALSE;
	}
	for (nThread[0] = 0, nThreads[0] = (m_cDatabaseTCProcedure[0].GetSize() == pDatabaseTCProcedure->GetSize()) ? (INT)m_cDatabaseTCProcedure[0].GetSize() : -1; nThread[0] < nThreads[0]; nThread[0]++)
	{
		if ((pDatabaseTCProcedureThread[1] = ((pDatabaseTCProcedureThread[0] = m_cDatabaseTCProcedure[0].GetAt(nThread[0]))) ? pDatabaseTCProcedure->GetAt(nThread[0]) : (CDatabaseTCProcedureThread *)NULL) && pDatabaseTCProcedureThread[0]->GetName() == pDatabaseTCProcedureThread[1]->GetName() && pDatabaseTCProcedureThread[0]->GetDescription() == pDatabaseTCProcedureThread[1]->GetDescription() && pDatabaseTCProcedureThread[0]->GetComments() == pDatabaseTCProcedureThread[1]->GetComments() && pDatabaseTCProcedureThread[0]->GetActivationExpression() == pDatabaseTCProcedureThread[1]->GetActivationExpression() && pDatabaseTCProcedureThread[0]->GetAttributes() == pDatabaseTCProcedureThread[1]->GetAttributes() && pDatabaseTCProcedureThread[0]->GetState() == pDatabaseTCProcedureThread[1]->GetState()) continue;
		break;
	}
	if (nThread[0] != nThreads[0])
	{
		for (nThread[1] = 0, nThreads[1] = (INT)pDatabaseTCProcedure->GetSize(), m_cDatabaseTCProcedure[0].SetAttributes(pDatabaseTCProcedure->GetAttributes()), m_cDatabaseTCProcedure[0].RemoveAll(); nThread[1] < nThreads[1]; nThread[1]++)
		{
			if ((pDatabaseTCProcedureThread[1] = ((pDatabaseTCProcedureThread[0] = pDatabaseTCProcedure->GetAt(nThread[1]))) ? new CDatabaseTCProcedureThread : (CDatabaseTCProcedureThread *)NULL))
			{
				pDatabaseTCProcedureThread[1]->SetName(pDatabaseTCProcedureThread[0]->GetName());
				pDatabaseTCProcedureThread[1]->SetDescription(pDatabaseTCProcedureThread[0]->GetDescription());
				pDatabaseTCProcedureThread[1]->SetComments(pDatabaseTCProcedureThread[0]->GetComments());
				pDatabaseTCProcedureThread[1]->SetActivationExpression(pDatabaseTCProcedureThread[0]->GetActivationExpression());
				pDatabaseTCProcedureThread[1]->SetState((!pDatabaseTCProcedureThread[0]->GetState()) ? (TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING | TCPROCEDURETHREAD_AUTHORITY_ENABLED) : pDatabaseTCProcedureThread[0]->GetState());
				pDatabaseTCProcedureThread[1]->SetAttributes(pDatabaseTCProcedureThread[0]->GetAttributes());
				if (m_cDatabaseTCProcedure[0].Add(pDatabaseTCProcedureThread[1]) >= 0) continue;
				delete pDatabaseTCProcedureThread[1];
			}
			break;
		}
	}
	for (nThread[2] = 0, nThreads[2] = (INT)pDatabaseTCProcedure->GetSize(), m_cDatabaseTCProcedure[1].SetAttributes(pDatabaseTCProcedure->GetAttributes()), m_cDatabaseTCProcedure[1].RemoveAll(); nThread[2] < nThreads[2]; nThread[2]++)
	{
		if ((pDatabaseTCProcedureThread[1] = ((pDatabaseTCProcedureThread[0] = pDatabaseTCProcedure->GetAt(nThread[2]))) ? new CDatabaseTCProcedureThread : (CDatabaseTCProcedureThread *)NULL))
		{
			pDatabaseTCProcedureThread[1]->SetName(pDatabaseTCProcedureThread[0]->GetName());
			pDatabaseTCProcedureThread[1]->SetDescription(pDatabaseTCProcedureThread[0]->GetDescription());
			pDatabaseTCProcedureThread[1]->SetComments(pDatabaseTCProcedureThread[0]->GetComments());
			pDatabaseTCProcedureThread[1]->SetActivationExpression(pDatabaseTCProcedureThread[0]->GetActivationExpression());
			pDatabaseTCProcedureThread[1]->SetState((!pDatabaseTCProcedureThread[0]->GetState()) ? (TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING | TCPROCEDURETHREAD_AUTHORITY_ENABLED) : pDatabaseTCProcedureThread[0]->GetState());
			pDatabaseTCProcedureThread[1]->SetAttributes(pDatabaseTCProcedureThread[0]->GetAttributes());
			if (m_cDatabaseTCProcedure[1].Add(pDatabaseTCProcedureThread[1]) >= 0) continue;
			delete pDatabaseTCProcedureThread[1];
		}
		break;
	}
	if (nThread[0] != nThreads[0] && nThread[1] == nThreads[1])
	{
		EnumThreads();
		ShowInfo();
	}
	return(((nThread[0] == nThreads[0] || nThread[1] == nThreads[1]) && nThread[2] == nThreads[2]) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesThreadsDialog::GetInfo(CDatabaseTCProcedure *pDatabaseTCProcedure) CONST
{
	INT  nThread;
	INT  nThreads;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread[2];

	for (nThread = 0, nThreads = (INT)m_cDatabaseTCProcedure[0].GetSize(); nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread[0] = m_cDatabaseTCProcedure[0].GetAt(nThread)))
		{
			if ((pDatabaseTCProcedureThread[1] = pDatabaseTCProcedure->GetAt(nThread)))
			{
				if (pDatabaseTCProcedureThread[0]->GetName() == pDatabaseTCProcedureThread[1]->GetName())
				{
					pDatabaseTCProcedureThread[1]->SetDescription(pDatabaseTCProcedureThread[0]->GetDescription());
					pDatabaseTCProcedureThread[1]->SetComments(pDatabaseTCProcedureThread[0]->GetComments());
					pDatabaseTCProcedureThread[1]->SetActivationExpression(pDatabaseTCProcedureThread[0]->GetActivationExpression());
					pDatabaseTCProcedureThread[1]->SetAttributes(pDatabaseTCProcedureThread[0]->GetAttributes());
					pDatabaseTCProcedureThread[1]->SetState(pDatabaseTCProcedureThread[0]->GetState());
					continue;
				}
				pDatabaseTCProcedure->RemoveAt(nThread);
				delete pDatabaseTCProcedureThread[1];
			}
			if ((pDatabaseTCProcedureThread[1] = new CDatabaseTCProcedureThread))
			{
				if (pDatabaseTCProcedureThread[1]->Copy(pDatabaseTCProcedureThread[0]) && pDatabaseTCProcedure->Add(pDatabaseTCProcedureThread[1]) >= 0) continue;
				delete pDatabaseTCProcedureThread[1];
			}
		}
		break;
	}
	while (m_cDatabaseTCProcedure[0].GetSize() < pDatabaseTCProcedure->GetSize())
	{
		if ((pDatabaseTCProcedureThread[0] = pDatabaseTCProcedure->GetAt((INT)pDatabaseTCProcedure->GetUpperBound())))
		{
			pDatabaseTCProcedure->RemoveAt(pDatabaseTCProcedure->GetUpperBound());
			delete pDatabaseTCProcedureThread[0];
			continue;
		}
		break;
	}
	return((nThread == nThreads) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesThreadsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_THREADS_DESCRIPTION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_THREADS_COMMENTS, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_THREADS_ACTIVATIONEXPRESSION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_THREADS_AUTOENABLED, bCheck);
}

CTCProcedurePropertiesThreadView *CTCProcedurePropertiesThreadsDialog::GetParent() CONST
{
	return((CTCProcedurePropertiesThreadView *)CLocaleDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesThreadsDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParent()->GetParent()->GetParent()->GetParent();
}

BOOL CTCProcedurePropertiesThreadsDialog::EnumThreads()
{
	INT  nThread;
	INT  nThreads;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, CB_RESETCONTENT);
	for (nThread = 0, nThreads = (INT)m_cDatabaseTCProcedure[0].GetSize(); nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure[0].GetAt(nThread)))
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTCProcedureThread->GetName());
			continue;
		}
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, CB_GETCOUNT) == nThreads) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesThreadsDialog::ShowInfo()
{
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, CB_SETCURSEL, (WPARAM)GetParentDisplay()->GetSelectedTCThreadID());
	ShowThreadDetails();
}

VOID CTCProcedurePropertiesThreadsDialog::ShowThreadDetails()
{
	UINT  nState;
	UINT  nAttributes;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_THREADS_AUTOENABLED, (pDatabaseTCProcedureThread->GetAttributes() & TCPROCEDURETHREAD_AUTHORITY_AUTOENABLED) ? TRUE : FALSE);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTCProcedureThread->GetName()));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_DESCRIPTION)->SetWindowText(pDatabaseTCProcedureThread->GetDescription());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_COMMENTS)->SetWindowText(pDatabaseTCProcedureThread->GetComments());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_ACTIVATIONEXPRESSION)->SetWindowText(pDatabaseTCProcedureThread->GetActivationExpression());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_EXECUTIONMODE)->SetWindowText(((nAttributes = m_cDatabaseTCProcedure[0].GetAttributes()) & TCPROCEDURE_EXECUTIONMODE_AUTOMATIC) ? STRING(IDS_TCPROCEDURE_EXECUTIONMODE_AUTOMATIC) : ((nAttributes & TCPROCEDURE_EXECUTIONMODE_SINGLESTEP) ? STRING(IDS_TCPROCEDURE_EXECUTIONMODE_SINGLESTEP) : ((nAttributes & TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS) ? STRING(IDS_TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS) : ((nAttributes & TCPROCEDURE_EXECUTIONMODE_COMMANDS) ? STRING(IDS_TCPROCEDURE_EXECUTIONMODE_COMMANDS) : m_szStatus[0]))));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_AUTHORITY)->SetWindowText(((nState = pDatabaseTCProcedureThread->GetState()) & TCPROCEDURETHREAD_AUTHORITY_ENABLED) ? STRING(IDS_TCPROCEDURETHREAD_AUTHORITY_ENABLED) : ((nState & TCPROCEDURETHREAD_AUTHORITY_DISABLED) ? STRING(IDS_TCPROCEDURETHREAD_AUTHORITY_DISABLED) : m_szStatus[1]));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_RUNSTATE)->SetWindowText((nState & TCPROCEDURETHREAD_RUNNINGSTATE_RUNNING) ? STRING(IDS_TCPROCEDURETHREAD_RUNNINGSTATE_RUNNING) : ((nState & TCPROCEDURETHREAD_RUNNINGSTATE_STOPPED) ? STRING(IDS_TCPROCEDURETHREAD_RUNNINGSTATE_STOPPED) : ((nState & TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING) ? STRING(IDS_TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING) : m_szStatus[2])));
	}
	else
	{
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_THREADS_AUTOENABLED, FALSE);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, CB_SETCURSEL, (WPARAM)-1);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_DESCRIPTION)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_COMMENTS)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_ACTIVATIONEXPRESSION)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_EXECUTIONMODE)->SetWindowText(m_szStatus[0]);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_AUTHORITY)->SetWindowText(m_szStatus[1]);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_RUNSTATE)->SetWindowText(m_szStatus[2]);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD) && !GetParentDisplay()->IsTesting() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVE)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVE) && !GetParentDisplay()->IsTesting() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVEALL)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVEALL) && !GetParentDisplay()->IsTesting() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

BOOL CTCProcedurePropertiesThreadsDialog::CheckButton(UINT nButtonID) CONST
{
	CString  szName;

	if (nButtonID == IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD)
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME)->GetWindowText(szName);
		return((m_cDatabaseTCProcedure[0].Find(szName) < 0) ? !szName.IsEmpty() : FALSE);
	}
	if (nButtonID == IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVE  &&  GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME)->SendMessage(CB_GETCURSEL) > 0) return TRUE;
	return((nButtonID == IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVEALL  &&  GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME)->SendMessage(CB_GETCOUNT) > 1) ? TRUE : FALSE);
}

CDatabaseTCProcedureThread *CTCProcedurePropertiesThreadsDialog::GetThread() CONST
{
	CString  szName;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME)->GetWindowText(szName);
	return m_cDatabaseTCProcedure[0].GetAt(m_cDatabaseTCProcedure[0].Find(szName));
}

BOOL CTCProcedurePropertiesThreadsDialog::IsModified() CONST
{
	INT  nThread;
	INT  nThreads;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread[2];

	for (nThread = 0, nThreads = (m_cDatabaseTCProcedure[0].GetSize() == m_cDatabaseTCProcedure[1].GetSize()) ? (INT)m_cDatabaseTCProcedure[0].GetSize() : -1; nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread[1] = ((pDatabaseTCProcedureThread[0] = m_cDatabaseTCProcedure[0].GetAt(nThread))) ? m_cDatabaseTCProcedure[1].GetAt(nThread) : (CDatabaseTCProcedureThread *)NULL) && pDatabaseTCProcedureThread[0]->GetName() == pDatabaseTCProcedureThread[1]->GetName() && pDatabaseTCProcedureThread[0]->GetDescription() == pDatabaseTCProcedureThread[1]->GetDescription() && pDatabaseTCProcedureThread[0]->GetComments() == pDatabaseTCProcedureThread[1]->GetComments() && pDatabaseTCProcedureThread[0]->GetActivationExpression() == pDatabaseTCProcedureThread[1]->GetActivationExpression() && pDatabaseTCProcedureThread[0]->GetAttributes() == pDatabaseTCProcedureThread[1]->GetAttributes() && pDatabaseTCProcedureThread[0]->GetState() == pDatabaseTCProcedureThread[1]->GetState()) continue;
		break;
	}
	return((nThread != nThreads) ? TRUE : FALSE);
}

void CTCProcedurePropertiesThreadsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesThreadsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesThreadsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesThreadsDialog)
	ON_WM_SHOWWINDOW()
	ON_WM_TIMER()
	ON_WM_HELPINFO()
	ON_MESSAGE(DM_GETDEFID, OnGetDefID)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_THREADS_AUTOENABLED, OnAutoEnabled)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_THREADS_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, OnEditchangeName)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, OnSelchangeName)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_THREADS_DESCRIPTION, OnEditchangeDescription)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_THREADS_COMMENTS, OnEditchangeComments)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_THREADS_ACTIVATIONEXPRESSION, OnEditchangeActivationExpression)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesThreadsDialog message handlers

BOOL CTCProcedurePropertiesThreadsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_EXECUTIONMODE)->GetWindowText(m_szStatus[0]);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_AUTHORITY)->GetWindowText(m_szStatus[1]);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_RUNSTATE)->GetWindowText(m_szStatus[2]);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_COMMENTS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_COMMENTS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_ACTIVATIONEXPRESSION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_ACTIVATIONEXPRESSION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_AUTOENABLED)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_EXECUTIONMODE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_EXECUTIONMODE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_AUTHORITY_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_AUTHORITY)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_RUNSTATE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_RUNSTATE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_HELP)->EnableWindow();
	EnumThreads();
	AdjustToPrivileges();
	ShowInfo();
	return TRUE;
}

LRESULT CTCProcedurePropertiesThreadsDialog::OnGetDefID(WPARAM wParam, LPARAM lParam)
{
	return MAKELONG(0, DC_HASDEFID);
}

BOOL CTCProcedurePropertiesThreadsDialog::OnCommand(WPARAM wParam, LPARAM lParam)
{
	if (wParam == IDCANCEL) return TRUE;
	return CLocaleDialog::OnCommand(wParam, lParam);
}

void CTCProcedurePropertiesThreadsDialog::OnShowWindow(BOOL bShow, UINT nStatus)
{
	CDatabaseTCProcedure  cDatabaseTCProcedure;

	if (bShow)
	{
		for (SetTimer(TCPROCEDUREPROPERTIESTHREADS_UPDATE_TIMERID, TCPROCEDUREPROPERTIESTHREADS_UPDATE_TIMEOUT, NULL); GetParentDisplay()->GetProcedure(&cDatabaseTCProcedure); )
		{
			m_cDatabaseTCProcedure[0].SetAttributes(cDatabaseTCProcedure.GetAttributes());
			break;
		}
		ShowInfo();
	}
	for (; !bShow; )
	{
		KillTimer(TCPROCEDUREPROPERTIESTHREADS_UPDATE_TIMERID);
		break;
	}
	CLocaleDialog::OnShowWindow(bShow, nStatus);
}

void CTCProcedurePropertiesThreadsDialog::OnTimer(UINT_PTR nEventID)
{
	UINT  nLine;
	UINT  nState;
	CString  szName;
	CUIntArray  nStepStates;
	CStringArray  szStepNames;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME)->GetWindowText(szName);
	if (GetParentDisplay()->CheckProcedureTestState(szName, nState, szStepNames, nStepStates, nLine))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_AUTHORITY)->SetWindowText((nState & TCPROCEDURETHREAD_AUTHORITY_ENABLED) ? STRING(IDS_TCPROCEDURETHREAD_AUTHORITY_ENABLED) : STRING(IDS_TCPROCEDURETHREAD_AUTHORITY_DISABLED));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_RUNSTATE)->SetWindowText(((nState & TCPROCEDURETHREAD_RUNNINGSTATE_RUNNING) != TCPROCEDURETHREAD_RUNNINGSTATE_RUNNING) ? ((nState & TCPROCEDURETHREAD_RUNNINGSTATE_STOPPED) ? STRING(IDS_TCPROCEDURETHREAD_RUNNINGSTATE_STOPPED) : STRING(IDS_TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING)) : STRING(IDS_TCPROCEDURETHREAD_RUNNINGSTATE_RUNNING));
	}
	else
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_AUTHORITY)->SetWindowText(((nState = ((pDatabaseTCProcedureThread = GetThread())) ? pDatabaseTCProcedureThread->GetState() : 0) & TCPROCEDURETHREAD_AUTHORITY_ENABLED) ? STRING(IDS_TCPROCEDURETHREAD_AUTHORITY_ENABLED) : ((nState & TCPROCEDURETHREAD_AUTHORITY_DISABLED) ? STRING(IDS_TCPROCEDURETHREAD_AUTHORITY_DISABLED) : m_szStatus[1]));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_STATE_RUNSTATE)->SetWindowText((nState & TCPROCEDURETHREAD_RUNNINGSTATE_RUNNING) ? STRING(IDS_TCPROCEDURETHREAD_RUNNINGSTATE_RUNNING) : ((nState & TCPROCEDURETHREAD_RUNNINGSTATE_STOPPED) ? STRING(IDS_TCPROCEDURETHREAD_RUNNINGSTATE_STOPPED) : ((nState & TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING) ? STRING(IDS_TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING) : m_szStatus[2])));
	}
	CLocaleDialog::OnTimer(nEventID);
}

void CTCProcedurePropertiesThreadsDialog::OnAdd()
{
	INT  nIndex;
	CString  szName;
	CString  szComments;
	CString  szExpression;
	CString  szDescription;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = new CDatabaseTCProcedureThread))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME)->GetWindowText(szName);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_DESCRIPTION)->GetWindowText(szDescription);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_COMMENTS)->GetWindowText(szComments);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_ACTIVATIONEXPRESSION)->GetWindowText(szExpression);
		if (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, CB_INSERTSTRING, (WPARAM)(nIndex = GetParentDisplay()->GetSelectedTCThreadID() + 1), (LPARAM)(LPCTSTR)szName) >= 0)
		{
			for (pDatabaseTCProcedureThread->SetName(szName), pDatabaseTCProcedureThread->SetDescription(szDescription), pDatabaseTCProcedureThread->SetComments(szComments), pDatabaseTCProcedureThread->SetActivationExpression(szExpression), pDatabaseTCProcedureThread->SetAttributes((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_THREADS_AUTOENABLED)) ? TCPROCEDURETHREAD_AUTHORITY_AUTOENABLED : 0), pDatabaseTCProcedureThread->SetState(TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING | TCPROCEDURETHREAD_AUTHORITY_ENABLED), m_cDatabaseTCProcedure[0].InsertAt(nIndex, pDatabaseTCProcedureThread, 1); GetParentDisplay()->SetProcedure(&m_cDatabaseTCProcedure[0], FALSE); )
			{
				GetParentDisplay()->SetSelectedTCThreadID(nIndex);
				break;
			}
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, CB_SETCURSEL, nIndex);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME)->SetFocus();
			ShowInfo();
			return;
		}
		delete pDatabaseTCProcedureThread;
	}
}

void CTCProcedurePropertiesThreadsDialog::OnRemove()
{
	INT  nIndex;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		if (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, CB_DELETESTRING, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTCProcedureThread->GetName())) >= 0)
		{
			for (GetParentDisplay()->SetSelectedTCThreadID(); (nIndex = m_cDatabaseTCProcedure[0].Find(pDatabaseTCProcedureThread->GetName())) >= 0; )
			{
				m_cDatabaseTCProcedure[0].RemoveAt(nIndex);
				delete pDatabaseTCProcedureThread;
				break;
			}
			GetParentDisplay()->SetProcedure(&m_cDatabaseTCProcedure[0], FALSE);
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, CB_SETCURSEL);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME)->SetFocus();
			ShowInfo();
		}
	}
}

void CTCProcedurePropertiesThreadsDialog::OnRemoveAll()
{
	INT  nThread;
	INT  nThreads;
	CDatabaseTCProcedure  cDatabaseTCProcedure;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread[2];
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread[0] = new CDatabaseTCProcedureThread))
	{
		for (pDatabaseTCProcedureThread[0]->SetName(STRING(IDS_TCPROCEDURE_DEFAULTTHREAD_NAME)), pDatabaseTCProcedureThread[0]->SetAttributes(TCPROCEDURETHREAD_AUTHORITY_AUTOENABLED), pDatabaseTCProcedureThread[0]->SetState(TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING | TCPROCEDURETHREAD_AUTHORITY_ENABLED); (pDatabaseTCProcedureThread[1] = m_cDatabaseTCProcedure[0].GetAt(m_cDatabaseTCProcedure[0].Find(pDatabaseTCProcedureThread[0]->GetName()))) && pDatabaseTCProcedureThread[1]->Copy(pDatabaseTCProcedureThread[0]); )
		{
			for (nThread = 0, nThreads = (INT)m_cDatabaseTCProcedure[0].GetSize(); nThread < nThreads; nThread++)
			{
				if ((pDatabaseTCProcedureThread[1] = m_cDatabaseTCProcedure[0].GetAt(nThread)))
				{
					if (pDatabaseTCProcedureThread[0]->GetName() != pDatabaseTCProcedureThread[1]->GetName())
					{
						m_cDatabaseTCProcedure[0].RemoveAt(nThread);
						delete pDatabaseTCProcedureThread[1];
						nThreads--;
						nThread--;
					}
				}
			}
			if ((pDatabaseTCProcedureThread[1] = (GetParentDisplay()->GetProcedure(&cDatabaseTCProcedure)) ? cDatabaseTCProcedure.GetAt(cDatabaseTCProcedure.Find(pDatabaseTCProcedureThread[0]->GetName())) : (CDatabaseTCProcedureThread *)NULL) && pDatabaseTCProcedureThread[1]->Copy(pDatabaseTCProcedureThread[0]))
			{
				GetParentDisplay()->SetProcedure(&cDatabaseTCProcedure);
				GetParentDisplay()->SetSelectedTCThreadID();
			}
			EnumThreads();
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, CB_SETCURSEL);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME)->SetFocus();
			ShowInfo();
			break;
		}
		delete pDatabaseTCProcedureThread[0];
	}
}

void CTCProcedurePropertiesThreadsDialog::OnAutoEnabled()
{
	UINT  nAttributes;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		nAttributes = pDatabaseTCProcedureThread->GetAttributes() & ~TCPROCEDURETHREAD_AUTHORITY_AUTOENABLED;
		nAttributes |= (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_THREADS_AUTOENABLED)) ? TCPROCEDURETHREAD_AUTHORITY_AUTOENABLED : 0;
		pDatabaseTCProcedureThread->SetAttributes(nAttributes);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD) && !GetParentDisplay()->IsTesting() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesThreadsDialog::OnEditchangeName()
{
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD) && !GetParentDisplay()->IsTesting() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVE)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVE) && !GetParentDisplay()->IsTesting() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVEALL)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVEALL) && !GetParentDisplay()->IsTesting() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesThreadsDialog::OnEditchangeDescription()
{
	CString  szDescription;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_DESCRIPTION)->GetWindowText(szDescription);
		pDatabaseTCProcedureThread->SetDescription(szDescription);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD) && !GetParentDisplay()->IsTesting() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesThreadsDialog::OnEditchangeComments()
{
	CString  szComments;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_COMMENTS)->GetWindowText(szComments);
		pDatabaseTCProcedureThread->SetComments(szComments);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD) && !GetParentDisplay()->IsTesting() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesThreadsDialog::OnEditchangeActivationExpression()
{
	CString  szCode;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_ACTIVATIONEXPRESSION)->GetWindowText(szCode);
		pDatabaseTCProcedureThread->SetActivationExpression(szCode);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD) && !GetParentDisplay()->IsTesting() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesThreadsDialog::OnSelchangeName()
{
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME)->SetWindowText(Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_THREADS_NAME, CB_GETCURSEL)));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_THREADS_ADD) && !GetParentDisplay()->IsTesting() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVE)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVE) && !GetParentDisplay()->IsTesting() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVEALL)->EnableWindow(CheckButton(IDC_TCPROCEDURE_PROPERTIES_THREADS_REMOVEALL) && !GetParentDisplay()->IsTesting() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	ShowThreadDetails();
}

BOOL CTCProcedurePropertiesThreadsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESTHREADSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesThreadsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESTHREADSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesStepsDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesStepsDialog, CLocaleDialog)

CTCProcedurePropertiesStepsDialog::CTCProcedurePropertiesStepsDialog(CWnd *pParentWnd) : CLocaleDialog(CTCProcedurePropertiesStepsDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesStepsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
	m_bUpdate = FALSE;
}

BOOL CTCProcedurePropertiesStepsDialog::SetInfo(CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	return TRUE;
}

BOOL CTCProcedurePropertiesStepsDialog::GetInfo(CDatabaseTCProcedure *pDatabaseTCProcedure) CONST
{
	return TRUE;
}

VOID CTCProcedurePropertiesStepsDialog::UpdateSteps(CONST CPtrArray &pSteps)
{
	if (!m_bUpdate)
	{
		for (m_pSteps.Copy(pSteps); EnumSteps(); )
		{
			ShowInfo();
			break;
		}
	}
}

VOID CTCProcedurePropertiesStepsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_DESCRIPTION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_COMMENTS, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIME, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_MESSAGE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_EXPRESSION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_PREEXECUTIONEXPRESSION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TYPE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_MESSAGE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_EXPRESSION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTO, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_EXITPROCEDURE, bCheck);
}

CTCProcedurePropertiesThreadView *CTCProcedurePropertiesStepsDialog::GetParent() CONST
{
	return((CTCProcedurePropertiesThreadView *)CLocaleDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesStepsDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParent()->GetParent()->GetParent()->GetParent();
}

BOOL CTCProcedurePropertiesStepsDialog::EnumSteps()
{
	INT  nStep;
	INT  nSteps;
	INT  nCount;
	CTCProcedureDocumentItem  *pStep;
	CTCProcedureDocumentLabelItem  *pLabelItem;

	for (nStep = 0, nSteps = (INT)m_pSteps.GetSize(), nCount = 0; nStep < nSteps; nStep++)
	{
		if ((pStep = (CTCProcedureDocumentItem *)m_pSteps.GetAt(nStep)) && !pStep->GetName().IsEmpty())
		{
			for (; Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME), nCount) != pStep->GetName(); )
			{
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME, CB_INSERTSTRING, nCount, (LPARAM)(LPCTSTR)pStep->GetName());
				break;
			}
			for (; pStep->IsActivated(); )
			{
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME, CB_SETCURSEL, nCount);
				break;
			}
			nCount++;
		}
	}
	while (nCount < SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME, CB_GETCOUNT))
	{
		if (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME, CB_DELETESTRING, nCount) < 0) break;
		continue;
	}
	for (nStep = 0, nSteps = (INT)m_pSteps.GetSize(), nCount = 0; nStep < nSteps; nStep++)
	{
		if ((pLabelItem = ((pStep = (CTCProcedureDocumentItem *)m_pSteps.GetAt(nStep)) && pStep->GetType() == TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? (CTCProcedureDocumentLabelItem *)pStep : (CTCProcedureDocumentLabelItem *)NULL))
		{
			for (; Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL), nCount) != pLabelItem->GetJumpLabel(); )
			{
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL, CB_INSERTSTRING, nCount, (LPARAM)(LPCTSTR)pLabelItem->GetJumpLabel());
				break;
			}
			nCount++;
		}
	}
	while (nCount < SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL, CB_GETCOUNT))
	{
		if (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL, CB_DELETESTRING, nCount) < 0) break;
		continue;
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesStepsDialog::EnumStepStates()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_TRIGGER)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_BODY)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_CONFIRMATION)) >= 0) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesStepsDialog::EnumTriggerTypes()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_NONE)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_ATTIME)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_NOTAFTERTIME)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_TIMEOFFSET)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_TIMEDELAY)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_SYNCOBJECT)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_EXPRESSION)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_OPERATOR)) >= 0) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesStepsDialog::EnumConfirmationTypes()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_NONE)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_COMMAND)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_EXPRESSION)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_OPERATOR)) >= 0) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesStepsDialog::EnumSynchronizationObjects()
{
	INT  nObject;
	INT  nObjects;
	CStringArray  szObjects;

	for (nObject = 0, nObjects = GetParentDisplay()->GetFlowchartView()->EnumSynchronizationObjects(szObjects), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT, CB_RESETCONTENT); nObject < nObjects; nObject++)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szObjects.GetAt(nObject));
		continue;
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT, CB_GETCOUNT) == nObjects) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesStepsDialog::EnumFailureStates()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILURESTATE_TRIGGER)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILURESTATE_BODY)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILURESTATE_CONFIRMATION)) >= 0) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesStepsDialog::EnumFailureOptions()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_AUTOMATIC)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_SUCCESS)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_FAILURE)) >= 0) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesStepsDialog::ShowInfo()
{
	CString  szName;
	CString  szLabel;
	CString  szMessage;
	CString  szComments;
	CString  szExpression;
	CStringArray  szFailureLabels;
	CTCProcedureDocumentItem  *pStep;

	if ((pStep = GetStep()))
	{
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE, (pStep->GetFailureOptions() != TCPROCEDURETHREADSTEP_FAILUREOPTION_NONE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTO, (pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL  &&  pStep->GetFailureLabels(szFailureLabels) > 0 && !szFailureLabels.GetAt(0).IsEmpty()) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_EXITPROCEDURE, (pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL  &&  !IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTO)) ? TRUE : FALSE);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pStep->GetName()));
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE, CB_SETCURSEL, (pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_NONE) : ((pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_ATTIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_ATTIME) : ((pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_NOTAFTERTIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_NOTAFTERTIME) : ((pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_TIMEOFFSET) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_TIMEOFFSET) : ((pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_TIMEDELAY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_TIMEDELAY) : ((pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_SYNCOBJECT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_SYNCOBJECT) : ((pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_EXPRESSION) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_EXPRESSION) : ((pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_OPERATOR) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_OPERATOR) : EMPTYSTRING))))))))) : (WPARAM)-1);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT, CB_SETCURSEL, (pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_SYNCOBJECT) ? (LPCTSTR)pStep->GetTriggerSynchronizationObject() : EMPTYSTRING)) : (WPARAM)-1);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TYPE, CB_SETCURSEL, (pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pStep->GetConfirmationType() & TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_NONE) : ((pStep->GetConfirmationType() & TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_COMMAND) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_COMMAND) : ((pStep->GetConfirmationType() & TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_EXPRESSION) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_EXPRESSION) : ((pStep->GetConfirmationType() & TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_OPERATOR) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_OPERATOR) : EMPTYSTRING))))) : (WPARAM)-1);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE, CB_SETCURSEL, (pStep->GetFailureOptions() != TCPROCEDURETHREADSTEP_FAILUREOPTION_NONE) ? (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILURESTATE_TRIGGER)) : (WPARAM)-1);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, CB_SETCURSEL, (pStep->GetFailureOptions() != TCPROCEDURETHREADSTEP_FAILUREOPTION_NONE) ? (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pStep->GetFailureOptions() & TCPROCEDURETHREADSTEP_FAILUREOPTION_TRIGGERSUCCESS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_SUCCESS) : ((pStep->GetFailureOptions() & TCPROCEDURETHREADSTEP_FAILUREOPTION_TRIGGERFAILURE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_FAILURE) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_AUTOMATIC)))) : (WPARAM)-1);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE, CB_SETCURSEL, (pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_TRIGGER)) : (WPARAM)-1);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL, CB_SETCURSEL, (pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL  &&  szFailureLabels.GetSize() > 0) ? (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFailureLabels.GetAt(0)) : (WPARAM)-1);
		Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIME), (pStep->GetTriggerType() & (TCPROCEDURETHREADSTEP_TRIGGERTYPE_ATTIME | TCPROCEDURETHREADSTEP_TRIGGERTYPE_NOTAFTERTIME)) ? CTimeKey(pStep->GetTriggerTime().GetTimeInSeconds()) : CTime::GetCurrentTime().GetTime());
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET), pStep->GetTriggerTimeOffset().GetTotalSeconds());
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY), pStep->GetTriggerTimeDelay().GetTotalSeconds());
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW), pStep->GetTriggerTimeout().GetTotalSeconds());
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW), pStep->GetConfirmationTimeout().GetTotalSeconds());
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME)->GetWindowText(szName); pStep->GetName() != szName; )
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME)->SetWindowText(pStep->GetName());
			break;
		}
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_DESCRIPTION)->GetWindowText(szLabel); pStep->GetLabel() != szLabel; )
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_DESCRIPTION)->SetWindowText(pStep->GetLabel());
			break;
		}
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_COMMENTS)->GetWindowText(szComments); pStep->GetComments() != szComments; )
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_COMMENTS)->SetWindowText(pStep->GetComments());
			break;
		}
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_MESSAGE)->GetWindowText(szMessage); pStep->GetTriggerMessage() != szMessage; )
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_MESSAGE)->SetWindowText(pStep->GetTriggerMessage());
			break;
		}
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_EXPRESSION)->GetWindowText(szExpression); pStep->GetTriggerExpression() != szExpression; )
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_EXPRESSION)->SetWindowText(pStep->GetTriggerExpression());
			break;
		}
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_PREEXECUTIONEXPRESSION)->GetWindowText(szExpression); pStep->GetPreexecutionExpression() != szExpression; )
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_PREEXECUTIONEXPRESSION)->SetWindowText(pStep->GetPreexecutionExpression());
			break;
		}
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_MESSAGE)->GetWindowText(szMessage); pStep->GetConfirmationMessage() != szMessage; )
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_MESSAGE)->SetWindowText(pStep->GetConfirmationMessage());
			break;
		}
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_EXPRESSION)->GetWindowText(szExpression); pStep->GetConfirmationExpression() != szExpression; )
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_EXPRESSION)->SetWindowText(pStep->GetConfirmationExpression());
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_MESSAGE_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_MESSAGE)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW_SECONDS_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_PREEXECUTIONEXPRESSION_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_PREEXECUTIONEXPRESSION)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TYPE_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TYPE)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_MESSAGE_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_MESSAGE)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW_SECONDS_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL  &&  pStep->GetFailureOptions() != TCPROCEDURETHREADSTEP_FAILUREOPTION_NONE) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL  &&  pStep->GetFailureOptions() != TCPROCEDURETHREADSTEP_FAILUREOPTION_NONE) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL  &&  pStep->GetFailureOptions() != TCPROCEDURETHREADSTEP_FAILUREOPTION_NONE) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTO)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTO) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_EXITPROCEDURE)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIME_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL && (pStep->GetTriggerType() & (TCPROCEDURETHREADSTEP_TRIGGERTYPE_ATTIME | TCPROCEDURETHREADSTEP_TRIGGERTYPE_NOTAFTERTIME))) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIME)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL && (pStep->GetTriggerType() & (TCPROCEDURETHREADSTEP_TRIGGERTYPE_ATTIME | TCPROCEDURETHREADSTEP_TRIGGERTYPE_NOTAFTERTIME))) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL && (pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_TIMEOFFSET)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL && (pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_TIMEOFFSET)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET_SECONDS_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL && (pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_TIMEOFFSET)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL && (pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_TIMEDELAY)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL && (pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_TIMEDELAY)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY_SECONDS_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL && (pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_TIMEDELAY)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL && (pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_SYNCOBJECT)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL && (pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_SYNCOBJECT)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_EXPRESSION_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL && (pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_EXPRESSION)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_EXPRESSION)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL && (pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_EXPRESSION)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_EXPRESSION_STATIC)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL && (pStep->GetConfirmationType() & TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_EXPRESSION)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_EXPRESSION)->EnableWindow((pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL && (pStep->GetConfirmationType() & TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_EXPRESSION)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_SPECIFICPROPERTIES)->EnableWindow(pStep->HasProperties());
		return;
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTO, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_EXITPROCEDURE, TRUE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TYPE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_TRIGGER)));
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_DESCRIPTION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_COMMENTS)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_MESSAGE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_EXPRESSION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_PREEXECUTIONEXPRESSION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_MESSAGE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_EXPRESSION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_MESSAGE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_MESSAGE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW_SECONDS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_PREEXECUTIONEXPRESSION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_PREEXECUTIONEXPRESSION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TYPE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_MESSAGE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_MESSAGE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW_SECONDS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTO)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_EXITPROCEDURE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIME_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET_SECONDS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY_SECONDS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_EXPRESSION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_EXPRESSION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_EXPRESSION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_EXPRESSION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_SPECIFICPROPERTIES)->EnableWindow(FALSE);
}

VOID CTCProcedurePropertiesStepsDialog::UpdateAllSteps()
{
	for (m_bUpdate = TRUE; m_bUpdate; )
	{
		GetParentDisplay()->GetFlowchartView()->UpdateSteps();
		m_bUpdate = FALSE;
		break;
	}
}

CTCProcedureDocumentItem *CTCProcedurePropertiesStepsDialog::GetStep() CONST
{
	INT  nStep;
	INT  nSteps;
	CString  szName;
	CTCProcedureDocumentItem  *pStep;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME)->GetWindowText(szName);
	for (nStep = 0, nSteps = (INT)m_pSteps.GetSize(); nStep < nSteps; nStep++)
	{
		if ((pStep = (CTCProcedureDocumentItem *)m_pSteps.GetAt(nStep)) && pStep->IsActivated()) return pStep;
		continue;
	}
	for (nStep = 0; nStep < nSteps; nStep++)
	{
		if ((pStep = (CTCProcedureDocumentItem *)m_pSteps.GetAt(nStep)) && pStep->GetName() == szName  &&  !szName.IsEmpty()) return pStep;
		continue;
	}
	return((CTCProcedureDocumentItem *)NULL);
}

void CTCProcedurePropertiesStepsDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesStepsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesStepsDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesStepsDialog)
	ON_WM_HELPINFO()
	ON_MESSAGE(DM_GETDEFID, OnGetDefID)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE, OnFailureOptions)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTO, OnFailureGoto)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_EXITPROCEDURE, OnFailureExit)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_STEPS_SPECIFICPROPERTIES, OnProperties)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_STEPS_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_DESCRIPTION, OnEditchangeDescription)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_COMMENTS, OnEditchangeComments)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_MESSAGE, OnEditchangeTriggerMessage)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_EXPRESSION, OnEditchangeTriggerExpression)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_PREEXECUTIONEXPRESSION, OnEditchangePreexecutionExpression)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_MESSAGE, OnEditchangeConfirmationMessage)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_EXPRESSION, OnEditchangeConfirmationExpression)
	ON_CBN_EDITCHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME, OnEditchangeName)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME, OnSelchangeName)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE, OnSelchangeTriggerType)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT, OnSelchangeTriggerSynchronizationObject)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TYPE, OnSelchangeConfirmationType)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE, OnSelchangeFailureOptionsState)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, OnSelchangeFailureOptionsAction)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE, OnSelchangeFailureState)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL, OnSelchangeFailureLabel)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIME, OnSpinchangeTriggerTime)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET, OnSpinchangeTriggerTimeOffset)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY, OnSpinchangeTriggerTimeDelay)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW, OnSpinchangeTriggerTimeWindow)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW, OnSpinchangeConfirmationTimeWindow)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesStepsDialog message handlers

BOOL CTCProcedurePropertiesStepsDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY), TCPROCEDUREPROPERTIESSTEPS_TRIGGERTIME_MINIMUMINTERVAL, TCPROCEDUREPROPERTIESSTEPS_TRIGGERTIME_MAXIMUMINTERVAL);
	Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET), TCPROCEDUREPROPERTIESSTEPS_TRIGGERTIME_MINIMUMINTERVAL, TCPROCEDUREPROPERTIESSTEPS_TRIGGERTIME_MAXIMUMINTERVAL);
	Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW), TCPROCEDUREPROPERTIESSTEPS_TRIGGERWINDOW_MINIMUMINTERVAL, TCPROCEDUREPROPERTIESSTEPS_TRIGGERWINDOW_MAXIMUMINTERVAL);
	Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW), TCPROCEDUREPROPERTIESSTEPS_CONFIRMATIONWINDOW_MINIMUMINTERVAL, TCPROCEDUREPROPERTIESSTEPS_CONFIRMATIONWINDOW_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_COMMENTS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_COMMENTS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_HELP)->EnableWindow();
	EnumStepStates();
	EnumTriggerTypes();
	EnumConfirmationTypes();
	EnumFailureStates();
	EnumFailureOptions();
	AdjustToPrivileges();
	ShowInfo();
	return TRUE;
}

LRESULT CTCProcedurePropertiesStepsDialog::OnGetDefID(WPARAM wParam, LPARAM lParam)
{
	return MAKELONG(0, DC_HASDEFID);
}

BOOL CTCProcedurePropertiesStepsDialog::OnCommand(WPARAM wParam, LPARAM lParam)
{
	if (wParam == IDCANCEL) return TRUE;
	return CLocaleDialog::OnCommand(wParam, lParam);
}

void CTCProcedurePropertiesStepsDialog::OnFailureOptions()
{
	CTCProcedureDocumentItem  *pStep;
	CHourglassCursor  cCursor;

	for (; (pStep = GetStep()); )
	{
		if (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE))
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pStep->GetFailureOptions() & TCPROCEDURETHREADSTEP_FAILUREOPTION_TRIGGERSUCCESS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_SUCCESS) : ((pStep->GetFailureOptions() & TCPROCEDURETHREADSTEP_FAILUREOPTION_TRIGGERFAILURE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_FAILURE) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_AUTOMATIC)))));
			break;
		}
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, CB_SETCURSEL, (WPARAM)-1);
		pStep->SetFailureOptions(TCPROCEDURETHREADSTEP_FAILUREOPTION_NONE);
		break;
	}
	if (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE))
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILURESTATE_TRIGGER)));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE)->SetFocus();
		return;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION)->EnableWindow(FALSE);
}

void CTCProcedurePropertiesStepsDialog::OnFailureGoto()
{
	CString  szStepState;
	CString  szFailureLabel;
	CStringArray  szFailureLabels;
	CTCProcedureDocumentItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE)->GetWindowText(szStepState);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL)->GetWindowText(szFailureLabel);
		for (pStep->GetFailureLabels(szFailureLabels); szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_TRIGGER); )
		{
			szFailureLabels.SetAtGrow(0, szFailureLabel);
			break;
		}
		for (; szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_BODY); )
		{
			szFailureLabels.SetAtGrow(1, szFailureLabel);
			break;
		}
		for (; szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_CONFIRMATION); )
		{
			szFailureLabels.SetAtGrow(2, szFailureLabel);
			break;
		}
		pStep->SetFailureLabels(szFailureLabels);
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTO, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_EXITPROCEDURE, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL)->EnableWindow();
}

void CTCProcedurePropertiesStepsDialog::OnFailureExit()
{
	CString  szStepState;
	CStringArray  szFailureLabels;
	CTCProcedureDocumentItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE)->GetWindowText(szStepState);
		for (pStep->GetFailureLabels(szFailureLabels); szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_TRIGGER); )
		{
			szFailureLabels.SetAtGrow(0, EMPTYSTRING);
			break;
		}
		for (; szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_BODY); )
		{
			szFailureLabels.SetAtGrow(1, EMPTYSTRING);
			break;
		}
		for (; szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_CONFIRMATION); )
		{
			szFailureLabels.SetAtGrow(2, EMPTYSTRING);
			break;
		}
		pStep->SetFailureLabels(szFailureLabels);
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTO, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_EXITPROCEDURE, TRUE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL)->EnableWindow(FALSE);
}

void CTCProcedurePropertiesStepsDialog::OnProperties()
{
	INT  nResult;
	CSize  sizeDesign;
	CStringArray  szObjects;
	CTCProcedureDocumentItem  *pStep[2];
	CTCProcedurePropertiesGotoDialog  cGotoDialog;
	CTCProcedurePropertiesLabelDialog  cLabelDialog;
	CTCProcedurePropertiesBranchDialog  cBranchDialog;
	CTCProcedurePropertiesSwitchDialog  cSwitchDialog;
	CTCProcedurePropertiesDoLoopDialog  cDoLoopDialog;
	CTCProcedurePropertiesForLoopDialog  cForLoopDialog;
	CTCProcedurePropertiesWhileLoopDialog  cWhileLoopDialog;
	CTCProcedurePropertiesLogMessageDialog  cLogMessageDialog;
	CTCProcedurePropertiesInjectAlertDialog  cInjectAlertDialog;
	CTCProcedurePropertiesSetArgumentsDialog  cSetArgumentsDialog;
	CTCProcedurePropertiesSetVariablesDialog  cSetVariablesDialog;
	CTCProcedurePropertiesSetParametersDialog  cSetParametersDialog;
	CTCProcedurePropertiesControlThreadDialog  cControlThreadDialog;
	CTCProcedurePropertiesCallProcedureDialog  cCallProcedureDialog;
	CTCProcedurePropertiesSendTCFunctionDialog  cSendTCFunctionDialog;
	CTCProcedurePropertiesSendTCSequenceDialog  cSendTCSequenceDialog;
	CTCProcedurePropertiesStartProcedureDialog  cStartProcedureDialog;
	CTCProcedurePropertiesUserInteractionDialog  cUserInteractionDialog;
	CTCProcedurePropertiesControlProcedureDialog  cControlProcedureDialog;
	CTCProcedurePropertiesWaitTimeIntervalDialog  cWaitTimeIntervalDialog;
	CTCProcedurePropertiesSetSynchronizationObjectDialog  cSetSynchronizationObjectDialog;
	CTCProcedurePropertiesWaitSynchronizationObjectDialog  cWaitSynchronizationObjectDialog;
	CTCProcedureDocumentUndoItem  cUndoItem;

	if ((pStep[0] = GetStep()))
	{
		if ((pStep[1] = new CTCProcedureDocumentItem))
		{
			for (pStep[1]->Copy(pStep[0]), sizeDesign.cx = pStep[0]->GetPosition().Width(), sizeDesign.cy = pStep[0]->GetPosition().Height(), GetParentDisplay()->GetFlowchartView()->EnumSynchronizationObjects(szObjects); pStep[0]->GetType() != 0; )
			{
				switch (pStep[0]->GetType())
				{
				case TCPROCEDURETHREADSTEP_FLOWCONTROL_BRANCH:
				{ nResult = cBranchDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_FLOWCONTROL_SWITCH:
				{ nResult = cSwitchDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_FLOWCONTROL_FORLOOP:
				{ nResult = cForLoopDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_FLOWCONTROL_DOLOOP:
				{ nResult = cDoLoopDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_FLOWCONTROL_WHILELOOP:
				{ nResult = cWhileLoopDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO:
				{ nResult = cGotoDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL:
				{ nResult = cLabelDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETARGUMENTS:
				{ nResult = cSetArgumentsDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETVARIABLES:
				{ nResult = cSetVariablesDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETPARAMETERS:
				{ nResult = cSetParametersDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETSYNCOBJECT:
				{ nResult = cSetSynchronizationObjectDialog.Create(this, szObjects, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_ACTIONOBJECT_INJECTALERT:
				{ nResult = cInjectAlertDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_ACTIONOBJECT_CALLPROCEDURE:
				{ nResult = cCallProcedureDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_ACTIONOBJECT_STARTPROCEDURE:
				{ nResult = cStartProcedureDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_ACTIONOBJECT_CONTROLPROCEDURE:
				{ nResult = cControlProcedureDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_ACTIONOBJECT_CONTROLTHREAD:
				{ nResult = cControlThreadDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_ACTIONOBJECT_WAITTIMEINTERVAL:
				{ nResult = cWaitTimeIntervalDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_ACTIONOBJECT_WAITSYNCOBJECT:
				{ nResult = cWaitSynchronizationObjectDialog.Create(this, szObjects, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION:
				{ nResult = cSendTCFunctionDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE:
				{ nResult = cSendTCSequenceDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_ACTIONOBJECT_LOGMESSAGE:
				{ nResult = cLogMessageDialog.Create(this, pStep[0]);
				break;
				}
				case TCPROCEDURETHREADSTEP_ACTIONOBJECT_USERINTERACTION:
				{ nResult = cUserInteractionDialog.Create(this, pStep[0]);
				break;
				}
				default:
				{ nResult = 0;
				break;
				}
				}
				if (nResult == IDOK)
				{
					pStep[0]->SetDesignSize(sizeDesign);
					GetParentDisplay()->GetFlowchartView()->UpdateUndoList(TCPROCEDUREDOCUMENTUNDOITEM_ACTION_PROPERTIES, &cUndoItem, pStep[0], pStep[1]);
					UpdateAllSteps();
				}
				break;
			}
			delete pStep[1];
		}
	}
}

void CTCProcedurePropertiesStepsDialog::OnEditchangeName()
{
	CString  szName;
	CTCProcedureDocumentItem  *pStep;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME)->GetWindowText(szName); (pStep = GetStep()); )
	{
		pStep->SetName(szName);
		UpdateAllSteps();
		break;
	}
}

void CTCProcedurePropertiesStepsDialog::OnEditchangeDescription()
{
	CString  szDescription;
	CTCProcedureDocumentItem  *pStep;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_DESCRIPTION)->GetWindowText(szDescription); (pStep = GetStep()); )
	{
		pStep->SetLabel(szDescription);
		UpdateAllSteps();
		break;
	}
}

void CTCProcedurePropertiesStepsDialog::OnEditchangeComments()
{
	CString  szComments;
	CTCProcedureDocumentItem  *pStep;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_COMMENTS)->GetWindowText(szComments); (pStep = GetStep()); )
	{
		pStep->SetComments(szComments);
		UpdateAllSteps();
		break;
	}
}

void CTCProcedurePropertiesStepsDialog::OnEditchangeTriggerMessage()
{
	CString  szMessage;
	CTCProcedureDocumentItem  *pStep;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_MESSAGE)->GetWindowText(szMessage); (pStep = GetStep()); )
	{
		pStep->SetTriggerMessage(szMessage);
		break;
	}
}

void CTCProcedurePropertiesStepsDialog::OnEditchangeTriggerExpression()
{
	CString  szExpression;
	CTCProcedureDocumentItem  *pStep;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_EXPRESSION)->GetWindowText(szExpression); (pStep = GetStep()); )
	{
		pStep->SetTriggerExpression(szExpression);
		break;
	}
}

void CTCProcedurePropertiesStepsDialog::OnEditchangePreexecutionExpression()
{
	CString  szExpression;
	CTCProcedureDocumentItem  *pStep;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_PREEXECUTIONEXPRESSION)->GetWindowText(szExpression); (pStep = GetStep()); )
	{
		pStep->SetPreexecutionExpression(szExpression);
		break;
	}
}

void CTCProcedurePropertiesStepsDialog::OnEditchangeConfirmationMessage()
{
	CString  szMessage;
	CTCProcedureDocumentItem  *pStep;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_MESSAGE)->GetWindowText(szMessage); (pStep = GetStep()); )
	{
		pStep->SetConfirmationMessage(szMessage);
		break;
	}
}

void CTCProcedurePropertiesStepsDialog::OnEditchangeConfirmationExpression()
{
	CString  szExpression;
	CTCProcedureDocumentItem  *pStep;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_EXPRESSION)->GetWindowText(szExpression); (pStep = GetStep()); )
	{
		pStep->SetConfirmationExpression(szExpression);
		break;
	}
}

void CTCProcedurePropertiesStepsDialog::OnSelchangeName()
{
	INT  nStep;
	INT  nSteps;
	CString  szName;
	CTCProcedureDocumentItem  *pStep;

	for (nStep = 0, nSteps = (INT)m_pSteps.GetSize(), szName = Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_NAME, CB_GETCURSEL)); nStep < nSteps; nStep++)
	{
		if ((pStep = (CTCProcedureDocumentItem *)m_pSteps.GetAt(nStep)) && pStep->GetName() == szName)
		{
			GetParentDisplay()->GetFlowchartView()->SetActiveStep(pStep);
			break;
		}
	}
}

void CTCProcedurePropertiesStepsDialog::OnSelchangeTriggerType()
{
	CString  szType;
	CTimeKey  tTriggerTime;
	CTCProcedureDocumentItem  *pStep;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TYPE)->GetWindowText(szType); (pStep = GetStep()); )
	{
		if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_NONE))
		{
			pStep->SetTriggerType(TCPROCEDURETHREADSTEP_TRIGGERTYPE_NONE);
			pStep->SetTriggerTime(0);
			pStep->SetTriggerTimeOffset(0);
			pStep->SetTriggerTimeDelay(0);
			pStep->SetTriggerTimeout(0);
			pStep->SetTriggerSynchronizationObject(EMPTYSTRING);
			pStep->SetTriggerExpression(EMPTYSTRING);
			break;
		}
		if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_ATTIME))
		{
			pStep->SetTriggerType(TCPROCEDURETHREADSTEP_TRIGGERTYPE_ATTIME);
			pStep->SetTriggerTime(1000000 * (tTriggerTime.GetTime() + TCPROCEDUREPROPERTIESSTEPS_TRIGGERTIME_DEFAULTINTERVAL));
			pStep->SetTriggerTimeOffset(0);
			pStep->SetTriggerTimeDelay(0);
			pStep->SetTriggerTimeout(0);
			pStep->SetTriggerSynchronizationObject(EMPTYSTRING);
			pStep->SetTriggerExpression(EMPTYSTRING);
			break;
		}
		if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_NOTAFTERTIME))
		{
			pStep->SetTriggerType(TCPROCEDURETHREADSTEP_TRIGGERTYPE_NOTAFTERTIME);
			pStep->SetTriggerTime(1000000 * (tTriggerTime.GetTime() + TCPROCEDUREPROPERTIESSTEPS_TRIGGERTIME_DEFAULTINTERVAL));
			pStep->SetTriggerTimeOffset(0);
			pStep->SetTriggerTimeDelay(0);
			pStep->SetTriggerTimeout(0);
			pStep->SetTriggerSynchronizationObject(EMPTYSTRING);
			pStep->SetTriggerExpression(EMPTYSTRING);
			break;
		}
		if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_TIMEOFFSET))
		{
			pStep->SetTriggerType(TCPROCEDURETHREADSTEP_TRIGGERTYPE_TIMEOFFSET);
			pStep->SetTriggerTimeOffset(TCPROCEDUREPROPERTIESSTEPS_TRIGGERTIME_DEFAULTINTERVAL);
			pStep->SetTriggerTime(0);
			pStep->SetTriggerTimeDelay(0);
			pStep->SetTriggerTimeout(0);
			pStep->SetTriggerSynchronizationObject(EMPTYSTRING);
			pStep->SetTriggerExpression(EMPTYSTRING);
			break;
		}
		if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_TIMEDELAY))
		{
			pStep->SetTriggerType(TCPROCEDURETHREADSTEP_TRIGGERTYPE_TIMEDELAY);
			pStep->SetTriggerTimeDelay(TCPROCEDUREPROPERTIESSTEPS_TRIGGERTIME_DEFAULTINTERVAL);
			pStep->SetTriggerTime(0);
			pStep->SetTriggerTimeOffset(0);
			pStep->SetTriggerTimeout(0);
			pStep->SetTriggerSynchronizationObject(EMPTYSTRING);
			pStep->SetTriggerExpression(EMPTYSTRING);
			break;
		}
		if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_SYNCOBJECT))
		{
			pStep->SetTriggerType(TCPROCEDURETHREADSTEP_TRIGGERTYPE_SYNCOBJECT);
			pStep->SetTriggerTime(0);
			pStep->SetTriggerTimeOffset(0);
			pStep->SetTriggerTimeDelay(0);
			pStep->SetTriggerTimeout(TCPROCEDUREPROPERTIESSTEPS_TRIGGERWINDOW_DEFAULTINTERVAL);
			pStep->SetTriggerSynchronizationObject(EMPTYSTRING);
			pStep->SetTriggerExpression(EMPTYSTRING);
			EnumSynchronizationObjects();
			break;
		}
		if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_EXPRESSION))
		{
			pStep->SetTriggerType(TCPROCEDURETHREADSTEP_TRIGGERTYPE_EXPRESSION);
			pStep->SetTriggerTime(0);
			pStep->SetTriggerTimeOffset(0);
			pStep->SetTriggerTimeDelay(0);
			pStep->SetTriggerTimeout(TCPROCEDUREPROPERTIESSTEPS_TRIGGERWINDOW_DEFAULTINTERVAL);
			pStep->SetTriggerSynchronizationObject(EMPTYSTRING);
			pStep->SetTriggerExpression(EMPTYSTRING);
			break;
		}
		if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_OPERATOR))
		{
			pStep->SetTriggerType(TCPROCEDURETHREADSTEP_TRIGGERTYPE_OPERATOR);
			pStep->SetTriggerTime(0);
			pStep->SetTriggerTimeOffset(0);
			pStep->SetTriggerTimeDelay(0);
			pStep->SetTriggerTimeout(TCPROCEDUREPROPERTIESSTEPS_TRIGGERWINDOW_DEFAULTINTERVAL);
			pStep->SetTriggerSynchronizationObject(EMPTYSTRING);
			pStep->SetTriggerExpression(EMPTYSTRING);
			break;
		}
		pStep->SetTriggerType(0);
		pStep->SetTriggerTime(0);
		pStep->SetTriggerTimeOffset(0);
		pStep->SetTriggerTimeDelay(0);
		pStep->SetTriggerTimeout(0);
		pStep->SetTriggerSynchronizationObject(EMPTYSTRING);
		pStep->SetTriggerExpression(EMPTYSTRING);
		break;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_EXPRESSION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIME_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_ATTIME) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_NOTAFTERTIME)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIME)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_ATTIME) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_NOTAFTERTIME)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_TIMEOFFSET)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_TIMEOFFSET)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET_SECONDS_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_TIMEOFFSET)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_TIMEDELAY)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_TIMEDELAY)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY_SECONDS_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_TIMEDELAY)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_SYNCOBJECT)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_SYNCOBJECT)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_EXPRESSION_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_EXPRESSION)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_EXPRESSION)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_EXPRESSION)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_SYNCOBJECT) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_EXPRESSION) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_OPERATOR)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_SYNCOBJECT) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_EXPRESSION) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_OPERATOR)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW_SECONDS_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_SYNCOBJECT) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_EXPRESSION) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_OPERATOR)) ? TRUE : FALSE);
	if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_ATTIME) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_NOTAFTERTIME))
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIME), CTimeKey(tTriggerTime.GetTime() + TCPROCEDUREPROPERTIESSTEPS_TRIGGERTIME_DEFAULTINTERVAL));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIME)->SetFocus();
		return;
	}
	if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_TIMEOFFSET))
	{
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET), TCPROCEDUREPROPERTIESSTEPS_TRIGGERTIME_DEFAULTINTERVAL);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET)->SetFocus();
		return;
	}
	if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_TIMEDELAY))
	{
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY), TCPROCEDUREPROPERTIESSTEPS_TRIGGERTIME_DEFAULTINTERVAL);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY)->SetFocus();
		return;
	}
	if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_SYNCOBJECT))
	{
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW), TCPROCEDUREPROPERTIESSTEPS_TRIGGERWINDOW_DEFAULTINTERVAL);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT)->SetFocus();
		return;
	}
	if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_EXPRESSION))
	{
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW), TCPROCEDUREPROPERTIESSTEPS_TRIGGERWINDOW_DEFAULTINTERVAL);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_EXPRESSION)->SetFocus();
		return;
	}
	if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTRIGGERTYPE_OPERATOR))
	{
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW), TCPROCEDUREPROPERTIESSTEPS_TRIGGERWINDOW_DEFAULTINTERVAL);
		return;
	}
}

void CTCProcedurePropertiesStepsDialog::OnSelchangeTriggerSynchronizationObject()
{
	CString  szObject;
	CTCProcedureDocumentItem  *pStep;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_SYNCOBJECT)->GetWindowText(szObject); (pStep = GetStep()); )
	{
		pStep->SetTriggerSynchronizationObject(szObject);
		break;
	}
}

void CTCProcedurePropertiesStepsDialog::OnSelchangeConfirmationType()
{
	CString  szType;
	CTCProcedureDocumentItem  *pStep;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TYPE)->GetWindowText(szType); (pStep = GetStep()); )
	{
		if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_NONE))
		{
			pStep->SetConfirmationType(TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_NONE);
			pStep->SetConfirmationExpression(EMPTYSTRING);
			pStep->SetConfirmationTimeout(0);
			break;
		}
		if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_COMMAND))
		{
			pStep->SetConfirmationType(TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_COMMAND);
			pStep->SetConfirmationTimeout((pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION || pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE) ? TCPROCEDUREPROPERTIESSTEPS_CONFIRMATIONWINDOW_DEFAULTINTERVAL : 0);
			pStep->SetConfirmationExpression(EMPTYSTRING);
			break;
		}
		if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_EXPRESSION))
		{
			pStep->SetConfirmationType(TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_EXPRESSION);
			pStep->SetConfirmationTimeout(TCPROCEDUREPROPERTIESSTEPS_CONFIRMATIONWINDOW_DEFAULTINTERVAL);
			pStep->SetConfirmationExpression(EMPTYSTRING);
			break;
		}
		if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_OPERATOR))
		{
			pStep->SetConfirmationType(TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_OPERATOR);
			pStep->SetConfirmationTimeout(TCPROCEDUREPROPERTIESSTEPS_CONFIRMATIONWINDOW_DEFAULTINTERVAL);
			pStep->SetConfirmationExpression(EMPTYSTRING);
			break;
		}
		pStep->SetConfirmationType(0);
		pStep->SetConfirmationExpression(EMPTYSTRING);
		pStep->SetConfirmationTimeout(0);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_EXPRESSION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_EXPRESSION_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_EXPRESSION)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_EXPRESSION)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_EXPRESSION)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW_STATIC)->EnableWindow(((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_COMMAND) && (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION || pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE)) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_EXPRESSION) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_OPERATOR)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW)->EnableWindow(((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_COMMAND) && (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION || pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE)) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_EXPRESSION) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_OPERATOR)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW_SECONDS_STATIC)->EnableWindow(((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_COMMAND) && (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION || pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE)) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_EXPRESSION) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_OPERATOR)) ? TRUE : FALSE);
	if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_COMMAND) && (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION || pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE))
	{
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW), TCPROCEDUREPROPERTIESSTEPS_CONFIRMATIONWINDOW_DEFAULTINTERVAL);
		return;
	}
	if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_EXPRESSION))
	{
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW), TCPROCEDUREPROPERTIESSTEPS_CONFIRMATIONWINDOW_DEFAULTINTERVAL);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_EXPRESSION)->SetFocus();
		return;
	}
	if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSCONFIRMATIONTYPE_OPERATOR))
	{
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW), TCPROCEDUREPROPERTIESSTEPS_CONFIRMATIONWINDOW_DEFAULTINTERVAL);
		return;
	}
}

void CTCProcedurePropertiesStepsDialog::OnSelchangeFailureOptionsState()
{
	CString  szStepState;
	CTCProcedureDocumentItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE)->GetWindowText(szStepState);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(((szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILURESTATE_TRIGGER) && (pStep->GetFailureOptions() & TCPROCEDURETHREADSTEP_FAILUREOPTION_TRIGGERSUCCESS)) || (szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILURESTATE_BODY) && (pStep->GetFailureOptions() & TCPROCEDURETHREADSTEP_FAILUREOPTION_BODYSUCCESS)) || (szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILURESTATE_CONFIRMATION) && (pStep->GetFailureOptions() & TCPROCEDURETHREADSTEP_FAILUREOPTION_CONFIRMATIONSUCCESS))) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_SUCCESS) : (((szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILURESTATE_TRIGGER) && (pStep->GetFailureOptions() & TCPROCEDURETHREADSTEP_FAILUREOPTION_TRIGGERFAILURE)) || (szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILURESTATE_BODY) && (pStep->GetFailureOptions() & TCPROCEDURETHREADSTEP_FAILUREOPTION_BODYFAILURE)) || (szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILURESTATE_CONFIRMATION) && (pStep->GetFailureOptions() & TCPROCEDURETHREADSTEP_FAILUREOPTION_CONFIRMATIONFAILURE))) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_FAILURE) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_AUTOMATIC)))));
		return;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_AUTOMATIC)));
}

void CTCProcedurePropertiesStepsDialog::OnSelchangeFailureOptionsAction()
{
	CString  szStepState;
	CString  szStepAction;
	CTCProcedureDocumentItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_STATE)->GetWindowText(szStepState), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_FORCE_ACTION)->GetWindowText(szStepAction); szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILURESTATE_TRIGGER); )
		{
			pStep->SetFailureOptions((pStep->GetFailureOptions() & ~(TCPROCEDURETHREADSTEP_FAILUREOPTION_TRIGGERSUCCESS | TCPROCEDURETHREADSTEP_FAILUREOPTION_TRIGGERFAILURE)) | ((szStepAction == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_SUCCESS)) ? TCPROCEDURETHREADSTEP_FAILUREOPTION_TRIGGERSUCCESS : 0) | ((szStepAction == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_FAILURE)) ? TCPROCEDURETHREADSTEP_FAILUREOPTION_TRIGGERFAILURE : 0));
			break;
		}
		for (; szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILURESTATE_BODY); )
		{
			pStep->SetFailureOptions((pStep->GetFailureOptions() & ~(TCPROCEDURETHREADSTEP_FAILUREOPTION_BODYSUCCESS | TCPROCEDURETHREADSTEP_FAILUREOPTION_BODYFAILURE)) | ((szStepAction == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_SUCCESS)) ? TCPROCEDURETHREADSTEP_FAILUREOPTION_BODYSUCCESS : 0) | ((szStepAction == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_FAILURE)) ? TCPROCEDURETHREADSTEP_FAILUREOPTION_BODYFAILURE : 0));
			break;
		}
		for (; szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILURESTATE_CONFIRMATION); )
		{
			pStep->SetFailureOptions((pStep->GetFailureOptions() & ~(TCPROCEDURETHREADSTEP_FAILUREOPTION_CONFIRMATIONSUCCESS | TCPROCEDURETHREADSTEP_FAILUREOPTION_CONFIRMATIONFAILURE)) | ((szStepAction == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_SUCCESS)) ? TCPROCEDURETHREADSTEP_FAILUREOPTION_CONFIRMATIONSUCCESS : 0) | ((szStepAction == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSFAILUREOPTION_FAILURE)) ? TCPROCEDURETHREADSTEP_FAILUREOPTION_CONFIRMATIONFAILURE : 0));
			break;
		}
	}
}

void CTCProcedurePropertiesStepsDialog::OnSelchangeFailureState()
{
	CString  szStepState;
	CString  szFailureLabel;
	CStringArray  szFailureLabels;
	CTCProcedureDocumentItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE)->GetWindowText(szStepState);
		for (pStep->GetFailureLabels(szFailureLabels); szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_TRIGGER); )
		{
			szFailureLabel = (szFailureLabels.GetSize() > 0) ? szFailureLabels.GetAt(0) : EMPTYSTRING;
			break;
		}
		for (; szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_BODY); )
		{
			szFailureLabel = (szFailureLabels.GetSize() > 1) ? szFailureLabels.GetAt(1) : EMPTYSTRING;
			break;
		}
		for (; szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_CONFIRMATION); )
		{
			szFailureLabel = (szFailureLabels.GetSize() > 2) ? szFailureLabels.GetAt(2) : EMPTYSTRING;
			break;
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTO, !szFailureLabel.IsEmpty());
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_EXITPROCEDURE, szFailureLabel.IsEmpty());
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szFailureLabel));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL)->EnableWindow(!szFailureLabel.IsEmpty());
}

void CTCProcedurePropertiesStepsDialog::OnSelchangeFailureLabel()
{
	CString  szStepState;
	CString  szFailureLabel;
	CStringArray  szFailureLabels;
	CTCProcedureDocumentItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_STATE)->GetWindowText(szStepState);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_FAILUREINFORMATION_GOTOLABEL)->GetWindowText(szFailureLabel);
		for (pStep->GetFailureLabels(szFailureLabels); szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_TRIGGER); )
		{
			szFailureLabels.SetAtGrow(0, szFailureLabel);
			break;
		}
		for (; szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_BODY); )
		{
			szFailureLabels.SetAtGrow(1, szFailureLabel);
			break;
		}
		for (; szStepState == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSSTATE_CONFIRMATION); )
		{
			szFailureLabels.SetAtGrow(2, szFailureLabel);
			break;
		}
		pStep->SetFailureLabels(szFailureLabels);
	}
}

void CTCProcedurePropertiesStepsDialog::OnSpinchangeTriggerTime()
{
	CTCProcedureDocumentItem  *pStep;

	if ((pStep = GetStep())) pStep->SetTriggerTime(1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIME)).GetTime());
}

void CTCProcedurePropertiesStepsDialog::OnSpinchangeTriggerTimeOffset()
{
	CTCProcedureDocumentItem  *pStep;

	if ((pStep = GetStep())) pStep->SetTriggerTimeOffset(Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEOFFSET)));
}

void CTCProcedurePropertiesStepsDialog::OnSpinchangeTriggerTimeDelay()
{
	CTCProcedureDocumentItem  *pStep;

	if ((pStep = GetStep())) pStep->SetTriggerTimeDelay(Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEDELAY)));
}

void CTCProcedurePropertiesStepsDialog::OnSpinchangeTriggerTimeWindow()
{
	CTCProcedureDocumentItem  *pStep;

	if ((pStep = GetStep())) pStep->SetTriggerTimeout(Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_TRIGGERINFORMATION_TIMEWINDOW)));
}

void CTCProcedurePropertiesStepsDialog::OnSpinchangeConfirmationTimeWindow()
{
	CTCProcedureDocumentItem  *pStep;

	if ((pStep = GetStep())) pStep->SetConfirmationTimeout(Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STEPS_CONFIRMATIONINFORMATION_TIMEWINDOW)));
}

BOOL CTCProcedurePropertiesStepsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSTEPSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesStepsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSTEPSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTMParametersCalibrationPage property page

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesTestTMParametersCalibrationPage, CLocalePropertyPage)

CTCProcedurePropertiesTestTMParametersCalibrationPage::CTCProcedurePropertiesTestTMParametersCalibrationPage() : CLocalePropertyPage(CTCProcedurePropertiesTestTMParametersCalibrationPage::IDD)
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesTestTMParametersCalibrationPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTCProcedurePropertiesTestTMParametersCalibrationPage::ShowParameterInfo(CONST CTMParameter *pTMParameter)
{
	INT  nIndex;
	INT  nTable;
	INT  nTables;
	UINT  nStatus;
	CString  szName;
	CString  szTable;
	ULONGLONG  nValue;
	CStringArray  szTables[2];
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;

	for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_NAME, CB_RESETCONTENT), nIndex = -1; (pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pTMParameter->GetTag()))); )
	{
		for (nTable = 0, nTables = pDatabaseTMParameter->GetCalTables(szTables[0], szTables[1]), szTable = (pTMParameter->GetRawValue(pTMParameter->GetValueCount() - 1, nValue, nStatus, szTable)) ? szTable : EMPTYSTRING; nTable < nTables; nTable++)
		{
			if ((m_nCalTableType = (pTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS))) == TMPARAMETER_CALIBRATION_NUMERICAL)
			{
				if ((pDatabaseTMNumCalTable = GetDatabase()->GetTMNumCalTables()->GetAt(GetDatabase()->GetTMNumCalTables()->Find(szTables[0].GetAt(nTable)))))
				{
					for (szName.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTMNumCalTable->GetDescription(), (LPCTSTR)pDatabaseTMNumCalTable->GetName()); pDatabaseTMNumCalTable->GetDescription().IsEmpty(); )
					{
						szName = pDatabaseTMNumCalTable->GetName();
						break;
					}
					for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName); pDatabaseTMNumCalTable->GetName() == szTable; )
					{
						nIndex = nTable;
						break;
					}
					m_nCalTableRefs.SetAtGrow(nTable, GetDatabase()->GetTMNumCalTables()->Find(szTables[0].GetAt(nTable)));
					m_nCalValidityRefs.SetAtGrow(nTable, GetDatabase()->GetTMParameters()->Find(szTables[1].GetAt(nTable)));
					continue;
				}
			}
			if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS)
			{
				if ((pDatabaseTMTxtCalTable = GetDatabase()->GetTMTxtCalTables()->GetAt(GetDatabase()->GetTMTxtCalTables()->Find(szTables[0].GetAt(nTable)))))
				{
					for (szName.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTMTxtCalTable->GetDescription(), (LPCTSTR)pDatabaseTMTxtCalTable->GetName()); pDatabaseTMTxtCalTable->GetDescription().IsEmpty(); )
					{
						szName = pDatabaseTMTxtCalTable->GetName();
						break;
					}
					for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName); pDatabaseTMTxtCalTable->GetName() == szTable; )
					{
						nIndex = nTable;
						break;
					}
					m_nCalTableRefs.SetAtGrow(nTable, GetDatabase()->GetTMTxtCalTables()->Find(szTables[0].GetAt(nTable)));
					m_nCalValidityRefs.SetAtGrow(nTable, GetDatabase()->GetTMParameters()->Find(szTables[1].GetAt(nTable)));
					continue;
				}
			}
		}
		break;
	}
	m_nCalTableID = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_NAME, CB_SETCURSEL, max(nIndex, 0));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_NAME)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	ShowCalibrationInfo();
}

VOID CTCProcedurePropertiesTestTMParametersCalibrationPage::ShowCalibrationInfo()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	double  fCalPtX;
	double  fCalPtY;
	CString  szItem;
	CString  szCalPtX;
	CString  szCalPtY;
	CString  szCalText;
	CStringTools  cStringTools;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMNumCalPoint  *pDatabaseTMNumCalPoint;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;

	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCURSEL)) >= 0 && nIndex < (INT)m_nCalTableRefs.GetSize())
	{
		if ((pDatabaseTMNumCalTable = (m_nCalTableType == TMPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTMNumCalTables()->GetAt(m_nCalTableRefs.GetAt(nIndex)) : (CDatabaseTMNumCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTMNumCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTMNumCalPoint = pDatabaseTMNumCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							szItem = cStringTools.ConvertFloatToTruncatedString(pDatabaseTMNumCalPoint->GetX(), -1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = cStringTools.ConvertFloatToString(pDatabaseTMNumCalPoint->GetY(), -1);
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTMNumCalTable->GetName());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_NUMERICAL));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			return;
		}
		if ((pDatabaseTMTxtCalTable = (m_nCalTableType == TMPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTMTxtCalTables()->GetAt(m_nCalTableRefs.GetAt(nIndex)) : (CDatabaseTMTxtCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTMTxtCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							if (pDatabaseTMTxtCalPoint->GetRange(fCalPtX, fCalPtY, szCalText) || pDatabaseTMTxtCalPoint->GetPoint(fCalPtX, szCalText))
							{
								for (szCalPtX = szItem = cStringTools.ConvertFloatToTruncatedString(fCalPtX, -1), szCalPtY = cStringTools.ConvertFloatToTruncatedString(fCalPtY, -1); fCalPtX != fCalPtY; )
								{
									szItem.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINT_RANGE), (LPCTSTR)szCalPtX, (LPCTSTR)szCalPtY);
									break;
								}
								break;
							}
							szItem.Empty();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = (pDatabaseTMTxtCalPoint->GetPoint(fCalPtX, szCalText) || pDatabaseTMTxtCalPoint->GetRange(fCalPtX, fCalPtY, szCalText)) ? (LPCTSTR)szCalText : EMPTYSTRING;
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTMTxtCalTable->GetName());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATUS));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			return;
		}
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow(FALSE);
}

BOOL CTCProcedurePropertiesTestTMParametersCalibrationPage::GetSelectedCalibrationPoint(CString &szTable, CString &szX, CString &szY) CONST
{
	CString  szTableID;
	CString  szTableName;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowText(szTableID);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_NAME)->GetWindowText(szTableName);
	szTable.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSDIALOG_FORMAT), (LPCTSTR)szTableID, (LPCTSTR)szTableName);
	szX = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X)));
	szY = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y)));
	return((!szTable.IsEmpty() && !szX.IsEmpty() && !szY.IsEmpty()) ? TRUE : FALSE);
}

CTCProcedurePropertiesTestTMParametersFolder *CTCProcedurePropertiesTestTMParametersCalibrationPage::GetParent() CONST
{
	return((CTCProcedurePropertiesTestTMParametersFolder *)CLocalePropertyPage::GetParent());
}

INT CTCProcedurePropertiesTestTMParametersCalibrationPage::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

void CTCProcedurePropertiesTestTMParametersCalibrationPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesTestTMParametersCalibrationPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesTestTMParametersCalibrationPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_nCalTableRefs.RemoveAll();
	m_nCalValidityRefs.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesTestTMParametersCalibrationPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesTestTMParametersCalibrationPage)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_NAME, OnSelchangeName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTMParametersCalibrationPage message handlers

BOOL CTCProcedurePropertiesTestTMParametersCalibrationPage::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nWidth = (rColumns.Width() - GetSystemMetrics(SM_CXVSCROLL)) / 5; nColumn < nColumns; nWidth = (++nColumn > 0) ? (2 * (rColumns.Width() - GetSystemMetrics(SM_CXVSCROLL)) / 5) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	return TRUE;
}

BOOL CTCProcedurePropertiesTestTMParametersCalibrationPage::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CString  szX;
	CString  szY;
	CString  szTable;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_CALIBRATIONPAGE_POINTS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK)
		{
			if (GetSelectedCalibrationPoint(szTable, szX, szY))
			{
				GetParent()->GetParent()->SetSelectedCalibrationPoint(szTable, szX, szY);
				GetParent()->GetParent()->EndDialog(IDOK);
				return TRUE;
			}
		}
	}
	return CLocalePropertyPage::OnNotify(wParam, lParam, pResult);
}

void CTCProcedurePropertiesTestTMParametersCalibrationPage::OnSelchangeName()
{
	ShowCalibrationInfo();
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTMParametersFolderTabCtrl

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesTestTMParametersFolderTabCtrl, CTabCtrl)

CTCProcedurePropertiesTestTMParametersFolder *CTCProcedurePropertiesTestTMParametersFolderTabCtrl::GetParent() CONST
{
	return((CTCProcedurePropertiesTestTMParametersFolder *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesTestTMParametersFolderTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesTestTMParametersFolderTabCtrl)
	ON_WM_GETDLGCODE()
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTMParametersFolderTabCtrl message handlers

UINT CTCProcedurePropertiesTestTMParametersFolderTabCtrl::OnGetDlgCode()
{
	return CTabCtrl::OnGetDlgCode() | DLGC_WANTTAB;
}

void CTCProcedurePropertiesTestTMParametersFolderTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CWnd  *pWnd;

	if (nChar == VK_TAB)
	{
		if ((pWnd = GetParent()->GetParent()->GetNextDlgTabItem(GetParent(), (HIBYTE(GetKeyState(VK_SHIFT))) ? TRUE : FALSE)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTMParametersFolder

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesTestTMParametersFolder, CLocalePropertySheetDialog)

CTCProcedurePropertiesTestTMParametersFolder::CTCProcedurePropertiesTestTMParametersFolder() : CLocalePropertySheetDialog()
{
	AddPage(&m_pageCalibration);
}

BOOL CTCProcedurePropertiesTestTMParametersFolder::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	INT  nPage;

	if (CLocalePropertySheetDialog::Create(pParentWnd, WS_CHILD | WS_TABSTOP | WS_DISABLED))
	{
		for (nPage = GetPageCount() - 1, m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()); nPage >= 0; nPage--)
		{
			SetActivePage(nPage);
			continue;
		}
		MoveWindow(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
		ShowWindow(SW_SHOWNORMAL);
		return TRUE;
	}
	return FALSE;
}

VOID CTCProcedurePropertiesTestTMParametersFolder::ShowParameterInfo(CONST CTMParameter *pTMParameter)
{
	m_pageCalibration.ShowParameterInfo(pTMParameter);
}

BOOL CTCProcedurePropertiesTestTMParametersFolder::GetSelectedCalibrationPoint(CString &szTable, CString &szX, CString &szY) CONST
{
	return m_pageCalibration.GetSelectedCalibrationPoint(szTable, szX, szY);
}

CTCProcedurePropertiesTestTMParametersDialog *CTCProcedurePropertiesTestTMParametersFolder::GetParent() CONST
{
	return((CTCProcedurePropertiesTestTMParametersDialog *)CLocalePropertySheetDialog::GetParent());
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesTestTMParametersFolder, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesTestTMParametersFolder)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTMParametersFolder message handlers

void CTCProcedurePropertiesTestTMParametersFolder::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(m_wndTabCtrl.GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CLocalePropertySheetDialog::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTMParametersDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesTestTMParametersDialog, CDisplayDialog)

CTCProcedurePropertiesTestTMParametersDialog::CTCProcedurePropertiesTestTMParametersDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesTestTMParametersDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCProcedurePropertiesTestTMParametersDialog::Create(CWnd *pParentWnd, CONST CTMParameter *pTMParameter, CString &szTable, CString &szValue)
{
	INT  nResult;
	CString  szX;
	CString  szY;

	for (m_cTMParameter.Copy(pTMParameter), szTable.Empty(), szValue.Empty(); (nResult = CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesTestTMParametersDialog::IDD)) == IDOK; )
	{
		szValue = (GetSelectedCalibrationPoint(szTable, szX, szY)) ? szY : EMPTYSTRING;
		break;
	}
	return((nResult == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesTestTMParametersDialog::SetSelectedCalibrationPoint(LPCTSTR pszTable, LPCTSTR pszX, LPCTSTR pszY)
{
	m_szX = pszX;
	m_szY = pszY;
	m_szTable = pszTable;
}

BOOL CTCProcedurePropertiesTestTMParametersDialog::GetSelectedCalibrationPoint(CString &szTable, CString &szX, CString &szY) CONST
{
	szX = m_szX;
	szY = m_szY;
	szTable = m_szTable;
	return((!szTable.IsEmpty() && !szX.IsEmpty() && !szY.IsEmpty()) ? TRUE : FALSE);
}

CTCProcedurePropertiesDebugDialog *CTCProcedurePropertiesTestTMParametersDialog::GetParent() CONST
{
	return((CTCProcedurePropertiesDebugDialog *)CDisplayDialog::GetParent());
}

BOOL CTCProcedurePropertiesTestTMParametersDialog::EnumParameters()
{
	CString  szParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	if ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(m_cTMParameter.GetTag()))))
	{
		if (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS))
		{
			szParameter.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSDIALOG_FORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_ITEM, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szParameter);
		}
	}
	szParameter.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSDIALOG_FORMAT), (LPCTSTR)m_cTMParameter.GetTag(), EMPTYSTRING);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_ITEM, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_ITEM, CB_FINDSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameter), 0));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_DETAILS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_ITEM_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_ITEM)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	m_wndFolderCtrl.EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesTestTMParametersDialog::ShowParameterInfo()
{
	m_wndFolderCtrl.ShowParameterInfo(&m_cTMParameter);
}

CRect CTCProcedurePropertiesTestTMParametersDialog::CalcFolderSize() CONST
{
	CRect  rFolder;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_FOLDER)->GetWindowRect(rFolder);
	ScreenToClient(rFolder);
	return rFolder;
}

void CTCProcedurePropertiesTestTMParametersDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesTestTMParametersDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesTestTMParametersDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesTestTMParametersDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_ITEM, OnSelchangeParameter)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTMParametersDialog message handlers

BOOL CTCProcedurePropertiesTestTMParametersDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	for (CDisplayDialog::OnInitDialog(); m_wndFolderCtrl.Create(this, CalcFolderSize()) && SetChildSheet(&m_wndFolderCtrl, GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTMPARAMETERS_FOLDER - 1)); )
	{
		if (EnumParameters()) ShowParameterInfo();
		break;
	}
	return TRUE;
}

void CTCProcedurePropertiesTestTMParametersDialog::OnSelchangeParameter()
{
	ShowParameterInfo();
}

void CTCProcedurePropertiesTestTMParametersDialog::OnOK()
{
	CHourglassCursor  cCursor;

	m_wndFolderCtrl.GetSelectedCalibrationPoint(m_szTable, m_szX, m_szY);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesTestTMParametersDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESTESTTMPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesTestTMParametersDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESTESTTMPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTCParametersCalibrationPage property page

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesTestTCParametersCalibrationPage, CLocalePropertyPage)

CTCProcedurePropertiesTestTCParametersCalibrationPage::CTCProcedurePropertiesTestTCParametersCalibrationPage() : CLocalePropertyPage(CTCProcedurePropertiesTestTCParametersCalibrationPage::IDD)
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesTestTCParametersCalibrationPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTCProcedurePropertiesTestTCParametersCalibrationPage::ShowParameterInfo(CONST CTCParameter *pTCParameter)
{
	CString  szName;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;

	for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_NAME, CB_RESETCONTENT), m_szCalTableIDs.RemoveAll(); (pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pTCParameter->GetTag()))); )
	{
		if ((m_nCalTableType = (pTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))) == TCPARAMETER_CALIBRATION_NUMERICAL)
		{
			if ((pDatabaseTCNumCalTable = GetDatabase()->GetTCNumCalTables()->GetAt(GetDatabase()->GetTCNumCalTables()->Find(pDatabaseTCParameter->GetCalTable()))))
			{
				for (szName.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTCNumCalTable->GetDescription(), (LPCTSTR)pDatabaseTCNumCalTable->GetName()); pDatabaseTCNumCalTable->GetDescription().IsEmpty(); )
				{
					szName = pDatabaseTCNumCalTable->GetName();
					break;
				}
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName);
				m_szCalTableIDs.Add(pDatabaseTCNumCalTable->GetName());
			}
		}
		if (pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
		{
			if ((pDatabaseTCTxtCalTable = GetDatabase()->GetTCTxtCalTables()->GetAt(GetDatabase()->GetTCTxtCalTables()->Find(pDatabaseTCParameter->GetCalTable()))))
			{
				for (szName.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTCTxtCalTable->GetDescription(), (LPCTSTR)pDatabaseTCTxtCalTable->GetName()); pDatabaseTCTxtCalTable->GetDescription().IsEmpty(); )
				{
					szName = pDatabaseTCTxtCalTable->GetName();
					break;
				}
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName);
				m_szCalTableIDs.Add(pDatabaseTCTxtCalTable->GetName());
			}
		}
		break;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_NAME, CB_SETCURSEL);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_NAME)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	ShowCalibrationInfo();
}

VOID CTCProcedurePropertiesTestTCParametersCalibrationPage::ShowCalibrationInfo()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	double  fCalPtX;
	double  fCalPtY;
	CString  szItem;
	CString  szCalPtX;
	CString  szCalPtY;
	CString  szCalText;
	CStringTools  cStringTools;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;

	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCURSEL)) >= 0)
	{
		if ((pDatabaseTCNumCalTable = (m_nCalTableType == TCPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTCNumCalTables()->GetAt(GetDatabase()->GetTCNumCalTables()->Find(m_szCalTableIDs.GetAt(nIndex))) : (CDatabaseTCNumCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCNumCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCNumCalPoint = pDatabaseTCNumCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							szItem = cStringTools.ConvertFloatToTruncatedString(pDatabaseTCNumCalPoint->GetX(), -1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = cStringTools.ConvertFloatToString(pDatabaseTCNumCalPoint->GetY(), -1);
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTCNumCalTable->GetName());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_NUMERICAL));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			return;
		}
		if ((pDatabaseTCTxtCalTable = (m_nCalTableType == TCPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTCTxtCalTables()->GetAt(GetDatabase()->GetTCTxtCalTables()->Find(m_szCalTableIDs.GetAt(nIndex))) : (CDatabaseTCTxtCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCTxtCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							if (pDatabaseTCTxtCalPoint->GetRange(fCalPtX, fCalPtY, szCalText) || pDatabaseTCTxtCalPoint->GetPoint(fCalPtX, szCalText))
							{
								for (szCalPtX = szItem = cStringTools.ConvertFloatToTruncatedString(fCalPtX, -1), szCalPtY = cStringTools.ConvertFloatToTruncatedString(fCalPtY, -1); fCalPtX != fCalPtY; )
								{
									szItem.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINT_RANGE), (LPCTSTR)szCalPtX, (LPCTSTR)szCalPtY);
									break;
								}
								break;
							}
							szItem.Empty();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = (pDatabaseTCTxtCalPoint->GetPoint(fCalPtX, szCalText) || pDatabaseTCTxtCalPoint->GetRange(fCalPtX, fCalPtY, szCalText)) ? (LPCTSTR)szCalText : EMPTYSTRING;
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTCTxtCalTable->GetName());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATUS));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			return;
		}
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow(FALSE);
}

BOOL CTCProcedurePropertiesTestTCParametersCalibrationPage::GetSelectedCalibrationPoint(CString &szTable, CString &szX, CString &szY) CONST
{
	CString  szTableID;
	CString  szTableName;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowText(szTableID);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_NAME)->GetWindowText(szTableName);
	szTable.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSDIALOG_FORMAT), (LPCTSTR)szTableID, (LPCTSTR)szTableName);
	szX = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X)));
	szY = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y)));
	return((!szTable.IsEmpty() && !szX.IsEmpty() && !szY.IsEmpty()) ? TRUE : FALSE);
}

CTCProcedurePropertiesTestTCParametersFolder *CTCProcedurePropertiesTestTCParametersCalibrationPage::GetParent() CONST
{
	return((CTCProcedurePropertiesTestTCParametersFolder *)CLocalePropertyPage::GetParent());
}

INT CTCProcedurePropertiesTestTCParametersCalibrationPage::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

void CTCProcedurePropertiesTestTCParametersCalibrationPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesTestTCParametersCalibrationPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesTestTCParametersCalibrationPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_szCalTableIDs.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesTestTCParametersCalibrationPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesTestTCParametersCalibrationPage)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_NAME, OnSelchangeName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTCParametersCalibrationPage message handlers

BOOL CTCProcedurePropertiesTestTCParametersCalibrationPage::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nWidth = (rColumns.Width() - GetSystemMetrics(SM_CXVSCROLL)) / 5; nColumn < nColumns; nWidth = (++nColumn > 0) ? (2 * (rColumns.Width() - GetSystemMetrics(SM_CXVSCROLL)) / 5) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	return TRUE;
}

BOOL CTCProcedurePropertiesTestTCParametersCalibrationPage::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CString  szX;
	CString  szY;
	CString  szTable;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_CALIBRATIONPAGE_POINTS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK)
		{
			if (GetSelectedCalibrationPoint(szTable, szX, szY))
			{
				GetParent()->GetParent()->SetSelectedCalibrationPoint(szTable, szX, szY);
				GetParent()->GetParent()->EndDialog(IDOK);
				return TRUE;
			}
		}
	}
	return CLocalePropertyPage::OnNotify(wParam, lParam, pResult);
}

void CTCProcedurePropertiesTestTCParametersCalibrationPage::OnSelchangeName()
{
	ShowCalibrationInfo();
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTCParametersFolderTabCtrl

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesTestTCParametersFolderTabCtrl, CTabCtrl)

CTCProcedurePropertiesTestTCParametersFolder *CTCProcedurePropertiesTestTCParametersFolderTabCtrl::GetParent() CONST
{
	return((CTCProcedurePropertiesTestTCParametersFolder *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesTestTCParametersFolderTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesTestTCParametersFolderTabCtrl)
	ON_WM_GETDLGCODE()
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTCParametersFolderTabCtrl message handlers

UINT CTCProcedurePropertiesTestTCParametersFolderTabCtrl::OnGetDlgCode()
{
	return CTabCtrl::OnGetDlgCode() | DLGC_WANTTAB;
}

void CTCProcedurePropertiesTestTCParametersFolderTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CWnd  *pWnd;

	if (nChar == VK_TAB)
	{
		if ((pWnd = GetParent()->GetParent()->GetNextDlgTabItem(GetParent(), (HIBYTE(GetKeyState(VK_SHIFT))) ? TRUE : FALSE)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTCParametersFolder

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesTestTCParametersFolder, CLocalePropertySheetDialog)

CTCProcedurePropertiesTestTCParametersFolder::CTCProcedurePropertiesTestTCParametersFolder() : CLocalePropertySheetDialog()
{
	AddPage(&m_pageCalibration);
}

BOOL CTCProcedurePropertiesTestTCParametersFolder::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	INT  nPage;

	if (CLocalePropertySheetDialog::Create(pParentWnd, WS_CHILD | WS_TABSTOP | WS_DISABLED))
	{
		for (nPage = GetPageCount() - 1, m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()); nPage >= 0; nPage--)
		{
			SetActivePage(nPage);
			continue;
		}
		MoveWindow(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
		ShowWindow(SW_SHOWNORMAL);
		return TRUE;
	}
	return FALSE;
}

VOID CTCProcedurePropertiesTestTCParametersFolder::ShowParameterInfo(CONST CTCParameter *pTCParameter)
{
	m_pageCalibration.ShowParameterInfo(pTCParameter);
}

BOOL CTCProcedurePropertiesTestTCParametersFolder::GetSelectedCalibrationPoint(CString &szTable, CString &szX, CString &szY) CONST
{
	return m_pageCalibration.GetSelectedCalibrationPoint(szTable, szX, szY);
}

CTCProcedurePropertiesTestTCParametersDialog *CTCProcedurePropertiesTestTCParametersFolder::GetParent() CONST
{
	return((CTCProcedurePropertiesTestTCParametersDialog *)CLocalePropertySheetDialog::GetParent());
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesTestTCParametersFolder, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesTestTCParametersFolder)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTCParametersFolder message handlers

void CTCProcedurePropertiesTestTCParametersFolder::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(m_wndTabCtrl.GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CLocalePropertySheetDialog::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTCParametersDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesTestTCParametersDialog, CDisplayDialog)

CTCProcedurePropertiesTestTCParametersDialog::CTCProcedurePropertiesTestTCParametersDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesTestTCParametersDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCProcedurePropertiesTestTCParametersDialog::Create(CWnd *pParentWnd, CONST CTCParameter *pTCParameter, CString &szTable, CString &szValue)
{
	INT  nResult;
	CString  szX;
	CString  szY;

	for (m_cTCParameter.Copy(pTCParameter), szTable.Empty(), szValue.Empty(); (nResult = CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesTestTCParametersDialog::IDD)) == IDOK; )
	{
		szValue = (GetSelectedCalibrationPoint(szTable, szX, szY)) ? szY : EMPTYSTRING;
		break;
	}
	return((nResult == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesTestTCParametersDialog::SetSelectedCalibrationPoint(LPCTSTR pszTable, LPCTSTR pszX, LPCTSTR pszY)
{
	m_szX = pszX;
	m_szY = pszY;
	m_szTable = pszTable;
}

BOOL CTCProcedurePropertiesTestTCParametersDialog::GetSelectedCalibrationPoint(CString &szTable, CString &szX, CString &szY) CONST
{
	szX = m_szX;
	szY = m_szY;
	szTable = m_szTable;
	return((!szTable.IsEmpty() && !szX.IsEmpty() && !szY.IsEmpty()) ? TRUE : FALSE);
}

CTCProcedurePropertiesDebugDialog *CTCProcedurePropertiesTestTCParametersDialog::GetParent() CONST
{
	return((CTCProcedurePropertiesDebugDialog *)CDisplayDialog::GetParent());
}

BOOL CTCProcedurePropertiesTestTCParametersDialog::EnumParameters()
{
	CString  szParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;

	if ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(m_cTCParameter.GetTag()))))
	{
		if (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))
		{
			szParameter.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSDIALOG_FORMAT), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)pDatabaseTCParameter->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_ITEM, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szParameter);
		}
	}
	szParameter.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSDIALOG_FORMAT), (LPCTSTR)m_cTCParameter.GetTag(), EMPTYSTRING);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_ITEM, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_ITEM, CB_FINDSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameter), 0));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_DETAILS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_ITEM_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_ITEM)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	m_wndFolderCtrl.EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesTestTCParametersDialog::ShowParameterInfo()
{
	m_wndFolderCtrl.ShowParameterInfo(&m_cTCParameter);
}

CRect CTCProcedurePropertiesTestTCParametersDialog::CalcFolderSize() CONST
{
	CRect  rFolder;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_FOLDER)->GetWindowRect(rFolder);
	ScreenToClient(rFolder);
	return rFolder;
}

void CTCProcedurePropertiesTestTCParametersDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesTestTCParametersDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesTestTCParametersDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesTestTCParametersDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_ITEM, OnSelchangeParameter)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestTCParametersDialog message handlers

BOOL CTCProcedurePropertiesTestTCParametersDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	for (CDisplayDialog::OnInitDialog(); m_wndFolderCtrl.Create(this, CalcFolderSize()) && SetChildSheet(&m_wndFolderCtrl, GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTTCPARAMETERS_FOLDER - 1)); )
	{
		if (EnumParameters()) ShowParameterInfo();
		break;
	}
	return TRUE;
}

void CTCProcedurePropertiesTestTCParametersDialog::OnSelchangeParameter()
{
	ShowParameterInfo();
}

void CTCProcedurePropertiesTestTCParametersDialog::OnOK()
{
	CHourglassCursor  cCursor;

	m_wndFolderCtrl.GetSelectedCalibrationPoint(m_szTable, m_szX, m_szY);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesTestTCParametersDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESTESTTCPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesTestTCParametersDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESTESTTCPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestProfileParametersDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesTestProfileParametersDialog, CDisplayDialog)

CTCProcedurePropertiesTestProfileParametersDialog::CTCProcedurePropertiesTestProfileParametersDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesTestProfileParametersDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesTestProfileParametersDialog::Create(CWnd *pParentWnd, CDatabaseTMParameters &pDatabaseTMParameters)
{
	INT  nResult;

	for (m_pDatabaseTMParameters[0].Copy(&pDatabaseTMParameters), m_pDatabaseTMParameters[1].Copy(&pDatabaseTMParameters); (nResult = CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesTestProfileParametersDialog::IDD)) == IDOK; )
	{
		pDatabaseTMParameters.Copy(&m_pDatabaseTMParameters[0]);
		break;
	}
	return nResult;
}

CTCProcedurePropertiesDebugDialog *CTCProcedurePropertiesTestProfileParametersDialog::GetParent() CONST
{
	return((CTCProcedurePropertiesDebugDialog *)CDisplayDialog::GetParent());
}

BOOL CTCProcedurePropertiesTestProfileParametersDialog::EnumParameters()
{
	INT  nColumn;
	INT  nColumns;
	INT  nParameter[2];
	INT  nParameters[2];
	CString  szItem;
	CString  szParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	for (nParameter[0] = 0, nParameters[0] = (INT)m_pDatabaseTMParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
	{
		if ((pDatabaseTMParameter = m_pDatabaseTMParameters[0].GetAt(nParameter[0])))
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
			{
				for (szItem.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
				{
					szItem = pDatabaseTMParameter->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
				{
					szItem = pDatabaseTMParameter->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
				{
					szItem = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
					szItem = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
					szItem = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
				{
					szItem = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_COMPLEMENTCOMPLEX) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_COMPLEMENTCOMPLEX) : szItem;
					szItem = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
				{
					if ((pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) == 0)
					{
						szItem = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
						szItem = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
						szItem = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
						szItem = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
					}
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
				{
					szItem = ExtractValueSample(pDatabaseTMParameter->GetConstValueAsText(), 0);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), nParameter[0], szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), nParameter[0], nColumn, szItem);
			}
		}
	}
	for (nParameter[1] = 0, nParameters[1] = (INT)GetDatabase()->GetTMParameters()->GetSize(); nParameter[1] < nParameters[1]; nParameter[1]++)
	{
		if ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(nParameter[1])) != (CDatabaseTMParameter *)NULL)
		{
			szParameter.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETER_FORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameter);
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), 0);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST, LVM_GETITEMCOUNT) == nParameters[0] && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) == nParameters[1]) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesTestProfileParametersDialog::EnumValueCodings()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_COMPLEMENTCOMPLEX)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT)) >= 0) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesTestProfileParametersDialog::EnumValueRadixes()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL)) >= 0) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesTestProfileParametersDialog::EnumCalibrationTables()
{
	INT  nPos;
	INT  nTable;
	INT  nTables;
	CString  szTable;
	CString  szFormat;
	CString  szParameter;
	CStringArray  szTables[2];
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER)->GetWindowText(szParameter), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETER_FORMAT), EMPTYSTRING, EMPTYSTRING), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_RESETCONTENT); (pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(((nPos = szParameter.Find(szFormat)) >= 0) ? szParameter.Left(nPos) : szParameter))) && pDatabaseTMParameter->GetCalTables(szTables[0], szTables[1]) > 0; )
	{
		for (nTable = 0, nTables = (INT)szTables[0].GetSize(); nTable < nTables; nTable++)
		{
			if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)
			{
				if ((pDatabaseTMNumCalTable = GetDatabase()->GetTMNumCalTables()->GetAt(GetDatabase()->GetTMNumCalTables()->Find(szTables[0].GetAt(nTable)))))
				{
					szTable.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETABLE_FORMAT), (LPCTSTR)pDatabaseTMNumCalTable->GetName(), (LPCTSTR)pDatabaseTMNumCalTable->GetDescription());
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szTable);
					continue;
				}
			}
			if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS)
			{
				if ((pDatabaseTMTxtCalTable = GetDatabase()->GetTMTxtCalTables()->GetAt(GetDatabase()->GetTMTxtCalTables()->Find(szTables[0].GetAt(nTable)))))
				{
					szTable.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETABLE_FORMAT), (LPCTSTR)pDatabaseTMTxtCalTable->GetName(), (LPCTSTR)pDatabaseTMTxtCalTable->GetDescription());
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szTable);
					continue;
				}
			}
		}
		return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_GETCOUNT) == nTables) ? TRUE : FALSE);
	}
	return FALSE;
}

VOID CTCProcedurePropertiesTestProfileParametersDialog::ShowParameterDetails()
{
	CDatabaseTMParameter  *pDatabaseTMParameter;

	if ((pDatabaseTMParameter = FindParameter()))
	{
		ShowParameterDetails(pDatabaseTMParameter);
		return;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_DETAILS)->EnableWindow();
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, FALSE);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_SAMPLE), TCPROCEDUREPROPERTIESTESTPROFILEPARAMETERS_DEFAULTSAMPLE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_RESETCONTENT);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_SAMPLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_SAMPLE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_HELP)->EnableWindow();
}
VOID CTCProcedurePropertiesTestProfileParametersDialog::ShowParameterDetails(CONST CDatabaseTMParameter *pDatabaseTMParameter)
{
	INT  nPoint;
	INT  nPoints;
	double  fX[2];
	CString  szTable;
	CString  szValue[2];
	CString  szParameter;
	ULONGLONG  nAttributes;
	CStringArray  szTables[2];
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;

	for (szParameter.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETER_FORMAT), (LPCTSTR)pDatabaseTMParameter->GetTag(), (LPCTSTR)pDatabaseTMParameter->GetDescription()), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameter)), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE, CB_RESETCONTENT), szTable.Empty(), EnumCalibrationTables(), nAttributes = pDatabaseTMParameter->GetAttributes(); pDatabaseTMParameter->GetCalTables(szTables[0], szTables[1]) > 0; )
	{
		for (; (pDatabaseTMNumCalTable = (nAttributes & TMPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTMNumCalTables()->GetAt(GetDatabase()->GetTMNumCalTables()->Find(szTables[0].GetAt(0))) : (CDatabaseTMNumCalTable *)NULL); )
		{
			szTable.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETABLE_FORMAT), (LPCTSTR)pDatabaseTMNumCalTable->GetName(), (LPCTSTR)pDatabaseTMNumCalTable->GetDescription());
			break;
		}
		if ((pDatabaseTMTxtCalTable = (nAttributes & TMPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTMTxtCalTables()->GetAt(GetDatabase()->GetTMTxtCalTables()->Find(szTables[0].GetAt(0))) : (CDatabaseTMTxtCalTable *)NULL))
		{
			for (nPoint = 0, nPoints = (INT)pDatabaseTMTxtCalTable->GetSize(); nPoint < nPoints; nPoint++)
			{
				if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt(nPoint)))
				{
					for (szValue[0].Empty(); pDatabaseTMTxtCalPoint->GetRange(fX[0], fX[1], szValue[1]) && !pDatabaseTMTxtCalPoint->GetPoint(fX[0], szValue[1]); )
					{
						szValue[0].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERVALUE_RANGEFORMAT), (LPCTSTR)szValue[1], (LONGLONG)fX[0], (LONGLONG)fX[1]);
						break;
					}
					if (szValue[0].IsEmpty()) szValue[0].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERVALUE_POINTFORMAT), (LPCTSTR)szValue[1], (LONGLONG)fX[0]);
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[0]);
				}
			}
			szTable.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETABLE_FORMAT), (LPCTSTR)pDatabaseTMTxtCalTable->GetName(), (LPCTSTR)pDatabaseTMTxtCalTable->GetDescription());
		}
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_DETAILS)->EnableWindow();
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, FALSE);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, ((nAttributes & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_UNSIGNEDINTEGER)) && (nAttributes & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) == 0) ? TRUE : FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_SAMPLE), TCPROCEDUREPROPERTIESTESTPROFILEPARAMETERS_DEFAULTSAMPLE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW, ((nAttributes & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) == 0) ? TRUE : FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED, (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_GETCOUNT) > 0 && (nAttributes & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS))) ? TRUE : FALSE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(((nAttributes & TMPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : ((nAttributes & TMPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : ((nAttributes & TMPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : ((nAttributes & TMPARAMETER_CODING_COMPLEMENTCOMPLEX) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_COMPLEMENTCOMPLEX) : ((nAttributes & TMPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : EMPTYSTRING))))))));
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(((nAttributes & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) == 0) ? (((nAttributes & TMPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : ((nAttributes & TMPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : ((nAttributes & TMPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : ((nAttributes & TMPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : EMPTYSTRING))))) : EMPTYSTRING)));
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szTable));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE)->SetWindowText(ExtractValueSample(pDatabaseTMParameter->GetConstValueAsText(), (INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_SAMPLE))));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_SAMPLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_SAMPLE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW) : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0) ? IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW) : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCOUNT) > 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_HELP)->EnableWindow();
}

CString CTCProcedurePropertiesTestProfileParametersDialog::CollectValueSample(LPCTSTR pszValues, LPCTSTR pszValue, INT nSample) CONST
{
	INT  nPos;
	CString  szValues;
	CStringArray  szValueSamples;

	for (szValues = pszValues; (nPos = szValues.Find(TAB)) >= 0 || !szValues.IsEmpty(); )
	{
		szValueSamples.Add((nPos >= 0) ? szValues.Left(nPos) : szValues);
		szValues = (nPos >= 0) ? szValues.Mid(nPos + 1) : EMPTYSTRING;
	}
	for (szValueSamples.SetAtGrow(nSample, pszValue); szValueSamples.GetSize() > 0; szValueSamples.RemoveAt(0))
	{
		szValues += (!szValues.IsEmpty()) ? (TAB + szValueSamples.GetAt(0)) : szValueSamples.GetAt(0);
		continue;
	}
	return szValues;
}

CString CTCProcedurePropertiesTestProfileParametersDialog::ExtractValueSample(LPCTSTR pszValues, INT nSample) CONST
{
	INT  nPos;
	INT  nCount;
	CString  szValues;

	for (szValues = pszValues, nCount = 0; (nPos = szValues.Find(TAB)) >= 0 || !nSample; )
	{
		if (nCount < nSample)
		{
			szValues = szValues.Mid(nPos + 1);
			nCount++;
			continue;
		}
		szValues = ((nPos = szValues.Find(TAB)) >= 0) ? szValues.Left(nPos) : szValues;
		break;
	}
	return((nCount == nSample) ? szValues : EMPTYSTRING);
}

INT CTCProcedurePropertiesTestProfileParametersDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

CDatabaseTMParameter *CTCProcedurePropertiesTestProfileParametersDialog::FindParameter() CONST
{
	INT  nPos;
	CString  szFormat;
	CString  szParameter;

	szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETER_FORMAT), EMPTYSTRING, EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER)->GetWindowText(szParameter);
	return m_pDatabaseTMParameters[0].GetAt(m_pDatabaseTMParameters[0].Find((szParameter = ((nPos = szParameter.Find(szFormat)) >= 0) ? szParameter.Left(nPos) : szParameter)));
}

BOOL CTCProcedurePropertiesTestProfileParametersDialog::IsModified() CONST
{
	return !m_pDatabaseTMParameters[0].Compare(&m_pDatabaseTMParameters[1]);
}

BOOL CTCProcedurePropertiesTestProfileParametersDialog::Check(BOOL bModified) CONST
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	for (nParameter = 0, nParameters = (INT)m_pDatabaseTMParameters[0].GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter = m_pDatabaseTMParameters[0].GetAt(nParameter)) && (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NONE | TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) && (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT)) && (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) && !pDatabaseTMParameter->GetConstValueAsText().IsEmpty()) continue;
		break;
	}
	return((nParameter == nParameters) ? (!bModified || IsModified()) : FALSE);
}

void CTCProcedurePropertiesTestProfileParametersDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesTestProfileParametersDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesTestProfileParametersDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesTestProfileParametersDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesTestProfileParametersDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW, OnValueInterpretationRaw)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED, OnValueInterpretationCalibrated)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE, OnEditchangeValue)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, OnSelchangeParameter)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE, OnSelchangeValue)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, OnSelchangeValueInterpretationRadix)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, OnSelchangeValueInterpretationTable)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_SAMPLE, OnSpinchangeValueSample)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTestProfileParametersDialog message handlers

BOOL CTCProcedurePropertiesTestProfileParametersDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_SAMPLE), TCPROCEDUREPROPERTIESTESTPROFILEPARAMETERS_MINIMUMSAMPLE, TCPROCEDUREPROPERTIESTESTPROFILEPARAMETERS_MAXIMUMSAMPLE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE));
	for (GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE)) ? (rColumns.Width() / 7) : (9 * rColumns.Width() / 35))));
		continue;
	}
	EnumParameters();
	EnumValueCodings();
	EnumValueRadixes();
	ShowParameterDetails();
	return TRUE;
}

BOOL CTCProcedurePropertiesTestProfileParametersDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CDatabaseTMParameter  *pDatabaseTMParameter;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			if ((pDatabaseTMParameter = m_pDatabaseTMParameters[0].GetAt(pNotifyListView->iItem)))
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_ADD)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_REMOVE)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_REMOVEALL)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
				ShowParameterDetails(pDatabaseTMParameter);
			}
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCProcedurePropertiesTestProfileParametersDialog::OnAdd()
{
	INT  nPos;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	double  fX[2];
	CString  szItem;
	CString  szRadix;
	CString  szValue;
	CString  szFormat;
	CString  szParameter;
	CStringArray  szTables[2];
	CDatabaseTMParameter  *pDatabaseTMParameter[2];
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;
	CHourglassCursor  cCursor;

	if ((pDatabaseTMParameter[0] = new CDatabaseTMParameter))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER)->GetWindowText(szParameter), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE)->GetWindowText(szValue), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX)->GetWindowText(szRadix), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETER_FORMAT), EMPTYSTRING, EMPTYSTRING); (pDatabaseTMParameter[1] = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(((nPos = szParameter.Find(szFormat)) >= 0) ? szParameter.Left(nPos) : szParameter))) && pDatabaseTMParameter[0]->Copy(pDatabaseTMParameter[1]); )
		{
			for (pDatabaseTMParameter[0]->SetAttributes((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW)) ? ((pDatabaseTMParameter[0]->GetAttributes() & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) | TMPARAMETER_CALIBRATION_NONE) : ((pDatabaseTMParameter[0]->GetAttributes() & ~TMPARAMETER_CALIBRATION_NONE) | (pDatabaseTMParameter[1]->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)))), pDatabaseTMParameter[0]->SetAttributes((pDatabaseTMParameter[0]->GetAttributes() & ~(TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) | ((szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY)) ? TMPARAMETER_RADIX_BINARY : 0) | ((szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL)) ? TMPARAMETER_RADIX_OCTAL : 0) | ((szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL)) ? TMPARAMETER_RADIX_DECIMAL : 0) | ((szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL)) ? TMPARAMETER_RADIX_HEXADECIMAL : (pDatabaseTMParameter[0]->GetAttributes() & (TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)))), pDatabaseTMParameter[0]->SetConstValueAsText(CollectValueSample(pDatabaseTMParameter[0]->GetConstValueAsText(), szValue, (INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_SAMPLE)))); IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED) && pDatabaseTMParameter[0]->GetCalTables(szTables[0], szTables[1]) > 0; )
			{
				if ((nIndex = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_GETCURSEL)) > 0)
				{
					szTables[0].InsertAt(0, (LPCTSTR)szTables[0].GetAt(nIndex));
					szTables[1].InsertAt(0, (LPCTSTR)szTables[1].GetAt(nIndex));
					szTables[0].RemoveAt(nIndex + 1);
					szTables[1].RemoveAt(nIndex + 1);
					pDatabaseTMParameter[0]->SetCalTables(szTables[0], szTables[1]);
				}
				if ((pDatabaseTMTxtCalTable = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTMTxtCalTables()->GetAt(GetDatabase()->GetTMTxtCalTables()->Find(szTables[0].GetAt(0))) : (CDatabaseTMTxtCalTable *)NULL))
				{
					if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue))) && pDatabaseTMTxtCalPoint->GetRange(fX[0], fX[1], szValue))
					{
						pDatabaseTMParameter[0]->SetConstValueAsText(CollectValueSample(pDatabaseTMParameter[0]->GetConstValueAsText(), szValue, (INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_SAMPLE))));
						break;
					}
				}
				break;
			}
			for (nColumn = 0, nColumns = ((nIndex = m_pDatabaseTMParameters[0].Add(pDatabaseTMParameter[0])) >= 0) ? (INT)m_szColumns.GetSize() : -1; nColumn < nColumns; nColumn++)
			{
				for (szItem.Empty(); m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
				{
					szItem = pDatabaseTMParameter[0]->GetTag();
					break;
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
				{
					szItem = pDatabaseTMParameter[0]->GetDescription();
					break;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
				{
					szItem = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_CALIBRATION_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
					szItem = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
					szItem = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
				{
					szItem = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
					szItem = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
					szItem = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
					szItem = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_CODING_COMPLEMENTCOMPLEX) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_COMPLEMENTCOMPLEX) : szItem;
					szItem = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
				}
				if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
				{
					if ((pDatabaseTMParameter[0]->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) == 0)
					{
						szItem = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
						szItem = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
						szItem = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
						szItem = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
					}
				}
				for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
				{
					szItem = ExtractValueSample(pDatabaseTMParameter[0]->GetConstValueAsText(), 0);
					break;
				}
				if (!nColumn)
				{
					Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), nIndex, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), nIndex, nColumn, szItem);
			}
			if (nIndex >= 0)
			{
				Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), nIndex);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_ADD)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)) >= 0) ? TRUE : FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER)->SetFocus();
			}
			break;
		}
		if (m_pDatabaseTMParameters[0].Find(pDatabaseTMParameter[0]->GetTag()) < 0) delete pDatabaseTMParameter[0];
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesTestProfileParametersDialog::OnRemove()
{
	INT  nIndex;
	CDatabaseTMParameter  *pDatabaseTMParameter[2];
	CHourglassCursor  cCursor;

	if (Listview_DeleteText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)))))
	{
		for (pDatabaseTMParameter[0] = m_pDatabaseTMParameters[0].GetAt(nIndex), m_pDatabaseTMParameters[0].RemoveAt(nIndex); (pDatabaseTMParameter[1] = (Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), 0)) ? m_pDatabaseTMParameters[0].GetAt(0) : (CDatabaseTMParameter *)NULL); )
		{
			ShowParameterDetails(pDatabaseTMParameter[1]);
			break;
		}
		for (; !pDatabaseTMParameter[1]; )
		{
			ShowParameterDetails();
			break;
		}
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_ADD)->EnableWindow(FALSE); !SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST, LVM_GETITEMCOUNT); )
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST_STATIC)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_REMOVE)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_REMOVEALL)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER)->SetFocus();
			break;
		}
		delete pDatabaseTMParameter[0];
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesTestProfileParametersDialog::OnRemoveAll()
{
	CHourglassCursor  cCursor;

	for (m_pDatabaseTMParameters[0].RemoveAll(); SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST, LVM_DELETEALLITEMS); )
	{
		ShowParameterDetails();
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesTestProfileParametersDialog::OnValueInterpretationRaw()
{
	INT  nPos;
	CString  szFormat;
	CString  szParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CHourglassCursor  cCursor;

	for (CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW, TRUE), CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED, FALSE), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER)->GetWindowText(szParameter), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETER_FORMAT), EMPTYSTRING, EMPTYSTRING); (pDatabaseTMParameter = FindParameter()); )
	{
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE)), STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW));
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE)), EMPTYSTRING);
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX)), ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_RADIX_DECIMAL) == 0) ? ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY))) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL));
		AccessControl(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_UNSIGNEDINTEGER)) ? TRUE : FALSE);
		pDatabaseTMParameter->SetAttributes((pDatabaseTMParameter->GetAttributes() & ~(TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) | TMPARAMETER_CALIBRATION_NONE);
		pDatabaseTMParameter->SetConstValueAsText(EMPTYSTRING);
		break;
	}
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, TRUE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE, CB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(((nPos = szParameter.Find(szFormat)) >= 0) ? szParameter.Left(nPos) : szParameter)))) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_BITPATTERN) && (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_RADIX_DECIMAL) == 0) ? ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY))) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL)) : EMPTYSTRING)));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_ADD)->EnableWindow((!FindParameter() && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCURSEL) >= 0 && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE)->GetWindowTextLength() > 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED)) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, CB_GETCURSEL) >= 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED) || SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_GETCURSEL) >= 0)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX)->EnableWindow();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesTestProfileParametersDialog::OnValueInterpretationCalibrated()
{
	INT  nPos;
	INT  nPoint;
	INT  nPoints;
	double  fX[2];
	CString  szFormat;
	CString  szValue[2];
	CString  szParameter;
	CStringArray  szTables[2];
	CDatabaseTMParameter  *pDatabaseTMParameter[2];
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;
	CHourglassCursor  cCursor;

	for (CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW, FALSE), CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED, TRUE), AccessControl(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, FALSE); (pDatabaseTMParameter[0] = FindParameter()); )
	{
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE)), ((pDatabaseTMParameter[1] = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pDatabaseTMParameter[0]->GetTag())))) ? ((pDatabaseTMParameter[1]->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS)) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW));
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE)), EMPTYSTRING);
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX)), EMPTYSTRING);
		pDatabaseTMParameter[0]->SetAttributes((pDatabaseTMParameter[0]->GetAttributes() & ~TMPARAMETER_CALIBRATION_NONE) | (pDatabaseTMParameter[1]->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)));
		pDatabaseTMParameter[0]->SetConstValueAsText(EMPTYSTRING);
		break;
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER)->GetWindowText(szParameter), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETER_FORMAT), EMPTYSTRING, EMPTYSTRING), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE, CB_RESETCONTENT); (pDatabaseTMParameter[0] = (!pDatabaseTMParameter[0]) ? GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(((nPos = szParameter.Find(szFormat)) >= 0) ? szParameter.Left(nPos) : szParameter)) : pDatabaseTMParameter[0]) && pDatabaseTMParameter[0]->GetCalTables(szTables[0], szTables[1]) > 0; )
	{
		if ((pDatabaseTMTxtCalTable = (pDatabaseTMParameter[0]->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTMTxtCalTables()->GetAt(GetDatabase()->GetTMTxtCalTables()->Find(szTables[0].GetAt(0))) : (CDatabaseTMTxtCalTable *)NULL))
		{
			for (nPoint = 0, nPoints = (INT)pDatabaseTMTxtCalTable->GetSize(); nPoint < nPoints; nPoint++)
			{
				if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt(nPoint)))
				{
					for (szValue[0].Empty(); pDatabaseTMTxtCalPoint->GetRange(fX[0], fX[1], szValue[1]) && !pDatabaseTMTxtCalPoint->GetPoint(fX[0], szValue[1]); )
					{
						szValue[0].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERVALUE_RANGEFORMAT), (LPCTSTR)szValue[1], (LONGLONG)fX[0], (LONGLONG)fX[1]);
						break;
					}
					for (; szValue[0].IsEmpty(); )
					{
						szValue[0].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERVALUE_POINTFORMAT), (LPCTSTR)szValue[1], (LONGLONG)fX[0]);
						break;
					}
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue[0]);
				}
			}
		}
		break;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_SETCURSEL, 0);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_ADD)->EnableWindow((!FindParameter() && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCURSEL) >= 0 && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE)->GetWindowTextLength() > 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED)) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, CB_GETCURSEL) >= 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED) || SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_GETCURSEL) >= 0)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesTestProfileParametersDialog::OnEditchangeValue()
{
	CString  szValue;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	if ((pDatabaseTMParameter = FindParameter()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE)->GetWindowText(szValue);
		pDatabaseTMParameter->SetConstValueAsText(CollectValueSample(pDatabaseTMParameter->GetConstValueAsText(), szValue, (INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_SAMPLE))));
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE)), ExtractValueSample(pDatabaseTMParameter->GetConstValueAsText(), 0));
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_ADD)->EnableWindow((!FindParameter() && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCURSEL) >= 0 && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE)->GetWindowTextLength() > 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED)) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, CB_GETCURSEL) >= 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED) || SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_GETCURSEL) >= 0)) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesTestProfileParametersDialog::OnSelchangeParameter()
{
	INT  nPos;
	CString  szFormat;
	CString  szParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER)->GetWindowText(szParameter), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETER_FORMAT), EMPTYSTRING, EMPTYSTRING); (pDatabaseTMParameter = (!(pDatabaseTMParameter = m_pDatabaseTMParameters[0].GetAt(m_pDatabaseTMParameters[0].Find((szParameter = ((nPos = szParameter.Find(szFormat)) >= 0) ? szParameter.Left(nPos) : szParameter))))) ? GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(szParameter)) : pDatabaseTMParameter); )
	{
		ShowParameterDetails(pDatabaseTMParameter);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_ADD)->EnableWindow((!FindParameter() && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCURSEL) >= 0 && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE)->GetWindowTextLength() > 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED)) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, CB_GETCURSEL) >= 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED) || SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_GETCURSEL) >= 0)) ? TRUE : FALSE);
}

void CTCProcedurePropertiesTestProfileParametersDialog::OnSelchangeValue()
{
	double  fX[2];
	CString  szValue;
	CStringArray  szTables[2];
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;

	for (; (pDatabaseTMParameter = FindParameter()); )
	{
		if ((pDatabaseTMTxtCalTable = ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) && pDatabaseTMParameter->GetCalTables(szTables[0], szTables[1]) > 0) ? GetDatabase()->GetTMTxtCalTables()->GetAt(GetDatabase()->GetTMTxtCalTables()->Find(szTables[0].GetAt(0))) : (CDatabaseTMTxtCalTable *)NULL))
		{
			if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE, CB_GETCURSEL))) && pDatabaseTMTxtCalPoint->GetRange(fX[0], fX[1], szValue))
			{
				pDatabaseTMParameter->SetConstValueAsText(CollectValueSample(pDatabaseTMParameter->GetConstValueAsText(), szValue, (INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_SAMPLE))));
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE)), ExtractValueSample(pDatabaseTMParameter->GetConstValueAsText(), 0));
				break;
			}
		}
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE)), EMPTYSTRING);
		pDatabaseTMParameter->SetConstValueAsText(EMPTYSTRING);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_ADD)->EnableWindow((!FindParameter() && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCURSEL) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE, CB_GETCURSEL) >= 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED)) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, CB_GETCURSEL) >= 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED) || SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_GETCURSEL) >= 0)) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesTestProfileParametersDialog::OnSelchangeValueInterpretationRadix()
{
	CString  szRadix;
	CDatabaseTMParameter  *pDatabaseTMParameter;

	if ((pDatabaseTMParameter = FindParameter()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX)->GetWindowText(szRadix);
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX)), szRadix);
		pDatabaseTMParameter->SetAttributes((pDatabaseTMParameter->GetAttributes() & ~(TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) | ((szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY)) ? TMPARAMETER_RADIX_BINARY : 0) | ((szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL)) ? TMPARAMETER_RADIX_OCTAL : 0) | ((szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL)) ? TMPARAMETER_RADIX_DECIMAL : 0) | ((szRadix == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL)) ? TMPARAMETER_RADIX_HEXADECIMAL : 0));
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_ADD)->EnableWindow((!FindParameter() && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCURSEL) >= 0 && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE)->GetWindowTextLength() > 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED)) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, CB_GETCURSEL) >= 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED) || SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_GETCURSEL) >= 0)) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesTestProfileParametersDialog::OnSelchangeValueInterpretationTable()
{
	INT  nIndex;
	CStringArray  szTables[2];
	CDatabaseTMParameter  *pDatabaseTMParameter;

	if ((pDatabaseTMParameter = FindParameter()))
	{
		if ((nIndex = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_TABLE, CB_GETCURSEL)) > 0 && pDatabaseTMParameter->GetCalTables(szTables[0], szTables[1]) > 1)
		{
			szTables[0].InsertAt(0, (LPCTSTR)szTables[0].GetAt(nIndex));
			szTables[1].InsertAt(0, (LPCTSTR)szTables[1].GetAt(nIndex));
			szTables[0].RemoveAt(nIndex + 1);
			szTables[1].RemoveAt(nIndex + 1);
			pDatabaseTMParameter->SetCalTables(szTables[0], szTables[1]);
		}
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_ADD)->EnableWindow((!FindParameter() && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_PARAMETER, CB_GETCURSEL) >= 0 && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE)->GetWindowTextLength() > 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RAW) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED)) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CODING, CB_GETCURSEL) >= 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_CALIBRATED) || SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUEINTERPRETATION_RADIX, CB_GETCURSEL) >= 0)) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesTestProfileParametersDialog::OnSpinchangeValueSample()
{
	CDatabaseTMParameter  *pDatabaseTMParameter;

	if ((pDatabaseTMParameter = FindParameter()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE)->SetWindowText(ExtractValueSample(pDatabaseTMParameter->GetConstValueAsText(), (INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TESTPROFILEPARAMETERS_VALUE_SAMPLE))));
		return;
	}
}

BOOL CTCProcedurePropertiesTestProfileParametersDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESTESTPROFILEPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesTestProfileParametersDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESTESTPROFILEPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesDebugDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesDebugDialog, CLocaleDialog)

CTCProcedurePropertiesDebugDialog::CTCProcedurePropertiesDebugDialog(CWnd *pParentWnd) : CLocaleDialog(CTCProcedurePropertiesDebugDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesDebugDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
	m_pCriticalSection = new CCriticalSection;
}

CTCProcedurePropertiesDebugDialog::~CTCProcedurePropertiesDebugDialog()
{
	delete m_pCriticalSection;
}

BOOL CTCProcedurePropertiesDebugDialog::SetInfo(CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	INT  nIndex[2];
	INT  nThread[3];
	INT  nThreads[3];
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread[2];
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints[2];
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles[2];

	if (pDatabaseTCProcedure->GetAttributes() & TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE)
	{
		for (m_cDatabaseTCProcedure[0].RemoveAll(), m_cDatabaseTCProcedure[1].RemoveAll(); TRUE; )
		{
			EnumThreads();
			EnumBreakpoints();
			EnumTestProfiles();
			EnumBreakpointLocations();
			EnumTestProfileLocations();
			EnumTestProfileParameters();
			ShowInfo();
			break;
		}
		return TRUE;
	}
	if (!pDatabaseTCProcedure->GetSize())
	{
		if ((pDatabaseTCProcedureThread[0] = new CDatabaseTCProcedureThread))
		{
			if ((pDatabaseTCProcedureThread[1] = new CDatabaseTCProcedureThread))
			{
				pDatabaseTCProcedureThread[0]->SetName(STRING(IDS_TCPROCEDURE_DEFAULTTHREAD_NAME));
				pDatabaseTCProcedureThread[1]->SetName(STRING(IDS_TCPROCEDURE_DEFAULTTHREAD_NAME));
				pDatabaseTCProcedureThread[0]->SetAttributes(TCPROCEDURETHREAD_AUTHORITY_AUTOENABLED);
				pDatabaseTCProcedureThread[1]->SetAttributes(TCPROCEDURETHREAD_AUTHORITY_AUTOENABLED);
				pDatabaseTCProcedureThread[0]->SetState(TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING | TCPROCEDURETHREAD_AUTHORITY_ENABLED);
				pDatabaseTCProcedureThread[1]->SetState(TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING | TCPROCEDURETHREAD_AUTHORITY_ENABLED);
				if (m_cDatabaseTCProcedure[0].Copy(pDatabaseTCProcedure) && m_cDatabaseTCProcedure[1].Copy(pDatabaseTCProcedure))
				{
					if ((nIndex[0] = m_cDatabaseTCProcedure[0].Add(pDatabaseTCProcedureThread[0])) >= 0)
					{
						if ((nIndex[1] = m_cDatabaseTCProcedure[1].Add(pDatabaseTCProcedureThread[1])) >= 0)
						{
							EnumThreads();
							EnumBreakpoints();
							EnumTestProfiles();
							EnumBreakpointLocations();
							EnumTestProfileLocations();
							EnumTestProfileParameters();
							ShowInfo();
							return TRUE;
						}
						m_cDatabaseTCProcedure[0].RemoveAt(nIndex[0]);
					}
				}
				delete pDatabaseTCProcedureThread[1];
			}
			delete pDatabaseTCProcedureThread[0];
		}
	}
	for (nThread[0] = 0, nThreads[0] = (m_cDatabaseTCProcedure[0].GetSize() == pDatabaseTCProcedure->GetSize()) ? (INT)m_cDatabaseTCProcedure[0].GetSize() : -1; nThread[0] < nThreads[0]; nThread[0]++)
	{
		if ((pDatabaseTCProcedureThread[1] = ((pDatabaseTCProcedureThread[0] = m_cDatabaseTCProcedure[0].GetAt(nThread[0]))) ? pDatabaseTCProcedure->GetAt(nThread[0]) : (CDatabaseTCProcedureThread *)NULL))
		{
			if (pDatabaseTCProcedureThread[0]->GetName() == pDatabaseTCProcedureThread[1]->GetName() && pDatabaseTCProcedureThread[0]->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints[0]) >= 0 && pDatabaseTCProcedureThread[1]->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints[1]) >= 0)
			{
				if (!pDatabaseTCProcedureThreadBreakpoints[0].Compare(&pDatabaseTCProcedureThreadBreakpoints[1]) || !pDatabaseTCProcedureThreadTestProfiles[0].Compare(&pDatabaseTCProcedureThreadTestProfiles[1])) break;
				continue;
			}
			break;
		}
	}
	if (nThread[0] != nThreads[0])
	{
		for (nThread[1] = 0, nThreads[1] = (INT)pDatabaseTCProcedure->GetSize(), m_cDatabaseTCProcedure[0].RemoveAll(); nThread[1] < nThreads[1]; nThread[1]++)
		{
			if ((pDatabaseTCProcedureThread[1] = ((pDatabaseTCProcedureThread[0] = pDatabaseTCProcedure->GetAt(nThread[1]))) ? new CDatabaseTCProcedureThread : (CDatabaseTCProcedureThread *)NULL))
			{
				if (pDatabaseTCProcedureThread[0]->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints[0]) >= 0 && pDatabaseTCProcedureThread[0]->GetProfiles(pDatabaseTCProcedureThreadTestProfiles[0]) >= 0)
				{
					pDatabaseTCProcedureThread[1]->SetName(pDatabaseTCProcedureThread[0]->GetName());
					pDatabaseTCProcedureThread[1]->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints[0]);
					pDatabaseTCProcedureThread[1]->SetProfiles(pDatabaseTCProcedureThreadTestProfiles[0]);
					if (m_cDatabaseTCProcedure[0].Add(pDatabaseTCProcedureThread[1]) >= 0) continue;
				}
				delete pDatabaseTCProcedureThread[1];
			}
			break;
		}
	}
	for (nThread[2] = 0, nThreads[2] = (INT)pDatabaseTCProcedure->GetSize(), m_cDatabaseTCProcedure[1].RemoveAll(); nThread[2] < nThreads[2]; nThread[2]++)
	{
		if ((pDatabaseTCProcedureThread[1] = ((pDatabaseTCProcedureThread[0] = pDatabaseTCProcedure->GetAt(nThread[2]))) ? new CDatabaseTCProcedureThread : (CDatabaseTCProcedureThread *)NULL))
		{
			if (pDatabaseTCProcedureThread[0]->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints[0]) >= 0 && pDatabaseTCProcedureThread[0]->GetProfiles(pDatabaseTCProcedureThreadTestProfiles[0]) >= 0)
			{
				pDatabaseTCProcedureThread[1]->SetName(pDatabaseTCProcedureThread[0]->GetName());
				pDatabaseTCProcedureThread[1]->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints[0]);
				pDatabaseTCProcedureThread[1]->SetProfiles(pDatabaseTCProcedureThreadTestProfiles[0]);
				if (m_cDatabaseTCProcedure[1].Add(pDatabaseTCProcedureThread[1]) >= 0) continue;
			}
			delete pDatabaseTCProcedureThread[1];
		}
		break;
	}
	if (nThread[0] != nThreads[0] && nThread[1] == nThreads[1])
	{
		EnumThreads();
		EnumBreakpoints();
		EnumTestProfiles();
		EnumBreakpointLocations();
		EnumTestProfileLocations();
		EnumTestProfileParameters();
		ShowInfo();
	}
	return(((nThread[0] == nThreads[0] || nThread[1] == nThreads[1]) && nThread[2] == nThreads[2]) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesDebugDialog::GetInfo(CDatabaseTCProcedure *pDatabaseTCProcedure) CONST
{
	INT  nThread;
	INT  nThreads;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread[2];
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;

	for (nThread = 0, nThreads = (INT)pDatabaseTCProcedure->GetSize(); nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread[0] = pDatabaseTCProcedure->GetAt(nThread)) != (CDatabaseTCProcedureThread *)NULL)
		{
			if ((pDatabaseTCProcedureThread[1] = m_cDatabaseTCProcedure[0].GetAt(m_cDatabaseTCProcedure[0].Find(pDatabaseTCProcedureThread[0]->GetName()))))
			{
				if (pDatabaseTCProcedureThread[1]->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) >= 0 && pDatabaseTCProcedureThread[1]->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) >= 0 && pDatabaseTCProcedureThread[0]->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) && pDatabaseTCProcedureThread[0]->SetProfiles(pDatabaseTCProcedureThreadTestProfiles)) continue;
				break;
			}
		}
	}
	return((nThread == nThreads) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesDebugDialog::SetBreakpoints(LPCTSTR pszThread, CONST CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints)
{
	CString  szName;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure[0].GetAt(m_cDatabaseTCProcedure[0].Find(pszThread))) && pDatabaseTCProcedureThread->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_THREAD)->GetWindowText(szName); szName == pszThread; )
		{
			EnumBreakpoints();
			EnumBreakpointLocations();
			ShowBreakpointProperties();
			break;
		}
		return TRUE;
	}
	return FALSE;
}

INT CTCProcedurePropertiesDebugDialog::GetBreakpoints(LPCTSTR pszThread, CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints) CONST
{
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	return(((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure[0].GetAt(m_cDatabaseTCProcedure[0].Find(pszThread)))) ? pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) : 0);
}

VOID CTCProcedurePropertiesDebugDialog::UpdateSteps(LPCTSTR pszThread, CONST CPtrArray &pSteps)
{
	CString  szName;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_THREAD)->GetWindowText(szName); szName == pszThread; )
	{
		m_pSteps.Copy(pSteps);
		EnumBreakpointLocations();
		EnumTestProfileLocations();
		break;
	}
}

VOID CTCProcedurePropertiesDebugDialog::UpdateBreakpoints(LPCTSTR pszThread, CONST CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints)
{
	GetParentDisplay()->GetFlowchartView()->SetBreakpoints(pszThread, pDatabaseTCProcedureThreadBreakpoints);
	GetParentDisplay()->UpdateProcedureThreadBreakpoints(pszThread, pDatabaseTCProcedureThreadBreakpoints);
}

VOID CTCProcedurePropertiesDebugDialog::UpdateIdentifiers(CTMEnvironment *pTMEnvironment, CTCEnvironment *pTCEnvironment, CONST CStringArray &szIdentifiers, CONST CUIntArray &nIdentifierTypes, CONST CLongUIntArray &nIdentifierAttributes, CONST CPtrArray &pIdentifiers)
{
	INT  nIdentifier;
	INT  nIdentifiers;
	CTMUnit  cTMUnit;
	CStringArray  szCalTables[2];
	CTMParameter  *pTMParameter;
	CTCParameter  *pTCParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;

	if (Lock())
	{
		for (nIdentifier = 0, nIdentifiers = (INT)szIdentifiers.GetSize(), m_szIdentifiers.Copy(szIdentifiers), m_nIdentifierTypes.Copy(nIdentifierTypes), m_nIdentifierAttributes.Copy(nIdentifierAttributes), m_pIdentifiers.Copy(pIdentifiers); nIdentifier < nIdentifiers; nIdentifier++)
		{
			if ((nIdentifierTypes.GetAt(nIdentifier) & TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER)
			{
				if ((pTMParameter = (m_pTMParameters.Find(szIdentifiers.GetAt(nIdentifier)) < 0) ? new CTMParameter : (CTMParameter *)NULL))
				{
					if ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(szIdentifiers.GetAt(nIdentifier)))))
					{
						for (pTMParameter->SetTag(pDatabaseTMParameter->GetTag()), pTMParameter->SetAttributes(pDatabaseTMParameter->GetAttributes()); pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_CONSTANT; )
						{
							pTMParameter->SetRawValue(&cTMUnit, 0, pDatabaseTMParameter->GetConstValue(), TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_NOLIMIT | TMPARAMETER_STATUS_VALID, (pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]) > 0) ? ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? (((pDatabaseTMNumCalTable = GetDatabase()->GetTMNumCalTables()->GetAt(GetDatabase()->GetTMNumCalTables()->Find(szCalTables[0].GetAt(0))))) ? (LPCTSTR)pDatabaseTMNumCalTable->GetName() : EMPTYSTRING) : (((pDatabaseTMTxtCalTable = GetDatabase()->GetTMTxtCalTables()->GetAt(GetDatabase()->GetTMTxtCalTables()->Find(szCalTables[0].GetAt(0))))) ? (LPCTSTR)pDatabaseTMTxtCalTable->GetName() : EMPTYSTRING)) : EMPTYSTRING);
							break;
						}
						if (m_pTMParameters.Add(pTMParameter) >= 0) continue;
					}
					delete pTMParameter;
					continue;
				}
				if ((pTMParameter = m_pTMParameters.GetAt(m_pTMParameters.Find(szIdentifiers.GetAt(nIdentifier)))))
				{
					pTMParameter->Reset();
					continue;
				}
			}
			if (nIdentifierTypes.GetAt(nIdentifier) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TCPARAMETER)
			{
				if ((pTCParameter = (m_pTCParameters.Find(szIdentifiers.GetAt(nIdentifier)) < 0) ? new CTCParameter : (CTCParameter *)NULL))
				{
					if ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(szIdentifiers.GetAt(nIdentifier)))))
					{
						pTCParameter->SetTag(pDatabaseTCParameter->GetTag());
						pTCParameter->SetAttributes(pDatabaseTCParameter->GetAttributes());
						if (m_pTCParameters.Add(pTCParameter) >= 0) continue;
					}
					delete pTCParameter;
					continue;
				}
				if ((pTCParameter = m_pTCParameters.GetAt(m_pTCParameters.Find(szIdentifiers.GetAt(nIdentifier)))))
				{
					pTCParameter->Reset();
					continue;
				}
			}
		}
		pTMEnvironment->Initialize(m_pTMParameters);
		pTCEnvironment->Initialize(m_pTCParameters);
		Unlock();
	}
	SetTimer(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, 0, NULL);
}

VOID CTCProcedurePropertiesDebugDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_DISABLED, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_DISABLED, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_VALID, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_INVALID, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_GOOD, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_BAD, bCheck);
}

CTCProcedurePropertiesThreadView *CTCProcedurePropertiesDebugDialog::GetParent() CONST
{
	return((CTCProcedurePropertiesThreadView *)CLocaleDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesDebugDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParent()->GetParent()->GetParent()->GetParent();
}

BOOL CTCProcedurePropertiesDebugDialog::EnumThreads()
{
	INT  nThread;
	INT  nThreads;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	for (nThread = 0, nThreads = (INT)m_cDatabaseTCProcedure[0].GetSize(); nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure[0].GetAt(nThread)) != (CDatabaseTCProcedureThread *)NULL)
		{
			if (Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_THREAD), nThread) != pDatabaseTCProcedureThread->GetName())
			{
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_THREAD, CB_INSERTSTRING, nThread, (LPARAM)(LPCTSTR)pDatabaseTCProcedureThread->GetName());
				continue;
			}
		}
	}
	while (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_THREAD, CB_GETCOUNT) > nThreads)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_THREAD, CB_DELETESTRING, nThreads);
		continue;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_THREAD, CB_SETCURSEL, max(SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_THREAD, CB_GETCURSEL), 0));
	return((nThread == nThreads) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesDebugDialog::EnumBreakpoints()
{
	INT  nColumn;
	INT  nColumns;
	INT  nBreakpoint;
	INT  nBreakpoints;
	CString  szItem;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (nBreakpoint = 0, nBreakpoints = pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, LVM_DELETEALLITEMS); nBreakpoint < nBreakpoints; nBreakpoint++)
		{
			if ((pDatabaseTCProcedureThreadBreakpoint = pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint)))
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(); nColumn < nColumns; nColumn++)
				{
					for (szItem.Empty(); m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_LOCATION); )
					{
						szItem = pDatabaseTCProcedureThreadBreakpoint->GetLocation();
						break;
					}
					if (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_OPTIONS))
					{
						szItem = (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ALWAYS) : EMPTYSTRING;
						szItem = (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_FORMAT)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDTRIGGER)) : szItem;
						szItem += (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY) ? ((!szItem.IsEmpty()) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_SEPARATOR)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDBODY)) : (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_FORMAT)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDBODY))) : EMPTYSTRING;
						szItem += (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION) ? ((!szItem.IsEmpty()) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_SEPARATOR)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDCONFIRMATION)) : (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_FORMAT)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDCONFIRMATION))) : EMPTYSTRING;
					}
					for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_STATE); )
					{
						szItem = (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_DISABLED) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSSTATE_DISABLED) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSSTATE_ENABLED);
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), nBreakpoint, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), nBreakpoint, nColumn, szItem);
				}
			}
		}
		Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), 0);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, LVM_GETITEMCOUNT) == nBreakpoints) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesDebugDialog::EnumBreakpointLocations()
{
	INT  nStep;
	INT  nSteps;
	INT  nCount;
	INT  nBreakpoint;
	INT  nBreakpoints;
	CString  szLocation;
	CTCProcedureDocumentItem  *pStep;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (nStep = 0, GetParentDisplay()->GetFlowchartView()->UpdateSteps(pDatabaseTCProcedureThread->GetName(), m_pSteps), nSteps = (INT)m_pSteps.GetSize(), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION)->GetWindowText(szLocation), nCount = 0; nStep < nSteps; nStep++)
		{
			if ((pStep = (CTCProcedureDocumentItem *)m_pSteps.GetAt(nStep)) != (CTCProcedureDocumentItem *)NULL  &&  !pStep->GetName().IsEmpty())
			{
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION, CB_INSERTSTRING, nCount, (LPARAM)(LPCTSTR)pStep->GetName());
				nCount++;
			}
		}
		while (nCount < SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION, CB_GETCOUNT))
		{
			if (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION, CB_DELETESTRING, nCount) < 0) break;
			continue;
		}
		for (nBreakpoint = 0, nBreakpoints = pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints); nBreakpoint < nBreakpoints; nBreakpoint++)
		{
			if ((pDatabaseTCProcedureThreadBreakpoint = pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint)) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTCProcedureThreadBreakpoint->GetLocation()) < 0)
			{
				Listview_DeleteText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), nBreakpoint);
				pDatabaseTCProcedureThreadBreakpoints.RemoveAt(nBreakpoint);
				delete pDatabaseTCProcedureThreadBreakpoint;
				nBreakpoints--;
				nBreakpoint--;
			}
		}
		Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), max(Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS)), 0));
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szLocation));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION)->GetWindowText(szLocation);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ADD)->EnableWindow((pDatabaseTCProcedureThreadBreakpoints.Find(szLocation) < 0 && !szLocation.IsEmpty() && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION))) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS)) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, LVM_GETITEMCOUNT) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		UpdateBreakpoints(pDatabaseTCProcedureThread->GetName(), pDatabaseTCProcedureThreadBreakpoints);
		pDatabaseTCProcedureThread->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints);
	}
	if (!SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION, CB_GETCOUNT))
	{
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_DISABLED, FALSE);
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION, CB_GETCOUNT) == m_pSteps.GetSize()) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesDebugDialog::EnumTestProfiles()
{
	INT  nColumn;
	INT  nColumns;
	INT  nProfile;
	INT  nProfiles;
	CString  szItem;
	CString  szFormat;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (nProfile = 0, nProfiles = pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, LVM_DELETEALLITEMS); nProfile < nProfiles; nProfile++)
		{
			if ((pDatabaseTCProcedureThreadTestProfile = pDatabaseTCProcedureThreadTestProfiles.GetAt(nProfile)))
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(); nColumn < nColumns; nColumn++)
				{
					for (szItem.Empty(); m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_NAME); )
					{
						szItem = pDatabaseTCProcedureThreadTestProfile->GetName();
						break;
					}
					for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_LOCATION); )
					{
						szItem = pDatabaseTCProcedureThreadTestProfile->GetLocation();
						break;
					}
					if (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_OPTIONS))
					{
						for (szItem = (pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEIMMEDIATELY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEOPTION_EXECUTEIMMEDIATELY) : EMPTYSTRING, szFormat = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEOPTION_EXECUTEDELAYEDAFTERSTART); pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART; )
						{
							szItem.Format(szFormat, pDatabaseTCProcedureThreadTestProfile->GetDelay().GetTotalSeconds());
							break;
						}
						for (szFormat = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEOPTION_EXECUTEDELAYEDAFTERSTEP); pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTEP; )
						{
							szItem.Format(szFormat, pDatabaseTCProcedureThreadTestProfile->GetDelay().GetTotalSeconds());
							break;
						}
					}
					for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_STATE); )
					{
						szItem = (pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_DISABLED) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESSTATE_DISABLED) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESSTATE_ENABLED);
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), nProfile, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), nProfile, nColumn, szItem);
				}
			}
		}
		Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), 0);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, LVM_GETITEMCOUNT) == nProfiles) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesDebugDialog::EnumTestProfileLocations()
{
	INT  nStep;
	INT  nSteps;
	INT  nCount;
	INT  nProfile;
	INT  nProfiles;
	CString  szName;
	CString  szLocation;
	CTCProcedureDocumentItem  *pStep;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (nStep = 0, GetParentDisplay()->GetFlowchartView()->UpdateSteps(pDatabaseTCProcedureThread->GetName(), m_pSteps), nSteps = (INT)m_pSteps.GetSize(), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION)->GetWindowText(szLocation), nCount = 0; nStep < nSteps; nStep++)
		{
			if ((pStep = (CTCProcedureDocumentItem *)m_pSteps.GetAt(nStep)) != (CTCProcedureDocumentItem *)NULL  &&  !pStep->GetName().IsEmpty())
			{
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION, CB_INSERTSTRING, nCount, (LPARAM)(LPCTSTR)pStep->GetName());
				nCount++;
			}
		}
		while (nCount < SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION, CB_GETCOUNT))
		{
			if (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION, CB_DELETESTRING, nCount) < 0) break;
			continue;
		}
		for (nProfile = 0, nProfiles = pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles); nProfile < nProfiles; nProfile++)
		{
			if ((pDatabaseTCProcedureThreadTestProfile = pDatabaseTCProcedureThreadTestProfiles.GetAt(nProfile)) && (pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART) != TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART  &&  SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTCProcedureThreadTestProfile->GetLocation()) < 0)
			{
				Listview_DeleteText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), nProfile);
				pDatabaseTCProcedureThreadTestProfiles.RemoveAt(nProfile);
				delete pDatabaseTCProcedureThreadTestProfile;
				nProfiles--;
				nProfile--;
			}
		}
		Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), max(Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)), 0));
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szLocation));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->GetWindowText(szName);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION)->GetWindowText(szLocation);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ADD)->EnableWindow((pDatabaseTCProcedureThreadTestProfiles.Find(szName) < 0 && !szName.IsEmpty() && (!szLocation.IsEmpty() || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART)) && m_pDatabaseTMParameters.GetSize() > 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP))) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, LVM_GETITEMCOUNT) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		pDatabaseTCProcedureThread->SetProfiles(pDatabaseTCProcedureThreadTestProfiles);
	}
	if (!SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION, CB_GETCOUNT) && !pDatabaseTCProcedureThreadTestProfiles.GetSize())
	{
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_DISABLED, FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS_STATIC)->EnableWindow(FALSE);
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION, CB_GETCOUNT) == m_pSteps.GetSize()) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesDebugDialog::EnumTestProfileParameters()
{
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	CString  szItem;
	CDatabaseTMParameter  *pDatabaseTMParameter[2];
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (nParameter = 0, nParameters = ((pDatabaseTCProcedureThreadTestProfile = (pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) > 0) ? pDatabaseTCProcedureThreadTestProfiles.GetAt(pDatabaseTCProcedureThreadTestProfiles.Find(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_NAME))))) : (CDatabaseTCProcedureThreadTestProfile *)NULL)) ? (INT)pDatabaseTCProcedureThreadTestProfile->GetSize() : 0, m_pDatabaseTMParameters.RemoveAll(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_DELETEALLITEMS); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTMParameter[1] = ((pDatabaseTMParameter[0] = pDatabaseTCProcedureThreadTestProfile->GetAt(nParameter))) ? new CDatabaseTMParameter : (CDatabaseTMParameter *)NULL))
			{
				for (nColumn = 0, nColumns = (pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0]) && m_pDatabaseTMParameters.Add(pDatabaseTMParameter[1]) >= 0) ? (INT)m_szColumns[2].GetSize() : -1; nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns[2].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEPARAMETERSTITLEITEM_TAG); )
					{
						szItem = pDatabaseTMParameter[0]->GetTag();
						break;
					}
					for (; m_szColumns[2].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEPARAMETERSTITLEITEM_VALUE); )
					{
						szItem = ConvertTestProfileParameterValues(pDatabaseTMParameter[0]->GetConstValueAsText());
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS), nParameter, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS), nParameter, nColumn, szItem);
				}
				if (nColumns < 0)
				{
					delete pDatabaseTMParameter[1];
					break;
				}
			}
		}
		Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS), 0);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_GETITEMCOUNT) == nParameters) ? TRUE : FALSE);
	}
	return FALSE;
}

VOID CTCProcedurePropertiesDebugDialog::ShowInfo()
{
	ShowBreakpointProperties();
	ShowTestProfileProperties();
}

VOID CTCProcedurePropertiesDebugDialog::ShowBreakpointProperties()
{
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = (pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) > 0) ? pDatabaseTCProcedureThreadBreakpoints.GetAt(pDatabaseTCProcedureThreadBreakpoints.Find(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_LOCATION))))) : (CDatabaseTCProcedureThreadBreakpoint *)NULL))
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTCProcedureThreadBreakpoint->GetLocation()));
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS, (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER, (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY, (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION, (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_DISABLED, (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_DISABLED) ? TRUE : FALSE);
			return;
		}
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_DISABLED, FALSE);
}

VOID CTCProcedurePropertiesDebugDialog::ShowTestProfileProperties()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	CString  szItem;
	CDatabaseTMParameter  *pDatabaseTMParameter[2];
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		if ((pDatabaseTCProcedureThreadTestProfile = (pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) > 0) ? pDatabaseTCProcedureThreadTestProfiles.GetAt(pDatabaseTCProcedureThreadTestProfiles.Find(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_NAME))))) : (CDatabaseTCProcedureThreadTestProfile *)NULL))
		{
			for (nParameter = 0, nParameters = (INT)pDatabaseTCProcedureThreadTestProfile->GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_DELETEALLITEMS), m_pDatabaseTMParameters.RemoveAll(); nParameter < nParameters; nParameter++)
			{
				if ((pDatabaseTMParameter[1] = ((pDatabaseTMParameter[0] = pDatabaseTCProcedureThreadTestProfile->GetAt(nParameter))) ? new CDatabaseTMParameter : (CDatabaseTMParameter *)NULL))
				{
					if ((nIndex = (pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0])) ? m_pDatabaseTMParameters.Add(pDatabaseTMParameter[1]) : -1) >= 0)
					{
						for (nColumn = 0, nColumns = (INT)m_szColumns[2].GetSize(); nColumn < nColumns; nColumn++)
						{
							for (szItem.Empty(); m_szColumns[2].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEPARAMETERSTITLEITEM_TAG); )
							{
								szItem = pDatabaseTMParameter[0]->GetTag();
								break;
							}
							for (; m_szColumns[2].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEPARAMETERSTITLEITEM_VALUE); )
							{
								szItem = ConvertTestProfileParameterValues(pDatabaseTMParameter[0]->GetConstValueAsText());
								break;
							}
							if (!nColumn)
							{
								Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS), nIndex, szItem);
								continue;
							}
							Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS), nIndex, nColumn, szItem);
						}
						continue;
					}
					delete pDatabaseTMParameter[1];
				}
			}
			Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS), 0);
			Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS), pDatabaseTCProcedureThreadTestProfile->GetDelay().GetTotalSeconds());
			Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS), pDatabaseTCProcedureThreadTestProfile->GetDelay().GetTotalSeconds());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTCProcedureThreadTestProfile->GetLocation()));
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY, (pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEIMMEDIATELY) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART, (pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP, (pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTEP) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_DISABLED, (pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_DISABLED) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->SetWindowText(pDatabaseTCProcedureThreadTestProfile->GetName());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS)->EnableWindow((pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS_STATIC)->EnableWindow((pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS)->EnableWindow((pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTEP) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS_STATIC)->EnableWindow((pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTEP) ? TRUE : FALSE);
			return;
		}
	}
	for (nParameter = 0, nParameters = (INT)m_pDatabaseTMParameters.GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_DELETEALLITEMS); nParameter < nParameters; nParameter++)
	{
		for (nColumn = 0, nColumns = ((pDatabaseTMParameter[0] = m_pDatabaseTMParameters.GetAt(nParameter))) ? (INT)m_szColumns[2].GetSize() : 0; nColumn < nColumns; nColumn++)
		{
			for (szItem.Empty(); m_szColumns[2].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEPARAMETERSTITLEITEM_TAG); )
			{
				szItem = pDatabaseTMParameter[0]->GetTag();
				break;
			}
			for (; m_szColumns[2].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEPARAMETERSTITLEITEM_VALUE); )
			{
				szItem = ConvertTestProfileParameterValues(pDatabaseTMParameter[0]->GetConstValueAsText());
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS), nParameter, szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS), nParameter, nColumn, szItem);
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS), 0);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION, CB_SETCURSEL, (WPARAM)-1);
	Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS), 0);
	Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS), 0);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_DISABLED, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS_STATIC)->EnableWindow(FALSE);
}

VOID CTCProcedurePropertiesDebugDialog::ShowWatchIdentifierProperties()
{
	INT  nPoint;
	INT  nPoints;
	INT  nTable;
	INT  nTables;
	UINT  nStatus;
	double  fX[2];
	CString  szType;
	CString  szValue;
	CString  szPoint;
	CString  szRange;
	CString  szTable[2];
	ULONGLONG  nValue;
	CStringArray  szTables[2];
	CTMParameter  *pTMParameter;
	CTCParameter  *pTCParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;

	for (nTable = 0, szType = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_TYPE))), szType = (!_tcsncmp(szType, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER), lstrlen(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER)))) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER) : szType, szType = (!_tcsncmp(szType, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER), lstrlen(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)))) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER) : szType, nTables = ((pDatabaseTMParameter = (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER)) ? GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_NAME))))) : (CDatabaseTMParameter *)NULL)) ? pDatabaseTMParameter->GetCalTables(szTables[0], szTables[1]) : 0, SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_RESETCONTENT); nTable < nTables; nTable++)
	{
		for (szTable[0].Empty(); (pDatabaseTMNumCalTable = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTMNumCalTables()->GetAt(GetDatabase()->GetTMNumCalTables()->Find(szTables[0].GetAt(nTable))) : (CDatabaseTMNumCalTable *)NULL); )
		{
			szTable[0].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERS_TABLE_FORMAT), (LPCTSTR)pDatabaseTMNumCalTable->GetName(), (LPCTSTR)pDatabaseTMNumCalTable->GetDescription());
			break;
		}
		for (; (pDatabaseTMTxtCalTable = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTMTxtCalTables()->GetAt(GetDatabase()->GetTMTxtCalTables()->Find(szTables[0].GetAt(nTable))) : (CDatabaseTMTxtCalTable *)NULL); )
		{
			szTable[0].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERS_TABLE_FORMAT), (LPCTSTR)pDatabaseTMTxtCalTable->GetName(), (LPCTSTR)pDatabaseTMTxtCalTable->GetDescription());
			break;
		}
		if (!szTable[0].IsEmpty())
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szTable[0]);
			szTable[1] = (szTable[1].IsEmpty()) ? szTable[0] : szTable[1];
		}
	}
	if ((((pDatabaseTCParameter = (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) ? GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_NAME))))) : (CDatabaseTCParameter *)NULL)) && !pDatabaseTCParameter->GetCalTable().IsEmpty()))
	{
		for (szTable[0].Empty(); (pDatabaseTCNumCalTable = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTCNumCalTables()->GetAt(GetDatabase()->GetTCNumCalTables()->Find(pDatabaseTCParameter->GetCalTable())) : (CDatabaseTCNumCalTable *)NULL); )
		{
			szTable[0].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERS_TABLE_FORMAT), (LPCTSTR)pDatabaseTCNumCalTable->GetName(), (LPCTSTR)pDatabaseTCNumCalTable->GetDescription());
			break;
		}
		for (; (pDatabaseTCTxtCalTable = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTCTxtCalTables()->GetAt(GetDatabase()->GetTCTxtCalTables()->Find(pDatabaseTCParameter->GetCalTable())) : (CDatabaseTCTxtCalTable *)NULL); )
		{
			szTable[0].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERS_TABLE_FORMAT), (LPCTSTR)pDatabaseTCTxtCalTable->GetName(), (LPCTSTR)pDatabaseTCTxtCalTable->GetDescription());
			break;
		}
		if (!szTable[0].IsEmpty())
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szTable[0]);
			szTable[1] = (szTable[1].IsEmpty()) ? szTable[0] : szTable[1];
		}
	}
	for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_SETCURSEL, (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) ? (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szTable[1]) : (WPARAM)-1), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE, CB_RESETCONTENT), Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE), TCPROCEDUREPROPERTIESDEBUG_WATCHIDENTIFIERS_DEFAULTSAMPLE); (pDatabaseTMParameter = (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER)) ? GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_NAME))))) : (CDatabaseTMParameter *)NULL); )
	{
		for (nPoint = 0, nPoints = ((pDatabaseTMTxtCalTable = (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTMTxtCalTables()->GetAt(GetDatabase()->GetTMTxtCalTables()->Find(szTables[0].GetAt(SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_GETCURSEL)))) : (CDatabaseTMTxtCalTable *)NULL)) ? (INT)pDatabaseTMTxtCalTable->GetSize() : 0; nPoint < nPoints; nPoint++)
		{
			if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt(nPoint)))
			{
				if (pDatabaseTMTxtCalPoint->GetPoint(fX[0], szValue))
				{
					szPoint.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERS_POINTVALUE_FORMAT), (LPCTSTR)szValue, (LONGLONG)fX[0]);
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szPoint);
					continue;
				}
				if (pDatabaseTMTxtCalPoint->GetRange(fX[0], fX[1], szValue))
				{
					szPoint.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERS_RANGEVALUE_FORMAT), (LPCTSTR)szValue, (LONGLONG)fX[0], (LONGLONG)fX[1]);
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szRange);
					continue;
				}
			}
		}
		if ((pTMParameter = m_pTMParameters.GetAt(m_pTMParameters.Find(pDatabaseTMParameter->GetTag()))) && pTMParameter->GetRawValue((INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE)), nValue, nStatus))
		{
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT, (nStatus & TMPARAMETER_STATUS_NOLIMIT) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT, (nStatus & TMPARAMETER_STATUS_HARDLIMIT) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT, (nStatus & TMPARAMETER_STATUS_SOFTLIMIT) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT, (nStatus & TMPARAMETER_STATUS_DELTALIMIT) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT, (nStatus & TMPARAMETER_STATUS_CONSISTENCYLIMIT) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_VALID, (nStatus & TMPARAMETER_STATUS_VALID) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_INVALID, (nStatus & TMPARAMETER_STATUS_INVALID) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_GOOD, (nStatus & TMPARAMETER_STATUS_GOOD) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_BAD, (nStatus & TMPARAMETER_STATUS_BAD) ? TRUE : FALSE);
		}
		else
		{
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT, TRUE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT, FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT, FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT, FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT, FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_VALID, TRUE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_INVALID, FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_GOOD, TRUE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_BAD, FALSE);
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_VALID)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_INVALID)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_GOOD)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_BAD)->EnableWindow();
		break;
	}
	if ((((pDatabaseTCParameter = (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) ? GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_NAME))))) : (CDatabaseTCParameter *)NULL))))
	{
		for (nPoint = 0, nPoints = ((pDatabaseTCTxtCalTable = ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) && !pDatabaseTCParameter->GetCalTable().IsEmpty()) ? GetDatabase()->GetTCTxtCalTables()->GetAt(GetDatabase()->GetTCTxtCalTables()->Find(pDatabaseTCParameter->GetCalTable())) : (CDatabaseTCTxtCalTable *)NULL)) ? (INT)pDatabaseTCTxtCalTable->GetSize() : 0; nPoint < nPoints; nPoint++)
		{
			if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nPoint)))
			{
				if (pDatabaseTCTxtCalPoint->GetPoint(fX[0], szValue))
				{
					szPoint.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERS_POINTVALUE_FORMAT), (LPCTSTR)szValue, (LONGLONG)fX[0]);
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szPoint);
					continue;
				}
				if (pDatabaseTCTxtCalPoint->GetRange(fX[0], fX[1], szValue))
				{
					szPoint.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERS_RANGEVALUE_FORMAT), (LPCTSTR)szValue, (LONGLONG)fX[0], (LONGLONG)fX[1]);
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szRange);
					continue;
				}
			}
		}
		if ((pTCParameter = m_pTCParameters.GetAt(m_pTCParameters.Find(pDatabaseTCParameter->GetTag()))) && pTCParameter->GetRawValue((INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE)), nValue, nStatus))
		{
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT, (nStatus & TCPARAMETER_STATUS_NOLIMIT) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT, (nStatus & TCPARAMETER_STATUS_HARDLIMIT) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT, (nStatus & TCPARAMETER_STATUS_SOFTLIMIT) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT, (nStatus & TCPARAMETER_STATUS_DELTALIMIT) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT, FALSE);
		}
		else
		{
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT, TRUE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT, FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT, FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT, FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT, FALSE);
		}
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_VALID, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_INVALID, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_GOOD, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_BAD, FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_VALID)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_INVALID)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_GOOD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_BAD)->EnableWindow(FALSE);
	}
	if (szType != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER) && szType != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER))
	{
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_VALID, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_INVALID, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_GOOD, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_BAD, FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_VALID)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_INVALID)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_GOOD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_BAD)->EnableWindow(FALSE);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_REMARK)->ShowWindow(((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_GETCURSEL) >= 0) ? SW_SHOW : SW_HIDE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_REMARK)->EnableWindow(((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_GETCURSEL) >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->SetWindowText((szValue = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_VALUE)))));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET)->EnableWindow(!szValue.IsEmpty());
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) ? (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_GETCOUNT) > 0) : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) ? (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_GETCOUNT) > 0) : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_VALID)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_INVALID)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_GOOD)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_BAD)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER)) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesDebugDialog::UpdateIdentifiers()
{
	INT  nItem;
	INT  nItems;
	INT  nColumn;
	INT  nColumns;
	BOOL  bValue;
	UINT  nStatus;
	double  fValue;
	LONGLONG  nValue;
	ULONGLONG  uValue;
	TIMETAG  tValue;
	CString  szItem;
	CString  szValue;
	CString  *pValue;
	CStringTools  cStringTools;
	CTMParameter  *pTMParameter;
	CTCParameter  *pTCParameter;

	if (Lock())
	{
		for (nItem = 0, nItems = (INT)m_szIdentifiers.GetSize(); nItem < nItems; nItem++)
		{
			for (nColumn = 0, nColumns = (INT)m_szColumns[3].GetSize(); nColumn < nColumns; nColumn++)
			{
				for (szItem.Empty(); m_szColumns[3].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_NAME); )
				{
					szItem = m_szIdentifiers.GetAt(nItem);
					break;
				}
				if (m_szColumns[3].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_TYPE))
				{
					if (m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_ARGUMENT) szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_ARGUMENT);
					if (m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_VARIABLE) szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_VARIABLE);
					if (m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER) szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER);
					if (m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TCPARAMETER) szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER);
					if ((m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (pTMParameter = m_pTMParameters.GetAt(m_pTMParameters.Find(m_szIdentifiers.GetAt(nItem)))) && (pTMParameter->GetAttributes() & (TMPARAMETER_CALIBRATION_NUMERICAL | TMPARAMETER_CALIBRATION_STATUS)) == 0) || (m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TCPARAMETER && (pTCParameter = m_pTCParameters.GetAt(m_pTCParameters.Find(m_szIdentifiers.GetAt(nItem)))) && (pTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_RAW)))) szItem += STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_POSTFIX_RAW);
					if ((m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (pTMParameter = m_pTMParameters.GetAt(m_pTMParameters.Find(m_szIdentifiers.GetAt(nItem)))) && (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL)) || (m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TCPARAMETER && (pTCParameter = m_pTCParameters.GetAt(m_pTCParameters.Find(m_szIdentifiers.GetAt(nItem)))) && (pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL))) szItem += STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_POSTFIX_NUMERICAL);
					if ((m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (pTMParameter = m_pTMParameters.GetAt(m_pTMParameters.Find(m_szIdentifiers.GetAt(nItem)))) && (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS)) || (m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TCPARAMETER && (pTCParameter = m_pTCParameters.GetAt(m_pTCParameters.Find(m_szIdentifiers.GetAt(nItem)))) && (pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS))) szItem += STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_POSTFIX_STATUS);
				}
				if (m_szColumns[3].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_CODING))
				{
					if ((m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TMPARAMETER_CODING_BITPATTERN)) || (m_nIdentifierTypes.GetAt(nItem) != TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_CODING_BITPATTERN))) szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSCODING_BITPATTERN);
					if ((m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TMPARAMETER_CODING_SIGNEDINTEGER)) || (m_nIdentifierTypes.GetAt(nItem) != TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_CODING_SIGNEDINTEGER))) szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSCODING_SIGNEDINTEGER);
					if ((m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TMPARAMETER_CODING_UNSIGNEDINTEGER)) || (m_nIdentifierTypes.GetAt(nItem) != TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_CODING_UNSIGNEDINTEGER))) szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSCODING_UNSIGNEDINTEGER);
					if ((m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TMPARAMETER_CODING_FLOATINGPOINT)) || (m_nIdentifierTypes.GetAt(nItem) != TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_CODING_FLOATINGPOINT))) szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSCODING_FLOATINGPOINT);
					if (m_nIdentifierTypes.GetAt(nItem) != TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_CODING_TIME)) szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSCODING_DATETIME);
					if (m_nIdentifierTypes.GetAt(nItem) != TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_CODING_TEXTSTRING)) szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSCODING_STRING);
				}
				if (m_szColumns[3].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_RADIX))
				{
					if ((m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TMPARAMETER_RADIX_BINARY)) || (m_nIdentifierTypes.GetAt(nItem) != TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_RADIX_BINARY))) szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSRADIX_BINARY);
					if ((m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TMPARAMETER_RADIX_OCTAL)) || (m_nIdentifierTypes.GetAt(nItem) != TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_RADIX_OCTAL))) szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSRADIX_OCTAL);
					if ((m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TMPARAMETER_RADIX_DECIMAL)) || (m_nIdentifierTypes.GetAt(nItem) != TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_RADIX_DECIMAL))) szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSRADIX_DECIMAL);
					if ((m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TMPARAMETER_RADIX_HEXADECIMAL)) || (m_nIdentifierTypes.GetAt(nItem) != TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_RADIX_HEXADECIMAL))) szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSRADIX_HEXADECIMAL);
					if ((m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER || m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TCPARAMETER) && szItem.IsEmpty()) szItem = ((m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TMPARAMETER_CODING_BITPATTERN) != TMPARAMETER_CODING_BITPATTERN) || (m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TCPARAMETER && (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_CODING_BITPATTERN) != TCPARAMETER_CODING_BITPATTERN)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSRADIX_DECIMAL) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSRADIX_BINARY);
				}
				if (m_szColumns[3].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_VALUE))
				{
					if (m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_ARGUMENT || m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_VARIABLE)
					{
						if (((m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_CODING_BITPATTERN) || (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_CODING_UNSIGNEDINTEGER)) && (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_CALIBRATION_STATUS) != TCPARAMETER_CALIBRATION_STATUS)
						{
							for (CopyMemory(&uValue, m_pIdentifiers.GetAt(nItem), sizeof(uValue)); m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_RADIX_BINARY; )
							{
								szItem = cStringTools.ConvertLongUIntToString(uValue, 2);
								break;
							}
							for (; m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_RADIX_OCTAL; )
							{
								szItem = cStringTools.ConvertLongUIntToString(uValue, 8);
								break;
							}
							for (; m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_RADIX_HEXADECIMAL; )
							{
								szItem = cStringTools.ConvertLongUIntToString(uValue, 16);
								break;
							}
							for (; (m_nIdentifierAttributes.GetAt(nItem) & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0; )
							{
								szItem = cStringTools.ConvertLongUIntToString(uValue, 10);
								break;
							}
						}
						if ((m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_CALIBRATION_STATUS) != TCPARAMETER_CALIBRATION_STATUS)
						{
							if (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_CODING_SIGNEDINTEGER)
							{
								CopyMemory(&nValue, m_pIdentifiers.GetAt(nItem), sizeof(nValue));
								szItem = cStringTools.ConvertLongIntToString(nValue);
							}
							if (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_CODING_FLOATINGPOINT)
							{
								CopyMemory(&fValue, m_pIdentifiers.GetAt(nItem), sizeof(fValue));
								szItem = cStringTools.ConvertFloatToString(fValue);
							}
							if (m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_CODING_TIME)
							{
								CopyMemory(&tValue, m_pIdentifiers.GetAt(nItem), sizeof(tValue));
								szItem = CTimeTag(tValue).FormatGmt(STRING(IDS_DATABASE_DATAFORMAT_ABSOLUTETIME));
							}
						}
						if ((m_nIdentifierAttributes.GetAt(nItem) & TCPARAMETER_CALIBRATION_STATUS) || (m_nIdentifierAttributes.GetAt(nItem) & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == 0) szItem = ((pValue = (CString *)m_pIdentifiers.GetAt(nItem))) ? (LPCTSTR)(*pValue) : EMPTYSTRING;
					}
					if (m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER)
					{
						if ((pTMParameter = m_pTMParameters.GetAt(m_pTMParameters.Find(m_szIdentifiers.GetAt(nItem)))))
						{
							szItem = (pTMParameter->GetValueAsText(GetDatabase(), 0, m_nIdentifierAttributes.GetAt(nItem), szValue, bValue, FALSE)) ? szValue : EMPTYSTRING;
							szItem += (bValue) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSVALUE_EXTRAPOLATED) : EMPTYSTRING;
						}
					}
					if (m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TCPARAMETER)
					{
						if ((pTCParameter = m_pTCParameters.GetAt(m_pTCParameters.Find(m_szIdentifiers.GetAt(nItem)))))
						{
							szItem = (pTCParameter->GetValueAsText(GetDatabase(), 0, m_nIdentifierAttributes.GetAt(nItem), szValue, bValue)) ? szValue : EMPTYSTRING;
							szItem += (bValue) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSVALUE_EXTRAPOLATED) : EMPTYSTRING;
						}
					}
				}
				for (; m_szColumns[3].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_STATUS); )
				{
					if ((pTMParameter = (m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER) ? m_pTMParameters.GetAt(m_pTMParameters.Find(m_szIdentifiers.GetAt(nItem))) : (CTMParameter *)NULL) && pTMParameter->GetRawValue(0, uValue, nStatus))
					{
						szItem = (nStatus & TMPARAMETER_STATUS_NOLIMIT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_NOLIMIT) : EMPTYSTRING;
						szItem = (nStatus & TMPARAMETER_STATUS_SOFTLIMIT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_SOFTLIMIT) : szItem;
						szItem = (nStatus & TMPARAMETER_STATUS_HARDLIMIT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_HARDLIMIT) : szItem;
						szItem = (nStatus & TMPARAMETER_STATUS_DELTALIMIT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_DELTALIMIT) : szItem;
						szItem = (nStatus & TMPARAMETER_STATUS_CONSISTENCYLIMIT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_CONSISTENCYLIMIT) : szItem;
						szItem += (nStatus & TMPARAMETER_STATUS_VALID) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_DELIMITER)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_VALID)) : EMPTYSTRING;
						szItem += (nStatus & TMPARAMETER_STATUS_INVALID) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_DELIMITER)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_INVALID)) : EMPTYSTRING;
						break;
					}
					if ((pTCParameter = (m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TCPARAMETER) ? m_pTCParameters.GetAt(m_pTCParameters.Find(m_szIdentifiers.GetAt(nItem))) : (CTCParameter *)NULL) && pTCParameter->GetRawValue(0, uValue, nStatus))
					{
						szItem = (nStatus & TCPARAMETER_STATUS_NOLIMIT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_NOLIMIT) : EMPTYSTRING;
						szItem = (nStatus & TCPARAMETER_STATUS_SOFTLIMIT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_SOFTLIMIT) : szItem;
						szItem = (nStatus & TCPARAMETER_STATUS_HARDLIMIT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_HARDLIMIT) : szItem;
						szItem = (nStatus & TCPARAMETER_STATUS_DELTALIMIT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_DELTALIMIT) : szItem;
						break;
					}
					szItem = (m_nIdentifierTypes.GetAt(nItem) != TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER  &&  m_nIdentifierTypes.GetAt(nItem) != TCPROCEDUREPROCESS_IDENTIFIERTYPE_TCPARAMETER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_NONE) : EMPTYSTRING;
					break;
				}
				for (; m_szColumns[3].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_QUALITY); )
				{
					if ((pTMParameter = (m_nIdentifierTypes.GetAt(nItem) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER) ? m_pTMParameters.GetAt(m_pTMParameters.Find(m_szIdentifiers.GetAt(nItem))) : (CTMParameter *)NULL) && pTMParameter->GetRawValue(0, uValue, nStatus))
					{
						szItem = (nStatus & TMPARAMETER_STATUS_GOOD) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSQUALITY_GOOD) : EMPTYSTRING;
						szItem = (nStatus & TMPARAMETER_STATUS_BAD) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSQUALITY_BAD) : szItem;
						break;
					}
					szItem = (m_nIdentifierTypes.GetAt(nItem) != TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSQUALITY_NONE) : EMPTYSTRING;
					break;
				}
				if (!nColumn  &&  nItem >= SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, LVM_GETITEMCOUNT))
				{
					Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), nItem, szItem);
					continue;
				}
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), nItem, nColumn, szItem);
			}
		}
		while (nItems < SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, LVM_GETITEMCOUNT))
		{
			if (!Listview_DeleteText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), nItems)) break;
			continue;
		}
		Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), 0);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		ShowWatchIdentifierProperties();
		Unlock();
	}
}

BOOL CTCProcedurePropertiesDebugDialog::UpdateParameterValue(LPCTSTR pszTag, UINT nType, ULONGLONG nAttributes, LPCTSTR pszValue, INT nSample, BYTE nStatus, LPCTSTR pszTable)
{
	INT  nPoint;
	INT  nPoints;
	double  fX[2];
	double  fValue;
	double  fRawValue;
	CString  szValue;
	CString  szPoint;
	CString  szRange;
	CTMParameter  *pTMParameter;
	CTCParameter  *pTCParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMNumCalPoint  *pDatabaseTMNumCalPoint[2];
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint[2];
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;

	if (nType == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER)
	{
		if ((pTMParameter = m_pTMParameters.GetAt(m_pTMParameters.Find(pszTag))))
		{
			if ((nAttributes & TMPARAMETER_CALIBRATION_NUMERICAL) == TMPARAMETER_CALIBRATION_NUMERICAL)
			{
				if ((pDatabaseTMNumCalTable = ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pTMParameter->GetTag())))) ? GetDatabase()->GetTMNumCalTables()->GetAt(GetDatabase()->GetTMNumCalTables()->Find(pszTable)) : (CDatabaseTMNumCalTable *)NULL))
				{
					for (nPoint = 0, nPoints = (GetDatabase()->CheckTMParameterConstValue(nAttributes | TMPARAMETER_NATURE_CONSTANT, pszValue)) ? (INT)(pDatabaseTMNumCalTable->GetSize() - 1) : -1, fValue = _tstof(pszValue); nPoint < nPoints; nPoint++)
					{
						if ((pDatabaseTMNumCalPoint[0] = pDatabaseTMNumCalTable->GetAt(nPoint)))
						{
							if ((pDatabaseTMNumCalPoint[1] = pDatabaseTMNumCalTable->GetAt(nPoint + 1)))
							{
								if ((fValue >= pDatabaseTMNumCalPoint[0]->GetY() && fValue <= pDatabaseTMNumCalPoint[1]->GetY()) || (fValue <= pDatabaseTMNumCalPoint[0]->GetY() && fValue >= pDatabaseTMNumCalPoint[1]->GetY()))
								{
									fRawValue = pDatabaseTMNumCalPoint[0]->GetX() + ((fValue - pDatabaseTMNumCalPoint[0]->GetY()) / (pDatabaseTMNumCalPoint[1]->GetY() - pDatabaseTMNumCalPoint[0]->GetY()))*(pDatabaseTMNumCalPoint[1]->GetX() - pDatabaseTMNumCalPoint[0]->GetX());
									break;
								}
							}
						}
					}
					if (nPoint < nPoints)
					{
						if (UpdateParameterValue(pTMParameter, (nAttributes & TMPARAMETER_CODING_FLOATINGPOINT) ? CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, fRawValue, FALSE) : CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, pDatabaseTMParameter->GetWidth(), (ULONGLONG)fRawValue, FALSE), nSample, nStatus, pDatabaseTMNumCalTable->GetName()))
						{
							GetParentDisplay()->SetProcedureTestParameterValues(m_pTMParameters);
							return TRUE;
						}
					}
					if (nPoint == nPoints)
					{
						if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_INTERPRETATION_FULL) != TMPARAMETER_INTERPRETATION_FULL)
						{
							if ((pDatabaseTMNumCalPoint[0] = pDatabaseTMNumCalTable->GetAt(0)))
							{
								if ((pDatabaseTMNumCalPoint[1] = pDatabaseTMNumCalTable->GetAt(1)))
								{
									if ((fRawValue = pDatabaseTMNumCalPoint[0]->GetX() + ((fValue - pDatabaseTMNumCalPoint[0]->GetY()) / (pDatabaseTMNumCalPoint[1]->GetY() - pDatabaseTMNumCalPoint[0]->GetY()))*(pDatabaseTMNumCalPoint[1]->GetX() - pDatabaseTMNumCalPoint[0]->GetX())) >= 0.0  &&  fRawValue < pow(2.0, pDatabaseTMParameter->GetWidth()))
									{
										if (UpdateParameterValue(pTMParameter, (nAttributes & TMPARAMETER_CODING_FLOATINGPOINT) ? CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, fRawValue, FALSE) : CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, pDatabaseTMParameter->GetWidth(), (UINT)fRawValue, FALSE), nSample, nStatus, pDatabaseTMNumCalTable->GetName()))
										{
											GetParentDisplay()->SetProcedureTestParameterValues(m_pTMParameters);
											return TRUE;
										}
									}
								}
							}
							if ((pDatabaseTMNumCalPoint[0] = pDatabaseTMNumCalTable->GetAt((INT)pDatabaseTMNumCalTable->GetUpperBound() - 1)))
							{
								if ((pDatabaseTMNumCalPoint[1] = pDatabaseTMNumCalTable->GetAt((INT)pDatabaseTMNumCalTable->GetUpperBound())))
								{
									if ((fRawValue = pDatabaseTMNumCalPoint[0]->GetX() + ((fValue - pDatabaseTMNumCalPoint[0]->GetY()) / (pDatabaseTMNumCalPoint[1]->GetY() - pDatabaseTMNumCalPoint[0]->GetY()))*(pDatabaseTMNumCalPoint[1]->GetX() - pDatabaseTMNumCalPoint[0]->GetX())) >= 0.0  &&  fRawValue < pow(2.0, pDatabaseTMParameter->GetWidth()))
									{
										if (UpdateParameterValue(pTMParameter, (nAttributes & TMPARAMETER_CODING_FLOATINGPOINT) ? CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, fRawValue, FALSE) : CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, pDatabaseTMParameter->GetWidth(), (UINT)fRawValue, FALSE), nSample, nStatus, pDatabaseTMNumCalTable->GetName()))
										{
											GetParentDisplay()->SetProcedureTestParameterValues(m_pTMParameters);
											return TRUE;
										}
									}
								}
							}
						}
					}
					return FALSE;
				}
			}
			if (nAttributes & TMPARAMETER_CALIBRATION_STATUS)
			{
				if ((pDatabaseTMTxtCalTable = ((pDatabaseTMParameter = GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pTMParameter->GetTag())))) ? GetDatabase()->GetTMTxtCalTables()->GetAt(GetDatabase()->GetTMTxtCalTables()->Find(pszTable)) : (CDatabaseTMTxtCalTable *)NULL))
				{
					for (nPoint = 0, nPoints = (INT)pDatabaseTMTxtCalTable->GetSize(); nPoint < nPoints; nPoint++)
					{
						if ((pDatabaseTMTxtCalPoint = pDatabaseTMTxtCalTable->GetAt(nPoint)))
						{
							if (pDatabaseTMTxtCalPoint->GetPoint(fX[0], szValue))
							{
								szPoint.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERS_POINTVALUE_FORMAT), (LPCTSTR)szValue, (LONGLONG)fX[0]);
								if (szValue == pszValue || szPoint == pszValue) break;
							}
							if (pDatabaseTMTxtCalPoint->GetRange(fX[0], fX[1], szValue))
							{
								szRange.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERS_RANGEVALUE_FORMAT), (LPCTSTR)szValue, (LONGLONG)fX[0], (LONGLONG)fX[1]);
								if (szValue == pszValue || szRange == pszValue) break;
							}
						}
					}
					if (nPoint < nPoints)
					{
						if (UpdateParameterValue(pTMParameter, (nAttributes & TMPARAMETER_CODING_FLOATINGPOINT) ? CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, fX[0], FALSE) : CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, pDatabaseTMParameter->GetWidth(), (UINT)fX[0], FALSE), nSample, nStatus, pDatabaseTMTxtCalTable->GetName()))
						{
							GetParentDisplay()->SetProcedureTestParameterValues(m_pTMParameters);
							return TRUE;
						}
					}
					return FALSE;
				}
			}
			if (GetDatabase()->CheckTMParameterConstValue(nAttributes | TMPARAMETER_NATURE_CONSTANT, pszValue))
			{
				for (fValue = _tstof(pszValue); (pDatabaseTMParameter = (nAttributes & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_UNSIGNEDINTEGER)) ? GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pTMParameter->GetTag())) : (CDatabaseTMParameter *)NULL); )
				{
					for (; nAttributes & TMPARAMETER_RADIX_BINARY; )
					{
						fValue = (double)CDatabaseEngine::ParseValue(pszValue, 2);
						break;
					}
					for (; nAttributes & TMPARAMETER_RADIX_OCTAL; )
					{
						fValue = (double)CDatabaseEngine::ParseValue(pszValue, 8);
						break;
					}
					for (; nAttributes & TMPARAMETER_RADIX_HEXADECIMAL; )
					{
						fValue = (double)CDatabaseEngine::ParseValue(pszValue, 16);
						break;
					}
					if (UpdateParameterValue(pTMParameter, CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, pDatabaseTMParameter->GetWidth(), (UINT)fValue, FALSE), nSample, nStatus, EMPTYSTRING))
					{
						GetParentDisplay()->SetProcedureTestParameterValues(m_pTMParameters);
						return TRUE;
					}
					break;
				}
				if ((pDatabaseTMParameter = (nAttributes & TMPARAMETER_CODING_SIGNEDINTEGER) ? GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(pTMParameter->GetTag())) : (CDatabaseTMParameter *)NULL))
				{
					if (UpdateParameterValue(pTMParameter, CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, pDatabaseTMParameter->GetWidth(), (UINT)fValue, FALSE), nSample, nStatus, EMPTYSTRING))
					{
						GetParentDisplay()->SetProcedureTestParameterValues(m_pTMParameters);
						return TRUE;
					}
				}
				if (nAttributes & TMPARAMETER_CODING_FLOATINGPOINT)
				{
					if (UpdateParameterValue(pTMParameter, CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, fValue, FALSE), nSample, nStatus, EMPTYSTRING))
					{
						GetParentDisplay()->SetProcedureTestParameterValues(m_pTMParameters);
						return TRUE;
					}
				}
			}
		}
		return FALSE;
	}
	if (nType == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TCPARAMETER)
	{
		if ((pTCParameter = m_pTCParameters.GetAt(m_pTCParameters.Find(pszTag))))
		{
			if ((pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) && (nAttributes & TCPARAMETER_CALIBRATION_NUMERICAL) && (nAttributes & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_RAW)) == 0)
			{
				if ((pDatabaseTCNumCalTable = ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pTCParameter->GetTag())))) ? GetDatabase()->GetTCNumCalTables()->GetAt(GetDatabase()->GetTCNumCalTables()->Find(pszTable)) : (CDatabaseTCNumCalTable *)NULL))
				{
					for (nPoint = 0, nPoints = (GetDatabase()->CheckTCParameterConstValue(nAttributes, pszValue)) ? (INT)(pDatabaseTCNumCalTable->GetSize() - 1) : -1, fValue = _tstof(pszValue); nPoint < nPoints; nPoint++)
					{
						if ((pDatabaseTCNumCalPoint[0] = pDatabaseTCNumCalTable->GetAt(nPoint)))
						{
							if ((pDatabaseTCNumCalPoint[1] = pDatabaseTCNumCalTable->GetAt(nPoint + 1)))
							{
								if ((fValue >= pDatabaseTCNumCalPoint[0]->GetY() && fValue <= pDatabaseTCNumCalPoint[1]->GetY()) || (fValue <= pDatabaseTCNumCalPoint[0]->GetY() && fValue >= pDatabaseTCNumCalPoint[1]->GetY()))
								{
									fRawValue = pDatabaseTCNumCalPoint[0]->GetX() + ((fValue - pDatabaseTCNumCalPoint[0]->GetY()) / (pDatabaseTCNumCalPoint[1]->GetY() - pDatabaseTCNumCalPoint[0]->GetY()))*(pDatabaseTCNumCalPoint[1]->GetX() - pDatabaseTCNumCalPoint[0]->GetX());
									break;
								}
							}
						}
					}
					if (nPoint < nPoints)
					{
						if (UpdateParameterValue(pTCParameter, (nAttributes & TCPARAMETER_CODING_FLOATINGPOINT) ? CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, fRawValue) : CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, pDatabaseTCParameter->GetWidth(), (UINT)fRawValue), nSample, nStatus))
						{
							GetParentDisplay()->SetProcedureTestParameterValues(m_pTCParameters);
							return TRUE;
						}
					}
					if (nPoint == nPoints)
					{
						if ((pTCParameter->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) != TCPARAMETER_INTERPRETATION_FULL)
						{
							if ((pDatabaseTCNumCalPoint[0] = pDatabaseTCNumCalTable->GetAt(0)))
							{
								if ((pDatabaseTCNumCalPoint[1] = pDatabaseTCNumCalTable->GetAt(1)))
								{
									if ((fRawValue = pDatabaseTCNumCalPoint[0]->GetX() + ((fValue - pDatabaseTCNumCalPoint[0]->GetY()) / (pDatabaseTCNumCalPoint[1]->GetY() - pDatabaseTCNumCalPoint[0]->GetY()))*(pDatabaseTCNumCalPoint[1]->GetX() - pDatabaseTCNumCalPoint[0]->GetX())) >= 0.0  &&  fRawValue < pow(2.0, pDatabaseTCParameter->GetWidth()))
									{
										if (UpdateParameterValue(pTCParameter, (nAttributes & TCPARAMETER_CODING_FLOATINGPOINT) ? CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, fRawValue) : CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, pDatabaseTCParameter->GetWidth(), (UINT)fRawValue), nSample, nStatus))
										{
											GetParentDisplay()->SetProcedureTestParameterValues(m_pTCParameters);
											return TRUE;
										}
									}
								}
							}
							if ((pDatabaseTCNumCalPoint[0] = pDatabaseTCNumCalTable->GetAt((INT)pDatabaseTCNumCalTable->GetUpperBound() - 1)))
							{
								if ((pDatabaseTCNumCalPoint[1] = pDatabaseTCNumCalTable->GetAt((INT)pDatabaseTCNumCalTable->GetUpperBound())))
								{
									if ((fRawValue = pDatabaseTCNumCalPoint[0]->GetX() + ((fValue - pDatabaseTCNumCalPoint[0]->GetY()) / (pDatabaseTCNumCalPoint[1]->GetY() - pDatabaseTCNumCalPoint[0]->GetY()))*(pDatabaseTCNumCalPoint[1]->GetX() - pDatabaseTCNumCalPoint[0]->GetX())) >= 0.0  &&  fRawValue < pow(2.0, pDatabaseTCParameter->GetWidth()))
									{
										if (UpdateParameterValue(pTCParameter, (nAttributes & TCPARAMETER_CODING_FLOATINGPOINT) ? CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, fRawValue) : CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, pDatabaseTCParameter->GetWidth(), (UINT)fRawValue), nSample, nStatus))
										{
											GetParentDisplay()->SetProcedureTestParameterValues(m_pTCParameters);
											return TRUE;
										}
									}
								}
							}
						}
					}
					return FALSE;
				}
			}
			if ((pTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) && (nAttributes & TCPARAMETER_CALIBRATION_STATUS) && (nAttributes & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_RAW)) == 0)
			{
				if ((pDatabaseTCTxtCalTable = ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pTCParameter->GetTag())))) ? GetDatabase()->GetTCTxtCalTables()->GetAt(GetDatabase()->GetTCTxtCalTables()->Find(pszTable)) : (CDatabaseTCTxtCalTable *)NULL))
				{
					for (nPoint = 0, nPoints = (INT)pDatabaseTCTxtCalTable->GetSize(); nPoint < nPoints; nPoint++)
					{
						if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nPoint)))
						{
							if ((pDatabaseTCTxtCalPoint->GetPoint(fX[0], szValue) && szValue == pszValue) || (pDatabaseTCTxtCalPoint->GetRange(fX[0], fX[1], szValue) && szValue == pszValue)) break;
							continue;
						}
					}
					if (nPoint < nPoints)
					{
						if (UpdateParameterValue(pTCParameter, (nAttributes & TCPARAMETER_CODING_FLOATINGPOINT) ? CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, fX[0]) : CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, pDatabaseTCParameter->GetWidth(), (UINT)fX[0]), nSample, nStatus))
						{
							GetParentDisplay()->SetProcedureTestParameterValues(m_pTCParameters);
							return TRUE;
						}
					}
					return FALSE;
				}
			}
			if (GetDatabase()->CheckTCParameterConstValue(nAttributes, pszValue))
			{
				for (fValue = _tstof(pszValue); (pDatabaseTCParameter = (nAttributes & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER)) ? GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pTCParameter->GetTag())) : (CDatabaseTCParameter *)NULL); )
				{
					for (; nAttributes & TCPARAMETER_RADIX_BINARY; )
					{
						fValue = (double)CDatabaseEngine::ParseValue(pszValue, 2);
						break;
					}
					for (; nAttributes & TCPARAMETER_RADIX_OCTAL; )
					{
						fValue = (double)CDatabaseEngine::ParseValue(pszValue, 8);
						break;
					}
					for (; nAttributes & TCPARAMETER_RADIX_HEXADECIMAL; )
					{
						fValue = (double)CDatabaseEngine::ParseValue(pszValue, 16);
						break;
					}
					if (UpdateParameterValue(pTCParameter, CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, pDatabaseTCParameter->GetWidth(), (UINT)fValue), nSample, nStatus))
					{
						GetParentDisplay()->SetProcedureTestParameterValues(m_pTCParameters);
						return TRUE;
					}
					break;
				}
				if ((pDatabaseTCParameter = (nAttributes & TCPARAMETER_CODING_SIGNEDINTEGER) ? GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pTCParameter->GetTag())) : (CDatabaseTCParameter *)NULL))
				{
					if (UpdateParameterValue(pTCParameter, CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, pDatabaseTCParameter->GetWidth(), (UINT)fValue), nSample, nStatus))
					{
						GetParentDisplay()->SetProcedureTestParameterValues(m_pTCParameters);
						return TRUE;
					}
				}
				if (nAttributes & TCPARAMETER_CODING_FLOATINGPOINT)
				{
					if (UpdateParameterValue(pTCParameter, CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), nAttributes, fValue), nSample, nStatus))
					{
						GetParentDisplay()->SetProcedureTestParameterValues(m_pTCParameters);
						return TRUE;
					}
				}
				if (nAttributes & TCPARAMETER_CODING_TIME)
				{
					if (UpdateParameterValue(pTCParameter, CDatabaseEngine::ParseTime(pszValue), nSample, nStatus))
					{
						GetParentDisplay()->SetProcedureTestParameterValues(m_pTCParameters);
						return TRUE;
					}
				}
			}
		}
	}
	return FALSE;
}
BOOL CTCProcedurePropertiesDebugDialog::UpdateParameterValue(CTMParameter *pTMParameter, ULONGLONG nRawValue, INT nSample, BYTE nStatus, LPCTSTR pszTable)
{
	CTMUnit  cTMUnit;
	CTimeTag  tTMUnit;

	cTMUnit.SetTag(STRING(IDS_TMUNIT_INTERACTIVE));
	cTMUnit.SetTimeTag((pTMParameter->GetLastUpdateTime() > 0) ? pTMParameter->GetLastUpdateTime() : tTMUnit.GetTime());
	return pTMParameter->SetRawValue(&cTMUnit, nSample, nRawValue, nStatus, pszTable);
}
BOOL CTCProcedurePropertiesDebugDialog::UpdateParameterValue(CTCParameter *pTCParameter, ULONGLONG nRawValue, INT nSample, BYTE nStatus)
{
	return pTCParameter->SetRawValue(nSample, nRawValue, nStatus);
}
BOOL CTCProcedurePropertiesDebugDialog::UpdateParameterValue(CTCParameter *pTCParameter, TIMETAG tRawValue, INT nSample, BYTE nStatus)
{
	return pTCParameter->SetRawValue(nSample, CTimeTag(tRawValue), nStatus);
}

CString CTCProcedurePropertiesDebugDialog::ConvertTestProfileParameterValues(LPCTSTR pszValues) CONST
{
	INT  nPos;
	CString  szValues;

	for (szValues = pszValues; (nPos = szValues.Find(TAB)) >= 0; )
	{
		szValues = szValues.Left(nPos) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEPARAMETERSVALUE_SEPARATOR) + szValues.Mid(nPos + 1);
		continue;
	}
	return szValues;
}

INT CTCProcedurePropertiesDebugDialog::FindColumnIndex(UINT nCtrlID, LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (nCtrlID == IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS) ? (INT)m_szColumns[0].GetSize() : ((nCtrlID == IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES) ? (INT)m_szColumns[1].GetSize() : ((nCtrlID == IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS) ? (INT)m_szColumns[2].GetSize() : ((nCtrlID == IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS) ? (INT)m_szColumns[3].GetSize() : 0))); nColumn < nColumns; nColumn++)
	{
		if ((nCtrlID == IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS  &&  m_szColumns[0].GetAt(nColumn) == pszColumn) || (nCtrlID == IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES  &&  m_szColumns[1].GetAt(nColumn) == pszColumn) || (nCtrlID == IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS  &&  m_szColumns[2].GetAt(nColumn) == pszColumn) || (nCtrlID == IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS  &&  m_szColumns[3].GetAt(nColumn) == pszColumn)) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

CDatabaseTCProcedureThread *CTCProcedurePropertiesDebugDialog::GetThread() CONST
{
	CString  szName;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_THREAD)->GetWindowText(szName);
	return m_cDatabaseTCProcedure[0].GetAt(m_cDatabaseTCProcedure[0].Find(szName));
}

BOOL CTCProcedurePropertiesDebugDialog::IsModified() CONST
{
	INT  nThread;
	INT  nThreads;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread[2];
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints[2];
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles[2];

	for (nThread = 0, nThreads = (m_cDatabaseTCProcedure[0].GetSize() == m_cDatabaseTCProcedure[1].GetSize()) ? (INT)m_cDatabaseTCProcedure[0].GetSize() : -1; nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread[1] = ((pDatabaseTCProcedureThread[0] = m_cDatabaseTCProcedure[0].GetAt(nThread))) ? m_cDatabaseTCProcedure[1].GetAt(nThread) : (CDatabaseTCProcedureThread *)NULL))
		{
			if (pDatabaseTCProcedureThread[0]->GetName() == pDatabaseTCProcedureThread[1]->GetName() && pDatabaseTCProcedureThread[0]->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints[0]) >= 0 && pDatabaseTCProcedureThread[1]->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints[1]) >= 0 && pDatabaseTCProcedureThread[0]->GetProfiles(pDatabaseTCProcedureThreadTestProfiles[0]) >= 0 && pDatabaseTCProcedureThread[1]->GetProfiles(pDatabaseTCProcedureThreadTestProfiles[1]) >= 0)
			{
				if (!pDatabaseTCProcedureThreadBreakpoints[0].Compare(&pDatabaseTCProcedureThreadBreakpoints[1]) || !pDatabaseTCProcedureThreadTestProfiles[0].Compare(&pDatabaseTCProcedureThreadTestProfiles[1])) break;
				continue;
			}
			break;
		}
	}
	return((nThread != nThreads) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesDebugDialog::Lock()
{
	return m_pCriticalSection->Lock();
}

BOOL CTCProcedurePropertiesDebugDialog::Unlock()
{
	return m_pCriticalSection->Unlock();
}

void CTCProcedurePropertiesDebugDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesDebugDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesDebugDialog::PostNcDestroy()
{
	m_pSteps.RemoveAll();
	m_pIdentifiers.RemoveAll();
	m_nIdentifierTypes.RemoveAll();
	m_nIdentifierAttributes.RemoveAll();
	m_szIdentifiers.RemoveAll();
	m_pTMParameters.RemoveAll();
	m_pTCParameters.RemoveAll();
	m_pDatabaseTMParameters.RemoveAll();
	m_szColumns[0].RemoveAll();
	m_szColumns[1].RemoveAll();
	m_szColumns[2].RemoveAll();
	m_szColumns[3].RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesDebugDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesDebugDialog)
	ON_WM_SHOWWINDOW()
	ON_WM_TIMER()
	ON_WM_HELPINFO()
	ON_MESSAGE(DM_GETDEFID, OnGetDefID)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ADD, OnAddBreakpoint)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_REMOVE, OnRemoveBreakpoint)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_REMOVEALL, OnRemoveAllBreakpoints)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ADD, OnAddTestProfile)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_REMOVE, OnRemoveTestProfile)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_REMOVEALL, OnRemoveAllTestProfiles)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_ADD, OnAddTestProfileParameter)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_REMOVE, OnRemoveTestProfileParameter)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_REMOVEALL, OnRemoveAllTestProfileParameters)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS, OnBreakAlways)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER, OnBreakAtFailedTrigger)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY, OnBreakAtFailedBody)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION, OnBreakAtFailedConfirmation)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_DISABLED, OnDisableBreakpoint)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY, OnExecuteImmediately)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART, OnExecuteDelayedAfterStart)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP, OnExecuteDelayedAfterStep)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_DISABLED, OnDisableTestProfile)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET, OnSetWatchIdentifierValue)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT, OnWatchIdentifierStatusNoLimit)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT, OnWatchIdentifierStatusSoftLimit)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT, OnWatchIdentifierStatusHardLimit)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT, OnWatchIdentifierStatusDeltaLimit)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT, OnWatchIdentifierStatusConsistencyLimit)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_VALID, OnWatchIdentifierStatusValid)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_INVALID, OnWatchIdentifierStatusInvalid)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_GOOD, OnWatchIdentifierQualityGood)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_BAD, OnWatchIdentifierQualityBad)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DEBUG_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_DEBUG_THREAD, OnSelchangeThread)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION, OnSelchangeBreakpointLocation)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION, OnSelchangeTestProfileLocation)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, OnSelchangeWatchIdentifierTable)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE, OnSelchangeWatchIdentifierValue)
	ON_CBN_EDITCHANGE(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE, OnEditchangeWatchIdentifierValue)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME, OnEditchangeTestProfileName)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS, OnSpinchangeDelayAfterStart)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS, OnSpinchangeDelayAfterStep)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE, OnSpinchangeWatchIdentifierSample)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesDebugDialog message handlers

BOOL CTCProcedurePropertiesDebugDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns[4];
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS)->GetClientRect(rColumns[0]);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)->GetClientRect(rColumns[1]);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS)->GetClientRect(rColumns[2]);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)->GetClientRect(rColumns[3]);
	m_szColumns[0].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_LOCATION));
	m_szColumns[0].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_OPTIONS));
	m_szColumns[0].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_STATE));
	m_szColumns[1].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_NAME));
	m_szColumns[1].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_LOCATION));
	m_szColumns[1].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_OPTIONS));
	m_szColumns[1].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_STATE));
	m_szColumns[2].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEPARAMETERSTITLEITEM_TAG));
	m_szColumns[2].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEPARAMETERSTITLEITEM_VALUE));
	m_szColumns[3].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_NAME));
	m_szColumns[3].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_TYPE));
	m_szColumns[3].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_CODING));
	m_szColumns[3].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_RADIX));
	m_szColumns[3].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_VALUE));
	m_szColumns[3].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_STATUS));
	m_szColumns[3].Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_QUALITY));
	for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT), m_rCtrl[0].SetRectEmpty(), m_rCtrl[1].SetRectEmpty(); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), nColumn, m_szColumns[0].GetAt(nColumn), (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_LOCATION)) ? (3 * rColumns[0].Width() / 10) : ((m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_OPTIONS)) ? (rColumns[0].Width() / 2) : rColumns[0].Width() / 5));
		continue;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), nColumn, m_szColumns[1].GetAt(nColumn), (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_NAME)) ? (rColumns[1].Width() / 5) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_LOCATION)) ? (3 * rColumns[1].Width() / 10) : ((m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_OPTIONS)) ? (3 * rColumns[1].Width() / 10) : rColumns[1].Width() / 5)));
		continue;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns[2].GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS), nColumn, m_szColumns[2].GetAt(nColumn), (m_szColumns[2].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEPARAMETERSTITLEITEM_TAG)) ? (rColumns[2].Width() / 4) : 3 * rColumns[2].Width() / 4);
		continue;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns[3].GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), nColumn, m_szColumns[3].GetAt(nColumn), (m_szColumns[3].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_NAME)) ? (rColumns[3].Width() / 5) : ((m_szColumns[3].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_TYPE)) ? (rColumns[3].Width() / 3) : ((m_szColumns[3].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_CODING) || m_szColumns[3].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_RADIX) || m_szColumns[3].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_VALUE) || m_szColumns[3].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_STATUS)) ? (rColumns[3].Width() / 4) : (rColumns[3].Width() / 8))));
		continue;
	}
	Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS), TCPROCEDUREPROPERTIESDEBUG_TESTPROFILEDELAY_MINIMUMINTERVAL, TCPROCEDUREPROPERTIESDEBUG_TESTPROFILEDELAY_MAXIMUMINTERVAL);
	Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS), TCPROCEDUREPROPERTIESDEBUG_TESTPROFILEDELAY_MINIMUMINTERVAL, TCPROCEDUREPROPERTIESDEBUG_TESTPROFILEDELAY_MAXIMUMINTERVAL);
	Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE), TCPROCEDUREPROPERTIESDEBUG_WATCHIDENTIFIERS_MINIMUMSAMPLE, TCPROCEDUREPROPERTIESDEBUG_WATCHIDENTIFIERS_MAXIMUMSAMPLE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_THREAD_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_THREAD)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATIONSTEP_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_DISABLED)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_ADD)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATIONSTEP_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_DISABLED)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_HELP)->EnableWindow();
	EnumThreads();
	EnumBreakpoints();
	EnumTestProfiles();
	EnumBreakpointLocations();
	EnumTestProfileLocations();
	EnumTestProfileParameters();
	AdjustToPrivileges();
	ShowInfo();
	return FALSE;
}

LRESULT CTCProcedurePropertiesDebugDialog::OnGetDefID(WPARAM wParam, LPARAM lParam)
{
	return MAKELONG(0, DC_HASDEFID);
}

BOOL CTCProcedurePropertiesDebugDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CString  szType;
	CString  szTable;
	CString  szValue;
	CTMParameter  *pTMParameter;
	CTCParameter  *pTCParameter;
	CTCProcedurePropertiesTestTMParametersDialog  cTMParametersDialog;
	CTCProcedurePropertiesTestTCParametersDialog  cTCParametersDialog;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS || pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES || IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS || IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED))
		{
			if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS) ShowBreakpointProperties();
			if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES) ShowTestProfileProperties();
			if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS) ShowWatchIdentifierProperties();
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK  &&  pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)
		{
			if (((((szType = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), pNotifyListView->iItem, FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_TYPE)))) == CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_POSTFIX_NUMERICAL) || szType == CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_POSTFIX_STATUS)) && (pTMParameter = m_pTMParameters.GetAt(m_pTMParameters.Find(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), pNotifyListView->iItem, FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_NAME)))))) && cTMParametersDialog.Create(this, pTMParameter, szTable, szValue)) || ((szType == CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_POSTFIX_NUMERICAL) || szType == CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_POSTFIX_STATUS)) && (pTCParameter = m_pTCParameters.GetAt(m_pTCParameters.Find(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), pNotifyListView->iItem, FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_NAME)))))) && cTCParametersDialog.Create(this, pTCParameter, szTable, szValue))) && !szTable.IsEmpty() && !szValue.IsEmpty())
			{
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szTable));
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->SetWindowText(szValue);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET)->EnableWindow(!szValue.IsEmpty());
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->SetFocus();
			}
		}
	}
	return CLocaleDialog::OnNotify(wParam, lParam, pResult);
}

BOOL CTCProcedurePropertiesDebugDialog::OnCommand(WPARAM wParam, LPARAM lParam)
{
	if (wParam == IDCANCEL) return TRUE;
	return CLocaleDialog::OnCommand(wParam, lParam);
}

void CTCProcedurePropertiesDebugDialog::OnShowWindow(BOOL bShow, UINT nStatus)
{
	INT  nThread;
	INT  nThreads;
	INT  nCtrlID;
	INT  nCtrlIDs;
	CRect  rCtrl[3];
	CDatabaseTCProcedure  cDatabaseTCProcedure;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread[2];
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;

	if (bShow)
	{
		for (nThread = 0, nThreads = (GetParentDisplay()->GetProcedure(&cDatabaseTCProcedure)) ? (INT)cDatabaseTCProcedure.GetSize() : 0, nThreads = ((cDatabaseTCProcedure.GetAttributes() & TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE) != TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE) ? nThreads : 0, m_cDatabaseTCProcedure[0].RemoveAll(); nThread < nThreads; nThread++)
		{
			if ((pDatabaseTCProcedureThread[1] = ((pDatabaseTCProcedureThread[0] = cDatabaseTCProcedure.GetAt(nThread))) ? new CDatabaseTCProcedureThread : (CDatabaseTCProcedureThread *)NULL))
			{
				if (pDatabaseTCProcedureThread[0]->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) >= 0 && pDatabaseTCProcedureThread[0]->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) >= 0)
				{
					pDatabaseTCProcedureThread[1]->SetName(pDatabaseTCProcedureThread[0]->GetName());
					pDatabaseTCProcedureThread[1]->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints);
					pDatabaseTCProcedureThread[1]->SetProfiles(pDatabaseTCProcedureThreadTestProfiles);
					if (m_cDatabaseTCProcedure[0].Add(pDatabaseTCProcedureThread[1]) >= 0) continue;
				}
				delete pDatabaseTCProcedureThread[1];
			}
		}
		for (nCtrlID = FIRSTNONDEBUGWATCHCTRLID, nCtrlIDs = LASTNONDEBUGWATCHCTRLID; nCtrlID <= nCtrlIDs; nCtrlID++)
		{
			GetDlgItem(nCtrlID)->ShowWindow(((cDatabaseTCProcedure.GetAttributes() & TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE) != TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE) ? SW_SHOW : SW_HIDE);
			continue;
		}
		if (cDatabaseTCProcedure.GetAttributes() & TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE)
		{
			for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_THREAD_STATIC)->GetWindowRect(rCtrl[0]), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_STATIC)->GetWindowRect(rCtrl[1]), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)->GetWindowRect(rCtrl[2]), ScreenToClient(rCtrl[0]), ScreenToClient(rCtrl[1]), ScreenToClient(rCtrl[2]); rCtrl[0].top < rCtrl[1].top; )
			{
				m_rCtrl[0].SetRect(rCtrl[1].left, rCtrl[1].top, rCtrl[1].right, rCtrl[1].bottom);
				m_rCtrl[1].SetRect(rCtrl[2].left, rCtrl[2].top, rCtrl[2].right, rCtrl[2].bottom);
				rCtrl[1].SetRect(rCtrl[1].left, rCtrl[0].top, rCtrl[1].right, rCtrl[0].top + rCtrl[1].Height());
				rCtrl[2].SetRect(rCtrl[2].left, rCtrl[2].top - (m_rCtrl[0].top - rCtrl[0].top), rCtrl[2].right, rCtrl[2].bottom);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_STATIC)->MoveWindow(rCtrl[1]);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)->MoveWindow(rCtrl[2]);
				break;
			}
		}
		else
		{
			for (EnumThreads(); !m_rCtrl[0].IsRectEmpty(); )
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_STATIC)->MoveWindow(m_rCtrl[0]);
				break;
			}
			for (; !m_rCtrl[1].IsRectEmpty(); )
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)->MoveWindow(m_rCtrl[1]);
				break;
			}
			ShowInfo();
		}
	}
	CLocaleDialog::OnShowWindow(bShow, nStatus);
}

void CTCProcedurePropertiesDebugDialog::OnTimer(UINT_PTR nEventID)
{
	if (nEventID == IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)
	{
		UpdateIdentifiers();
		KillTimer(nEventID);
		return;
	}
	if (nEventID == IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->SetFocus();
		KillTimer(nEventID);
		return;
	}
	CLocaleDialog::OnTimer(nEventID);
}

void CTCProcedurePropertiesDebugDialog::OnAddBreakpoint()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	UINT  nOptions;
	CString  szItem;
	CString  szLocation;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		if (pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) >= 0)
		{
			if ((pDatabaseTCProcedureThreadBreakpoint = new CDatabaseTCProcedureThreadBreakpoint))
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION)->GetWindowText(szLocation);
				nOptions = (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS)) ? TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS : 0;
				nOptions |= (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER)) ? TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER : 0;
				nOptions |= (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY)) ? TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY : 0;
				nOptions |= (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION)) ? TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION : 0;
				nOptions |= (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_DISABLED)) ? TCPROCEDURETHREADBREAKPOINT_OPTION_DISABLED : 0;
				for (pDatabaseTCProcedureThreadBreakpoint->SetLocation(szLocation), pDatabaseTCProcedureThreadBreakpoint->SetOptions(nOptions); (nIndex = pDatabaseTCProcedureThreadBreakpoints.Add(pDatabaseTCProcedureThreadBreakpoint)) >= 0; )
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns[0].GetSize(), pDatabaseTCProcedureThread->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints), UpdateBreakpoints(pDatabaseTCProcedureThread->GetName(), pDatabaseTCProcedureThreadBreakpoints); nColumn < nColumns; nColumn++)
					{
						for (szItem.Empty(); m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_LOCATION); )
						{
							szItem = pDatabaseTCProcedureThreadBreakpoint->GetLocation();
							break;
						}
						if (m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_OPTIONS))
						{
							szItem = (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ALWAYS) : EMPTYSTRING;
							szItem = (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_FORMAT)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDTRIGGER)) : szItem;
							szItem += (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY) ? ((!szItem.IsEmpty()) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_SEPARATOR)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDBODY)) : (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_FORMAT)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDBODY))) : EMPTYSTRING;
							szItem += (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION) ? ((!szItem.IsEmpty()) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_SEPARATOR)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDCONFIRMATION)) : (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_FORMAT)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDCONFIRMATION))) : EMPTYSTRING;
						}
						for (; m_szColumns[0].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_STATE); )
						{
							szItem = (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_DISABLED) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSSTATE_DISABLED) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSSTATE_ENABLED);
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), nIndex, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), nIndex, nColumn, szItem);
					}
					Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), nIndex);
					GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
					GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
					GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ADD)->EnableWindow(FALSE);
					GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_REMOVE)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
					GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_REMOVEALL)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
					GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION)->SetFocus();
					return;
				}
				delete pDatabaseTCProcedureThreadBreakpoint;
			}
		}
	}
}

void CTCProcedurePropertiesDebugDialog::OnRemoveBreakpoint()
{
	INT  nIndex;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = (pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) > 0) ? pDatabaseTCProcedureThreadBreakpoints.GetAt((nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS)))) : (CDatabaseTCProcedureThreadBreakpoint *)NULL))
		{
			for (pDatabaseTCProcedureThreadBreakpoints.RemoveAt(nIndex), Listview_DeleteText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), nIndex); pDatabaseTCProcedureThread->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints); )
			{
				Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), 0);
				UpdateBreakpoints(pDatabaseTCProcedureThread->GetName(), pDatabaseTCProcedureThreadBreakpoints);
				ShowBreakpointProperties();
				break;
			}
			for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ADD)->EnableWindow(FALSE); !SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, LVM_GETITEMCOUNT); )
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS_STATIC)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_REMOVE)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_REMOVEALL)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION)->SetFocus();
				break;
			}
			delete pDatabaseTCProcedureThreadBreakpoint;
		}
	}
}

void CTCProcedurePropertiesDebugDialog::OnRemoveAllBreakpoints()
{
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (pDatabaseTCProcedureThreadBreakpoints.RemoveAll(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, LVM_DELETEALLITEMS); pDatabaseTCProcedureThread->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints); )
		{
			UpdateBreakpoints(pDatabaseTCProcedureThread->GetName(), pDatabaseTCProcedureThreadBreakpoints);
			ShowBreakpointProperties();
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_REMOVEALL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION)->SetFocus();
	}
}

void CTCProcedurePropertiesDebugDialog::OnAddTestProfile()
{
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	UINT  nOptions;
	CString  szName;
	CString  szItem;
	CString  szFormat;
	CString  szLocation;
	CTimeSpan  tDelay;
	CDatabaseTMParameter  *pDatabaseTMParameter[2];
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		if (pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) >= 0)
		{
			if ((pDatabaseTCProcedureThreadTestProfile = new CDatabaseTCProcedureThreadTestProfile))
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->GetWindowText(szName);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION)->GetWindowText(szLocation);
				nOptions = (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY)) ? TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEIMMEDIATELY : 0;
				nOptions |= (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART)) ? TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART : 0;
				nOptions |= (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP)) ? TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTEP : 0;
				nOptions |= (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_DISABLED)) ? TCPROCEDURETHREADTESTPROFILE_OPTION_DISABLED : 0;
				tDelay = (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART)) ? Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS)) : 0;
				tDelay = (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP)) ? Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS)) : tDelay;
				for (nParameter = 0, nParameters = (INT)m_pDatabaseTMParameters.GetSize(); nParameter < nParameters; nParameter = nParameter + 1)
				{
					if ((pDatabaseTMParameter[1] = ((pDatabaseTMParameter[0] = m_pDatabaseTMParameters.GetAt(nParameter))) ? new CDatabaseTMParameter : (CDatabaseTMParameter *)NULL))
					{
						if (pDatabaseTMParameter[1]->Copy(pDatabaseTMParameter[0]) && pDatabaseTCProcedureThreadTestProfile->Add(pDatabaseTMParameter[1]) >= 0) continue;
						delete pDatabaseTMParameter[1];
						break;
					}
				}
				for (pDatabaseTCProcedureThreadTestProfile->SetName(szName), pDatabaseTCProcedureThreadTestProfile->SetLocation(szLocation), pDatabaseTCProcedureThreadTestProfile->SetOptions(nOptions), pDatabaseTCProcedureThreadTestProfile->SetDelay(tDelay); (nIndex = pDatabaseTCProcedureThreadTestProfiles.Add(pDatabaseTCProcedureThreadTestProfile)) >= 0; )
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns[1].GetSize(), pDatabaseTCProcedureThread->SetProfiles(pDatabaseTCProcedureThreadTestProfiles); nColumn < nColumns; nColumn++)
					{
						for (szItem.Empty(); m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_NAME); )
						{
							szItem = pDatabaseTCProcedureThreadTestProfile->GetName();
							break;
						}
						for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_LOCATION); )
						{
							szItem = pDatabaseTCProcedureThreadTestProfile->GetLocation();
							break;
						}
						if (m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_OPTIONS))
						{
							for (szItem = (pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEIMMEDIATELY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEOPTION_EXECUTEIMMEDIATELY) : EMPTYSTRING, szFormat = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEOPTION_EXECUTEDELAYEDAFTERSTART); pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART; )
							{
								szItem.Format(szFormat, pDatabaseTCProcedureThreadTestProfile->GetDelay().GetTotalSeconds());
								break;
							}
							for (szFormat = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEOPTION_EXECUTEDELAYEDAFTERSTEP); pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTEP; )
							{
								szItem.Format(szFormat, pDatabaseTCProcedureThreadTestProfile->GetDelay().GetTotalSeconds());
								break;
							}
						}
						for (; m_szColumns[1].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_STATE); )
						{
							szItem = (pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_DISABLED) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESSTATE_DISABLED) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESSTATE_ENABLED);
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), nIndex, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), nIndex, nColumn, szItem);
					}
					Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), nIndex);
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME, EM_SETSEL, 0, -1);
					GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
					GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
					GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ADD)->EnableWindow(FALSE);
					GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_REMOVE)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
					GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_REMOVEALL)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
					GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->SetFocus();
					return;
				}
				delete pDatabaseTCProcedureThreadTestProfile;
			}
		}
	}
}

void CTCProcedurePropertiesDebugDialog::OnRemoveTestProfile()
{
	INT  nIndex;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		if ((pDatabaseTCProcedureThreadTestProfile = (pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) > 0) ? pDatabaseTCProcedureThreadTestProfiles.GetAt((nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)))) : (CDatabaseTCProcedureThreadTestProfile *)NULL))
		{
			for (pDatabaseTCProcedureThreadTestProfiles.RemoveAt(nIndex), Listview_DeleteText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), nIndex); pDatabaseTCProcedureThread->SetProfiles(pDatabaseTCProcedureThreadTestProfiles); )
			{
				Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), 0);
				ShowTestProfileProperties();
				break;
			}
			for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ADD)->EnableWindow(FALSE); !SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, LVM_GETITEMCOUNT); )
			{
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_DELETEALLITEMS);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES_STATIC)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_REMOVE)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_REMOVEALL)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS_STATIC)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS)->EnableWindow(FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->SetFocus();
				m_pDatabaseTMParameters.RemoveAll();
				break;
			}
			delete pDatabaseTCProcedureThreadTestProfile;
		}
	}
}

void CTCProcedurePropertiesDebugDialog::OnRemoveAllTestProfiles()
{
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (pDatabaseTCProcedureThreadTestProfiles.RemoveAll(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, LVM_DELETEALLITEMS), m_pDatabaseTMParameters.RemoveAll(); pDatabaseTCProcedureThread->SetProfiles(pDatabaseTCProcedureThreadTestProfiles); )
		{
			ShowTestProfileProperties();
			break;
		}
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_DELETEALLITEMS);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_REMOVEALL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->SetFocus();
	}
}

void CTCProcedurePropertiesDebugDialog::OnAddTestProfileParameter()
{
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	CString  szName;
	CString  szItem;
	CString  szLocation;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;
	CTCProcedurePropertiesTestProfileParametersDialog  cParametersDialog;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		if (cParametersDialog.Create(this, m_pDatabaseTMParameters) == IDOK)
		{
			for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->GetWindowText(szName), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION)->GetWindowText(szLocation); (pDatabaseTCProcedureThreadTestProfile = (pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) > 0) ? pDatabaseTCProcedureThreadTestProfiles.GetAt(pDatabaseTCProcedureThreadTestProfiles.Find(szName)) : (CDatabaseTCProcedureThreadTestProfile *)NULL); )
			{
				for (nParameter = 0, nParameters = (INT)m_pDatabaseTMParameters.GetSize(), pDatabaseTCProcedureThreadTestProfile->RemoveAll(); nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTMParameter = new CDatabaseTMParameter) != (CDatabaseTMParameter *)NULL)
					{
						if (pDatabaseTMParameter->Copy(m_pDatabaseTMParameters.GetAt(nParameter)) && pDatabaseTCProcedureThreadTestProfile->Add(pDatabaseTMParameter) >= 0) continue;
						delete pDatabaseTMParameter;
						break;
					}
				}
				pDatabaseTCProcedureThread->SetProfiles(pDatabaseTCProcedureThreadTestProfiles);
				break;
			}
			for (nParameter = 0, nParameters = (INT)m_pDatabaseTMParameters.GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_DELETEALLITEMS); nParameter < nParameters; nParameter++)
			{
				for (nColumn = 0, nColumns = ((pDatabaseTMParameter = m_pDatabaseTMParameters.GetAt(nParameter))) ? (INT)m_szColumns[2].GetSize() : 0; nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns[2].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEPARAMETERSTITLEITEM_TAG); )
					{
						szItem = pDatabaseTMParameter->GetTag();
						break;
					}
					for (; m_szColumns[2].GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEPARAMETERSTITLEITEM_VALUE); )
					{
						szItem = ConvertTestProfileParameterValues(pDatabaseTMParameter->GetConstValueAsText());
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS), nParameter, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS), nParameter, nColumn, szItem);
				}
			}
			Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS), 0);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ADD)->EnableWindow((pDatabaseTCProcedureThreadTestProfiles.Find(szName) < 0 && !szName.IsEmpty() && (!szLocation.IsEmpty() || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART)) && m_pDatabaseTMParameters.GetSize() > 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP))) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS)) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_GETITEMCOUNT) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_ADD)->SetFocus();
		}
	}
}

void CTCProcedurePropertiesDebugDialog::OnRemoveTestProfileParameter()
{
	INT  nIndex;
	INT  nParameter;
	INT  nParameters;
	CString  szName;
	CString  szLocation;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		if (Listview_DeleteText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS), (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS)))) && nIndex < m_pDatabaseTMParameters.GetSize())
		{
			delete m_pDatabaseTMParameters.GetAt(nIndex);
			m_pDatabaseTMParameters.RemoveAt(nIndex);
		}
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->GetWindowText(szName), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION)->GetWindowText(szLocation); (pDatabaseTCProcedureThreadTestProfile = (pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) > 0) ? pDatabaseTCProcedureThreadTestProfiles.GetAt(pDatabaseTCProcedureThreadTestProfiles.Find(szName)) : (CDatabaseTCProcedureThreadTestProfile *)NULL); )
		{
			for (nParameter = 0, nParameters = (INT)m_pDatabaseTMParameters.GetSize(), pDatabaseTCProcedureThreadTestProfile->RemoveAll(); nParameter < nParameters; nParameter++)
			{
				if ((pDatabaseTMParameter = new CDatabaseTMParameter) != (CDatabaseTMParameter *)NULL)
				{
					if (pDatabaseTMParameter->Copy(m_pDatabaseTMParameters.GetAt(nParameter)) && pDatabaseTCProcedureThreadTestProfile->Add(pDatabaseTMParameter) >= 0) continue;
					delete pDatabaseTMParameter;
					break;
				}
			}
			pDatabaseTCProcedureThread->SetProfiles(pDatabaseTCProcedureThreadTestProfiles);
			break;
		}
		for (Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS), 0), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ADD)->EnableWindow((pDatabaseTCProcedureThreadTestProfiles.Find(szName) < 0 && !szName.IsEmpty() && (!szLocation.IsEmpty() || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART)) && m_pDatabaseTMParameters.GetSize() > 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP))) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE); !SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_GETITEMCOUNT); )
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS_STATIC)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_REMOVE)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_REMOVEALL)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_ADD)->SetFocus();
			break;
		}
	}
}

void CTCProcedurePropertiesDebugDialog::OnRemoveAllTestProfileParameters()
{
	CString  szName;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->GetWindowText(szName), m_pDatabaseTMParameters.RemoveAll(); (pDatabaseTCProcedureThreadTestProfile = (pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) > 0) ? pDatabaseTCProcedureThreadTestProfiles.GetAt(pDatabaseTCProcedureThreadTestProfiles.Find(szName)) : (CDatabaseTCProcedureThreadTestProfile *)NULL); )
		{
			pDatabaseTCProcedureThreadTestProfile->RemoveAll();
			pDatabaseTCProcedureThread->SetProfiles(pDatabaseTCProcedureThreadTestProfiles);
			break;
		}
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS, LVM_DELETEALLITEMS);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETERS)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_REMOVEALL)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_PARAMETER_ADD)->SetFocus();
	}
}

void CTCProcedurePropertiesDebugDialog::OnBreakAlways()
{
	CString  szLocation;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION)->GetWindowText(szLocation); (pDatabaseTCProcedureThreadBreakpoint = (pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) > 0) ? pDatabaseTCProcedureThreadBreakpoints.GetAt(pDatabaseTCProcedureThreadBreakpoints.Find(szLocation)) : (CDatabaseTCProcedureThreadBreakpoint *)NULL); )
		{
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_OPTIONS)), (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ALWAYS) : EMPTYSTRING);
			pDatabaseTCProcedureThreadBreakpoint->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS)) ? ((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & ~(TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION)) | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS) : (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & ~TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS));
			UpdateBreakpoints(pDatabaseTCProcedureThread->GetName(), pDatabaseTCProcedureThreadBreakpoints);
			pDatabaseTCProcedureThread->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints);
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ADD)->EnableWindow((pDatabaseTCProcedureThreadBreakpoints.Find(szLocation) < 0 && !szLocation.IsEmpty() && IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS)) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	}
	if (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS))
	{
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION, FALSE);
	}
}

void CTCProcedurePropertiesDebugDialog::OnBreakAtFailedTrigger()
{
	CString  szOptions;
	CString  szLocation;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION)->GetWindowText(szLocation); (pDatabaseTCProcedureThreadBreakpoint = (pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) > 0) ? pDatabaseTCProcedureThreadBreakpoints.GetAt(pDatabaseTCProcedureThreadBreakpoints.Find(szLocation)) : (CDatabaseTCProcedureThreadBreakpoint *)NULL); )
		{
			szOptions = (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER)) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_FORMAT)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDTRIGGER)) : EMPTYSTRING;
			szOptions += (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY)) ? ((!szOptions.IsEmpty()) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_SEPARATOR)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDBODY)) : (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_FORMAT)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDBODY))) : EMPTYSTRING;
			szOptions += (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION)) ? ((!szOptions.IsEmpty()) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_SEPARATOR)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDCONFIRMATION)) : (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_FORMAT)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDCONFIRMATION))) : EMPTYSTRING;
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_OPTIONS)), szOptions);
			pDatabaseTCProcedureThreadBreakpoint->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER)) ? ((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & ~TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS) | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER) : (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & ~TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER));
			UpdateBreakpoints(pDatabaseTCProcedureThread->GetName(), pDatabaseTCProcedureThreadBreakpoints);
			pDatabaseTCProcedureThread->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints);
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ADD)->EnableWindow((pDatabaseTCProcedureThreadBreakpoints.Find(szLocation) < 0 && !szLocation.IsEmpty() && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION))) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS, FALSE);
}

void CTCProcedurePropertiesDebugDialog::OnBreakAtFailedBody()
{
	CString  szOptions;
	CString  szLocation;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION)->GetWindowText(szLocation); (pDatabaseTCProcedureThreadBreakpoint = (pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) > 0) ? pDatabaseTCProcedureThreadBreakpoints.GetAt(pDatabaseTCProcedureThreadBreakpoints.Find(szLocation)) : (CDatabaseTCProcedureThreadBreakpoint *)NULL); )
		{
			szOptions = (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER)) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_FORMAT)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDTRIGGER)) : EMPTYSTRING;
			szOptions += (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY)) ? ((!szOptions.IsEmpty()) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_SEPARATOR)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDBODY)) : (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_FORMAT)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDBODY))) : EMPTYSTRING;
			szOptions += (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION)) ? ((!szOptions.IsEmpty()) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_SEPARATOR)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDCONFIRMATION)) : (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_FORMAT)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDCONFIRMATION))) : EMPTYSTRING;
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_OPTIONS)), szOptions);
			pDatabaseTCProcedureThreadBreakpoint->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY)) ? ((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & ~TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS) | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY) : (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & ~TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY));
			UpdateBreakpoints(pDatabaseTCProcedureThread->GetName(), pDatabaseTCProcedureThreadBreakpoints);
			pDatabaseTCProcedureThread->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints);
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ADD)->EnableWindow((pDatabaseTCProcedureThreadBreakpoints.Find(szLocation) < 0 && !szLocation.IsEmpty() && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION))) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS, FALSE);
}

void CTCProcedurePropertiesDebugDialog::OnBreakAtFailedConfirmation()
{
	CString  szOptions;
	CString  szLocation;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION)->GetWindowText(szLocation); (pDatabaseTCProcedureThreadBreakpoint = (pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) > 0) ? pDatabaseTCProcedureThreadBreakpoints.GetAt(pDatabaseTCProcedureThreadBreakpoints.Find(szLocation)) : (CDatabaseTCProcedureThreadBreakpoint *)NULL); )
		{
			szOptions = (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER)) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_FORMAT)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDTRIGGER)) : EMPTYSTRING;
			szOptions += (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY)) ? ((!szOptions.IsEmpty()) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_SEPARATOR)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDBODY)) : (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_FORMAT)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDBODY))) : EMPTYSTRING;
			szOptions += (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION)) ? ((!szOptions.IsEmpty()) ? (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_SEPARATOR)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDCONFIRMATION)) : (CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTITEM_FORMAT)) + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTOPTION_ATFAILEDCONFIRMATION))) : EMPTYSTRING;
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_OPTIONS)), szOptions);
			pDatabaseTCProcedureThreadBreakpoint->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION)) ? ((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & ~TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS) | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION) : (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & ~TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION));
			UpdateBreakpoints(pDatabaseTCProcedureThread->GetName(), pDatabaseTCProcedureThreadBreakpoints);
			pDatabaseTCProcedureThread->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints);
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ADD)->EnableWindow((pDatabaseTCProcedureThreadBreakpoints.Find(szLocation) < 0 && !szLocation.IsEmpty() && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION))) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS, FALSE);
}

void CTCProcedurePropertiesDebugDialog::OnDisableBreakpoint()
{
	CString  szLocation;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION)->GetWindowText(szLocation); (pDatabaseTCProcedureThreadBreakpoint = (pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) > 0) ? pDatabaseTCProcedureThreadBreakpoints.GetAt(pDatabaseTCProcedureThreadBreakpoints.Find(szLocation)) : (CDatabaseTCProcedureThreadBreakpoint *)NULL); )
		{
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINTS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSTITLEITEM_STATE)), (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_DISABLED)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSSTATE_DISABLED) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGBREAKPOINTSSTATE_ENABLED));
			pDatabaseTCProcedureThreadBreakpoint->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_DISABLED)) ? (pDatabaseTCProcedureThreadBreakpoint->GetOptions() | TCPROCEDURETHREADBREAKPOINT_OPTION_DISABLED) : (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & ~TCPROCEDURETHREADBREAKPOINT_OPTION_DISABLED));
			UpdateBreakpoints(pDatabaseTCProcedureThread->GetName(), pDatabaseTCProcedureThreadBreakpoints);
			pDatabaseTCProcedureThread->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints);
			break;
		}
	}
}

void CTCProcedurePropertiesDebugDialog::OnExecuteImmediately()
{
	CString  szName;
	CString  szLocation;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->GetWindowText(szName); (pDatabaseTCProcedureThreadTestProfile = (pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) > 0) ? pDatabaseTCProcedureThreadTestProfiles.GetAt(pDatabaseTCProcedureThreadTestProfiles.Find(szName)) : (CDatabaseTCProcedureThreadTestProfile *)NULL); )
		{
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_OPTIONS)), STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEOPTION_EXECUTEIMMEDIATELY));
			pDatabaseTCProcedureThreadTestProfile->SetOptions((pDatabaseTCProcedureThreadTestProfile->GetOptions() & ~(TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART | TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTEP)) | TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEIMMEDIATELY);
			pDatabaseTCProcedureThreadTestProfile->SetDelay(CTimeSpan(0));
			pDatabaseTCProcedureThread->SetProfiles(pDatabaseTCProcedureThreadTestProfiles);
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION)->GetWindowText(szLocation);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ADD)->EnableWindow((pDatabaseTCProcedureThreadTestProfiles.Find(szName) < 0 && !szName.IsEmpty() && !szLocation.IsEmpty() && m_pDatabaseTMParameters.GetSize() > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS_STATIC)->EnableWindow(FALSE);
}

void CTCProcedurePropertiesDebugDialog::OnExecuteDelayedAfterStart()
{
	CString  szName;
	CString  szOptions;
	CString  szLocation;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->GetWindowText(szName); (pDatabaseTCProcedureThreadTestProfile = (pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) > 0) ? pDatabaseTCProcedureThreadTestProfiles.GetAt(pDatabaseTCProcedureThreadTestProfiles.Find(szName)) : (CDatabaseTCProcedureThreadTestProfile *)NULL); )
		{
			szOptions.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEOPTION_EXECUTEDELAYEDAFTERSTART), TCPROCEDUREPROPERTIESDEBUG_TESTPROFILEDELAY_DEFAULTINTERVAL);
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_OPTIONS)), szOptions);
			pDatabaseTCProcedureThreadTestProfile->SetOptions((pDatabaseTCProcedureThreadTestProfile->GetOptions() & ~(TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEIMMEDIATELY | TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTEP)) | TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART);
			pDatabaseTCProcedureThreadTestProfile->SetDelay(TCPROCEDUREPROPERTIESDEBUG_TESTPROFILEDELAY_DEFAULTINTERVAL);
			pDatabaseTCProcedureThreadTestProfile->SetLocation(EMPTYSTRING);
			pDatabaseTCProcedureThread->SetProfiles(pDatabaseTCProcedureThreadTestProfiles);
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION)->GetWindowText(szLocation);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ADD)->EnableWindow((pDatabaseTCProcedureThreadTestProfiles.Find(szName) < 0 && !szName.IsEmpty() && m_pDatabaseTMParameters.GetSize() > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP, FALSE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION, CB_SETCURSEL, (WPARAM)-1);
	Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS), TCPROCEDUREPROPERTIESDEBUG_TESTPROFILEDELAY_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS)->SetFocus();
}

void CTCProcedurePropertiesDebugDialog::OnExecuteDelayedAfterStep()
{
	CString  szName;
	CString  szOptions;
	CString  szLocation;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->GetWindowText(szName); (pDatabaseTCProcedureThreadTestProfile = (pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) > 0) ? pDatabaseTCProcedureThreadTestProfiles.GetAt(pDatabaseTCProcedureThreadTestProfiles.Find(szName)) : (CDatabaseTCProcedureThreadTestProfile *)NULL); )
		{
			szOptions.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEOPTION_EXECUTEDELAYEDAFTERSTEP), TCPROCEDUREPROPERTIESDEBUG_TESTPROFILEDELAY_DEFAULTINTERVAL);
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_OPTIONS)), szOptions);
			pDatabaseTCProcedureThreadTestProfile->SetOptions((pDatabaseTCProcedureThreadTestProfile->GetOptions() & ~(TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEIMMEDIATELY | TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART)) | TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTEP);
			pDatabaseTCProcedureThreadTestProfile->SetDelay(TCPROCEDUREPROPERTIESDEBUG_TESTPROFILEDELAY_DEFAULTINTERVAL);
			pDatabaseTCProcedureThread->SetProfiles(pDatabaseTCProcedureThreadTestProfiles);
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION)->GetWindowText(szLocation);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ADD)->EnableWindow((pDatabaseTCProcedureThreadTestProfiles.Find(szName) < 0 && !szName.IsEmpty() && !szLocation.IsEmpty() && m_pDatabaseTMParameters.GetSize() > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP, TRUE);
	Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS), TCPROCEDUREPROPERTIESDEBUG_TESTPROFILEDELAY_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS)->SetFocus();
}

void CTCProcedurePropertiesDebugDialog::OnDisableTestProfile()
{
	CString  szName;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->GetWindowText(szName); (pDatabaseTCProcedureThreadTestProfile = (pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) > 0) ? pDatabaseTCProcedureThreadTestProfiles.GetAt(pDatabaseTCProcedureThreadTestProfiles.Find(szName)) : (CDatabaseTCProcedureThreadTestProfile *)NULL); )
		{
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_STATE)), (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_DISABLED)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESSTATE_DISABLED) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESSTATE_ENABLED));
			pDatabaseTCProcedureThreadTestProfile->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_DISABLED)) ? (pDatabaseTCProcedureThreadTestProfile->GetOptions() | TCPROCEDURETHREADTESTPROFILE_OPTION_DISABLED) : (pDatabaseTCProcedureThreadTestProfile->GetOptions() & ~TCPROCEDURETHREADTESTPROFILE_OPTION_DISABLED));
			pDatabaseTCProcedureThread->SetProfiles(pDatabaseTCProcedureThreadTestProfiles);
			break;
		}
	}
}

void CTCProcedurePropertiesDebugDialog::OnSetWatchIdentifierValue()
{
	INT  nPos;
	INT  nSample;
	INT  nIdentifier;
	INT  nIdentifiers;
	BOOL  bValue;
	BYTE  nStatus;
	double  fValue;
	TIMETAG  tValue;
	CString  szTable;
	CString  szValue;
	CString  *pValue;
	CString  szFormat;
	CString  szIdentifier;
	LONGLONG  nValue;
	ULONGLONG  uValue;
	ULONGLONG  nAttributes;
	CPtrArray  pIdentifiers;
	CUIntArray  nIdentifierTypes;
	CLongUIntArray  nIdentifierAttributes;
	CTMParameter  *pTMParameter;
	CTCParameter  *pTCParameter;
	CStringArray  szIdentifiers;
	CStringTools  cStringTools;
	CHourglassCursor  cCursor;

	if (Lock())
	{
		szIdentifiers.Copy(m_szIdentifiers);
		nIdentifierTypes.Copy(m_nIdentifierTypes);
		nIdentifierAttributes.Copy(m_nIdentifierAttributes);
		pIdentifiers.Copy(m_pIdentifiers);
		Unlock();
	}
	for (nIdentifier = 0, nIdentifiers = (GetParentDisplay()->IsProcedureTestSuspended()) ? (INT)szIdentifiers.GetSize() : 0, szIdentifier = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_NAME))); nIdentifier < nIdentifiers; nIdentifier++)
	{
		if (szIdentifiers.GetAt(nIdentifier) == szIdentifier) break;
		continue;
	}
	if (nIdentifier == nIdentifiers)
	{
		CAudioDevice::AlertBySound();
		return;
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->GetWindowText(szValue); nIdentifierTypes.GetAt(nIdentifier) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_ARGUMENT || nIdentifierTypes.GetAt(nIdentifier) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_VARIABLE; )
	{
		if ((((nAttributes = nIdentifierAttributes.GetAt(nIdentifier)) & TCPARAMETER_CODING_BITPATTERN) || (nAttributes & TCPARAMETER_CODING_UNSIGNEDINTEGER)) && (nAttributes & TCPARAMETER_CALIBRATION_STATUS) != TCPARAMETER_CALIBRATION_STATUS)
		{
			if (nAttributes & TCPARAMETER_RADIX_BINARY)
			{
				uValue = CDatabaseEngine::ParseValue(szValue, 2);
				szValue = cStringTools.ConvertLongUIntToString(uValue, 2);
			}
			if (nAttributes & TCPARAMETER_RADIX_OCTAL)
			{
				uValue = CDatabaseEngine::ParseValue(szValue, 8);
				szValue = cStringTools.ConvertLongUIntToString(uValue, 8);
			}
			if (nAttributes & TCPARAMETER_RADIX_HEXADECIMAL)
			{
				uValue = CDatabaseEngine::ParseValue(szValue, 16);
				szValue = cStringTools.ConvertLongUIntToString(uValue, 16);
			}
			for (; (nAttributes & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0; )
			{
				szValue = cStringTools.ConvertLongUIntToString((uValue = CDatabaseEngine::ParseValue(szValue, 10)));
				break;
			}
			CopyMemory(pIdentifiers.GetAt(nIdentifier), &uValue, sizeof(uValue));
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_VALUE)), szValue);
			break;
		}
		if ((nAttributes & TCPARAMETER_CALIBRATION_STATUS) != TCPARAMETER_CALIBRATION_STATUS)
		{
			if ((nAttributes & TCPARAMETER_CODING_SIGNEDINTEGER) == TCPARAMETER_CODING_SIGNEDINTEGER)
			{
				CopyMemory(pIdentifiers.GetAt(nIdentifier), &(nValue = CDatabaseEngine::ParseValue(szValue, 10)), sizeof(nValue));
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_VALUE)), (szValue = cStringTools.ConvertLongIntToString(nValue)));
				break;
			}
			if (nAttributes & TCPARAMETER_CODING_FLOATINGPOINT)
			{
				CopyMemory(pIdentifiers.GetAt(nIdentifier), &(fValue = CDatabaseEngine::ParseValue(szValue)), sizeof(fValue));
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_VALUE)), (szValue = cStringTools.ConvertFloatToString(fValue)));
				break;
			}
			if (nAttributes & TCPARAMETER_CODING_TIME)
			{
				CopyMemory(pIdentifiers.GetAt(nIdentifier), &(tValue = CDatabaseEngine::ParseTime(szValue)), sizeof(tValue));
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_VALUE)), (szValue = CTimeTag(tValue).FormatGmt(STRING(IDS_DATABASE_DATAFORMAT_ABSOLUTETIME))));
				break;
			}
		}
		if ((nAttributes & TCPARAMETER_CALIBRATION_STATUS) || (nAttributes & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == 0)
		{
			for (; (pValue = (CString *)pIdentifiers.GetAt(nIdentifier)); )
			{
				*pValue = szValue;
				break;
			}
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_VALUE)), szValue);
		}
		break;
	}
	if (nIdentifierTypes.GetAt(nIdentifier) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER)
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE)->GetWindowText(szTable), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERS_TABLE_FORMAT), EMPTYSTRING, EMPTYSTRING); (nPos = szTable.Find(szFormat)) >= 0; )
		{
			szTable = szTable.Left(nPos);
			break;
		}
		for (nSample = (INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE)), nStatus = (!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT)) ? ((!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT)) ? ((!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT)) ? ((!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT)) ? ((!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT)) ? TMPARAMETER_STATUS_NOLIMIT : TMPARAMETER_STATUS_CONSISTENCYLIMIT) : TMPARAMETER_STATUS_DELTALIMIT) : TMPARAMETER_STATUS_HARDLIMIT) : TMPARAMETER_STATUS_SOFTLIMIT) : TMPARAMETER_STATUS_NOLIMIT, nStatus |= (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_VALID)) ? TMPARAMETER_STATUS_VALID : TMPARAMETER_STATUS_INVALID, nStatus |= (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_GOOD)) ? TMPARAMETER_STATUS_GOOD : TMPARAMETER_STATUS_BAD; (pTMParameter = (UpdateParameterValue(szIdentifiers.GetAt(nIdentifier), nIdentifierTypes.GetAt(nIdentifier), nIdentifierAttributes.GetAt(nIdentifier), szValue, nSample, nStatus, szTable)) ? m_pTMParameters.GetAt(m_pTMParameters.Find(szIdentifiers.GetAt(nIdentifier))) : (CTMParameter *)NULL) && pTMParameter->GetValueAsText(GetDatabase(), 0, nIdentifierAttributes.GetAt(nIdentifier), szValue, bValue, FALSE); )
		{
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_VALUE)), (bValue) ? (szValue + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSVALUE_EXTRAPOLATED)) : szValue);
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_STATUS)), ((nStatus & TMPARAMETER_STATUS_NOLIMIT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_NOLIMIT) : ((nStatus & TMPARAMETER_STATUS_SOFTLIMIT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_SOFTLIMIT) : ((nStatus & TMPARAMETER_STATUS_HARDLIMIT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_HARDLIMIT) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_DELTALIMIT)))) + CString(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_DELIMITER)) + ((nStatus & TMPARAMETER_STATUS_VALID) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_VALID) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_INVALID)));
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_QUALITY)), (nStatus & TMPARAMETER_STATUS_GOOD) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSQUALITY_GOOD) : ((nStatus & TMPARAMETER_STATUS_BAD) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSQUALITY_BAD) : EMPTYSTRING));
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->SetWindowText(szValue);
	}
	if (nIdentifierTypes.GetAt(nIdentifier) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TCPARAMETER)
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE)->GetWindowText(szTable), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERS_TABLE_FORMAT), EMPTYSTRING, EMPTYSTRING); (nPos = szTable.Find(szFormat)) >= 0; )
		{
			szTable = szTable.Left(nPos);
			break;
		}
		for (nSample = (INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE)), nStatus = (!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT)) ? ((!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT)) ? ((!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT)) ? ((!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT)) ? TCPARAMETER_STATUS_NOLIMIT : TCPARAMETER_STATUS_DELTALIMIT) : TCPARAMETER_STATUS_HARDLIMIT) : TCPARAMETER_STATUS_SOFTLIMIT) : TCPARAMETER_STATUS_NOLIMIT; (pTCParameter = (UpdateParameterValue(szIdentifiers.GetAt(nIdentifier), nIdentifierTypes.GetAt(nIdentifier), nIdentifierAttributes.GetAt(nIdentifier), szValue, nSample, nStatus, szTable)) ? m_pTCParameters.GetAt(m_pTCParameters.Find(szIdentifiers.GetAt(nIdentifier))) : (CTCParameter *)NULL) && pTCParameter->GetValueAsText(GetDatabase(), 0, nIdentifierAttributes.GetAt(nIdentifier), szValue, bValue); )
		{
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_VALUE)), (bValue) ? (szValue + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSVALUE_EXTRAPOLATED)) : szValue);
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_STATUS)), (nStatus & TCPARAMETER_STATUS_NOLIMIT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_NOLIMIT) : ((nStatus & TCPARAMETER_STATUS_SOFTLIMIT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_SOFTLIMIT) : ((nStatus & TCPARAMETER_STATUS_HARDLIMIT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_HARDLIMIT) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSSTATUS_DELTALIMIT))));
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_QUALITY)), STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSQUALITY_NONE));
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->SetWindowText(szValue);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)->SetFocus();
}

void CTCProcedurePropertiesDebugDialog::OnWatchIdentifierStatusNoLimit()
{
	CString  szValue;

	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->GetWindowText(szValue);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET)->EnableWindow(!szValue.IsEmpty());
}

void CTCProcedurePropertiesDebugDialog::OnWatchIdentifierStatusSoftLimit()
{
	CString  szValue;

	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->GetWindowText(szValue);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET)->EnableWindow(!szValue.IsEmpty());
}

void CTCProcedurePropertiesDebugDialog::OnWatchIdentifierStatusHardLimit()
{
	CString  szValue;

	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->GetWindowText(szValue);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET)->EnableWindow(!szValue.IsEmpty());
}

void CTCProcedurePropertiesDebugDialog::OnWatchIdentifierStatusDeltaLimit()
{
	CString  szValue;

	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->GetWindowText(szValue);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET)->EnableWindow(!szValue.IsEmpty());
}

void CTCProcedurePropertiesDebugDialog::OnWatchIdentifierStatusConsistencyLimit()
{
	CString  szValue;

	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT, TRUE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->GetWindowText(szValue);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET)->EnableWindow(!szValue.IsEmpty());
}

void CTCProcedurePropertiesDebugDialog::OnWatchIdentifierStatusValid()
{
	CString  szValue;

	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_VALID, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_INVALID, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->GetWindowText(szValue);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET)->EnableWindow(!szValue.IsEmpty());
}

void CTCProcedurePropertiesDebugDialog::OnWatchIdentifierStatusInvalid()
{
	CString  szValue;

	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_VALID, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_INVALID, TRUE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->GetWindowText(szValue);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET)->EnableWindow(!szValue.IsEmpty());
}

void CTCProcedurePropertiesDebugDialog::OnWatchIdentifierQualityGood()
{
	CString  szValue;

	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_GOOD, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_BAD, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->GetWindowText(szValue);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET)->EnableWindow(!szValue.IsEmpty());
}

void CTCProcedurePropertiesDebugDialog::OnWatchIdentifierQualityBad()
{
	CString  szValue;

	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_GOOD, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_BAD, TRUE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->GetWindowText(szValue);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET)->EnableWindow(!szValue.IsEmpty());
}

void CTCProcedurePropertiesDebugDialog::OnSelchangeThread()
{
	EnumBreakpoints();
	EnumTestProfiles();
	EnumBreakpointLocations();
	EnumTestProfileLocations();
	EnumTestProfileParameters();
	ShowInfo();
}

void CTCProcedurePropertiesDebugDialog::OnSelchangeBreakpointLocation()
{
	CString  szLocation;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_LOCATION)->GetWindowText(szLocation);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ADD)->EnableWindow((pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) >= 0 && pDatabaseTCProcedureThreadBreakpoints.Find(szLocation) < 0 && !szLocation.IsEmpty() && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_ALWAYS) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDTRIGGER) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDBODY) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_BREAKPOINT_FAILEDCONFIRMATION))) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	}
}

void CTCProcedurePropertiesDebugDialog::OnSelchangeTestProfileLocation()
{
	CString  szName;
	CString  szLocation;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->GetWindowText(szName), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION)->GetWindowText(szLocation); (pDatabaseTCProcedureThreadTestProfile = (pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) > 0) ? pDatabaseTCProcedureThreadTestProfiles.GetAt(pDatabaseTCProcedureThreadTestProfiles.Find(szName)) : (CDatabaseTCProcedureThreadTestProfile *)NULL); )
		{
			for (Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_LOCATION)), szLocation), pDatabaseTCProcedureThreadTestProfile->SetLocation(szLocation); (pDatabaseTCProcedureThreadTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART) && !szLocation.IsEmpty(); )
			{
				pDatabaseTCProcedureThreadTestProfile->SetOptions((pDatabaseTCProcedureThreadTestProfile->GetOptions() & ~(TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART | TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTEP)) | TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEIMMEDIATELY);
				pDatabaseTCProcedureThreadTestProfile->SetDelay(CTimeSpan(0));
				break;
			}
			pDatabaseTCProcedureThread->SetProfiles(pDatabaseTCProcedureThreadTestProfiles);
			break;
		}
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION)->GetWindowText(szLocation); IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART) && !szLocation.IsEmpty(); )
		{
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY, TRUE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART, FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS_STATIC)->EnableWindow(FALSE);
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ADD)->EnableWindow((pDatabaseTCProcedureThreadTestProfiles.Find(szName) < 0 && !szName.IsEmpty() && (!szLocation.IsEmpty() || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART)) && m_pDatabaseTMParameters.GetSize() > 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP))) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	}
}

void CTCProcedurePropertiesDebugDialog::OnSelchangeWatchIdentifierTable()
{
	UINT  nStatus;
	CString  szType;
	ULONGLONG  nValue;
	CStringArray  szTables[2];
	CTMParameter  *pTMParameter;
	CTCParameter  *pTCParameter;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;

	if ((pDatabaseTMParameter = (!_tcsncmp((szType = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_TYPE)))), STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER), lstrlen(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TMPARAMETER)))) ? GetDatabase()->GetTMParameters()->GetAt(GetDatabase()->GetTMParameters()->Find(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_NAME))))) : (CDatabaseTMParameter *)NULL))
	{
		if ((pTMParameter = (pDatabaseTMParameter->GetCalTables(szTables[0], szTables[1]) > (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_GETCURSEL)) ? m_pTMParameters.GetAt(m_pTMParameters.Find(pDatabaseTMParameter->GetTag())) : (CTMParameter *)NULL) && pTMParameter->GetRawValue((INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE)), nValue, nStatus)) UpdateParameterValue(pTMParameter, nValue, (INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE)), nStatus, szTables[0].GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_GETCURSEL)));
		ShowWatchIdentifierProperties();
	}
	if ((pDatabaseTCParameter = (!_tcsncmp((szType = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_TYPE)))), STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER), lstrlen(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTYPE_TCPARAMETER)))) ? GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_NAME))))) : (CDatabaseTCParameter *)NULL))
	{
		if ((pTCParameter = m_pTCParameters.GetAt(m_pTCParameters.Find(pDatabaseTCParameter->GetTag()))) && pTCParameter->GetRawValue((INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE)), nValue, nStatus)) UpdateParameterValue(pTCParameter, nValue, (INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE)), nStatus);
		ShowWatchIdentifierProperties();
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE, CB_SETEDITSEL, (WPARAM)NULL, MAKELPARAM(0, -1));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->SetFocus();
}

void CTCProcedurePropertiesDebugDialog::OnSelchangeWatchIdentifierValue()
{
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET)->EnableWindow();
}

void CTCProcedurePropertiesDebugDialog::OnEditchangeTestProfileName()
{
	CString  szName;
	CString  szLocation;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->GetWindowText(szName);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_LOCATION)->GetWindowText(szLocation);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ADD)->EnableWindow((pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) >= 0 && pDatabaseTCProcedureThreadTestProfiles.Find(szName) < 0 && !szName.IsEmpty() && (!szLocation.IsEmpty() || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART)) && m_pDatabaseTMParameters.GetSize() > 0 && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_IMMEDIATELY) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART) || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP))) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	}
}

void CTCProcedurePropertiesDebugDialog::OnEditchangeWatchIdentifierValue()
{
	CString  szValue;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->GetWindowText(szValue);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET)->EnableWindow(!szValue.IsEmpty());
}

void CTCProcedurePropertiesDebugDialog::OnSpinchangeDelayAfterStart()
{
	CString  szName;
	CString  szOptions;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->GetWindowText(szName); (pDatabaseTCProcedureThreadTestProfile = (pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) > 0) ? pDatabaseTCProcedureThreadTestProfiles.GetAt(pDatabaseTCProcedureThreadTestProfiles.Find(szName)) : (CDatabaseTCProcedureThreadTestProfile *)NULL); )
		{
			szOptions.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEOPTION_EXECUTEDELAYEDAFTERSTART), (INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS)));
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_OPTIONS)), szOptions);
			pDatabaseTCProcedureThreadTestProfile->SetDelay(Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTART_SECONDS)));
			pDatabaseTCProcedureThread->SetProfiles(pDatabaseTCProcedureThreadTestProfiles);
			break;
		}
	}
}

void CTCProcedurePropertiesDebugDialog::OnSpinchangeDelayAfterStep()
{
	CString  szName;
	CString  szOptions;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pDatabaseTCProcedureThreadTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pDatabaseTCProcedureThreadTestProfiles;
	CHourglassCursor  cCursor;

	if ((pDatabaseTCProcedureThread = GetThread()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_NAME)->GetWindowText(szName); (pDatabaseTCProcedureThreadTestProfile = (pDatabaseTCProcedureThread->GetProfiles(pDatabaseTCProcedureThreadTestProfiles) > 0) ? pDatabaseTCProcedureThreadTestProfiles.GetAt(pDatabaseTCProcedureThreadTestProfiles.Find(szName)) : (CDatabaseTCProcedureThreadTestProfile *)NULL); )
		{
			szOptions.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILEOPTION_EXECUTEDELAYEDAFTERSTEP), (INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS)));
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILES, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGTESTPROFILESTITLEITEM_OPTIONS)), szOptions);
			pDatabaseTCProcedureThreadTestProfile->SetDelay(Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_TESTPROFILE_ACTIVATION_TIME_AFTERSTEP_SECONDS)));
			pDatabaseTCProcedureThread->SetProfiles(pDatabaseTCProcedureThreadTestProfiles);
			break;
		}
	}
}

void CTCProcedurePropertiesDebugDialog::OnSpinchangeWatchIdentifierSample()
{
	BOOL  bValue;
	UINT  nStatus;
	UINT  nIdentifier;
	UINT  nIdentifiers;
	CString  szValue;
	CString  szTable;
	CString  szFormat;
	CString  szIdentifier;
	ULONGLONG  nValue;
	CPtrArray  pIdentifiers;
	CUIntArray  nIdentifierTypes;
	CStringArray  szIdentifiers;
	CLongUIntArray  nIdentifierAttributes;
	CTMParameter  *pTMParameter;
	CTCParameter  *pTCParameter;

	if (Lock())
	{
		szIdentifiers.Copy(m_szIdentifiers);
		nIdentifierTypes.Copy(m_nIdentifierTypes);
		nIdentifierAttributes.Copy(m_nIdentifierAttributes);
		pIdentifiers.Copy(m_pIdentifiers);
		Unlock();
	}
	for (nIdentifier = 0, nIdentifiers = (INT)szIdentifiers.GetSize(), szIdentifier = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS)), FindColumnIndex(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSTITLEITEM_NAME))), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERS_TABLE_FORMAT), EMPTYSTRING, EMPTYSTRING); nIdentifier < nIdentifiers; nIdentifier++)
	{
		if (szIdentifiers.GetAt(nIdentifier) == szIdentifier) break;
		continue;
	}
	if (nIdentifier < nIdentifiers)
	{
		if ((pTMParameter = (nIdentifierTypes.GetAt(nIdentifier) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TMPARAMETER) ? m_pTMParameters.GetAt(m_pTMParameters.Find(szIdentifiers.GetAt(nIdentifier))) : (CTMParameter *)NULL))
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_SETCURSEL, (WPARAM)(((bValue = pTMParameter->GetRawValue((INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE)), nValue, nStatus, szTable))) ? SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_FINDSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)(szTable + szFormat)) : SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_GETCURSEL)));
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT, ((nStatus & TMPARAMETER_STATUS_NOLIMIT) || !bValue) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT, ((nStatus & TMPARAMETER_STATUS_HARDLIMIT) && bValue) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT, ((nStatus & TMPARAMETER_STATUS_SOFTLIMIT) && bValue) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT, ((nStatus & TMPARAMETER_STATUS_DELTALIMIT) && bValue) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT, ((nStatus & TMPARAMETER_STATUS_CONSISTENCYLIMIT) && bValue) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_VALID, ((nStatus & TMPARAMETER_STATUS_VALID) || !bValue) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_INVALID, ((nStatus & TMPARAMETER_STATUS_INVALID) && bValue) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_GOOD, ((nStatus & TMPARAMETER_STATUS_GOOD) || !bValue) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_QUALITY_BAD, ((nStatus & TMPARAMETER_STATUS_BAD) && bValue) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->SetWindowText((pTMParameter->GetValueAsText(GetDatabase(), (INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE)), nIdentifierAttributes.GetAt(nIdentifier), szValue, bValue, FALSE)) ? ((bValue) ? (szValue + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSVALUE_EXTRAPOLATED)) : szValue) : EMPTYSTRING);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET)->EnableWindow(!szValue.IsEmpty());
			SetTimer(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE, 0, NULL);
			return;
		}
		if ((pTCParameter = (nIdentifierTypes.GetAt(nIdentifier) == TCPROCEDUREPROCESS_IDENTIFIERTYPE_TCPARAMETER) ? m_pTCParameters.GetAt(m_pTCParameters.Find(szIdentifiers.GetAt(nIdentifier))) : (CTCParameter *)NULL))
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_SETCURSEL, (WPARAM)(((bValue = pTCParameter->GetRawValue((INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE)), nValue, nStatus))) ? SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_FINDSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)(szTable + szFormat)) : SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_TABLE, CB_GETCURSEL)));
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_NOLIMIT, ((nStatus & TCPARAMETER_STATUS_NOLIMIT) || !bValue) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_HARDLIMIT, ((nStatus & TCPARAMETER_STATUS_HARDLIMIT) && bValue) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_SOFTLIMIT, ((nStatus & TCPARAMETER_STATUS_SOFTLIMIT) && bValue) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_DELTALIMIT, ((nStatus & TCPARAMETER_STATUS_DELTALIMIT) && bValue) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_STATUS_CONSISTENCYLIMIT, FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE)->SetWindowText((pTCParameter->GetValueAsText(GetDatabase(), (INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_SAMPLE)), nIdentifierAttributes.GetAt(nIdentifier), szValue, bValue)) ? ((bValue) ? (szValue + STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_DEBUGIDENTIFIERSVALUE_EXTRAPOLATED)) : szValue) : EMPTYSTRING);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE_SET)->EnableWindow(!szValue.IsEmpty());
			SetTimer(IDC_TCPROCEDURE_PROPERTIES_DEBUG_WATCH_IDENTIFIERS_VALUE, 0, NULL);
			return;
		}
	}
}

BOOL CTCProcedurePropertiesDebugDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESDEBUGDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesDebugDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESDEBUGDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesCodeEditToolTip

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesCodeEditToolTip, CWnd)

BOOL CTCProcedurePropertiesCodeEditToolTip::Create(CWnd *pParentWnd, CONST POINT &point, LPCTSTR pszTitle, LPCTSTR pszText, BOOL bAutoDestroy)
{
	CPoint  pt(point);

	for (SetTitle(pszTitle), SetText(pszText), pParentWnd->ClientToScreen(&pt); CWnd::CreateEx(WS_EX_TOPMOST, AfxRegisterWndClass(CS_SAVEBITS | CS_DROPSHADOW | CS_NOCLOSE, (HCURSOR)(DWORD_PTR)GetClassLongPtr(GetSafeHwnd(), GCLP_HCURSOR)), EMPTYSTRING, WS_POPUP | WS_BORDER, pt.x, pt.y, 0, 0, pParentWnd->GetSafeHwnd(), (HMENU)NULL); )
	{
		if ((bAutoDestroy  &&  SetTimer(TCPROCEDUREPROPERTIESCODEEDIT_TOOLTIP_TIMERID, TCPROCEDUREPROPERTIESCODEEDIT_TOOLTIP_TIMEOUT, NULL)) || !bAutoDestroy)
		{
			pParentWnd->SetCapture();
			ShowWindow(SW_SHOWNA);
			return TRUE;
		}
		DestroyWindow();
		break;
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesCodeEditToolTip::Destroy()
{
	if (IsWindow(GetSafeHwnd()))
	{
		ReleaseCapture();
		DestroyWindow();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesCodeEditToolTip::SetTitleFont(CFont *pFont)
{
	LOGFONT  lfFont;

	if (pFont->GetLogFont(&lfFont) > 0 && ((!m_cFont[0].GetSafeHandle() || m_cFont[0].DeleteObject()) && m_cFont[0].CreateFontIndirect(&lfFont)))
	{
		Update();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesCodeEditToolTip::GetTitleFont(CFont *pFont) CONST
{
	LOGFONT  lfFont;

	return((m_cFont[0].GetObject(sizeof(LOGFONT), &lfFont) && pFont->CreateFontIndirect(&lfFont)) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesCodeEditToolTip::SetTextFont(CFont *pFont)
{
	LOGFONT  lfFont;

	if (pFont->GetLogFont(&lfFont) > 0 && ((!m_cFont[1].GetSafeHandle() || m_cFont[1].DeleteObject()) && m_cFont[1].CreateFontIndirect(&lfFont)))
	{
		Update();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesCodeEditToolTip::GetTextFont(CFont *pFont) CONST
{
	LOGFONT  lfFont;

	return((m_cFont[1].GetObject(sizeof(LOGFONT), &lfFont) && pFont->CreateFontIndirect(&lfFont)) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesCodeEditToolTip::SetTabstops(CONST CUIntArray &nTabs)
{
	m_nTabs.Copy(nTabs);
}

INT CTCProcedurePropertiesCodeEditToolTip::GetTabstops(CUIntArray &nTabs) CONST
{
	nTabs.Copy(m_nTabs);
	return((INT)nTabs.GetSize());
}

VOID CTCProcedurePropertiesCodeEditToolTip::SetTitle(LPCTSTR pszTitle)
{
	m_szTitle = pszTitle;
}

CString CTCProcedurePropertiesCodeEditToolTip::GetTitle() CONST
{
	return m_szTitle;
}

VOID CTCProcedurePropertiesCodeEditToolTip::SetText(LPCTSTR pszText)
{
	m_szText = pszText;
}

CString CTCProcedurePropertiesCodeEditToolTip::GetText() CONST
{
	return m_szText;
}

VOID CTCProcedurePropertiesCodeEditToolTip::Update()
{
	Update(m_szTitle, m_szText, TRUE);
}
VOID CTCProcedurePropertiesCodeEditToolTip::Update(LPCTSTR pszTitle, LPCTSTR pszText, BOOL bForced)
{
	CRect  rToolTip;

	if (IsWindow(GetSafeHwnd()) && m_cFont[0].GetSafeHandle() && m_cFont[1].GetSafeHandle() && (GetTitle() != pszTitle || GetText() != pszText || bForced))
	{
		for (CalcTabstops((m_szTitle = pszTitle), (m_szText = pszText)), GetWindowRect(rToolTip); rToolTip.IsRectEmpty(); )
		{
			rToolTip.InflateRect(0, 0, 1, 1);
			MoveWindow(rToolTip);
			break;
		}
		Invalidate(FALSE);
	}
}

VOID CTCProcedurePropertiesCodeEditToolTip::CalcTabstops(LPCTSTR pszTitle, LPCTSTR pszText)
{
	INT  nPos;
	CDC  *pDC;
	CFont  *pOldFont;
	CString  szTabstop;
	CUIntArray  nTabs;
	TEXTMETRIC  tmFont;

	if ((pDC = GetDC()))
	{
		if ((pOldFont = pDC->SelectObject(&m_cFont[1])))
		{
			for (nPos = CString(pszText).Find(TAB); nPos >= 0; szTabstop = CString(pszText).GetAt(nPos--) + szTabstop)
			{
				if (CString(pszText).GetAt(nPos) != EOL) continue;
				break;
			}
			if (!szTabstop.IsEmpty())
			{
				nTabs.SetAtGrow(0, CalcMargin().cx + pDC->GetTextExtent(szTabstop.Left(szTabstop.GetLength() - 1) + SPACE).cx);
				SetTabstops(nTabs);
			}
			if (!GetTabstops(nTabs))
			{
				if (pDC->GetTextMetrics(&tmFont))
				{
					nTabs.SetAtGrow(0, tmFont.tmMaxCharWidth);
					SetTabstops(nTabs);
				}
			}
			pDC->SelectObject(pOldFont);
		}
		ReleaseDC(pDC);
	}
}

CSize CTCProcedurePropertiesCodeEditToolTip::CalcExtent(LPCTSTR pszTitle, LPCTSTR pszText, CPoint &ptTitle, CPoint &ptText)
{
	INT  nPos;
	CDC  *pDC;
	CRect  rText;
	CRect  rTitle;
	CSize  sizeText;
	CFont  *pOldFont;
	CString  szTitle;
	CString  szText;
	TEXTMETRIC  tmFont;

	if ((pDC = GetDC()))
	{
		rText.SetRectEmpty();
		rTitle.SetRectEmpty();
		if (lstrlen(pszTitle) > 0 || lstrlen(pszText) > 0)
		{
			if ((pOldFont = pDC->SelectObject(&m_cFont[0])))
			{
				if (pDC->GetTextMetrics((LPTEXTMETRIC)&tmFont))
				{
					for (szTitle = pszTitle; !szTitle.IsEmpty(); )
					{
						if ((nPos = szTitle.Find(EOL)) >= 0)
						{
							sizeText = pDC->GetTabbedTextExtent(szTitle.Left(nPos), (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData());
							rTitle.right = max(sizeText.cx, rTitle.right);
							rTitle.bottom += tmFont.tmHeight;
							szTitle = szTitle.Mid(nPos + 1);
							continue;
						}
						sizeText = pDC->GetTabbedTextExtent(szTitle, (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData());
						rTitle.right = max(sizeText.cx, rTitle.right);
						rTitle.bottom += tmFont.tmHeight;
						break;
					}
				}
				pDC->SelectObject(pOldFont);
			}
			if ((pOldFont = pDC->SelectObject(&m_cFont[1])))
			{
				if (pDC->GetTextMetrics((LPTEXTMETRIC)&tmFont))
				{
					for (szText = pszText; !szText.IsEmpty(); )
					{
						if ((nPos = szText.Find(EOL)) >= 0)
						{
							sizeText = pDC->GetTabbedTextExtent(szText.Left(nPos), (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData());
							rText.right = max(sizeText.cx, rText.right);
							rText.bottom += tmFont.tmHeight;
							szText = szText.Mid(nPos + 1);
							continue;
						}
						sizeText = pDC->GetTabbedTextExtent(szText, (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData());
						rText.right = max(sizeText.cx, rText.right);
						rText.bottom += tmFont.tmHeight;
						break;
					}
				}
				pDC->SelectObject(pOldFont);
			}
			ReleaseDC(pDC);
			ptTitle = ptText = CalcMargin();
			ptText.y = ptText.y + rTitle.Height();
			return CSize(max(rTitle.Width(), rText.Width()) + 2 * (ptTitle.x + 1), rTitle.Height() + rText.Height() + 2 * (ptTitle.y + 1));
		}
		ReleaseDC(pDC);
	}
	return CSize(0, 0);
}

CSize CTCProcedurePropertiesCodeEditToolTip::CalcMargin()
{
	CDC  *pDC;
	CFont  *pOldFont;
	CSize  sizeMargin;
	TEXTMETRIC  tmFont;

	for (sizeMargin.cx = sizeMargin.cy = 0; (pDC = GetDC()); )
	{
		if ((pOldFont = pDC->SelectObject(&m_cFont[0])))
		{
			if (pDC->GetTextMetrics(&tmFont))
			{
				sizeMargin.cx = tmFont.tmAveCharWidth / 2;
				sizeMargin.cy = tmFont.tmHeight / 6;
			}
			pDC->SelectObject(pOldFont);
		}
		if ((pOldFont = pDC->SelectObject(&m_cFont[1])))
		{
			if (pDC->GetTextMetrics(&tmFont))
			{
				sizeMargin.cx = max(tmFont.tmAveCharWidth / 2, sizeMargin.cx);
				sizeMargin.cy = max(tmFont.tmHeight / 6, sizeMargin.cy);
			}
			pDC->SelectObject(pOldFont);
		}
		ReleaseDC(pDC);
		break;
	}
	return sizeMargin;
}

CString CTCProcedurePropertiesCodeEditToolTip::TranslateText(LPCTSTR pszText) CONST
{
	INT  nPos;
	CString  szText;

	for (szText = pszText; (nPos = szText.Find(CString(CR) + CString(EOL))) >= 0; )
	{
		szText = szText.Left(nPos) + szText.Mid(nPos + 1);
		continue;
	}
	return szText;
}

VOID CTCProcedurePropertiesCodeEditToolTip::DrawContent(CDC *pDC)
{
	INT  nPos;
	INT  nBkgndMode;
	CRect  rToolTip;
	CSize  sizeToolTip;
	CSize  sizeToolText;
	CFont  *pOldFont;
	CPoint  ptText;
	CPoint  ptTitle;
	CBrush  cBkgndBrush;
	CString  szText;
	CString  szTitle;
	COLORREF  nOldColor;
	TEXTMETRIC  tmFont;

	GetWindowRect(rToolTip);
	sizeToolTip = CalcExtent(TranslateText(GetTitle()), TranslateText(GetText()), ptTitle, ptText);
	rToolTip.left = min(rToolTip.left, GetSystemMetrics(SM_CXVIRTUALSCREEN) - GetSystemMetrics(SM_CXFRAME) - sizeToolTip.cx);
	rToolTip.top = (rToolTip.top < GetSystemMetrics(SM_CYVIRTUALSCREEN) - GetSystemMetrics(SM_CYFRAME) - sizeToolTip.cy) ? rToolTip.top : (rToolTip.top - sizeToolTip.cy - 1);
	rToolTip.right = rToolTip.left + sizeToolTip.cx;
	rToolTip.bottom = rToolTip.top + sizeToolTip.cy;
	MoveWindow(rToolTip.left, rToolTip.top, rToolTip.Width(), rToolTip.Height());
	if (cBkgndBrush.CreateSysColorBrush(COLOR_INFOBK))
	{
		nBkgndMode = pDC->SetBkMode(TRANSPARENT);
		nOldColor = pDC->SetTextColor(GetSysColor(COLOR_INFOTEXT));
		if ((pOldFont = pDC->SelectObject(&m_cFont[0])) != (CFont *)NULL)
		{
			for (szTitle = TranslateText(GetTitle()); !szTitle.IsEmpty(); )
			{
				if ((nPos = szTitle.Find(EOL)) >= 0)
				{
					if (pDC->GetTextMetrics(&tmFont))
					{
						sizeToolText = pDC->GetTextExtent(szTitle.Left(nPos));
						pDC->FillRect(CRect(ptTitle.x, ptTitle.y, rToolTip.Width(), ptTitle.y + sizeToolText.cy), &cBkgndBrush);
						pDC->TabbedTextOut(ptTitle.x, ptTitle.y, szTitle.Left(nPos), (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData(), 0);
						szTitle = szTitle.Mid(nPos + 1);
						ptTitle.y += tmFont.tmHeight;
					}
					continue;
				}
				sizeToolText = pDC->GetTextExtent(szTitle);
				pDC->FillRect(CRect(ptTitle.x, ptTitle.y, rToolTip.Width(), ptTitle.y + sizeToolText.cy), &cBkgndBrush);
				pDC->TabbedTextOut(ptTitle.x, ptTitle.y, szTitle, (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData(), 0);
				break;
			}
			pDC->SelectObject(pOldFont);
		}
		if ((pOldFont = pDC->SelectObject(&m_cFont[1])))
		{
			for (szText = TranslateText(GetText()); !szText.IsEmpty(); )
			{
				if ((nPos = szText.Find(EOL)) >= 0)
				{
					if (pDC->GetTextMetrics(&tmFont))
					{
						sizeToolText = pDC->GetTextExtent(szText.Left(nPos));
						pDC->FillRect(CRect(ptText.x, ptText.y, rToolTip.Width(), ptText.y + sizeToolText.cy), &cBkgndBrush);
						pDC->TabbedTextOut(ptText.x, ptText.y, szText.Left(nPos), (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData(), 0);
						szText = szText.Mid(nPos + 1);
						ptText.y += tmFont.tmHeight;
					}
					continue;
				}
				sizeToolText = pDC->GetTextExtent(szText);
				pDC->FillRect(CRect(ptText.x, ptText.y, rToolTip.Width(), ptText.y + sizeToolText.cy), &cBkgndBrush);
				pDC->TabbedTextOut(ptText.x, ptText.y, szText, (INT)m_nTabs.GetSize(), (LPINT)m_nTabs.GetData(), 0);
				break;
			}
			pDC->SelectObject(pOldFont);
		}
		pDC->SetTextColor(nOldColor);
		pDC->SetBkMode(nBkgndMode);
	}
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesCodeEditToolTip, CWnd)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesCodeEditToolTip)
	ON_WM_CREATE()
	ON_WM_ERASEBKGND()
	ON_WM_PAINT()
	ON_WM_TIMER()
	ON_WM_DESTROY()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesCodeEditToolTip message handlers

int CTCProcedurePropertiesCodeEditToolTip::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	CRect  rToolTip;
	CSize  sizeToolTip;
	CPoint  ptToolTip[2];
	LOGFONT  lfFont[2];
	CFontTools  cFontTools[2] = { &lfFont[0],&lfFont[1] };

	if (CWnd::OnCreate(lpCreateStruct) != -1)
	{
		for (lfFont[0].lfWeight = FW_BOLD; (m_cFont[0].GetSafeHandle() || m_cFont[0].CreateFontIndirect(&lfFont[0])) && (m_cFont[1].GetSafeHandle() || m_cFont[1].CreateFontIndirect(&lfFont[1])); )
		{
			for (CalcTabstops(TranslateText(GetTitle()), TranslateText(GetText())), sizeToolTip = CalcExtent(TranslateText(GetTitle()), TranslateText(GetText()), ptToolTip[0], ptToolTip[1]); sizeToolTip.cx > 0 && sizeToolTip.cy > 0; )
			{
				rToolTip.top = (lpCreateStruct->y + GetSystemMetrics(SM_CYCURSOR) < GetSystemMetrics(SM_CYVIRTUALSCREEN) - GetSystemMetrics(SM_CYFRAME) - sizeToolTip.cy) ? (lpCreateStruct->y + GetSystemMetrics(SM_CYCURSOR)) : (lpCreateStruct->y - sizeToolTip.cy - 1);
				rToolTip.left = min(lpCreateStruct->x, GetSystemMetrics(SM_CXVIRTUALSCREEN) - GetSystemMetrics(SM_CXFRAME) - sizeToolTip.cx);
				rToolTip.right = rToolTip.left + sizeToolTip.cx;
				rToolTip.bottom = rToolTip.top + sizeToolTip.cy;
				MoveWindow(rToolTip);
				return 0;
			}
			break;
		}
	}
	return -1;
}

BOOL CTCProcedurePropertiesCodeEditToolTip::OnEraseBkgnd(CDC *pDC)
{
	CRect  rToolTip;
	CBrush  cBkgndBrush;

	for (GetClientRect(rToolTip); cBkgndBrush.CreateSysColorBrush(COLOR_INFOBK); )
	{
		pDC->FillRect(rToolTip, &cBkgndBrush);
		cBkgndBrush.DeleteObject();
		return TRUE;
	}
	return CWnd::OnEraseBkgnd(pDC);
}

void CTCProcedurePropertiesCodeEditToolTip::OnPaint()
{
	CPaintDC  cDC(this);

	DrawContent(&cDC);
}

void CTCProcedurePropertiesCodeEditToolTip::OnTimer(UINT_PTR nEventID)
{
	Destroy();
}

void CTCProcedurePropertiesCodeEditToolTip::OnDestroy()
{
	m_szText.Empty();
	m_szTitle.Empty();
	m_nTabs.RemoveAll();
	m_cFont[0].DeleteObject();
	m_cFont[1].DeleteObject();
	KillTimer(TCPROCEDUREPROPERTIESCODEEDIT_TOOLTIP_TIMERID);
	CWnd::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesCodeEdit

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesCodeEdit, CTPLCodeEdit)

CTCProcedurePropertiesCodeEdit::CTCProcedurePropertiesCodeEdit() : CTPLCodeEdit()
{
	CFontTools  cFontTools(&m_cCodeFont);

	m_nCodeLines = 0;
	m_sizeCodeFont.cx = 0;
	m_sizeCodeFont.cy = 0;
	m_ptCodeScroll.x = 0;
	m_ptCodeScroll.y = 0;
	m_bCodeProtection = FALSE;
	m_nTimerID = 0;
}

BOOL CTCProcedurePropertiesCodeEdit::Create(CWnd *pParentWnd, UINT nID)
{
	CRect  rEdit;

	if (CTPLCodeEdit::SubclassDlgItem(nID, pParentWnd))
	{
		for (GetRect(rEdit), rEdit.DeflateRect(CalcMargin().Width() + rEdit.left, 0, 0, 0); rEdit.Width() >= 0; )
		{
			SetRect(rEdit);
			break;
		}
		SetFont(&m_cCodeFont);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesCodeEdit::SetCode(CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	CString  szCode;

	for (GetWindowText(szCode); pDatabaseTCProcedure->GetSourceCode() != szCode; )
	{
		SetWindowText(pDatabaseTCProcedure->GetSourceCode());
		break;
	}
	return TRUE;
}

BOOL CTCProcedurePropertiesCodeEdit::GetCode(CDatabaseTCProcedure *pDatabaseTCProcedure) CONST
{
	CString  szCode;

	GetWindowText(szCode);
	pDatabaseTCProcedure->SetSourceCode(szCode);
	return TRUE;
}

INT CTCProcedurePropertiesCodeEdit::GetCodeSize() CONST
{
	return GetTextLength();
}

VOID CTCProcedurePropertiesCodeEdit::SetBreakpoints(CONST CStringArray &szBreakpoints, CONST CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints)
{
	m_szBreakpoints.Copy(szBreakpoints);
	m_pDatabaseTCProcedureThreadBreakpoints.Copy(&pDatabaseTCProcedureThreadBreakpoints);
	DrawMargin();
}

INT CTCProcedurePropertiesCodeEdit::GetBreakpoints(CStringArray &szBreakpoints, CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints) CONST
{
	szBreakpoints.Copy(m_szBreakpoints);
	pDatabaseTCProcedureThreadBreakpoints.Copy(&m_pDatabaseTCProcedureThreadBreakpoints);
	return((INT)szBreakpoints.GetSize());
}

VOID CTCProcedurePropertiesCodeEdit::UpdateBreakpoints()
{
	INT  nBreakpoint[2];
	INT  nBreakpoints[2];
	CStringArray  szBreakpoints;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;

	for (nBreakpoint[0] = 0, nBreakpoints[0] = (INT)m_szBreakpoints.GetSize(); nBreakpoint[0] < nBreakpoints[0]; nBreakpoint[0]++)
	{
		for (nBreakpoint[1] = 0, nBreakpoints[1] = (INT)szBreakpoints.GetSize(); nBreakpoint[1] < nBreakpoints[1]; nBreakpoint[1]++)
		{
			if (m_szBreakpoints.GetAt(nBreakpoint[0]) == szBreakpoints.GetAt(nBreakpoint[1])) break;
			continue;
		}
		if (nBreakpoint[1] == nBreakpoints[1])
		{
			szBreakpoints.Add(m_szBreakpoints.GetAt(nBreakpoint[0]));
			continue;
		}
	}
	for (nBreakpoint[0] = 0, nBreakpoints[0] = (INT)szBreakpoints.GetSize(); nBreakpoint[0] < nBreakpoints[0]; nBreakpoint[0]++)
	{
		for (nBreakpoint[1] = 0, nBreakpoints[1] = (INT)m_szBreakpoints.GetSize(), pDatabaseTCProcedureThreadBreakpoints.RemoveAll(); nBreakpoint[1] < nBreakpoints[1]; nBreakpoint[1]++)
		{
			if (szBreakpoints.GetAt(nBreakpoint[0]) == m_szBreakpoints.GetAt(nBreakpoint[1]))
			{
				if ((pDatabaseTCProcedureThreadBreakpoint = new CDatabaseTCProcedureThreadBreakpoint))
				{
					pDatabaseTCProcedureThreadBreakpoint->Copy(m_pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint[1]));
					if (pDatabaseTCProcedureThreadBreakpoints.Add(pDatabaseTCProcedureThreadBreakpoint) >= 0) continue;
					delete pDatabaseTCProcedureThreadBreakpoint;
				}
			}
		}
		GetParent()->UpdateBreakpoints(szBreakpoints.GetAt(nBreakpoint[0]), pDatabaseTCProcedureThreadBreakpoints);
	}
	for (pDatabaseTCProcedureThreadBreakpoints.RemoveAll(); !nBreakpoints[0]; )
	{
		GetParent()->UpdateBreakpoints(EMPTYSTRING, pDatabaseTCProcedureThreadBreakpoints);
		break;
	}
}

VOID CTCProcedurePropertiesCodeEdit::UpdateExecutionpoint(LPCTSTR pszThread, UINT nState, UINT nLine)
{
	INT  nThread;
	INT  nThreads;

	if (Lock())
	{
		for (nThread = 0, nThreads = (INT)m_szExecutionThreads.GetSize(); nThread < nThreads; nThread++)
		{
			if (!m_szExecutionThreads.GetAt(nThread).Compare(pszThread)) break;
			continue;
		}
		if (nLine != 0)
		{
			if ((nThread < m_szExecutionThreads.GetSize() && !m_szExecutionThreads.GetAt(nThread).IsEmpty()) || nLine != (UINT)-1)
			{
				m_szExecutionThreads.SetAtGrow(nThread, pszThread);
				m_nExecutionStates.SetAtGrow(nThread, nState);
				m_nExecutionLines.SetAtGrow(nThread, (nLine == (UINT)-1) ? m_nExecutionLines.GetAt(nThread) : nLine);
			}
		}
		else if (nThread < m_szExecutionThreads.GetSize())
		{
			m_szExecutionThreads.RemoveAt(nThread);
			m_nExecutionStates.RemoveAt(nThread);
			m_nExecutionLines.RemoveAt(nThread);
		}
		for (nThread = 0, nThreads = (INT)m_szExecutionThreads.GetSize(); nThread < nThreads; nThread++)
		{
			if ((m_nExecutionStates.GetAt(nThread) & TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING) != TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING) break;
			continue;
		}
		Protect(nThread < nThreads);
		SetTimer(TCPROCEDUREPROPERTIESCODEEDIT_UPDATE_TIMERID, TCPROCEDUREPROPERTIESCODEEDIT_UPDATE_TIMEOUT, NULL);
		Unlock();
	}
}

BOOL CTCProcedurePropertiesCodeEdit::SetFont(CFont *pFont, BOOL bRedraw)
{
	CDC  *pDC;
	CFont  *pOldFont;
	TEXTMETRIC  tmFont;
	LOGFONT  lfFont;

	if (pFont->GetLogFont(&lfFont) > 0)
	{
		for (m_cCodeFont.DeleteObject(); m_cCodeFont.CreateFontIndirect(&lfFont); )
		{
			for (CTPLCodeEdit::SetFont(&m_cCodeFont, bRedraw); (pDC = GetDC()); )
			{
				if ((pOldFont = pDC->SelectObject(&m_cCodeFont)))
				{
					if (pDC->GetTextMetrics(&tmFont))
					{
						m_sizeCodeFont.cx = tmFont.tmAveCharWidth;
						m_sizeCodeFont.cy = tmFont.tmHeight;
					}
					pDC->SelectObject(pOldFont);
				}
				ReleaseDC(pDC);
				break;
			}
			DrawMargin();
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesCodeEdit::GetFont(CFont *pFont) CONST
{
	LOGFONT  lfFont;

	return((m_cCodeFont.GetObject(sizeof(LOGFONT), &lfFont) > 0 && pFont->CreateFontIndirect(&lfFont)) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesCodeEdit::Protect(BOOL bProtect)
{
	m_bCodeProtection = bProtect;
}

BOOL CTCProcedurePropertiesCodeEdit::IsProtected() CONST
{
	return m_bCodeProtection;
}

CTCProcedurePropertiesCodeDialog *CTCProcedurePropertiesCodeEdit::GetParent() CONST
{
	return((CTCProcedurePropertiesCodeDialog *)CTPLCodeEdit::GetParent());
}

VOID CTCProcedurePropertiesCodeEdit::DrawMargin()
{
	CDC  *pDC;

	if ((pDC = GetDC()))
	{
		DrawMargin(pDC);
		ReleaseDC(pDC);
	}
}
VOID CTCProcedurePropertiesCodeEdit::DrawMargin(CDC *pDC)
{
	CDC  cDC;
	CRect  rMargin;
	CBitmap  cBitmap;
	CBitmap  *pOldBitmap;

	rMargin = CalcMargin();
	if (cDC.CreateCompatibleDC(pDC))
	{
		if (cBitmap.CreateCompatibleBitmap(pDC, rMargin.Width(), rMargin.Height()))
		{
			if ((pOldBitmap = cDC.SelectObject(&cBitmap)) != (CBitmap *)NULL)
			{
				cDC.FillSolidRect(rMargin, GetSysColor(COLOR_3DFACE));
				cDC.DrawEdge(rMargin, EDGE_ETCHED, BF_RIGHT);
				DrawBreakpoints(&cDC);
				DrawExecutionpoint(&cDC);
				pDC->BitBlt(0, 0, rMargin.Width(), rMargin.Height(), &cDC, 0, 0, SRCCOPY);
				cDC.SelectObject(pOldBitmap);
			}
			cBitmap.DeleteObject();
		}
		cDC.DeleteDC();
	}
}

VOID CTCProcedurePropertiesCodeEdit::DrawBreakpoints(CDC *pDC)
{
	INT  nPoint;
	INT  nPoints;
	CPen  *pOldPen;
	CPen  cBreakpointPen;
	CRect  rBreakpoint;
	CBrush  *pOldBrush;
	CBrush  cBreakpointBrush;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nPoint = 0, nPoints = (INT)m_pDatabaseTCProcedureThreadBreakpoints.GetSize(); nPoint < nPoints; nPoint++)
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = m_pDatabaseTCProcedureThreadBreakpoints.GetAt(nPoint)) != (CDatabaseTCProcedureThreadBreakpoint *)NULL)
		{
			for (rBreakpoint = CalcBreakpointPosition(pDatabaseTCProcedureThreadBreakpoint->GetLine()); pDatabaseTCProcedureThreadBreakpoint->GetLine() > 0; )
			{
				if (cBreakpointBrush.CreateSolidBrush((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_DISABLED) ? GetSysColor(COLOR_3DLIGHT) : VGA_COLOR_RED))
				{
					if (cBreakpointPen.CreatePen(PS_SOLID, 1, VGA_COLOR_RED))
					{
						if ((pOldPen = pDC->SelectObject(&cBreakpointPen)))
						{
							if ((pOldBrush = pDC->SelectObject(&cBreakpointBrush)))
							{
								pDC->Ellipse(rBreakpoint);
								pDC->SelectObject(pOldBrush);
							}
							pDC->SelectObject(pOldPen);
						}
						cBreakpointPen.DeleteObject();
					}
					cBreakpointBrush.DeleteObject();
				}
				break;
			}
		}
	}
}

VOID CTCProcedurePropertiesCodeEdit::DrawExecutionpoint(CDC *pDC)
{
	INT  nPoint;
	INT  nPoints;
	CPen  *pOldPen;
	CPen  cExecutionpointPen;
	CRect  rExecutionpoint;
	CBrush  *pOldBrush;
	CBrush  cExecutionpointBrush;
	CPoint  ptExecutionpoint[7];
	CUIntArray  nExecutionLines;
	CUIntArray  nExecutionStates;

	if (Lock())
	{
		nExecutionLines.Copy(m_nExecutionLines);
		nExecutionStates.Copy(m_nExecutionStates);
		Unlock();
	}
	for (nPoint = 0, nPoints = (INT)nExecutionLines.GetSize(); nPoint < nPoints; nPoint++)
	{
		for (rExecutionpoint = CalcExecutionpointPosition(nExecutionLines.GetAt(nPoint)); !rExecutionpoint.IsRectEmpty(); )
		{
			if (cExecutionpointBrush.CreateSolidBrush((nExecutionStates.GetAt(nPoint) & TCPROCEDURETHREAD_RUNNINGSTATE_RUNNING) ? VGA_COLOR_GREEN : (((nExecutionStates.GetAt(nPoint) & TCPROCEDURETHREAD_ACTIONSTATE_ABORT) != TCPROCEDURETHREAD_ACTIONSTATE_ABORT) ? VGA_COLOR_LTYELLOW : VGA_COLOR_LTRED)))
			{
				if (cExecutionpointPen.CreatePen(PS_SOLID, 1, VGA_COLOR_BLACK))
				{
					if ((pOldPen = pDC->SelectObject(&cExecutionpointPen)))
					{
						if ((pOldBrush = pDC->SelectObject(&cExecutionpointBrush)))
						{
							ptExecutionpoint[0].x = rExecutionpoint.right;
							ptExecutionpoint[0].y = rExecutionpoint.CenterPoint().y;
							ptExecutionpoint[1].x = rExecutionpoint.CenterPoint().x;
							ptExecutionpoint[1].y = rExecutionpoint.top;
							ptExecutionpoint[2].x = ptExecutionpoint[1].x;
							ptExecutionpoint[2].y = ptExecutionpoint[1].y + rExecutionpoint.Height() / 4;
							ptExecutionpoint[3].x = rExecutionpoint.left;
							ptExecutionpoint[3].y = ptExecutionpoint[2].y;
							ptExecutionpoint[4].x = ptExecutionpoint[3].x;
							ptExecutionpoint[4].y = rExecutionpoint.bottom - rExecutionpoint.Height() / 4;
							ptExecutionpoint[5].x = ptExecutionpoint[2].x;
							ptExecutionpoint[5].y = ptExecutionpoint[4].y;
							ptExecutionpoint[6].x = ptExecutionpoint[5].x;
							ptExecutionpoint[6].y = rExecutionpoint.bottom;
							pDC->Polygon(ptExecutionpoint, sizeof(ptExecutionpoint) / sizeof(CPoint));
							pDC->SelectObject(pOldBrush);
						}
						pDC->SelectObject(pOldPen);
					}
					cExecutionpointPen.DeleteObject();
				}
				cExecutionpointBrush.DeleteObject();
			}
			break;
		}
	}
}

CString CTCProcedurePropertiesCodeEdit::CheckLine(UINT nLine) CONST
{
	INT  nPos[6];
	INT  nLength;
	INT  nKeyword;
	INT  nKeywords;
	CString  szLine;
	CString  szCode;
	CString  szKeyword;
	CString  szBreakpoint;

	if (GetLine(nLine, szLine.GetBufferSetLength(max(LineLength(LineIndex(nLine)), sizeof(UINT) / sizeof(TCHAR))), max(LineLength(LineIndex(nLine)), sizeof(UINT) / sizeof(TCHAR)) + 1) > 0)
	{
		for (nPos[0] = 0, GetWindowText(szCode), nLength = LineLength(LineIndex(nLine)), szLine.ReleaseBuffer(nLength); nPos[0] < nLength; nPos[0]++)
		{
			if (_istalpha(szLine.GetAt(nPos[0])) || szLine.GetAt(nPos[0]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE))
			{
				if (szLine.Mid(nPos[0]) == (szKeyword = STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_ELSE)) || !_tcsncmp(szLine.Mid(nPos[0]), szKeyword, lstrlen((szKeyword = CString(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_ELSE)) + SPACE))) || !_tcsncmp(szLine.Mid(nPos[0]), szKeyword, lstrlen((szKeyword = CString(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_ELSE)) + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_KEYWORDEXTENSION)))))
				{
					szLine = szLine.Mid(nPos[0] + szKeyword.GetLength());
					nLength = szLine.GetLength();
					nPos[0] = -1;
					continue;
				}
				if (!_tcsncmp(szLine.Mid(nPos[0]), szKeyword, lstrlen((szKeyword = CString(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_CASE))))) || !_tcsncmp(szLine.Mid(nPos[0]), szKeyword, lstrlen((szKeyword = CString(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_DEFAULT))))))
				{
					for (nPos[0] += szKeyword.GetLength(); nPos[0] < nLength; nPos[0]++)
					{
						if (!_istspace(szLine.GetAt(nPos[0]))) break;
						continue;
					}
					for (; nPos[0] < nLength; nPos[0]++)
					{
						if (!_istalnum(szLine.GetAt(nPos[0])) && szLine.GetAt(nPos[0]) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE)) break;
						continue;
					}
					for (; nPos[0] < nLength; nPos[0]++)
					{
						if (!_istspace(szLine.GetAt(nPos[0]))) break;
						continue;
					}
					if (nPos[0] < nLength  &&  szLine.GetAt(nPos[0]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_KEYWORDEXTENSION))
					{
						szLine = szLine.Mid(nPos[0] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_KEYWORDEXTENSION)));
						nLength = szLine.GetLength();
						nPos[0] = -1;
						continue;
					}
					break;
				}
				if (!_tcsncmp(szLine.Mid(nPos[0]), szKeyword, lstrlen((szKeyword = STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_SWITCH)))))
				{
					for (nPos[0] += szKeyword.GetLength(); nPos[0] < nLength; nPos[0]++)
					{
						if (!_istspace(szLine.GetAt(nPos[0]))) break;
						continue;
					}
					if (nPos[0] < nLength  &&  szLine.GetAt(nPos[0]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINARGUMENTS))
					{
						for (nPos[0] += lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINARGUMENTS)); nPos[0] < nLength; nPos[0]++)
						{
							if (szLine.GetAt(nPos[0]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDARGUMENTS)) break;
							continue;
						}
						if (nPos[0] < nLength)
						{
							szLine = szLine.Mid(nPos[0]);
							nLength = szLine.GetLength();
							nPos[0] = -1;
							continue;
						}
					}
				}
				break;
			}
			if ((nPos[1] = nPos[2] = szLine.Mid(nPos[0]).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS))) >= 0)
			{
				for (nPos[1] -= lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS)); nPos[0] + nPos[1] >= 0; nPos[1]--)
				{
					if (szLine.Mid(nPos[0] + nPos[1], lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINCOMMENTS))) == STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINCOMMENTS))
					{
						szLine = szLine.Left(nPos[0] + nPos[1]) + szLine.Mid(nPos[0] + nPos[2] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS)));
						nLength = szLine.GetLength();
						nPos[0] = -1;
						break;
					}
				}
				if (nPos[0] + nPos[1] < 0 && nPos[0] >= 0)
				{
					szLine.Empty();
					nLength = 0;
					break;
				}
				continue;
			}
			if (szLine.GetAt(nPos[0]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR)) break;
		}
		for (nPos[0] = (nPos[0] == nLength) ? nPos[0] : 0; nPos[0] < nLength; nPos[0]++)
		{
			if (szLine.Mid(nPos[0], lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_LINECOMMENTS))) == STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_LINECOMMENTS))
			{
				nPos[0] = nLength;
				break;
			}
			if (!_istspace(szLine.GetAt(nPos[0]))) break;
		}
		if (nPos[0] < nLength)
		{
			for (nPos[0] = 0, nPos[1] = -1, nPos[4] = LineIndex(nLine) + nLine; (nPos[0] = FindKeyword(szCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_THREAD), max(nPos[1], 0))) >= 0 && nPos[0] + max(nPos[1], 0) < nPos[4]; )
			{
				nPos[1] = nPos[0] + max(nPos[1], 0) + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_THREAD));
				continue;
			}
			for (nPos[5] = (nPos[1] < 0) ? (nPos[0] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_THREAD))) : nPos[1], szBreakpoint.Empty(); nPos[5] < szCode.GetLength() && (nPos[0] >= 0 || nPos[1] >= 0); nPos[5]++)
			{
				if (szCode.GetAt(nPos[5]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER))
				{
					if (szBreakpoint.GetLength() >= lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER)))
					{
						szBreakpoint = szBreakpoint.Mid(lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER)));
						break;
					}
					szBreakpoint += szCode.GetAt(nPos[5]);
					continue;
				}
				if (!_istspace(szCode.GetAt(nPos[5])) || !szBreakpoint.IsEmpty())
				{
					if (szBreakpoint.GetLength() > 0)
					{
						szBreakpoint += szCode.GetAt(nPos[5]);
						continue;
					}
					break;
				}
			}
			for (nPos[0] = 0, nPos[2] = -1; (nPos[0] = FindKeyword(szCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_BEGIN), max(nPos[2], 0))) >= 0 && nPos[0] + max(nPos[2], 0) < nPos[4]; )
			{
				nPos[2] = nPos[0] + max(nPos[2], 0) + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_BEGIN));
				continue;
			}
			for (nPos[0] = 0, nPos[3] = -1; (nPos[0] = szCode.Mid(max(nPos[3], 0)).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINCOMMENTS))) >= 0 && nPos[0] + max(nPos[3], 0) < nPos[4]; )
			{
				nPos[3] = nPos[0] + max(nPos[3], 0) + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINCOMMENTS));
				continue;
			}
			for (nKeyword = MINTELECOMMANDPROCEDURELANGUAGEKEYWORD, nKeywords = MAXTELECOMMANDPROCEDURELANGUAGEKEYWORD; nKeyword <= nKeywords; nKeyword++)
			{
				for (nPos[5] = 0; nPos[5] < nLength; nPos[5]++)
				{
					if (!_istspace(szLine.GetAt(nPos[5]))) break;
					continue;
				}
				if (!szLine.Mid(nPos[5]).Find(CString(STRING(nKeyword)) + SPACE) || szLine.Mid(nPos[5]) == STRING(nKeyword)) break;
				continue;
			}
			return((nPos[1] < nPos[2] && nPos[1] >= 0 && (nPos[3] < 0 || szCode.Mid(nPos[3]).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS)) < nLength - nPos[3] + nPos[4] - lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS))) && nKeyword == nKeywords + 1) ? szBreakpoint : EMPTYSTRING);
		}
	}
	return EMPTYSTRING;
}

INT CTCProcedurePropertiesCodeEdit::FindKeyword(LPCTSTR pszSourceCode, LPCTSTR pszKeyword, INT nPos) CONST
{
	LPCTSTR  pPos;

	return(((pPos = FindKeyword(&pszSourceCode[nPos], pszKeyword))) ? ((INT)(pPos - pszSourceCode) - nPos) : -1);
}
LPCTSTR CTCProcedurePropertiesCodeEdit::FindKeyword(LPCTSTR pszSourceCode, LPCTSTR pszKeyword) CONST
{
	LPCTSTR  pPos[2];

	for (pPos[0] = pszSourceCode; (pPos[1] = _tcsstr(pPos[0], pszKeyword)); pPos[0] = pPos[1] + lstrlen(pszKeyword))
	{
		if ((pPos[1] == pszSourceCode || (!_istalnum(pPos[1][-1]) && pPos[1][-1] != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE))) && (pPos[1] == pszSourceCode + lstrlen(pszSourceCode) - lstrlen(pszKeyword) || (!_istalnum(pPos[1][lstrlen(pszKeyword)]) && pPos[1][lstrlen(pszKeyword)] != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE)))) break;
		continue;
	}
	return pPos[1];
}

VOID CTCProcedurePropertiesCodeEdit::RelocateBreakpoints(INT nLine, INT nOffset)
{
	INT  nBreakpoint;
	INT  nBreakpoints;
	BOOL  bBreakpoints;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nBreakpoint = 0, nBreakpoints = (nOffset != 0) ? (INT)m_pDatabaseTCProcedureThreadBreakpoints.GetSize() : 0, bBreakpoints = FALSE; nBreakpoint < nBreakpoints; nBreakpoint++)
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = m_pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint)) && pDatabaseTCProcedureThreadBreakpoint->GetLine() >(UINT) nLine)
		{
			if (pDatabaseTCProcedureThreadBreakpoint->GetLine() <= (UINT)nLine + abs(nOffset) && nOffset < 0)
			{
				m_pDatabaseTCProcedureThreadBreakpoints.RemoveAt(nBreakpoint);
				m_szBreakpoints.RemoveAt(nBreakpoint);
				delete pDatabaseTCProcedureThreadBreakpoint;
				bBreakpoints = TRUE;
				nBreakpoints--;
				nBreakpoint--;
				continue;
			}
			pDatabaseTCProcedureThreadBreakpoint->SetLine(pDatabaseTCProcedureThreadBreakpoint->GetLine() + nOffset);
			bBreakpoints = TRUE;
		}
	}
	if (bBreakpoints)
	{
		UpdateBreakpoints();
		DrawMargin();
	}
}

CRect CTCProcedurePropertiesCodeEdit::CalcBreakpointPosition(INT nLine) CONST
{
	INT  nPos;

	return(((nPos = (nLine > 0) ? LineIndex(nLine - 1) : -1) >= 0) ? CRect(CalcBreakpointIndent(), PosFromChar(nPos).y + (m_sizeCodeFont.cy - 2 * CalcBreakpointRadius()) / 2, CalcBreakpointIndent() + 2 * CalcBreakpointRadius(), PosFromChar(nPos).y + (m_sizeCodeFont.cy - 2 * CalcBreakpointRadius()) / 2 + 2 * CalcBreakpointRadius()) : CRect(0, 0, 0, 0));
}

INT CTCProcedurePropertiesCodeEdit::CalcBreakpointRadius() CONST
{
	return min(CalcMargin().Width() - 2 * CalcBreakpointIndent(), m_sizeCodeFont.cy) / 2;
}

INT CTCProcedurePropertiesCodeEdit::CalcBreakpointIndent() CONST
{
	return GetSystemMetrics(SM_CXEDGE);
}

CRect CTCProcedurePropertiesCodeEdit::CalcExecutionpointPosition(INT nLine) CONST
{
	INT  nPos;

	return(((nPos = (nLine > 0) ? LineIndex(nLine - 1) : -1) >= 0) ? CRect(CalcExecutionpointIndent(), PosFromChar(nPos).y + (m_sizeCodeFont.cy - CalcExecutionpointExtent()) / 2, CalcExecutionpointIndent() + CalcExecutionpointExtent(), PosFromChar(nPos).y + (m_sizeCodeFont.cy - CalcExecutionpointExtent()) / 2 + CalcExecutionpointExtent()) : CRect(0, 0, 0, 0));
}

INT CTCProcedurePropertiesCodeEdit::CalcExecutionpointExtent() CONST
{
	INT  nExtent;

	return(((nExtent = min(CalcMargin().Width() - 2 * CalcExecutionpointIndent(), m_sizeCodeFont.cy)) % 2) ? (nExtent - 1) : nExtent);
}

INT CTCProcedurePropertiesCodeEdit::CalcExecutionpointIndent() CONST
{
	return GetSystemMetrics(SM_CXEDGE);
}

CRect CTCProcedurePropertiesCodeEdit::CalcMargin() CONST
{
	CRect  rMargin;

	GetClientRect(rMargin);
	rMargin.right = rMargin.left + GetSystemMetrics(SM_CXVSCROLL);
	return rMargin;
}

BOOL CTCProcedurePropertiesCodeEdit::Lock()
{
	return m_cCriticalSection.Lock();
}

BOOL CTCProcedurePropertiesCodeEdit::Unlock()
{
	return m_cCriticalSection.Unlock();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesCodeEdit, CTPLCodeEdit)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesCodeEdit)
	ON_WM_ERASEBKGND()
	ON_WM_PAINT()
	ON_WM_SETFOCUS()
	ON_WM_KILLFOCUS()
	ON_WM_SETCURSOR()
	ON_WM_MOUSEMOVE()
	ON_WM_LBUTTONDOWN()
	ON_WM_LBUTTONUP()
	ON_WM_RBUTTONDOWN()
	ON_WM_KEYDOWN()
	ON_WM_CHAR()
	ON_WM_TIMER()
	ON_WM_DESTROY()
	ON_MESSAGE(EM_SETSEL, OnSetSel)
	ON_MESSAGE(EM_UNDO, OnUndo)
	ON_MESSAGE(EM_REDO, OnRedo)
	ON_MESSAGE(WM_PASTE, OnPaste)
	ON_MESSAGE(WM_CUT, OnCut)
	ON_MESSAGE(WM_CLEAR, OnClear)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesCodeEdit message handlers

BOOL CTCProcedurePropertiesCodeEdit::OnEraseBkgnd(CDC *pDC)
{
	DrawMargin(pDC);
	pDC->ExcludeClipRect(CalcMargin());
	return CTPLCodeEdit::OnEraseBkgnd(pDC);
}

void CTCProcedurePropertiesCodeEdit::OnPaint()
{
	CDC  *pDC;
	CRect  rMargin;

	if ((pDC = GetDC()))
	{
		pDC->DrawEdge((rMargin = CalcMargin()), EDGE_ETCHED, BF_RIGHT | BF_ADJUST);
		rMargin.InflateRect(0, 0, 1, 0);
		ValidateRect(rMargin);
		DrawMargin(pDC);
		ReleaseDC(pDC);
	}
	CTPLCodeEdit::OnPaint();
}

void CTCProcedurePropertiesCodeEdit::OnSetFocus(CWnd *pOldWnd)
{
	m_nCodeLines = GetLineCount();
	CTPLCodeEdit::OnSetFocus(pOldWnd);
}

void CTCProcedurePropertiesCodeEdit::OnKillFocus(CWnd *pNewWnd)
{
	INT  nBreakpoint;
	INT  nBreakpoints;
	BOOL  bBreakpoints;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nBreakpoint = 0, nBreakpoints = (INT)m_pDatabaseTCProcedureThreadBreakpoints.GetSize(), bBreakpoints = FALSE; nBreakpoint < nBreakpoints; nBreakpoint++)
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = m_pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint)) && pDatabaseTCProcedureThreadBreakpoint->GetLine() > 0 && CheckLine(pDatabaseTCProcedureThreadBreakpoint->GetLine() - 1).IsEmpty())
		{
			m_pDatabaseTCProcedureThreadBreakpoints.RemoveAt(nBreakpoint);
			m_szBreakpoints.RemoveAt(nBreakpoint);
			delete pDatabaseTCProcedureThreadBreakpoint;
			bBreakpoints = TRUE;
			nBreakpoints--;
			nBreakpoint--;
		}
	}
	if (bBreakpoints)
	{
		UpdateBreakpoints();
		DrawMargin();
	}
	CTPLCodeEdit::OnKillFocus(pNewWnd);
}

BOOL CTCProcedurePropertiesCodeEdit::OnSetCursor(CWnd *pWnd, UINT nHitTest, UINT message)
{
	POINT  ptCursor;

	if (nHitTest == HTCLIENT)
	{
		for (GetCursorPos(&ptCursor), ScreenToClient(&ptCursor); !CalcMargin().PtInRect(ptCursor) && IsProtected(); )
		{
			SetCursor(LoadCursor((HINSTANCE)NULL, IDC_ARROW));
			return TRUE;
		}
	}
	return CTPLCodeEdit::OnSetCursor(pWnd, nHitTest, message);
}

void CTCProcedurePropertiesCodeEdit::OnMouseMove(UINT nFlags, CPoint point)
{
	INT  nBreakpoint;
	INT  nBreakpoints;
	BOOL  bEditScroll;
	CRect  rEditView;
	CRect  rEditCtrl;
	CPoint  ptEditCursor;
	CString  szToolTipTitle;
	CString  szToolTipText;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nBreakpoint = 0, nBreakpoints = (INT)m_pDatabaseTCProcedureThreadBreakpoints.GetSize(); nBreakpoint < nBreakpoints; nBreakpoint++)
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = m_pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint)) && pDatabaseTCProcedureThreadBreakpoint->GetLine() > 0 && CalcBreakpointPosition(pDatabaseTCProcedureThreadBreakpoint->GetLine()).PtInRect(point))
		{
			for (szToolTipTitle.Format(STRING(IDS_TCPROCEDURETHREAD_BREAKPOINTTOOLTIP_LINETITLE), pDatabaseTCProcedureThreadBreakpoint->GetLine()), szToolTipText = STRING(IDS_TCPROCEDURETHREAD_BREAKPOINTTOOLTIP_BREAKALWAYS), szToolTipText += (pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_DISABLED) ? (CString(EOL) + STRING(IDS_TCPROCEDURETHREAD_BREAKPOINTTOOLTIP_DISABLED)) : (CString(EOL) + STRING(IDS_TCPROCEDURETHREAD_BREAKPOINTTOOLTIP_ENABLED)); IsWindow(m_wndToolTip.GetSafeHwnd()) && m_szToolTip != szToolTipTitle; )
			{
				m_wndToolTip.Destroy();
				m_szToolTip.Empty();
				break;
			}
			if (!IsWindow(m_wndToolTip.GetSafeHwnd()) && m_szToolTip != szToolTipTitle && (nFlags & MK_RBUTTON) != MK_RBUTTON)
			{
				m_wndToolTip.Create(this, point, (m_szToolTip = szToolTipTitle), szToolTipText, TRUE);
				break;
			}
			break;
		}
	}
	if (nBreakpoint == nBreakpoints)
	{
		m_wndToolTip.Destroy();
		m_szToolTip.Empty();
	}
	if (nFlags & MK_LBUTTON)
	{
		for (GetWindowRect(rEditCtrl), GetParent()->GetParent()->RepositionBars(0, 0xFFFF, AFX_IDW_PANE_FIRST, CWnd::reposQuery, rEditView), GetParent()->GetParent()->ClientToScreen(rEditView), ptEditCursor = point, ClientToScreen(&ptEditCursor); (bEditScroll = (rEditCtrl.left < rEditView.left && ptEditCursor.x < rEditView.left) || (rEditCtrl.top < rEditView.top && ptEditCursor.y < rEditView.top) || (rEditCtrl.right > rEditView.right && ptEditCursor.x > rEditView.right) || (rEditCtrl.bottom > rEditView.bottom && ptEditCursor.y > rEditView.bottom)); )
		{
			GetParent()->GetParent()->ScrollToPosition(CPoint((rEditCtrl.left < rEditView.left  &&  ptEditCursor.x < rEditView.left) ? max(GetParent()->GetParent()->GetScrollPosition().x + min(ptEditCursor.x - m_ptCodeScroll.x, 0), 0) : ((rEditCtrl.right > rEditView.right  &&  ptEditCursor.x > rEditView.right) ? max(GetParent()->GetParent()->GetScrollPosition().x + max(ptEditCursor.x - m_ptCodeScroll.x, 0), 0) : GetParent()->GetParent()->GetScrollPosition().x), (rEditCtrl.top < rEditView.top  &&  ptEditCursor.y < rEditView.top) ? max(GetParent()->GetParent()->GetScrollPosition().y + min(ptEditCursor.y - m_ptCodeScroll.y, 0), 0) : ((rEditCtrl.bottom > rEditView.bottom  &&  ptEditCursor.y > rEditView.bottom)) ? max(GetParent()->GetParent()->GetScrollPosition().y + max(ptEditCursor.y - m_ptCodeScroll.y, 0), 0) : GetParent()->GetParent()->GetScrollPosition().y));
			break;
		}
		for (m_ptCodeScroll = ptEditCursor; !m_nTimerID && bEditScroll; )
		{
			m_nTimerID = SetTimer(TCPROCEDUREPROPERTIESCODEEDIT_SCROLL_TIMERID, TCPROCEDUREPROPERTIESCODEEDIT_SCROLL_TIMEOUT, NULL);
			break;
		}
		if (m_nTimerID != 0 && !bEditScroll)
		{
			KillTimer(TCPROCEDUREPROPERTIESCODEEDIT_SCROLL_TIMERID);
			m_nTimerID = 0;
		}
	}
	CTPLCodeEdit::OnMouseMove(nFlags, point);
}

void CTCProcedurePropertiesCodeEdit::OnLButtonDown(UINT nFlags, CPoint point)
{
	INT  nIndex;
	INT  nBreakpoint;
	INT  nBreakpoints;
	CRect  rBreakpoint;
	CString  szBreakpoint;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nBreakpoint = 0, nBreakpoints = (CalcMargin().PtInRect(point)) ? (INT)m_pDatabaseTCProcedureThreadBreakpoints.GetSize() : -1, m_ptCodeScroll = point, ClientToScreen(&m_ptCodeScroll); nBreakpoint < nBreakpoints; nBreakpoint++)
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = m_pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint)) && pDatabaseTCProcedureThreadBreakpoint->GetLine() > 0)
		{
			rBreakpoint = CalcBreakpointPosition(pDatabaseTCProcedureThreadBreakpoint->GetLine());
			if ((point.x - rBreakpoint.CenterPoint().x)*(point.x - rBreakpoint.CenterPoint().x) + (point.y - rBreakpoint.CenterPoint().y)*(point.y - rBreakpoint.CenterPoint().y) <= (rBreakpoint.Width()*rBreakpoint.Width()) / 4)
			{
				m_pDatabaseTCProcedureThreadBreakpoints.RemoveAt(nBreakpoint);
				m_szBreakpoints.RemoveAt(nBreakpoint);
				delete pDatabaseTCProcedureThreadBreakpoint;
				nBreakpoints--;
				nBreakpoint--;
				break;
			}
		}
	}
	for (; GetLineCount() > 0 && nBreakpoint == nBreakpoints; )
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = new CDatabaseTCProcedureThreadBreakpoint))
		{
			pDatabaseTCProcedureThreadBreakpoint->SetLine(LineFromChar(CharFromPos(point)) + 1);
			pDatabaseTCProcedureThreadBreakpoint->SetOptions(TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS);
			if ((nIndex = (lstrlen((szBreakpoint = CheckLine(pDatabaseTCProcedureThreadBreakpoint->GetLine() - 1))) > 0) ? m_pDatabaseTCProcedureThreadBreakpoints.Add(pDatabaseTCProcedureThreadBreakpoint) : -1) >= 0)
			{
				m_szBreakpoints.SetAtGrow(nIndex, szBreakpoint);
				break;
			}
			delete pDatabaseTCProcedureThreadBreakpoint;
		}
		nBreakpoints = -1;
		break;
	}
	for (; IsWindow(m_wndToolTip.GetSafeHwnd()) && nBreakpoint < nBreakpoints; )
	{
		m_wndToolTip.Destroy();
		break;
	}
	if (IsProtected() || nBreakpoints >= 0)
	{
		UpdateBreakpoints();
		DrawMargin();
		return;
	}
	CTPLCodeEdit::OnLButtonDown(nFlags, point);
}

void CTCProcedurePropertiesCodeEdit::OnLButtonUp(UINT nFlags, CPoint point)
{
	for (m_ptCodeScroll.x = 0, m_ptCodeScroll.y = 0; m_nTimerID != 0; )
	{
		KillTimer(TCPROCEDUREPROPERTIESCODEEDIT_SCROLL_TIMERID);
		m_nTimerID = 0;
		break;
	}
	CTPLCodeEdit::OnLButtonUp(nFlags, point);
}

void CTCProcedurePropertiesCodeEdit::OnRButtonDown(UINT nFlags, CPoint point)
{
	INT  nItem;
	INT  nItems;
	INT  nItemID;
	INT  nBreakpoint;
	INT  nBreakpoints;
	CPoint  ptBreakpointMenu;
	CString  szBreakpointMenuItem;
	CLocaleMenu  cBreakpointMenu[2];
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;

	for (nBreakpoint = 0, nBreakpoints = (INT)m_pDatabaseTCProcedureThreadBreakpoints.GetSize(), ptBreakpointMenu = point, ClientToScreen(&ptBreakpointMenu); nBreakpoint < nBreakpoints; nBreakpoint++)
	{
		if ((pDatabaseTCProcedureThreadBreakpoint = m_pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint)) && pDatabaseTCProcedureThreadBreakpoint->GetLine() > 0 && CalcBreakpointPosition(pDatabaseTCProcedureThreadBreakpoint->GetLine()).PtInRect(point))
		{
			for (nItem = 0, nItems = (cBreakpointMenu[0].CreatePopupMenu() && cBreakpointMenu[1].LoadMenu(IDR_TCSTEPBREAKPOINTMENU)) ? cBreakpointMenu[1].GetMenuItemCount() : 0, m_wndToolTip.Destroy(); nItem < nItems; nItem++)
			{
				if ((nItemID = cBreakpointMenu[1].GetMenuItemID(nItem)) >= 0 && (!nItemID || cBreakpointMenu[1].GetMenuString(nItem, szBreakpointMenuItem, MF_BYPOSITION) > 0))
				{
					if ((!nItemID  &&  cBreakpointMenu[0].GetMenuItemCount() == 1) || nItemID == IDM_TCSTEPBREAKPOINT_BREAKALWAYS || nItemID == IDM_TCSTEPBREAKPOINT_DISABLE)
					{
						cBreakpointMenu[0].AppendMenu(((nItemID > 0) ? MF_STRING : MF_SEPARATOR) | MF_ENABLED, (UINT_PTR)nItemID, szBreakpointMenuItem);
						cBreakpointMenu[0].CheckMenuItem(nItemID, (((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS) && nItemID == IDM_TCSTEPBREAKPOINT_BREAKALWAYS)) ? (MF_CHECKED | MF_BYCOMMAND) : ((cBreakpointMenu[0].GetMenuState(nItemID, MF_BYCOMMAND) & MF_CHECKED) | MF_BYCOMMAND));
						cBreakpointMenu[0].CheckMenuItem(nItemID, (((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & TCPROCEDURETHREADBREAKPOINT_OPTION_DISABLED) && nItemID == IDM_TCSTEPBREAKPOINT_DISABLE)) ? (MF_CHECKED | MF_BYCOMMAND) : ((cBreakpointMenu[0].GetMenuState(nItemID, MF_BYCOMMAND) & MF_CHECKED) | MF_BYCOMMAND));
					}
				}
			}
			if (nItems > 0)
			{
				if ((nItemID = cBreakpointMenu[0].TrackPopupMenu(TPM_LEFTALIGN | TPM_LEFTBUTTON | TPM_RETURNCMD, ptBreakpointMenu.x, ptBreakpointMenu.y, GetTopLevelFrame())) == IDM_TCSTEPBREAKPOINT_BREAKALWAYS)
				{
					pDatabaseTCProcedureThreadBreakpoint->SetOptions((pDatabaseTCProcedureThreadBreakpoint->GetOptions() & ~(TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDTRIGGER | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDBODY | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKATFAILEDCONFIRMATION)) | TCPROCEDURETHREADBREAKPOINT_OPTION_BREAKALWAYS);
					UpdateBreakpoints();
					DrawMargin();
				}
				if (nItemID == IDM_TCSTEPBREAKPOINT_DISABLE)
				{
					pDatabaseTCProcedureThreadBreakpoint->SetOptions(pDatabaseTCProcedureThreadBreakpoint->GetOptions() ^ TCPROCEDURETHREADBREAKPOINT_OPTION_DISABLED);
					UpdateBreakpoints();
					DrawMargin();
				}
				cBreakpointMenu[1].DestroyMenu();
			}
			break;
		}
	}
	CTPLCodeEdit::OnRButtonDown(nFlags, point);
}

void CTCProcedurePropertiesCodeEdit::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	if (IsProtected())
	{
		CAudioDevice::AlertBySound();
		return;
	}
	if (nChar == VK_F3)
	{
		if (GetParent()->CanFindNextCode() && !HIBYTE(GetKeyState(VK_SHIFT))) GetParent()->DoFindNextCode();
		if (GetParent()->CanFindPreviousCode() && HIBYTE(GetKeyState(VK_SHIFT))) GetParent()->DoFindPreviousCode();
	}
	if (nChar == VK_TAB)
	{
		ReplaceSel(CString(TAB));
		return;
	}
	CTPLCodeEdit::OnKeyDown(nChar, nRepCnt, nFlags);
}

void CTCProcedurePropertiesCodeEdit::OnChar(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	INT  nLine;
	INT  nLines;
	LONG  nSel[2];
	CString  szText;

	if (!IsProtected())
	{
		for (GetSel(nSel[0], nSel[1]), nLine = LineFromChar(nSel[0]), Default(), RenderCode(), nLines = GetLineCount(), RelocateBreakpoints(nLine, nLines - m_nCodeLines), m_nCodeLines = GetLineCount(), GetWindowText(szText); szText.GetLength() >= 0; )
		{
			GetParent()->UpdateCode(szText);
			break;
		}
	}
}

void CTCProcedurePropertiesCodeEdit::OnTimer(UINT_PTR nEventID)
{
	CRect  rEditCtrl;
	CRect  rEditView;
	CPoint  ptEditCursor;
	BOOL  bEditScroll;

	if (nEventID == TCPROCEDUREPROPERTIESCODEEDIT_UPDATE_TIMERID)
	{
		HideSelection(IsProtected(), FALSE);
		KillTimer(nEventID);
		DrawMargin();
		return;
	}
	if (nEventID == TCPROCEDUREPROPERTIESCODEEDIT_SCROLL_TIMERID)
	{
		for (GetWindowRect(rEditCtrl), GetParent()->GetParent()->RepositionBars(0, 0xFFFF, AFX_IDW_PANE_FIRST, CWnd::reposQuery, rEditView), GetParent()->GetParent()->ClientToScreen(rEditView), GetCursorPos(&ptEditCursor); (bEditScroll = (rEditCtrl.left < rEditView.left && ptEditCursor.x < rEditView.left) || (rEditCtrl.top < rEditView.top && ptEditCursor.y < rEditView.top) || (rEditCtrl.right > rEditView.right && ptEditCursor.x > rEditView.right) || (rEditCtrl.bottom > rEditView.bottom && ptEditCursor.y > rEditView.bottom)); )
		{
			GetParent()->GetParent()->ScrollToPosition(CPoint((rEditCtrl.left < rEditView.left  &&  ptEditCursor.x < rEditView.left) ? max(GetParent()->GetParent()->GetScrollPosition().x - rEditView.Width() / 16, 0) : ((rEditCtrl.right > rEditView.right  &&  ptEditCursor.x > rEditView.right) ? max(GetParent()->GetParent()->GetScrollPosition().x + rEditView.Width() / 16, 0) : GetParent()->GetParent()->GetScrollPosition().x), (rEditCtrl.top < rEditView.top  &&  ptEditCursor.y < rEditView.top) ? max(GetParent()->GetParent()->GetScrollPosition().y - m_sizeCodeFont.cy, 0) : ((rEditCtrl.bottom > rEditView.bottom  &&  ptEditCursor.y > rEditView.bottom) ? max(GetParent()->GetParent()->GetScrollPosition().y + m_sizeCodeFont.cy, 0) : GetParent()->GetParent()->GetScrollPosition().y)));
			break;
		}
		if (m_nTimerID != 0 && !bEditScroll)
		{
			KillTimer(nEventID);
			m_nTimerID = 0;
		}
		return;
	}
	CTPLCodeEdit::OnTimer(nEventID);
}

LRESULT CTCProcedurePropertiesCodeEdit::OnSetSel(WPARAM wParam, LPARAM lParam)
{
	return((GetFocus() == this || wParam != 0 || lParam != (LPARAM)-1) ? Default() : FALSE);
}

LRESULT CTCProcedurePropertiesCodeEdit::OnUndo(WPARAM wParam, LPARAM lParam)
{
	INT  nLine;
	INT  nLines;
	LONG  nSel[2];
	CString  szText;
	LRESULT  lResult;

	for (GetSel(nSel[0], nSel[1]), nLine = LineFromChar(nSel[0]), lResult = Default(), RenderCode(this, &m_cCodeFont), nLines = GetLineCount(), RelocateBreakpoints(nLine, nLines - m_nCodeLines), m_nCodeLines = GetLineCount(), GetWindowText(szText); szText.GetLength() >= 0; )
	{
		GetParent()->UpdateCode(szText);
		break;
	}
	return lResult;
}

LRESULT CTCProcedurePropertiesCodeEdit::OnRedo(WPARAM wParam, LPARAM lParam)
{
	INT  nLine;
	INT  nLines;
	LONG  nSel[2];
	CString  szText;
	LRESULT  lResult;

	for (GetSel(nSel[0], nSel[1]), nLine = LineFromChar(nSel[0]), lResult = Default(), RenderCode(), nLines = GetLineCount(), RelocateBreakpoints(nLine, nLines - m_nCodeLines), m_nCodeLines = GetLineCount(), GetWindowText(szText); szText.GetLength() >= 0; )
	{
		GetParent()->UpdateCode(szText);
		break;
	}
	return lResult;
}

LRESULT CTCProcedurePropertiesCodeEdit::OnPaste(WPARAM wParam, LPARAM lParam)
{
	INT  nLine;
	INT  nLines;
	LONG  nSel[2];
	CString  szText;
	LRESULT  lResult;

	for (GetSel(nSel[0], nSel[1]), nLine = LineFromChar(nSel[0]), lResult = Default(), RenderCode(), nLines = GetLineCount(), RelocateBreakpoints(nLine, nLines - m_nCodeLines), m_nCodeLines = GetLineCount(), GetWindowText(szText); szText.GetLength() >= 0; )
	{
		GetParent()->UpdateCode(szText);
		break;
	}
	return lResult;
}

LRESULT CTCProcedurePropertiesCodeEdit::OnCut(WPARAM wParam, LPARAM lParam)
{
	INT  nLine;
	INT  nLines;
	LONG  nSel[2];
	CString  szText;
	LRESULT  lResult;

	for (GetSel(nSel[0], nSel[1]), nLine = LineFromChar(nSel[0]), lResult = Default(), RenderCode(), nLines = GetLineCount(), RelocateBreakpoints(nLine, nLines - m_nCodeLines), m_nCodeLines = GetLineCount(), GetWindowText(szText); szText.GetLength() >= 0; )
	{
		GetParent()->UpdateCode(szText);
		break;
	}
	return lResult;
}

LRESULT CTCProcedurePropertiesCodeEdit::OnClear(WPARAM wParam, LPARAM lParam)
{
	INT  nLine;
	INT  nLines;
	LONG  nSel[2];
	CString  szText;
	LRESULT  lResult;

	for (GetSel(nSel[0], nSel[1]), nLine = LineFromChar(nSel[0]), lResult = Default(), RenderCode(), nLines = GetLineCount(), RelocateBreakpoints(nLine, nLines - m_nCodeLines), m_nCodeLines = GetLineCount(), GetWindowText(szText); szText.GetLength() >= 0; )
	{
		GetParent()->UpdateCode(szText);
		break;
	}
	return lResult;
}

void CTCProcedurePropertiesCodeEdit::OnDestroy()
{
	m_cCodeFont.DeleteObject();
	CTPLCodeEdit::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesCodeDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesCodeDialog, CLocaleDialog)

CTCProcedurePropertiesCodeDialog::CTCProcedurePropertiesCodeDialog(CWnd *pParentWnd) : CLocaleDialog(CTCProcedurePropertiesCodeDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesCodeDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCProcedurePropertiesCodeDialog::SetInfo(CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	INT  nThread;
	INT  nThreads;
	INT  nBreakpoint;
	INT  nBreakpoints;
	CStringArray  szBreakpoints;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints[2];

	for (nThread = 0, nThreads = (INT)pDatabaseTCProcedure->GetSize(); nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(nThread)) && pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints[0]) > 0)
		{
			for (nBreakpoint = 0, nBreakpoints = (INT)pDatabaseTCProcedureThreadBreakpoints[0].GetSize(); nBreakpoint < nBreakpoints; nBreakpoint++)
			{
				if ((pDatabaseTCProcedureThreadBreakpoint = pDatabaseTCProcedureThreadBreakpoints[0].GetAt(nBreakpoint)) && pDatabaseTCProcedureThreadBreakpoint->GetLine() > 0)
				{
					szBreakpoints.InsertAt(szBreakpoints.GetSize(), pDatabaseTCProcedureThread->GetName());
					pDatabaseTCProcedureThreadBreakpoints[1].InsertAt(pDatabaseTCProcedureThreadBreakpoints[1].GetSize(), pDatabaseTCProcedureThreadBreakpoint, 1);
					pDatabaseTCProcedureThreadBreakpoints[0].RemoveAt(nBreakpoint);
					nBreakpoints--;
					nBreakpoint--;
				}
			}
		}
	}
	for (SetBreakpoints(szBreakpoints, pDatabaseTCProcedureThreadBreakpoints[1]), m_szBreakpoints.Copy(szBreakpoints), m_pDatabaseTCProcedureThreadBreakpoints.Copy(&pDatabaseTCProcedureThreadBreakpoints[1]), m_szCode[1] = pDatabaseTCProcedure->GetSourceCode(), m_wndCode.SetCode(pDatabaseTCProcedure); m_szCode[0] != pDatabaseTCProcedure->GetSourceCode() || ((pDatabaseTCProcedure->GetAttributes() & TCPROCEDURE_SOURCECODE_CUSTOM) && m_bCustomCode != TRUE) || ((pDatabaseTCProcedure->GetAttributes() & TCPROCEDURE_SOURCECODE_CUSTOM) != TCPROCEDURE_SOURCECODE_CUSTOM && m_bCustomCode != FALSE); )
	{
		m_bCustomCode = (pDatabaseTCProcedure->GetAttributes() & TCPROCEDURE_SOURCECODE_CUSTOM) ? TRUE : FALSE;
		m_szCode[0] = pDatabaseTCProcedure->GetSourceCode();
		ShowInfo();
		break;
	}
	return TRUE;
}

BOOL CTCProcedurePropertiesCodeDialog::GetInfo(CDatabaseTCProcedure *pDatabaseTCProcedure) CONST
{
	INT  nThread;
	INT  nThreads;
	INT  nBreakpoint;
	INT  nBreakpoints;
	CStringArray  szBreakpoints;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints[2];

	for (nThread = 0, nThreads = (INT)pDatabaseTCProcedure->GetSize(), pDatabaseTCProcedure->SetAttributes((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_CODE_USECUSTOMCODE)) ? (pDatabaseTCProcedure->GetAttributes() | TCPROCEDURE_SOURCECODE_CUSTOM) : (pDatabaseTCProcedure->GetAttributes() & ~TCPROCEDURE_SOURCECODE_CUSTOM)), m_wndCode.GetCode(pDatabaseTCProcedure); nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(nThread)) && pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints[0]) >= 0)
		{
			for (nBreakpoint = 0, nBreakpoints = (INT)pDatabaseTCProcedureThreadBreakpoints[0].GetSize(); nBreakpoint < nBreakpoints; nBreakpoint++)
			{
				if ((pDatabaseTCProcedureThreadBreakpoint = pDatabaseTCProcedureThreadBreakpoints[0].GetAt(nBreakpoint)) && pDatabaseTCProcedureThreadBreakpoint->GetLine() > 0)
				{
					pDatabaseTCProcedureThreadBreakpoints[0].RemoveAt(nBreakpoint);
					delete pDatabaseTCProcedureThreadBreakpoint;
					nBreakpoints--;
					nBreakpoint--;
				}
			}
			for (nBreakpoint = 0, nBreakpoints = GetBreakpoints(szBreakpoints, pDatabaseTCProcedureThreadBreakpoints[1]); nBreakpoint < nBreakpoints; nBreakpoint++)
			{
				if (!szBreakpoints.GetAt(nBreakpoint).Compare(pDatabaseTCProcedureThread->GetName()))
				{
					pDatabaseTCProcedureThreadBreakpoints[0].InsertAt(pDatabaseTCProcedureThreadBreakpoints[0].GetSize(), pDatabaseTCProcedureThreadBreakpoints[1].GetAt(nBreakpoint), 1);
					pDatabaseTCProcedureThreadBreakpoints[1].RemoveAt(nBreakpoint);
					nBreakpoints--;
					nBreakpoint--;
				}
			}
			pDatabaseTCProcedureThread->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints[0]);
		}
	}
	return TRUE;
}

VOID CTCProcedurePropertiesCodeDialog::SetBreakpoints(CONST CStringArray &szBreakpoints, CONST CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints)
{
	m_wndCode.SetBreakpoints(szBreakpoints, pDatabaseTCProcedureThreadBreakpoints);
}

INT CTCProcedurePropertiesCodeDialog::GetBreakpoints(CStringArray &szBreakpoints, CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints) CONST
{
	return m_wndCode.GetBreakpoints(szBreakpoints, pDatabaseTCProcedureThreadBreakpoints);
}

VOID CTCProcedurePropertiesCodeDialog::UpdateBreakpoints(LPCTSTR pszThread, CONST CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints)
{
	GetParentDisplay()->UpdateProcedureThreadBreakpoints(pszThread, pDatabaseTCProcedureThreadBreakpoints);
}

VOID CTCProcedurePropertiesCodeDialog::UpdateExecutionpoint(LPCTSTR pszThread, UINT nState, UINT nLine)
{
	m_wndCode.UpdateExecutionpoint(pszThread, nState, nLine);
}

BOOL CTCProcedurePropertiesCodeDialog::SearchCode(LPCTSTR pszText, BOOL bDown, BOOL bAll, BOOL bCase, BOOL bWord)
{
	LONG  nPos[2];
	CRect  rView;
	DWORD  dwFlags;
	CPoint  ptLine;
	CString  szCode[3];
	FINDTEXTEX  sText;

	for (m_wndCode.HideSelection(TRUE, FALSE), m_wndCode.GetSel(nPos[0], nPos[1]); nPos[0] < nPos[1]; )
	{
		nPos[0] = (bDown) ? min(nPos[0] + 1, m_wndCode.GetTextLength() - 1) : max(nPos[0] - 1, 0);
		break;
	}
	do
	{
		for (dwFlags = (bDown) ? FR_DOWN : 0, dwFlags |= (bCase) ? FR_MATCHCASE : 0, dwFlags |= 0, sText.lpstrText = pszText, sText.chrg.cpMin = (bAll) ? ((!bDown) ? (m_wndCode.GetTextLength() - 1) : 0) : nPos[0], sText.chrg.cpMax = m_wndCode.GetTextLength(); (nPos[1] = m_wndCode.FindText(dwFlags, &sText)) >= 0; )
		{
			for (m_wndCode.SetSel((nPos[0] = sText.chrgText.cpMin), (nPos[1] = sText.chrgText.cpMin + lstrlen(pszText))), szCode[0] = m_wndCode.GetSelText(), m_wndCode.SetSel(nPos[0] - 1, nPos[0]), szCode[1] = m_wndCode.GetSelText(), m_wndCode.SetSel(nPos[1], nPos[1] + 1), szCode[2] = m_wndCode.GetSelText(); ((!bCase && !szCode[0].CompareNoCase(pszText)) || (bCase && !szCode[0].Compare(pszText))) && ((bWord && (nPos[0] <= 0 || !_istalpha(szCode[1].GetAt(0))) && (nPos[1] >= m_wndCode.GetTextLength() || !_istalpha(szCode[2].GetAt(0)))) || !bWord); )
			{
				for (m_wndCode.HideSelection(FALSE, FALSE), m_wndCode.SetSel(nPos[0], nPos[1]), ptLine = m_wndCode.PosFromChar(nPos[0]), GetParent()->GetWindowRect(rView), m_wndCode.ClientToScreen(&ptLine); !rView.PtInRect(ptLine); )
				{
					GetParent()->ScrollToPosition(CPoint((ptLine.x < rView.left || ptLine.x > rView.right) ? (GetParent()->GetScrollPosition().x + ptLine.x - rView.CenterPoint().x) : GetParent()->GetScrollPosition().x, (ptLine.y < rView.top || ptLine.y > rView.bottom) ? (GetParent()->GetScrollPosition().y + ptLine.y - rView.CenterPoint().y) : GetParent()->GetScrollPosition().y));
					break;
				}
				m_wndCode.SetFocus();
				return TRUE;
			}
			nPos[0] = (bDown) ? (nPos[0] + 1) : (nPos[0] - 1);
			bAll = FALSE;
			break;
		}
		if (nPos[1] < 0) break;
	} while (TRUE);
	m_wndCode.SetSel(0, 0);
	return FALSE;
}

BOOL CTCProcedurePropertiesCodeDialog::ReplaceCode(LPCTSTR pszText, LPCTSTR pszReplaceText, BOOL bDown, BOOL bAll, BOOL bCase, BOOL bWord)
{
	LONG  nSel[2];
	CString  szText;

	for (m_wndCode.HideSelection(FALSE, FALSE), m_wndCode.GetSel(nSel[0], nSel[1]); nSel[0] < nSel[1] && nSel[1] - nSel[0] == lstrlen(pszText); )
	{
		for (szText = m_wndCode.GetSelText(); (bCase && !szText.Compare(pszText)) || (!bCase && !szText.CompareNoCase(pszText)); )
		{
			m_wndCode.ReplaceSel(pszReplaceText, TRUE);
			break;
		}
		break;
	}
	return SearchCode(pszText, bDown, bAll, bCase, bWord);
}

BOOL CTCProcedurePropertiesCodeDialog::ReplaceAllCode(LPCTSTR pszText, LPCTSTR pszReplaceText, BOOL bDown, BOOL bAll, BOOL bCase, BOOL bWord)
{
	LONG  nSel[2];

	for (m_wndCode.HideSelection(TRUE, FALSE), m_wndCode.GetSel(nSel[0], nSel[1]), m_wndCode.SetSel((bAll) ? ((!bDown) ? (m_wndCode.GetTextLength() - 1) : 0) : nSel[0], (bAll) ? ((!bDown) ? (m_wndCode.GetTextLength() - 1) : 0) : nSel[1]); TRUE; )
	{
		if (!ReplaceCode(pszText, pszReplaceText, bDown, FALSE, bCase, bWord)) break;
		continue;
	}
	m_wndCode.HideSelection(FALSE, FALSE);
	return TRUE;
}

BOOL CTCProcedurePropertiesCodeDialog::GoToCode(UINT nLine, BOOL bDown, BOOL bUp)
{
	INT  nPos;
	CRect  rView;
	CPoint  ptLine;

	if (!bDown  &&  !bUp)
	{
		for (m_wndCode.HideSelection(FALSE, FALSE); (nPos = m_wndCode.LineIndex(nLine - 1)) >= 0 && nLine > 0; )
		{
			for (m_wndCode.SetSel(nPos, nPos + max(m_wndCode.LineLength(nPos), 1)), ptLine = m_wndCode.PosFromChar(nPos), GetParent()->GetWindowRect(rView), m_wndCode.ClientToScreen(&ptLine); !rView.PtInRect(ptLine); )
			{
				GetParent()->ScrollToPosition(CPoint((ptLine.x < rView.left || ptLine.x > rView.right) ? (GetParent()->GetScrollPosition().x + ptLine.x - rView.CenterPoint().x) : GetParent()->GetScrollPosition().x, (ptLine.y < rView.top || ptLine.y > rView.bottom) ? (GetParent()->GetScrollPosition().y + ptLine.y - rView.CenterPoint().y) : GetParent()->GetScrollPosition().y));
				break;
			}
			return TRUE;
		}
		return FALSE;
	}
	return GoToCode((bDown) ? (m_wndCode.LineFromChar(-1) + nLine + 1) : (m_wndCode.LineFromChar(-1) - nLine + 1), FALSE, FALSE);
}
BOOL CTCProcedurePropertiesCodeDialog::GoToCode(LPCTSTR pszLine)
{
	INT  nPos[4];
	INT  nLength;
	INT  nLine[2];
	CRect  rView;
	CPoint  ptLine;
	CString  szLine;
	CString  szCode;
	CString  szThread[2];
	CString  szSearchKey;

	for (szLine = pszLine, nLength = szLine.GetLength(), nLine[0] = 0; (nPos[0] = szLine.Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEROUTPUT_THREADSEARCHKEY))) >= 0; )
	{
		for (nPos[0] += lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEROUTPUT_THREADSEARCHKEY)); nPos[0] < nLength; nPos[0]++)
		{
			if (szLine.GetAt(nPos[0]) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER))
			{
				szThread[0] += szLine.GetAt(nPos[0]);
				continue;
			}
			break;
		}
		for (szSearchKey = (!szThread[0].IsEmpty()) ? (STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEROUTPUT_THREADSEARCHKEY) + szThread[0] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEROUTPUT_LINESEARCHKEY)) : EMPTYSTRING; (nPos[0] = szLine.Find(szSearchKey)) >= 0 && !szSearchKey.IsEmpty(); )
		{
			nLine[0] = _ttoi(szLine.Mid(nPos[0] + szSearchKey.GetLength()));
			break;
		}
		for (m_wndCode.GetWindowText(szCode); (nPos[0] = szCode.Find(CR)) >= 0; )
		{
			szCode = szCode.Left(nPos[0]) + szCode.Mid(nPos[0] + 1);
			continue;
		}
		for (nPos[0] = 0; (nPos[1] = nPos[2] = FindKeyword(szCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_THREAD), nPos[0])) >= 0; nPos[0] += (nPos[1] < 0) ? (nPos[2] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_THREAD))) : nPos[1])
		{
			for (nPos[1] += lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_THREAD)); nPos[0] + nPos[1] < szCode.GetLength(); nPos[1]++)
			{
				if (!_istspace(szCode.GetAt(nPos[0] + nPos[1]))) break;
				continue;
			}
			for (nPos[1] = (nPos[0] + nPos[1] < szCode.GetLength() && szCode.GetAt(nPos[0] + nPos[1]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER)) ? (nPos[1] + 1) : -1, szThread[1].Empty(); nPos[0] + nPos[1] < szCode.GetLength() && nPos[1] >= 0; nPos[1]++)
			{
				if (szCode.GetAt(nPos[0] + nPos[1]) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER))
				{
					szThread[1] += szCode.GetAt(nPos[0] + nPos[1]);
					continue;
				}
				break;
			}
			if (szThread[0] == szThread[1])
			{
				if ((nPos[1] = (nLine[0] > 0) ? (nPos[1] + FindKeyword(szCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_BEGIN), nPos[0] + nPos[1])) : -1) >= 0)
				{
					for (nPos[1] += lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_BEGIN)), nLine[1] = 0; (nPos[3] = szCode.Mid(nPos[0] + nPos[1]).Find(EOL)) >= 0; nPos[1] += nPos[3] + lstrlen(CString(EOL)))
					{
						if (nLine[0] <= nLine[1]) break;
						nLine[1]++;
					}
					if (nLine[0] == nLine[1])
					{
						for (m_wndCode.HideSelection(FALSE, FALSE), m_wndCode.SetSel(nPos[0] + nPos[1], ((nPos[3] = szCode.Mid(nPos[0] + nPos[1]).Find(CString(EOL))) >= 0) ? (nPos[0] + nPos[1] + nPos[3]) : -1), ptLine = m_wndCode.PosFromChar(nPos[0] + nPos[1]), GetParent()->GetWindowRect(rView), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->ClientToScreen(&ptLine); !rView.PtInRect(ptLine); )
						{
							GetParent()->ScrollToPosition(CPoint((ptLine.x < rView.left || ptLine.x > rView.right) ? (GetParent()->GetScrollPosition().x + ptLine.x - rView.CenterPoint().x) : GetParent()->GetScrollPosition().x, (ptLine.y < rView.top || ptLine.y > rView.bottom) ? (GetParent()->GetScrollPosition().y + ptLine.y - rView.CenterPoint().y) : GetParent()->GetScrollPosition().y));
							break;
						}
						return TRUE;
					}
				}
				for (m_wndCode.HideSelection(FALSE, FALSE), m_wndCode.SetSel(nPos[0] + nPos[2], ((nPos[3] = szCode.Mid(nPos[0] + nPos[2]).Find(CString(EOL))) >= 0) ? (nPos[0] + nPos[2] + nPos[3]) : -1), ptLine = m_wndCode.PosFromChar(nPos[0] + nPos[2]), GetParent()->GetWindowRect(rView), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->ClientToScreen(&ptLine); !rView.PtInRect(ptLine); )
				{
					GetParent()->ScrollToPosition(CPoint((ptLine.x < rView.left || ptLine.x > rView.right) ? (GetParent()->GetScrollPosition().x + ptLine.x - rView.CenterPoint().x) : GetParent()->GetScrollPosition().x, (ptLine.y < rView.top || ptLine.y > rView.bottom) ? (GetParent()->GetScrollPosition().y + ptLine.y - rView.CenterPoint().y) : GetParent()->GetScrollPosition().y));
					break;
				}
				return TRUE;
			}
		}
		break;
	}
	return FALSE;
}

VOID CTCProcedurePropertiesCodeDialog::UpdateCode(LPCTSTR pszText)
{
	m_szCode[0] = pszText;
}

BOOL CTCProcedurePropertiesCodeDialog::HasCode() CONST
{
	return !m_szCode[0].IsEmpty();
}

VOID CTCProcedurePropertiesCodeDialog::DoFindCode()
{
	CHourglassCursor  cCursor;

	ShowMessage((!m_dlgFind.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

BOOL CTCProcedurePropertiesCodeDialog::CanFindCode() CONST
{
	return((CWnd::GetFocus() == GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT) && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->GetWindowTextLength() > 0 && !m_wndCode.IsProtected() && !IsWindow(m_dlgFind.GetSafeHwnd()) && !IsWindow(m_dlgReplace.GetSafeHwnd()) && !IsWindow(m_dlgGoTo.GetSafeHwnd())) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesCodeDialog::DoFindNextCode()
{
	LONG  nPos[2];
	CString  szText;

	if (IsWindow(m_dlgFind.GetSafeHwnd()))
	{
		for (m_dlgFind.GetDlgItem(IDC_TCPROCEDURE_FIND_TEXT)->GetWindowText(szText), m_wndCode.GetSel(nPos[0], nPos[1]), nPos[0] = nPos[1] = nPos[0] + szText.GetLength(), m_wndCode.SetSel(nPos[0], nPos[1]); !szText.IsEmpty(); )
		{
			ShowMessage((!SearchCode(szText, TRUE, FALSE, m_dlgFind.IsDlgButtonChecked(IDC_TCPROCEDURE_FIND_CASE), m_dlgFind.IsDlgButtonChecked(IDC_TCPROCEDURE_FIND_WORD))) ? USER_INFORMATIONAL_TCPROCEDURE_FIND_TEXT_NOTHING : USER_NOERROR);
			break;
		}
	}
}
VOID CTCProcedurePropertiesCodeDialog::DoFindNextCode(BOOL bMatchCase, BOOL bMatchWord)
{
	ShowMessage((!SearchCode(m_wndCode.GetSelText(), TRUE, FALSE, bMatchCase, bMatchWord)) ? USER_INFORMATIONAL_TCPROCEDURE_FIND_TEXT_NOTHING : USER_NOERROR);
}
VOID CTCProcedurePropertiesCodeDialog::DoFindNextCode(LPCTSTR pszText, BOOL bSearchAll, BOOL bMatchCase, BOOL bMatchWord)
{
	ShowMessage((!SearchCode(pszText, TRUE, bSearchAll, bMatchCase, bMatchWord)) ? USER_INFORMATIONAL_TCPROCEDURE_FIND_TEXT_NOTHING : USER_NOERROR);
}

BOOL CTCProcedurePropertiesCodeDialog::CanFindNextCode() CONST
{
	return((CWnd::GetFocus() == GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT) && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->GetWindowTextLength() > 0 && !m_wndCode.IsProtected() && (IsWindow(m_dlgFind.GetSafeHwnd()) || !m_wndCode.GetSelText().IsEmpty())) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesCodeDialog::DoFindPreviousCode()
{
	CString  szText;

	if (IsWindow(m_dlgFind.GetSafeHwnd()))
	{
		for (m_dlgFind.GetDlgItem(IDC_TCPROCEDURE_FIND_TEXT)->GetWindowText(szText); !szText.IsEmpty(); )
		{
			ShowMessage((!SearchCode(szText, FALSE, FALSE, m_dlgFind.IsDlgButtonChecked(IDC_TCPROCEDURE_FIND_CASE), m_dlgFind.IsDlgButtonChecked(IDC_TCPROCEDURE_FIND_WORD))) ? USER_INFORMATIONAL_TCPROCEDURE_FIND_TEXT_NOTHING : USER_NOERROR);
			break;
		}
	}
}
VOID CTCProcedurePropertiesCodeDialog::DoFindPreviousCode(BOOL bMatchCase, BOOL bMatchWord)
{
	ShowMessage((!SearchCode(m_wndCode.GetSelText(), FALSE, FALSE, bMatchCase, bMatchWord)) ? USER_INFORMATIONAL_TCPROCEDURE_FIND_TEXT_NOTHING : USER_NOERROR);
}
VOID CTCProcedurePropertiesCodeDialog::DoFindPreviousCode(LPCTSTR pszText, BOOL bSearchAll, BOOL bMatchCase, BOOL bMatchWord)
{
	ShowMessage((!SearchCode(pszText, FALSE, bSearchAll, bMatchCase, bMatchWord)) ? USER_INFORMATIONAL_TCPROCEDURE_FIND_TEXT_NOTHING : USER_NOERROR);
}

BOOL CTCProcedurePropertiesCodeDialog::CanFindPreviousCode() CONST
{
	return((CWnd::GetFocus() == GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT) && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->GetWindowTextLength() > 0 && !m_wndCode.IsProtected() && (IsWindow(m_dlgFind.GetSafeHwnd()) || !m_wndCode.GetSelText().IsEmpty())) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesCodeDialog::DoReplaceCode()
{
	CHourglassCursor  cCursor;

	ShowMessage((!m_dlgReplace.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

BOOL CTCProcedurePropertiesCodeDialog::CanReplaceCode() CONST
{
	return((CWnd::GetFocus() == GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT) && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->GetWindowTextLength() > 0 && !m_wndCode.IsProtected() && !IsWindow(m_dlgFind.GetSafeHwnd()) && !IsWindow(m_dlgReplace.GetSafeHwnd()) && !IsWindow(m_dlgGoTo.GetSafeHwnd())) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
}

VOID CTCProcedurePropertiesCodeDialog::DoGoToCode()
{
	CHourglassCursor  cCursor;

	ShowMessage((!m_dlgGoTo.Create(this)) ? SYSTEM_WARNING_DIALOG_OPEN_FAILURE : SYSTEM_NOERROR);
}

BOOL CTCProcedurePropertiesCodeDialog::CanGoToCode() CONST
{
	return((CWnd::GetFocus() == GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT) && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->GetWindowTextLength() > 0 && !m_wndCode.IsProtected() && !IsWindow(m_dlgFind.GetSafeHwnd()) && !IsWindow(m_dlgReplace.GetSafeHwnd()) && !IsWindow(m_dlgGoTo.GetSafeHwnd())) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesCodeDialog::DoUndo()
{
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT, EM_UNDO);
}

BOOL CTCProcedurePropertiesCodeDialog::CanUndo() CONST
{
	return((CWnd::GetFocus() == GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT) && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->SendMessage(EM_CANUNDO) && !m_wndCode.IsProtected()) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
}

VOID CTCProcedurePropertiesCodeDialog::DoRedo()
{
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT, EM_REDO);
}

BOOL CTCProcedurePropertiesCodeDialog::CanRedo() CONST
{
	return((CWnd::GetFocus() == GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT) && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->SendMessage(EM_CANREDO) && !m_wndCode.IsProtected()) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
}

VOID CTCProcedurePropertiesCodeDialog::DoCutSel()
{
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT, WM_CUT);
}

BOOL CTCProcedurePropertiesCodeDialog::CanCutSel() CONST
{
	DWORD  dwSel[2];

	if (CWnd::GetFocus() == GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT) && !m_wndCode.IsProtected())
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->SendMessage(EM_GETSEL, (WPARAM)&dwSel[0], (LPARAM)&dwSel[1]);
		return((dwSel[0] < dwSel[1]) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	}
	return FALSE;
}

VOID CTCProcedurePropertiesCodeDialog::DoCopySel()
{
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT, WM_COPY);
}

BOOL CTCProcedurePropertiesCodeDialog::CanCopySel() CONST
{
	DWORD  dwSel[2];

	if (CWnd::GetFocus() == GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT) && !m_wndCode.IsProtected())
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->SendMessage(EM_GETSEL, (WPARAM)&dwSel[0], (LPARAM)&dwSel[1]);
		return((dwSel[0] < dwSel[1]) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	}
	return FALSE;
}

VOID CTCProcedurePropertiesCodeDialog::DoPasteSel()
{
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT, WM_PASTE);
}

BOOL CTCProcedurePropertiesCodeDialog::CanPasteSel() CONST
{
	return((CWnd::GetFocus() == GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT) && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->SendMessage(EM_CANPASTE, CF_TEXT) && !m_wndCode.IsProtected()) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
}

VOID CTCProcedurePropertiesCodeDialog::DoDeleteSel()
{
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT, WM_CLEAR);
}

BOOL CTCProcedurePropertiesCodeDialog::CanDeleteSel() CONST
{
	DWORD  dwSel[2];

	if (CWnd::GetFocus() == GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT) && !m_wndCode.IsProtected())
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->SendMessage(EM_GETSEL, (WPARAM)&dwSel[0], (LPARAM)&dwSel[1]);
		return((dwSel[0] < dwSel[1]) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	}
	return FALSE;
}

VOID CTCProcedurePropertiesCodeDialog::DoSelectAllCode()
{
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT, EM_SETSEL, 0, -1);
}

VOID CTCProcedurePropertiesCodeDialog::UnSelectAllCode()
{
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT, EM_SETSEL, (WPARAM)-1);
}

BOOL CTCProcedurePropertiesCodeDialog::CanSelectAllCode() CONST
{
	return((CWnd::GetFocus() == GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT) && GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->GetWindowTextLength() > 0 && !m_wndCode.IsProtected()) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
}

VOID CTCProcedurePropertiesCodeDialog::ShowDialogs(BOOL bShow)
{
	if (IsWindow(m_dlgFind.GetSafeHwnd()))
	{
		for (m_dlgFind.ShowWindow((bShow) ? SW_SHOW : SW_HIDE); bShow; )
		{
			m_dlgFind.SetFocus();
			break;
		}
		return;
	}
	if (IsWindow(m_dlgReplace.GetSafeHwnd()))
	{
		for (m_dlgReplace.ShowWindow((bShow) ? SW_SHOW : SW_HIDE); bShow; )
		{
			m_dlgReplace.SetFocus();
			break;
		}
		return;
	}
	if (IsWindow(m_dlgGoTo.GetSafeHwnd()))
	{
		for (m_dlgGoTo.ShowWindow((bShow) ? SW_SHOW : SW_HIDE); bShow; )
		{
			m_dlgGoTo.SetFocus();
			break;
		}
		return;
	}
}

BOOL CTCProcedurePropertiesCodeDialog::HasDialogs() CONST
{
	return((IsWindow(m_dlgFind.GetSafeHwnd()) || IsWindow(m_dlgGoTo.GetSafeHwnd()) || IsWindow(m_dlgReplace.GetSafeHwnd())) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesCodeDialog::GetPrintProperties(CRichEditCtrl **pEditCtrl) CONST
{
	*pEditCtrl = (CRichEditCtrl *)GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT);
	return TRUE;
}

VOID CTCProcedurePropertiesCodeDialog::AdjustToPrivileges()
{
	return;
}

CTCProcedurePropertiesThreadView *CTCProcedurePropertiesCodeDialog::GetParent() CONST
{
	return((CTCProcedurePropertiesThreadView *)CLocaleDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesCodeDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParent()->GetParent()->GetParent()->GetParent();
}

VOID CTCProcedurePropertiesCodeDialog::ShowInfo()
{
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_CODE_USECUSTOMCODE, m_bCustomCode);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT, EM_SETSEL);
}

INT CTCProcedurePropertiesCodeDialog::FindKeyword(LPCTSTR pszSourceCode, LPCTSTR pszKeyword, INT nPos) CONST
{
	LPCTSTR  pPos;

	return(((pPos = FindKeyword(&pszSourceCode[nPos], pszKeyword))) ? ((INT)(pPos - pszSourceCode) - nPos) : -1);
}
LPCTSTR CTCProcedurePropertiesCodeDialog::FindKeyword(LPCTSTR pszSourceCode, LPCTSTR pszKeyword) CONST
{
	LPCTSTR  pPos[2];

	for (pPos[0] = pszSourceCode; (pPos[1] = _tcsstr(pPos[0], pszKeyword)); pPos[0] = pPos[1] + lstrlen(pszKeyword))
	{
		if ((pPos[1] == pszSourceCode || (!_istalnum(pPos[1][-1]) && pPos[1][-1] != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE))) && (pPos[1] == pszSourceCode + lstrlen(pszSourceCode) - lstrlen(pszKeyword) || (!_istalnum(pPos[1][lstrlen(pszKeyword)]) && pPos[1][lstrlen(pszKeyword)] != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE)))) break;
		continue;
	}
	return pPos[1];
}

BOOL CTCProcedurePropertiesCodeDialog::IsModified() CONST
{
	INT  nBreakpoint[2];
	INT  nBreakpoints[2];
	CStringArray  szBreakpoints;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint[2];
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;

	for (nBreakpoint[0] = 0, nBreakpoints[0] = (GetBreakpoints(szBreakpoints, pDatabaseTCProcedureThreadBreakpoints) == m_szBreakpoints.GetSize()) ? (INT)szBreakpoints.GetSize() : -1; nBreakpoint[0] < nBreakpoints[0]; nBreakpoint[0]++)
	{
		for (nBreakpoint[1] = 0, nBreakpoints[1] = (INT)m_szBreakpoints.GetSize(); nBreakpoint[1] < nBreakpoints[1]; nBreakpoint[1] = nBreakpoint[1] + 1)
		{
			if ((pDatabaseTCProcedureThreadBreakpoint[1] = ((pDatabaseTCProcedureThreadBreakpoint[0] = (m_szBreakpoints.GetAt(nBreakpoint[1]) == szBreakpoints.GetAt(nBreakpoint[0])) ? pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint[0]) : (CDatabaseTCProcedureThreadBreakpoint *)NULL)) ? m_pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint[1]) : (CDatabaseTCProcedureThreadBreakpoint *)NULL) && pDatabaseTCProcedureThreadBreakpoint[0]->Compare(pDatabaseTCProcedureThreadBreakpoint[1])) break;
			continue;
		}
		if (nBreakpoint[1] == nBreakpoints[1]) break;
	}
	return((m_szCode[0] != m_szCode[1] || nBreakpoint[0] != nBreakpoints[0]) ? TRUE : FALSE);
}

void CTCProcedurePropertiesCodeDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesCodeDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesCodeDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesCodeDialog)
	ON_WM_SHOWWINDOW()
	ON_WM_HELPINFO()
	ON_MESSAGE(DM_GETDEFID, OnGetDefID)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_CODE_GENERATECODE, OnGenerateCode)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_CODE_USECUSTOMCODE, OnUseCustomCode)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_CODE_HELP, OnHelp)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesCodeDialog message handlers

BOOL CTCProcedurePropertiesCodeDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	m_wndCode.Create(this, IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_USECUSTOMCODE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_HELP)->EnableWindow();
	ShowInfo();
	return FALSE;
}

LRESULT CTCProcedurePropertiesCodeDialog::OnGetDefID(WPARAM wParam, LPARAM lParam)
{
	return MAKELONG(0, DC_HASDEFID);
}

BOOL CTCProcedurePropertiesCodeDialog::OnCommand(WPARAM wParam, LPARAM lParam)
{
	if (wParam == IDCANCEL) return TRUE;
	return CLocaleDialog::OnCommand(wParam, lParam);
}

void CTCProcedurePropertiesCodeDialog::OnShowWindow(BOOL bShow, UINT nStatus)
{
	BOOL  bCustomCode;
	CDatabaseTCProcedure  cDatabaseTCProcedure;

	if (bShow)
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_GENERATECODE)->EnableWindow((GetParentDisplay()->GetProcedure(&cDatabaseTCProcedure) && !cDatabaseTCProcedure.GetName().IsEmpty() && (cDatabaseTCProcedure.GetAttributes() & TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE) != TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE), CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_CODE_USECUSTOMCODE, (cDatabaseTCProcedure.GetAttributes() & (TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE | TCPROCEDURE_SOURCECODE_CUSTOM)) ? TRUE : FALSE), AccessControl(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT, (bCustomCode = (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_CODE_USECUSTOMCODE)) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE)), AccessControl(IDC_TCPROCEDURE_PROPERTIES_CODE_USECUSTOMCODE, ((cDatabaseTCProcedure.GetAttributes() & TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE) != TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE); bCustomCode; )
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->SetFocus();
			break;
		}
	}
	CLocaleDialog::OnShowWindow(bShow, nStatus);
}

void CTCProcedurePropertiesCodeDialog::OnGenerateCode()
{
	CString  szCode;
	CHourglassCursor  cCursor;

	GetParentDisplay()->GenerateSourceCode(szCode);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->SetWindowText((m_szCode[0] = szCode));
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT, EM_SETSEL);
}

void CTCProcedurePropertiesCodeDialog::OnUseCustomCode()
{
	BOOL  bCustomCode;
	CHourglassCursor  cCursor;

	for (AccessControl(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT, (bCustomCode = (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_CODE_USECUSTOMCODE)) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE)); bCustomCode; )
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT, EM_SETSEL);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CODE_TEXT)->SetFocus();
		break;
	}
}

BOOL CTCProcedurePropertiesCodeDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESCODEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesCodeDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESCODEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTCStackList

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesTCStackList, CTextView)

CTCProcedurePropertiesTCStackList::CTCProcedurePropertiesTCStackList() : CTextView()
{
	return;
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesTCStackList, CTextView)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesTCStackList)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTCStackList message handlers

BOOL CTCProcedurePropertiesTCStackList::OnContentMessage(UINT message, WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	INT  nIndex;
	CTextViewLock  cLock(this);

	if (message == WM_LBUTTONDOWN)
	{
		if ((nIndex = FindTextFromPoint(CPoint(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam)))) >= 0 || nIndex < 0)
		{
			SetCurText(nIndex);
			SetFocus();
		}
		GetParent()->SetTimer(0, 0, NULL);
		return FALSE;
	}
	if (message == WM_KEYDOWN)
	{
		if ((wParam == VK_UP || wParam == VK_DOWN) && GetCurText() < 0)
		{
			SetCurText((wParam == VK_UP) ? (GetTextCount() - 1) : 0);
			GetParent()->SetTimer(0, 0, NULL);
			return FALSE;
		}
		if (wParam == VK_ESCAPE) SetCurText(-1);
		GetParent()->SetTimer(0, 0, NULL);
	}
	return FALSE;
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTCStackDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesTCStackDialog, CLocaleDialog)

CTCProcedurePropertiesTCStackDialog::CTCProcedurePropertiesTCStackDialog(CWnd *pParentWnd) : CLocaleDialog(CTCProcedurePropertiesTCStackDialog::IDD, pParentWnd)
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesTCStackDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
	m_pCriticalSection = new CCriticalSection;
}

CTCProcedurePropertiesTCStackDialog::~CTCProcedurePropertiesTCStackDialog()
{
	delete m_pCriticalSection;
}

BOOL CTCProcedurePropertiesTCStackDialog::SetInfo(CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	return TRUE;
}

BOOL CTCProcedurePropertiesTCStackDialog::GetInfo(CDatabaseTCProcedure *pDatabaseTCProcedure) CONST
{
	return TRUE;
}

BOOL CTCProcedurePropertiesTCStackDialog::UpdateTCStack(CONST CTCProcedureItem *pItem)
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nCount;
	INT  nDigits;
	INT  nColumn;
	INT  nColumns;
	INT  nColIndex;
	CString  szFlags;
	CString  szItem[2];
	CStringArray  szColumns;
	CStringTools  cStringTools;
	CTCProcedureItem  *pStackItem;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCPacket  cDatabaseTCPacket;

	if (Lock())
	{
		for (; (nIndex = m_pTCProcedureItems.Find(pItem->GetThread(), pItem->GetStep(), pItem->GetSequence(), pItem->GetFunction(), pItem->GetEntryID(), pItem->GetScheduleTime())) < 0; )
		{
			for (nIndex = 0, nCount = (INT)m_pTCProcedureItems.GetSize(); nIndex < nCount; nIndex++)
			{
				if ((pStackItem = m_pTCProcedureItems.GetAt(nIndex)) != (CTCProcedureItem *)NULL)
				{
					if (pStackItem->GetReleaseTime() > pItem->GetReleaseTime()) break;
					continue;
				}
			}
			if ((pStackItem = new CTCProcedureItem))
			{
				for (nColumn = 0, nColumns = (m_wndList.GetColumns(szColumns)) ? (INT)szColumns.GetSize() : -1, pStackItem->Copy(pItem), m_pTCProcedureItems.InsertAt(nIndex, pStackItem, 1), nDigits = max(cStringTools.ConvertIntToString((nCount = m_wndList.GetTextCount()) + 1).GetLength(), 3), nColIndex = -1; nColumn < nColumns; nColumn++)
				{
					for (szItem[0].Empty(); szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_NUMBER); )
					{
						szItem[0] = cStringTools.ConvertIntToPaddedString(nIndex + 1, nDigits);
						nColIndex = nColumn;
						break;
					}
					if (szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_NAME))
					{
						szItem[0].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKNAME_FORMAT), (LPCTSTR)pItem->GetFunction(), (LPCTSTR)pItem->GetSequence());
						szItem[0] = (pItem->GetSequence().IsEmpty()) ? pItem->GetFunction() : szItem[0];
					}
					for (; szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_DESCRIPTION); )
					{
						szItem[0] = (pItem->GetFunction(&cDatabaseTCFunction)) ? cDatabaseTCFunction.GetDescription() : EMPTYSTRING;
						break;
					}
					for (; szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_ARGUMENTS); )
					{
						szItem[0] = (pItem->GetFunction(&cDatabaseTCFunction) && pItem->GetPacket(&cDatabaseTCPacket)) ? EnumTCStackItemArguments(&cDatabaseTCFunction, &cDatabaseTCPacket) : EMPTYSTRING;
						break;
					}
					if (szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_FLAGS))
					{
						szFlags.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKFLAGS_BLOCKED), pItem->GetBlockID());
						szItem[0] = (pItem->GetGroupFlag()) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKFLAGS_GROUPED) : EMPTYSTRING;
						szItem[0] += (pItem->GetBlockID() >= 0) ? ((!szItem[0].IsEmpty()) ? (STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKFLAGS_SEPARATOR) + szFlags) : szFlags) : EMPTYSTRING;
					}
					for (; szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_TCPACKET); )
					{
						szItem[0] = (pItem->GetPacket(&cDatabaseTCPacket)) ? cDatabaseTCPacket.GetTag() : EMPTYSTRING;
						break;
					}
					for (; szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_RELEASETIME); )
					{
						szItem[0] = (pItem->GetReleaseTime() > 0) ? pItem->GetReleaseTime().FormatGmt(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKARGUMENTS_TIMEFORMAT)) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKRELEASETIME_IMMEDIATE);
						break;
					}
					for (; szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_RELEASEOFFSET); )
					{
						szItem[0] = (!pItem->GetSequence().IsEmpty() && pItem->GetEntryID() > 0 && pItem->GetReleaseTimeOffset() > 0) ? CTimeTag(1000000 * (SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY)) + 1000 * (TIMETAG)pItem->GetReleaseTimeOffset()).FormatGmt(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKARGUMENTS_TIMEOFFSETFORMAT)) : EMPTYSTRING;
						break;
					}
					for (; szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_EXECUTIONTIME); )
					{
						szItem[0] = (pItem->GetExecutionTime() > 0) ? pItem->GetExecutionTime().FormatGmt(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKARGUMENTS_TIMEFORMAT)) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKEXECUTIONTIME_IMMEDIATE);
						break;
					}
					for (; szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_EXECUTIONOFFSET); )
					{
						szItem[0] = (!pItem->GetSequence().IsEmpty() && pItem->GetEntryID() > 0 && pItem->GetExecutionTimeOffset() > 0) ? CTimeTag(1000000 * (SECONDSPERDAY*(CTime::GetCurrentTime().GetTime() / SECONDSPERDAY)) + 1000 * (TIMETAG)pItem->GetExecutionTimeOffset()).FormatGmt(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKARGUMENTS_TIMEOFFSETFORMAT)) : EMPTYSTRING;
						break;
					}
					for (; szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_AUTHORIZATION); )
					{
						szItem[0] = (pItem->GetCriticalFlag()) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKAUTHORIZATION_REQUIRED) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKAUTHORIZATION_NOTREQUIRED);
						break;
					}
					for (; szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_STATUS); )
					{
						szItem[0] = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_SCHEDULED);
						break;
					}
					for (; szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_RESULT); )
					{
						szItem[0] = EMPTYSTRING;
						break;
					}
					szItem[1] = (!szItem[1].IsEmpty()) ? (szItem[1] + CTextView::GetColumnDelimiter() + szItem[0]) : szItem[0];
				}
				for (nItem = (max(cStringTools.ConvertIntToString(nCount).GetLength(), 3) == max(cStringTools.ConvertIntToString(nCount + 1).GetLength(), 3) && nIndex == nCount) ? (nCount + 1) : ((max(cStringTools.ConvertIntToString(nCount).GetLength(), 3) == max(cStringTools.ConvertIntToString(nCount + 1).GetLength(), 3)) ? nIndex : 0), nItems = (m_wndList.InsertText(nIndex, szItem[1])) ? (nCount + 1) : 0; nItem < nItems; nItem++)
				{
					m_wndList.SetText(nItem, nColIndex, cStringTools.ConvertIntToPaddedString(nItem + 1, nDigits), nItem == nItems - 1);
					continue;
				}
				break;
			}
			Unlock();
			return FALSE;
		}
		Unlock();
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_REMOVE)->EnableWindow((m_wndList.GetCurText() >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_REMOVEALL)->EnableWindow((m_wndList.GetTextCount() > 0) ? TRUE : FALSE);
	m_wndList.SetFocus();
	return TRUE;
}
BOOL CTCProcedurePropertiesTCStackDialog::UpdateTCStack(CONST CTCProcedureItem *pItem, LPCTSTR pszStatus, LPCTSTR pszResult)
{
	INT  nIndex;
	INT  nEntry;
	INT  nEntries;
	INT  nColIndex[2];
	CUIntArray  nEntryIDs;
	CTCProcedureItem  *pStackItem;

	if (Lock())
	{
		for (nColIndex[0] = FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_STATUS)), nColIndex[1] = FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_RESULT)); (nIndex = m_pTCProcedureItems.Find(pItem->GetThread(), pItem->GetStep(), pItem->GetSequence(), pItem->GetFunction(), pItem->GetEntryID(), pItem->GetScheduleTime())) >= 0; )
		{
			m_wndList.SetText(nIndex, nColIndex[0], pszStatus);
			m_wndList.SetText(nIndex, nColIndex[1], pszResult);
			break;
		}
		for (nEntry = 0, nEntries = (pItem->GetBlockID() >= 0 || !lstrcmp(pszStatus, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_NOTSCHEDULED)) || !lstrcmp(pszStatus, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_EXPIRED)) || !lstrcmp(pszStatus, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_ABORTED)) || (!lstrcmp(pszStatus, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_EXECUTED)) && !lstrcmp(pszResult, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKRESULT_FAILED)))) ? m_pTCProcedureItems.Collect(nIndex, nEntryIDs) : 0; nEntry < nEntries; nEntry++)
		{
			if ((pStackItem = (pItem->GetBlockID() >= 0 || nIndex < (INT)nEntryIDs.GetAt(nEntry)) ? m_pTCProcedureItems.GetAt(nEntryIDs.GetAt(nEntry)) : (CTCProcedureItem *)NULL) != (CTCProcedureItem *)NULL)
			{
				m_wndList.SetText(nEntryIDs.GetAt(nEntry), nColIndex[0], (!lstrcmp(pszResult, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKRESULT_FAILED))) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_ABORTED) : pszStatus);
				m_wndList.SetText(nEntryIDs.GetAt(nEntry), nColIndex[1], (!lstrcmp(pszResult, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKRESULT_FAILED))) ? EMPTYSTRING : pszResult);
			}
		}
		Unlock();
		return((nIndex >= 0) ? TRUE : FALSE);
	}
	return FALSE;
}
BOOL CTCProcedurePropertiesTCStackDialog::UpdateTCStack(CONST CTCProcedureItem *pItem, CONST CTCPacket *pTCPacket, BOOL &bLogging)
{
	INT  nIndex;
	INT  nEntry;
	INT  nEntries;
	INT  nColIndex;
	CUIntArray  nEntryIDs;
	CTCProcedureItem  *pStackItem;

	if (Lock())
	{
		for (nColIndex = FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_STATUS)), bLogging = LogTCStackItem(pItem->GetSequence(), pItem->GetFunction(), pTCPacket, max(pItem->GetScheduleTime(), pItem->GetReleaseTime())); (nIndex = m_pTCProcedureItems.Find(pItem->GetThread(), pItem->GetStep(), pItem->GetSequence(), pItem->GetFunction(), pItem->GetEntryID(), pItem->GetScheduleTime())) >= 0; )
		{
			m_wndList.SetText(nIndex, nColIndex, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_RELEASED));
			break;
		}
		for (nEntry = 0, nEntries = (pItem->GetBlockID() >= 0) ? m_pTCProcedureItems.Collect(nIndex, nEntryIDs) : 0; nEntry < nEntries; nEntry++)
		{
			if ((pStackItem = (pItem->GetBlockID() >= 0 || nIndex < (INT)nEntryIDs.GetAt(nEntry)) ? m_pTCProcedureItems.GetAt(nEntryIDs.GetAt(nEntry)) : (CTCProcedureItem *)NULL))
			{
				m_wndList.SetText(nEntryIDs.GetAt(nEntry), nColIndex, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_RELEASED));
				continue;
			}
		}
		Unlock();
		return((nIndex >= 0) ? TRUE : FALSE);
	}
	return FALSE;
}
VOID CTCProcedurePropertiesTCStackDialog::UpdateTCStack(BOOL bRunning, BOOL bSuspended)
{
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_SUSPEND)->EnableWindow(bRunning  &&  !bSuspended);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RESUME)->EnableWindow(bRunning  &&  bSuspended);
}
VOID CTCProcedurePropertiesTCStackDialog::UpdateTCStack(BOOL bAll)
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nDigits;
	INT  nEntry;
	INT  nEntries;
	INT  nColIndex;
	CString  szItem;
	CUIntArray  nEntryIDs;
	CStringTools  cStringTools;
	CTCProcedureItem  *pStackItem;

	if (Lock())
	{
		for (nItem = 0, nItems = (INT)m_pTCProcedureItems.GetSize(), nColIndex = FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_STATUS)), nCount = 0; nItem < nItems; nItem++)
		{
			for (nEntry = 0, nEntries = ((m_wndList.GetText(nItem, nColIndex, szItem) && szItem == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_SCHEDULED)) || bAll) ? m_pTCProcedureItems.Collect(nItem, nEntryIDs) : 0, nCount = 0; nEntry < nEntries; nEntry++)
			{
				if ((pStackItem = (nItem <= (INT)nEntryIDs.GetAt(nEntry)) ? m_pTCProcedureItems.GetAt(nEntryIDs.GetAt(nEntry) - nCount) : (CTCProcedureItem *)NULL))
				{
					for (m_wndList.DeleteText(nEntryIDs.GetAt(nEntry) - nCount); !nCount; )
					{
						GetParentDisplay()->UnscheduleProcedureCommand(pStackItem);
						break;
					}
					m_pTCProcedureItems.RemoveAt(nEntryIDs.GetAt(nEntry) - nCount);
					delete pStackItem;
					nItems--;
					nCount++;
				}
			}
			nItem = (!nCount) ? nItem : -1;
		}
		for (nItem = 0, nItems = m_wndList.GetTextCount(), nColIndex = FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_NUMBER)), nDigits = max(cStringTools.ConvertIntToString(nItems).GetLength(), 3); nItem < nItems; nItem++)
		{
			m_wndList.SetText(nItem, nColIndex, cStringTools.ConvertIntToPaddedString(nItem + 1, nDigits));
			continue;
		}
		if (!nCount  &&  nItems > 0)
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_MESSAGE)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_MESSAGE)->ShowWindow(SW_SHOWNA);
			CAudioDevice::AlertBySound();
		}
		Unlock();
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_REMOVE)->EnableWindow((m_wndList.GetCurText() >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_REMOVEALL)->EnableWindow((m_wndList.GetTextCount() > 0) ? TRUE : FALSE);
	m_wndList.SetFocus();
}

VOID CTCProcedurePropertiesTCStackDialog::ResetTCStack()
{
	CFileEx  cFile;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (Lock())
	{
		if (!m_szTCFunctionsLogFileName.IsEmpty() && m_bTCFunctionsLogReset)
		{
			if (cFile.Open(m_szTCFunctionsLogFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite | CFile::shareDenyNone))
			{
				if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, (LPOVERLAPPED)&fOverlapped))
				{
					for (; SetFilePointer(cFile.m_hFile, 0, (PLONG)NULL, FILE_BEGIN) == 0; )
					{
						SetEndOfFile(cFile.m_hFile);
						break;
					}
					UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
				}
				cFile.Close();
			}
		}
		UpdateTCStack();
		Unlock();
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_MESSAGE)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_MESSAGE)->EnableWindow(FALSE);
}

VOID CTCProcedurePropertiesTCStackDialog::UpdateTCStackItem(INT nIndex)
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nDigits;
	INT  nEntry;
	INT  nEntries;
	INT  nColIndex;
	CString  szItem;
	CUIntArray  nEntryIDs;
	CStringTools  cStringTools;
	CTCProcedureItem  *pStackItem;

	if (Lock())
	{
		for (nColIndex = FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_STATUS)), nCount = 0; m_wndList.GetText(nIndex, nColIndex, szItem) && szItem == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_SCHEDULED); )
		{
			for (nEntry = 0, nEntries = m_pTCProcedureItems.Collect(nIndex, nEntryIDs); nEntry < nEntries; nEntry++)
			{
				if ((pStackItem = m_pTCProcedureItems.GetAt(nEntryIDs.GetAt(nEntry) - nCount)) != (CTCProcedureItem *)NULL)
				{
					if (m_wndList.GetText(nEntryIDs.GetAt(nEntry) - nCount, nColIndex, szItem) && szItem == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_SCHEDULED))
					{
						for (m_wndList.DeleteText(nEntryIDs.GetAt(nEntry) - nCount); !nCount; )
						{
							GetParentDisplay()->UnscheduleProcedureCommand(pStackItem);
							break;
						}
						m_pTCProcedureItems.RemoveAt(nEntryIDs.GetAt(nEntry) - nCount);
						delete pStackItem;
						nCount++;
					}
				}
			}
			break;
		}
		for (nItem = 0, nItems = m_wndList.GetTextCount(), nColIndex = FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_NUMBER)), nDigits = max(cStringTools.ConvertIntToString(nItems).GetLength(), 3); nItem < nItems; nItem++)
		{
			m_wndList.SetText(nItem, nColIndex, cStringTools.ConvertIntToPaddedString(nItem + 1, nDigits));
			continue;
		}
		if (!nCount  &&  nItems > 0)
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_MESSAGE)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_MESSAGE)->ShowWindow(SW_SHOWNA);
			CAudioDevice::AlertBySound();
		}
		Unlock();
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_REMOVE)->EnableWindow((m_wndList.GetCurText() >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_REMOVEALL)->EnableWindow((m_wndList.GetTextCount() > 0) ? TRUE : FALSE);
	m_wndList.SetFocus();
}

BOOL CTCProcedurePropertiesTCStackDialog::IsTCStackReleaseWaitModeEnabled() CONST
{
	return m_bTCFunctionChecks[0];
}

CTimeSpan CTCProcedurePropertiesTCStackDialog::GetTCStackReleaseWaitInterval() CONST
{
	CSingleLock  cLock(m_pCriticalSection, TRUE);

	return m_tReleaseWaitInterval;
}

BOOL CTCProcedurePropertiesTCStackDialog::IsTCStackPreexecutionVerificationEnabled() CONST
{
	return m_bTCFunctionChecks[1];
}

BOOL CTCProcedurePropertiesTCStackDialog::IsTCStackExecutionVerificationEnabled() CONST
{
	return m_bTCFunctionChecks[2];
}

VOID CTCProcedurePropertiesTCStackDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITMODE, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITINTERVAL, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_NOPREEXECUTIONCHECKS, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_NOEXECUTIONCHECKS, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_FILENAME, bCheck);
}

CTCProcedurePropertiesThreadView *CTCProcedurePropertiesTCStackDialog::GetParent() CONST
{
	return((CTCProcedurePropertiesThreadView *)CLocaleDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesTCStackDialog::GetParentDisplay() CONST
{
	return GetParent()->GetParent()->GetParent()->GetParent()->GetParent();
}

BOOL CTCProcedurePropertiesTCStackDialog::LogTCStackItem(LPCTSTR pszSequence, LPCTSTR pszFunction, CONST CTCUnit *pTCUnit, CONST CTimeTag &tReleaseTime)
{
	INT  nByte;
	INT  nBytes;
	DWORD  cbData;
	CFileEx  cFile;
	CString  szData;
	CString  szWord;
	CString  szMessage;
	CByteArray  nData;
	CByteArray  nMessage;
	CStringTools  cStringTools;
	OVERLAPPED  fOverlapped = { 0,0,0,0,0 };

	if (!m_szTCFunctionsLogFileName.IsEmpty())
	{
		if (cFile.Open(m_szTCFunctionsLogFileName, CFile::modeCreate | CFile::modeNoTruncate | CFile::modeReadWrite | CFile::shareDenyNone))
		{
			if (LockFileEx(cFile.m_hFile, LOCKFILE_EXCLUSIVE_LOCK, 0, MAXDWORD, MAXDWORD, (LPOVERLAPPED)&fOverlapped))
			{
				for (nByte = 0, nBytes = pTCUnit->GetData(nData); nByte < nBytes; nByte++, szData = (nByte % 2 == 0) ? ((!szData.IsEmpty()) ? (szData + SPACE + szWord) : szWord) : szData)
				{
					szWord = (nByte % 2) ? (szWord + cStringTools.ConvertUIntToPaddedString(nData.GetAt(nByte), 2, 16)) : cStringTools.ConvertUIntToPaddedString(nData.GetAt(nByte), 2, 16);
					continue;
				}
				for (szMessage.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKNAME_FORMAT), pszFunction, pszSequence); !lstrlen(pszSequence); )
				{
					szMessage = pszFunction;
					break;
				}
				szMessage += TAB + tReleaseTime.FormatGmt(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKARGUMENTS_TIMEFORMAT)) + TAB + pTCUnit->GetTag() + TAB + szData + CR + EOL;
				nMessage.SetSize(szMessage.GetLength() + 1);
#ifndef UNICODE
				CopyMemory(nMessage.GetData(), (LPCTSTR)szMessage, szMessage.GetLength() + 1);
#else
				WideCharToMultiByte(CP_ACP, 0, szMessage, -1, (LPSTR)nMessage.GetData(), (INT)nMessage.GetSize(), (LPCSTR)NULL, (LPBOOL)NULL);
#endif
				for (cFile.SeekToEnd(); WriteFile(cFile.m_hFile, nMessage.GetData(), szMessage.GetLength(), &cbData, (LPOVERLAPPED)NULL); )
				{
					UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
					cFile.Close();
					return TRUE;
				}
				UnlockFileEx(cFile.m_hFile, 0, MAXDWORD, MAXDWORD, &fOverlapped);
			}
			cFile.Close();
		}
		return FALSE;
	}
	return TRUE;
}

CString CTCProcedurePropertiesTCStackDialog::EnumTCStackItemArguments(CONST CDatabaseTCFunction *pDatabaseTCFunction, CONST CDatabaseTCPacket *pDatabaseTCPacket) CONST
{
	INT  nArgument;
	INT  nArguments;
	CString  szArgument;
	CString  szArguments;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;

	for (nArgument = 0, nArguments = (INT)pDatabaseTCFunction->GetSize(); nArgument < nArguments; nArgument++)
	{
		if ((pDatabaseTCFunctionElement = pDatabaseTCFunction->GetAt(nArgument)) != (CDatabaseTCFunctionElement *)NULL)
		{
			if ((pDatabaseTCFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER) && (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO)
			{
				szArgument.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKARGUMENTS_FORMAT), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
				szArguments += (!szArguments.IsEmpty()) ? (STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKARGUMENTS_SEPARATOR) + szArgument) : szArgument;
			}
		}
	}
	for (nArgument = 0, nArguments = (INT)pDatabaseTCPacket->GetSize(); nArgument < nArguments; nArgument++)
	{
		if ((pDatabaseTCPacketParameter = pDatabaseTCPacket->GetAt(nArgument)) != (CDatabaseTCPacketParameter *)NULL)
		{
			if ((pDatabaseTCPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE) && (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO)
			{
				szArgument.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKARGUMENTS_FORMAT), (LPCTSTR)pDatabaseTCPacketParameter->GetTag(), (LPCTSTR)pDatabaseTCPacketParameter->GetConstValueAsText());
				szArguments += (!szArguments.IsEmpty()) ? (STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKARGUMENTS_SEPARATOR) + szArgument) : szArgument;
			}
		}
	}
	return szArguments;
}

INT CTCProcedurePropertiesTCStackDialog::FindColumnIndex(LPCTSTR pszColumn)
{
	INT  nColumn;
	INT  nColumns;
	CStringArray  szColumns;

	for (nColumn = 0, nColumns = (m_wndList.GetColumns(szColumns)) ? (INT)szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
	{
		if (szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

INT CTCProcedurePropertiesTCStackDialog::CalcColumnWidth(LPCTSTR pszColumn)
{
	CDC  *pDC;
	CFont  *pOldFont;
	CSize  sizeColumn;

	if ((pDC = GetDC()))
	{
		if ((pOldFont = pDC->SelectObject(GetFont())))
		{
			for (sizeColumn = pDC->GetTextExtent(CString(SPACE) + pszColumn + CString(SPACE)); !lstrcmp(pszColumn, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_NAME)) || !lstrcmp(pszColumn, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_DESCRIPTION)); )
			{
				sizeColumn.cx *= 3;
				break;
			}
			if (!lstrcmp(pszColumn, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_ARGUMENTS)) || !lstrcmp(pszColumn, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_STATUS))) sizeColumn.cx *= 4;
			if (!lstrcmp(pszColumn, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_RELEASETIME)) || !lstrcmp(pszColumn, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_RELEASEOFFSET)) || !lstrcmp(pszColumn, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_EXECUTIONTIME)) || !lstrcmp(pszColumn, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_EXECUTIONOFFSET)) || !lstrcmp(pszColumn, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_AUTHORIZATION))) sizeColumn.cx = (3 * sizeColumn.cx) / 2;
			if (!lstrcmp(pszColumn, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_FLAGS))) sizeColumn.cx = (5 * sizeColumn.cx) / 4;
			if (!lstrcmp(pszColumn, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_RESULT))) sizeColumn.cx *= 2;
			sizeColumn.cx += 6 * GetSystemMetrics(SM_CXEDGE);
			pDC->SelectObject(pOldFont);
			ReleaseDC(pDC);
			return sizeColumn.cx;
		}
		ReleaseDC(pDC);
	}
	return 0;
}

BOOL CTCProcedurePropertiesTCStackDialog::Lock()
{
	return m_pCriticalSection->Lock();
}

BOOL CTCProcedurePropertiesTCStackDialog::Unlock()
{
	return m_pCriticalSection->Unlock();
}

void CTCProcedurePropertiesTCStackDialog::DoDataExchange(CDataExchange *pDX)
{
	CLocaleDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesTCStackDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesTCStackDialog::PostNcDestroy()
{
	m_pTCProcedureItems.RemoveAll();
	CLocaleDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesTCStackDialog, CLocaleDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesTCStackDialog)
	ON_WM_TIMER()
	ON_WM_HELPINFO()
	ON_MESSAGE(DM_GETDEFID, OnGetDefID)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITMODE, OnReleaseWaitMode)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_NOPREEXECUTIONCHECKS, OnNoPreexecutionChecks)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_NOEXECUTIONCHECKS, OnNoExecutionChecks)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_SUSPEND, OnSuspendTCStack)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RESUME, OnResumeTCStack)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_REMOVE, OnRemoveCommand)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_REMOVEALL, OnRemoveAllCommands)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE, OnUseLogFile)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_BROWSE, OnBrowseLogFile)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_RESET, OnResetLogFile)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_FILENAME, OnEditchangeLogFileName)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITINTERVAL, OnSpinchangeReleaseWaitInterval)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTCStackDialog message handlers

BOOL CTCProcedurePropertiesTCStackDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rList;
	CUIntArray  nWidths;
	CStringArray  szColumns;
	CHourglassCursor  cCursor;

	CLocaleDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LIST)->GetWindowRect(rList);
	szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_NUMBER));
	szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_NAME));
	szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_DESCRIPTION));
	szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_ARGUMENTS));
	szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_FLAGS));
	szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_TCPACKET));
	szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_RELEASETIME));
	szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_RELEASEOFFSET));
	szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_EXECUTIONTIME));
	szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_EXECUTIONOFFSET));
	szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_AUTHORIZATION));
	szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_STATUS));
	szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKTITLEITEM_RESULT));
	for (nColumn = 0, nColumns = (INT)szColumns.GetSize(), ScreenToClient(rList), rList.DeflateRect(GetSystemMetrics(SM_CXEDGE), 0), m_szTCFunctionsLogFileName.Empty(), m_bTCFunctionChecks[0] = m_bTCFunctionChecks[1] = m_bTCFunctionChecks[2] = TRUE, m_bTCFunctionsLogReset = FALSE; nColumn < nColumns; nColumn++)
	{
		nWidths.Add((nColumn > 0) ? (nWidths.GetAt(nColumn - 1) + CalcColumnWidth(szColumns.GetAt(nColumn))) : CalcColumnWidth(szColumns.GetAt(nColumn)));
		continue;
	}
	if (m_wndList.Create(this, rList, TVS_HEADER | TVS_TOP | TVS_HSCROLL | TVS_VSCROLL | WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_TABSTOP | WS_VISIBLE) && m_wndList.SetColumns(szColumns, nWidths))
	{
		m_wndList.SetWindowPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LIST), 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE);
		Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITINTERVAL), TCPROCEDUREPROPERTIESTCSTACK_RELEASEWAIT_MINIMUMINTERVAL, TCPROCEDUREPROPERTIESTCSTACK_RELEASEWAIT_MAXIMUMINTERVAL);
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITINTERVAL), (m_tReleaseWaitInterval = TCPROCEDUREPROPERTIESTCSTACK_RELEASEWAIT_DEFAULTINTERVAL).GetTotalSeconds());
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITMODE, m_bTCFunctionChecks[0]);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_NOPREEXECUTIONCHECKS, !m_bTCFunctionChecks[1]);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_NOEXECUTIONCHECKS, !m_bTCFunctionChecks[2]);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITMODE)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITINTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITMODE));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITINTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITMODE));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_NOPREEXECUTIONCHECKS)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_NOEXECUTIONCHECKS)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_HELP)->EnableWindow();
	}
	return FALSE;
}

LRESULT CTCProcedurePropertiesTCStackDialog::OnGetDefID(WPARAM wParam, LPARAM lParam)
{
	return MAKELONG(0, DC_HASDEFID);
}

BOOL CTCProcedurePropertiesTCStackDialog::OnCommand(WPARAM wParam, LPARAM lParam)
{
	if (wParam == IDCANCEL) return TRUE;
	return CLocaleDialog::OnCommand(wParam, lParam);
}

void CTCProcedurePropertiesTCStackDialog::OnTimer(UINT_PTR nEventID)
{
	KillTimer(nEventID);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_REMOVE)->EnableWindow((m_wndList.GetCurText() >= 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_REMOVEALL)->EnableWindow((m_wndList.GetTextCount() > 0) ? TRUE : FALSE);
	CLocaleDialog::OnTimer(nEventID);
}

void CTCProcedurePropertiesTCStackDialog::OnReleaseWaitMode()
{
	for (m_bTCFunctionChecks[0] = IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITMODE); Lock(); )
	{
		m_tReleaseWaitInterval = (m_bTCFunctionChecks[0]) ? TCPROCEDUREPROPERTIESTCSTACK_RELEASEWAIT_DEFAULTINTERVAL : 0;
		Unlock();
		break;
	}
	Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITINTERVAL), TCPROCEDUREPROPERTIESTCSTACK_RELEASEWAIT_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITINTERVAL)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITMODE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITINTERVAL_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITMODE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITINTERVAL)->SetFocus();
}

void CTCProcedurePropertiesTCStackDialog::OnNoPreexecutionChecks()
{
	m_bTCFunctionChecks[1] = !IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_NOPREEXECUTIONCHECKS);
}

void CTCProcedurePropertiesTCStackDialog::OnNoExecutionChecks()
{
	m_bTCFunctionChecks[2] = !IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_NOEXECUTIONCHECKS);
}

void CTCProcedurePropertiesTCStackDialog::OnSuspendTCStack()
{
	CHourglassCursor  cCursor;

	GetParentDisplay()->SuspendProcedureCommandScheduling(TRUE);
}

void CTCProcedurePropertiesTCStackDialog::OnResumeTCStack()
{
	CHourglassCursor  cCursor;

	GetParentDisplay()->SuspendProcedureCommandScheduling(FALSE);
}

void CTCProcedurePropertiesTCStackDialog::OnRemoveCommand()
{
	CHourglassCursor  cCursor;

	UpdateTCStackItem(m_wndList.GetCurText());
}

void CTCProcedurePropertiesTCStackDialog::OnRemoveAllCommands()
{
	CHourglassCursor  cCursor;

	UpdateTCStack(FALSE);
}

void CTCProcedurePropertiesTCStackDialog::OnUseLogFile()
{
	CHourglassCursor  cCursor;

	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_RESET, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_FILENAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_FILENAME)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_BROWSE)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_RESET)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_FILENAME)->SetFocus();
}

void CTCProcedurePropertiesTCStackDialog::OnBrowseLogFile()
{
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_FILENAME, STRING(IDS_FILEBROWSEDIALOG_DOCUMENTFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_DOCUMENTFILTER));

	if (cFileBrowseDialog.DoModal() == IDOK) GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_FILENAME)->SetFocus();
}

void CTCProcedurePropertiesTCStackDialog::OnResetLogFile()
{
	m_bTCFunctionsLogReset = IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_RESET);
}

void CTCProcedurePropertiesTCStackDialog::OnEditchangeLogFileName()
{
	CString  szFileName;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_LOGFILE_FILENAME)->GetWindowText(szFileName); Lock(); )
	{
		m_szTCFunctionsLogFileName = szFileName;
		Unlock();
	}
}

void CTCProcedurePropertiesTCStackDialog::OnSpinchangeReleaseWaitInterval()
{
	CTimeSpan  tInterval;

	for (tInterval = Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_TCSTACK_RELEASEWAITINTERVAL)); Lock(); )
	{
		m_tReleaseWaitInterval = tInterval;
		Unlock();
		break;
	}
}

BOOL CTCProcedurePropertiesTCStackDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESTCSTACKDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesTCStackDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESTCSTACKDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesBranchDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesBranchDialog, CDisplayDialog)

CTCProcedurePropertiesBranchDialog::CTCProcedurePropertiesBranchDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesBranchDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesBranchDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentBranchItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentBranchItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentBranchItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentBranchItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesBranchDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentBranchItem *CTCProcedurePropertiesBranchDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesBranchDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesBranchDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCProcedurePropertiesBranchDialog::ShowProperties()
{
	CTCProcedureDocumentBranchItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_BRANCH_INVARIANTCONDITION)->SetWindowText(pStep->GetInvariantCondition());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_BRANCH_TESTEXPRESSION)->SetWindowText(pStep->GetTestExpression());
		return;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_BRANCH_INVARIANTCONDITION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_BRANCH_TESTEXPRESSION)->SetWindowText(EMPTYSTRING);
}

VOID CTCProcedurePropertiesBranchDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_BRANCH_INVARIANTCONDITION, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_BRANCH_TESTEXPRESSION, bCheck);
}

BOOL CTCProcedurePropertiesBranchDialog::IsModified() CONST
{
	CTCProcedureDocumentBranchItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

void CTCProcedurePropertiesBranchDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesBranchDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesBranchDialog::PostNcDestroy()
{
	delete m_pStep[1];
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesBranchDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesBranchDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_BRANCH_HELP, OnHelp)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_BRANCH_INVARIANTCONDITION, OnEditchangeInvariantCondition)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_BRANCH_TESTEXPRESSION, OnEditchangeTestExpression)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesBranchDialog message handlers

BOOL CTCProcedurePropertiesBranchDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_BRANCH_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_BRANCH_INVARIANTCONDITION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_BRANCH_INVARIANTCONDITION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_BRANCH_TESTEXPRESSION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_BRANCH_TESTEXPRESSION)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCProcedurePropertiesBranchDialog::OnEditchangeInvariantCondition()
{
	CString  szCondition;
	CTCProcedureDocumentBranchItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_BRANCH_INVARIANTCONDITION)->GetWindowText(szCondition);
		pStep->SetInvariantCondition(szCondition);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesBranchDialog::OnEditchangeTestExpression()
{
	CString  szExpression;
	CTCProcedureDocumentBranchItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_BRANCH_TESTEXPRESSION)->GetWindowText(szExpression);
		pStep->SetTestExpression(szExpression);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesBranchDialog::OnOK()
{
	CTCProcedureDocumentBranchItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesBranchDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESBRANCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesBranchDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESBRANCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSwitchDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesSwitchDialog, CDisplayDialog)

CTCProcedurePropertiesSwitchDialog::CTCProcedurePropertiesSwitchDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesSwitchDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesSwitchDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentSwitchItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentSwitchItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentSwitchItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentSwitchItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesSwitchDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentSwitchItem *CTCProcedurePropertiesSwitchDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesSwitchDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesSwitchDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCProcedurePropertiesSwitchDialog::ShowProperties()
{
	INT  nBranch;
	INT  nBranches;
	CStringTools  cStringTools;
	CTCProcedureDocumentSwitchItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (nBranch = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_GETCOUNT), nBranches = pStep->GetBranches(); nBranch < nBranches; nBranch++)
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_INSERTSTRING, nBranch, (LPARAM)(LPCTSTR)cStringTools.ConvertIntToString(nBranch + 1));
			continue;
		}
		while (nBranches < SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_GETCOUNT))
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_DELETESTRING, nBranches);
			continue;
		}
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_SETCURSEL, 0);
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHCOUNT), pStep->GetBranches());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_INVARIANTCONDITION)->SetWindowText(pStep->GetInvariantCondition());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_TESTEXPRESSION)->SetWindowText(pStep->GetBranchTestExpression((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_GETCURSEL) + 1));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION)->EnableWindow((nBranches > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER_STATIC)->EnableWindow((nBranches > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER)->EnableWindow((nBranches > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_TESTEXPRESSION_STATIC)->EnableWindow((nBranches > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_TESTEXPRESSION)->EnableWindow((nBranches > 0) ? TRUE : FALSE);
		return;
	}
	Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHCOUNT), 0);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_RESETCONTENT);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_INVARIANTCONDITION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_TESTEXPRESSION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_TESTEXPRESSION_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_TESTEXPRESSION)->EnableWindow(FALSE);
}

VOID CTCProcedurePropertiesSwitchDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SWITCH_INVARIANTCONDITION, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHCOUNT, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_TESTEXPRESSION, bCheck);
}

BOOL CTCProcedurePropertiesSwitchDialog::IsModified() CONST
{
	CTCProcedureDocumentSwitchItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

void CTCProcedurePropertiesSwitchDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesSwitchDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesSwitchDialog::PostNcDestroy()
{
	delete m_pStep[1];
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesSwitchDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesSwitchDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SWITCH_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, OnSelchangeBranchNumber)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SWITCH_INVARIANTCONDITION, OnEditchangeInvariantCondition)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_TESTEXPRESSION, OnEditchangeTextExpression)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHCOUNT, OnSpinchangeBranchCount)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSwitchDialog message handlers

BOOL CTCProcedurePropertiesSwitchDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHCOUNT), TCPROCEDUREPROPERTIESSWITCHSTEP_BRANCHCOUNT_MINIMUMNUMBER, TCPROCEDUREPROPERTIESSWITCHSTEP_BRANCHCOUNT_MAXIMUMNUMBER);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_INVARIANTCONDITION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_INVARIANTCONDITION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHCOUNT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHCOUNT)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCProcedurePropertiesSwitchDialog::OnEditchangeInvariantCondition()
{
	CString  szCondition;
	CTCProcedureDocumentSwitchItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_INVARIANTCONDITION)->GetWindowText(szCondition);
		pStep->SetInvariantCondition(szCondition);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSwitchDialog::OnEditchangeTextExpression()
{
	CString  szExpression;
	CTCProcedureDocumentSwitchItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_TESTEXPRESSION)->GetWindowText(szExpression);
		pStep->SetBranchTestExpression((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_GETCURSEL) + 1, szExpression);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSwitchDialog::OnSelchangeBranchNumber()
{
	CString  szExpression;
	CTCProcedureDocumentSwitchItem  *pStep;

	if ((pStep = GetStep())) szExpression = pStep->GetBranchTestExpression((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_GETCURSEL) + 1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_TESTEXPRESSION)->SetWindowText(szExpression);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSwitchDialog::OnSpinchangeBranchCount()
{
	INT  nBranch;
	INT  nBranches;
	CString  szExpression;
	CStringTools  cStringTools;
	CTCProcedureDocumentSwitchItem  *pStep;

	if ((pStep = GetStep()))
	{
		pStep->SetBranches((INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHCOUNT)));
		szExpression = pStep->GetBranchTestExpression((INT)min(max(SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_GETCURSEL), 0) + 1, Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHCOUNT))));
	}
	if ((nBranches = (INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHCOUNT))) >= 0)
	{
		for (nBranch = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_GETCOUNT); nBranch < nBranches; nBranch++)
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_INSERTSTRING, nBranch, (LPARAM)(LPCTSTR)cStringTools.ConvertIntToString(nBranch + 1));
			continue;
		}
		while (nBranches < SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_GETCOUNT))
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_DELETESTRING, nBranches);
			continue;
		}
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER, CB_GETCURSEL), 0));
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_TESTEXPRESSION)->SetWindowText(szExpression);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION)->EnableWindow((nBranches > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER_STATIC)->EnableWindow((nBranches > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_NUMBER)->EnableWindow((nBranches > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_TESTEXPRESSION_STATIC)->EnableWindow((nBranches > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SWITCH_BRANCHINFORMATION_TESTEXPRESSION)->EnableWindow((nBranches > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSwitchDialog::OnOK()
{
	CTCProcedureDocumentSwitchItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesSwitchDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSWITCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesSwitchDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSWITCHDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesForLoopDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesForLoopDialog, CDisplayDialog)

CTCProcedurePropertiesForLoopDialog::CTCProcedurePropertiesForLoopDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesForLoopDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesForLoopDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentForLoopItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentForLoopItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentForLoopItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentForLoopItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesForLoopDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentForLoopItem *CTCProcedurePropertiesForLoopDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesForLoopDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesForLoopDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCProcedurePropertiesForLoopDialog::ShowProperties()
{
	CTCProcedureDocumentForLoopItem  *pStep;

	if ((pStep = GetStep()))
	{
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FORLOOP_ITERATIONS), pStep->GetIterations());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FORLOOP_INVARIANTCONDITION)->SetWindowText(pStep->GetInvariantCondition());
		return;
	}
	Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FORLOOP_ITERATIONS), 0);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FORLOOP_INVARIANTCONDITION)->SetWindowText(EMPTYSTRING);
}

VOID CTCProcedurePropertiesForLoopDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_FORLOOP_INVARIANTCONDITION, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_FORLOOP_ITERATIONS, bCheck);
}

BOOL CTCProcedurePropertiesForLoopDialog::IsModified() CONST
{
	CTCProcedureDocumentForLoopItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

void CTCProcedurePropertiesForLoopDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesForLoopDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesForLoopDialog::PostNcDestroy()
{
	delete m_pStep[1];
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesForLoopDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesForLoopDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_FORLOOP_HELP, OnHelp)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_FORLOOP_INVARIANTCONDITION, OnEditchangeInvariantCondition)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_FORLOOP_ITERATIONS, OnSpinchangeIterations)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesForLoopDialog message handlers

BOOL CTCProcedurePropertiesForLoopDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FORLOOP_ITERATIONS), TCPROCEDUREPROPERTIESFORLOOPSTEP_INTERATIONCOUNT_MINIMUMNUMBER, TCPROCEDUREPROPERTIESFORLOOPSTEP_INTERATIONCOUNT_MAXIMUMNUMBER);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FORLOOP_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FORLOOP_INVARIANTCONDITION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FORLOOP_INVARIANTCONDITION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FORLOOP_ITERATIONS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FORLOOP_ITERATIONS)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCProcedurePropertiesForLoopDialog::OnEditchangeInvariantCondition()
{
	CString  szCondition;
	CTCProcedureDocumentForLoopItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FORLOOP_INVARIANTCONDITION)->GetWindowText(szCondition);
		pStep->SetInvariantCondition(szCondition);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesForLoopDialog::OnSpinchangeIterations()
{
	CTCProcedureDocumentForLoopItem  *pStep;

	if ((pStep = GetStep())) pStep->SetIterations((INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_FORLOOP_ITERATIONS)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesForLoopDialog::OnOK()
{
	CTCProcedureDocumentForLoopItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesForLoopDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESFORLOOPDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesForLoopDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESFORLOOPDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesWhileLoopDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesWhileLoopDialog, CDisplayDialog)

CTCProcedurePropertiesWhileLoopDialog::CTCProcedurePropertiesWhileLoopDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesWhileLoopDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesWhileLoopDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentWhileLoopItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentWhileLoopItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentWhileLoopItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentWhileLoopItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesWhileLoopDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentWhileLoopItem *CTCProcedurePropertiesWhileLoopDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesWhileLoopDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesWhileLoopDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCProcedurePropertiesWhileLoopDialog::ShowProperties()
{
	CTCProcedureDocumentWhileLoopItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_INVARIANTCONDITION)->SetWindowText(pStep->GetInvariantCondition());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_TESTEXPRESSION)->SetWindowText(pStep->GetTestExpression());
		return;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_INVARIANTCONDITION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_TESTEXPRESSION)->SetWindowText(EMPTYSTRING);
}

VOID CTCProcedurePropertiesWhileLoopDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_INVARIANTCONDITION, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_TESTEXPRESSION, bCheck);
}

BOOL CTCProcedurePropertiesWhileLoopDialog::IsModified() CONST
{
	CTCProcedureDocumentWhileLoopItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

void CTCProcedurePropertiesWhileLoopDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesWhileLoopDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesWhileLoopDialog::PostNcDestroy()
{
	delete m_pStep[1];
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesWhileLoopDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesWhileLoopDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_HELP, OnHelp)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_INVARIANTCONDITION, OnEditchangeInvariantCondition)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_TESTEXPRESSION, OnEditchangeTestExpression)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesWhileLoopDialog message handlers

BOOL CTCProcedurePropertiesWhileLoopDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_INVARIANTCONDITION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_INVARIANTCONDITION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_TESTEXPRESSION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_TESTEXPRESSION)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCProcedurePropertiesWhileLoopDialog::OnEditchangeInvariantCondition()
{
	CString  szCondition;
	CTCProcedureDocumentWhileLoopItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_INVARIANTCONDITION)->GetWindowText(szCondition);
		pStep->SetInvariantCondition(szCondition);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesWhileLoopDialog::OnEditchangeTestExpression()
{
	CString  szExpression;
	CTCProcedureDocumentWhileLoopItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WHILELOOP_TESTEXPRESSION)->GetWindowText(szExpression);
		pStep->SetTestExpression(szExpression);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesWhileLoopDialog::OnOK()
{
	CTCProcedureDocumentWhileLoopItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesWhileLoopDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESWHILELOOPDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesWhileLoopDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESWHILELOOPDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesDoLoopDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesDoLoopDialog, CDisplayDialog)

CTCProcedurePropertiesDoLoopDialog::CTCProcedurePropertiesDoLoopDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesDoLoopDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesDoLoopDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentDoLoopItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentDoLoopItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentDoLoopItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentDoLoopItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesDoLoopDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentDoLoopItem *CTCProcedurePropertiesDoLoopDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesDoLoopDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesDoLoopDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCProcedurePropertiesDoLoopDialog::ShowProperties()
{
	CTCProcedureDocumentDoLoopItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DOLOOP_INVARIANTCONDITION)->SetWindowText(pStep->GetInvariantCondition());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DOLOOP_TESTEXPRESSION)->SetWindowText(pStep->GetTestExpression());
		return;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DOLOOP_INVARIANTCONDITION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DOLOOP_TESTEXPRESSION)->SetWindowText(EMPTYSTRING);
}

VOID CTCProcedurePropertiesDoLoopDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DOLOOP_INVARIANTCONDITION, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_DOLOOP_TESTEXPRESSION, bCheck);
}

BOOL CTCProcedurePropertiesDoLoopDialog::IsModified() CONST
{
	CTCProcedureDocumentDoLoopItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

void CTCProcedurePropertiesDoLoopDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesDoLoopDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesDoLoopDialog::PostNcDestroy()
{
	delete m_pStep[1];
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesDoLoopDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesDoLoopDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_DOLOOP_HELP, OnHelp)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_DOLOOP_INVARIANTCONDITION, OnEditchangeInvariantCondition)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_DOLOOP_TESTEXPRESSION, OnEditchangeTestExpression)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesDoLoopDialog message handlers

BOOL CTCProcedurePropertiesDoLoopDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DOLOOP_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DOLOOP_INVARIANTCONDITION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DOLOOP_INVARIANTCONDITION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DOLOOP_TESTEXPRESSION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DOLOOP_TESTEXPRESSION)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCProcedurePropertiesDoLoopDialog::OnEditchangeInvariantCondition()
{
	CString  szCondition;
	CTCProcedureDocumentDoLoopItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DOLOOP_INVARIANTCONDITION)->GetWindowText(szCondition);
		pStep->SetInvariantCondition(szCondition);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesDoLoopDialog::OnEditchangeTestExpression()
{
	CString  szExpression;
	CTCProcedureDocumentDoLoopItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_DOLOOP_TESTEXPRESSION)->GetWindowText(szExpression);
		pStep->SetTestExpression(szExpression);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesDoLoopDialog::OnOK()
{
	CTCProcedureDocumentDoLoopItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesDoLoopDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESDOLOOPDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesDoLoopDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESDOLOOPDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesGotoDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesGotoDialog, CDisplayDialog)

CTCProcedurePropertiesGotoDialog::CTCProcedurePropertiesGotoDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesGotoDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesGotoDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentGotoItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentGotoItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentGotoItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentGotoItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesGotoDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentGotoItem *CTCProcedurePropertiesGotoDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesGotoDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesGotoDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCProcedurePropertiesGotoDialog::ShowProperties()
{
	CTCProcedureDocumentGotoItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_GOTO_LABEL)->SetWindowText(pStep->GetJumpLabel());
		return;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_GOTO_LABEL)->SetWindowText(EMPTYSTRING);
}

VOID CTCProcedurePropertiesGotoDialog::AdjustToPrivileges()
{
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_GOTO_LABEL, CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

BOOL CTCProcedurePropertiesGotoDialog::IsModified() CONST
{
	CTCProcedureDocumentGotoItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesGotoDialog::Check(BOOL bModified) CONST
{
	CTCProcedureDocumentGotoItem  *pStep;

	return(((pStep = GetStep()) && !pStep->GetJumpLabel().IsEmpty()) ? (!bModified || IsModified()) : FALSE);
}

void CTCProcedurePropertiesGotoDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesGotoDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesGotoDialog::PostNcDestroy()
{
	delete m_pStep[1];
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesGotoDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesGotoDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_GOTO_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_GOTO_LABEL, OnEditchangeLabelText)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesGotoDialog message handlers

BOOL CTCProcedurePropertiesGotoDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_GOTO_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_GOTO_LABEL_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_GOTO_LABEL)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCProcedurePropertiesGotoDialog::OnEditchangeLabelText()
{
	CString  szJumpLabel;
	CTCProcedureDocumentGotoItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_GOTO_LABEL)->GetWindowText(szJumpLabel);
		pStep->SetJumpLabel(szJumpLabel);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesGotoDialog::OnOK()
{
	CTCProcedureDocumentGotoItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesGotoDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESGOTODIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesGotoDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESGOTODIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesLabelDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesLabelDialog, CDisplayDialog)

CTCProcedurePropertiesLabelDialog::CTCProcedurePropertiesLabelDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesLabelDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesLabelDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentLabelItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentLabelItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentLabelItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentLabelItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesLabelDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentLabelItem *CTCProcedurePropertiesLabelDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesLabelDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesLabelDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCProcedurePropertiesLabelDialog::ShowProperties()
{
	CTCProcedureDocumentLabelItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LABEL_TEXT)->SetWindowText(pStep->GetJumpLabel());
		return;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LABEL_TEXT)->SetWindowText(EMPTYSTRING);
}

VOID CTCProcedurePropertiesLabelDialog::AdjustToPrivileges()
{
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_LABEL_TEXT, CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

BOOL CTCProcedurePropertiesLabelDialog::IsModified() CONST
{
	CTCProcedureDocumentLabelItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesLabelDialog::Check(BOOL bModified) CONST
{
	CTCProcedureDocumentLabelItem  *pStep;

	return(((pStep = GetStep()) && !pStep->GetJumpLabel().IsEmpty()) ? (!bModified || IsModified()) : FALSE);
}

void CTCProcedurePropertiesLabelDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesLabelDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesLabelDialog::PostNcDestroy()
{
	delete m_pStep[1];
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesLabelDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesLabelDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_LABEL_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_LABEL_TEXT, OnEditchangeLabelText)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesLabelDialog message handlers

BOOL CTCProcedurePropertiesLabelDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LABEL_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LABEL_TEXT_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LABEL_TEXT)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCProcedurePropertiesLabelDialog::OnEditchangeLabelText()
{
	CString  szJumpLabel;
	CTCProcedureDocumentLabelItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LABEL_TEXT)->GetWindowText(szJumpLabel);
		pStep->SetJumpLabel(szJumpLabel);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesLabelDialog::OnOK()
{
	CTCProcedureDocumentLabelItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesLabelDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESLABELDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesLabelDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESLABELDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesParametersCalibrationPage property page

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesParametersCalibrationPage, CLocalePropertyPage)

CTCProcedurePropertiesParametersCalibrationPage::CTCProcedurePropertiesParametersCalibrationPage() : CLocalePropertyPage(CTCProcedurePropertiesParametersCalibrationPage::IDD)
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesParametersCalibrationPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTCProcedurePropertiesParametersCalibrationPage::ShowParameterInfo(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	CString  szName;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;

	for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_NAME, CB_RESETCONTENT), m_szCalTableIDs.RemoveAll(); pDatabaseTCParameter != (CONST CDatabaseTCParameter *) NULL; )
	{
		if ((m_nCalTableType = (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))) == TCPARAMETER_CALIBRATION_NUMERICAL)
		{
			if ((pDatabaseTCNumCalTable = GetDatabase()->GetTCNumCalTables()->GetAt(GetDatabase()->GetTCNumCalTables()->Find(pDatabaseTCParameter->GetCalTable()))))
			{
				for (szName.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTCNumCalTable->GetDescription(), (LPCTSTR)pDatabaseTCNumCalTable->GetName()); pDatabaseTCNumCalTable->GetDescription().IsEmpty(); )
				{
					szName = pDatabaseTCNumCalTable->GetName();
					break;
				}
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName);
				m_szCalTableIDs.Add(pDatabaseTCNumCalTable->GetName());
			}
		}
		if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
		{
			if ((pDatabaseTCTxtCalTable = GetDatabase()->GetTCTxtCalTables()->GetAt(GetDatabase()->GetTCTxtCalTables()->Find(pDatabaseTCParameter->GetCalTable()))))
			{
				for (szName.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTCTxtCalTable->GetDescription(), (LPCTSTR)pDatabaseTCTxtCalTable->GetName()); pDatabaseTCTxtCalTable->GetDescription().IsEmpty(); )
				{
					szName = pDatabaseTCTxtCalTable->GetName();
					break;
				}
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName);
				m_szCalTableIDs.Add(pDatabaseTCTxtCalTable->GetName());
			}
		}
		break;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_NAME, CB_SETCURSEL);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_NAME)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	ShowCalibrationInfo();
}

VOID CTCProcedurePropertiesParametersCalibrationPage::ShowCalibrationInfo()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	double  fCalPtX;
	double  fCalPtY;
	CString  szItem;
	CString  szCalPtX;
	CString  szCalPtY;
	CString  szCalText;
	CStringTools  cStringTools;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;

	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCURSEL)) >= 0)
	{
		if ((pDatabaseTCNumCalTable = (m_nCalTableType == TCPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTCNumCalTables()->GetAt(GetDatabase()->GetTCNumCalTables()->Find(m_szCalTableIDs.GetAt(nIndex))) : (CDatabaseTCNumCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCNumCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCNumCalPoint = pDatabaseTCNumCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							szItem = cStringTools.ConvertFloatToTruncatedString(pDatabaseTCNumCalPoint->GetX(), -1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = cStringTools.ConvertFloatToString(pDatabaseTCNumCalPoint->GetY(), -1);
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTCNumCalTable->GetName());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_NUMERICAL));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			return;
		}
		if ((pDatabaseTCTxtCalTable = (m_nCalTableType == TCPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTCTxtCalTables()->GetAt(GetDatabase()->GetTCTxtCalTables()->Find(m_szCalTableIDs.GetAt(nIndex))) : (CDatabaseTCTxtCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCTxtCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							if (pDatabaseTCTxtCalPoint->GetRange(fCalPtX, fCalPtY, szCalText) || pDatabaseTCTxtCalPoint->GetPoint(fCalPtX, szCalText))
							{
								for (szCalPtX = szItem = cStringTools.ConvertFloatToTruncatedString(fCalPtX, -1), szCalPtY = cStringTools.ConvertFloatToTruncatedString(fCalPtY, -1); fCalPtX != fCalPtY; )
								{
									szItem.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINT_RANGE), (LPCTSTR)szCalPtX, (LPCTSTR)szCalPtY);
									break;
								}
								break;
							}
							szItem.Empty();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = (pDatabaseTCTxtCalPoint->GetPoint(fCalPtX, szCalText) || pDatabaseTCTxtCalPoint->GetRange(fCalPtX, fCalPtY, szCalText)) ? (LPCTSTR)szCalText : EMPTYSTRING;
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTCTxtCalTable->GetName());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATUS));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			return;
		}
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow(FALSE);
}

BOOL CTCProcedurePropertiesParametersCalibrationPage::GetSelectedCalibrationPoint(CString &szX, CString &szY) CONST
{
	szX = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X)));
	szY = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y)));
	return((!szX.IsEmpty() && !szY.IsEmpty()) ? TRUE : FALSE);
}

CTCProcedurePropertiesParametersFolder *CTCProcedurePropertiesParametersCalibrationPage::GetParent() CONST
{
	return((CTCProcedurePropertiesParametersFolder *)CLocalePropertyPage::GetParent());
}

INT CTCProcedurePropertiesParametersCalibrationPage::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

void CTCProcedurePropertiesParametersCalibrationPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesParametersCalibrationPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesParametersCalibrationPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_szCalTableIDs.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesParametersCalibrationPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesParametersCalibrationPage)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_NAME, OnSelchangeName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesParametersCalibrationPage message handlers

BOOL CTCProcedurePropertiesParametersCalibrationPage::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nWidth = (rColumns.Width() - GetSystemMetrics(SM_CXVSCROLL)) / 5; nColumn < nColumns; nWidth = (++nColumn > 0) ? (2 * (rColumns.Width() - GetSystemMetrics(SM_CXVSCROLL)) / 5) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	return TRUE;
}

BOOL CTCProcedurePropertiesParametersCalibrationPage::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CString  szX;
	CString  szY;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_CALIBRATIONPAGE_POINTS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK)
		{
			if (GetSelectedCalibrationPoint(szX, szY))
			{
				GetParent()->GetParent()->SetSelectedCalibrationPoint(szX, szY);
				GetParent()->GetParent()->EndDialog(IDOK);
				return TRUE;
			}
		}
	}
	return CLocalePropertyPage::OnNotify(wParam, lParam, pResult);
}

void CTCProcedurePropertiesParametersCalibrationPage::OnSelchangeName()
{
	ShowCalibrationInfo();
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesParametersFolderTabCtrl

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesParametersFolderTabCtrl, CTabCtrl)

CTCProcedurePropertiesParametersFolder *CTCProcedurePropertiesParametersFolderTabCtrl::GetParent() CONST
{
	return((CTCProcedurePropertiesParametersFolder *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesParametersFolderTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesParametersFolderTabCtrl)
	ON_WM_GETDLGCODE()
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesParametersFolderTabCtrl message handlers

UINT CTCProcedurePropertiesParametersFolderTabCtrl::OnGetDlgCode()
{
	return CTabCtrl::OnGetDlgCode() | DLGC_WANTTAB;
}

void CTCProcedurePropertiesParametersFolderTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CWnd  *pWnd;

	if (nChar == VK_TAB)
	{
		if ((pWnd = GetParent()->GetParent()->GetNextDlgTabItem(GetParent(), (HIBYTE(GetKeyState(VK_SHIFT))) ? TRUE : FALSE)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesParametersFolder

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesParametersFolder, CLocalePropertySheetDialog)

CTCProcedurePropertiesParametersFolder::CTCProcedurePropertiesParametersFolder() : CLocalePropertySheetDialog()
{
	AddPage(&m_pageCalibration);
}

BOOL CTCProcedurePropertiesParametersFolder::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	INT  nPage;

	if (CLocalePropertySheetDialog::Create(pParentWnd, WS_CHILD | WS_TABSTOP | WS_DISABLED))
	{
		for (nPage = GetPageCount() - 1, m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()); nPage >= 0; nPage--)
		{
			SetActivePage(nPage);
			continue;
		}
		MoveWindow(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
		ShowWindow(SW_SHOWNORMAL);
		return TRUE;
	}
	return FALSE;
}

VOID CTCProcedurePropertiesParametersFolder::ShowParameterInfo(CONST CDatabaseTCParameter *pCDatabaseTCParameter)
{
	m_pageCalibration.ShowParameterInfo(pCDatabaseTCParameter);
}

BOOL CTCProcedurePropertiesParametersFolder::GetSelectedCalibrationPoint(CString &szX, CString &szY) CONST
{
	return m_pageCalibration.GetSelectedCalibrationPoint(szX, szY);
}

CTCProcedurePropertiesParametersDialog *CTCProcedurePropertiesParametersFolder::GetParent() CONST
{
	return((CTCProcedurePropertiesParametersDialog *)CLocalePropertySheetDialog::GetParent());
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesParametersFolder, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesParametersFolder)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesParametersFolder message handlers

void CTCProcedurePropertiesParametersFolder::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(m_wndTabCtrl.GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CLocalePropertySheetDialog::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesParametersDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesParametersDialog, CDisplayDialog)

CTCProcedurePropertiesParametersDialog::CTCProcedurePropertiesParametersDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesParametersDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCProcedurePropertiesParametersDialog::Create(CWnd *pParentWnd, LPCTSTR pszParameter, CString &szValue)
{
	INT  nResult;
	CString  szX;
	CString  szY;

	for (m_szParameter = pszParameter, szValue.Empty(); (nResult = CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesParametersDialog::IDD)) == IDOK; )
	{
		szValue = (GetSelectedCalibrationPoint(szX, szY)) ? szY : EMPTYSTRING;
		break;
	}
	return((nResult == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesParametersDialog::SetSelectedCalibrationPoint(LPCTSTR pszX, LPCTSTR pszY)
{
	m_szX = pszX;
	m_szY = pszY;
}

BOOL CTCProcedurePropertiesParametersDialog::GetSelectedCalibrationPoint(CString &szX, CString &szY) CONST
{
	szX = m_szX;
	szY = m_szY;
	return((!szX.IsEmpty() && !szY.IsEmpty()) ? TRUE : FALSE);
}

CTCProcedurePropertiesSetParametersDialog *CTCProcedurePropertiesParametersDialog::GetParent() CONST
{
	return((CTCProcedurePropertiesSetParametersDialog *)CDisplayDialog::GetParent());
}

BOOL CTCProcedurePropertiesParametersDialog::EnumParameters()
{
	CString  szParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;

	if ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(m_szParameter))))
	{
		if (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))
		{
			szParameter.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSDIALOG_FORMAT), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)pDatabaseTCParameter->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_ITEM, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szParameter);
		}
	}
	szParameter.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSDIALOG_FORMAT), (LPCTSTR)m_szParameter, EMPTYSTRING);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_ITEM, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_ITEM, CB_FINDSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameter), 0));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_DETAILS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_ITEM_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_ITEM)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	m_wndFolderCtrl.EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesParametersDialog::ShowParameterInfo()
{
	CString  szParameter[2];
	CDatabaseTCParameter  *pDatabaseTCParameter;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_ITEM)->GetWindowText(szParameter[0]), szParameter[1].Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSDIALOG_FORMAT), EMPTYSTRING, EMPTYSTRING), szParameter[0] = (szParameter[0].Find(szParameter[1]) >= 0) ? szParameter[0].Left(szParameter[0].Find(szParameter[1])) : szParameter[0]; (pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(szParameter[0]))); )
	{
		m_wndFolderCtrl.ShowParameterInfo(pDatabaseTCParameter);
		return;
	}
	m_wndFolderCtrl.ShowParameterInfo();
}

CRect CTCProcedurePropertiesParametersDialog::CalcFolderSize() CONST
{
	CRect  rFolder;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_FOLDER)->GetWindowRect(rFolder);
	ScreenToClient(rFolder);
	return rFolder;
}

void CTCProcedurePropertiesParametersDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesParametersDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesParametersDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesParametersDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_ITEM, OnSelchangeParameter)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesParametersDialog message handlers

BOOL CTCProcedurePropertiesParametersDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	if (m_wndFolderCtrl.Create(this, CalcFolderSize()) && SetChildSheet(&m_wndFolderCtrl, GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_PARAMETERS_FOLDER - 1)))
	{
		for (; EnumParameters(); )
		{
			ShowParameterInfo();
			break;
		}
	}
	return TRUE;
}

void CTCProcedurePropertiesParametersDialog::OnSelchangeParameter()
{
	ShowParameterInfo();
}

void CTCProcedurePropertiesParametersDialog::OnOK()
{
	CHourglassCursor  cCursor;

	m_wndFolderCtrl.GetSelectedCalibrationPoint(m_szX, m_szY);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesParametersDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesParametersDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSetArgumentsDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesSetArgumentsDialog, CDisplayDialog)

CTCProcedurePropertiesSetArgumentsDialog::CTCProcedurePropertiesSetArgumentsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesSetArgumentsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesSetArgumentsDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentSetArgumentsItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentSetArgumentsItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentSetArgumentsItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentSetArgumentsItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesSetArgumentsDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentSetArgumentsItem *CTCProcedurePropertiesSetArgumentsDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesSetArgumentsDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesSetArgumentsDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCProcedurePropertiesSetArgumentsDialog::EnumArguments()
{
	INT  nArgument;
	INT  nArguments;
	CString  szArgument;
	CDatabaseTCProcedure  cDatabaseTCProcedure;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	for (nArgument = 0, nArguments = (GetParentDisplay()->GetProcedure(&cDatabaseTCProcedure)) ? cDatabaseTCProcedure.GetArguments(m_pDatabaseTCProcedureArguments) : -1; nArgument < nArguments; nArgument++)
	{
		if ((pDatabaseTCProcedureArgument = m_pDatabaseTCProcedureArguments.GetAt(nArgument)) != (CDatabaseTCProcedureArgument *)NULL)
		{
			szArgument.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETER_FORMAT), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag(), (LPCTSTR)pDatabaseTCProcedureArgument->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)((pDatabaseTCProcedureArgument->GetDescription().IsEmpty()) ? (LPCTSTR)pDatabaseTCProcedureArgument->GetTag() : (LPCTSTR)szArgument));
		}
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME, CB_GETCOUNT) == nArguments) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesSetArgumentsDialog::ShowProperties()
{
	INT  nColumn;
	INT  nColumns;
	INT  nArgument;
	INT  nArguments;
	CString  szItem;
	CStringArray  szArguments;
	CStringArray  szExpressions;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CTCProcedureDocumentSetArgumentsItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (nArgument = 0, nArguments = pStep->GetArguments(szArguments), pStep->GetExpressions(szExpressions); nArgument < nArguments; nArgument++)
		{
			if ((pDatabaseTCProcedureArgument = m_pDatabaseTCProcedureArguments.GetAt(m_pDatabaseTCProcedureArguments.Find(szArguments.GetAt(nArgument)))))
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME); )
					{
						szItem = pDatabaseTCProcedureArgument->GetTag();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_DESCRIPTION); )
					{
						szItem = pDatabaseTCProcedureArgument->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE))
					{
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW) : EMPTYSTRING;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_CODING))
					{
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_SIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_FLOATINGPOINT) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING) : szItem;
						szItem = ((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0 && (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL))) ? ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_UNSIGNEDINTEGER) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_BITPATTERN)) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_RADIX))
					{
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_BINARY) : EMPTYSTRING;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_OCTAL) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_DECIMAL) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_HEXADECIMAL) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE); )
					{
						szItem = (nArgument < szExpressions.GetSize()) ? szExpressions.GetAt(nArgument) : EMPTYSTRING;
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST), nArgument, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST), nArgument, nColumn, szItem);
				}
				continue;
			}
			szArguments.RemoveAt(nArgument);
			szExpressions.RemoveAt(nArgument);
			pStep->SetArguments(szArguments);
			pStep->SetExpressions(szExpressions);
			nArguments--;
			nArgument--;
		}
		if (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST, LVM_GETITEMCOUNT) > 0)
		{
			Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST), 0);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_AUTHORIZATION, (pStep->GetConfirmationType() & TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_AUTHORIZATION) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST)->EnableWindow();
			ShowArgumentDetails();
			return;
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_AUTHORIZATION, FALSE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST)->EnableWindow(FALSE);
	ShowArgumentDetails();
}

VOID CTCProcedurePropertiesSetArgumentsDialog::ShowArgumentDetails()
{
	INT  nIndex;
	CString  szArgument;
	CStringArray  szExpressions;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CTCProcedureDocumentSetArgumentsItem  *pStep;

	if ((pStep = GetStep()))
	{
		if ((pDatabaseTCProcedureArgument = ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST))) >= 0) ? m_pDatabaseTCProcedureArguments.GetAt(m_pDatabaseTCProcedureArguments.Find(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME))))) : (CDatabaseTCProcedureArgument *)NULL))
		{
			szArgument.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETER_FORMAT), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag(), (LPCTSTR)pDatabaseTCProcedureArgument->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szArgument = (pDatabaseTCProcedureArgument->GetDescription().IsEmpty()) ? pDatabaseTCProcedureArgument->GetTag() : szArgument)));
			AccessControl(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION, ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION)->SetWindowText((nIndex < pStep->GetExpressions(szExpressions)) ? szExpressions.GetAt(nIndex) : EMPTYSTRING);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMARK)->ShowWindow((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMARK)->EnableWindow((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_ADD)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMOVE)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMOVEALL)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
			return;
		}
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME, CB_SETCURSEL, (WPARAM)-1);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION, TRUE, TRUE, TRUE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMARK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMARK)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMOVEALL)->EnableWindow(FALSE);
}

INT CTCProcedurePropertiesSetArgumentsDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

VOID CTCProcedurePropertiesSetArgumentsDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_AUTHORIZATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION, bCheck);
}

BOOL CTCProcedurePropertiesSetArgumentsDialog::IsModified() CONST
{
	CTCProcedureDocumentSetArgumentsItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesSetArgumentsDialog::Check(BOOL bModified) CONST
{
	INT  nExpression;
	INT  nExpressions;
	CStringArray  szExpressions;
	CTCProcedureDocumentSetArgumentsItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (nExpression = 0, nExpressions = pStep->GetExpressions(szExpressions); nExpression < nExpressions; nExpression++)
		{
			if (szExpressions.GetAt(nExpression).IsEmpty()) break;
			continue;
		}
		return((nExpression == nExpressions) ? (!bModified || IsModified()) : FALSE);
	}
	return FALSE;
}

void CTCProcedurePropertiesSetArgumentsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesSetArgumentsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesSetArgumentsDialog::PostNcDestroy()
{
	delete m_pStep[1];
	m_szColumns.RemoveAll();
	m_pDatabaseTCProcedureArguments.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesSetArgumentsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesSetArgumentsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_AUTHORIZATION, OnAuthorization)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME, OnSelchangeName)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION, OnEditchangeExpression)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSetArgumentsDialog message handlers

BOOL CTCProcedurePropertiesSetArgumentsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE));
	for (EnumArguments(), GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE)) ? (rColumns.Width() / 7) : (9 * rColumns.Width() / 35))));
		continue;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_AUTHORIZATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTCProcedurePropertiesSetArgumentsDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CString  szValue;
	CTCProcedurePropertiesParametersDialog  cParametersDialog;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		for (; pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED); )
		{
			ShowArgumentDetails();
			break;
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK  &&  Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE))) != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW))
		{
			if (cParametersDialog.Create(this, Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME))), szValue) && !szValue.IsEmpty() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE))
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION)->SetWindowText(szValue);
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION, EM_SETSEL, 0, -1);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION)->SetFocus();
			}
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCProcedurePropertiesSetArgumentsDialog::OnAdd()
{
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CString  szExpression;
	CStringArray  szArguments;
	CStringArray  szExpressions;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CTCProcedureDocumentSetArgumentsItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (pStep->GetArguments(szArguments), pStep->GetExpressions(szExpressions), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION)->GetWindowText(szExpression); (pDatabaseTCProcedureArgument = m_pDatabaseTCProcedureArguments.GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME, CB_GETCURSEL))); )
		{
			szArguments.Add(pDatabaseTCProcedureArgument->GetTag());
			szExpressions.Add(szExpression);
			pStep->SetArguments(szArguments);
			pStep->SetExpressions(szExpressions);
			break;
		}
	}
	if ((pDatabaseTCProcedureArgument = m_pDatabaseTCProcedureArguments.GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME, CB_GETCURSEL))))
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME); )
			{
				szItem = pDatabaseTCProcedureArgument->GetTag();
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_DESCRIPTION); )
			{
				szItem = pDatabaseTCProcedureArgument->GetDescription();
				break;
			}
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE))
			{
				szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW) : EMPTYSTRING;
				szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL) : szItem;
				szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS) : szItem;
			}
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_CODING))
			{
				szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_BITPATTERN) : EMPTYSTRING;
				szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_SIGNEDINTEGER) : szItem;
				szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_UNSIGNEDINTEGER) : szItem;
				szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_FLOATINGPOINT) : szItem;
				szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME) : szItem;
				szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING) : szItem;
				szItem = ((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0 && (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL))) ? ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_UNSIGNEDINTEGER) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_BITPATTERN)) : szItem;
			}
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_RADIX))
			{
				szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_BINARY) : EMPTYSTRING;
				szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_OCTAL) : szItem;
				szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_DECIMAL) : szItem;
				szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_HEXADECIMAL) : szItem;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE); )
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION)->GetWindowText(szItem);
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST, LVM_GETITEMCOUNT), szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST, LVM_GETITEMCOUNT) - 1, nColumn, szItem);
		}
		Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST, LVM_GETITEMCOUNT) - 1);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMOVE)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMOVEALL)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetArgumentsDialog::OnRemove()
{
	INT  nIndex;
	CStringArray  szArguments;
	CStringArray  szExpressions;
	CTCProcedureDocumentSetArgumentsItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (pStep->GetArguments(szArguments), pStep->GetExpressions(szExpressions); (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST))) >= 0; )
		{
			for (; nIndex < szArguments.GetSize(); )
			{
				szArguments.RemoveAt(nIndex);
				break;
			}
			for (; nIndex < szExpressions.GetSize(); )
			{
				szExpressions.RemoveAt(nIndex);
				break;
			}
			pStep->SetArguments(szArguments);
			pStep->SetExpressions(szExpressions);
			break;
		}
	}
	if (Listview_DeleteText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST), (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST)))))
	{
		for (; Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST), 0) >= 0; )
		{
			ShowArgumentDetails();
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST)) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST, LVM_GETITEMCOUNT) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetArgumentsDialog::OnRemoveAll()
{
	CStringArray  szArguments;
	CStringArray  szExpressions;
	CTCProcedureDocumentSetArgumentsItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		pStep->SetArguments(szArguments);
		pStep->SetExpressions(szExpressions);
	}
	for (; SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST, LVM_DELETEALLITEMS); )
	{
		ShowArgumentDetails();
		break;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetArgumentsDialog::OnAuthorization()
{
	CTCProcedureDocumentSetArgumentsItem  *pStep;

	if ((pStep = GetStep())) pStep->SetConfirmationType((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_AUTHORIZATION)) ? (pStep->GetConfirmationType() | TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_AUTHORIZATION) : (pStep->GetConfirmationType() & ~TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_AUTHORIZATION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetArgumentsDialog::OnSelchangeName()
{
	INT  nArgument;
	INT  nArguments;
	CStringArray  szArguments;
	CStringArray  szExpressions;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CTCProcedureDocumentSetArgumentsItem  *pStep;

	if ((pStep = GetStep()))
	{
		if ((pDatabaseTCProcedureArgument = m_pDatabaseTCProcedureArguments.GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME, CB_GETCURSEL))))
		{
			for (nArgument = 0, nArguments = pStep->GetArguments(szArguments); nArgument < nArguments; nArgument++)
			{
				if (szArguments.GetAt(nArgument) == pDatabaseTCProcedureArgument->GetTag()) break;
				continue;
			}
			for (AccessControl(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION, ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT) ? TRUE : FALSE); pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_TYPE_CONSTANT; )
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION)->SetWindowText(pDatabaseTCProcedureArgument->GetConstValueAsText());
				break;
			}
			for (; (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT; )
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION)->SetWindowText((nArgument < pStep->GetExpressions(szExpressions)) ? szExpressions.GetAt(nArgument) : EMPTYSTRING);
				break;
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_ADD)->EnableWindow((nArgument == nArguments) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST)) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST, LVM_GETITEMCOUNT) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetArgumentsDialog::OnEditchangeExpression()
{
	INT  nArgument;
	INT  nArguments;
	CString  szExpression;
	CStringArray  szArguments;
	CStringArray  szExpressions;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CTCProcedureDocumentSetArgumentsItem  *pStep;

	if ((pStep = GetStep()))
	{
		if ((pDatabaseTCProcedureArgument = m_pDatabaseTCProcedureArguments.GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_NAME, CB_GETCURSEL))))
		{
			for (nArgument = 0, nArguments = pStep->GetArguments(szArguments), pStep->GetExpressions(szExpressions), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_EXPRESSION)->GetWindowText(szExpression); nArgument < nArguments; nArgument++)
			{
				if (szArguments.GetAt(nArgument) == pDatabaseTCProcedureArgument->GetTag())
				{
					szExpressions.SetAtGrow(nArgument, szExpression);
					pStep->SetExpressions(szExpressions);
					break;
				}
			}
			if (nArgument < nArguments) Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETARGUMENTS_LIST), nArgument, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE)), szExpression);
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetArgumentsDialog::OnOK()
{
	CTCProcedureDocumentSetArgumentsItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesSetArgumentsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSETARGUMENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesSetArgumentsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSETARGUMENTSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSetVariablesDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesSetVariablesDialog, CDisplayDialog)

CTCProcedurePropertiesSetVariablesDialog::CTCProcedurePropertiesSetVariablesDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesSetVariablesDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesSetVariablesDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentSetVariablesItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentSetVariablesItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentSetVariablesItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentSetVariablesItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesSetVariablesDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentSetVariablesItem *CTCProcedurePropertiesSetVariablesDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesSetVariablesDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesSetVariablesDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCProcedurePropertiesSetVariablesDialog::EnumVariables()
{
	INT  nVariable;
	INT  nVariables;
	CString  szVariable;
	CDatabaseTCProcedure  cDatabaseTCProcedure;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;

	for (nVariable = 0, nVariables = (GetParentDisplay()->GetProcedure(&cDatabaseTCProcedure)) ? cDatabaseTCProcedure.GetVariables(m_pDatabaseTCProcedureVariables) : -1; nVariable < nVariables; nVariable++)
	{
		if ((pDatabaseTCProcedureVariable = m_pDatabaseTCProcedureVariables.GetAt(nVariable)) != (CDatabaseTCProcedureVariable *)NULL)
		{
			szVariable.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUE_FORMAT), (LPCTSTR)pDatabaseTCProcedureVariable->GetTag(), (LPCTSTR)pDatabaseTCProcedureVariable->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)((pDatabaseTCProcedureVariable->GetDescription().IsEmpty()) ? (LPCTSTR)pDatabaseTCProcedureVariable->GetTag() : (LPCTSTR)szVariable));
		}
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME, CB_GETCOUNT) == nVariables) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesSetVariablesDialog::ShowProperties()
{
	INT  nColumn;
	INT  nColumns;
	INT  nVariable;
	INT  nVariables;
	CString  szItem;
	CStringArray  szVariables;
	CStringArray  szExpressions;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;
	CTCProcedureDocumentSetVariablesItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (nVariable = 0, nVariables = pStep->GetVariables(szVariables), pStep->GetExpressions(szExpressions); nVariable < nVariables; nVariable++)
		{
			if ((pDatabaseTCProcedureVariable = m_pDatabaseTCProcedureVariables.GetAt(m_pDatabaseTCProcedureVariables.Find(szVariables.GetAt(nVariable)))))
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_NAME); )
					{
						szItem = pDatabaseTCProcedureVariable->GetTag();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_DESCRIPTION); )
					{
						szItem = pDatabaseTCProcedureVariable->GetDescription();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_TYPE); )
					{
						szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUETYPE_RAW) : EMPTYSTRING;
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_CODING))
					{
						szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_SIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_FLOATINGPOINT) : szItem;
						szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_DATETIME) : szItem;
						szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_STRING) : szItem;
						szItem = ((pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0 && (pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL))) ? ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_BITPATTERN)) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_RADIX))
					{
						szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_BINARY) : EMPTYSTRING;
						szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_OCTAL) : szItem;
						szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_DECIMAL) : szItem;
						szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_HEXADECIMAL) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_VALUE); )
					{
						szItem = (nVariable < szExpressions.GetSize()) ? szExpressions.GetAt(nVariable) : EMPTYSTRING;
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST), nVariable, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST), nVariable, nColumn, szItem);
				}
				continue;
			}
			szVariables.RemoveAt(nVariable);
			szExpressions.RemoveAt(nVariable);
			pStep->SetVariables(szVariables);
			pStep->SetExpressions(szExpressions);
			nVariables--;
			nVariable--;
		}
		if (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST, LVM_GETITEMCOUNT) > 0)
		{
			Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST), 0);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_AUTHORIZATION, (pStep->GetConfirmationType() & TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_AUTHORIZATION) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST)->EnableWindow();
			ShowVariableDetails();
			return;
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_AUTHORIZATION, FALSE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST)->EnableWindow(FALSE);
	ShowVariableDetails();
}

VOID CTCProcedurePropertiesSetVariablesDialog::ShowVariableDetails()
{
	INT  nIndex;
	CString  szVariable;
	CStringArray  szExpressions;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;
	CTCProcedureDocumentSetVariablesItem  *pStep;

	if ((pStep = GetStep()))
	{
		if ((pDatabaseTCProcedureVariable = ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST))) >= 0) ? m_pDatabaseTCProcedureVariables.GetAt(m_pDatabaseTCProcedureVariables.Find(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_NAME))))) : (CDatabaseTCProcedureVariable *)NULL))
		{
			szVariable.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUE_FORMAT), (LPCTSTR)pDatabaseTCProcedureVariable->GetTag(), (LPCTSTR)pDatabaseTCProcedureVariable->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szVariable = (pDatabaseTCProcedureVariable->GetDescription().IsEmpty()) ? pDatabaseTCProcedureVariable->GetTag() : szVariable)));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_EXPRESSION)->SetWindowText((nIndex < pStep->GetExpressions(szExpressions)) ? szExpressions.GetAt(nIndex) : EMPTYSTRING);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_ADD)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_REMOVE)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_REMOVEALL)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
			return;
		}
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_EXPRESSION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_REMOVEALL)->EnableWindow(FALSE);
}

INT CTCProcedurePropertiesSetVariablesDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

VOID CTCProcedurePropertiesSetVariablesDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_AUTHORIZATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_EXPRESSION, bCheck);
}

BOOL CTCProcedurePropertiesSetVariablesDialog::IsModified() CONST
{
	CTCProcedureDocumentSetVariablesItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesSetVariablesDialog::Check(BOOL bModified) CONST
{
	INT  nExpression;
	INT  nExpressions;
	CStringArray  szExpressions;
	CTCProcedureDocumentSetVariablesItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (nExpression = 0, nExpressions = pStep->GetExpressions(szExpressions); nExpression < nExpressions; nExpression++)
		{
			if (szExpressions.GetAt(nExpression).IsEmpty()) break;
			continue;
		}
		return((nExpression == nExpressions) ? (!bModified || IsModified()) : FALSE);
	}
	return FALSE;
}

void CTCProcedurePropertiesSetVariablesDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesSetVariablesDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesSetVariablesDialog::PostNcDestroy()
{
	delete m_pStep[1];
	m_szColumns.RemoveAll();
	m_pDatabaseTCProcedureVariables.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesSetVariablesDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesSetVariablesDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_AUTHORIZATION, OnAuthorization)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME, OnSelchangeName)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_EXPRESSION, OnEditchangeExpression)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSetVariablesDialog message handlers

BOOL CTCProcedurePropertiesSetVariablesDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_VALUE));
	for (EnumVariables(), GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_NAME)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_TYPE)) ? (rColumns.Width() / 7) : (9 * rColumns.Width() / 35))));
		continue;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_AUTHORIZATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_EXPRESSION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_EXPRESSION)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTCProcedurePropertiesSetVariablesDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) ShowVariableDetails();
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCProcedurePropertiesSetVariablesDialog::OnAdd()
{
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CString  szExpression;
	CStringArray  szVariables;
	CStringArray  szExpressions;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;
	CTCProcedureDocumentSetVariablesItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (pStep->GetVariables(szVariables), pStep->GetExpressions(szExpressions), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_EXPRESSION)->GetWindowText(szExpression); (pDatabaseTCProcedureVariable = m_pDatabaseTCProcedureVariables.GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME, CB_GETCURSEL))); )
		{
			szVariables.Add(pDatabaseTCProcedureVariable->GetTag());
			szExpressions.Add(szExpression);
			pStep->SetVariables(szVariables);
			pStep->SetExpressions(szExpressions);
			break;
		}
	}
	if ((pDatabaseTCProcedureVariable = m_pDatabaseTCProcedureVariables.GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME, CB_GETCURSEL))))
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_NAME); )
			{
				szItem = pDatabaseTCProcedureVariable->GetTag();
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_DESCRIPTION); )
			{
				szItem = pDatabaseTCProcedureVariable->GetDescription();
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_TYPE); )
			{
				szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUETYPE_RAW) : EMPTYSTRING;
				break;
			}
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_CODING))
			{
				szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_BITPATTERN) : EMPTYSTRING;
				szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_SIGNEDINTEGER) : szItem;
				szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_UNSIGNEDINTEGER) : szItem;
				szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_FLOATINGPOINT) : szItem;
				szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_DATETIME) : szItem;
				szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_STRING) : szItem;
				szItem = ((pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0 && (pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL))) ? ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUECODING_BITPATTERN)) : szItem;
			}
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_RADIX))
			{
				szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_BINARY) : EMPTYSTRING;
				szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_OCTAL) : szItem;
				szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_DECIMAL) : szItem;
				szItem = (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLEVALUERADIX_HEXADECIMAL) : szItem;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_VALUE); )
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_EXPRESSION)->GetWindowText(szItem);
				break;
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST, LVM_GETITEMCOUNT), szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST, LVM_GETITEMCOUNT) - 1, nColumn, szItem);
		}
		Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST, LVM_GETITEMCOUNT) - 1);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_REMOVE)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_REMOVEALL)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetVariablesDialog::OnRemove()
{
	INT  nIndex;
	CStringArray  szVariables;
	CStringArray  szExpressions;
	CTCProcedureDocumentSetVariablesItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (pStep->GetVariables(szVariables), pStep->GetExpressions(szExpressions); (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST))) >= 0; )
		{
			for (; nIndex < szVariables.GetSize(); )
			{
				szVariables.RemoveAt(nIndex);
				break;
			}
			for (; nIndex < szExpressions.GetSize(); )
			{
				szExpressions.RemoveAt(nIndex);
				break;
			}
			pStep->SetVariables(szVariables);
			pStep->SetExpressions(szExpressions);
			break;
		}
	}
	if (Listview_DeleteText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST), (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST)))))
	{
		for (; Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST), 0) >= 0; )
		{
			ShowVariableDetails();
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST)) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST, LVM_GETITEMCOUNT) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetVariablesDialog::OnRemoveAll()
{
	CStringArray  szVariables;
	CStringArray  szExpressions;
	CTCProcedureDocumentSetVariablesItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		pStep->SetVariables(szVariables);
		pStep->SetExpressions(szExpressions);
	}
	for (; SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST, LVM_DELETEALLITEMS); )
	{
		ShowVariableDetails();
		break;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_EXPRESSION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetVariablesDialog::OnAuthorization()
{
	CTCProcedureDocumentSetVariablesItem  *pStep;

	if ((pStep = GetStep())) pStep->SetConfirmationType((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_AUTHORIZATION)) ? (pStep->GetConfirmationType() | TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_AUTHORIZATION) : (pStep->GetConfirmationType() & ~TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_AUTHORIZATION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetVariablesDialog::OnSelchangeName()
{
	INT  nVariable;
	INT  nVariables;
	CStringArray  szVariables;
	CStringArray  szExpressions;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;
	CTCProcedureDocumentSetVariablesItem  *pStep;

	if ((pStep = GetStep()))
	{
		if ((pDatabaseTCProcedureVariable = m_pDatabaseTCProcedureVariables.GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME, CB_GETCURSEL))))
		{
			for (nVariable = 0, nVariables = pStep->GetVariables(szVariables); nVariable < nVariables; nVariable++)
			{
				if (szVariables.GetAt(nVariable) == pDatabaseTCProcedureVariable->GetTag()) break;
				continue;
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_EXPRESSION)->SetWindowText((nVariable < pStep->GetExpressions(szExpressions)) ? szExpressions.GetAt(nVariable) : EMPTYSTRING);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_ADD)->EnableWindow((nVariable == nVariables) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST)) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST, LVM_GETITEMCOUNT) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetVariablesDialog::OnEditchangeExpression()
{
	INT  nVariable;
	INT  nVariables;
	CString  szExpression;
	CStringArray  szVariables;
	CStringArray  szExpressions;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;
	CTCProcedureDocumentSetVariablesItem  *pStep;

	if ((pStep = GetStep()))
	{
		if ((pDatabaseTCProcedureVariable = m_pDatabaseTCProcedureVariables.GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_NAME, CB_GETCURSEL))))
		{
			for (nVariable = 0, nVariables = pStep->GetVariables(szVariables), pStep->GetExpressions(szExpressions), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_EXPRESSION)->GetWindowText(szExpression); nVariable < nVariables; nVariable++)
			{
				if (szVariables.GetAt(nVariable) == pDatabaseTCProcedureVariable->GetTag())
				{
					szExpressions.SetAtGrow(nVariable, szExpression);
					pStep->SetExpressions(szExpressions);
					break;
				}
			}
			for (; nVariable < nVariables; )
			{
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETVARIABLES_LIST), nVariable, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_VARIABLESTITLEITEM_VALUE)), szExpression);
				break;
			}
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetVariablesDialog::OnOK()
{
	CTCProcedureDocumentSetVariablesItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesSetVariablesDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSETVARIABLESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesSetVariablesDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSETVARIABLESDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSetParametersDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesSetParametersDialog, CDisplayDialog)

CTCProcedurePropertiesSetParametersDialog::CTCProcedurePropertiesSetParametersDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesSetParametersDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesSetParametersDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentSetParametersItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentSetParametersItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentSetParametersItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentSetParametersItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesSetParametersDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentSetParametersItem *CTCProcedurePropertiesSetParametersDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesSetParametersDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesSetParametersDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCProcedurePropertiesSetParametersDialog::EnumParameters()
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;

	for (nParameter = 0, nParameters = (m_pDatabaseTCParameters.Copy(GetDatabase()->GetTCParameters())) ? (INT)m_pDatabaseTCParameters.GetSize() : -1; nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter = m_pDatabaseTCParameters.GetAt(nParameter)) != (CDatabaseTCParameter *)NULL)
		{
			szParameter.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERTAG_FORMAT), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)pDatabaseTCParameter->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)((pDatabaseTCParameter->GetDescription().IsEmpty()) ? (LPCTSTR)pDatabaseTCParameter->GetTag() : (LPCTSTR)szParameter));
		}
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG, CB_GETCOUNT) == nParameters) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesSetParametersDialog::ShowProperties()
{
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	CString  szItem;
	CStringArray  szParameters;
	CStringArray  szExpressions;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CTCProcedureDocumentSetParametersItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (nParameter = 0, nParameters = pStep->GetParameters(szParameters), pStep->GetExpressions(szExpressions); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTCParameter = m_pDatabaseTCParameters.GetAt(m_pDatabaseTCParameters.Find(szParameters.GetAt(nParameter)))))
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
					{
						szItem = pDatabaseTCParameter->GetTag();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
					{
						szItem = pDatabaseTCParameter->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
					{
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
					{
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
						szItem = ((pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == 0) ? (((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
					{
						szItem = (nParameter < szExpressions.GetSize()) ? ExtractParameterExpression(0, szExpressions.GetAt(nParameter)) : EMPTYSTRING;
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST), nParameter, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST), nParameter, nColumn, szItem);
				}
				continue;
			}
			szParameters.RemoveAt(nParameter);
			szExpressions.RemoveAt(nParameter);
			pStep->SetParameters(szParameters);
			pStep->SetExpressions(szExpressions);
			nParameters--;
			nParameter--;
		}
		if (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST, LVM_GETITEMCOUNT) > 0)
		{
			Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST), 0);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_AUTHORIZATION, (pStep->GetConfirmationType() & TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_AUTHORIZATION) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST)->EnableWindow();
			ShowParameterDetails();
			return;
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_AUTHORIZATION, FALSE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST)->EnableWindow(FALSE);
	ShowParameterDetails();
}

VOID CTCProcedurePropertiesSetParametersDialog::ShowParameterDetails()
{
	INT  nIndex;
	CString  szParameter;
	CStringArray  szExpressions;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CTCProcedureDocumentSetParametersItem  *pStep;

	if ((pStep = GetStep()))
	{
		if ((pDatabaseTCParameter = ((nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST))) >= 0) ? m_pDatabaseTCParameters.GetAt(m_pDatabaseTCParameters.Find(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))))) : (CDatabaseTCParameter *)NULL))
		{
			szParameter.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERTAG_FORMAT), (LPCTSTR)pDatabaseTCParameter->GetTag(), (LPCTSTR)pDatabaseTCParameter->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szParameter = (pDatabaseTCParameter->GetDescription().IsEmpty()) ? pDatabaseTCParameter->GetTag() : szParameter)));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_EXPRESSION)->SetWindowText((nIndex < pStep->GetExpressions(szExpressions)) ? ExtractParameterExpression((INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_SAMPLE)), szExpressions.GetAt(nIndex)) : EMPTYSTRING);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMARK)->ShowWindow((pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMARK)->EnableWindow((pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_ADD)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMOVE)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMOVEALL)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
			return;
		}
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_EXPRESSION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMARK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMARK)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMOVEALL)->EnableWindow(FALSE);
}

CString CTCProcedurePropertiesSetParametersDialog::CollectParameterExpression(INT nSample, LPCTSTR pszExpressions, LPCTSTR pszExpression) CONST
{
	INT  nPos[2];
	INT  nExpression;
	INT  nExpressions;
	CString  szExpressionList;
	CStringArray  szExpressions;

	for (nPos[0] = 0; (nPos[1] = (INT)_tcscspn(&pszExpressions[nPos[0]], CString(TAB))) < lstrlen(pszExpressions) - nPos[0]; nPos[0] += nPos[1] + 1)
	{
		szExpressions.Add(CString(pszExpressions).Mid(nPos[0]).Left(nPos[1]));
		continue;
	}
	for (; lstrlen(pszExpressions) > 0; )
	{
		szExpressions.Add(CString(pszExpressions).Mid(nPos[0]));
		break;
	}
	for (szExpressions.SetAtGrow(nSample, pszExpression); szExpressions.GetSize() > 0; )
	{
		if (szExpressions.GetAt(szExpressions.GetUpperBound()).IsEmpty())
		{
			szExpressions.RemoveAt(szExpressions.GetUpperBound());
			continue;
		}
		break;
	}
	for (nExpression = 0, nExpressions = (INT)szExpressions.GetSize(); nExpression < nExpressions; nExpression++)
	{
		szExpressionList += (nExpression > 0) ? (TAB + szExpressions.GetAt(nExpression)) : szExpressions.GetAt(nExpression);
		continue;
	}
	return szExpressionList;
}

CString CTCProcedurePropertiesSetParametersDialog::ExtractParameterExpression(INT nSample, LPCTSTR pszExpressions) CONST
{
	INT  nPos[2];
	CStringArray  szExpressions;

	for (nPos[0] = 0; (nPos[1] = (INT)_tcscspn(&pszExpressions[nPos[0]], CString(TAB))) < lstrlen(pszExpressions) - nPos[0]; nPos[0] += nPos[1] + 1)
	{
		szExpressions.Add(CString(pszExpressions).Mid(nPos[0]).Left(nPos[1]));
		continue;
	}
	for (; lstrlen(pszExpressions) > 0; )
	{
		szExpressions.Add(CString(pszExpressions).Mid(nPos[0]));
		break;
	}
	return((nSample < szExpressions.GetSize()) ? szExpressions.GetAt(nSample) : EMPTYSTRING);
}

INT CTCProcedurePropertiesSetParametersDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

VOID CTCProcedurePropertiesSetParametersDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_AUTHORIZATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_EXPRESSION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_SAMPLE, bCheck);
}

BOOL CTCProcedurePropertiesSetParametersDialog::IsModified() CONST
{
	CTCProcedureDocumentSetParametersItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesSetParametersDialog::Check(BOOL bModified) CONST
{
	INT  nExpression;
	INT  nExpressions;
	CStringArray  szExpressions;
	CTCProcedureDocumentSetParametersItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (nExpression = 0, nExpressions = pStep->GetExpressions(szExpressions); nExpression < nExpressions; nExpression++)
		{
			if (szExpressions.GetAt(nExpression).IsEmpty()) break;
			continue;
		}
		return((nExpression == nExpressions) ? (!bModified || IsModified()) : FALSE);
	}
	return FALSE;
}

void CTCProcedurePropertiesSetParametersDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesSetParametersDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesSetParametersDialog::PostNcDestroy()
{
	delete m_pStep[1];
	m_szColumns.RemoveAll();
	m_pDatabaseTCParameters.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesSetParametersDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesSetParametersDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_ADD, OnAdd)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMOVE, OnRemove)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMOVEALL, OnRemoveAll)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_AUTHORIZATION, OnAuthorization)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG, OnSelchangeTag)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_EXPRESSION, OnEditchangeExpression)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_SAMPLE, OnSpinchangeSample)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSetParametersDialog message handlers

BOOL CTCProcedurePropertiesSetParametersDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE));
	for (EnumParameters(), GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT), Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_SAMPLE), TCPROCEDUREPROPERTIESSETPARAMETERSSTEP_MINIMUMSAMPLE, TCPROCEDUREPROPERTIESSETPARAMETERSSTEP_MAXIMUMSAMPLE), Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_SAMPLE), TCPROCEDUREPROPERTIESSETPARAMETERSSTEP_DEFAULTSAMPLE); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE)) ? (rColumns.Width() / 7) : (9 * rColumns.Width() / 35))));
		continue;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_AUTHORIZATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_EXPRESSION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_EXPRESSION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_SAMPLE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_SAMPLE)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTCProcedurePropertiesSetParametersDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CString  szValue;
	CTCProcedurePropertiesParametersDialog  cParametersDialog;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		for (; pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED); )
		{
			ShowParameterDetails();
			break;
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK  &&  Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW))
		{
			if (cParametersDialog.Create(this, Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szValue) && !szValue.IsEmpty() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE))
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_EXPRESSION)->SetWindowText(szValue);
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_EXPRESSION, EM_SETSEL, 0, -1);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_EXPRESSION)->SetFocus();
			}
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCProcedurePropertiesSetParametersDialog::OnAdd()
{
	INT  nColumn;
	INT  nColumns;
	CString  szItem;
	CString  szExpression;
	CStringArray  szParameters;
	CStringArray  szExpressions;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CTCProcedureDocumentSetParametersItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (pStep->GetParameters(szParameters), pStep->GetExpressions(szExpressions); (pDatabaseTCParameter = m_pDatabaseTCParameters.GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG, CB_GETCURSEL))); )
		{
			szParameters.Add(pDatabaseTCParameter->GetTag());
			szExpressions.Add(m_szExpressions);
			pStep->SetParameters(szParameters);
			pStep->SetExpressions(szExpressions);
			break;
		}
	}
	if ((pDatabaseTCParameter = m_pDatabaseTCParameters.GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG, CB_GETCURSEL))))
	{
		for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
		{
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
			{
				szItem = pDatabaseTCParameter->GetTag();
				break;
			}
			for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
			{
				szItem = pDatabaseTCParameter->GetDescription();
				break;
			}
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
			{
				szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
				szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
				szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
			}
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
			{
				szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
				szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
				szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
				szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
				szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
				szItem = ((pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == 0) ? (((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
			}
			if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))
			{
				for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_EXPRESSION)->GetWindowText(szItem); Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_SAMPLE)) > 0; )
				{
					szItem.Empty();
					break;
				}
			}
			if (!nColumn)
			{
				Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST, LVM_GETITEMCOUNT), szItem);
				continue;
			}
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST, LVM_GETITEMCOUNT) - 1, nColumn, szItem);
		}
		Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST, LVM_GETITEMCOUNT) - 1);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMOVE)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMOVEALL)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetParametersDialog::OnRemove()
{
	INT  nIndex;
	CStringArray  szParameters;
	CStringArray  szExpressions;
	CTCProcedureDocumentSetParametersItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (pStep->GetParameters(szParameters), pStep->GetExpressions(szExpressions); (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST))) >= 0; )
		{
			for (; nIndex < szParameters.GetSize(); )
			{
				szParameters.RemoveAt(nIndex);
				break;
			}
			for (; nIndex < szExpressions.GetSize(); )
			{
				szExpressions.RemoveAt(nIndex);
				break;
			}
			pStep->SetParameters(szParameters);
			pStep->SetExpressions(szExpressions);
			break;
		}
	}
	if (Listview_DeleteText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST), (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST)))))
	{
		for (; Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST), 0) >= 0; )
		{
			ShowParameterDetails();
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST)) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST, LVM_GETITEMCOUNT) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetParametersDialog::OnRemoveAll()
{
	CStringArray  szParameters;
	CStringArray  szExpressions;
	CTCProcedureDocumentSetParametersItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		pStep->SetParameters(szParameters);
		pStep->SetExpressions(szExpressions);
	}
	for (; SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST, LVM_DELETEALLITEMS); )
	{
		ShowParameterDetails();
		break;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_EXPRESSION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetParametersDialog::OnAuthorization()
{
	CTCProcedureDocumentSetParametersItem  *pStep;

	if ((pStep = GetStep())) pStep->SetConfirmationType((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_AUTHORIZATION)) ? (pStep->GetConfirmationType() | TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_AUTHORIZATION) : (pStep->GetConfirmationType() & ~TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_AUTHORIZATION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetParametersDialog::OnSelchangeTag()
{
	INT  nParameter;
	INT  nParameters;
	CStringArray  szParameters;
	CStringArray  szExpressions;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CTCProcedureDocumentSetParametersItem  *pStep;

	if ((pStep = GetStep()))
	{
		if ((pDatabaseTCParameter = m_pDatabaseTCParameters.GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG, CB_GETCURSEL))))
		{
			for (nParameter = 0, nParameters = pStep->GetParameters(szParameters), m_szExpressions.Empty(); nParameter < nParameters; nParameter++)
			{
				if (szParameters.GetAt(nParameter) == pDatabaseTCParameter->GetTag()) break;
				continue;
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_EXPRESSION)->SetWindowText((nParameter < pStep->GetExpressions(szExpressions)) ? ExtractParameterExpression((INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_SAMPLE)), szExpressions.GetAt(nParameter)) : EMPTYSTRING);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_ADD)->EnableWindow((nParameter == nParameters) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMOVE)->EnableWindow((Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST)) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST, LVM_GETITEMCOUNT) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetParametersDialog::OnEditchangeExpression()
{
	INT  nParameter;
	INT  nParameters;
	CString  szExpression;
	CStringArray  szParameters;
	CStringArray  szExpressions;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CTCProcedureDocumentSetParametersItem  *pStep;

	if ((pStep = GetStep()))
	{
		if ((pDatabaseTCParameter = m_pDatabaseTCParameters.GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG, CB_GETCURSEL))))
		{
			for (nParameter = 0, nParameters = pStep->GetParameters(szParameters), pStep->GetExpressions(szExpressions), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_EXPRESSION)->GetWindowText(szExpression); nParameter < nParameters; nParameter++)
			{
				if (szParameters.GetAt(nParameter) == pDatabaseTCParameter->GetTag()) break;
				continue;
			}
			if (nParameter < nParameters)
			{
				szExpressions.SetAtGrow(nParameter, CollectParameterExpression((INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_SAMPLE)), szExpressions.GetAt(nParameter), szExpression));
				pStep->SetExpressions(szExpressions);
			}
			for (; nParameter == nParameters; )
			{
				m_szExpressions = CollectParameterExpression((INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_SAMPLE)), m_szExpressions, szExpression);
				break;
			}
			for (; !Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_SAMPLE)); )
			{
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_LIST), nParameter, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE)), szExpression);
				break;
			}
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetParametersDialog::OnSpinchangeSample()
{
	INT  nParameter;
	INT  nParameters;
	CStringArray  szParameters;
	CStringArray  szExpressions;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CTCProcedureDocumentSetParametersItem  *pStep;

	if ((pStep = GetStep()))
	{
		if ((pDatabaseTCParameter = m_pDatabaseTCParameters.GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_TAG, CB_GETCURSEL))))
		{
			for (nParameter = 0, nParameters = pStep->GetParameters(szParameters), pStep->GetExpressions(szExpressions); nParameter < nParameters; nParameter++)
			{
				if (szParameters.GetAt(nParameter) == pDatabaseTCParameter->GetTag()) break;
				continue;
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_EXPRESSION)->SetWindowText(ExtractParameterExpression((INT)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETPARAMETERS_SAMPLE)), (nParameter < nParameters) ? szExpressions.GetAt(nParameter) : m_szExpressions));
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetParametersDialog::OnOK()
{
	CTCProcedureDocumentSetParametersItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesSetParametersDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSETPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesSetParametersDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSETPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSetSynchronizationObjectDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesSetSynchronizationObjectDialog, CDisplayDialog)

CTCProcedurePropertiesSetSynchronizationObjectDialog::CTCProcedurePropertiesSetSynchronizationObjectDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesSetSynchronizationObjectDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesSetSynchronizationObjectDialog::Create(CWnd *pParentWnd, CONST CStringArray &szObjects, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentSetSynchronizationObjectItem *)NULL, m_szObjects.Copy(szObjects); (m_pStep[0] = (CTCProcedureDocumentSetSynchronizationObjectItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentSetSynchronizationObjectItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentSetSynchronizationObjectItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesSetSynchronizationObjectDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentSetSynchronizationObjectItem *CTCProcedurePropertiesSetSynchronizationObjectDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesSetSynchronizationObjectDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesSetSynchronizationObjectDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCProcedurePropertiesSetSynchronizationObjectDialog::EnumSynchronizationObjects()
{
	INT  nObject;
	INT  nObjects;

	for (nObject = 0, nObjects = (INT)m_szObjects.GetSize(); nObject < nObjects; nObject++)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szObjects.GetAt(nObject));
		continue;
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_NAME, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesSetSynchronizationObjectDialog::ShowProperties()
{
	CTCProcedureDocumentSetSynchronizationObjectItem  *pStep;

	if ((pStep = GetStep()))
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pStep->GetObjectName()));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_NAME)->SetWindowText(pStep->GetObjectName());
		return;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_NAME, CB_RESETCONTENT);
}

VOID CTCProcedurePropertiesSetSynchronizationObjectDialog::AdjustToPrivileges()
{
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_NAME, CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE), TRUE, FALSE);
}

BOOL CTCProcedurePropertiesSetSynchronizationObjectDialog::IsModified() CONST
{
	CTCProcedureDocumentSetSynchronizationObjectItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesSetSynchronizationObjectDialog::Check(BOOL bModified) CONST
{
	CTCProcedureDocumentSetSynchronizationObjectItem  *pStep;

	return(((pStep = GetStep()) && !pStep->GetObjectName().IsEmpty()) ? (!bModified || IsModified()) : FALSE);
}

void CTCProcedurePropertiesSetSynchronizationObjectDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesSetSynchronizationObjectDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesSetSynchronizationObjectDialog::PostNcDestroy()
{
	delete m_pStep[1];
	m_szObjects.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesSetSynchronizationObjectDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesSetSynchronizationObjectDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_NAME, OnEditchangeSynchronizationObjectName)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_NAME, OnSelchangeSynchronizationObjectName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSetSynchronizationObjectDialog message handlers

BOOL CTCProcedurePropertiesSetSynchronizationObjectDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (EnumSynchronizationObjects(), GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_NAME)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCProcedurePropertiesSetSynchronizationObjectDialog::OnEditchangeSynchronizationObjectName()
{
	CString  szObjectName;
	CTCProcedureDocumentSetSynchronizationObjectItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_NAME)->GetWindowText(szObjectName);
		pStep->SetObjectName(szObjectName);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetSynchronizationObjectDialog::OnSelchangeSynchronizationObjectName()
{
	CString  szObjectName;
	CTCProcedureDocumentSetSynchronizationObjectItem  *pStep;

	for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_NAME, CB_GETCURSEL)); (pStep = GetStep()); )
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SETSYNCOBJECT_NAME)->GetWindowText(szObjectName);
		pStep->SetObjectName(szObjectName);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSetSynchronizationObjectDialog::OnOK()
{
	CTCProcedureDocumentSetSynchronizationObjectItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesSetSynchronizationObjectDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSETSYNCOBJECTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesSetSynchronizationObjectDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSETSYNCOBJECTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesInjectAlertDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesInjectAlertDialog, CDisplayDialog)

CTCProcedurePropertiesInjectAlertDialog::CTCProcedurePropertiesInjectAlertDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesInjectAlertDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesInjectAlertDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentInjectAlertItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentInjectAlertItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentInjectAlertItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentInjectAlertItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesInjectAlertDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentInjectAlertItem *CTCProcedurePropertiesInjectAlertDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesInjectAlertDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesInjectAlertDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCProcedurePropertiesInjectAlertDialog::EnumCategories()
{
	INT  nCategory;
	INT  nCategories;

	for (nCategory = 0, nCategories = MAXLOCALEVENTCATEGORY - MINLOCALEVENTCATEGORY + 1; nCategory < nCategories; nCategory++)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_CATEGORY, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(MINLOCALEVENTCATEGORY + nCategory));
		continue;
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_CATEGORY, CB_GETCOUNT) == nCategories) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesInjectAlertDialog::EnumTypes()
{
	INT  nType;
	INT  nTypes;

	for (nType = 0, nTypes = MAXEVENTTYPE - MINEVENTTYPE + 1; nType < nTypes; nType++)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(MINEVENTTYPE + nType));
		continue;
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, CB_GETCOUNT) == nTypes) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesInjectAlertDialog::ShowProperties()
{
	CTCProcedureDocumentInjectAlertItem  *pStep;

	if ((pStep = GetStep()))
	{
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_BLINKING, pStep->IsBlinking());
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_CATEGORY, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_CATEGORY, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pStep->GetCategory() == EVENT_CATEGORY_SYSTEM) ? STRING(IDS_EVENTCATEGORY_SYSTEM) : ((pStep->GetCategory() == EVENT_CATEGORY_SPACECRAFT) ? STRING(IDS_EVENTCATEGORY_SPACECRAFT) : ((pStep->GetCategory() == EVENT_CATEGORY_USER) ? STRING(IDS_EVENTCATEGORY_USER) : EMPTYSTRING)))));
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pStep->GetType()));
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COLOR, CCB_SELECTCOLOR, (WPARAM)-1, (LPARAM)pStep->GetColor());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE)->SetWindowText(pStep->GetType());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_SUBTYPE)->SetWindowText(pStep->GetSubtype());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_MESSAGE)->SetWindowText(pStep->GetMessage());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COMMENTS)->SetWindowText(pStep->GetComments());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_AUDITION)->SetWindowText(pStep->GetAudition());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_NOTIFICATION)->SetWindowText(pStep->GetNotification());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COLOR_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pStep->GetType()) < 0 || pStep->GetType() == STRING(IDS_EVENTTYPE_SCHEDULED)) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COLOR)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pStep->GetType()) < 0 || pStep->GetType() == STRING(IDS_EVENTTYPE_SCHEDULED)) ? TRUE : FALSE);
		return;
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_BLINKING, FALSE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_CATEGORY, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COLOR, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_SUBTYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_MESSAGE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COMMENTS)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_AUDITION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_NOTIFICATION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COLOR_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COLOR)->EnableWindow();
}

VOID CTCProcedurePropertiesInjectAlertDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_CATEGORY, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, bCheck, TRUE, FALSE);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_SUBTYPE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_MESSAGE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COMMENTS, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_AUDITION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_NOTIFICATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COLOR, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_BLINKING, bCheck);
}

BOOL CTCProcedurePropertiesInjectAlertDialog::IsModified() CONST
{
	CTCProcedureDocumentInjectAlertItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesInjectAlertDialog::Check(BOOL bModified) CONST
{
	CTCProcedureDocumentInjectAlertItem  *pStep;

	return(((pStep = GetStep()) && pStep->GetCategory() != EVENT_CATEGORY_NONE  &&  !pStep->GetType().IsEmpty() && !pStep->GetMessage().IsEmpty()) ? (!bModified || IsModified()) : FALSE);
}

void CTCProcedurePropertiesInjectAlertDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesInjectAlertDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesInjectAlertDialog::PostNcDestroy()
{
	delete m_pStep[1];
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesInjectAlertDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesInjectAlertDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_BLINKING, OnBlinking)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_SUBTYPE, OnEditchangeSubtype)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_MESSAGE, OnEditchangeMessage)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COMMENTS, OnEditchangeComments)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_AUDITION, OnEditchangeAudition)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_NOTIFICATION, OnEditchangeNotification)
	ON_CBN_EDITCHANGE(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, OnEditchangeType)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_CATEGORY, OnSelchangeCategory)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, OnSelchangeType)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COLOR, OnSelchangeColor)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesInjectAlertDialog message handlers

BOOL CTCProcedurePropertiesInjectAlertDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (EnumCategories(), EnumTypes(), GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_CATEGORY_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_CATEGORY)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_SUBTYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_SUBTYPE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_MESSAGE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_MESSAGE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COMMENTS_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COMMENTS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_AUDITION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_AUDITION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_NOTIFICATION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_NOTIFICATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_BLINKING)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCProcedurePropertiesInjectAlertDialog::OnBlinking()
{
	CTCProcedureDocumentInjectAlertItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) pStep->DoBlinking(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_BLINKING));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesInjectAlertDialog::OnEditchangeType()
{
	CString  szType;
	CTCProcedureDocumentInjectAlertItem  *pStep;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE)->GetWindowText(szType); (pStep = GetStep()); )
	{
		pStep->SetType(szType);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COLOR_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szType) < 0 || szType == STRING(IDS_EVENTTYPE_SCHEDULED)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COLOR)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szType) < 0 || szType == STRING(IDS_EVENTTYPE_SCHEDULED)) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesInjectAlertDialog::OnEditchangeSubtype()
{
	CString  szSubtype;
	CTCProcedureDocumentInjectAlertItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_SUBTYPE)->GetWindowText(szSubtype);
		pStep->SetSubtype(szSubtype);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesInjectAlertDialog::OnEditchangeMessage()
{
	CString  szMessage;
	CTCProcedureDocumentInjectAlertItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_MESSAGE)->GetWindowText(szMessage);
		pStep->SetMessage(szMessage);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesInjectAlertDialog::OnEditchangeComments()
{
	CString  szComments;
	CTCProcedureDocumentInjectAlertItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COMMENTS)->GetWindowText(szComments);
		pStep->SetComments(szComments);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesInjectAlertDialog::OnEditchangeAudition()
{
	CString  szAudition;
	CTCProcedureDocumentInjectAlertItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_AUDITION)->GetWindowText(szAudition);
		pStep->SetAudition(szAudition);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesInjectAlertDialog::OnEditchangeNotification()
{
	CString  szNotification;
	CTCProcedureDocumentInjectAlertItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_NOTIFICATION)->GetWindowText(szNotification);
		pStep->SetNotification(szNotification);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesInjectAlertDialog::OnSelchangeCategory()
{
	CString  szCategory;
	CTCProcedureDocumentInjectAlertItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_CATEGORY)->GetWindowText(szCategory);
		pStep->SetCategory((szCategory == STRING(IDS_EVENTCATEGORY_SYSTEM)) ? EVENT_CATEGORY_SYSTEM : ((szCategory == STRING(IDS_EVENTCATEGORY_SPACECRAFT)) ? EVENT_CATEGORY_SPACECRAFT : ((szCategory == STRING(IDS_EVENTCATEGORY_USER)) ? EVENT_CATEGORY_USER : EVENT_CATEGORY_NONE)));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesInjectAlertDialog::OnSelchangeType()
{
	CString  szType;
	CTCProcedureDocumentInjectAlertItem  *pStep;

	for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, CB_GETCURSEL)), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE)->GetWindowText(szType); (pStep = GetStep()); )
	{
		pStep->SetType(szType);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COLOR_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szType) < 0 || szType == STRING(IDS_EVENTTYPE_SCHEDULED)) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COLOR)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szType) < 0 || szType == STRING(IDS_EVENTTYPE_SCHEDULED)) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesInjectAlertDialog::OnSelchangeColor()
{
	CTCProcedureDocumentInjectAlertItem  *pStep;

	if ((pStep = GetStep())) pStep->SetColor((COLORREF)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COLOR, CCB_GETCOLOR, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_INJECTALERT_COLOR, CB_GETCURSEL)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesInjectAlertDialog::OnOK()
{
	CTCProcedureDocumentInjectAlertItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesInjectAlertDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESINJECTALERTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesInjectAlertDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESINJECTALERTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesCallProcedureDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesCallProcedureDialog, CDisplayDialog)

CTCProcedurePropertiesCallProcedureDialog::CTCProcedurePropertiesCallProcedureDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesCallProcedureDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesCallProcedureDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentCallProcedureItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentCallProcedureItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentCallProcedureItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentCallProcedureItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesCallProcedureDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentCallProcedureItem *CTCProcedurePropertiesCallProcedureDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesCallProcedureDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesCallProcedureDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCProcedurePropertiesCallProcedureDialog::EnumProcedures()
{
	INT  nProcedure;
	INT  nProcedures;
	CString  szProcedure;
	CDatabaseTCProcedure  *pDatabaseTCProcedure;

	for (nProcedure = 0, nProcedures = (INT)GetDatabase()->GetTCProcedures()->GetSize(); nProcedure < nProcedures; nProcedure++)
	{
		if ((pDatabaseTCProcedure = GetDatabase()->GetTCProcedures()->GetAt(nProcedure)) != (CDatabaseTCProcedure *)NULL)
		{
			szProcedure.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTCPROCEDURE_FORMAT), (LPCTSTR)pDatabaseTCProcedure->GetName(), (LPCTSTR)pDatabaseTCProcedure->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)((pDatabaseTCProcedure->GetDescription().IsEmpty()) ? (LPCTSTR)pDatabaseTCProcedure->GetName() : (LPCTSTR)szProcedure));
		}
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_NAME, CB_GETCOUNT) == nProcedures) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesCallProcedureDialog::ShowProperties()
{
	CString  szName;
	CDatabaseTCProcedure  *pDatabaseTCProcedure;
	CTCProcedureDocumentCallProcedureItem  *pStep;

	if ((pStep = GetStep()))
	{
		if ((pDatabaseTCProcedure = GetDatabase()->GetTCProcedures()->GetAt(GetDatabase()->GetTCProcedures()->Find(pStep->GetProcedure()))))
		{
			szName.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTCPROCEDURE_FORMAT), (LPCTSTR)pDatabaseTCProcedure->GetName(), (LPCTSTR)pDatabaseTCProcedure->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szName = (pDatabaseTCProcedure->GetDescription().IsEmpty()) ? pDatabaseTCProcedure->GetName() : szName)));
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_AUTHORIZATION, (pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_AUTHORIZATION) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_DESCRIPTION)->SetWindowText(pStep->GetDescription());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_INVARIANTCONDITION)->SetWindowText(pStep->GetInvariantCondition());
			ShowArguments();
			return;
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_AUTHORIZATION, FALSE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_DESCRIPTION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_INVARIANTCONDITION)->SetWindowText(EMPTYSTRING);
	ShowArguments();
}

VOID CTCProcedurePropertiesCallProcedureDialog::ShowArguments()
{
	INT  nColumn;
	INT  nColumns;
	INT  nArgument;
	INT  nArguments;
	CString  szItem;
	CStringArray  szArgumentValues;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CTCProcedureDocumentCallProcedureItem  *pStep;

	for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST, LVM_DELETEALLITEMS); (pStep = GetStep()); )
	{
		for (nArgument = 0, nArguments = pStep->GetArguments(pDatabaseTCProcedureArguments, szArgumentValues); nArgument < nArguments; nArgument++)
		{
			if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments.GetAt(nArgument)))
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME); )
					{
						szItem = pDatabaseTCProcedureArgument->GetTag();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_DESCRIPTION); )
					{
						szItem = pDatabaseTCProcedureArgument->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE))
					{
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW) : EMPTYSTRING;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_CODING))
					{
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_SIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_FLOATINGPOINT) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING) : szItem;
						szItem = ((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0 && (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL))) ? ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_UNSIGNEDINTEGER) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_BITPATTERN)) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_RADIX))
					{
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_BINARY) : EMPTYSTRING;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_OCTAL) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_DECIMAL) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_HEXADECIMAL) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE); )
					{
						szItem = ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT) ? ((nArgument < szArgumentValues.GetSize()) ? szArgumentValues.GetAt(nArgument) : EMPTYSTRING) : pDatabaseTCProcedureArgument->GetConstValueAsText();
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST), nArgument, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST), nArgument, nColumn, szItem);
				}
			}
		}
		break;
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_VALUE)->SetWindowText(EMPTYSTRING), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_SETVALUE)->EnableWindow(FALSE); SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST, LVM_GETITEMCOUNT) > 0; )
	{
		Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST), 0);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_VALUE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_VALUE)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_VALUE)->EnableWindow(FALSE);
}

INT CTCProcedurePropertiesCallProcedureDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

VOID CTCProcedurePropertiesCallProcedureDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_NAME, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_AUTHORIZATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_DESCRIPTION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_INVARIANTCONDITION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_VALUE, bCheck);
}

BOOL CTCProcedurePropertiesCallProcedureDialog::IsModified() CONST
{
	CTCProcedureDocumentCallProcedureItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesCallProcedureDialog::Check(BOOL bModified) CONST
{
	INT  nArgument;
	INT  nArguments;
	CStringArray  szArgumentValues;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CTCProcedureDocumentCallProcedureItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (nArgument = 0, nArguments = (!pStep->GetProcedure().IsEmpty()) ? pStep->GetArguments(pDatabaseTCProcedureArguments, szArgumentValues) : -1; nArgument < nArguments; nArgument++)
		{
			if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments.GetAt(nArgument)) && (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT  &&  szArgumentValues.GetAt(nArgument).IsEmpty()) break;
			continue;
		}
		return((nArgument == nArguments) ? (!bModified || IsModified()) : FALSE);
	}
	return FALSE;
}

void CTCProcedurePropertiesCallProcedureDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesCallProcedureDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesCallProcedureDialog::PostNcDestroy()
{
	delete m_pStep[1];
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesCallProcedureDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesCallProcedureDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_AUTHORIZATION, OnAuthorization)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_SETVALUE, OnSetArgumentValue)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_DESCRIPTION, OnEditchangeDescription)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_VALUE, OnEditchangeArgumentValue)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_NAME, OnSelchangeProcedureName)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_INVARIANTCONDITION, OnEditchangeInvariantCondition)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesCallProcedureDialog message handlers

BOOL CTCProcedurePropertiesCallProcedureDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE));
	for (EnumProcedures(), GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE)) ? (rColumns.Width() / 7) : (9 * rColumns.Width() / 35))));
		continue;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_AUTHORIZATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_INVARIANTCONDITION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_INVARIANTCONDITION)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTCProcedurePropertiesCallProcedureDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CStringArray  szArgumentValues;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CTCProcedureDocumentCallProcedureItem  *pStep;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if ((pStep = (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) ? GetStep() : (CTCProcedureDocumentCallProcedureItem *)NULL) && pStep->GetArguments(pDatabaseTCProcedureArguments, szArgumentValues) >= 0)
		{
			if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments.GetAt(pNotifyListView->iItem)) && (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_TYPE_CONSTANT))
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_VALUE)->SetWindowText(pDatabaseTCProcedureArgument->GetConstValueAsText());
				AccessControl(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_VALUE, FALSE);
			}
			else
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_VALUE)->SetWindowText((pNotifyListView->iItem < szArgumentValues.GetSize()) ? szArgumentValues.GetAt(pNotifyListView->iItem) : EMPTYSTRING);
				AccessControl(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_VALUE, CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_SETVALUE)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST)->SetFocus();
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_VALUE, EM_SETSEL);
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCProcedurePropertiesCallProcedureDialog::OnAuthorization()
{
	CTCProcedureDocumentCallProcedureItem  *pStep;

	if ((pStep = GetStep())) pStep->SetTriggerType((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_AUTHORIZATION)) ? (pStep->GetTriggerType() | TCPROCEDURETHREADSTEP_TRIGGERTYPE_AUTHORIZATION) : (pStep->GetTriggerType() & ~TCPROCEDURETHREADSTEP_TRIGGERTYPE_AUTHORIZATION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesCallProcedureDialog::OnSetArgumentValue()
{
	INT  nIndex;
	CString  szValue;
	CStringArray  szArgumentValues;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CTCProcedureDocumentCallProcedureItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_VALUE)->GetWindowText(szValue); (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST))) >= 0 && nIndex < pStep->GetArguments(pDatabaseTCProcedureArguments, szArgumentValues); )
		{
			szArgumentValues.SetAtGrow(nIndex, szValue);
			pStep->SetArguments(pDatabaseTCProcedureArguments, szArgumentValues);
			break;
		}
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_VALUE)->GetWindowText(szValue); (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST))) >= 0; )
	{
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE)), szValue);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_SETVALUE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesCallProcedureDialog::OnEditchangeDescription()
{
	CString  szDescription;
	CTCProcedureDocumentCallProcedureItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_DESCRIPTION)->GetWindowText(szDescription);
		pStep->SetDescription(szDescription);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesCallProcedureDialog::OnEditchangeInvariantCondition()
{
	CString  szCondition;
	CTCProcedureDocumentCallProcedureItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_INVARIANTCONDITION)->GetWindowText(szCondition);
		pStep->SetInvariantCondition(szCondition);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesCallProcedureDialog::OnEditchangeArgumentValue()
{
	INT  nIndex;
	CString  szValue;
	CStringArray  szArgumentValues;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CTCProcedureDocumentCallProcedureItem  *pStep;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_VALUE)->GetWindowText(szValue);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_SETVALUE)->EnableWindow(((nIndex = ((pStep = GetStep())) ? Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_ARGUMENTS_LIST)) : -1) >= 0 && nIndex < pStep->GetArguments(pDatabaseTCProcedureArguments, szArgumentValues) && szValue != szArgumentValues.GetAt(nIndex) && !szValue.IsEmpty()) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
}

void CTCProcedurePropertiesCallProcedureDialog::OnSelchangeProcedureName()
{
	INT  nPos;
	CString  szName;
	CString  szFormat;
	CStringArray  szArgumentValues;
	CDatabaseTCProcedure  *pDatabaseTCProcedure;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CTCProcedureDocumentCallProcedureItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_NAME)->GetWindowText(szName), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTCPROCEDURE_FORMAT), EMPTYSTRING, EMPTYSTRING); (pDatabaseTCProcedure = GetDatabase()->GetTCProcedures()->GetAt(GetDatabase()->GetTCProcedures()->Find((szName = ((nPos = szName.Find(szFormat.GetAt(0))) >= 0) ? szName.Left(nPos) : szName)))); )
		{
			szArgumentValues.SetSize(pDatabaseTCProcedure->GetArguments(pDatabaseTCProcedureArguments));
			pStep->SetProcedure(pDatabaseTCProcedure->GetName());
			pStep->SetDescription(pDatabaseTCProcedure->GetDescription());
			pStep->SetArguments(pDatabaseTCProcedureArguments, szArgumentValues);
			break;
		}
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_NAME)->GetWindowText(szName), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTCPROCEDURE_FORMAT), EMPTYSTRING, EMPTYSTRING); (pDatabaseTCProcedure = GetDatabase()->GetTCProcedures()->GetAt(GetDatabase()->GetTCProcedures()->Find((szName = ((nPos = szName.Find(szFormat.GetAt(0))) >= 0) ? szName.Left(nPos) : szName)))); )
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CALLPROCEDURE_DESCRIPTION)->SetWindowText(pDatabaseTCProcedure->GetDescription());
		break;
	}
	ShowArguments();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesCallProcedureDialog::OnOK()
{
	CTCProcedureDocumentCallProcedureItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesCallProcedureDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESCALLPROCEDUREDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesCallProcedureDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESCALLPROCEDUREDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesStartProcedureDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesStartProcedureDialog, CDisplayDialog)

CTCProcedurePropertiesStartProcedureDialog::CTCProcedurePropertiesStartProcedureDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesStartProcedureDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesStartProcedureDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentStartProcedureItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentStartProcedureItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentStartProcedureItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentStartProcedureItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesStartProcedureDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentStartProcedureItem *CTCProcedurePropertiesStartProcedureDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesStartProcedureDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesStartProcedureDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCProcedurePropertiesStartProcedureDialog::EnumProcedures()
{
	INT  nProcedure;
	INT  nProcedures;
	CString  szProcedure;
	CDatabaseTCProcedure  *pDatabaseTCProcedure;

	for (nProcedure = 0, nProcedures = (INT)GetDatabase()->GetTCProcedures()->GetSize(); nProcedure < nProcedures; nProcedure++)
	{
		if ((pDatabaseTCProcedure = GetDatabase()->GetTCProcedures()->GetAt(nProcedure)) != (CDatabaseTCProcedure *)NULL)
		{
			szProcedure.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTCPROCEDURE_FORMAT), (LPCTSTR)pDatabaseTCProcedure->GetName(), (LPCTSTR)pDatabaseTCProcedure->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)((pDatabaseTCProcedure->GetDescription().IsEmpty()) ? (LPCTSTR)pDatabaseTCProcedure->GetName() : (LPCTSTR)szProcedure));
		}
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_NAME, CB_GETCOUNT) == nProcedures) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesStartProcedureDialog::ShowProperties()
{
	CString  szName;
	CDatabaseTCProcedure  *pDatabaseTCProcedure;
	CTCProcedureDocumentStartProcedureItem  *pStep;

	if ((pStep = GetStep()))
	{
		if ((pDatabaseTCProcedure = GetDatabase()->GetTCProcedures()->GetAt(GetDatabase()->GetTCProcedures()->Find(pStep->GetProcedure()))))
		{
			szName.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTCPROCEDURE_FORMAT), (LPCTSTR)pDatabaseTCProcedure->GetName(), (LPCTSTR)pDatabaseTCProcedure->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szName = (pDatabaseTCProcedure->GetDescription().IsEmpty()) ? pDatabaseTCProcedure->GetName() : szName)));
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_AUTHORIZATION, (pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_AUTHORIZATION) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_DESCRIPTION)->SetWindowText(pStep->GetDescription());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_INVARIANTCONDITION)->SetWindowText(pStep->GetInvariantCondition());
			ShowArguments();
			return;
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_AUTHORIZATION, FALSE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_DESCRIPTION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_INVARIANTCONDITION)->SetWindowText(EMPTYSTRING);
	ShowArguments();
}

VOID CTCProcedurePropertiesStartProcedureDialog::ShowArguments()
{
	INT  nColumn;
	INT  nColumns;
	INT  nArgument;
	INT  nArguments;
	CString  szItem;
	CStringArray  szArgumentValues;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CTCProcedureDocumentStartProcedureItem  *pStep;

	for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST, LVM_DELETEALLITEMS); (pStep = GetStep()); )
	{
		for (nArgument = 0, nArguments = pStep->GetArguments(pDatabaseTCProcedureArguments, szArgumentValues); nArgument < nArguments; nArgument++)
		{
			if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments.GetAt(nArgument)))
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME); )
					{
						szItem = pDatabaseTCProcedureArgument->GetTag();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_DESCRIPTION); )
					{
						szItem = pDatabaseTCProcedureArgument->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE))
					{
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_RAW) : EMPTYSTRING;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_NUMERICAL) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERTYPE_STATUS) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_CODING))
					{
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_SIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_FLOATINGPOINT) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_DATETIME) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_STRING) : szItem;
						szItem = ((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING)) == 0 && (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL))) ? ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_UNSIGNEDINTEGER) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERCODING_BITPATTERN)) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_RADIX))
					{
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_BINARY) : EMPTYSTRING;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_OCTAL) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_DECIMAL) : szItem;
						szItem = (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTPARAMETERRADIX_HEXADECIMAL) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE); )
					{
						szItem = ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT) ? ((nArgument < szArgumentValues.GetSize()) ? szArgumentValues.GetAt(nArgument) : EMPTYSTRING) : pDatabaseTCProcedureArgument->GetConstValueAsText();
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST), nArgument, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST), nArgument, nColumn, szItem);
				}
			}
		}
		break;
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_VALUE)->SetWindowText(EMPTYSTRING), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_SETVALUE)->EnableWindow(FALSE); SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST, LVM_GETITEMCOUNT) > 0; )
	{
		Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST), 0);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_VALUE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_VALUE)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_VALUE)->EnableWindow(FALSE);
}

INT CTCProcedurePropertiesStartProcedureDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

VOID CTCProcedurePropertiesStartProcedureDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_NAME, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_AUTHORIZATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_DESCRIPTION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_INVARIANTCONDITION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_VALUE, bCheck);
}

BOOL CTCProcedurePropertiesStartProcedureDialog::IsModified() CONST
{
	CTCProcedureDocumentStartProcedureItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesStartProcedureDialog::Check(BOOL bModified) CONST
{
	INT  nArgument;
	INT  nArguments;
	CStringArray  szArgumentValues;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CTCProcedureDocumentStartProcedureItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (nArgument = 0, nArguments = (!pStep->GetProcedure().IsEmpty()) ? pStep->GetArguments(pDatabaseTCProcedureArguments, szArgumentValues) : -1; nArgument < nArguments; nArgument++)
		{
			if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments.GetAt(nArgument)) && (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT  &&  szArgumentValues.GetAt(nArgument).IsEmpty()) break;
			continue;
		}
		return((nArgument == nArguments) ? (!bModified || IsModified()) : FALSE);
	}
	return FALSE;
}

void CTCProcedurePropertiesStartProcedureDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesStartProcedureDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesStartProcedureDialog::PostNcDestroy()
{
	delete m_pStep[1];
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesStartProcedureDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesStartProcedureDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_AUTHORIZATION, OnAuthorization)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_SETVALUE, OnSetArgumentValue)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_DESCRIPTION, OnEditchangeDescription)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_VALUE, OnEditchangeArgumentValue)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_NAME, OnSelchangeProcedureName)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_INVARIANTCONDITION, OnEditchangeInvariantCondition)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesStartProcedureDialog message handlers

BOOL CTCProcedurePropertiesStartProcedureDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE));
	for (EnumProcedures(), GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_NAME)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_TYPE)) ? (rColumns.Width() / 7) : (9 * rColumns.Width() / 35))));
		continue;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_AUTHORIZATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_INVARIANTCONDITION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_INVARIANTCONDITION)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTCProcedurePropertiesStartProcedureDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CStringArray  szArgumentValues;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CTCProcedureDocumentStartProcedureItem  *pStep;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if ((pStep = (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) ? GetStep() : (CTCProcedureDocumentStartProcedureItem *)NULL) && pStep->GetArguments(pDatabaseTCProcedureArguments, szArgumentValues) >= 0)
		{
			if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments.GetAt(pNotifyListView->iItem)) && (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_TYPE_CONSTANT))
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_VALUE)->SetWindowText(pDatabaseTCProcedureArgument->GetConstValueAsText());
				AccessControl(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_VALUE, FALSE);
			}
			else
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_VALUE)->SetWindowText((pNotifyListView->iItem < szArgumentValues.GetSize()) ? szArgumentValues.GetAt(pNotifyListView->iItem) : EMPTYSTRING);
				AccessControl(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_VALUE, CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_SETVALUE)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST)->SetFocus();
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_VALUE, EM_SETSEL);
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCProcedurePropertiesStartProcedureDialog::OnAuthorization()
{
	CTCProcedureDocumentStartProcedureItem  *pStep;

	if ((pStep = GetStep())) pStep->SetTriggerType((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_AUTHORIZATION)) ? (pStep->GetTriggerType() | TCPROCEDURETHREADSTEP_TRIGGERTYPE_AUTHORIZATION) : (pStep->GetTriggerType() & ~TCPROCEDURETHREADSTEP_TRIGGERTYPE_AUTHORIZATION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesStartProcedureDialog::OnSetArgumentValue()
{
	INT  nIndex;
	CString  szValue;
	CStringArray  szArgumentValues;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CTCProcedureDocumentStartProcedureItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_VALUE)->GetWindowText(szValue); (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST))) >= 0 && nIndex < pStep->GetArguments(pDatabaseTCProcedureArguments, szArgumentValues); )
		{
			szArgumentValues.SetAtGrow(nIndex, szValue);
			pStep->SetArguments(pDatabaseTCProcedureArguments, szArgumentValues);
			break;
		}
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_VALUE)->GetWindowText(szValue); (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST))) >= 0; )
	{
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_ARGUMENTSTITLEITEM_VALUE)), szValue);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_SETVALUE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesStartProcedureDialog::OnEditchangeDescription()
{
	CString  szDescription;
	CTCProcedureDocumentStartProcedureItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_DESCRIPTION)->GetWindowText(szDescription);
		pStep->SetDescription(szDescription);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesStartProcedureDialog::OnEditchangeInvariantCondition()
{
	CString  szCondition;
	CTCProcedureDocumentStartProcedureItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_INVARIANTCONDITION)->GetWindowText(szCondition);
		pStep->SetInvariantCondition(szCondition);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesStartProcedureDialog::OnEditchangeArgumentValue()
{
	INT  nIndex;
	CString  szValue;
	CStringArray  szArgumentValues;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CTCProcedureDocumentStartProcedureItem  *pStep;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_VALUE)->GetWindowText(szValue);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_SETVALUE)->EnableWindow(((nIndex = ((pStep = GetStep())) ? Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_ARGUMENTS_LIST)) : -1) >= 0 && nIndex < pStep->GetArguments(pDatabaseTCProcedureArguments, szArgumentValues) && szValue != szArgumentValues.GetAt(nIndex) && !szValue.IsEmpty()) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
}

void CTCProcedurePropertiesStartProcedureDialog::OnSelchangeProcedureName()
{
	INT  nPos;
	CString  szName;
	CString  szFormat;
	CStringArray  szArgumentValues;
	CDatabaseTCProcedure  *pDatabaseTCProcedure;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CTCProcedureDocumentStartProcedureItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_NAME)->GetWindowText(szName), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTCPROCEDURE_FORMAT), EMPTYSTRING, EMPTYSTRING); (pDatabaseTCProcedure = GetDatabase()->GetTCProcedures()->GetAt(GetDatabase()->GetTCProcedures()->Find((szName = ((nPos = szName.Find(szFormat.GetAt(0))) >= 0) ? szName.Left(nPos) : szName)))); )
		{
			szArgumentValues.SetSize(pDatabaseTCProcedure->GetArguments(pDatabaseTCProcedureArguments));
			pStep->SetProcedure(pDatabaseTCProcedure->GetName());
			pStep->SetDescription(pDatabaseTCProcedure->GetDescription());
			pStep->SetArguments(pDatabaseTCProcedureArguments, szArgumentValues);
			break;
		}
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_NAME)->GetWindowText(szName), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTCPROCEDURE_FORMAT), EMPTYSTRING, EMPTYSTRING); (pDatabaseTCProcedure = GetDatabase()->GetTCProcedures()->GetAt(GetDatabase()->GetTCProcedures()->Find((szName = ((nPos = szName.Find(szFormat.GetAt(0))) >= 0) ? szName.Left(nPos) : szName)))); )
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_STARTPROCEDURE_DESCRIPTION)->SetWindowText(pDatabaseTCProcedure->GetDescription());
		break;
	}
	ShowArguments();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesStartProcedureDialog::OnOK()
{
	CTCProcedureDocumentStartProcedureItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesStartProcedureDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSTARTPROCEDUREDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesStartProcedureDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSTARTPROCEDUREDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesControlProcedureDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesControlProcedureDialog, CDisplayDialog)

CTCProcedurePropertiesControlProcedureDialog::CTCProcedurePropertiesControlProcedureDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesControlProcedureDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesControlProcedureDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentControlProcedureItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentControlProcedureItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentControlProcedureItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentControlProcedureItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesControlProcedureDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentControlProcedureItem *CTCProcedurePropertiesControlProcedureDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesControlProcedureDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesControlProcedureDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCProcedurePropertiesControlProcedureDialog::EnumProcedures()
{
	INT  nProcedure;
	INT  nProcedures;
	CDatabaseTCProcedure  *pDatabaseTCProcedure;

	for (nProcedure = 0, nProcedures = (INT)GetDatabase()->GetTCProcedures()->GetSize(); nProcedure < nProcedures; nProcedure++)
	{
		if ((pDatabaseTCProcedure = GetDatabase()->GetTCProcedures()->GetAt(nProcedure)) != (CDatabaseTCProcedure *)NULL)
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTCProcedure->GetName());
			continue;
		}
	}
	if ((pDatabaseTCProcedure = new CDatabaseTCProcedure))
	{
		if (GetParentDisplay()->GetProcedure(pDatabaseTCProcedure))
		{
			for (; SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTCProcedure->GetName()) < 0 || pDatabaseTCProcedure->GetName().IsEmpty(); )
			{
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)((!pDatabaseTCProcedure->GetName().IsEmpty()) ? (LPCTSTR)pDatabaseTCProcedure->GetName() : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_CONTROLPROCEDURE_DEFAULTNAME)));
				break;
			}
		}
		delete pDatabaseTCProcedure;
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesControlProcedureDialog::EnumActionStates()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_STATE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDURE_ACTIONSTATE_SUSPEND)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_STATE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDURE_ACTIONSTATE_RESUME)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_STATE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDURE_ACTIONSTATE_ABORT)) >= 0) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesControlProcedureDialog::ShowProperties()
{
	CTCProcedureDocumentControlProcedureItem  *pStep;

	if ((pStep = GetStep()))
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((!pStep->GetProcedure().IsEmpty()) ? (LPCTSTR)pStep->GetProcedure() : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_CONTROLPROCEDURE_DEFAULTNAME))));
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_STATE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_STATE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pStep->GetActionState() & TCPROCEDURE_ACTIONSTATE_SUSPEND) ? STRING(IDS_TCPROCEDURE_ACTIONSTATE_SUSPEND) : ((pStep->GetActionState() & TCPROCEDURE_ACTIONSTATE_RESUME) ? STRING(IDS_TCPROCEDURE_ACTIONSTATE_RESUME) : ((pStep->GetActionState() & TCPROCEDURE_ACTIONSTATE_ABORT) ? STRING(IDS_TCPROCEDURE_ACTIONSTATE_ABORT) : EMPTYSTRING)))));
		return;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_NAME, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_STATE, CB_SETCURSEL, (WPARAM)-1);
}

VOID CTCProcedurePropertiesControlProcedureDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_NAME, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)), TRUE, FALSE);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_STATE, bCheck);
}

BOOL CTCProcedurePropertiesControlProcedureDialog::IsModified() CONST
{
	CTCProcedureDocumentControlProcedureItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesControlProcedureDialog::Check(BOOL bModified) CONST
{
	CTCProcedureDocumentControlProcedureItem  *pStep;

	return(((pStep = GetStep()) && pStep->GetActionState() != 0) ? (!bModified || IsModified()) : FALSE);
}

void CTCProcedurePropertiesControlProcedureDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesControlProcedureDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesControlProcedureDialog::PostNcDestroy()
{
	delete m_pStep[1];
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesControlProcedureDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesControlProcedureDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_NAME, OnSelchangeName)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_STATE, OnSelchangeState)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesControlProcedureDialog message handlers

BOOL CTCProcedurePropertiesControlProcedureDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (EnumProcedures(), EnumActionStates(), GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_STATE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_STATE)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCProcedurePropertiesControlProcedureDialog::OnSelchangeName()
{
	CString  szName;
	CTCProcedureDocumentControlProcedureItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_NAME)->GetWindowText(szName);
		pStep->SetProcedure((szName != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_CONTROLPROCEDURE_DEFAULTNAME)) ? szName : EMPTYSTRING);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesControlProcedureDialog::OnSelchangeState()
{
	CString  szState;
	CTCProcedureDocumentControlProcedureItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CONTROLPROCEDURE_STATE)->GetWindowText(szState);
		pStep->SetActionState((szState == STRING(IDS_TCPROCEDURE_ACTIONSTATE_SUSPEND)) ? TCPROCEDURE_ACTIONSTATE_SUSPEND : ((szState == STRING(IDS_TCPROCEDURE_ACTIONSTATE_RESUME)) ? TCPROCEDURE_ACTIONSTATE_RESUME : ((szState == STRING(IDS_TCPROCEDURE_ACTIONSTATE_ABORT)) ? TCPROCEDURE_ACTIONSTATE_ABORT : 0)));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesControlProcedureDialog::OnOK()
{
	CTCProcedureDocumentControlProcedureItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesControlProcedureDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESCONTROLPROCEDUREDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesControlProcedureDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESCONTROLPROCEDUREDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesControlThreadDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesControlThreadDialog, CDisplayDialog)

CTCProcedurePropertiesControlThreadDialog::CTCProcedurePropertiesControlThreadDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesControlThreadDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesControlThreadDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentControlThreadItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentControlThreadItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentControlThreadItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentControlThreadItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesControlThreadDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentControlThreadItem *CTCProcedurePropertiesControlThreadDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesControlThreadDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesControlThreadDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCProcedurePropertiesControlThreadDialog::EnumThreads()
{
	INT  nThread;
	INT  nThreads;
	CDatabaseTCProcedure  cDatabaseTCProcedure;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	for (nThread = 0, nThreads = (GetParentDisplay()->GetProcedure(&cDatabaseTCProcedure)) ? (INT)cDatabaseTCProcedure.GetSize() : 0; nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread = cDatabaseTCProcedure.GetAt(nThread)) != (CDatabaseTCProcedureThread *)NULL)
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTCProcedureThread->GetName());
			continue;
		}
	}
	for (; !SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_NAME, CB_GETCOUNT); )
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_NAME, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_CONTROLTHREAD_DEFAULTNAME));
		break;
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesControlThreadDialog::EnumActionStates()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_STATE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDURETHREAD_ACTIONSTATE_SUSPEND)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_STATE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDURETHREAD_ACTIONSTATE_RESUME)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_STATE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDURETHREAD_ACTIONSTATE_ENABLE)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_STATE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDURETHREAD_ACTIONSTATE_DISABLE)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_STATE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDURETHREAD_ACTIONSTATE_ABORT)) >= 0) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesControlThreadDialog::ShowProperties()
{
	CTCProcedureDocumentControlThreadItem  *pStep;

	if ((pStep = GetStep()))
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((!pStep->GetThread().IsEmpty()) ? (LPCTSTR)pStep->GetThread() : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_CONTROLTHREAD_DEFAULTNAME))));
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_STATE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_STATE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pStep->GetActionState() & TCPROCEDURETHREAD_ACTIONSTATE_SUSPEND) ? STRING(IDS_TCPROCEDURETHREAD_ACTIONSTATE_SUSPEND) : ((pStep->GetActionState() & TCPROCEDURETHREAD_ACTIONSTATE_RESUME) ? STRING(IDS_TCPROCEDURETHREAD_ACTIONSTATE_RESUME) : ((pStep->GetActionState() & TCPROCEDURETHREAD_ACTIONSTATE_ENABLE) ? STRING(IDS_TCPROCEDURETHREAD_ACTIONSTATE_ENABLE) : ((pStep->GetActionState() & TCPROCEDURETHREAD_ACTIONSTATE_DISABLE) ? STRING(IDS_TCPROCEDURETHREAD_ACTIONSTATE_DISABLE) : ((pStep->GetActionState() & TCPROCEDURETHREAD_ACTIONSTATE_ABORT) ? STRING(IDS_TCPROCEDURETHREAD_ACTIONSTATE_ABORT) : EMPTYSTRING)))))));
		return;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_NAME, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_STATE, CB_SETCURSEL, (WPARAM)-1);
}

VOID CTCProcedurePropertiesControlThreadDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_NAME, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)), TRUE, FALSE);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_STATE, bCheck);
}

BOOL CTCProcedurePropertiesControlThreadDialog::IsModified() CONST
{
	CTCProcedureDocumentControlThreadItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesControlThreadDialog::Check(BOOL bModified) CONST
{
	CTCProcedureDocumentControlThreadItem  *pStep;

	return(((pStep = GetStep()) && pStep->GetActionState() != 0) ? (!bModified || IsModified()) : FALSE);
}

void CTCProcedurePropertiesControlThreadDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesControlThreadDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesControlThreadDialog::PostNcDestroy()
{
	delete m_pStep[1];
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesControlThreadDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesControlThreadDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_NAME, OnSelchangeName)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_STATE, OnSelchangeState)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesControlThreadDialog message handlers

BOOL CTCProcedurePropertiesControlThreadDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (EnumThreads(), EnumActionStates(), GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_STATE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_STATE)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCProcedurePropertiesControlThreadDialog::OnSelchangeName()
{
	CString  szName;
	CTCProcedureDocumentControlThreadItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_NAME)->GetWindowText(szName);
		pStep->SetThread((szName != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_CONTROLTHREAD_DEFAULTNAME)) ? szName : EMPTYSTRING);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesControlThreadDialog::OnSelchangeState()
{
	CString  szState;
	CTCProcedureDocumentControlThreadItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_CONTROLTHREAD_STATE)->GetWindowText(szState);
		pStep->SetActionState((szState == STRING(IDS_TCPROCEDURETHREAD_ACTIONSTATE_SUSPEND)) ? TCPROCEDURETHREAD_ACTIONSTATE_SUSPEND : ((szState == STRING(IDS_TCPROCEDURETHREAD_ACTIONSTATE_RESUME)) ? TCPROCEDURETHREAD_ACTIONSTATE_RESUME : ((szState == STRING(IDS_TCPROCEDURETHREAD_ACTIONSTATE_ENABLE)) ? TCPROCEDURETHREAD_ACTIONSTATE_ENABLE : ((szState == STRING(IDS_TCPROCEDURETHREAD_ACTIONSTATE_DISABLE)) ? TCPROCEDURETHREAD_ACTIONSTATE_DISABLE : ((szState == STRING(IDS_TCPROCEDURETHREAD_ACTIONSTATE_ABORT)) ? TCPROCEDURETHREAD_ACTIONSTATE_ABORT : 0)))));
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesControlThreadDialog::OnOK()
{
	CTCProcedureDocumentControlThreadItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesControlThreadDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESCONTROLTHREADDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesControlThreadDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESCONTROLTHREADDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesWaitTimeIntervalDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesWaitTimeIntervalDialog, CDisplayDialog)

CTCProcedurePropertiesWaitTimeIntervalDialog::CTCProcedurePropertiesWaitTimeIntervalDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesWaitTimeIntervalDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesWaitTimeIntervalDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentWaitTimeIntervalItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentWaitTimeIntervalItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentWaitTimeIntervalItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentWaitTimeIntervalItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesWaitTimeIntervalDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentWaitTimeIntervalItem *CTCProcedurePropertiesWaitTimeIntervalDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesWaitTimeIntervalDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesWaitTimeIntervalDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCProcedurePropertiesWaitTimeIntervalDialog::ShowProperties()
{
	CTCProcedureDocumentWaitTimeIntervalItem  *pStep;

	if ((pStep = GetStep()))
	{
		if (pStep->GetWaitTime() > 0)
		{
			Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE), pStep->GetWaitTime());
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER_USE, FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE_USE, TRUE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER_MILLISECONDS_STATIC)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE)->SetFocus();
			return;
		}
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER), pStep->GetWaitInterval());
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER_USE, TRUE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE_USE, FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER_MILLISECONDS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER)->SetFocus();
		return;
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER_USE, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE_USE, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER_MILLISECONDS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE)->EnableWindow(FALSE);
}

VOID CTCProcedurePropertiesWaitTimeIntervalDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER_USE, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE_USE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE, bCheck);
}

BOOL CTCProcedurePropertiesWaitTimeIntervalDialog::IsModified() CONST
{
	CTCProcedureDocumentWaitTimeIntervalItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesWaitTimeIntervalDialog::Check(BOOL bModified) CONST
{
	CTCProcedureDocumentWaitTimeIntervalItem  *pStep;

	return(((pStep = GetStep()) && (pStep->GetWaitTime() == 0 || pStep->GetWaitTime() > CTime::GetCurrentTime().GetTime())) ? (!bModified || IsModified()) : FALSE);
}

void CTCProcedurePropertiesWaitTimeIntervalDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesWaitTimeIntervalDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesWaitTimeIntervalDialog::PostNcDestroy()
{
	delete m_pStep[1];
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesWaitTimeIntervalDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesWaitTimeIntervalDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER_USE, OnUseInterval)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE_USE, OnUseAbsoluteTime)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_HELP, OnHelp)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER, OnSpinchangeWaitInterval)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE, OnSpinchangeAbsoluteTime)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesWaitTimeIntervalDialog message handlers

BOOL CTCProcedurePropertiesWaitTimeIntervalDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER), TCPROCEDUREPROPERTIESWAITTIMEINTERVALSTEP_MINIMUMINTERVAL, TCPROCEDUREPROPERTIESWAITTIMEINTERVALSTEP_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER_USE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE_USE)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return FALSE;
}

void CTCProcedurePropertiesWaitTimeIntervalDialog::OnUseInterval()
{
	CTCProcedureDocumentWaitTimeIntervalItem  *pStep;

	if ((pStep = GetStep()))
	{
		pStep->SetWaitInterval(TCPROCEDUREPROPERTIESWAITTIMEINTERVALSTEP_DEFAULTINTERVAL);
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER), TCPROCEDUREPROPERTIESWAITTIMEINTERVALSTEP_DEFAULTINTERVAL);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER_USE, TRUE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE_USE, FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER_MILLISECONDS_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesWaitTimeIntervalDialog::OnUseAbsoluteTime()
{
	CTimeKey  tTime;
	CTCProcedureDocumentWaitTimeIntervalItem  *pStep;

	if ((pStep = GetStep()))
	{
		pStep->SetWaitTime(SECONDSPERHOUR*(tTime.GetTime() / SECONDSPERHOUR) + SECONDSPERHOUR);
		Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE), CTimeKey(SECONDSPERHOUR*(tTime.GetTime() / SECONDSPERHOUR) + SECONDSPERHOUR));
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER_USE, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE_USE, TRUE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER_MILLISECONDS_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesWaitTimeIntervalDialog::OnSpinchangeWaitInterval()
{
	CTCProcedureDocumentWaitTimeIntervalItem  *pStep;

	if ((pStep = GetStep())) pStep->SetWaitInterval((DWORD)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_NUMBER)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesWaitTimeIntervalDialog::OnSpinchangeAbsoluteTime()
{
	CTCProcedureDocumentWaitTimeIntervalItem  *pStep;

	if ((pStep = GetStep())) pStep->SetWaitTime(Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITTIMEINTERVAL_ABSOLUTE)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesWaitTimeIntervalDialog::OnOK()
{
	CTCProcedureDocumentWaitTimeIntervalItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesWaitTimeIntervalDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESWAITTIMEINTERVALDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesWaitTimeIntervalDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESWAITTIMEINTERVALDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesWaitSynchronizationObjectDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesWaitSynchronizationObjectDialog, CDisplayDialog)

CTCProcedurePropertiesWaitSynchronizationObjectDialog::CTCProcedurePropertiesWaitSynchronizationObjectDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesWaitSynchronizationObjectDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesWaitSynchronizationObjectDialog::Create(CWnd *pParentWnd, CONST CStringArray &szObjects, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentWaitSynchronizationObjectItem *)NULL, m_szObjects.Copy(szObjects); (m_pStep[0] = (CTCProcedureDocumentWaitSynchronizationObjectItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentWaitSynchronizationObjectItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentWaitSynchronizationObjectItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesWaitSynchronizationObjectDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentWaitSynchronizationObjectItem *CTCProcedurePropertiesWaitSynchronizationObjectDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesWaitSynchronizationObjectDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesWaitSynchronizationObjectDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCProcedurePropertiesWaitSynchronizationObjectDialog::EnumSynchronizationObjects()
{
	INT  nObject;
	INT  nObjects;
	CStringArray  szObjects;

	for (nObject = 0, nObjects = (INT)m_szObjects.GetSize(); nObject < nObjects; nObject++)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)m_szObjects.GetAt(nObject));
		continue;
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_NAME, CB_GETCOUNT) >= 0) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesWaitSynchronizationObjectDialog::ShowProperties()
{
	CTCProcedureDocumentWaitSynchronizationObjectItem  *pStep;

	if ((pStep = GetStep()))
	{
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL, (pStep->GetTimeout() != INFINITE) ? TRUE : FALSE);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pStep->GetObjectName()));
		Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL_NUMBER), pStep->GetTimeout());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_NAME)->SetWindowText(pStep->GetObjectName());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL_NUMBER_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL));
		return;
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL, FALSE);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_NAME, CB_RESETCONTENT);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL_NUMBER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL_NUMBER)->EnableWindow(FALSE);
}

VOID CTCProcedurePropertiesWaitSynchronizationObjectDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_NAME, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)), TRUE, FALSE);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL_NUMBER, bCheck);
}

BOOL CTCProcedurePropertiesWaitSynchronizationObjectDialog::IsModified() CONST
{
	CTCProcedureDocumentWaitSynchronizationObjectItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesWaitSynchronizationObjectDialog::Check(BOOL bModified) CONST
{
	CTCProcedureDocumentWaitSynchronizationObjectItem  *pStep;

	return(((pStep = GetStep()) && !pStep->GetObjectName().IsEmpty()) ? (!bModified || IsModified()) : FALSE);
}

void CTCProcedurePropertiesWaitSynchronizationObjectDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesWaitSynchronizationObjectDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesWaitSynchronizationObjectDialog::PostNcDestroy()
{
	delete m_pStep[1];
	m_szObjects.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesWaitSynchronizationObjectDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesWaitSynchronizationObjectDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL, OnTimeout)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_HELP, OnHelp)
	ON_CBN_EDITCHANGE(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_NAME, OnEditchangeSynchronizationObjectName)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_NAME, OnSelchangeSynchronizationObjectName)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL_NUMBER, OnSpinchangeTimeout)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesWaitSynchronizationObjectDialog message handlers

BOOL CTCProcedurePropertiesWaitSynchronizationObjectDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (EnumSynchronizationObjects(), GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL_NUMBER), TCPROCEDUREPROPERTIESWAITSYNCOBJECTSTEP_MINIMUMINTERVAL, TCPROCEDUREPROPERTIESWAITSYNCOBJECTSTEP_MAXIMUMINTERVAL);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCProcedurePropertiesWaitSynchronizationObjectDialog::OnTimeout()
{
	CTCProcedureDocumentWaitSynchronizationObjectItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) pStep->SetTimeout((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL)) ? TCPROCEDUREPROPERTIESWAITSYNCOBJECTSTEP_DEFAULTINTERVAL : INFINITE);
	Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL_NUMBER), TCPROCEDUREPROPERTIESWAITSYNCOBJECTSTEP_DEFAULTINTERVAL);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL_NUMBER_STATIC)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL_NUMBER)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesWaitSynchronizationObjectDialog::OnEditchangeSynchronizationObjectName()
{
	CString  szObjectName;
	CTCProcedureDocumentWaitSynchronizationObjectItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_NAME)->GetWindowText(szObjectName);
		pStep->SetObjectName(szObjectName);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesWaitSynchronizationObjectDialog::OnSelchangeSynchronizationObjectName()
{
	CString  szObjectName;
	CTCProcedureDocumentWaitSynchronizationObjectItem  *pStep;

	for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_NAME, CB_GETCURSEL)); (pStep = GetStep()); )
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_NAME)->GetWindowText(szObjectName);
		pStep->SetObjectName(szObjectName);
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesWaitSynchronizationObjectDialog::OnSpinchangeTimeout()
{
	CTCProcedureDocumentWaitSynchronizationObjectItem  *pStep;

	if ((pStep = GetStep())) pStep->SetTimeout((DWORD)Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_WAITSYNCOBJECT_INTERVAL_NUMBER)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesWaitSynchronizationObjectDialog::OnOK()
{
	CTCProcedureDocumentWaitSynchronizationObjectItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesWaitSynchronizationObjectDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESWAITSYNCOBJECTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesWaitSynchronizationObjectDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESWAITSYNCOBJECTDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage property page

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage, CLocalePropertyPage)

CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage::CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage() : CLocalePropertyPage(CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage::IDD)
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

VOID CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage::ShowParameterInfo(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	CString  szName;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;

	for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_NAME, CB_RESETCONTENT), m_szCalTableIDs.RemoveAll(); pDatabaseTCParameter != (CONST CDatabaseTCParameter *) NULL; )
	{
		if ((m_nCalTableType = (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS))) == TCPARAMETER_CALIBRATION_NUMERICAL)
		{
			if ((pDatabaseTCNumCalTable = GetDatabase()->GetTCNumCalTables()->GetAt(GetDatabase()->GetTCNumCalTables()->Find(pDatabaseTCParameter->GetCalTable()))))
			{
				for (szName.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTCNumCalTable->GetDescription(), (LPCTSTR)pDatabaseTCNumCalTable->GetName()); pDatabaseTCNumCalTable->GetDescription().IsEmpty(); )
				{
					szName = pDatabaseTCNumCalTable->GetName();
					break;
				}
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName);
				m_szCalTableIDs.Add(pDatabaseTCNumCalTable->GetName());
			}
		}
		if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)
		{
			if ((pDatabaseTCTxtCalTable = GetDatabase()->GetTCTxtCalTables()->GetAt(GetDatabase()->GetTCTxtCalTables()->Find(pDatabaseTCParameter->GetCalTable()))))
			{
				for (szName.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TABLE_FORMAT), (LPCTSTR)pDatabaseTCTxtCalTable->GetDescription(), (LPCTSTR)pDatabaseTCTxtCalTable->GetName()); pDatabaseTCTxtCalTable->GetDescription().IsEmpty(); )
				{
					szName = pDatabaseTCTxtCalTable->GetName();
					break;
				}
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szName);
				m_szCalTableIDs.Add(pDatabaseTCTxtCalTable->GetName());
			}
		}
		break;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_NAME, CB_SETCURSEL);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_NAME_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_NAME)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	ShowCalibrationInfo();
}

VOID CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage::ShowCalibrationInfo()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	double  fCalPtX;
	double  fCalPtY;
	CString  szItem;
	CString  szCalPtX;
	CString  szCalPtY;
	CString  szCalText;
	CStringTools  cStringTools;
	CDatabaseTCNumCalTable  *pDatabaseTCNumCalTable;
	CDatabaseTCNumCalPoint  *pDatabaseTCNumCalPoint;
	CDatabaseTCTxtCalTable  *pDatabaseTCTxtCalTable;
	CDatabaseTCTxtCalPoint  *pDatabaseTCTxtCalPoint;

	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	if ((nIndex = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_NAME, CB_GETCURSEL)) >= 0)
	{
		if ((pDatabaseTCNumCalTable = (m_nCalTableType == TCPARAMETER_CALIBRATION_NUMERICAL) ? GetDatabase()->GetTCNumCalTables()->GetAt(GetDatabase()->GetTCNumCalTables()->Find(m_szCalTableIDs.GetAt(nIndex))) : (CDatabaseTCNumCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCNumCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCNumCalPoint = pDatabaseTCNumCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							szItem = cStringTools.ConvertFloatToTruncatedString(pDatabaseTCNumCalPoint->GetX(), -1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = cStringTools.ConvertFloatToString(pDatabaseTCNumCalPoint->GetY(), -1);
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTCNumCalTable->GetName());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_NUMERICAL));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			return;
		}
		if ((pDatabaseTCTxtCalTable = (m_nCalTableType == TCPARAMETER_CALIBRATION_STATUS) ? GetDatabase()->GetTCTxtCalTables()->GetAt(GetDatabase()->GetTCTxtCalTables()->Find(m_szCalTableIDs.GetAt(nIndex))) : (CDatabaseTCTxtCalTable *)NULL))
		{
			for (nItem = 0, nItems = (INT)pDatabaseTCTxtCalTable->GetSize(); nItem < nItems; nItem++)
			{
				if ((pDatabaseTCTxtCalPoint = pDatabaseTCTxtCalTable->GetAt(nItem)))
				{
					for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER); )
						{
							szItem = cStringTools.ConvertIntToString(nItem + 1);
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X); )
						{
							if (pDatabaseTCTxtCalPoint->GetRange(fCalPtX, fCalPtY, szCalText) || pDatabaseTCTxtCalPoint->GetPoint(fCalPtX, szCalText))
							{
								for (szCalPtX = szItem = cStringTools.ConvertFloatToTruncatedString(fCalPtX, -1), szCalPtY = cStringTools.ConvertFloatToTruncatedString(fCalPtY, -1); fCalPtX != fCalPtY; )
								{
									szItem.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_POINT_RANGE), (LPCTSTR)szCalPtX, (LPCTSTR)szCalPtY);
									break;
								}
								break;
							}
							szItem.Empty();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y); )
						{
							szItem = (pDatabaseTCTxtCalPoint->GetPoint(fCalPtX, szCalText) || pDatabaseTCTxtCalPoint->GetRange(fCalPtX, fCalPtY, szCalText)) ? (LPCTSTR)szCalText : EMPTYSTRING;
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS), nItem, nColumn, szItem);
					}
				}
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(pDatabaseTCTxtCalTable->GetName());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TYPE_STATUS));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_ID)->GetWindowTextLength() > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow();
			return;
		}
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_DELETEALLITEMS);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_ID)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_TYPE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_ID_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_ID)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_TYPE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_TYPE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS)->EnableWindow(FALSE);
}

BOOL CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage::GetSelectedCalibrationPoint(CString &szX, CString &szY) CONST
{
	szX = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X)));
	szY = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y)));
	return((!szX.IsEmpty() && !szY.IsEmpty()) ? TRUE : FALSE);
}

CTCProcedurePropertiesSendTCFunctionParametersFolder *CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage::GetParent() CONST
{
	return((CTCProcedurePropertiesSendTCFunctionParametersFolder *)CLocalePropertyPage::GetParent());
}

INT CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

void CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage::DoDataExchange(CDataExchange *pDX)
{
	CLocalePropertyPage::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	m_szCalTableIDs.RemoveAll();
	CLocalePropertyPage::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage, CLocalePropertyPage)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_NAME, OnSelchangeName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage message handlers

BOOL CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage::OnInitDialog()
{
	INT  nWidth;
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CLocalePropertyPage::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_NUMBER));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_X));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERS_CALIBRATIONPAGE_TITLEITEM_Y));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS)->GetClientRect(rColumns);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), nWidth = (rColumns.Width() - GetSystemMetrics(SM_CXVSCROLL)) / 5; nColumn < nColumns; nWidth = (++nColumn > 0) ? (2 * (rColumns.Width() - GetSystemMetrics(SM_CXVSCROLL)) / 5) : nWidth)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS), nColumn, m_szColumns.GetAt(nColumn), nWidth);
		continue;
	}
	return TRUE;
}

BOOL CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CString  szX;
	CString  szY;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_CALIBRATIONPAGE_POINTS)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if (pNotifyListView->hdr.code == NM_DBLCLK)
		{
			if (GetSelectedCalibrationPoint(szX, szY))
			{
				GetParent()->GetParent()->SetSelectedCalibrationPoint(szX, szY);
				GetParent()->GetParent()->EndDialog(IDOK);
				return TRUE;
			}
		}
	}
	return CLocalePropertyPage::OnNotify(wParam, lParam, pResult);
}

void CTCProcedurePropertiesSendTCFunctionParametersCalibrationPage::OnSelchangeName()
{
	ShowCalibrationInfo();
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSendTCFunctionParametersFolderTabCtrl

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesSendTCFunctionParametersFolderTabCtrl, CTabCtrl)

CTCProcedurePropertiesSendTCFunctionParametersFolder *CTCProcedurePropertiesSendTCFunctionParametersFolderTabCtrl::GetParent() CONST
{
	return((CTCProcedurePropertiesSendTCFunctionParametersFolder *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesSendTCFunctionParametersFolderTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesSendTCFunctionParametersFolderTabCtrl)
	ON_WM_GETDLGCODE()
	ON_WM_KEYDOWN()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSendTCFunctionParametersFolderTabCtrl message handlers

UINT CTCProcedurePropertiesSendTCFunctionParametersFolderTabCtrl::OnGetDlgCode()
{
	return CTabCtrl::OnGetDlgCode() | DLGC_WANTTAB;
}

void CTCProcedurePropertiesSendTCFunctionParametersFolderTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	CWnd  *pWnd;

	if (nChar == VK_TAB)
	{
		if ((pWnd = GetParent()->GetParent()->GetNextDlgTabItem(GetParent(), (HIBYTE(GetKeyState(VK_SHIFT))) ? TRUE : FALSE)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	if (nChar == VK_DOWN)
	{
		if ((pWnd = GetParent()->GetActivePage()->GetNextDlgTabItem((CWnd *)NULL)))
		{
			pWnd->SetFocus();
			return;
		}
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSendTCFunctionParametersFolder

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesSendTCFunctionParametersFolder, CLocalePropertySheetDialog)

CTCProcedurePropertiesSendTCFunctionParametersFolder::CTCProcedurePropertiesSendTCFunctionParametersFolder() : CLocalePropertySheetDialog()
{
	AddPage(&m_pageCalibration);
}

BOOL CTCProcedurePropertiesSendTCFunctionParametersFolder::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	INT  nPage;

	if (CLocalePropertySheetDialog::Create(pParentWnd, WS_CHILD | WS_TABSTOP | WS_DISABLED))
	{
		for (nPage = GetPageCount() - 1, m_wndTabCtrl.SubclassWindow(GetTabControl()->GetSafeHwnd()); nPage >= 0; nPage--)
		{
			SetActivePage(nPage);
			continue;
		}
		MoveWindow(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
		ShowWindow(SW_SHOWNORMAL);
		return TRUE;
	}
	return FALSE;
}

VOID CTCProcedurePropertiesSendTCFunctionParametersFolder::ShowParameterInfo(CONST CDatabaseTCParameter *pDatabaseTCParameter)
{
	m_pageCalibration.ShowParameterInfo(pDatabaseTCParameter);
}

BOOL CTCProcedurePropertiesSendTCFunctionParametersFolder::GetSelectedCalibrationPoint(CString &szX, CString &szY) CONST
{
	return m_pageCalibration.GetSelectedCalibrationPoint(szX, szY);
}

CTCProcedurePropertiesSendTCFunctionParametersDialog *CTCProcedurePropertiesSendTCFunctionParametersFolder::GetParent() CONST
{
	return((CTCProcedurePropertiesSendTCFunctionParametersDialog *)CLocalePropertySheetDialog::GetParent());
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesSendTCFunctionParametersFolder, CLocalePropertySheetDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesSendTCFunctionParametersFolder)
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSendTCFunctionParametersFolder message handlers

void CTCProcedurePropertiesSendTCFunctionParametersFolder::OnSetFocus(CWnd *pOldWnd)
{
	if (IsWindow(m_wndTabCtrl.GetSafeHwnd()))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CLocalePropertySheetDialog::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSendTCFunctionParametersDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesSendTCFunctionParametersDialog, CDisplayDialog)

CTCProcedurePropertiesSendTCFunctionParametersDialog::CTCProcedurePropertiesSendTCFunctionParametersDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesSendTCFunctionParametersDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCProcedurePropertiesSendTCFunctionParametersDialog::Create(CWnd *pParentWnd, LPCTSTR pszFunction, LPCTSTR pszParameter, CString &szValue)
{
	INT  nResult;
	CString  szX;
	CString  szY;

	for (m_szFunction = pszFunction, m_szParameter = pszParameter, szValue.Empty(); (nResult = CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesSendTCFunctionParametersDialog::IDD)) == IDOK; )
	{
		szValue = (GetSelectedCalibrationPoint(szX, szY)) ? szY : EMPTYSTRING;
		break;
	}
	return((nResult == IDOK || nResult == IDCANCEL) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesSendTCFunctionParametersDialog::SetSelectedCalibrationPoint(LPCTSTR pszX, LPCTSTR pszY)
{
	m_szX = pszX;
	m_szY = pszY;
}

BOOL CTCProcedurePropertiesSendTCFunctionParametersDialog::GetSelectedCalibrationPoint(CString &szX, CString &szY) CONST
{
	szX = m_szX;
	szY = m_szY;
	return((!szX.IsEmpty() && !szY.IsEmpty()) ? TRUE : FALSE);
}

CDisplayDialog *CTCProcedurePropertiesSendTCFunctionParametersDialog::GetParent() CONST
{
	return((CDisplayDialog *)CDisplayDialog::GetParent());
}

BOOL CTCProcedurePropertiesSendTCFunctionParametersDialog::EnumParameters()
{
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	CString  szParameter;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;

	if ((pDatabaseTCFunction = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(m_szFunction))))
	{
		if ((pDatabaseTCPacket = GetDatabase()->GetTCPackets()->GetAt(GetDatabase()->GetTCPackets()->Find(pDatabaseTCFunction->GetTCPacket()))))
		{
			for (nParameter = 0, nParameters = (INT)pDatabaseTCPacket->GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pDatabaseTCPacketParameter = pDatabaseTCPacket->GetAt(nParameter)) && pDatabaseTCPacketParameter->GetTag() == m_szParameter)
				{
					if ((pDatabaseTCPacketParameter->GetAttributes() & (TCPARAMETER_TYPE_VARIABLE | TCPARAMETER_CALIBRATION_ENABLED)) == (TCPARAMETER_TYPE_VARIABLE | TCPARAMETER_CALIBRATION_ENABLED))
					{
						szParameter.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETER_FORMAT), (LPCTSTR)pDatabaseTCPacketParameter->GetTag(), (LPCTSTR)pDatabaseTCPacketParameter->GetDescription());
						SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_ITEM, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szParameter);
					}
				}
			}
		}
		for (nElement = 0, nElements = (INT)pDatabaseTCFunction->GetSize(); nElement < nElements; nElement++)
		{
			if ((pDatabaseTCFunctionElement = pDatabaseTCFunction->GetAt(nElement)) && pDatabaseTCFunctionElement->GetName() == m_szParameter)
			{
				if ((pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_TYPE_VARIABLE | TCPARAMETER_CALIBRATION_ENABLED)) == (TCPARAMETER_TYPE_VARIABLE | TCPARAMETER_CALIBRATION_ENABLED))
				{
					szParameter.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETER_FORMAT), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), (LPCTSTR)pDatabaseTCFunctionElement->GetDescription());
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_ITEM, CB_ADDSTRING, (WPARAM)NULL, (LPARAM)(LPCTSTR)szParameter);
				}
			}
		}
	}
	szParameter.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETER_FORMAT), (LPCTSTR)m_szParameter, EMPTYSTRING);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_ITEM, CB_SETCURSEL, (WPARAM)max(SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_ITEM, CB_FINDSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameter), 0));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_DETAILS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_ITEM_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_ITEM)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	m_wndFolderCtrl.EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_ITEM, CB_GETCOUNT) > 0) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesSendTCFunctionParametersDialog::ShowParameterInfo()
{
	CString  szParameter[2];
	CDatabaseTCParameter  *pDatabaseTCParameter;

	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_ITEM)->GetWindowText(szParameter[0]), szParameter[1].Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETER_FORMAT), EMPTYSTRING, EMPTYSTRING), szParameter[0] = (szParameter[0].Find(szParameter[1]) >= 0) ? szParameter[0].Left(szParameter[0].Find(szParameter[1])) : szParameter[0]; (pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(szParameter[0]))); )
	{
		m_wndFolderCtrl.ShowParameterInfo(pDatabaseTCParameter);
		return;
	}
	m_wndFolderCtrl.ShowParameterInfo();
}

CRect CTCProcedurePropertiesSendTCFunctionParametersDialog::CalcFolderSize() CONST
{
	CRect  rFolder;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_FOLDER)->GetWindowRect(rFolder);
	ScreenToClient(rFolder);
	return rFolder;
}

void CTCProcedurePropertiesSendTCFunctionParametersDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesSendTCFunctionParametersDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesSendTCFunctionParametersDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesSendTCFunctionParametersDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_ITEM, OnSelchangeParameter)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSendTCFunctionParametersDialog message handlers

BOOL CTCProcedurePropertiesSendTCFunctionParametersDialog::OnInitDialog()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	if (m_wndFolderCtrl.Create(this, CalcFolderSize()) && SetChildSheet(&m_wndFolderCtrl, GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERS_FOLDER - 1)))
	{
		for (; EnumParameters(); )
		{
			ShowParameterInfo();
			break;
		}
	}
	return TRUE;
}

void CTCProcedurePropertiesSendTCFunctionParametersDialog::OnSelchangeParameter()
{
	ShowParameterInfo();
}

void CTCProcedurePropertiesSendTCFunctionParametersDialog::OnOK()
{
	CHourglassCursor  cCursor;

	m_wndFolderCtrl.GetSelectedCalibrationPoint(m_szX, m_szY);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesSendTCFunctionParametersDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSENDTCFUNCTIONPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesSendTCFunctionParametersDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSENDTCFUNCTIONPARAMETERSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSendTCFunctionParameterSetsDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesSendTCFunctionParameterSetsDialog, CDisplayDialog)

CTCProcedurePropertiesSendTCFunctionParameterSetsDialog::CTCProcedurePropertiesSendTCFunctionParameterSetsDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesSendTCFunctionParameterSetsDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

BOOL CTCProcedurePropertiesSendTCFunctionParameterSetsDialog::Create(CWnd *pParentWnd, CONST CDatabaseTCFunction *pDatabaseTCFunction, CString &szParameterSet)
{
	INT  nSet;
	INT  nSets;

	for (nSet = 1, nSets = (m_cDatabaseTCFunction.Copy(pDatabaseTCFunction)) ? (INT)m_cDatabaseTCFunction.GetParameterSets(m_szParameterSets) : 0; nSet < nSets; nSet++)
	{
		if (m_szParameterSets.GetAt(nSet) == m_szParameterSets.GetAt(0)) break;
		continue;
	}
	for (m_szParameterSets.RemoveAt(0, ((nSets > 0 && m_szParameterSets.GetAt(0).IsEmpty()) || nSet < nSets) ? 1 : 0); CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesSendTCFunctionParameterSetsDialog::IDD) == IDOK; )
	{
		szParameterSet = m_szParameterSet;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesSendTCFunctionParameterSetsDialog::EnumParameterSets()
{
	INT  nSet;
	INT  nSets;
	CString  szParameterSet;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;

	for (nSet = 0, nSets = (INT)m_szParameterSets.GetSize(); nSet < nSets; nSet++)
	{
		if ((pDatabaseTCParameterSet = GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(m_szParameterSets.GetAt(nSet)))))
		{
			szParameterSet.Format(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_FORMAT), (LPCTSTR)pDatabaseTCParameterSet->GetName(), (LPCTSTR)pDatabaseTCParameterSet->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szParameterSet);
		}
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_NAME, CB_SETCURSEL) >= 0) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesSendTCFunctionParameterSetsDialog::ShowParameterSetContents()
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	CString  szItem;
	CStringTools  cStringTools;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement[2];

	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_CONTENTS, LVM_DELETEALLITEMS);
	if ((pDatabaseTCFunction = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(m_cDatabaseTCFunction.GetName()))))
	{
		if ((pDatabaseTCParameterSet = ((nIndex = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_NAME, CB_GETCURSEL)) < m_szParameterSets.GetSize()) ? GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(m_szParameterSets.GetAt(nIndex))) : (CDatabaseTCParameterSet *)NULL))
		{
			for (nParameter = 0, nParameters = (INT)pDatabaseTCParameterSet->GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pDatabaseTCFunctionElement[0] = pDatabaseTCParameterSet->GetAt(nParameter)))
				{
					if ((pDatabaseTCFunctionElement[1] = m_cDatabaseTCFunction.GetAt(pDatabaseTCFunction->Find(pDatabaseTCFunctionElement[0]->GetName(), pDatabaseTCFunctionElement[0]->GetBytePos(), pDatabaseTCFunctionElement[0]->GetBitPos()))))
					{
						if (pDatabaseTCFunctionElement[0]->GetName() == pDatabaseTCFunctionElement[1]->GetName() && pDatabaseTCFunctionElement[0]->GetWidth() == pDatabaseTCFunctionElement[1]->GetWidth())
						{
							for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_CONTENTS, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
							{
								if (_ttoi(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_CONTENTS), nItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITOFFSET)))) > 8 * pDatabaseTCFunctionElement[1]->GetBytePos() + pDatabaseTCFunctionElement[1]->GetBitPos()) break;
								continue;
							}
							for (nColumn = 0, nColumns = ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
							{
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TAG); )
								{
									szItem = pDatabaseTCFunctionElement[0]->GetName();
									break;
								}
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_DESCRIPTION); )
								{
									szItem = pDatabaseTCFunctionElement[0]->GetDescription();
									break;
								}
								if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TYPE))
								{
									szItem = ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUETYPE_RAW) : EMPTYSTRING;
									szItem = ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCFunctionElement[0]->GetName())))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUETYPE_NUMERICAL) : szItem;
									szItem = ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCFunctionElement[0]->GetName())))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUETYPE_STATUS) : szItem;
								}
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITOFFSET); )
								{
									szItem = cStringTools.ConvertIntToString(8 * pDatabaseTCFunctionElement[1]->GetBytePos() + pDatabaseTCFunctionElement[1]->GetBitPos());
									break;
								}
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITLENGTH); )
								{
									szItem = cStringTools.ConvertIntToString(pDatabaseTCFunctionElement[1]->GetWidth());
									break;
								}
								if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_CODING))
								{
									szItem = (pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUECODING_BITPATTERN) : EMPTYSTRING;
									szItem = (pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUECODING_SIGNEDINTEGER) : szItem;
									szItem = (pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUECODING_UNSIGNEDINTEGER) : szItem;
									szItem = (pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUECODING_FLOATINGPOINT) : szItem;
									szItem = (pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUECODING_DATETIME) : szItem;
									szItem = ((pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == 0) ? (((pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUECODING_BITPATTERN)) : szItem;
								}
								if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_RADIX))
								{
									szItem = (pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUERADIX_BINARY) : EMPTYSTRING;
									szItem = (pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUERADIX_OCTAL) : szItem;
									szItem = (pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUERADIX_DECIMAL) : szItem;
									szItem = (pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUERADIX_HEXADECIMAL) : szItem;
								}
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_FLAG); )
								{
									szItem = (pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUEFLAG_FIXED) : STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_VALUEFLAG_VARIABLE);
									break;
								}
								for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_VALUE); )
								{
									szItem = pDatabaseTCFunctionElement[0]->GetConstValueAsText();
									break;
								}
								if (!nColumn)
								{
									Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_CONTENTS), nItem, szItem);
									continue;
								}
								Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_CONTENTS), nItem, nColumn, szItem);
							}
						}
					}
				}
			}
		}
	}
	Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_CONTENTS), 0);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_CONTENTS_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_CONTENTS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDOK)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_CONTENTS, LVM_GETITEMCOUNT) > 0) ? TRUE : FALSE);
}

INT CTCProcedurePropertiesSendTCFunctionParameterSetsDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

void CTCProcedurePropertiesSendTCFunctionParameterSetsDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesSendTCFunctionParameterSetsDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesSendTCFunctionParameterSetsDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesSendTCFunctionParameterSetsDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesSendTCFunctionParameterSetsDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_NAME, OnSelchangeSet)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSendTCFunctionParameterSetsDialog message handlers

BOOL CTCProcedurePropertiesSendTCFunctionParameterSetsDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_VALUE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_CONTENTS)->GetClientRect(rColumns);
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_CONTENTS, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_CONTENTS), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_FLAG)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESPARAMETERSETSDIALOG_TITLEITEM_BITLENGTH)) ? (rColumns.Width() / 9) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	if (EnumParameterSets())
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_DETAILS)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_NAME_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_NAME)->EnableWindow();
		ShowParameterSetContents();
	}
	return TRUE;
}

void CTCProcedurePropertiesSendTCFunctionParameterSetsDialog::OnSelchangeSet()
{
	ShowParameterSetContents();
}

void CTCProcedurePropertiesSendTCFunctionParameterSetsDialog::OnOK()
{
	INT  nIndex;
	CHourglassCursor  cCursor;

	if ((nIndex = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTIONPARAMETERSETS_NAME, CB_GETCURSEL)) >= 0 && nIndex < m_szParameterSets.GetSize()) m_szParameterSet = m_szParameterSets.GetAt(nIndex);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesSendTCFunctionParameterSetsDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSENDTCFUNCTIONPARAMETERSETSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesSendTCFunctionParameterSetsDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSENDTCFUNCTIONPARAMETERSETSDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSendTCFunctionDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesSendTCFunctionDialog, CDisplayDialog)

CTCProcedurePropertiesSendTCFunctionDialog::CTCProcedurePropertiesSendTCFunctionDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesSendTCFunctionDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesSendTCFunctionDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	if (pStep->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentSendTCFunctionItem)))
	{
		if ((m_pStep[0] = (CTCProcedureDocumentSendTCFunctionItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep)))
		{
			if ((m_pStep[1] = (CTCProcedureDocumentSendTCFunctionItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep)))
			{
				for (EvaluateParameters(), m_pStep[1]->Copy(m_pStep[0]); CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesSendTCFunctionDialog::IDD) == IDOK; )
				{
					pStep->Copy(m_pStep[0]);
					delete m_pStep[0];
					delete m_pStep[1];
					return IDOK;
				}
				delete m_pStep[1];
			}
			delete m_pStep[0];
		}
	}
	return IDCANCEL;
}

CTCProcedureDocumentSendTCFunctionItem *CTCProcedurePropertiesSendTCFunctionDialog::GetStep() CONST
{
	return m_pStep[0];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesSendTCFunctionDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesSendTCFunctionDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCProcedurePropertiesSendTCFunctionDialog::EnumTCFunctions()
{
	INT  nFunction;
	INT  nFunctions;
	CString  szFunction;
	CDatabaseTCFunction  *pDatabaseTCFunction;

	for (nFunction = 0, nFunctions = (INT)GetDatabase()->GetTCFunctions()->GetSize(); nFunction < nFunctions; nFunction++)
	{
		if ((pDatabaseTCFunction = GetDatabase()->GetTCFunctions()->GetAt(nFunction)) != (CDatabaseTCFunction *)NULL)
		{
			szFunction.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTCFUNCTION_FORMAT), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCFunction->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)((pDatabaseTCFunction->GetDescription().IsEmpty()) ? (LPCTSTR)pDatabaseTCFunction->GetName() : (LPCTSTR)szFunction));
		}
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_NAME, CB_GETCOUNT) == nFunctions) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesSendTCFunctionDialog::ShowProperties()
{
	CString  szName;
	CStringArray  szSets;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	if ((pStep = GetStep()))
	{
		if (pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket) && !cDatabaseTCFunction.GetName().IsEmpty())
		{
			szName.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTCFUNCTION_FORMAT), (LPCTSTR)cDatabaseTCFunction.GetName(), (LPCTSTR)cDatabaseTCFunction.GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szName = (cDatabaseTCFunction.GetDescription().IsEmpty()) ? cDatabaseTCFunction.GetName() : szName)));
			Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASETIME), (pStep->GetReleaseTime() > 0) ? CTimeKey(pStep->GetReleaseTime().GetTimeInSeconds()) : CTime::GetCurrentTime().GetTime());
			Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEOFFSET), CTimeKey(pStep->GetReleaseDeltaTime() / 1000));
			Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONTIME), (pStep->GetExecutionTime() > 0) ? CTimeKey(pStep->GetExecutionTime().GetTimeInSeconds()) : CTime::GetCurrentTime().GetTime());
			Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONOFFSET), CTimeKey(pStep->GetExecutionDeltaTime() / 1000));
			Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW), pStep->GetExecutionVerificationTimeWindow().GetTotalSeconds());
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATTIME, (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATTIME) ? CheckTCExecutionTime() : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATOFFSET, (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATOFFSET) ? CheckTCExecutionTime() : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATTIME, (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATTIME) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATOFFSET, (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATOFFSET) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_FIRSTSTEP, (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_FIRSTSTEP) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_SECONDSTEP, (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_SECONDSTEP) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREPREEXEVERIFICATION, (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_IGNOREPREEXEVERIFICATION) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREEXEVERIFICATION, (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_IGNOREEXEVERIFICATION) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_CRITICAL, (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_CRITICAL) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_AUTHORIZATION, (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_AUTHORIZATION) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_ACCEPTANCE, (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_ACCEPTANCE) ? CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE) : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_START, (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_START) ? CheckTCVerificationStage(TCVERIFICATIONSTAGE_START) : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_PROGRESS, (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_PROGRESS) ? CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS) : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_COMPLETION, (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_COMPLETION) ? CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION) : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_DESCRIPTION)->SetWindowText(pStep->GetDescription());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_PREEXEVERIFICATION)->SetWindowText(pStep->GetPreexecutionVerificationCondition());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION)->SetWindowText(pStep->GetExecutionVerificationCondition());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATTIME)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASETIME)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATTIME));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATOFFSET)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEOFFSET)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATOFFSET));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATTIME)->EnableWindow(CheckTCExecutionTime());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONTIME)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATTIME));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATOFFSET)->EnableWindow(CheckTCExecutionTime());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONOFFSET)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATOFFSET));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_TWOSTEPS_STATIC)->EnableWindow(CheckTCExecutionType(cDatabaseTCFunction.GetAttributes()));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_FIRSTSTEP)->EnableWindow(CheckTCExecutionType(cDatabaseTCFunction.GetAttributes()));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_SECONDSTEP)->EnableWindow(CheckTCExecutionType(cDatabaseTCFunction.GetAttributes()));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_PREEXEVERIFICATION)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREPREEXEVERIFICATION));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREEXEVERIFICATION));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW_STATIC)->EnableWindow((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREEXEVERIFICATION) && !pStep->GetExecutionVerificationCondition().IsEmpty()) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW)->EnableWindow((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREEXEVERIFICATION) && !pStep->GetExecutionVerificationCondition().IsEmpty()) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW_SECONDS)->EnableWindow((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREEXEVERIFICATION) && !pStep->GetExecutionVerificationCondition().IsEmpty()) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_STATIC)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_START) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_ACCEPTANCE)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_START)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_START));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_PROGRESS)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_COMPLETION)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LOADVALUES)->EnableWindow((cDatabaseTCFunction.GetParameterSets(szSets) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
			ShowParameters();
			return;
		}
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_NAME, CB_SETCURSEL, (WPARAM)-1);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATTIME, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATOFFSET, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATTIME, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATOFFSET, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_FIRSTSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_SECONDSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREPREEXEVERIFICATION, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREEXEVERIFICATION, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_CRITICAL, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_AUTHORIZATION, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_START, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_COMPLETION, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_DESCRIPTION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_PREEXEVERIFICATION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATTIME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASETIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATOFFSET)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEOFFSET)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATTIME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATOFFSET)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONOFFSET)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_TWOSTEPS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_FIRSTSTEP)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_SECONDSTEP)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_PREEXEVERIFICATION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_ACCEPTANCE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_START)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_PROGRESS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_COMPLETION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LOADVALUES)->EnableWindow(FALSE);
	ShowParameters();
}

VOID CTCProcedurePropertiesSendTCFunctionDialog::ShowParameters()
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	BYTE  nOolStatus;
	CString  szItem;
	CStringTools  cStringTools;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST, LVM_DELETEALLITEMS);
	for (nCount = 0; (pStep = GetStep()) && pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket); )
	{
		for (nParameter = 0, nParameters = (INT)cDatabaseTCPacket.GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(nParameter)) != (CDatabaseTCPacketParameter *)NULL)
			{
				for (nColumn = 0, nColumns = ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
					{
						szItem = pDatabaseTCPacketParameter->GetTag();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
					{
						szItem = pDatabaseTCPacketParameter->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
					{
						szItem = ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
						szItem = ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCPacketParameter->GetTag())))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
						szItem = ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCPacketParameter->GetTag())))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
					{
						szItem = cStringTools.ConvertIntToString(8 * pDatabaseTCPacketParameter->GetBytePos() + pDatabaseTCPacketParameter->GetBitPos());
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
					{
						szItem = cStringTools.ConvertIntToString(pDatabaseTCPacketParameter->GetWidth());
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
					{
						szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
						szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
						szItem = ((pDatabaseTCPacketParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == 0) ? (((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pDatabaseTCPacketParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
					{
						szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
						szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
						szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
						szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
					{
						if ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0)
						{
							szItem = pDatabaseTCPacketParameter->GetConstValueAsText();
							break;
						}
						for (szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERAUTOVALUE_NONE); !pDatabaseTCPacketParameter->GetConstValueAsText().IsEmpty(); )
						{
							szItem.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERAUTOVALUE_FORMAT), (LPCTSTR)pDatabaseTCPacketParameter->GetConstValueAsText());
							break;
						}
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
					{
						szItem = ((pDatabaseTCPacketParameter->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
					{
						if (CheckTCParameterOolStatus(pDatabaseTCPacketParameter, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_SOFTLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_HARDLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_DELTALIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_VALUELIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_TIMELIMIT);
								break;
							}
							szItem = (!pDatabaseTCPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NONE) : ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOTIME) : EMPTYSTRING);
							break;
						}
						szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_FAILURE);
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), nCount, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), nCount, nColumn, szItem);
					nCount = (nColumn == nColumns - 1) ? (nCount + 1) : nCount;
				}
			}
		}
		for (nElement = 0, nElements = (INT)cDatabaseTCFunction.GetSize(); nElement < nElements; nElement++)
		{
			if ((pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(nElement)) != (CDatabaseTCFunctionElement *)NULL)
			{
				for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
				{
					if (_ttoi(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), nItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET)))) > 8 * pDatabaseTCFunctionElement->GetBytePos() + pDatabaseTCFunctionElement->GetBitPos()) break;
					continue;
				}
				for (nColumn = 0, nColumns = ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
					{
						szItem = pDatabaseTCFunctionElement->GetName();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
					{
						szItem = pDatabaseTCFunctionElement->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
					{
						szItem = ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
						szItem = ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCFunctionElement->GetName())))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
						szItem = ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCFunctionElement->GetName())))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
					{
						szItem = cStringTools.ConvertIntToString(8 * pDatabaseTCFunctionElement->GetBytePos() + pDatabaseTCFunctionElement->GetBitPos());
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
					{
						szItem = cStringTools.ConvertIntToString(pDatabaseTCFunctionElement->GetWidth());
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
					{
						szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
						szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
						szItem = ((pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == 0) ? (((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
					{
						szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
						szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
						szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
						szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
					{
						if ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0)
						{
							szItem = pDatabaseTCFunctionElement->GetConstValueAsText();
							break;
						}
						for (szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERAUTOVALUE_NONE); !pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty(); )
						{
							szItem.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERAUTOVALUE_FORMAT), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
							break;
						}
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
					{
						szItem = ((pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
					{
						if (CheckTCParameterOolStatus(pDatabaseTCFunctionElement, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_SOFTLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_HARDLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_DELTALIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_VALUELIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_TIMELIMIT);
								break;
							}
							szItem = (!pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NONE) : ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOTIME) : EMPTYSTRING);
							break;
						}
						szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_FAILURE);
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), nItem, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), nItem, nColumn, szItem);
				}
			}
		}
		break;
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE)->SetWindowText(EMPTYSTRING), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_SETVALUE)->EnableWindow(FALSE); SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST, LVM_GETITEMCOUNT) > 0; )
	{
		Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), 0);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_REMARK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_REMARK)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE)->EnableWindow(FALSE);
}

VOID CTCProcedurePropertiesSendTCFunctionDialog::EvaluateParameters()
{
	INT  nElement;
	INT  nElements;
	INT  nFunction;
	INT  nFunctions;
	INT  nParameter;
	INT  nParameters;
	CTMEnvironment  cTMEnvironment;
	CTCEnvironment  cTCEnvironment;
	CTCProcessEngine  cTCProcessEngine;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCPackets  pDatabaseTCPackets;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCFunctions  pDatabaseTCFunctions;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	if ((pStep = GetStep()))
	{
		if (cTMEnvironment.Create(GetDatabase()))
		{
			if (cTCEnvironment.Create(GetDatabase()))
			{
				if (cTCProcessEngine.Open(GetDatabase(), GetAccountSpacecraftName(), &cTCEnvironment))
				{
					if (pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
					{
						for (nElement = 0, nElements = (INT)cDatabaseTCFunction.GetSize(); nElement < nElements; nElement++)
						{
							if ((pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(nElement)) && pDatabaseTCFunctionElement->GetName().IsEmpty() && !pDatabaseTCFunctionElement->HasConstValue())
							{
								if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY)
								{
									pDatabaseTCFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCFunctionElement->GetConstValueAsText(), 2)));
									continue;
								}
								if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL)
								{
									pDatabaseTCFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCFunctionElement->GetConstValueAsText(), 8)));
									continue;
								}
								if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL)
								{
									pDatabaseTCFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCFunctionElement->GetConstValueAsText(), 16)));
									continue;
								}
								if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
								{
									pDatabaseTCFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCFunctionElement->GetAttributes(), CDatabaseEngine::ParseValue(pDatabaseTCFunctionElement->GetConstValueAsText())));
									continue;
								}
								if ((pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0)
								{
									pDatabaseTCFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCFunctionElement->GetConstValueAsText(), 10)));
									continue;
								}
							}
						}
						for (nParameter = 0, nParameters = (INT)cDatabaseTCPacket.GetSize(); nParameter < nParameters; nParameter++)
						{
							if ((pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(nParameter)) && pDatabaseTCPacketParameter->GetTag().IsEmpty() && !pDatabaseTCPacketParameter->HasConstValue())
							{
								if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY)
								{
									pDatabaseTCPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCPacketParameter->GetAttributes(), pDatabaseTCPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCPacketParameter->GetConstValueAsText(), 2)));
									continue;
								}
								if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL)
								{
									pDatabaseTCPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCPacketParameter->GetAttributes(), pDatabaseTCPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCPacketParameter->GetConstValueAsText(), 8)));
									continue;
								}
								if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL)
								{
									pDatabaseTCPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCPacketParameter->GetAttributes(), pDatabaseTCPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCPacketParameter->GetConstValueAsText(), 16)));
									continue;
								}
								if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
								{
									pDatabaseTCPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCPacketParameter->GetAttributes(), CDatabaseEngine::ParseValue(pDatabaseTCPacketParameter->GetConstValueAsText())));
									continue;
								}
								if ((pDatabaseTCPacketParameter->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0)
								{
									pDatabaseTCPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCPacketParameter->GetAttributes(), pDatabaseTCPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCPacketParameter->GetConstValueAsText(), 10)));
									continue;
								}
							}
						}
						for (nFunction = 0, nFunctions = (cTCProcessEngine.GenerateTCPackets(GetDatabase(), &cDatabaseTCFunction, &cDatabaseTCPacket, &cTMEnvironment, &cTCEnvironment, pStep->GetMemoryPatch(), (pStep->GetExecutionTime() > 0 || pStep->GetExecutionDeltaTime() > 0) ? TRUE : FALSE, FALSE, FALSE, TRUE, pDatabaseTCFunctions, pDatabaseTCPackets) >= 0) ? (INT)pDatabaseTCFunctions.GetSize() : 0; nFunction < nFunctions; nFunction++)
						{
							if ((pDatabaseTCFunction = pDatabaseTCFunctions.GetAt(nFunction)) && pDatabaseTCFunction->GetName() == cDatabaseTCFunction.GetName())
							{
								pStep->SetFunction(pDatabaseTCFunction, pDatabaseTCPackets.GetAt(nFunction));
								break;
							}
						}
					}
					cTCProcessEngine.Close();
				}
				cTCEnvironment.Destroy();
			}
			cTMEnvironment.Destroy();
		}
	}
}

BOOL CTCProcedurePropertiesSendTCFunctionDialog::CheckTCExecutionType(ULONGLONG nAttributes) CONST
{
	return((nAttributes & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesSendTCFunctionDialog::CheckTCExecutionTime(CONST CTimeTag &tExecutionTime) CONST
{
	CTCEnvironment  cTCEnvironment;
	CTCProcessEngine  cTCProcessEngine;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	if ((pStep = GetStep()))
	{
		if (cTCProcessEngine.Open(GetDatabase(), GetAccountSpacecraftName(), &cTCEnvironment))
		{
			for (pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket); cTCProcessEngine.CheckTCFunctionExecutionTime(&cDatabaseTCFunction, &cDatabaseTCPacket, tExecutionTime); )
			{
				cTCProcessEngine.Close();
				return TRUE;
			}
			cTCProcessEngine.Close();
		}
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesSendTCFunctionDialog::CheckTCParameterOolStatus(CONST CDatabaseTCFunctionElement *pDatabaseTCFunctionElement, BYTE &nStatus) CONST
{
	CTimeTag  tTime[2];
	ULONGLONG  nValue;
	CTCParameter  cTCParameter;
	CTCEnvironment  cTCEnvironment;
	CTCProcessEngine  cTCProcessEngine;
	CDatabaseTCParameter  *pDatabaseTCParameter[2];

	if (cTCProcessEngine.Open(GetDatabase(), GetAccountSpacecraftName(), &cTCEnvironment))
	{
		for (nStatus = TCPARAMETER_STATUS_NONE; (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) || GetDatabase()->TranslateTCFunctionElementConstTime(pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetConstValueAsText()) > 0; )
		{
			nStatus = (!pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty()) ? (((tTime[0] = GetDatabase()->TranslateTCFunctionElementConstTime(pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetConstValueAsText())) <= 0 || tTime[0] <= tTime[1]) ? TCPARAMETER_STATUS_TIMELIMIT : TCPARAMETER_STATUS_NOLIMIT) : TCPARAMETER_STATUS_NONE;
			cTCProcessEngine.Close();
			return TRUE;
		}
		if ((pDatabaseTCParameter[0] = new CDatabaseTCParameter))
		{
			if ((pDatabaseTCParameter[1] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCFunctionElement->GetName()))) && (pDatabaseTCParameter[1]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == (pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) && !pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty() && pDatabaseTCParameter[0]->Copy(pDatabaseTCParameter[1]))
			{
				for (pDatabaseTCParameter[0]->SetAttributes(pDatabaseTCFunctionElement->GetAttributes()), pDatabaseTCParameter[0]->SetConstValueAsText(pDatabaseTCFunctionElement->GetConstValueAsText()), cTCParameter.SetTag(pDatabaseTCFunctionElement->GetName()), cTCParameter.SetAttributes(pDatabaseTCFunctionElement->GetAttributes()), nStatus = TCPARAMETER_STATUS_VALUELIMIT; cTCProcessEngine.ConvertTCParameterValue(GetDatabase(), pDatabaseTCParameter[0], nValue); )
				{
					nStatus = cTCProcessEngine.CheckTCParameterOolStatus(GetDatabase(), pDatabaseTCParameter[0], &cTCParameter, nValue);
					break;
				}
			}
			delete pDatabaseTCParameter[0];
			cTCProcessEngine.Close();
			return TRUE;
		}
		cTCProcessEngine.Close();
	}
	return FALSE;
}
BOOL CTCProcedurePropertiesSendTCFunctionDialog::CheckTCParameterOolStatus(CONST CDatabaseTCPacketParameter *pDatabaseTCPacketParameter, BYTE &nStatus) CONST
{
	CTimeTag  tTime[2];
	ULONGLONG  nValue;
	CTCParameter  cTCParameter;
	CTCEnvironment  cTCEnvironment;
	CTCProcessEngine  cTCProcessEngine;
	CDatabaseTCParameter  *pDatabaseTCParameter[2];

	if (cTCProcessEngine.Open(GetDatabase(), GetAccountSpacecraftName(), &cTCEnvironment))
	{
		for (nStatus = TCPARAMETER_STATUS_NONE; (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) || GetDatabase()->TranslateTCPacketParameterConstTime(pDatabaseTCPacketParameter->GetAttributes(), pDatabaseTCPacketParameter->GetConstValueAsText()) > 0; )
		{
			nStatus = (!pDatabaseTCPacketParameter->GetConstValueAsText().IsEmpty()) ? (((tTime[0] = GetDatabase()->TranslateTCPacketParameterConstTime(pDatabaseTCPacketParameter->GetAttributes(), pDatabaseTCPacketParameter->GetConstValueAsText())) <= 0 || tTime[0] <= tTime[1]) ? TCPARAMETER_STATUS_TIMELIMIT : TCPARAMETER_STATUS_NOLIMIT) : TCPARAMETER_STATUS_NONE;
			cTCProcessEngine.Close();
			return TRUE;
		}
		if ((pDatabaseTCParameter[0] = new CDatabaseTCParameter))
		{
			if ((pDatabaseTCParameter[1] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCPacketParameter->GetTag()))) && (pDatabaseTCParameter[1]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == (pDatabaseTCPacketParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) && !pDatabaseTCPacketParameter->GetConstValueAsText().IsEmpty() && pDatabaseTCParameter[0]->Copy(pDatabaseTCParameter[1]))
			{
				for (pDatabaseTCParameter[0]->SetAttributes(pDatabaseTCPacketParameter->GetAttributes()), pDatabaseTCParameter[0]->SetConstValueAsText(pDatabaseTCPacketParameter->GetConstValueAsText()), cTCParameter.SetTag(pDatabaseTCPacketParameter->GetTag()), cTCParameter.SetAttributes(pDatabaseTCPacketParameter->GetAttributes()), nStatus = TCPARAMETER_STATUS_VALUELIMIT; cTCProcessEngine.ConvertTCParameterValue(GetDatabase(), pDatabaseTCParameter[0], nValue); )
				{
					nStatus = cTCProcessEngine.CheckTCParameterOolStatus(GetDatabase(), pDatabaseTCParameter[0], &cTCParameter, nValue);
					break;
				}
			}
			delete pDatabaseTCParameter[0];
			cTCProcessEngine.Close();
			return TRUE;
		}
		cTCProcessEngine.Close();
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesSendTCFunctionDialog::CheckTCVerificationStage(UINT nStage) CONST
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;
	CDatabaseTCExeVerGroupParameter  *pDatabaseTCExeVerGroupParameter;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	if ((pStep = GetStep()))
	{
		if (!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREEXEVERIFICATION))
		{
			if ((pDatabaseTCExeVerGroup = (pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket)) ? GetDatabase()->GetTCExeVerGroups()->GetAt(GetDatabase()->GetTCExeVerGroups()->Find(cDatabaseTCFunction.GetExeVerGroup())) : (CDatabaseTCExeVerGroup *)NULL))
			{
				for (nParameter = 0, nParameters = (INT)pDatabaseTCExeVerGroup->GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTCExeVerGroupParameter = pDatabaseTCExeVerGroup->GetAt(nParameter)))
					{
						if (pDatabaseTCExeVerGroupParameter->GetStage() == nStage) break;
						continue;
					}
				}
				return((nParameter < nParameters) ? TRUE : FALSE);
			}
			return FALSE;
		}
		return((!pStep->GetExecutionVerificationCondition().IsEmpty() && nStage == TCVERIFICATIONSTAGE_COMPLETION) ? TRUE : FALSE);
	}
	return((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION)->GetWindowTextLength() > 0 && nStage == TCVERIFICATIONSTAGE_COMPLETION) ? TRUE : FALSE);
}

INT CTCProcedurePropertiesSendTCFunctionDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

VOID CTCProcedurePropertiesSendTCFunctionDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_NAME, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_DESCRIPTION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATTIME, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASETIME, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATOFFSET, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEOFFSET, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATTIME, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONTIME, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATOFFSET, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONOFFSET, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_FIRSTSTEP, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_SECONDSTEP, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREPREEXEVERIFICATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_PREEXEVERIFICATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREEXEVERIFICATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_CRITICAL, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_AUTHORIZATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_ACCEPTANCE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_START, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_PROGRESS, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_COMPLETION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_NOEXTRAPOLATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE, bCheck);
}

BOOL CTCProcedurePropertiesSendTCFunctionDialog::IsModified() CONST
{
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[1]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesSendTCFunctionDialog::Check(BOOL bModified) CONST
{
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	BYTE  nOolStatus;
	CString  szName;
	CTimeTag  tTimeTag;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (nElement = 0, nElements = (pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket)) ? (INT)cDatabaseTCFunction.GetSize() : -1; nElement < nElements; nElement++)
		{
			if ((pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(nElement)))
			{
				if (!pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty())
				{
					if (pDatabaseTCFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER)
					{
						if (CheckTCParameterOolStatus(pDatabaseTCFunctionElement, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NONE) continue;
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
						}
						break;
					}
					if (pDatabaseTCFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT) continue;
				}
				if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) continue;
			}
			break;
		}
		for (nParameter = 0, nParameters = (INT)cDatabaseTCPacket.GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(nParameter)))
			{
				if (!pDatabaseTCPacketParameter->GetConstValueAsText().IsEmpty())
				{
					if (pDatabaseTCPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE)
					{
						if (CheckTCParameterOolStatus(pDatabaseTCPacketParameter, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NONE) continue;
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
						}
						break;
					}
					if (pDatabaseTCPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_FIXED) continue;
				}
				if ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) || (pDatabaseTCPacketParameter->GetAttributes() & (TCPACKETPARAMETER_TYPE_APID | TCPACKETPARAMETER_TYPE_SERVICETYPE | TCPACKETPARAMETER_TYPE_SERVICESUBTYPE | TCPACKETPARAMETER_TYPE_ACKNOWLEDGEMENTFLAGS | TCPACKETPARAMETER_TYPE_OTHER))) continue;
			}
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_NAME)->GetWindowText(szName);
		return((!szName.IsEmpty() && ((pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATTIME) != TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATTIME || pStep->GetReleaseTime() > tTimeTag) && ((pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATTIME) != TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATTIME || CheckTCExecutionTime(pStep->GetExecutionTime())) && ((pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATTIME) != TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATTIME || (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATTIME) != TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATTIME || pStep->GetReleaseTime() < pStep->GetExecutionTime()) && ((pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATOFFSET) != TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATOFFSET || (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATOFFSET) != TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATOFFSET || pStep->GetReleaseDeltaTime() < pStep->GetExecutionDeltaTime()) && ((pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATOFFSET) != TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATOFFSET || (pStep->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATTIME) != TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATTIME) && nElement == nElements  &&  nParameter == nParameters) ? (!bModified || IsModified()) : FALSE);
	}
	return FALSE;
}

void CTCProcedurePropertiesSendTCFunctionDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesSendTCFunctionDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesSendTCFunctionDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesSendTCFunctionDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesSendTCFunctionDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATTIME, OnReleaseAtTime)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATOFFSET, OnReleaseAtOffset)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATTIME, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATOFFSET, OnExecuteAtOffset)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_FIRSTSTEP, OnSendAsFirstStep)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_SECONDSTEP, OnSendAsSecondStep)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREPREEXEVERIFICATION, OnIgnorePreexecutionVerification)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREEXEVERIFICATION, OnIgnoreExecutionVerification)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_CRITICAL, OnCritical)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_AUTHORIZATION, OnAuthorization)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_ACCEPTANCE, OnAcknowledgeAtAcceptance)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_START, OnAcknowledgeAtStart)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_PROGRESS, OnAcknowledgeAtProgress)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_COMPLETION, OnAcknowledgeAtCompletion)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_NOEXTRAPOLATION, OnNoExtrapolation)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_SHOWALL, OnShowAll)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_SETVALUE, OnSetParameterValue)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LOADVALUES, OnLoadParameterValues)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_NAME, OnSelchangeFunction)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_DESCRIPTION, OnEditchangeDescription)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_PREEXEVERIFICATION, OnEditchangePreexecutionCondition)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION, OnEditchangeExecutionCondition)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE, OnEditchangeParameterValue)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASETIME, OnSpinchangeReleaseTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEOFFSET, OnSpinchangeReleaseOffset)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONTIME, OnSpinchangeExecutionTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONOFFSET, OnSpinchangeExecutionOffset)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW, OnSpinchangeTimeWindow)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSendTCFunctionDialog message handlers

BOOL CTCProcedurePropertiesSendTCFunctionDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST)->GetClientRect(rColumns);
	for (EnumTCFunctions(), Timespinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEOFFSET), CTimeKey(TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_MINIMUMRELEASETIMEOFFSET), CTimeKey(TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_MAXIMUMRELEASETIMEOFFSET)), Timespinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONOFFSET), CTimeKey(TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_MINIMUMEXECUTIONTIMEOFFSET), CTimeKey(TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_MAXIMUMEXECUTIONTIMEOFFSET)), Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW), TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_MINIMUMTIMEWINDOW, TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_MAXIMUMTIMEWINDOW), GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH)) ? (rColumns.Width() / 9) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREPREEXEVERIFICATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREEXEVERIFICATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_CRITICAL)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_AUTHORIZATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_SHOWALL)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTCProcedurePropertiesSendTCFunctionDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CString  szTag;
	CString  szType;
	CString  szFlag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CTCProcedurePropertiesSendTCFunctionParametersDialog  cParametersDialog;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if ((pStep = (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) ? GetStep() : (CTCProcedureDocumentSendTCFunctionItem *)NULL) && pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
		{
			for (szTag = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szType = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))), szFlag = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE, (szFlag != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED)) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE); (pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(cDatabaseTCFunction.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8))); )
			{
				CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_NOEXTRAPOLATION, (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) ? TRUE : FALSE);
				break;
			}
			for (; (pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(cDatabaseTCPacket.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8))); )
			{
				CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_NOEXTRAPOLATION, (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) ? TRUE : FALSE);
				break;
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE)->SetWindowText(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_REMARK)->ShowWindow((szType != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW)) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_REMARK)->EnableWindow((szType != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_NOEXTRAPOLATION)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_SETVALUE)->EnableWindow(FALSE);
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE, EM_SETSEL);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST)->SetFocus();
		}
		if ((pStep = (pNotifyListView->hdr.code == NM_DBLCLK  &&  Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW)) ? GetStep() : (CTCProcedureDocumentSendTCFunctionItem *)NULL) && pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
		{
			if (cParametersDialog.Create(this, cDatabaseTCFunction.GetName(), Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szValue) && !szValue.IsEmpty() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE))
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue  &&  !szValue.IsEmpty()) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE)->SetWindowText(szValue);
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE, EM_SETSEL, 0, -1);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE)->SetFocus();
			}
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnReleaseAtTime()
{
	CTimeTag  tReleaseTime;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		pStep->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATTIME)) ? ((pStep->GetOptions() & ~TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATOFFSET) | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATTIME) : (pStep->GetOptions() & ~TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATTIME));
		pStep->SetReleaseTime((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATTIME)) ? (tReleaseTime.GetTime() + 1000000 * (TIMETAG)TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_DEFAULTRELEASETIMEOFFSET) : 0);
		pStep->SetReleaseDeltaTime(0);
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATOFFSET, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASETIME)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATTIME));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEOFFSET)->EnableWindow(FALSE);
	for (ShowParameters(); IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATTIME); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASETIME), CTimeKey(tReleaseTime.GetTimeInSeconds() + TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_DEFAULTRELEASETIMEOFFSET));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASETIME)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnReleaseAtOffset()
{
	CTimeTag  tReleaseTime;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		pStep->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATOFFSET)) ? ((pStep->GetOptions() & ~TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATTIME) | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATOFFSET) : (pStep->GetOptions() & ~TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATOFFSET));
		pStep->SetReleaseDeltaTime((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATOFFSET)) ? (1000 * TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_DEFAULTRELEASETIMEOFFSET) : 0);
		pStep->SetReleaseTime(0);
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATTIME, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEOFFSET)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATOFFSET));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASETIME)->EnableWindow(FALSE);
	for (ShowParameters(); IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEATOFFSET); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEOFFSET), CTimeKey(TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_DEFAULTRELEASETIMEOFFSET));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEOFFSET)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnExecuteAtTime()
{
	CTimeTag  tExecutionTime;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		pStep->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATTIME)) ? ((pStep->GetOptions() & ~(TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATOFFSET | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_FIRSTSTEP | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_SECONDSTEP)) | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATTIME) : (pStep->GetOptions() & ~TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATTIME));
		pStep->SetExecutionTime((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATTIME)) ? (tExecutionTime.GetTime() + 1000000 * (TIMETAG)TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_DEFAULTRELEASETIMEOFFSET) : 0);
		pStep->SetExecutionDeltaTime(0);
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_FIRSTSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_SECONDSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATOFFSET, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONTIME)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATTIME));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONOFFSET)->EnableWindow(FALSE);
	for (ShowParameters(); IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATTIME); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONTIME), CTimeKey(tExecutionTime.GetTimeInSeconds() + TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_DEFAULTRELEASETIMEOFFSET));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONTIME)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnExecuteAtOffset()
{
	CTimeTag  tExecutionTime;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		pStep->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATOFFSET)) ? ((pStep->GetOptions() & ~(TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATTIME | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_FIRSTSTEP | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_SECONDSTEP)) | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATOFFSET) : (pStep->GetOptions() & ~TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATOFFSET));
		pStep->SetExecutionDeltaTime((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATOFFSET)) ? (1000 * TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_DEFAULTRELEASETIMEOFFSET) : 0);
		pStep->SetExecutionTime(0);
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_FIRSTSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_SECONDSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATTIME, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONOFFSET)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATOFFSET));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONTIME)->EnableWindow(FALSE);
	for (ShowParameters(); IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATOFFSET); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONOFFSET), CTimeKey(TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_DEFAULTEXECUTIONTIMEOFFSET));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONOFFSET)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnSendAsFirstStep()
{
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (pStep->SetOptions((pStep->GetOptions() & ~(TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATTIME | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATOFFSET | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_SECONDSTEP)) | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_FIRSTSTEP), pStep->SetExecutionDeltaTime(0), pStep->SetExecutionTime(0); pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket); )
		{
			cDatabaseTCFunction.SetAttributes((cDatabaseTCFunction.GetAttributes() & ~TCFUNCTION_EXETYPE_SECONDSTEP) | TCFUNCTION_EXETYPE_FIRSTSTEP);
			pStep->SetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket);
			break;
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_FIRSTSTEP, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_SECONDSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATTIME, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATOFFSET, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONOFFSET)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnSendAsSecondStep()
{
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (pStep->SetOptions((pStep->GetOptions() & ~(TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATTIME | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATOFFSET | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_FIRSTSTEP)) | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_SECONDSTEP), pStep->SetExecutionDeltaTime(0), pStep->SetExecutionTime(0); pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket); )
		{
			cDatabaseTCFunction.SetAttributes((cDatabaseTCFunction.GetAttributes() & ~TCFUNCTION_EXETYPE_FIRSTSTEP) | TCFUNCTION_EXETYPE_SECONDSTEP);
			pStep->SetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket);
			break;
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_FIRSTSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_SECONDSTEP, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATTIME, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTEATOFFSET, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONOFFSET)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnIgnorePreexecutionVerification()
{
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		pStep->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREPREEXEVERIFICATION)) ? (pStep->GetOptions() | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_IGNOREPREEXEVERIFICATION) : (pStep->GetOptions() & ~TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_IGNOREPREEXEVERIFICATION));
		pStep->SetPreexecutionVerificationCondition(EMPTYSTRING);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_PREEXEVERIFICATION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_PREEXEVERIFICATION)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREPREEXEVERIFICATION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnIgnoreExecutionVerification()
{
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		pStep->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREEXEVERIFICATION)) ? (pStep->GetOptions() | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_IGNOREEXEVERIFICATION) : (pStep->GetOptions() & ~TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_IGNOREEXEVERIFICATION));
		pStep->SetOptions(pStep->GetOptions() & ~(TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_ACCEPTANCE | TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_START | TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_PROGRESS | TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_COMPLETION));
		pStep->SetExecutionVerificationCondition(EMPTYSTRING);
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_START, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_COMPLETION, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW), TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_DEFAULTTIMEWINDOW);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_IGNOREEXEVERIFICATION));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_STATIC)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_START) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_ACCEPTANCE)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_START)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_START));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_PROGRESS)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_COMPLETION)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnCritical()
{
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) pStep->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_CRITICAL)) ? (pStep->GetOptions() | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_CRITICAL) : (pStep->GetOptions() & ~TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_CRITICAL));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnAuthorization()
{
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) pStep->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_AUTHORIZATION)) ? (pStep->GetOptions() | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_AUTHORIZATION) : (pStep->GetOptions() & ~TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_AUTHORIZATION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnAcknowledgeAtAcceptance()
{
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) pStep->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_ACCEPTANCE)) ? (pStep->GetOptions() | TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_ACCEPTANCE) : (pStep->GetOptions() & ~TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_ACCEPTANCE));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnAcknowledgeAtStart()
{
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) pStep->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_START)) ? (pStep->GetOptions() | TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_START) : (pStep->GetOptions() & ~TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_START));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnAcknowledgeAtProgress()
{
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) pStep->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_PROGRESS)) ? (pStep->GetOptions() | TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_PROGRESS) : (pStep->GetOptions() & ~TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_PROGRESS));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnAcknowledgeAtCompletion()
{
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) pStep->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_COMPLETION)) ? (pStep->GetOptions() | TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_COMPLETION) : (pStep->GetOptions() & ~TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_COMPLETION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnNoExtrapolation()
{
	INT  nIndex;
	CString  szTag;
	CString  szOffset;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		if ((nIndex = (pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket)) ? Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST)) : -1) >= 0)
		{
			for (szTag = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))); (pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(cDatabaseTCFunction.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8))); )
			{
				pDatabaseTCFunctionElement->SetAttributes((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_NOEXTRAPOLATION)) ? ((pDatabaseTCFunctionElement->GetAttributes() & ~TCPARAMETER_INTERPRETATION_EXTRAPOLATE) | TCPARAMETER_INTERPRETATION_FULL) : ((pDatabaseTCFunctionElement->GetAttributes() & ~TCPARAMETER_INTERPRETATION_FULL) | TCPARAMETER_INTERPRETATION_EXTRAPOLATE));
				break;
			}
			pStep->SetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket);
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnShowAll()
{
	CHourglassCursor  cCursor;

	ShowParameters();
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnSetParameterValue()
{
	INT  nBit;
	INT  nByte;
	INT  nIndex;
	BYTE  nOolStatus;
	BOOL  bOolStatus;
	CString  szTag;
	CString  szFlag;
	CString  szValue;
	CString  szOffset;
	CString  szOolStatus;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE)->GetWindowText(szValue); (nIndex = (pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket)) ? Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST)) : -1) >= 0; )
		{
			for (szTag = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), szFlag = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG))); (pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(cDatabaseTCFunction.Find(szTag, (nByte = _ttoi(szOffset) / 8), (nBit = _ttoi(szOffset) % 8)))); )
			{
				for (pDatabaseTCFunctionElement->SetConstValueAsText(szValue), pDatabaseTCFunctionElement->SetConstValue(), pStep->SetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket), EvaluateParameters(); (pDatabaseTCFunctionElement = (pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket)) ? cDatabaseTCFunction.GetAt(cDatabaseTCFunction.Find(szTag, nByte, nBit)) : (CDatabaseTCFunctionElement *)NULL); )
				{
					for (; (bOolStatus = CheckTCParameterOolStatus(pDatabaseTCFunctionElement, nOolStatus)); )
					{
						if ((nOolStatus & TCPARAMETER_STATUS_NOLIMIT) == TCPARAMETER_STATUS_NOLIMIT)
						{
							szOolStatus = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szOolStatus = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_SOFTLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szOolStatus = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_HARDLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szOolStatus = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_DELTALIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szOolStatus = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_VALUELIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
						{
							szOolStatus = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_TIMELIMIT);
							break;
						}
						szOolStatus = (!pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NONE) : ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szFlag = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : (((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC) : EMPTYSTRING));
					szOolStatus = (!bOolStatus) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_FAILURE) : szOolStatus;
					break;
				}
				break;
			}
			if ((pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(cDatabaseTCPacket.Find(szTag, nByte, nBit))))
			{
				for (pDatabaseTCPacketParameter->SetConstValueAsText(szValue), pDatabaseTCPacketParameter->SetConstValue(), pStep->SetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket), EvaluateParameters(); (pDatabaseTCPacketParameter = (pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket)) ? cDatabaseTCPacket.GetAt(cDatabaseTCPacket.Find(szTag, nByte, nBit)) : (CDatabaseTCPacketParameter *)NULL); )
				{
					for (; (bOolStatus = CheckTCParameterOolStatus(pDatabaseTCPacketParameter, nOolStatus)); )
					{
						if ((nOolStatus & TCPARAMETER_STATUS_NOLIMIT) == TCPARAMETER_STATUS_NOLIMIT)
						{
							szOolStatus = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
						{
							szOolStatus = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_SOFTLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
						{
							szOolStatus = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_HARDLIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
						{
							szOolStatus = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_DELTALIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
						{
							szOolStatus = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_VALUELIMIT);
							break;
						}
						if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
						{
							szOolStatus = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_TIMELIMIT);
							break;
						}
						szOolStatus = (!pDatabaseTCPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NONE) : ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOTIME) : EMPTYSTRING);
						break;
					}
					szFlag = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : (((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC) : EMPTYSTRING));
					szOolStatus = (!bOolStatus) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_FAILURE) : szOolStatus;
					break;
				}
			}
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)), szFlag);
			Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK)), szOolStatus);
			break;
		}
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE)->GetWindowText(szValue); (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST))) >= 0; )
	{
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE)), szValue);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_SETVALUE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnLoadParameterValues()
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameterSet;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement[2];
	CTCProcedureDocumentSendTCFunctionItem  *pStep;
	CTCProcedurePropertiesSendTCFunctionParameterSetsDialog  cParameterSetsDialog;

	if ((pStep = GetStep()))
	{
		if (pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
		{
			if (cParameterSetsDialog.Create(this, &cDatabaseTCFunction, szParameterSet))
			{
				if ((pDatabaseTCFunction = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(cDatabaseTCFunction.GetName()))))
				{
					if ((pDatabaseTCParameterSet = GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(szParameterSet))))
					{
						for (nParameter = 0, nParameters = (INT)pDatabaseTCParameterSet->GetSize(); nParameter < nParameters; nParameter++)
						{
							if ((pDatabaseTCFunctionElement[0] = pDatabaseTCParameterSet->GetAt(nParameter)))
							{
								if ((pDatabaseTCFunctionElement[1] = cDatabaseTCFunction.GetAt(pDatabaseTCFunction->Find(pDatabaseTCFunctionElement[0]->GetName(), pDatabaseTCFunctionElement[0]->GetBytePos(), pDatabaseTCFunctionElement[0]->GetBitPos()))) && (pDatabaseTCFunctionElement[1]->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) == 0)
								{
									pDatabaseTCFunctionElement[1]->SetAttributes((pDatabaseTCFunctionElement[1]->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
									pDatabaseTCFunctionElement[1]->SetConstValueAsText(pDatabaseTCFunctionElement[0]->GetConstValueAsText());
									pDatabaseTCFunctionElement[1]->SetConstValue(pDatabaseTCFunctionElement[0]->GetConstValue());
								}
							}
						}
					}
				}
				pStep->SetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket);
				ShowParameters();
			}
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnSelchangeFunction()
{
	INT  nPos;
	INT  nElement;
	INT  nElements;
	BOOL  bSuccess;
	CString  szName;
	CString  szFormat;
	CString  szMessage;
	CDatabaseTCPacket  *pDatabaseTCPacket[2];
	CDatabaseTCFunction  *pDatabaseTCFunction[2];
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_NAME)->GetWindowText(szName), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTCFUNCTION_FORMAT), EMPTYSTRING, EMPTYSTRING), bSuccess = TRUE; (pDatabaseTCFunction[1] = ((pDatabaseTCFunction[0] = new CDatabaseTCFunction)) ? GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find((szName = ((nPos = szName.Find(szFormat.GetAt(0))) >= 0) ? szName.Left(nPos) : szName))) : (CDatabaseTCFunction *)NULL) && pDatabaseTCFunction[0]->Copy(pDatabaseTCFunction[1]); )
		{
			for (nElement = 0, nElements = (INT)pDatabaseTCFunction[0]->GetSize(); nElement < nElements; nElement++)
			{
				if ((pDatabaseTCFunctionElement = pDatabaseTCFunction[0]->GetAt(nElement)))
				{
					if ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCFunctionElement->GetName()))))
					{
						pDatabaseTCFunctionElement->SetAttributes((pDatabaseTCFunctionElement->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED)) | ((pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_VTYPE_CALIBRATED)) ? ((pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_VTYPE_CALIBRATED) : (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_VTYPE_RAW)) | ((!GetDatabase()->CheckTCFunctionElementConstTimeType(pDatabaseTCFunctionElement->GetName()) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) == 0) ? (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) : TCPARAMETER_CODING_TIME));
						continue;
					}
					if (pDatabaseTCFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT)
					{
						pDatabaseTCFunctionElement->SetAttributes(pDatabaseTCFunctionElement->GetAttributes() | TCPARAMETER_CODING_UNSIGNEDINTEGER);
						continue;
					}
				}
				bSuccess = FALSE;
			}
			if ((pDatabaseTCPacket[0] = new CDatabaseTCPacket))
			{
				if ((pDatabaseTCPacket[1] = GetDatabase()->GetTCPackets()->GetAt(GetDatabase()->GetTCPackets()->Find(pDatabaseTCFunction[0]->GetTCPacket()))) && pDatabaseTCPacket[0]->Copy(pDatabaseTCPacket[1]))
				{
					for (pStep->SetDescription(pDatabaseTCFunction[0]->GetDescription()), pStep->SetOptions((pStep->GetOptions() & ~(TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_FIRSTSTEP | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_SECONDSTEP)) | ((pDatabaseTCFunction[0]->GetAttributes() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_FIRSTSTEP : 0) | ((pDatabaseTCFunction[0]->GetAttributes() & TCFUNCTION_EXETYPE_SECONDSTEP) ? TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_SECONDSTEP : 0)); pDatabaseTCFunction[0]->GetAttributes() & TCFUNCTION_HAZFLAG_HAZARDOUS; )
					{
						pStep->SetOptions(pStep->GetOptions() | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_CRITICAL);
						break;
					}
					if (pStep->GetOptions() & (TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_FIRSTSTEP | TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_SECONDSTEP))
					{
						pStep->SetExecutionDeltaTime(0);
						pStep->SetExecutionTime(0);
					}
					for (pStep->SetFunction(pDatabaseTCFunction[0], pDatabaseTCPacket[0]), EvaluateParameters(); (pDatabaseTCFunction[0]->GetAttributes() & TCFUNCTION_HAZFLAG_HAZARDOUS) != TCFUNCTION_HAZFLAG_HAZARDOUS; )
					{
						pStep->SetOptions(pStep->GetOptions() & ~TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_CRITICAL);
						break;
					}
					delete pDatabaseTCPacket[0];
					break;
				}
				delete pDatabaseTCPacket[0];
				bSuccess = FALSE;
				break;
			}
		}
		if (!pDatabaseTCFunction[0])
		{
			pStep->SetFunction();
			szName.Empty();
		}
		if (!bSuccess  &&  !szName.IsEmpty())
		{
			szMessage.Format(STRING(IDS_TCPROCEDURE_MESSAGE_BUILDTCFUNCTION_FAILURE), (!GetParentDisplay()->GetName().IsEmpty()) ? (LPCTSTR)GetParentDisplay()->GetName() : (LPCTSTR)GetParentDisplay()->GetTitle(), (LPCTSTR)szName);
			ShowMessage(szMessage);
		}
		delete pDatabaseTCFunction[0];
	}
	ShowProperties();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnEditchangeDescription()
{
	CString  szDescription;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_DESCRIPTION)->GetWindowText(szDescription);
		pStep->SetDescription(szDescription);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnEditchangePreexecutionCondition()
{
	CString  szCondition;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_PREEXEVERIFICATION)->GetWindowText(szCondition);
		pStep->SetPreexecutionVerificationCondition(szCondition);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnEditchangeExecutionCondition()
{
	CString  szCondition;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION)->GetWindowText(szCondition); pStep->GetExecutionVerificationCondition().IsEmpty() && !szCondition.IsEmpty(); )
		{
			Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW), TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_DEFAULTTIMEWINDOW);
			pStep->SetExecutionVerificationTimeWindow(TCPROCEDUREPROPERTIESSENDTCFUNCTIONSTEP_DEFAULTTIMEWINDOW);
			break;
		}
		for (; !pStep->GetExecutionVerificationCondition().IsEmpty() && szCondition.IsEmpty(); )
		{
			pStep->SetExecutionVerificationTimeWindow(0);
			break;
		}
		pStep->SetExecutionVerificationCondition(szCondition);
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW_STATIC)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW_SECONDS)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_STATIC)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_START) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_ACCEPTANCE)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_START)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_START));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_PROGRESS)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_ACKFLAG_COMPLETION)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnEditchangeParameterValue()
{
	BOOL  bValue;
	CString  szTag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	if ((pStep = GetStep()) && pStep->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
	{
		for (szTag = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), bValue = FALSE; (pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(cDatabaseTCFunction.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8))); )
		{
			bValue = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? TRUE : FALSE;
			break;
		}
		for (; (pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(cDatabaseTCPacket.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8))); )
		{
			bValue = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? TRUE : FALSE;
			break;
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_VALUE)->GetWindowText(szValue);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue && (!szValue.IsEmpty() || bValue)) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	}
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnSpinchangeReleaseTime()
{
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	if ((pStep = GetStep())) pStep->SetReleaseTime(1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASETIME)).GetTime());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnSpinchangeReleaseOffset()
{
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	if ((pStep = GetStep())) pStep->SetReleaseDeltaTime(1000 * (DWORD)abs(Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_RELEASEOFFSET)).GetTime()));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnSpinchangeExecutionTime()
{
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	if ((pStep = GetStep())) pStep->SetExecutionTime(1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONTIME)).GetTime());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnSpinchangeExecutionOffset()
{
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	if ((pStep = GetStep())) pStep->SetExecutionDeltaTime(1000 * (DWORD)abs(Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXECUTIONOFFSET)).GetTime()));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnSpinchangeTimeWindow()
{
	CTCProcedureDocumentSendTCFunctionItem  *pStep;

	if ((pStep = GetStep())) pStep->SetExecutionVerificationTimeWindow(Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCFUNCTION_OPTIONS_EXEVERIFICATION_TIMEWINDOW)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesSendTCFunctionDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSENDTCFUNCTIONDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesSendTCFunctionDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSENDTCFUNCTIONDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSendTCSequenceDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesSendTCSequenceDialog, CDisplayDialog)

CTCProcedurePropertiesSendTCSequenceDialog::CTCProcedurePropertiesSendTCSequenceDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesSendTCSequenceDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesSendTCSequenceDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	if (pStep->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentSendTCSequenceItem)))
	{
		if ((m_pStep[0] = (CTCProcedureDocumentSendTCSequenceItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep)))
		{
			if ((m_pStep[1] = (CTCProcedureDocumentSendTCSequenceItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep)))
			{
				for (EvaluateParameters(), m_pStep[1]->Copy(m_pStep[0]); CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesSendTCSequenceDialog::IDD) == IDOK; )
				{
					pStep->Copy(m_pStep[0]);
					delete m_pStep[0];
					delete m_pStep[1];
					return IDOK;
				}
				delete m_pStep[1];
			}
			delete m_pStep[0];
		}
	}
	return IDCANCEL;
}

CTCProcedureDocumentSendTCSequenceItem *CTCProcedurePropertiesSendTCSequenceDialog::GetStep() CONST
{
	return m_pStep[0];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesSendTCSequenceDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesSendTCSequenceDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCProcedurePropertiesSendTCSequenceDialog::EnumTCSequences()
{
	INT  nSequence;
	INT  nSequences;
	CString  szSequence;
	CDatabaseTCSequence  *pDatabaseTCSequence;

	for (nSequence = 0, nSequences = (INT)GetDatabase()->GetTCSequences()->GetSize(); nSequence < nSequences; nSequence++)
	{
		if ((pDatabaseTCSequence = GetDatabase()->GetTCSequences()->GetAt(nSequence)) != (CDatabaseTCSequence *)NULL)
		{
			szSequence.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTCSEQUENCE_FORMAT), (LPCTSTR)pDatabaseTCSequence->GetName(), (LPCTSTR)pDatabaseTCSequence->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_NAME, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)((pDatabaseTCSequence->GetDescription().IsEmpty()) ? (LPCTSTR)pDatabaseTCSequence->GetName() : (LPCTSTR)szSequence));
		}
	}
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_NAME, CB_GETCOUNT) == nSequences) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesSendTCSequenceDialog::EnumTCSequenceEntries()
{
	INT  nEntry;
	INT  nEntries;
	INT  nDigits;
	CString  szEntry;
	CStringTools  cStringTools;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if ((pStep = GetStep()))
	{
		for (nEntry = 0, nEntries = pStep->GetSize(), nDigits = cStringTools.ConvertIntToString(nEntries).GetLength(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_RESETCONTENT); nEntry < nEntries; nEntry++)
		{
			if ((pEntry = pStep->GetAt(nEntry)) != (CTCProcedureDocumentSendTCFunctionItem *)NULL  &&  pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
			{
				szEntry.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTCSEQUENCEENTRY_FORMAT), (LPCTSTR)cStringTools.ConvertIntToPaddedString(nEntry + 1, nDigits), (LPCTSTR)cDatabaseTCFunction.GetName(), (LPCTSTR)pEntry->GetDescription());
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szEntry);
			}
		}
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_SETCURSEL);
		return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCOUNT) == nEntries) ? TRUE : FALSE);
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_RESETCONTENT);
	return FALSE;
}

VOID CTCProcedurePropertiesSendTCSequenceDialog::ShowProperties()
{
	CString  szName;
	CDatabaseTCSequence  *pDatabaseTCSequence;
	CDatabaseTCParameters  pDatabaseTCParameters;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;

	if ((pStep = GetStep()))
	{
		if ((pDatabaseTCSequence = GetDatabase()->GetTCSequences()->GetAt(GetDatabase()->GetTCSequences()->Find(pStep->GetSequence()))))
		{
			szName.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTCSEQUENCE_FORMAT), (LPCTSTR)pDatabaseTCSequence->GetName(), (LPCTSTR)pDatabaseTCSequence->GetDescription());
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_NAME, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_NAME, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szName = (pDatabaseTCSequence->GetDescription().IsEmpty()) ? pDatabaseTCSequence->GetName() : szName)));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWFORMALLIST)->EnableWindow((pStep->GetParameters(pDatabaseTCParameters) > 0) ? TRUE : FALSE);
			EnumTCSequenceEntries();
			ShowEntryProperties();
			return;
		}
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_NAME, CB_SETCURSEL, (WPARAM)-1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWFORMALLIST)->EnableWindow(FALSE);
	EnumTCSequenceEntries();
	ShowEntryProperties();
}

VOID CTCProcedurePropertiesSendTCSequenceDialog::ShowEntryProperties()
{
	CStringArray  szSets;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))) && pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket) && !cDatabaseTCFunction.GetName().IsEmpty())
		{
			Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASETIME), (pEntry->GetReleaseTime() > 0) ? CTimeKey(pEntry->GetReleaseTime().GetTimeInSeconds()) : CTime::GetCurrentTime().GetTime());
			Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEOFFSET), CTimeKey(pEntry->GetReleaseDeltaTime() / 1000));
			Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONTIME), (pEntry->GetExecutionTime() > 0) ? CTimeKey(pEntry->GetExecutionTime().GetTimeInSeconds()) : CTime::GetCurrentTime().GetTime());
			Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONOFFSET), (pEntry->IsEarlierExecutionDeltaTime()) ? -CTimeKey(pEntry->GetExecutionDeltaTime() / 1000).GetTime() : CTimeKey(pEntry->GetExecutionDeltaTime() / 1000));
			Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW), pEntry->GetExecutionVerificationTimeWindow().GetTotalSeconds());
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATTIME, (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATTIME) ? CheckTCExecutionTime(pEntry) : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATOFFSET, (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATOFFSET) ? CheckTCExecutionTime(pEntry) : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATTIME, (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATTIME) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATOFFSET, (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATOFFSET) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_FIRSTSTEP, (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_FIRSTSTEP) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_SECONDSTEP, (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_SECONDSTEP) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEASGROUP, (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_GROUPED) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREPREEXEVERIFICATION, (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_IGNOREPREEXEVERIFICATION) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREEXEVERIFICATION, (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_IGNOREEXEVERIFICATION) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_CRITICAL, (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_CRITICAL) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_AUTHORIZATION, (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_AUTHORIZATION) ? TRUE : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_ACCEPTANCE, (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_ACCEPTANCE) ? CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE) : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_START, (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_START) ? CheckTCVerificationStage(TCVERIFICATIONSTAGE_START) : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_PROGRESS, (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_PROGRESS) ? CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS) : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_COMPLETION, (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_COMPLETION) ? CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION) : FALSE);
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWFORMALLIST, FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_DESCRIPTION)->SetWindowText(pEntry->GetDescription());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_PREEXEVERIFICATION)->SetWindowText(pEntry->GetPreexecutionVerificationCondition());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION)->SetWindowText(pEntry->GetExecutionVerificationCondition());
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATTIME)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASETIME)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATTIME));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATOFFSET)->EnableWindow();
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEOFFSET)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATOFFSET));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATTIME)->EnableWindow(CheckTCExecutionTime(pEntry));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONTIME)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATTIME));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATOFFSET)->EnableWindow(CheckTCExecutionTime(pEntry));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONOFFSET)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATOFFSET));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_TWOSTEPS_STATIC)->EnableWindow(CheckTCExecutionType(cDatabaseTCFunction.GetAttributes()));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_FIRSTSTEP)->EnableWindow(CheckTCExecutionType(cDatabaseTCFunction.GetAttributes()));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_SECONDSTEP)->EnableWindow(CheckTCExecutionType(cDatabaseTCFunction.GetAttributes()));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEASGROUP)->EnableWindow(((pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) != TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREPREEXEVERIFICATION)->EnableWindow(((pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) != TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_PREEXEVERIFICATION)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREPREEXEVERIFICATION));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREEXEVERIFICATION)->EnableWindow(((pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) != TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREEXEVERIFICATION));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW_STATIC)->EnableWindow((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREEXEVERIFICATION) && !pEntry->GetExecutionVerificationCondition().IsEmpty()) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW)->EnableWindow((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREEXEVERIFICATION) && !pEntry->GetExecutionVerificationCondition().IsEmpty()) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW_SECONDS)->EnableWindow((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREEXEVERIFICATION) && !pEntry->GetExecutionVerificationCondition().IsEmpty()) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_CRITICAL)->EnableWindow(((pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) != TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_AUTHORIZATION)->EnableWindow(((pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) != TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_STATIC)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_START) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_ACCEPTANCE)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_START)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_START));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_PROGRESS)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_COMPLETION)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LOADVALUES)->EnableWindow((cDatabaseTCFunction.GetParameterSets(szSets) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
			ShowParameters();
			return;
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATTIME, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATOFFSET, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATTIME, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATOFFSET, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_FIRSTSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_SECONDSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEASGROUP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREPREEXEVERIFICATION, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREEXEVERIFICATION, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_CRITICAL, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_AUTHORIZATION, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_START, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_COMPLETION, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWFORMALLIST, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_DESCRIPTION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_PREEXEVERIFICATION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATTIME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASETIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATOFFSET)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEOFFSET)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATTIME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATOFFSET)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONOFFSET)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_TWOSTEPS_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_FIRSTSTEP)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_SECONDSTEP)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEASGROUP)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREPREEXEVERIFICATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_PREEXEVERIFICATION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREEXEVERIFICATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_CRITICAL)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_AUTHORIZATION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_ACCEPTANCE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_START)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_PROGRESS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_COMPLETION)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LOADVALUES)->EnableWindow(FALSE);
	ShowParameters();
}

VOID CTCProcedurePropertiesSendTCSequenceDialog::ShowFormalParameters()
{
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	INT  nParameter;
	INT  nParameters;
	BYTE  nOolStatus;
	CString  szItem;
	CStringTools  cStringTools;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCParameters  pDatabaseTCParameters;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;

	for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST, LVM_DELETEALLITEMS), nCount = 0; (pStep = GetStep()); )
	{
		for (nParameter = 0, nParameters = pStep->GetParameters(pDatabaseTCParameters); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTCParameter = pDatabaseTCParameters.GetAt(nParameter)))
			{
				for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
				{
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
					{
						szItem = pDatabaseTCParameter->GetTag();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
					{
						szItem = pDatabaseTCParameter->GetDescription();
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
					{
						szItem = ((pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
						szItem = (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) ? EMPTYSTRING : szItem;
					}
					for (szItem = (m_szColumns.GetAt(nColumn) != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET)) ? szItem : EMPTYSTRING; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
					{
						szItem = ((pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) == 0) ? cStringTools.ConvertIntToString(pDatabaseTCParameter->GetWidth()) : EMPTYSTRING;
						break;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
					{
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
						szItem = ((pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) == 0) ? ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
						szItem = (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) ? EMPTYSTRING : szItem;
					}
					if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
					{
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
						szItem = (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
						szItem = (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) ? EMPTYSTRING : szItem;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
					{
						szItem = pDatabaseTCParameter->GetConstValueAsText();
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
					{
						szItem = ((pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) == 0) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED);
						break;
					}
					for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
					{
						if ((pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_TYPE_FUNCTION | TCPARAMETER_TYPE_SEQUENCE)) == 0)
						{
							if (CheckTCParameterOolStatus(pDatabaseTCParameter, nOolStatus))
							{
								if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_SOFTLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_HARDLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_DELTALIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_VALUELIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_TIMELIMIT);
									break;
								}
								szItem = (!pDatabaseTCParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NONE) : ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOTIME) : EMPTYSTRING);
								break;
							}
							szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_FAILURE);
							break;
						}
						szItem.Empty();
						break;
					}
					if (!nColumn)
					{
						Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nParameter, szItem);
						continue;
					}
					Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nParameter, nColumn, szItem);
				}
			}
		}
		break;
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE)->SetWindowText(EMPTYSTRING), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SETVALUE)->EnableWindow(FALSE), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LOADVALUES)->EnableWindow(FALSE), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWALL)->EnableWindow(FALSE); SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST, LVM_GETITEMCOUNT) > 0; )
	{
		Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), 0);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_NOEXTRAPOLATION, FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWALL, FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE)->EnableWindow();
		return;
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWALL, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_NOEXTRAPOLATION, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_REMARK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_REMARK)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE)->EnableWindow(FALSE);
}

VOID CTCProcedurePropertiesSendTCSequenceDialog::ShowParameters()
{
	INT  nItem;
	INT  nItems;
	INT  nCount;
	INT  nColumn;
	INT  nColumns;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	BYTE  nOolStatus;
	CString  szItem;
	CStringArray  szSets;
	CStringTools  cStringTools;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWFORMALLIST))
	{
		ShowFormalParameters();
		return;
	}
	for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST, LVM_DELETEALLITEMS), nCount = 0; (pStep = GetStep()); )
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))) && pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
		{
			for (nParameter = 0, nParameters = (INT)cDatabaseTCPacket.GetSize(); nParameter < nParameters; nParameter++)
			{
				if ((pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(nParameter)))
				{
					for (nColumn = 0, nColumns = ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
						{
							szItem = pDatabaseTCPacketParameter->GetTag();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
						{
							szItem = pDatabaseTCPacketParameter->GetDescription();
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
						{
							szItem = ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
							szItem = ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCPacketParameter->GetTag())))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
							szItem = ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCPacketParameter->GetTag())))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
						{
							szItem = cStringTools.ConvertIntToString(8 * pDatabaseTCPacketParameter->GetBytePos() + pDatabaseTCPacketParameter->GetBitPos());
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
						{
							szItem = (pDatabaseTCPacketParameter->GetWidth() > 0) ? cStringTools.ConvertIntToString(pDatabaseTCPacketParameter->GetWidth()) : EMPTYSTRING;
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
						{
							szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
							szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
							szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
							szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
							szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
							szItem = ((pDatabaseTCPacketParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == 0) ? (((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pDatabaseTCPacketParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
						{
							szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
							szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
							szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
							szItem = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
						{
							if ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0)
							{
								szItem = pDatabaseTCPacketParameter->GetConstValueAsText();
								break;
							}
							for (szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERAUTOVALUE_NONE); !pDatabaseTCPacketParameter->GetConstValueAsText().IsEmpty(); )
							{
								szItem.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERAUTOVALUE_FORMAT), (LPCTSTR)pDatabaseTCPacketParameter->GetConstValueAsText());
								break;
							}
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG); )
						{
							szItem = ((pDatabaseTCPacketParameter->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
						{
							if (CheckTCParameterOolStatus(pDatabaseTCPacketParameter, nOolStatus))
							{
								if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_SOFTLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_HARDLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_DELTALIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_VALUELIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_TIMELIMIT);
									break;
								}
								szItem = (!pDatabaseTCPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NONE) : ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOTIME) : EMPTYSTRING);
								break;
							}
							szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_FAILURE);
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nCount, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nCount, nColumn, szItem);
						nCount = (nColumn == nColumns - 1) ? (nCount + 1) : nCount;
					}
				}
			}
			for (nElement = 0, nElements = (INT)cDatabaseTCFunction.GetSize(); nElement < nElements; nElement++)
			{
				if ((pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(nElement)) != (CDatabaseTCFunctionElement *)NULL)
				{
					for (nItem = 0, nItems = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST, LVM_GETITEMCOUNT); nItem < nItems; nItem++)
					{
						if (_ttoi(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET)))) > 8 * pDatabaseTCFunctionElement->GetBytePos() + pDatabaseTCFunctionElement->GetBitPos()) break;
						continue;
					}
					for (nColumn = 0, nColumns = ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) != TCPARAMETER_TYPE_CONSTANT || IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWALL)) ? (INT)m_szColumns.GetSize() : 0; nColumn < nColumns; nColumn++)
					{
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG); )
						{
							szItem = pDatabaseTCFunctionElement->GetName();
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION); )
						{
							szItem = pDatabaseTCFunctionElement->GetDescription();
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))
						{
							szItem = ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NONE) || (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_DISABLED)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) : EMPTYSTRING;
							szItem = ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCFunctionElement->GetName())))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) : szItem;
							szItem = ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && ((pDatabaseTCParameter = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCFunctionElement->GetName())))) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_STATUS) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET); )
						{
							szItem = cStringTools.ConvertIntToString(8 * pDatabaseTCFunctionElement->GetBytePos() + pDatabaseTCFunctionElement->GetBitPos());
							break;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH); )
						{
							szItem = (pDatabaseTCFunctionElement->GetWidth() > 0) ? cStringTools.ConvertIntToString(pDatabaseTCFunctionElement->GetWidth()) : EMPTYSTRING;
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING))
						{
							szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN) : EMPTYSTRING;
							szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_SIGNEDINTEGER) : szItem;
							szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : szItem;
							szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_FLOATINGPOINT) : szItem;
							szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_DATETIME) : szItem;
							szItem = ((pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == 0) ? (((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) || (pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) == 0) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_UNSIGNEDINTEGER) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUECODING_BITPATTERN)) : szItem;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX))
						{
							szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_BINARY) : EMPTYSTRING;
							szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_OCTAL) : szItem;
							szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_DECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_DECIMAL) : szItem;
							szItem = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUERADIX_HEXADECIMAL) : szItem;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE); )
						{
							if ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0)
							{
								szItem = pDatabaseTCFunctionElement->GetConstValueAsText();
								break;
							}
							for (szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERAUTOVALUE_NONE); !pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty(); )
							{
								szItem.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERAUTOVALUE_FORMAT), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
								break;
							}
							break;
						}
						if (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG))
						{
							szItem = ((pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_AUTO)) == TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC));
							szItem += (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_FORMAL) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_FORMAL) : EMPTYSTRING;
						}
						for (; m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK); )
						{
							if (CheckTCParameterOolStatus(pDatabaseTCFunctionElement, nOolStatus))
							{
								if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_SOFTLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_HARDLIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_DELTALIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_VALUELIMIT);
									break;
								}
								if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
								{
									szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_TIMELIMIT);
									break;
								}
								szItem = (!pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NONE) : ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOTIME) : EMPTYSTRING);
								break;
							}
							szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_FAILURE);
							break;
						}
						if (!nColumn)
						{
							Listview_InsertText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nItem, szItem);
							continue;
						}
						Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nItem, nColumn, szItem);
					}
				}
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LOADVALUES)->EnableWindow((cDatabaseTCFunction.GetParameterSets(szSets) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		}
		break;
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE)->SetWindowText(EMPTYSTRING), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SETVALUE)->EnableWindow(FALSE), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWALL)->EnableWindow(); SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST, LVM_GETITEMCOUNT) > 0; )
	{
		Listview_SetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), 0);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE_STATIC)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE)->EnableWindow();
		return;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_REMARK)->ShowWindow(SW_HIDE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_REMARK)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE)->EnableWindow(FALSE);
}

VOID CTCProcedurePropertiesSendTCSequenceDialog::EvaluateParameters()
{
	INT  nEntry;
	INT  nEntries;
	INT  nElement;
	INT  nElements;
	INT  nFunction;
	INT  nFunctions;
	INT  nParameter;
	INT  nParameters;
	CTMEnvironment  cTMEnvironment;
	CTCEnvironment  cTCEnvironment;
	CTCProcessEngine  cTCProcessEngine;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCPackets  pDatabaseTCPackets;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCFunctions  pDatabaseTCFunctions;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if ((pStep = GetStep()))
	{
		if (cTMEnvironment.Create(GetDatabase()))
		{
			if (cTCEnvironment.Create(GetDatabase()))
			{
				if (cTCProcessEngine.Open(GetDatabase(), GetAccountSpacecraftName(), &cTCEnvironment))
				{
					for (nEntry = 0, nEntries = pStep->GetSize(); nEntry < nEntries; nEntry++)
					{
						if ((pEntry = pStep->GetAt(nEntry)) && pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
						{
							for (nElement = 0, nElements = (INT)cDatabaseTCFunction.GetSize(); nElement < nElements; nElement++)
							{
								if ((pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(nElement)) && pDatabaseTCFunctionElement->GetName().IsEmpty() && !pDatabaseTCFunctionElement->HasConstValue())
								{
									if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY)
									{
										pDatabaseTCFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCFunctionElement->GetConstValueAsText(), 2)));
										continue;
									}
									if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL)
									{
										pDatabaseTCFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCFunctionElement->GetConstValueAsText(), 8)));
										continue;
									}
									if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL)
									{
										pDatabaseTCFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCFunctionElement->GetConstValueAsText(), 16)));
										continue;
									}
									if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
									{
										pDatabaseTCFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCFunctionElement->GetAttributes(), CDatabaseEngine::ParseValue(pDatabaseTCFunctionElement->GetConstValueAsText())));
										continue;
									}
									if ((pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0)
									{
										pDatabaseTCFunctionElement->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCFunctionElement->GetConstValueAsText(), 10)));
										continue;
									}
								}
							}
							for (nParameter = 0, nParameters = (INT)cDatabaseTCPacket.GetSize(); nParameter < nParameters; nParameter++)
							{
								if ((pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(nParameter)) && pDatabaseTCPacketParameter->GetTag().IsEmpty() && !pDatabaseTCPacketParameter->HasConstValue())
								{
									if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY)
									{
										pDatabaseTCPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCPacketParameter->GetAttributes(), pDatabaseTCPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCPacketParameter->GetConstValueAsText(), 2)));
										continue;
									}
									if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL)
									{
										pDatabaseTCPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCPacketParameter->GetAttributes(), pDatabaseTCPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCPacketParameter->GetConstValueAsText(), 8)));
										continue;
									}
									if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL)
									{
										pDatabaseTCPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCPacketParameter->GetAttributes(), pDatabaseTCPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCPacketParameter->GetConstValueAsText(), 16)));
										continue;
									}
									if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
									{
										pDatabaseTCPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCPacketParameter->GetAttributes(), CDatabaseEngine::ParseValue(pDatabaseTCPacketParameter->GetConstValueAsText())));
										continue;
									}
									if ((pDatabaseTCPacketParameter->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0)
									{
										pDatabaseTCPacketParameter->SetConstValue(CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pDatabaseTCPacketParameter->GetAttributes(), pDatabaseTCPacketParameter->GetWidth(), CDatabaseEngine::ParseValue(pDatabaseTCPacketParameter->GetConstValueAsText(), 10)));
										continue;
									}
								}
							}
							for (nFunction = 0, nFunctions = (cTCProcessEngine.GenerateTCPackets(GetDatabase(), &cDatabaseTCFunction, &cDatabaseTCPacket, &cTMEnvironment, &cTCEnvironment, pEntry->GetMemoryPatch(), (pEntry->GetExecutionTime() > 0 || pEntry->GetExecutionDeltaTime() > 0) ? TRUE : FALSE, FALSE, FALSE, TRUE, pDatabaseTCFunctions, pDatabaseTCPackets) >= 0) ? (INT)pDatabaseTCFunctions.GetSize() : 0; nFunction < nFunctions; nFunction++)
							{
								if ((pDatabaseTCFunction = pDatabaseTCFunctions.GetAt(nFunction)) && pDatabaseTCFunction->GetName() == cDatabaseTCFunction.GetName())
								{
									pEntry->SetFunction(pDatabaseTCFunction, pDatabaseTCPackets.GetAt(nFunction));
									break;
								}
							}
						}
					}
					cTCProcessEngine.Close();
				}
				cTCEnvironment.Destroy();
			}
			cTMEnvironment.Destroy();
		}
	}
}

BOOL CTCProcedurePropertiesSendTCSequenceDialog::CheckTCExecutionType(ULONGLONG nAttributes) CONST
{
	return((nAttributes & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesSendTCSequenceDialog::CheckTCExecutionTime(CONST CTCProcedureDocumentSendTCFunctionItem *pEntry, CONST CTimeTag &tExecutionTime) CONST
{
	CTCEnvironment  cTCEnvironment;
	CTCProcessEngine  cTCProcessEngine;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;

	if (cTCProcessEngine.Open(GetDatabase(), GetAccountSpacecraftName(), &cTCEnvironment))
	{
		for (pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket); cTCProcessEngine.CheckTCFunctionExecutionTime(&cDatabaseTCFunction, &cDatabaseTCPacket, tExecutionTime); )
		{
			cTCProcessEngine.Close();
			return TRUE;
		}
		cTCProcessEngine.Close();
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesSendTCSequenceDialog::CheckTCParameterOolStatus(CONST CDatabaseTCParameter *pDatabaseTCParameter, BYTE &nStatus) CONST
{
	CTimeTag  tTime[2];
	ULONGLONG  nValue;
	CTimeSpan  tMinOffset;
	CTimeSpan  tMaxOffset;
	CTCParameter  cTCParameter;
	CDatabaseTCParameter  cParameter;
	CTCProcessEngine  cTCProcessEngine;
	CTCEnvironment  cTCEnvironment;

	if (cTCProcessEngine.Open(GetDatabase(), GetAccountSpacecraftName(), &cTCEnvironment))
	{
		for (nStatus = TCPARAMETER_STATUS_NONE; !pDatabaseTCParameter->GetConstValueAsText().IsEmpty(); )
		{
			if ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) || GetDatabase()->TranslateTCParameterConstTime(pDatabaseTCParameter->GetAttributes(), pDatabaseTCParameter->GetConstValueAsText()) > 0)
			{
				nStatus = (!pDatabaseTCParameter->GetConstValueAsText().IsEmpty()) ? (((tTime[0] = GetDatabase()->TranslateTCParameterConstTime(pDatabaseTCParameter->GetAttributes(), pDatabaseTCParameter->GetConstValueAsText())) <= 0 || tTime[0] <= tTime[1]) ? TCPARAMETER_STATUS_TIMELIMIT : TCPARAMETER_STATUS_NOLIMIT) : TCPARAMETER_STATUS_NONE;
				cTCProcessEngine.Close();
				return TRUE;
			}
			if (cParameter.Copy(pDatabaseTCParameter))
			{
				for (cTCParameter.SetTag(pDatabaseTCParameter->GetTag()), cTCParameter.SetAttributes(((pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_VTYPE_CUSTOM)) != TCPARAMETER_VTYPE_CALIBRATED) ? ((pDatabaseTCParameter->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_VTYPE_CUSTOM | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE) : pDatabaseTCParameter->GetAttributes()), cParameter.SetAttributes(cTCParameter.GetAttributes()), nStatus = TCPARAMETER_STATUS_VALUELIMIT; cTCProcessEngine.ConvertTCParameterValue(GetDatabase(), &cParameter, nValue); )
				{
					nStatus = cTCProcessEngine.CheckTCParameterOolStatus(GetDatabase(), &cParameter, &cTCParameter, nValue);
					break;
				}
				break;
			}
			cTCProcessEngine.Close();
			return FALSE;
		}
		cTCProcessEngine.Close();
		return TRUE;
	}
	return FALSE;
}
BOOL CTCProcedurePropertiesSendTCSequenceDialog::CheckTCParameterOolStatus(CONST CDatabaseTCFunctionElement *pDatabaseTCFunctionElement, BYTE &nStatus) CONST
{
	CTimeTag  tTime[2];
	ULONGLONG  nValue;
	CTCParameter  cTCParameter;
	CTCEnvironment  cTCEnvironment;
	CTCProcessEngine  cTCProcessEngine;
	CDatabaseTCParameter  *pDatabaseTCParameter[2];

	if (cTCProcessEngine.Open(GetDatabase(), GetAccountSpacecraftName(), &cTCEnvironment))
	{
		for (nStatus = TCPARAMETER_STATUS_NONE; (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) || GetDatabase()->TranslateTCFunctionElementConstTime(pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetConstValueAsText()) > 0; )
		{
			nStatus = (!pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty()) ? (((tTime[0] = GetDatabase()->TranslateTCFunctionElementConstTime(pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetConstValueAsText())) <= 0 || tTime[0] <= tTime[1]) ? TCPARAMETER_STATUS_TIMELIMIT : TCPARAMETER_STATUS_NOLIMIT) : TCPARAMETER_STATUS_NONE;
			cTCProcessEngine.Close();
			return TRUE;
		}
		if ((pDatabaseTCParameter[0] = new CDatabaseTCParameter))
		{
			if ((pDatabaseTCParameter[1] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCFunctionElement->GetName()))) && (pDatabaseTCParameter[1]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == (pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) && !pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty() && pDatabaseTCParameter[0]->Copy(pDatabaseTCParameter[1]))
			{
				for (pDatabaseTCParameter[0]->SetAttributes(pDatabaseTCFunctionElement->GetAttributes()), pDatabaseTCParameter[0]->SetConstValueAsText(pDatabaseTCFunctionElement->GetConstValueAsText()), cTCParameter.SetTag(pDatabaseTCFunctionElement->GetName()), cTCParameter.SetAttributes(pDatabaseTCFunctionElement->GetAttributes()), nStatus = TCPARAMETER_STATUS_VALUELIMIT; cTCProcessEngine.ConvertTCParameterValue(GetDatabase(), pDatabaseTCParameter[0], nValue); )
				{
					nStatus = cTCProcessEngine.CheckTCParameterOolStatus(GetDatabase(), pDatabaseTCParameter[0], &cTCParameter, nValue);
					break;
				}
			}
			delete pDatabaseTCParameter[0];
			cTCProcessEngine.Close();
			return TRUE;
		}
		cTCProcessEngine.Close();
	}
	return FALSE;
}
BOOL CTCProcedurePropertiesSendTCSequenceDialog::CheckTCParameterOolStatus(CONST CDatabaseTCPacketParameter *pDatabaseTCPacketParameter, BYTE &nStatus) CONST
{
	CTimeTag  tTime[2];
	ULONGLONG  nValue;
	CTCParameter  cTCParameter;
	CTCEnvironment  cTCEnvironment;
	CTCProcessEngine  cTCProcessEngine;
	CDatabaseTCParameter  *pDatabaseTCParameter[2];

	if (cTCProcessEngine.Open(GetDatabase(), GetAccountSpacecraftName(), &cTCEnvironment))
	{
		for (nStatus = TCPARAMETER_STATUS_NONE; (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) || GetDatabase()->TranslateTCPacketParameterConstTime(pDatabaseTCPacketParameter->GetAttributes(), pDatabaseTCPacketParameter->GetConstValueAsText()) > 0; )
		{
			nStatus = (!pDatabaseTCPacketParameter->GetConstValueAsText().IsEmpty()) ? (((tTime[0] = GetDatabase()->TranslateTCPacketParameterConstTime(pDatabaseTCPacketParameter->GetAttributes(), pDatabaseTCPacketParameter->GetConstValueAsText())) <= 0 || tTime[0] <= tTime[1]) ? TCPARAMETER_STATUS_TIMELIMIT : TCPARAMETER_STATUS_NOLIMIT) : TCPARAMETER_STATUS_NONE;
			cTCProcessEngine.Close();
			return TRUE;
		}
		if ((pDatabaseTCParameter[0] = new CDatabaseTCParameter))
		{
			if ((pDatabaseTCParameter[1] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCPacketParameter->GetTag()))) && (pDatabaseTCParameter[1]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == (pDatabaseTCPacketParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) && !pDatabaseTCPacketParameter->GetConstValueAsText().IsEmpty() && pDatabaseTCParameter[0]->Copy(pDatabaseTCParameter[1]))
			{
				for (pDatabaseTCParameter[0]->SetAttributes(pDatabaseTCPacketParameter->GetAttributes()), pDatabaseTCParameter[0]->SetConstValueAsText(pDatabaseTCPacketParameter->GetConstValueAsText()), cTCParameter.SetTag(pDatabaseTCPacketParameter->GetTag()), cTCParameter.SetAttributes(pDatabaseTCPacketParameter->GetAttributes()), nStatus = TCPARAMETER_STATUS_VALUELIMIT; cTCProcessEngine.ConvertTCParameterValue(GetDatabase(), pDatabaseTCParameter[0], nValue); )
				{
					nStatus = cTCProcessEngine.CheckTCParameterOolStatus(GetDatabase(), pDatabaseTCParameter[0], &cTCParameter, nValue);
					break;
				}
			}
			delete pDatabaseTCParameter[0];
			cTCProcessEngine.Close();
			return TRUE;
		}
		cTCProcessEngine.Close();
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesSendTCSequenceDialog::CheckTCVerificationStage(UINT nStage) CONST
{
	INT  nParameter;
	INT  nParameters;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;
	CDatabaseTCExeVerGroupParameter  *pDatabaseTCExeVerGroupParameter;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY)->SendMessage(CB_GETCURSEL))))
		{
			if (!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREEXEVERIFICATION))
			{
				if ((pDatabaseTCExeVerGroup = (pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket)) ? GetDatabase()->GetTCExeVerGroups()->GetAt(GetDatabase()->GetTCExeVerGroups()->Find(cDatabaseTCFunction.GetExeVerGroup())) : (CDatabaseTCExeVerGroup *)NULL))
				{
					for (nParameter = 0, nParameters = (INT)pDatabaseTCExeVerGroup->GetSize(); nParameter < nParameters; nParameter++)
					{
						if ((pDatabaseTCExeVerGroupParameter = pDatabaseTCExeVerGroup->GetAt(nParameter)))
						{
							if (pDatabaseTCExeVerGroupParameter->GetStage() == nStage) break;
							continue;
						}
					}
					return((nParameter < nParameters) ? TRUE : FALSE);
				}
				return FALSE;
			}
			return((!pEntry->GetExecutionVerificationCondition().IsEmpty() && nStage == TCVERIFICATIONSTAGE_COMPLETION) ? TRUE : FALSE);
		}
	}
	return((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION)->GetWindowTextLength() > 0 && nStage == TCVERIFICATIONSTAGE_COMPLETION) ? TRUE : FALSE);
}

INT CTCProcedurePropertiesSendTCSequenceDialog::FindColumnIndex(LPCTSTR pszColumn) CONST
{
	INT  nColumn;
	INT  nColumns;

	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(); nColumn < nColumns; nColumn++)
	{
		if (m_szColumns.GetAt(nColumn) == pszColumn) break;
		continue;
	}
	return((nColumn < nColumns) ? nColumn : -1);
}

VOID CTCProcedurePropertiesSendTCSequenceDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_NAME, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_DESCRIPTION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATTIME, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASETIME, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATOFFSET, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEOFFSET, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATTIME, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONTIME, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATOFFSET, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONOFFSET, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_FIRSTSTEP, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_SECONDSTEP, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEASGROUP, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREPREEXEVERIFICATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_PREEXEVERIFICATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREEXEVERIFICATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_CRITICAL, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_AUTHORIZATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_ACCEPTANCE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_START, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_PROGRESS, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_COMPLETION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_NOEXTRAPOLATION, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE, bCheck);
}

BOOL CTCProcedurePropertiesSendTCSequenceDialog::IsModified() CONST
{
	CTCProcedureDocumentSendTCSequenceItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[1]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesSendTCSequenceDialog::Check(BOOL bModified) CONST
{
	INT  nEntry[2];
	INT  nEntries[2];
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	BYTE  nOolStatus;
	CString  szName;
	CString  szEntry;
	CTimeTag  tReleaseTime[2];
	CTimeTag  tExecutionTime[2];
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if ((pStep = GetStep()))
	{
		for (nEntry[0] = 0, nEntries[0] = pStep->GetSize(); nEntry[0] < nEntries[0]; nEntry[0]++)
		{
			if ((pEntry = pStep->GetAt(nEntry[0])) && pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
			{
				for (nElement = 0, nElements = (INT)cDatabaseTCFunction.GetSize(); nElement < nElements; nElement++)
				{
					if ((pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(nElement)))
					{
						if (!pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty())
						{
							if (pDatabaseTCFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER)
							{
								if (CheckTCParameterOolStatus(pDatabaseTCFunctionElement, nOolStatus))
								{
									if (nOolStatus == TCPARAMETER_STATUS_NONE) continue;
									if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
								}
								break;
							}
							if (pDatabaseTCFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT) continue;
						}
						if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) continue;
					}
					break;
				}
				for (nParameter = 0, nParameters = (INT)cDatabaseTCPacket.GetSize(); nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(nParameter)))
					{
						if (!pDatabaseTCPacketParameter->GetConstValueAsText().IsEmpty())
						{
							if (pDatabaseTCPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE)
							{
								if (CheckTCParameterOolStatus(pDatabaseTCPacketParameter, nOolStatus))
								{
									if (nOolStatus == TCPARAMETER_STATUS_NONE) continue;
									if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT) continue;
								}
								break;
							}
							if (pDatabaseTCPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_FIXED) continue;
						}
						if ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) || (pDatabaseTCPacketParameter->GetAttributes() & (TCPACKETPARAMETER_TYPE_APID | TCPACKETPARAMETER_TYPE_SERVICETYPE | TCPACKETPARAMETER_TYPE_SERVICESUBTYPE | TCPACKETPARAMETER_TYPE_ACKNOWLEDGEMENTFLAGS | TCPACKETPARAMETER_TYPE_OTHER))) continue;
					}
					break;
				}
				if (nElement == nElements  &&  nParameter == nParameters) continue;
			}
			break;
		}
		for (nEntry[1] = 0, nEntries[1] = nEntries[0], tReleaseTime[0] = tReleaseTime[1] = 0, tExecutionTime[0] = 0; nEntry[1] < nEntries[1]; nEntry[1]++)
		{
			if ((pEntry = pStep->GetAt(nEntry[1])) != (CTCProcedureDocumentSendTCFunctionItem *)NULL)
			{
				if (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATTIME)
				{
					if (pEntry->GetReleaseTime() < tReleaseTime[1] || pEntry->GetReleaseTime() <= tExecutionTime[1] || (tReleaseTime[0] == 0 && nEntry[1] > 0)) break;
					tReleaseTime[0] = (!nEntry[1]) ? pEntry->GetReleaseTime() : tReleaseTime[0];
					tReleaseTime[1] = pEntry->GetReleaseTime();
				}
				if (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATTIME)
				{
					if (((pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATTIME) && pEntry->GetExecutionTime() <= tReleaseTime[1]) || ((pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATOFFSET) && tReleaseTime[0] > 0 && pEntry->GetExecutionTime().GetTime() <= tReleaseTime[0].GetTime() + 1000 * (TIMETAG)pEntry->GetReleaseDeltaTime()) || !CheckTCExecutionTime(pEntry, pEntry->GetExecutionTime()) || pEntry->GetExecutionTime() <= tExecutionTime[1]) break;
					tExecutionTime[0] = (!nEntry[1]) ? pEntry->GetExecutionTime() : tExecutionTime[0];
				}
				if (pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATOFFSET)
				{
					if (((pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATTIME) && ((!pEntry->IsEarlierExecutionDeltaTime() && tExecutionTime[0].GetTime() + 1000 * (TIMETAG)pEntry->GetExecutionDeltaTime() <= tReleaseTime[1].GetTime()) || (pEntry->IsEarlierExecutionDeltaTime() && tExecutionTime[0].GetTime() - 1000 * (TIMETAG)pEntry->GetExecutionDeltaTime() <= tReleaseTime[1].GetTime()))) || ((pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATOFFSET) && ((tReleaseTime[0] > 0 && tExecutionTime[0] > 0 && ((!pEntry->IsEarlierExecutionDeltaTime() && tExecutionTime[0].GetTime() + 1000 * (TIMETAG)pEntry->GetExecutionDeltaTime() <= tReleaseTime[0].GetTime() + 1000 * (TIMETAG)pEntry->GetReleaseDeltaTime()) || (pEntry->IsEarlierExecutionDeltaTime() && tExecutionTime[0].GetTime() - 1000 * (TIMETAG)pEntry->GetExecutionDeltaTime() <= tReleaseTime[0].GetTime() + 1000 * (TIMETAG)pEntry->GetReleaseDeltaTime()))) || (tReleaseTime[0] == 0 && tExecutionTime[0] == 0 && pEntry->GetReleaseDeltaTime() >= pEntry->GetExecutionDeltaTime())))) break;
					continue;
				}
			}
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_NAME)->GetWindowText(szName);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY)->GetWindowText(szEntry);
		return((!szName.IsEmpty() && !szEntry.IsEmpty() && nEntry[0] == nEntries[0] && nEntry[1] == nEntries[1]) ? (!bModified || IsModified()) : FALSE);
	}
	return FALSE;
}

void CTCProcedurePropertiesSendTCSequenceDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesSendTCSequenceDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesSendTCSequenceDialog::PostNcDestroy()
{
	m_szColumns.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesSendTCSequenceDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesSendTCSequenceDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATTIME, OnReleaseAtTime)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATOFFSET, OnReleaseAtOffset)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATTIME, OnExecuteAtTime)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATOFFSET, OnExecuteAtOffset)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_FIRSTSTEP, OnSendAsFirstStep)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_SECONDSTEP, OnSendAsSecondStep)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEASGROUP, OnReleaseAsGroup)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREPREEXEVERIFICATION, OnIgnorePreexecutionVerification)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREEXEVERIFICATION, OnIgnoreExecutionVerification)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_CRITICAL, OnCritical)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_AUTHORIZATION, OnAuthorization)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_ACCEPTANCE, OnAcknowledgeAtAcceptance)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_START, OnAcknowledgeAtStart)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_PROGRESS, OnAcknowledgeAtProgress)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_COMPLETION, OnAcknowledgeAtCompletion)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWFORMALLIST, OnShowFormalParameters)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_NOEXTRAPOLATION, OnNoExtrapolation)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWALL, OnShowAll)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SETVALUE, OnSetParameterValue)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LOADVALUES, OnLoadParameterValues)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_HELP, OnHelp)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_NAME, OnSelchangeSequence)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, OnSelchangeSequenceEntry)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_DESCRIPTION, OnEditchangeDescription)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_PREEXEVERIFICATION, OnEditchangePreexecutionCondition)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION, OnEditchangeExecutionCondition)
	ON_CONTROL(EN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE, OnEditchangeParameterValue)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASETIME, OnSpinchangeReleaseTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEOFFSET, OnSpinchangeReleaseOffset)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONTIME, OnSpinchangeExecutionTime)
	ON_CONTROL(TSBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONOFFSET, OnSpinchangeExecutionOffset)
	ON_CONTROL(SBXN_CHANGE, IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW, OnSpinchangeTimeWindow)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesSendTCSequenceDialog message handlers

BOOL CTCProcedurePropertiesSendTCSequenceDialog::OnInitDialog()
{
	INT  nColumn;
	INT  nColumns;
	CRect  rColumns;
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST)->GetClientRect(rColumns);
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_CODING));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_RADIX));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG));
	m_szColumns.Add(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK));
	for (EnumTCSequences(), Timespinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONOFFSET), CTimeKey(TCPROCEDUREPROPERTIESSENDTCSEQUENCESTEP_MINIMUMEXECUTIONTIMEOFFSET), CTimeKey(TCPROCEDUREPROPERTIESSENDTCSEQUENCESTEP_MAXIMUMEXECUTIONTIMEOFFSET)), Spinbox_SetRange(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW), TCPROCEDUREPROPERTIESSENDTCSEQUENCESTEP_MINIMUMTIMEWINDOW, TCPROCEDUREPROPERTIESSENDTCSEQUENCESTEP_MAXIMUMTIMEWINDOW), GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	for (nColumn = 0, nColumns = (INT)m_szColumns.GetSize(), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST, LVM_SETEXTENDEDLISTVIEWSTYLE, LVS_EX_FULLROWSELECT, LVS_EX_FULLROWSELECT); nColumn < nColumns; nColumn++)
	{
		Listview_InsertColumn(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nColumn, m_szColumns.GetAt(nColumn), (m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG)) ? (rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_DESCRIPTION)) ? (2 * rColumns.Width() / 5) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)) ? (rColumns.Width() / 7) : ((m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET) || m_szColumns.GetAt(nColumn) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITLENGTH)) ? (rColumns.Width() / 9) : (9 * rColumns.Width() / 35)))));
		continue;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_NAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_NAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_DESCRIPTION_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_DESCRIPTION)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWALL)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

BOOL CTCProcedurePropertiesSendTCSequenceDialog::OnNotify(WPARAM wParam, LPARAM lParam, LRESULT *pResult)
{
	CString  szTag;
	CString  szType;
	CString  szFlag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CTCProcedurePropertiesSendTCFunctionParametersDialog  cParametersDialog;
	NMITEMACTIVATE  *pNotifyListView = (LPNMITEMACTIVATE)lParam;

	if (pNotifyListView->hdr.idFrom == IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST)
	{
		if ((pNotifyListView->hdr.code == NM_CLICK || pNotifyListView->hdr.code == NM_DBLCLK) && pNotifyListView->iItem < 0)
		{
			Listview_SetCurText(GetDlgItem((INT)pNotifyListView->hdr.idFrom), (INT)SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1);
			SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_ENSUREVISIBLE, SendDlgItemMessage((INT)pNotifyListView->hdr.idFrom, LVM_GETITEMCOUNT) - 1, MAKELPARAM(FALSE, 0));
			return TRUE;
		}
		if ((pEntry = ((pStep = (pNotifyListView->hdr.code == LVN_ITEMCHANGED && (pNotifyListView->uNewState & LVIS_SELECTED)) ? GetStep() : (CTCProcedureDocumentSendTCSequenceItem *)NULL)) ? pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL)) : (CTCProcedureDocumentSendTCFunctionItem *)NULL) && pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
		{
			for (szTag = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szType = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))), szFlag = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), AccessControl(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE, (!szType.IsEmpty() && szFlag != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED)) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE); (pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(cDatabaseTCFunction.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8))); )
			{
				CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_NOEXTRAPOLATION, ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) && !IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWFORMALLIST)) ? TRUE : FALSE);
				break;
			}
			for (; (pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(cDatabaseTCPacket.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8))); )
			{
				CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_NOEXTRAPOLATION, ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) && !IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWFORMALLIST)) ? TRUE : FALSE);
				break;
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE)->SetWindowText(Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))));
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_REMARK)->ShowWindow((szType != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) && !IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWFORMALLIST)) ? SW_SHOW : SW_HIDE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_REMARK)->EnableWindow((szType != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) && !IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWFORMALLIST)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_NOEXTRAPOLATION)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_NUMERICAL) && !IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWFORMALLIST)) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SETVALUE)->EnableWindow(FALSE);
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE, EM_SETSEL);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST)->SetFocus();
		}
		if ((pEntry = ((pStep = (pNotifyListView->hdr.code == NM_DBLCLK  &&  Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TYPE))) != STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUETYPE_RAW) && !IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWFORMALLIST)) ? GetStep() : (CTCProcedureDocumentSendTCSequenceItem *)NULL)) ? pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL)) : (CTCProcedureDocumentSendTCFunctionItem *)NULL) && pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
		{
			if (cParametersDialog.Create(this, cDatabaseTCFunction.GetName(), Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), pNotifyListView->iItem, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szValue) && !szValue.IsEmpty() && CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE))
			{
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue  &&  !szValue.IsEmpty()) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE)->SetWindowText(szValue);
				SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE, EM_SETSEL, 0, -1);
				GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE)->SetFocus();
			}
		}
	}
	return CDisplayDialog::OnNotify(wParam, lParam, pResult);
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnReleaseAtTime()
{
	CTimeTag  tReleaseTime;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))))
		{
			pEntry->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATTIME)) ? ((pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATOFFSET) | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATTIME) : (pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATTIME));
			pEntry->SetReleaseTime((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATTIME)) ? (tReleaseTime.GetTime() + 1000000 * (TIMETAG)TCPROCEDUREPROPERTIESSENDTCSEQUENCESTEP_DEFAULTRELEASETIMEOFFSET) : 0);
			pEntry->SetReleaseDeltaTime(0);
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATOFFSET, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASETIME)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATTIME));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEOFFSET)->EnableWindow(FALSE);
	for (ShowParameters(); IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATTIME); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASETIME), CTimeKey(tReleaseTime.GetTimeInSeconds() + TCPROCEDUREPROPERTIESSENDTCSEQUENCESTEP_DEFAULTRELEASETIMEOFFSET));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASETIME)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASETIME)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnReleaseAtOffset()
{
	CTimeTag  tReleaseTime;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))))
		{
			pEntry->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATOFFSET)) ? ((pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATTIME) | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATOFFSET) : (pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATOFFSET));
			pEntry->SetReleaseDeltaTime((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATOFFSET)) ? (1000 * TCPROCEDUREPROPERTIESSENDTCSEQUENCESTEP_DEFAULTRELEASETIMEOFFSET) : 0);
			pEntry->SetReleaseTime(0);
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATTIME, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEOFFSET)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATOFFSET));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASETIME)->EnableWindow(FALSE);
	for (ShowParameters(); IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEATOFFSET); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEOFFSET), CTimeKey(TCPROCEDUREPROPERTIESSENDTCSEQUENCESTEP_DEFAULTRELEASETIMEOFFSET));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEOFFSET)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEOFFSET)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnExecuteAtTime()
{
	CTimeTag  tExecutionTime;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))))
		{
			pEntry->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATTIME)) ? ((pEntry->GetOptions() & ~(TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATOFFSET | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_FIRSTSTEP | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_SECONDSTEP)) | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATTIME) : (pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATTIME));
			pEntry->SetExecutionTime((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATTIME)) ? (tExecutionTime.GetTime() + 1000000 * (TIMETAG)TCPROCEDUREPROPERTIESSENDTCSEQUENCESTEP_DEFAULTRELEASETIMEOFFSET) : 0);
			pEntry->SetExecutionDeltaTime(0);
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_FIRSTSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_SECONDSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATOFFSET, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONTIME)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATTIME));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONOFFSET)->EnableWindow(FALSE);
	for (ShowParameters(); IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATTIME); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONTIME), CTimeKey(tExecutionTime.GetTimeInSeconds() + TCPROCEDUREPROPERTIESSENDTCSEQUENCESTEP_DEFAULTRELEASETIMEOFFSET));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONTIME)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONTIME)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnExecuteAtOffset()
{
	CTimeTag  tExecutionTime;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))))
		{
			pEntry->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATOFFSET)) ? ((pEntry->GetOptions() & ~(TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATTIME | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_FIRSTSTEP | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_SECONDSTEP)) | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATOFFSET) : (pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATOFFSET));
			pEntry->SetExecutionDeltaTime((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATOFFSET)) ? (1000 * TCPROCEDUREPROPERTIESSENDTCSEQUENCESTEP_DEFAULTRELEASETIMEOFFSET) : 0);
			pEntry->SetExecutionTime(0);
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_FIRSTSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_SECONDSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATTIME, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONOFFSET)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATOFFSET));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONTIME)->EnableWindow(FALSE);
	for (ShowParameters(); IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATOFFSET); )
	{
		Timespinbox_SetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONOFFSET), CTimeKey(TCPROCEDUREPROPERTIESSENDTCSEQUENCESTEP_DEFAULTEXECUTIONTIMEOFFSET));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONOFFSET)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONOFFSET)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnSendAsFirstStep()
{
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))))
		{
			for (pEntry->SetOptions((pEntry->GetOptions() & ~(TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATTIME | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATOFFSET | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_SECONDSTEP)) | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_FIRSTSTEP), pEntry->SetExecutionDeltaTime(0), pEntry->SetExecutionTime(0); pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket); )
			{
				cDatabaseTCFunction.SetAttributes((cDatabaseTCFunction.GetAttributes() & ~TCFUNCTION_EXETYPE_SECONDSTEP) | TCFUNCTION_EXETYPE_FIRSTSTEP);
				pEntry->SetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket);
				break;
			}
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_FIRSTSTEP, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_SECONDSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATTIME, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATOFFSET, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONOFFSET)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnSendAsSecondStep()
{
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))))
		{
			for (pEntry->SetOptions((pEntry->GetOptions() & ~(TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATTIME | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATOFFSET | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_FIRSTSTEP)) | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_SECONDSTEP), pEntry->SetExecutionDeltaTime(0), pEntry->SetExecutionTime(0); pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket); )
			{
				cDatabaseTCFunction.SetAttributes((cDatabaseTCFunction.GetAttributes() & ~TCFUNCTION_EXETYPE_FIRSTSTEP) | TCFUNCTION_EXETYPE_SECONDSTEP);
				pEntry->SetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket);
				break;
			}
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_FIRSTSTEP, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_SECONDSTEP, TRUE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATTIME, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTEATOFFSET, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONTIME)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONOFFSET)->EnableWindow(FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnReleaseAsGroup()
{
	UINT  nOptions;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))))
		{
			nOptions = (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEASGROUP)) ? (pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_GROUPED) : (pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_GROUPED);
			pEntry->SetOptions(nOptions);
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnIgnorePreexecutionVerification()
{
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))))
		{
			pEntry->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREPREEXEVERIFICATION)) ? (pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_IGNOREPREEXEVERIFICATION) : (pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_IGNOREPREEXEVERIFICATION));
			pEntry->SetPreexecutionVerificationCondition(EMPTYSTRING);
		}
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_PREEXEVERIFICATION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_PREEXEVERIFICATION)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREPREEXEVERIFICATION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnIgnoreExecutionVerification()
{
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))))
		{
			pEntry->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREEXEVERIFICATION)) ? (pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_IGNOREEXEVERIFICATION) : (pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_IGNOREEXEVERIFICATION));
			pEntry->SetOptions(pEntry->GetOptions() & ~(TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_ACCEPTANCE | TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_START | TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_PROGRESS | TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_COMPLETION));
			pEntry->SetExecutionVerificationCondition(EMPTYSTRING);
		}
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_ACCEPTANCE, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_START, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_PROGRESS, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_COMPLETION, FALSE);
	Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW), TCPROCEDUREPROPERTIESSENDTCSEQUENCESTEP_DEFAULTTIMEWINDOW);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_IGNOREEXEVERIFICATION));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW_SECONDS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_ACCEPTANCE)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_START)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_START));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_PROGRESS)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_COMPLETION)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnCritical()
{
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (; (pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))); )
		{
			pEntry->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_CRITICAL)) ? (pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_CRITICAL) : (pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_CRITICAL));
			break;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnAuthorization()
{
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (; (pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))); )
		{
			pEntry->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_AUTHORIZATION)) ? (pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_AUTHORIZATION) : (pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_AUTHORIZATION));
			break;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnAcknowledgeAtAcceptance()
{
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (; (pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))); )
		{
			pEntry->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_ACCEPTANCE)) ? (pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_ACCEPTANCE) : (pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_ACCEPTANCE));
			break;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnAcknowledgeAtStart()
{
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (; (pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))); )
		{
			pEntry->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_START)) ? (pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_START) : (pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_START));
			break;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnAcknowledgeAtProgress()
{
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (; (pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))); )
		{
			pEntry->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_PROGRESS)) ? (pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_PROGRESS) : (pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_PROGRESS));
			break;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnAcknowledgeAtCompletion()
{
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (; (pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))); )
		{
			pEntry->SetOptions((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_COMPLETION)) ? (pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_COMPLETION) : (pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_COMPLETION));
			break;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnShowFormalParameters()
{
	CHourglassCursor  cCursor;

	ShowParameters();
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnNoExtrapolation()
{
	INT  nIndex;
	CString  szTag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))))
		{
			if ((nIndex = (pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket)) ? Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST)) : -1) >= 0)
			{
				for (szTag = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))); (pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(cDatabaseTCFunction.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8))); )
				{
					pDatabaseTCFunctionElement->SetAttributes((IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_NOEXTRAPOLATION)) ? ((pDatabaseTCFunctionElement->GetAttributes() & ~TCPARAMETER_INTERPRETATION_EXTRAPOLATE) | TCPARAMETER_INTERPRETATION_FULL) : ((pDatabaseTCFunctionElement->GetAttributes() & ~TCPARAMETER_INTERPRETATION_FULL) | TCPARAMETER_INTERPRETATION_EXTRAPOLATE));
					break;
				}
				pEntry->SetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket);
			}
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnShowAll()
{
	CHourglassCursor  cCursor;

	ShowParameters();
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnSetParameterValue()
{
	INT  nBit;
	INT  nByte;
	INT  nIndex;
	INT  nEntry;
	INT  nEntries;
	INT  nElement;
	INT  nElements;
	INT  nParameter;
	INT  nParameters;
	BYTE  nOolStatus;
	BOOL  bOolStatus;
	CString  szTag;
	CString  szItem;
	CString  szFlag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCParameters  pDatabaseTCParameters;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))))
		{
			for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE)->GetWindowText(szValue); (nIndex = (!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWFORMALLIST) && pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket)) ? Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST)) : -1) >= 0; )
			{
				for (szTag = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), szFlag = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG))); (pDatabaseTCFunctionElement = ((pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) != TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) ? cDatabaseTCFunction.GetAt(cDatabaseTCFunction.Find(szTag, (nByte = _ttoi(szOffset) / 8), (nBit = _ttoi(szOffset) % 8))) : cDatabaseTCFunction.GetAt(cDatabaseTCFunction.Find(szTag))); )
				{
					for (pDatabaseTCFunctionElement->SetConstValueAsText(szValue), pDatabaseTCFunctionElement->SetConstValue(), pEntry->SetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket), EvaluateParameters(); (pDatabaseTCFunctionElement = (pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket)) ? cDatabaseTCFunction.GetAt(cDatabaseTCFunction.Find(szTag, nByte, nBit)) : (CDatabaseTCFunctionElement *)NULL); )
					{
						if (CheckTCParameterOolStatus(pDatabaseTCFunctionElement, nOolStatus))
						{
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_SOFTLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_HARDLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_DELTALIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_VALUELIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_TIMELIMIT);
								break;
							}
							szItem = (!pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NONE) : ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOTIME) : EMPTYSTRING);
							break;
						}
						szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_FAILURE);
						break;
					}
					szFlag = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : (((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC) : EMPTYSTRING));
					break;
				}
				if ((pDatabaseTCPacketParameter = ((pEntry->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) != TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) ? cDatabaseTCPacket.GetAt(cDatabaseTCPacket.Find(szTag, nByte, nBit)) : (CDatabaseTCPacketParameter *)NULL))
				{
					for (pDatabaseTCPacketParameter->SetConstValueAsText(szValue), pDatabaseTCPacketParameter->SetConstValue(), pEntry->SetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket), EvaluateParameters(); (pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(cDatabaseTCPacket.Find(szTag, nByte, nBit))); )
					{
						for (; (bOolStatus = CheckTCParameterOolStatus(pDatabaseTCPacketParameter, nOolStatus)); )
						{
							if ((nOolStatus & TCPARAMETER_STATUS_NOLIMIT) == TCPARAMETER_STATUS_NOLIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_SOFTLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_HARDLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_DELTALIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_VALUELIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_TIMELIMIT);
								break;
							}
							szItem = (!pDatabaseTCPacketParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NONE) : ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOTIME) : EMPTYSTRING);
							break;
						}
						szFlag = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_FIXED) : (((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) != TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_VARIABLE) : (((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == TCPARAMETER_VTYPE_AUTO) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERVALUEFLAG_AUTOMATIC) : EMPTYSTRING));
						szItem = (!bOolStatus) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_FAILURE) : szItem;
						break;
					}
				}
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_FLAG)), szFlag);
				Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK)), szItem);
				break;
			}
			if (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SHOWFORMALLIST))
			{
				for (nParameter = 0, nParameters = pStep->GetParameters(pDatabaseTCParameters), szTag = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST))), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))); nParameter < nParameters; nParameter++)
				{
					if ((pDatabaseTCParameter = pDatabaseTCParameters.GetAt(nParameter)) && pDatabaseTCParameter->GetTag() == szTag)
					{
						for (nEntry = 0, nEntries = (INT)pStep->GetSize(), pDatabaseTCParameter->SetConstValueAsText(szValue); nEntry < nEntries; nEntry++)
						{
							if ((pEntry = pStep->GetAt(nEntry)) && pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
							{
								if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_TYPE_NORMAL)
								{
									for (nElement = 0, nElements = (INT)cDatabaseTCFunction.GetSize(); nElement < nElements; nElement++)
									{
										if ((pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(nElement)))
										{
											if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_SEQUENCE)
											{
												if (pDatabaseTCFunctionElement->GetConstValueSource() == pDatabaseTCParameter->GetTag())
												{
													pDatabaseTCFunctionElement->SetConstValueAsText(pDatabaseTCParameter->GetConstValueAsText());
													continue;
												}
											}
											if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_FORMAL)
											{
												if (pDatabaseTCFunctionElement->GetConstValueSource() == pDatabaseTCParameter->GetTag())
												{
													pDatabaseTCFunctionElement->SetConstValueAsText(pDatabaseTCParameter->GetConstValueAsText());
													continue;
												}
											}
										}
									}
									pEntry->SetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket);
								}
							}
						}
						for (pStep->SetParameters(pDatabaseTCParameters); (bOolStatus = CheckTCParameterOolStatus(pDatabaseTCParameter, nOolStatus)); )
						{
							if (nOolStatus == TCPARAMETER_STATUS_NOLIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_SOFTLIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_SOFTLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_HARDLIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_HARDLIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_DELTALIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_DELTALIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_VALUELIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_VALUELIMIT);
								break;
							}
							if (nOolStatus == TCPARAMETER_STATUS_TIMELIMIT)
							{
								szItem = STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_TIMELIMIT);
								break;
							}
							szItem = (!pDatabaseTCParameter->GetConstValueAsText().IsEmpty()) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NONE) : ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_NOTIME) : EMPTYSTRING);
							break;
						}
						Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_LIMITCHECK)), (szItem = (!bOolStatus) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERLIMITCHECK_FAILURE) : szItem));
						break;
					}
				}
			}
		}
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE)->GetWindowText(szValue); (nIndex = Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST))) >= 0; )
	{
		Listview_SetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), nIndex, FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE)), szValue);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SETVALUE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST)->SetFocus();
		break;
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnLoadParameterValues()
{
	INT  nParameter;
	INT  nParameters;
	CString  szParameterSet;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement[2];
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;
	CTCProcedurePropertiesSendTCFunctionParameterSetsDialog  cParameterSetsDialog;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))))
		{
			if (pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
			{
				if (cParameterSetsDialog.Create(this, &cDatabaseTCFunction, szParameterSet))
				{
					if ((pDatabaseTCFunction = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(cDatabaseTCFunction.GetName()))))
					{
						if ((pDatabaseTCParameterSet = GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(szParameterSet))))
						{
							for (nParameter = 0, nParameters = (INT)pDatabaseTCParameterSet->GetSize(); nParameter < nParameters; nParameter++)
							{
								if ((pDatabaseTCFunctionElement[0] = pDatabaseTCParameterSet->GetAt(nParameter)))
								{
									if ((pDatabaseTCFunctionElement[1] = cDatabaseTCFunction.GetAt(pDatabaseTCFunction->Find(pDatabaseTCFunctionElement[0]->GetName(), pDatabaseTCFunctionElement[0]->GetBytePos(), pDatabaseTCFunctionElement[0]->GetBitPos()))) && (pDatabaseTCFunctionElement[1]->GetAttributes() & TCPARAMETER_TYPE_CONSTANT) == 0)
									{
										pDatabaseTCFunctionElement[1]->SetAttributes((pDatabaseTCFunctionElement[1]->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
										pDatabaseTCFunctionElement[1]->SetConstValueAsText(pDatabaseTCFunctionElement[0]->GetConstValueAsText());
										pDatabaseTCFunctionElement[1]->SetConstValue(pDatabaseTCFunctionElement[0]->GetConstValue());
									}
								}
							}
						}
					}
					pEntry->SetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket);
					ShowParameters();
				}
			}
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnEditchangeDescription()
{
	CString  szDescription;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))))
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_DESCRIPTION)->GetWindowText(szDescription);
			pEntry->SetDescription(szDescription);
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnEditchangePreexecutionCondition()
{
	CString  szCondition;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))))
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_PREEXEVERIFICATION)->GetWindowText(szCondition);
			pEntry->SetPreexecutionVerificationCondition(szCondition);
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnEditchangeExecutionCondition()
{
	CString  szCondition;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))))
		{
			for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION)->GetWindowText(szCondition); pEntry->GetExecutionVerificationCondition().IsEmpty() && !szCondition.IsEmpty(); )
			{
				Spinbox_SetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW), TCPROCEDUREPROPERTIESSENDTCSEQUENCESTEP_DEFAULTTIMEWINDOW);
				pEntry->SetExecutionVerificationTimeWindow(TCPROCEDUREPROPERTIESSENDTCSEQUENCESTEP_DEFAULTTIMEWINDOW);
				break;
			}
			for (; !pEntry->GetExecutionVerificationCondition().IsEmpty() && szCondition.IsEmpty(); )
			{
				pEntry->SetExecutionVerificationTimeWindow(0);
				break;
			}
			pEntry->SetExecutionVerificationCondition(szCondition);
		}
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW_STATIC)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW_SECONDS)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION)->GetWindowTextLength() > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_STATIC)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_START) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS) || CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_ACCEPTANCE)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_ACCEPTANCE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_START)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_START));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_PROGRESS)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_PROGRESS));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ACKFLAG_COMPLETION)->EnableWindow(CheckTCVerificationStage(TCVERIFICATIONSTAGE_COMPLETION));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnEditchangeParameterValue()
{
	BOOL  bValue;
	CString  szTag;
	CString  szValue;
	CString  szOffset;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if ((pStep = GetStep()))
	{
		if ((pEntry = pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL))) && pEntry->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
		{
			for (szTag = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_TAG))), szOffset = Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_BITOFFSET))), bValue = FALSE; (pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(cDatabaseTCFunction.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8))); )
			{
				bValue = (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) ? TRUE : FALSE;
				break;
			}
			for (; (pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(cDatabaseTCPacket.Find(szTag, _ttoi(szOffset) / 8, _ttoi(szOffset) % 8))); )
			{
				bValue = (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) ? TRUE : FALSE;
				break;
			}
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_VALUE)->GetWindowText(szValue);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_SETVALUE)->EnableWindow((Listview_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST), Listview_GetCurText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_PARAMETERS_LIST)), FindColumnIndex(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_PARAMETERSTITLEITEM_VALUE))) != szValue && (!szValue.IsEmpty() || bValue)) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		}
	}
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnSelchangeSequence()
{
	INT  nPos;
	INT  nSet;
	INT  nSets;
	INT  nList;
	INT  nLists;
	INT  nElement;
	INT  nElements;
	INT  nEntry[3];
	INT  nEntries[3];
	INT  nParameter[2];
	INT  nParameters[2];
	BOOL  bSuccess;
	DWORD  dwDelta;
	CString  szName;
	CString  szFormat;
	CString  szMessage;
	CString  szMemoryPatch[2];
	CPtrArray  pParameterLists;
	CUIntArray  nParameterListIDs;
	CStringArray  szParameterSets;
	CDatabaseTCPacket  *pDatabaseTCPacket[2];
	CDatabaseTCFunction  *pDatabaseTCFunction[2];
	CDatabaseTCSequence  *pDatabaseTCSequence[3];
	CDatabaseTCProcedure  *pDatabaseTCProcedure;
	CDatabaseTCParameter  *pDatabaseTCParameter[2];
	CDatabaseTCParameters  pDatabaseTCParameters[2];
	CDatabaseTCParameters  *pDatabaseTCParameterList;
	CDatabaseTCParameterSet  *pDatabaseTCParameterSet;
	CDatabaseTCSequenceEntry  *pDatabaseTCSequenceEntry[4];
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement[2];
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CDatabaseOBProcessorMemoryImage  *pDatabaseOBProcessorMemoryImage;
	CDatabaseTCSequenceEntryParameter  *pDatabaseTCSequenceEntryParameter;
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if ((pStep = GetStep()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_NAME)->GetWindowText(szName), szFormat.Format(STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSTCSEQUENCE_FORMAT), EMPTYSTRING, EMPTYSTRING), pStep->RemoveAll(), bSuccess = TRUE; (pDatabaseTCSequence[1] = ((pDatabaseTCSequence[0] = new CDatabaseTCSequence)) ? GetDatabase()->GetTCSequences()->GetAt(GetDatabase()->GetTCSequences()->Find((szName = ((nPos = szName.Find(szFormat.GetAt(0))) >= 0) ? szName.Left(nPos) : szName))) : (CDatabaseTCSequence *)NULL) && pDatabaseTCSequence[0]->Copy(pDatabaseTCSequence[1]) && pDatabaseTCSequence[0]->GetParameters(pDatabaseTCParameters[0]) >= 0; )
		{
			if ((pDatabaseTCParameterList = new CDatabaseTCParameters))
			{
				if (pDatabaseTCParameterList->Copy(&pDatabaseTCParameters[0]))
				{
					pParameterLists.InsertAt(0, pDatabaseTCParameterList, 1);
					nParameterListIDs.InsertAt(0, (UINT)pParameterLists.GetUpperBound(), pDatabaseTCSequence[0]->GetSize());
					for (nEntry[0] = 0, nEntries[0] = (INT)pDatabaseTCSequence[0]->GetSize(), pStep->SetSequence(pDatabaseTCSequence[0]->GetName()), pStep->SetParameters(pDatabaseTCParameters[0]), dwDelta = 0; nEntry[0] < nEntries[0]; nEntry[0]++)
					{
						if ((pDatabaseTCSequenceEntry[0] = pDatabaseTCSequence[0]->GetAt(nEntry[0])) != (CDatabaseTCSequenceEntry *)NULL)
						{
							if (pDatabaseTCSequenceEntry[0]->GetAttributes() & (TCSEQUENCEENTRY_TYPE_FUNCTION | TCSEQUENCEENTRY_TYPE_SEQUENCE | TCSEQUENCEENTRY_TYPE_PROCEDURE))
							{
								if ((pDatabaseTCSequenceEntry[0]->GetAttributes() & (TCSEQUENCEENTRY_FLAG_BLOCKMEMBER | TCSEQUENCEENTRY_FLAG_LASTBLOCKMEMBER | TCSEQUENCEENTRY_FLAG_GROUPMEMBER | TCSEQUENCEENTRY_FLAG_LASTGROUPMEMBER)) == 0)
								{
									if ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS) == 0)
									{
										bSuccess &= (pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime() >= dwDelta);
										dwDelta = max(pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime(), dwDelta);
									}
									else
									{
										pDatabaseTCSequenceEntry[0]->SetAttributes((pDatabaseTCSequenceEntry[0]->GetAttributes() & ~TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS) | TCSEQUENCEENTRY_RELTIME_AFTERBEGIN);
										pDatabaseTCSequenceEntry[0]->SetReleaseDeltaTime((dwDelta = dwDelta + pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime()));
									}
								}
								else
								{
									pDatabaseTCSequenceEntry[0]->SetAttributes((pDatabaseTCSequenceEntry[0]->GetAttributes() & ~TCSEQUENCEENTRY_RELTIME_AFTERBEGIN) | TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS);
									pDatabaseTCSequenceEntry[0]->SetReleaseDeltaTime(dwDelta);
								}
								if ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_SEQUENCE) == 0)
								{
									if ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG) && pDatabaseTCSequenceEntry[0]->GetExecutionTime().GetTime() == 0)
									{
										if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS)
										{
											for (nEntry[1] = nEntry[0] - 1; nEntry[1] >= 0; nEntry[1] = nEntry[1] - 1)
											{
												if ((pDatabaseTCSequenceEntry[1] = pDatabaseTCSequence[0]->GetAt(nEntry[1])))
												{
													if (pDatabaseTCSequenceEntry[1]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG)
													{
														if (pDatabaseTCSequenceEntry[1]->GetExecutionTime().GetTime() == 0)
														{
															pDatabaseTCSequenceEntry[0]->SetAttributes((pDatabaseTCSequenceEntry[0]->GetAttributes() & ~TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS) | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN);
															pDatabaseTCSequenceEntry[0]->SetExecutionDeltaTime(((!pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() && !pDatabaseTCSequenceEntry[1]->IsEarlierExecutionDeltaTime()) || (pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() && pDatabaseTCSequenceEntry[1]->IsEarlierExecutionDeltaTime())) ? (pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() + pDatabaseTCSequenceEntry[1]->GetExecutionDeltaTime()) : ((pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() >= pDatabaseTCSequenceEntry[1]->GetExecutionDeltaTime()) ? (pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() - pDatabaseTCSequenceEntry[1]->GetExecutionDeltaTime()) : (pDatabaseTCSequenceEntry[1]->GetExecutionDeltaTime() - pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime())), ((!pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() && !pDatabaseTCSequenceEntry[1]->IsEarlierExecutionDeltaTime()) || (pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() && pDatabaseTCSequenceEntry[1]->IsEarlierExecutionDeltaTime())) ? pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() : ((pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() >= pDatabaseTCSequenceEntry[1]->GetExecutionDeltaTime()) ? pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() : pDatabaseTCSequenceEntry[1]->IsEarlierExecutionDeltaTime()));
														}
														else
														{
															pDatabaseTCSequenceEntry[0]->SetAttributes(pDatabaseTCSequenceEntry[0]->GetAttributes() & ~(TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN));
															pDatabaseTCSequenceEntry[0]->SetExecutionTime((!pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime()) ? (pDatabaseTCSequenceEntry[1]->GetExecutionTime().GetTime() + 1000 * (TIMETAG)pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime()) : (pDatabaseTCSequenceEntry[1]->GetExecutionTime().GetTime() - 1000 * (TIMETAG)pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime()));
														}
														break;
													}
												}
											}
										}
									}
								}
							}
							if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_FUNCTION)
							{
								if ((pEntry = new CTCProcedureDocumentSendTCFunctionItem))
								{
									if ((pDatabaseTCFunction[0] = new CDatabaseTCFunction))
									{
										if ((pDatabaseTCFunction[1] = GetDatabase()->GetTCFunctions()->GetAt(GetDatabase()->GetTCFunctions()->Find(((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_SECONDSTEP) != TCSEQUENCEENTRY_EXETYPE_SECONDSTEP || pDatabaseTCSequenceEntry[0]->GetAssociated1Step().IsEmpty()) ? pDatabaseTCSequenceEntry[0]->GetName() : pDatabaseTCSequenceEntry[0]->GetAssociated1Step()))) && pDatabaseTCFunction[0]->Copy(pDatabaseTCFunction[1]))
										{
											for (nElement = 0, nElements = (INT)pDatabaseTCFunction[0]->GetSize(); nElement < nElements; nElement++)
											{
												if ((pDatabaseTCFunctionElement[0] = pDatabaseTCFunction[0]->GetAt(nElement)))
												{
													if ((pDatabaseTCParameter[0] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCFunctionElement[0]->GetName()))))
													{
														pDatabaseTCFunctionElement[0]->SetAttributes((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED)) | ((pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_VTYPE_CALIBRATED)) ? ((pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_VTYPE_CALIBRATED) : (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_VTYPE_RAW)) | ((!GetDatabase()->CheckTCFunctionElementConstTimeType(pDatabaseTCFunctionElement[0]->GetName()) && (pDatabaseTCParameter[0]->GetAttributes() & TCPARAMETER_CODING_TIME) == 0) ? (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) : TCPARAMETER_CODING_TIME));
														continue;
													}
													if (pDatabaseTCFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT)
													{
														pDatabaseTCFunctionElement[0]->SetAttributes(pDatabaseTCFunctionElement[0]->GetAttributes() | TCPARAMETER_CODING_UNSIGNEDINTEGER);
														continue;
													}
												}
												bSuccess = FALSE;
											}
											for (nParameter[0] = 0, nParameters[0] = (INT)pDatabaseTCSequenceEntry[0]->GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
											{
												if ((pDatabaseTCSequenceEntryParameter = pDatabaseTCSequenceEntry[0]->GetAt(nParameter[0])) != (CDatabaseTCSequenceEntryParameter *)NULL)
												{
													if ((pDatabaseTCFunctionElement[0] = pDatabaseTCFunction[0]->GetAt(pDatabaseTCFunction[0]->Find(pDatabaseTCSequenceEntryParameter->GetTag(), (pDatabaseTCSequenceEntryParameter->GetBitOffset() > 0) ? (pDatabaseTCSequenceEntryParameter->GetBitOffset() / 8) : pDatabaseTCSequenceEntryParameter->GetBytePos(), (pDatabaseTCSequenceEntryParameter->GetBitOffset() > 0) ? (pDatabaseTCSequenceEntryParameter->GetBitOffset() % 8) : pDatabaseTCSequenceEntryParameter->GetBitPos()))))
													{
														if (pDatabaseTCSequenceEntryParameter->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_TYPE_VARIABLE))
														{
															pDatabaseTCFunctionElement[0]->SetAttributes(pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_TYPE_VARIABLE | TCFUNCTIONELEMENT_VTYPE_TMPARAMETER | TCFUNCTIONELEMENT_VTYPE_TCPARAMETER));
															pDatabaseTCFunctionElement[0]->SetAttributes(pDatabaseTCFunctionElement[0]->GetAttributes() | (pDatabaseTCSequenceEntryParameter->GetAttributes() & (TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_TYPE_VARIABLE)));
														}
														if (pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_PARAMETERSET)
														{
															for (nSet = 0, nSets = pDatabaseTCFunction[0]->GetParameterSets(szParameterSets); nSet < nSets; nSet++)
															{
																if ((pDatabaseTCParameterSet = GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(szParameterSets.GetAt(nSet)))))
																{
																	if ((pDatabaseTCFunctionElement[1] = (pDatabaseTCParameterSet->GetValueSet() == pDatabaseTCSequenceEntryParameter->GetValueSet()) ? pDatabaseTCParameterSet->GetAt(pDatabaseTCParameterSet->Find(pDatabaseTCFunctionElement[0]->GetName(), pDatabaseTCFunctionElement[0]->GetBytePos(), pDatabaseTCFunctionElement[0]->GetBitPos())) : (CDatabaseTCFunctionElement *)NULL))
																	{
																		for (pDatabaseTCFunctionElement[0]->SetAttributes(pDatabaseTCFunctionElement[1]->GetAttributes() | (pDatabaseTCSequenceEntryParameter->GetAttributes() & (TCPARAMETER_TYPE_VARIABLE | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_PARAMETERSET | TCPARAMETER_VTYPE_FUNCTION | TCPARAMETER_VTYPE_SEQUENCE | TCPARAMETER_VTYPE_FORMAL))), pDatabaseTCFunctionElement[0]->SetConstValueAsText(pDatabaseTCFunctionElement[1]->GetConstValueAsText()); (pDatabaseTCParameter[0] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCFunctionElement[0]->GetName()))); )
																		{
																			for (pDatabaseTCFunctionElement[0]->SetAttributes((pDatabaseTCFunctionElement[1]->GetAttributes() & TCFUNCTIONELEMENT_VTYPE_CALIBRATED) ? ((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : ((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE)); (pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0; )
																			{
																				pDatabaseTCFunctionElement[0]->SetAttributes(pDatabaseTCFunctionElement[0]->GetAttributes() | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)));
																				break;
																			}
																			break;
																		}
																		break;
																	}
																}
															}
															if (nSet < nSets) continue;
															bSuccess = FALSE;
															break;
														}
														if (pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_FUNCTION)
														{
															if ((pDatabaseTCParameter[0] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCSequenceEntryParameter->GetTag()))))
															{
																for (pDatabaseTCFunctionElement[0]->SetAttributes((pDatabaseTCFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_VTYPE_CALIBRATED) ? ((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : ((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE)); (pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0; )
																{
																	pDatabaseTCFunctionElement[0]->SetAttributes(pDatabaseTCFunctionElement[0]->GetAttributes() | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)));
																	break;
																}
															}
															if (!pDatabaseTCFunctionElement[0]->GetConstValueAsText().IsEmpty()) continue;
															bSuccess = FALSE;
															break;
														}
														if (pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_FORMAL)
														{
															for (nParameter[1] = 0, nParameters[1] = ((pDatabaseTCParameterList = (nEntry[0] < nParameterListIDs.GetSize()) ? (CDatabaseTCParameters *)pParameterLists.GetAt(nParameterListIDs.GetAt(nEntry[0])) : (CDatabaseTCParameters *)NULL)) ? (INT)pDatabaseTCParameterList->GetSize() : -1; nParameter[1] < nParameters[1]; nParameter[1]++)
															{
																if ((pDatabaseTCParameter[0] = pDatabaseTCParameterList->GetAt(nParameter[1])) && pDatabaseTCSequenceEntryParameter->GetConstValueAsText() == pDatabaseTCParameter[0]->GetTag())
																{
																	for (pDatabaseTCFunctionElement[0]->SetAttributes((pDatabaseTCParameter[0]->GetAttributes() & TCFUNCTIONELEMENT_VTYPE_CALIBRATED) ? ((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_FORMAL | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : ((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | TCPARAMETER_VTYPE_FORMAL | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE)); (pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0; )
																	{
																		pDatabaseTCFunctionElement[0]->SetAttributes(pDatabaseTCFunctionElement[0]->GetAttributes() | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)));
																		break;
																	}
																	if (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) pDatabaseTCFunctionElement[0]->SetAttributes((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
																	pDatabaseTCFunctionElement[0]->SetConstValueAsText(pDatabaseTCParameter[0]->GetConstValueAsText());
																	pDatabaseTCFunctionElement[0]->SetConstValueSource(pDatabaseTCSequenceEntryParameter->GetConstValueAsText());
																	break;
																}
															}
															if (nParameter[1] < nParameters[1]) continue;
															bSuccess = FALSE;
															break;
														}
														for (pDatabaseTCFunctionElement[0]->SetConstValueAsText(pDatabaseTCSequenceEntryParameter->GetConstValueAsText()); (pDatabaseTCParameter[0] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCSequenceEntryParameter->GetTag()))); )
														{
															for (pDatabaseTCFunctionElement[0]->SetAttributes((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED)) | ((pDatabaseTCSequenceEntryParameter->GetAttributes() & (TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED)) ? ((pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : (TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE))); (pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0; )
															{
																pDatabaseTCFunctionElement[0]->SetAttributes(pDatabaseTCFunctionElement[0]->GetAttributes() | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)));
																break;
															}
															if (pDatabaseTCSequenceEntryParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) pDatabaseTCFunctionElement[0]->SetAttributes((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pDatabaseTCSequenceEntryParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
															break;
														}
														if (pDatabaseTCSequenceEntryParameter->GetMemoryArea(szMemoryPatch[0], szMemoryPatch[1]))
														{
															if ((pDatabaseOBProcessorMemoryImage = GetDatabase()->GetOBProcessorMemoryImages()->GetAt(GetDatabase()->GetOBProcessorMemoryImages()->Find(szMemoryPatch[0]))) && pDatabaseOBProcessorMemoryImage->Find(szMemoryPatch[1]) >= 0)
															{
																pEntry->SetMemoryPatch(szMemoryPatch[0] + TAB + szMemoryPatch[1]);
																continue;
															}
															bSuccess = FALSE;
															break;
														}
														continue;
													}
												}
												bSuccess = FALSE;
												break;
											}
											for (nElement = 0, nElements = (INT)pDatabaseTCFunction[0]->GetSize(); nElement < nElements; nElement++)
											{
												if ((pDatabaseTCFunctionElement[0] = pDatabaseTCFunction[0]->GetAt(nElement)) && pDatabaseTCFunctionElement[0]->GetName().IsEmpty() && (pDatabaseTCFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_TYPE_CONSTANT))
												{
													pDatabaseTCFunctionElement[0]->SetAttributes((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) | TCPARAMETER_CODING_UNSIGNEDINTEGER);
													continue;
												}
											}
											if ((pDatabaseTCPacket[0] = new CDatabaseTCPacket))
											{
												if ((pDatabaseTCPacket[1] = GetDatabase()->GetTCPackets()->GetAt(GetDatabase()->GetTCPackets()->Find(pDatabaseTCFunction[0]->GetTCPacket()))) && pDatabaseTCPacket[0]->Copy(pDatabaseTCPacket[1]))
												{
													for (pEntry->SetDescription((!pDatabaseTCSequenceEntry[0]->GetDescription().IsEmpty()) ? pDatabaseTCSequenceEntry[0]->GetDescription() : pDatabaseTCFunction[0]->GetDescription()), pEntry->SetOptions(pEntry->GetOptions() | ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_FIRSTSTEP) ? TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_FIRSTSTEP : 0) | ((pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_SECONDSTEP) ? TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_SECONDSTEP : 0)); pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_RELTYPE_MANUAL; )
													{
														pEntry->SetOptions(pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_AUTHORIZATION);
														break;
													}
													if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG)
													{
														if (pDatabaseTCSequenceEntry[0]->GetExecutionTime().GetTime() > 0)
														{
															pEntry->SetOptions((pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATOFFSET) | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATTIME);
															pEntry->SetExecutionTime(pDatabaseTCSequenceEntry[0]->GetExecutionTime());
														}
														if (pDatabaseTCSequenceEntry[0]->GetExecutionTime() == 0 && pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() > 0)
														{
															pEntry->SetOptions((pEntry->GetOptions() & ~TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATTIME) | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATOFFSET);
															pEntry->SetExecutionDeltaTime(pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime(), pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime());
														}
													}
													for (pEntry->SetReleaseDeltaTime(pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime()); (pDatabaseTCSequenceEntry[0]->GetAttributes() & (TCSEQUENCEENTRY_FLAG_BLOCKMEMBER | TCSEQUENCEENTRY_FLAG_LASTBLOCKMEMBER | TCSEQUENCEENTRY_FLAG_GROUPMEMBER | TCSEQUENCEENTRY_FLAG_LASTGROUPMEMBER)) || pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime() > 0; )
													{
														pEntry->SetOptions(pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATOFFSET);
														break;
													}
													for (; (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_FLAG_BLOCKMACRO) || (pDatabaseTCSequenceEntry[0]->GetAttributes() & (TCSEQUENCEENTRY_FLAG_FIRSTBLOCKMEMBER | TCSEQUENCEENTRY_FLAG_BLOCKMEMBER | TCSEQUENCEENTRY_FLAG_LASTBLOCKMEMBER)); )
													{
														pEntry->SetOptions(pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_BLOCKED);
														break;
													}
													for (; pDatabaseTCSequenceEntry[0]->GetAttributes() & (TCSEQUENCEENTRY_FLAG_FIRSTGROUPMEMBER | TCSEQUENCEENTRY_FLAG_GROUPMEMBER | TCSEQUENCEENTRY_FLAG_LASTGROUPMEMBER); )
													{
														pEntry->SetOptions(pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_GROUPED);
														break;
													}
													for (; pDatabaseTCFunction[0]->GetAttributes() & TCFUNCTION_HAZFLAG_HAZARDOUS; )
													{
														pEntry->SetOptions(pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_CRITICAL);
														break;
													}
													for (; pDatabaseTCSequenceEntry[0]->GetAttributes() & (TCSEQUENCEENTRY_PTVCHECKS_DISABLED | TCSEQUENCEENTRY_PEVCHECKS_DISABLED); )
													{
														pEntry->SetOptions(pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_IGNOREPREEXEVERIFICATION);
														break;
													}
													for (; pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_CEVCHECKS_DISABLED; )
													{
														pEntry->SetOptions(pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_IGNOREEXEVERIFICATION);
														break;
													}
													if (pEntry->SetFunction(pDatabaseTCFunction[0], pDatabaseTCPacket[0]))
													{
														for (pStep->Add(pEntry), EvaluateParameters(); pEntry->GetOptions() & (TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_FIRSTSTEP | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_SECONDSTEP); )
														{
															pEntry->SetOptions(pEntry->GetOptions() & ~(TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATTIME | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATOFFSET));
															pEntry->SetExecutionDeltaTime(0);
															pEntry->SetExecutionTime(0);
															break;
														}
														delete pDatabaseTCFunction[0];
														delete pDatabaseTCPacket[0];
														continue;
													}
												}
												delete pDatabaseTCPacket[0];
											}
										}
										delete pDatabaseTCFunction[0];
									}
									delete pEntry;
								}
							}
							if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_SEQUENCE)
							{
								if (pDatabaseTCSequence[0]->GetName() != pDatabaseTCSequenceEntry[0]->GetName())
								{
									if ((pDatabaseTCSequence[2] = GetDatabase()->GetTCSequences()->GetAt(GetDatabase()->GetTCSequences()->Find(pDatabaseTCSequenceEntry[0]->GetName()))))
									{
										if ((pDatabaseTCParameterList = (pDatabaseTCSequence[2]->GetParameters(pDatabaseTCParameters[1]) >= 0) ? new CDatabaseTCParameters : (CDatabaseTCParameters *)NULL))
										{
											for (nParameter[0] = 0, nParameters[0] = (pDatabaseTCParameterList->Copy(&pDatabaseTCParameters[1])) ? (INT)pDatabaseTCSequenceEntry[0]->GetSize() : -1, pParameterLists.Add(pDatabaseTCParameterList); nParameter[0] < nParameters[0]; nParameter[0]++)
											{
												if ((pDatabaseTCParameter[0] = ((pDatabaseTCSequenceEntryParameter = pDatabaseTCSequenceEntry[0]->GetAt(nParameter[0]))) ? pDatabaseTCParameterList->GetAt(pDatabaseTCSequenceEntryParameter->GetBytePos()) : (CDatabaseTCParameter *)NULL) && pDatabaseTCParameter[0]->GetTag() == pDatabaseTCSequenceEntryParameter->GetName())
												{
													if (pDatabaseTCSequenceEntryParameter->GetAttributes() & (TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED))
													{
														pDatabaseTCParameter[0]->SetAttributes((pDatabaseTCParameter[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | ((pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_CALIBRATED) ? ((pDatabaseTCParameter[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : ((pDatabaseTCParameter[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE)));
														pDatabaseTCParameter[0]->SetConstValue(pDatabaseTCSequenceEntryParameter->GetConstValue());
														pDatabaseTCParameter[0]->SetConstValueAsText(pDatabaseTCSequenceEntryParameter->GetConstValueAsText());
														continue;
													}
													if (pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_PARAMETERSET)
													{
														for (nSet = 0, nSets = pDatabaseTCSequence[2]->GetParameterSets(szParameterSets); nSet < nSets; nSet++)
														{
															if ((pDatabaseTCParameterSet = GetDatabase()->GetTCParameterSets()->GetAt(GetDatabase()->GetTCParameterSets()->Find(szParameterSets.GetAt(nSet)))))
															{
																for (nParameter[1] = 0, nParameters[1] = (pDatabaseTCParameterSet->GetValueSet() == pDatabaseTCSequenceEntryParameter->GetValueSet()) ? (INT)pDatabaseTCParameterSet->GetSize() : -1; nParameter[1] < nParameters[1]; nParameter[1]++)
																{
																	if ((pDatabaseTCParameter[0] = ((pDatabaseTCFunctionElement[0] = pDatabaseTCParameterSet->GetAt(nParameter[1]))) ? pDatabaseTCParameterList->GetAt(pDatabaseTCFunctionElement[0]->GetBytePos()) : (CDatabaseTCParameter *)NULL) && pDatabaseTCSequenceEntryParameter->GetTag() == pDatabaseTCFunctionElement[0]->GetName())
																	{
																		pDatabaseTCParameter[0]->SetAttributes((pDatabaseTCParameter[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCFUNCTIONELEMENT_VTYPE_CALIBRATED) ? ((pDatabaseTCParameter[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : ((pDatabaseTCParameter[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE)));
																		pDatabaseTCParameter[0]->SetConstValueAsText(pDatabaseTCFunctionElement[0]->GetConstValueAsText());
																		break;
																	}
																}
																if (nParameters[1] >= 0) break;
															}
														}
														if (nSet < nSets) continue;
														break;
													}
													if (pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_FORMAL)
													{
														if ((pDatabaseTCParameter[1] = pDatabaseTCParameters[0].GetAt(pDatabaseTCSequenceEntryParameter->GetBytePos())) && pDatabaseTCParameter[0]->GetTag() == pDatabaseTCParameter[1]->GetTag() && pDatabaseTCParameter[0]->Copy(pDatabaseTCParameter[1])) continue;
														break;
													}
													if (pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_SEQUENCE)
													{
														if ((pDatabaseTCParameter[1] = pDatabaseTCParameters[1].GetAt(pDatabaseTCSequenceEntryParameter->GetBytePos())) && pDatabaseTCParameter[0]->GetTag() == pDatabaseTCParameter[1]->GetTag() && pDatabaseTCParameter[0]->Copy(pDatabaseTCParameter[1])) continue;
														break;
													}
												}
											}
											for (nEntry[1] = 0, nEntries[1] = (nParameter[0] == nParameters[0]) ? (INT)pDatabaseTCSequence[2]->GetSize() : -1; nEntry[1] < nEntries[1]; nEntry[1]++)
											{
												if ((pDatabaseTCSequenceEntry[1] = pDatabaseTCSequence[2]->GetAt(nEntry[1])))
												{
													if ((pDatabaseTCSequenceEntry[2] = new CDatabaseTCSequenceEntry))
													{
														if (pDatabaseTCSequenceEntry[2]->Copy(pDatabaseTCSequenceEntry[1]))
														{
															for (pDatabaseTCSequenceEntry[2]->SetReleaseDeltaTime(((pDatabaseTCSequenceEntry[2]->GetAttributes() & TCSEQUENCEENTRY_RELTIME_AFTERPREVIOUS) == 0 || !nEntry[1]) ? (pDatabaseTCSequenceEntry[2]->GetReleaseDeltaTime() + dwDelta) : pDatabaseTCSequenceEntry[2]->GetReleaseDeltaTime()); (pDatabaseTCSequenceEntry[2]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG) && pDatabaseTCSequenceEntry[2]->GetExecutionTime() == 0; )
															{
																if ((pDatabaseTCSequenceEntry[2]->GetAttributes() & TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS) == 0)
																{
																	if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG)
																	{
																		if (pDatabaseTCSequenceEntry[0]->GetExecutionTime().GetTime() == 0)
																		{
																			pDatabaseTCSequenceEntry[2]->SetAttributes((pDatabaseTCSequenceEntry[2]->GetAttributes() & ~TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS) | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN);
																			pDatabaseTCSequenceEntry[2]->SetExecutionDeltaTime(((!pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() && !pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime()) || (pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() && pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime())) ? (pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() + pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()) : ((pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() >= pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()) ? (pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() - pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()) : (pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime() - pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime())), ((!pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() && !pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime()) || (pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() && pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime())) ? pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() : ((pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() >= pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()) ? pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() : pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime()));
																			break;
																		}
																		pDatabaseTCSequenceEntry[2]->SetAttributes(pDatabaseTCSequenceEntry[2]->GetAttributes() & ~(TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN));
																		pDatabaseTCSequenceEntry[2]->SetExecutionTime((!pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime()) ? (pDatabaseTCSequenceEntry[0]->GetExecutionTime().GetTime() + 1000 * (TIMETAG)pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()) : (pDatabaseTCSequenceEntry[0]->GetExecutionTime().GetTime() - 1000 * (TIMETAG)pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()));
																		break;
																	}
																	pDatabaseTCSequenceEntry[2]->SetAttributes(pDatabaseTCSequenceEntry[2]->GetAttributes() | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN);
																	pDatabaseTCSequenceEntry[2]->SetExecutionDeltaTime((!pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime()) ? (pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime() + pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()) : (pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime() - pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()), (pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime() && pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime() > pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime()) ? TRUE : FALSE);
																	break;
																}
																for (nEntry[2] = nEntry[1] - 1; nEntry[2] >= 0; nEntry[2]--)
																{
																	if ((pDatabaseTCSequenceEntry[3] = pDatabaseTCSequence[0]->GetAt(nEntry[0] + nEntry[2])))
																	{
																		if (pDatabaseTCSequenceEntry[3]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG)
																		{
																			if (pDatabaseTCSequenceEntry[3]->GetExecutionTime().GetTime() == 0)
																			{
																				pDatabaseTCSequenceEntry[2]->SetAttributes((pDatabaseTCSequenceEntry[2]->GetAttributes() & ~TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS) | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN);
																				pDatabaseTCSequenceEntry[2]->SetExecutionDeltaTime(((!pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime() && !pDatabaseTCSequenceEntry[3]->IsEarlierExecutionDeltaTime()) || (pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime() && pDatabaseTCSequenceEntry[3]->IsEarlierExecutionDeltaTime())) ? (pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime() + pDatabaseTCSequenceEntry[3]->GetExecutionDeltaTime()) : ((pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime() >= pDatabaseTCSequenceEntry[3]->GetExecutionDeltaTime()) ? (pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime() - pDatabaseTCSequenceEntry[3]->GetExecutionDeltaTime()) : (pDatabaseTCSequenceEntry[3]->GetExecutionDeltaTime() - pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime())), ((!pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime() && !pDatabaseTCSequenceEntry[3]->IsEarlierExecutionDeltaTime()) || (pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime() && pDatabaseTCSequenceEntry[3]->IsEarlierExecutionDeltaTime())) ? pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime() : ((pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime() >= pDatabaseTCSequenceEntry[3]->GetExecutionDeltaTime()) ? pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime() : pDatabaseTCSequenceEntry[3]->IsEarlierExecutionDeltaTime()));
																			}
																			else
																			{
																				pDatabaseTCSequenceEntry[2]->SetAttributes(pDatabaseTCSequenceEntry[2]->GetAttributes() & ~(TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN));
																				pDatabaseTCSequenceEntry[2]->SetExecutionTime((!pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime()) ? (pDatabaseTCSequenceEntry[3]->GetExecutionTime().GetTime() + 1000 * (TIMETAG)pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()) : (pDatabaseTCSequenceEntry[3]->GetExecutionTime().GetTime() - 1000 * (TIMETAG)pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()));
																			}
																			break;
																		}
																	}
																}
																if (nEntry[2] < 0)
																{
																	if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_EXETYPE_TIMETAG)
																	{
																		if (pDatabaseTCSequenceEntry[0]->GetExecutionTime().GetTime() == 0)
																		{
																			pDatabaseTCSequenceEntry[2]->SetAttributes((pDatabaseTCSequenceEntry[2]->GetAttributes() & ~TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS) | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN);
																			pDatabaseTCSequenceEntry[2]->SetExecutionDeltaTime(((!pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() && !pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime()) || (pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() && pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime())) ? (pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() + pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()) : ((pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() >= pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()) ? (pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() - pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()) : (pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime() - pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime())), ((!pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() && !pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime()) || (pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() && pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime())) ? pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() : ((pDatabaseTCSequenceEntry[0]->GetExecutionDeltaTime() >= pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()) ? pDatabaseTCSequenceEntry[0]->IsEarlierExecutionDeltaTime() : pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime()));
																		}
																		else
																		{
																			pDatabaseTCSequenceEntry[2]->SetAttributes(pDatabaseTCSequenceEntry[2]->GetAttributes() & ~(TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN));
																			pDatabaseTCSequenceEntry[2]->SetExecutionTime((!pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime()) ? (pDatabaseTCSequenceEntry[0]->GetExecutionTime().GetTime() + 1000 * (TIMETAG)pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()) : (pDatabaseTCSequenceEntry[0]->GetExecutionTime().GetTime() - 1000 * (TIMETAG)pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()));
																		}
																	}
																	else
																	{
																		pDatabaseTCSequenceEntry[2]->SetAttributes((pDatabaseTCSequenceEntry[2]->GetAttributes() & ~TCSEQUENCEENTRY_EXETIME_AFTERPREVIOUS) | TCSEQUENCEENTRY_EXETIME_AFTERBEGIN);
																		pDatabaseTCSequenceEntry[2]->SetExecutionDeltaTime((!pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime()) ? (pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime() + pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()) : (pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime() - pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime()), (pDatabaseTCSequenceEntry[2]->IsEarlierExecutionDeltaTime() && pDatabaseTCSequenceEntry[2]->GetExecutionDeltaTime() > pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime()) ? TRUE : FALSE);
																	}
																}
																break;
															}
															pDatabaseTCSequence[0]->InsertAt(nEntry[0] + nEntry[1], pDatabaseTCSequenceEntry[2], 1);
															nParameterListIDs.InsertAt(nEntry[0] + nEntry[1], (UINT)(pParameterLists.GetCount() - 1));
															nEntries[0]++;
															continue;
														}
														delete pDatabaseTCSequenceEntry[2];
													}
												}
												break;
											}
											if (nEntry[1] == nEntries[1])
											{
												pDatabaseTCSequence[0]->RemoveAt(nEntry[0] + nEntries[1]);
												nParameterListIDs.RemoveAt(nEntry[0] + nEntries[1]);
												delete pDatabaseTCSequenceEntry[0];
												nEntries[0]--;
												nEntry[0]--;
												continue;
											}
										}
									}
								}
								bSuccess = FALSE;
							}
							if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_PROCEDURE)
							{
								if ((pEntry = new CTCProcedureDocumentSendTCFunctionItem))
								{
									if ((pDatabaseTCFunction[0] = new CDatabaseTCFunction))
									{
										if ((pDatabaseTCPacket[0] = new CDatabaseTCPacket))
										{
											if ((pDatabaseTCProcedure = GetDatabase()->GetTCProcedures()->GetAt(GetDatabase()->GetTCProcedures()->Find(pDatabaseTCSequenceEntry[0]->GetName()))))
											{
												for (nParameter[0] = 0, nParameters[0] = (INT)pDatabaseTCSequenceEntry[0]->GetSize(), pEntry->SetName(pDatabaseTCProcedure->GetName()), pEntry->SetDescription((!pDatabaseTCSequenceEntry[0]->GetDescription().IsEmpty()) ? pDatabaseTCSequenceEntry[0]->GetDescription() : pDatabaseTCProcedure->GetDescription()), pDatabaseTCFunction[0]->SetName(pEntry->GetName()), pDatabaseTCFunction[0]->SetDescription(pEntry->GetDescription()), pEntry->SetOptions(TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE), pEntry->SetReleaseDeltaTime(pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime()), pEntry->SetOptions((pDatabaseTCSequenceEntry[0]->GetReleaseDeltaTime() > 0) ? (pEntry->GetOptions() | TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATOFFSET) : pEntry->GetOptions()), pDatabaseTCProcedure->GetArguments(pDatabaseTCProcedureArguments); nParameter[0] < nParameters[0]; nParameter[0]++)
												{
													if ((pDatabaseTCProcedureArgument = ((pDatabaseTCSequenceEntryParameter = pDatabaseTCSequenceEntry[0]->GetAt(nParameter[0]))) ? pDatabaseTCProcedureArguments.GetAt(nParameter[0]) : (CDatabaseTCProcedureArgument *)NULL))
													{
														if ((pDatabaseTCFunctionElement[0] = new CDatabaseTCFunctionElement))
														{
															if (pDatabaseTCFunctionElement[0]->Copy(pDatabaseTCSequenceEntryParameter))
															{
																if (pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_PARAMETERSET)
																{
																	for (nSet = 0, nSets = (INT)GetDatabase()->GetTCParameterSets()->GetSize(); nSet < nSets; nSet++)
																	{
																		if ((pDatabaseTCParameterSet = GetDatabase()->GetTCParameterSets()->GetAt(nSet)) && pDatabaseTCParameterSet->GetValueSet() == pDatabaseTCSequenceEntryParameter->GetValueSet())
																		{
																			if ((pDatabaseTCFunctionElement[1] = pDatabaseTCParameterSet->GetAt(pDatabaseTCParameterSet->Find(pDatabaseTCFunctionElement[0]->GetName()))) != (CDatabaseTCFunctionElement *)NULL)
																			{
																				for (pDatabaseTCFunctionElement[0]->SetAttributes((pDatabaseTCFunctionElement[1]->GetAttributes() & ~(TCPARAMETER_TYPE_VARIABLE | TCPARAMETER_TYPE_CONSTANT)) | (pDatabaseTCSequenceEntryParameter->GetAttributes() & (TCPARAMETER_TYPE_VARIABLE | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_VTYPE_PARAMETERSET | TCPARAMETER_VTYPE_FUNCTION | TCPARAMETER_VTYPE_SEQUENCE | TCPARAMETER_VTYPE_FORMAL))), pDatabaseTCFunctionElement[0]->SetConstValueAsText(pDatabaseTCFunctionElement[1]->GetConstValueAsText()); (pDatabaseTCParameter[0] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCFunctionElement[0]->GetName()))); )
																				{
																					for (pDatabaseTCFunctionElement[0]->SetAttributes((pDatabaseTCFunctionElement[1]->GetAttributes() & TCFUNCTIONELEMENT_VTYPE_CALIBRATED) ? ((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : ((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE)), pDatabaseTCFunctionElement[0]->SetWidth(pDatabaseTCParameter[0]->GetWidth()); (pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0; )
																					{
																						pDatabaseTCFunctionElement[0]->SetAttributes(pDatabaseTCFunctionElement[0]->GetAttributes() | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)));
																						break;
																					}
																					break;
																				}
																				break;
																			}
																		}
																	}
																	if (nSet < nSets)
																	{
																		if (((pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0 && (pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) != (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME))) || ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) && (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CODING_FLOATINGPOINT)) == 0) || ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) && (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CODING_TEXTSTRING)) == 0))
																		{
																			szMessage.Format(STRING(IDS_TCPROCEDURE_MESSAGE_BUILDTCSEQUENCEARGUMENTS_FAILURE), (!GetParentDisplay()->GetName().IsEmpty()) ? (LPCTSTR)GetParentDisplay()->GetName() : (LPCTSTR)GetParentDisplay()->GetTitle(), (LPCTSTR)szName, (LPCTSTR)pDatabaseTCProcedureArgument->GetTag(), nParameter[0] + 1, (LPCTSTR)pDatabaseTCFunctionElement[0]->GetName());
																			ShowMessage(szMessage);
																			bSuccess = FALSE;
																		}
																		if (pDatabaseTCFunction[0]->Add(pDatabaseTCFunctionElement[0]) >= 0) continue;
																	}
																	delete pDatabaseTCFunctionElement[0];
																	break;
																}
																if (pDatabaseTCSequenceEntryParameter->GetAttributes() & (TCPARAMETER_VTYPE_FUNCTION | TCPARAMETER_VTYPE_SEQUENCE))
																{
																	delete pDatabaseTCFunctionElement[0];
																	break;
																}
																if (pDatabaseTCSequenceEntryParameter->GetAttributes() & TCPARAMETER_VTYPE_FORMAL)
																{
																	for (nParameter[1] = 0, nParameters[1] = ((pDatabaseTCParameterList = (nEntry[0] < nParameterListIDs.GetSize()) ? (CDatabaseTCParameters *)pParameterLists.GetAt(nParameterListIDs.GetAt(nEntry[0])) : (CDatabaseTCParameters *)NULL)) ? (INT)pDatabaseTCParameterList->GetSize() : -1; nParameter[1] < nParameters[1]; nParameter[1]++)
																	{
																		if ((pDatabaseTCParameter[0] = pDatabaseTCParameters[0].GetAt(nParameter[1])) && pDatabaseTCSequenceEntryParameter->GetConstValueAsText() == pDatabaseTCParameter[0]->GetTag())
																		{
																			for (pDatabaseTCFunctionElement[0]->SetAttributes((pDatabaseTCParameter[0]->GetAttributes() & TCFUNCTIONELEMENT_VTYPE_CALIBRATED) ? ((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_DISABLED)) | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_FORMAL | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : ((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED)) | TCPARAMETER_VTYPE_FORMAL | TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE)), pDatabaseTCFunctionElement[0]->SetWidth(pDatabaseTCParameter[0]->GetWidth()); (pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0; )
																			{
																				pDatabaseTCFunctionElement[0]->SetAttributes(pDatabaseTCFunctionElement[0]->GetAttributes() | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)));
																				break;
																			}
																			if (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) pDatabaseTCFunctionElement[0]->SetAttributes((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
																			pDatabaseTCFunctionElement[0]->SetConstValueAsText(pDatabaseTCParameter[0]->GetConstValueAsText());
																			pDatabaseTCFunctionElement[0]->SetConstValueSource(pDatabaseTCSequenceEntryParameter->GetConstValueAsText());
																			break;
																		}
																	}
																	if (nParameter[1] < nParameters[1])
																	{
																		if (((pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0 && (pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) != (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME))) || ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) && (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CODING_FLOATINGPOINT)) == 0) || ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) && (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CODING_TEXTSTRING)) == 0))
																		{
																			szMessage.Format(STRING(IDS_TCPROCEDURE_MESSAGE_BUILDTCSEQUENCEARGUMENTS_FAILURE), (!GetParentDisplay()->GetName().IsEmpty()) ? (LPCTSTR)GetParentDisplay()->GetName() : (LPCTSTR)GetParentDisplay()->GetTitle(), (LPCTSTR)szName, (LPCTSTR)pDatabaseTCProcedureArgument->GetTag(), nParameter[0] + 1, (LPCTSTR)pDatabaseTCFunctionElement[0]->GetName());
																			ShowMessage(szMessage);
																			bSuccess = FALSE;
																		}
																		if (pDatabaseTCFunction[0]->Add(pDatabaseTCFunctionElement[0]) >= 0) continue;
																	}
																	delete pDatabaseTCFunctionElement[0];
																	break;
																}
																for (pDatabaseTCFunctionElement[0]->SetConstValueAsText(pDatabaseTCSequenceEntryParameter->GetConstValueAsText()); (pDatabaseTCParameter[0] = GetDatabase()->GetTCParameters()->GetAt(GetDatabase()->GetTCParameters()->Find(pDatabaseTCSequenceEntryParameter->GetTag()))); )
																{
																	for (pDatabaseTCFunctionElement[0]->SetAttributes((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED)) | ((pDatabaseTCSequenceEntryParameter->GetAttributes() & (TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED)) ? ((pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_CALIBRATION_ENABLED) : (TCPARAMETER_VTYPE_RAW | TCPARAMETER_CALIBRATION_NONE))), pDatabaseTCFunctionElement[0]->SetWidth(pDatabaseTCParameter[0]->GetWidth()); (pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0; )
																	{
																		pDatabaseTCFunctionElement[0]->SetAttributes(pDatabaseTCFunctionElement[0]->GetAttributes() | (pDatabaseTCParameter[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)));
																		break;
																	}
																	if (pDatabaseTCSequenceEntryParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) pDatabaseTCFunctionElement[0]->SetAttributes((pDatabaseTCFunctionElement[0]->GetAttributes() & ~(TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pDatabaseTCSequenceEntryParameter->GetAttributes() & (TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
																	break;
																}
																if (pDatabaseTCSequenceEntryParameter->GetMemoryArea(szMemoryPatch[0], szMemoryPatch[1]))
																{
																	if ((pDatabaseOBProcessorMemoryImage = GetDatabase()->GetOBProcessorMemoryImages()->GetAt(GetDatabase()->GetOBProcessorMemoryImages()->Find(szMemoryPatch[0]))) && pDatabaseOBProcessorMemoryImage->Find(szMemoryPatch[1]) >= 0)
																	{
																		pEntry->SetMemoryPatch(szMemoryPatch[0] + TAB + szMemoryPatch[1]);
																		continue;
																	}
																	break;
																}
																if (((pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0 && (pDatabaseTCFunctionElement[0]->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) != (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME))) || ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) && (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CODING_FLOATINGPOINT)) == 0) || ((pDatabaseTCFunctionElement[0]->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) && (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CODING_TEXTSTRING)) == 0))
																{
																	szMessage.Format(STRING(IDS_TCPROCEDURE_MESSAGE_BUILDTCSEQUENCEARGUMENTS_FAILURE), (!GetParentDisplay()->GetName().IsEmpty()) ? (LPCTSTR)GetParentDisplay()->GetName() : (LPCTSTR)GetParentDisplay()->GetTitle(), (LPCTSTR)szName, (LPCTSTR)pDatabaseTCProcedureArgument->GetTag(), nParameter[0] + 1, (LPCTSTR)pDatabaseTCFunctionElement[0]->GetName());
																	ShowMessage(szMessage);
																	bSuccess = FALSE;
																}
																if (pDatabaseTCFunction[0]->Add(pDatabaseTCFunctionElement[0]) >= 0) continue;
															}
															delete pDatabaseTCFunctionElement[0];
														}
													}
													break;
												}
												if (nParameter[0] == nParameters[0] && nParameters[0] == pDatabaseTCProcedureArguments.GetSize())
												{
													pEntry->SetFunction(pDatabaseTCFunction[0], pDatabaseTCPacket[0]);
													pStep->Add(pEntry);
													EvaluateParameters();
													delete pDatabaseTCFunction[0];
													delete pDatabaseTCPacket[0];
													continue;
												}
											}
											delete pDatabaseTCPacket[0];
										}
										delete pDatabaseTCFunction[0];
									}
									delete pEntry;
								}
							}
							if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_FORMALFUNCTION)
							{
								for (nParameter[1] = 0, nParameters[1] = pDatabaseTCSequence[0]->GetParameters(pDatabaseTCParameters[0]); nParameter[1] < nParameters[1]; nParameter[1]++)
								{
									if ((pDatabaseTCParameter[0] = pDatabaseTCParameters[0].GetAt(nParameter[1])) && pDatabaseTCSequenceEntry[0]->GetName() == pDatabaseTCParameter[0]->GetTag())
									{
										pDatabaseTCSequenceEntry[0]->SetAttributes((pDatabaseTCSequenceEntry[0]->GetAttributes() & ~TCSEQUENCEENTRY_TYPE_FORMALFUNCTION) | TCSEQUENCEENTRY_TYPE_FUNCTION);
										pDatabaseTCSequenceEntry[0]->SetName(pDatabaseTCParameter[0]->GetConstValueAsText());
										nEntry[0]--;
										break;
									}
								}
								if (nParameter[1] < nParameters[1]) continue;
							}
							if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_FORMALSEQUENCE)
							{
								for (nParameter[1] = 0, nParameters[1] = pDatabaseTCSequence[0]->GetParameters(pDatabaseTCParameters[0]); nParameter[1] < nParameters[1]; nParameter[1]++)
								{
									if ((pDatabaseTCParameter[0] = pDatabaseTCParameters[0].GetAt(nParameter[1])) && pDatabaseTCSequenceEntry[0]->GetName() == pDatabaseTCParameter[0]->GetTag())
									{
										pDatabaseTCSequenceEntry[0]->SetAttributes((pDatabaseTCSequenceEntry[0]->GetAttributes() & ~TCSEQUENCEENTRY_TYPE_FORMALSEQUENCE) | TCSEQUENCEENTRY_TYPE_SEQUENCE);
										pDatabaseTCSequenceEntry[0]->SetName(pDatabaseTCParameter[0]->GetConstValueAsText());
										nEntry[0]--;
										break;
									}
								}
								if (nParameter[1] < nParameters[1]) continue;
							}
							if (pDatabaseTCSequenceEntry[0]->GetAttributes() & TCSEQUENCEENTRY_TYPE_TEXTCOMMENT) continue;
						}
						bSuccess = FALSE;
						break;
					}
					bSuccess = (nEntry[0] == nEntries[0]) ? bSuccess : FALSE;
					break;
				}
				delete pDatabaseTCParameterList;
			}
			break;
		}
		for (nList = 0, nLists = (INT)pParameterLists.GetSize(); nList < nLists; nList++)
		{
			if ((pDatabaseTCParameterList = (CDatabaseTCParameters *)pParameterLists.GetAt(nList))) delete pDatabaseTCParameterList;
			pParameterLists.RemoveAt(nList);
			nLists--;
			nList--;
		}
		if (!pDatabaseTCSequence[1])
		{
			pStep->SetSequence(EMPTYSTRING);
			pStep->RemoveAll();
			szName.Empty();
		}
		if (!bSuccess  &&  !szName.IsEmpty() && szMessage.IsEmpty())
		{
			szMessage.Format(STRING(IDS_TCPROCEDURE_MESSAGE_BUILDTCSEQUENCE_FAILURE), (!GetParentDisplay()->GetName().IsEmpty()) ? (LPCTSTR)GetParentDisplay()->GetName() : (LPCTSTR)GetParentDisplay()->GetTitle(), (LPCTSTR)szName);
			ShowMessage(szMessage);
		}
		delete pDatabaseTCSequence[0];
	}
	ShowProperties();
	GetDlgItem(IDOK)->EnableWindow((szMessage.IsEmpty()) ? Check() : FALSE);
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnSelchangeSequenceEntry()
{
	ShowEntryProperties();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnSpinchangeReleaseTime()
{
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if ((pEntry = ((pStep = GetStep())) ? pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL)) : (CTCProcedureDocumentSendTCFunctionItem *)NULL)) pEntry->SetReleaseTime(1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASETIME)).GetTime());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnSpinchangeReleaseOffset()
{
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if ((pEntry = ((pStep = GetStep())) ? pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL)) : (CTCProcedureDocumentSendTCFunctionItem *)NULL)) pEntry->SetReleaseDeltaTime(1000 * (DWORD)abs(Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_RELEASEOFFSET)).GetTime()));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnSpinchangeExecutionTime()
{
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if ((pEntry = ((pStep = GetStep())) ? pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL)) : (CTCProcedureDocumentSendTCFunctionItem *)NULL)) pEntry->SetExecutionTime(1000000 * Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONTIME)).GetTime());
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnSpinchangeExecutionOffset()
{
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if ((pEntry = ((pStep = GetStep())) ? pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL)) : (CTCProcedureDocumentSendTCFunctionItem *)NULL)) pEntry->SetExecutionDeltaTime(1000 * (DWORD)abs(Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONOFFSET)).GetTime()), Timespinbox_GetTime(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXECUTIONOFFSET)).GetTime() < 0);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnSpinchangeTimeWindow()
{
	CTCProcedureDocumentSendTCSequenceItem  *pStep;
	CTCProcedureDocumentSendTCFunctionItem  *pEntry;

	if ((pEntry = ((pStep = GetStep())) ? pStep->GetAt((INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_ENTRY, CB_GETCURSEL)) : (CTCProcedureDocumentSendTCFunctionItem *)NULL)) pEntry->SetExecutionVerificationTimeWindow(Spinbox_GetPos(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_SENDTCSEQUENCE_OPTIONS_EXEVERIFICATION_TIMEWINDOW)));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnOK()
{
	CHourglassCursor  cCursor;

	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesSendTCSequenceDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSENDTCSEQUENCEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesSendTCSequenceDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESSENDTCSEQUENCEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesLogMessageDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesLogMessageDialog, CDisplayDialog)

CTCProcedurePropertiesLogMessageDialog::CTCProcedurePropertiesLogMessageDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesLogMessageDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesLogMessageDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentLogMessageItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentLogMessageItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentLogMessageItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentLogMessageItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesLogMessageDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentLogMessageItem *CTCProcedurePropertiesLogMessageDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesLogMessageDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesLogMessageDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

VOID CTCProcedurePropertiesLogMessageDialog::ShowProperties()
{
	CTCProcedureDocumentLogMessageItem  *pStep;

	if ((pStep = GetStep()))
	{
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_PLAINTEXT, (pStep->GetOptions() & TCPROCEDURELOGMESSAGEITEM_OPTIONS_PLAINTEXT) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_UNICODE, (pStep->GetOptions() & TCPROCEDURELOGMESSAGEITEM_OPTIONS_UNICODE) ? TRUE : FALSE);
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_RESET, (pStep->GetOptions() & TCPROCEDURELOGMESSAGEITEM_OPTIONS_RESET) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_MESSAGE)->SetWindowText(pStep->GetMessage());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_FILENAME)->SetWindowText(pStep->GetFileName());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_MESSAGE_STATIC)->EnableWindow(((pStep->GetOptions() & TCPROCEDURELOGMESSAGEITEM_OPTIONS_RESET) != TCPROCEDURELOGMESSAGEITEM_OPTIONS_RESET) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_MESSAGE)->EnableWindow(((pStep->GetOptions() & TCPROCEDURELOGMESSAGEITEM_OPTIONS_RESET) != TCPROCEDURELOGMESSAGEITEM_OPTIONS_RESET) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_UNICODE)->EnableWindow(((pStep->GetOptions() & TCPROCEDURELOGMESSAGEITEM_OPTIONS_PLAINTEXT) && (pStep->GetOptions() & TCPROCEDURELOGMESSAGEITEM_OPTIONS_RESET) != TCPROCEDURELOGMESSAGEITEM_OPTIONS_RESET) ? TRUE : FALSE);
		return;
	}
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_PLAINTEXT, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_UNICODE, FALSE);
	CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_RESET, FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_MESSAGE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_FILENAME)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_MESSAGE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_MESSAGE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_UNICODE)->EnableWindow(FALSE);
}

VOID CTCProcedurePropertiesLogMessageDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_MESSAGE, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_FILENAME, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_PLAINTEXT, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_UNICODE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_RESET, bCheck);
}

BOOL CTCProcedurePropertiesLogMessageDialog::IsModified() CONST
{
	CTCProcedureDocumentLogMessageItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesLogMessageDialog::Check(BOOL bModified) CONST
{
	CTCProcedureDocumentLogMessageItem  *pStep;

	return(((pStep = GetStep()) && (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_RESET) || !pStep->GetMessage().IsEmpty()) && !pStep->GetFileName().IsEmpty()) ? (!bModified || IsModified()) : FALSE);
}

void CTCProcedurePropertiesLogMessageDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesLogMessageDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesLogMessageDialog::PostNcDestroy()
{
	delete m_pStep[1];
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesLogMessageDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesLogMessageDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_PLAINTEXT, OnPlainText)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_UNICODE, OnUnicode)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_RESET, OnReset)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_FILENAME_BROWSE, OnBrowseFileName)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_MESSAGE, OnEditchangeMessage)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_FILENAME, OnEditchangeFileName)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesLogMessageDialog message handlers

BOOL CTCProcedurePropertiesLogMessageDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_MESSAGE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_MESSAGE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_FILENAME_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_FILENAME)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_FILENAME_BROWSE)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_PLAINTEXT)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_UNICODE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_RESET)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCProcedurePropertiesLogMessageDialog::OnPlainText()
{
	UINT  nOptions;
	CTCProcedureDocumentLogMessageItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_UNICODE, FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_UNICODE)->EnableWindow(IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_PLAINTEXT));
		nOptions = (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_PLAINTEXT)) ? (pStep->GetOptions() | TCPROCEDURELOGMESSAGEITEM_OPTIONS_PLAINTEXT) : (pStep->GetOptions() & ~TCPROCEDURELOGMESSAGEITEM_OPTIONS_PLAINTEXT);
		nOptions = nOptions & ~TCPROCEDURELOGMESSAGEITEM_OPTIONS_UNICODE;
		pStep->SetOptions(nOptions);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesLogMessageDialog::OnUnicode()
{
	UINT  nOptions;
	CTCProcedureDocumentLogMessageItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		nOptions = (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_UNICODE)) ? (pStep->GetOptions() | TCPROCEDURELOGMESSAGEITEM_OPTIONS_UNICODE) : (pStep->GetOptions() & ~TCPROCEDURELOGMESSAGEITEM_OPTIONS_UNICODE);
		pStep->SetOptions(nOptions);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesLogMessageDialog::OnReset()
{
	CTCProcedureDocumentLogMessageItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		if (IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_RESET))
		{
			CheckDlgButton(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_UNICODE, FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_MESSAGE)->SetWindowText(EMPTYSTRING);
			pStep->SetOptions(pStep->GetOptions() & ~TCPROCEDURELOGMESSAGEITEM_OPTIONS_UNICODE);
			pStep->SetOptions(pStep->GetOptions() | TCPROCEDURELOGMESSAGEITEM_OPTIONS_RESET);
			pStep->SetMessage(EMPTYSTRING);
		}
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_MESSAGE_STATIC)->EnableWindow(!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_RESET)), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_MESSAGE)->EnableWindow(!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_RESET)), GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_UNICODE)->EnableWindow(!IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_RESET)); !IsDlgButtonChecked(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_RESET); )
		{
			pStep->SetOptions(pStep->GetOptions() & ~TCPROCEDURELOGMESSAGEITEM_OPTIONS_RESET);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_MESSAGE)->SetFocus();
			break;
		}
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesLogMessageDialog::OnBrowseFileName()
{
	CString  szFileName;
	CTCProcedureDocumentLogMessageItem  *pStep;
	CFileBrowseDialog  cFileBrowseDialog(this, IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_FILENAME, STRING(IDS_FILEBROWSEDIALOG_LOGFILEEXTENSION), STRING(IDS_FILEBROWSEDIALOG_LOGFILEFILTER));

	for (; cFileBrowseDialog.DoModal() == IDOK; )
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_FILENAME)->SetWindowText(cFileBrowseDialog.GetPathName());
		break;
	}
	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_FILENAME)->GetWindowText(szFileName);
		pStep->SetFileName(szFileName);
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_FILENAME, EM_SETSEL, 0, -1);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_FILENAME)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesLogMessageDialog::OnEditchangeMessage()
{
	CString  szMessage;
	CTCProcedureDocumentLogMessageItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_MESSAGE)->GetWindowText(szMessage);
		pStep->SetMessage(szMessage);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesLogMessageDialog::OnEditchangeFileName()
{
	CString  szFileName;
	CTCProcedureDocumentLogMessageItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_LOGMESSAGE_FILENAME)->GetWindowText(szFileName);
		pStep->SetFileName(szFileName);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesLogMessageDialog::OnOK()
{
	CTCProcedureDocumentLogMessageItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesLogMessageDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESLOGMESSAGEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesLogMessageDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESLOGMESSAGEDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesUserInteractionDialog dialog

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesUserInteractionDialog, CDisplayDialog)

CTCProcedurePropertiesUserInteractionDialog::CTCProcedurePropertiesUserInteractionDialog() : CDisplayDialog()
{
	//{{AFX_DATA_INIT(CTCProcedurePropertiesUserInteractionDialog)
	// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

INT CTCProcedurePropertiesUserInteractionDialog::Create(CWnd *pParentWnd, CTCProcedureDocumentItem *pStep)
{
	for (m_pStep[0] = m_pStep[1] = (CTCProcedureDocumentUserInteractionItem *)NULL; (m_pStep[0] = (CTCProcedureDocumentUserInteractionItem *)pStep)->IsKindOf(RUNTIME_CLASS(CTCProcedureDocumentUserInteractionItem)); )
	{
		if ((m_pStep[1] = (CTCProcedureDocumentUserInteractionItem *)CTCProcedureDocumentItem::AllocateFromItem(pStep))) return CDisplayDialog::Create(pParentWnd, CTCProcedurePropertiesUserInteractionDialog::IDD);
		break;
	}
	return IDCANCEL;
}

CTCProcedureDocumentUserInteractionItem *CTCProcedurePropertiesUserInteractionDialog::GetStep() CONST
{
	return m_pStep[1];
}

CTCProcedureFlowchartThreadView *CTCProcedurePropertiesUserInteractionDialog::GetParent() CONST
{
	return((CTCProcedureFlowchartThreadView *)CDisplayDialog::GetParent());
}

CTCProcedureWnd *CTCProcedurePropertiesUserInteractionDialog::GetParentDisplay() CONST
{
	return((CTCProcedureWnd *)CDisplayDialog::GetParentDisplay());
}

BOOL CTCProcedurePropertiesUserInteractionDialog::EnumTypes()
{
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_ACKNOWLEDGE)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_REQUEST)) >= 0 && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE, CB_INSERTSTRING, (WPARAM)-1, (LPARAM)STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_CHOOSE)) >= 0) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesUserInteractionDialog::EnumVariables()
{
	INT  nVariable;
	INT  nVariables;
	CString  szType;
	CDatabaseTCProcedure  cDatabaseTCProcedure;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE)->GetWindowText(szType);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_RESETCONTENT);
	for (nVariable = 0, nVariables = (GetParentDisplay()->GetProcedure(&cDatabaseTCProcedure)) ? cDatabaseTCProcedure.GetVariables(m_pDatabaseTCProcedureVariables) : -1; (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_REQUEST) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_CHOOSE)) && nVariable < nVariables; nVariable++)
	{
		if ((pDatabaseTCProcedureVariable = m_pDatabaseTCProcedureVariables.GetAt(nVariable)) != (CDatabaseTCProcedureVariable *)NULL)
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTCProcedureVariable->GetTag());
			continue;
		}
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_SETCURSEL);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	return((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCOUNT) == nVariables) ? TRUE : FALSE);
}

VOID CTCProcedurePropertiesUserInteractionDialog::ShowProperties()
{
	INT  nIndex;
	INT  nVariable;
	INT  nVariables;
	CString  szVariable;
	CStringArray  szVariables;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;
	CTCProcedureDocumentUserInteractionItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE, CB_SETCURSEL, (WPARAM)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE, CB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)((pStep->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_ACKNOWLEDGE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_ACKNOWLEDGE) : ((pStep->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_REQUEST) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_REQUEST) : ((pStep->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_CHOOSE) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_CHOOSE) : EMPTYSTRING))))); pStep->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_REQUEST || pStep->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_CHOOSE; )
		{
			EnumVariables();
			break;
		}
		for (nVariable = 0, nVariables = pStep->GetVariables(szVariables); nVariable < nVariables; nVariable++)
		{
			if ((pDatabaseTCProcedureVariable = m_pDatabaseTCProcedureVariables.GetAt(m_pDatabaseTCProcedureVariables.Find(szVariables.GetAt(nVariable)))))
			{
				if ((nIndex = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTCProcedureVariable->GetTag())) >= 0)
				{
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)pDatabaseTCProcedureVariable->GetTag());
					SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_DELETESTRING, nIndex);
				}
			}
		}
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_SETCURSEL);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_SETCURSEL);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_MESSAGE)->SetWindowText(pStep->GetMessage());
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_ADD)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)(szVariable = Listbox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCURSEL)))) < 0 && !szVariable.IsEmpty()) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCURSEL) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES)->EnableWindow((pStep->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_CHOOSE  &&  SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_STATIC)->EnableWindow((pStep->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_CHOOSE  &&  SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->EnableWindow((pStep->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_CHOOSE  &&  SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		ShowValues();
		return;
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE, CB_SETCURSEL, (WPARAM)-1);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_RESETCONTENT);
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_RESETCONTENT);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_MESSAGE)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_STATIC)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->EnableWindow(FALSE);
	ShowValues();
}

VOID CTCProcedurePropertiesUserInteractionDialog::ShowValues()
{
	INT  nValue;
	INT  nValues;
	CString  szValue;
	CStringArray  szVariableValues;
	CTCProcedureDocumentUserInteractionItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (nValue = 0, nValues = pStep->GetVariableValues(Listbox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCURSEL)), szVariableValues), SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_RESETCONTENT); nValue < nValues; nValue++)
		{
			SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_INSERTSTRING, (WPARAM)-1, (LPARAM)(LPCTSTR)szVariableValues.GetAt(nValue));
			continue;
		}
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_SETCURSEL);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->GetWindowText(szValue);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_ADD)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue) < 0 && !szValue.IsEmpty()) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_GETCURSEL) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_GETCOUNT) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
}

VOID CTCProcedurePropertiesUserInteractionDialog::AdjustToPrivileges()
{
	BOOL  bCheck;

	AccessControl(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE, (bCheck = CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE)));
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_MESSAGE, bCheck);
	AccessControl(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER, bCheck);
}

BOOL CTCProcedurePropertiesUserInteractionDialog::IsModified() CONST
{
	CTCProcedureDocumentUserInteractionItem  *pStep;

	return(((pStep = GetStep())) ? !m_pStep[0]->Compare(pStep) : FALSE);
}

BOOL CTCProcedurePropertiesUserInteractionDialog::Check(BOOL bModified) CONST
{
	INT  nValue;
	INT  nValues;
	INT  nVariable;
	INT  nVariables;
	CStringArray  szVariables;
	CStringArray  szVariableValues;
	CTCProcedureDocumentUserInteractionItem  *pStep;

	if ((pStep = GetStep()))
	{
		if (((pStep->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_ACKNOWLEDGE  &&  !pStep->GetVariables(szVariables)) || ((pStep->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_REQUEST || pStep->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_CHOOSE) && pStep->GetVariables(szVariables) > 0)) && !pStep->GetMessage().IsEmpty())
		{
			for (nVariable = 0, nVariables = (INT)szVariables.GetSize(); nVariable < nVariables; nVariable++)
			{
				for (nValue = 0, nValues = pStep->GetVariableValues(szVariables.GetAt(nVariable), szVariableValues); nValue < nValues; nValue++)
				{
					if (pStep->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_CHOOSE  &&  szVariableValues.GetAt(nValue).IsEmpty()) break;
					continue;
				}
				if ((pStep->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_CHOOSE  &&  !nValues) || nValue < nValues) break;
			}
			return((nVariable == nVariables) ? (!bModified || IsModified()) : FALSE);
		}
	}
	return FALSE;
}

void CTCProcedurePropertiesUserInteractionDialog::DoDataExchange(CDataExchange *pDX)
{
	CDisplayDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CTCProcedurePropertiesUserInteractionDialog)
	// NOTE: the ClassWizard will add DDX and DDV calls here
	//}}AFX_DATA_MAP
}

void CTCProcedurePropertiesUserInteractionDialog::PostNcDestroy()
{
	delete m_pStep[1];
	m_pDatabaseTCProcedureVariables.RemoveAll();
	CDisplayDialog::PostNcDestroy();
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesUserInteractionDialog, CDisplayDialog)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesUserInteractionDialog)
	ON_WM_HELPINFO()
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_ADD, OnAddVariable)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_REMOVE, OnRemoveVariable)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_ADD, OnAddVariableValue)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVE, OnRemoveVariableValue)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVEALL, OnRemoveAllVariableValues)
	ON_BN_CLICKED(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_HELP, OnHelp)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_MESSAGE, OnEditchangeMessage)
	ON_EN_CHANGE(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER, OnEditchangeVariableValue)
	ON_CBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE, OnSelchangeType)
	ON_LBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, OnSelchangeAvailableVariable)
	ON_LBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, OnSelchangeSelectedVariable)
	ON_LBN_SELCHANGE(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, OnSelchangeVariableValue)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesUserInteractionDialog message handlers

BOOL CTCProcedurePropertiesUserInteractionDialog::OnInitDialog()
{
	CRect  rDialog[2];
	CHourglassCursor  cCursor;

	CDisplayDialog::OnInitDialog();
	for (EnumTypes(), GetParentDisplay()->GetWindowRect(rDialog[0]), GetWindowRect(rDialog[1]); TRUE; )
	{
		MoveWindow(rDialog[0].left + (rDialog[0].Width() - rDialog[1].Width()) / 2, rDialog[0].top + GetSystemMetrics(SM_CYCAPTION) + 5 * GetSystemMetrics(SM_CYFRAME), rDialog[1].Width(), rDialog[1].Height(), FALSE);
		break;
	}
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_DETAILS)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_MESSAGE_STATIC)->EnableWindow();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_MESSAGE)->EnableWindow();
	ShowProperties();
	AdjustToPrivileges();
	return TRUE;
}

void CTCProcedurePropertiesUserInteractionDialog::OnAddVariable()
{
	INT  nIndex[2];
	CString  szType;
	CString  szVariable;
	CStringArray  szVariables;
	CTCProcedureDocumentUserInteractionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		if (pStep->GetVariables(szVariables) >= 0)
		{
			szVariables.InsertAt((nIndex[1] = ((nIndex[1] = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCURSEL)) < 0) ? (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) : (nIndex[1] + 1)), Listbox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES), (nIndex[0] = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCURSEL))));
			pStep->SetVariables(szVariables);
		}
	}
	if (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_INSERTSTRING, (nIndex[1] = ((nIndex[1] = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCURSEL)) < 0) ? (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) : (nIndex[1] + 1)), (LPARAM)(LPCTSTR)(szVariable = Listbox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES), (nIndex[0] = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCURSEL))))) >= 0)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_DELETESTRING, nIndex[0]);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_SETCURSEL, nIndex[1]);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_SETCURSEL, 0);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_ADD)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCURSEL) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCURSEL) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES)->EnableWindow(((szType = Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE, CB_GETCURSEL))) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_CHOOSE) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_CHOOSE) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_CHOOSE) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES)->SetFocus();
		ShowValues();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesUserInteractionDialog::OnRemoveVariable()
{
	INT  nIndex[2];
	CString  szType;
	CString  szVariable;
	CStringArray  szVariables;
	CTCProcedureDocumentUserInteractionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		if ((nIndex[0] = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCURSEL)) < pStep->GetVariables(szVariables))
		{
			szVariables.RemoveAt(nIndex[0]);
			pStep->SetVariables(szVariables);
		}
	}
	if (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_INSERTSTRING, (nIndex[1] = ((nIndex[1] = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCURSEL)) < 0) ? (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCOUNT) : (nIndex[1] + 1)), (LPARAM)(LPCTSTR)(szVariable = Listbox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES), (nIndex[0] = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCURSEL))))) >= 0)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_DELETESTRING, nIndex[0]);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_SETCURSEL, nIndex[1]);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_SETCURSEL, 0);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_ADD)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCURSEL) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCURSEL) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES)->EnableWindow(((szType = Combobox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE, CB_GETCURSEL))) == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_CHOOSE) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_STATIC)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_CHOOSE) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->EnableWindow((szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_CHOOSE) && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES)->SetFocus();
		ShowValues();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesUserInteractionDialog::OnAddVariableValue()
{
	INT  nIndex;
	CString  szValue;
	CString  szVariable;
	CStringArray  szVariableValues;
	CTCProcedureDocumentUserInteractionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->GetWindowText(szValue); pStep->GetVariableValues((szVariable = Listbox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCURSEL))), szVariableValues) >= 0; )
		{
			szVariableValues.InsertAt((nIndex = ((nIndex = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_GETCURSEL)) < 0) ? (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_GETCOUNT) : (nIndex + 1)), szValue);
			pStep->SetVariableValues(szVariable, szVariableValues);
			break;
		}
	}
	if (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_INSERTSTRING, (WPARAM)(nIndex = ((nIndex = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_GETCURSEL)) < 0) ? (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_GETCOUNT) : (nIndex + 1)), (LPARAM)(LPCTSTR)szValue) >= 0)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_SETCURSEL, nIndex);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS)->EnableWindow();
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVE)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVEALL)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesUserInteractionDialog::OnRemoveVariableValue()
{
	INT  nIndex;
	CString  szVariable;
	CStringArray  szVariableValues;
	CTCProcedureDocumentUserInteractionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (; (nIndex = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_GETCURSEL)) < pStep->GetVariableValues((szVariable = Listbox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCURSEL))), szVariableValues); )
		{
			szVariableValues.RemoveAt(nIndex);
			pStep->SetVariableValues(szVariable, szVariableValues);
			break;
		}
	}
	if (SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_DELETESTRING, (nIndex = (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_GETCURSEL))) >= 0)
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_SETCURSEL, 0);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_GETCOUNT) > 0) ? TRUE : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVE)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_GETCURSEL) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVEALL)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_GETCOUNT) > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesUserInteractionDialog::OnRemoveAllVariableValues()
{
	CString  szVariable;
	CStringArray  szVariableValues;
	CTCProcedureDocumentUserInteractionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep()))
	{
		for (; pStep->GetVariableValues((szVariable = Listbox_GetText(GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES), (INT)SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCURSEL))), szVariableValues) > 0; )
		{
			szVariableValues.RemoveAll();
			pStep->SetVariableValues(szVariable, szVariableValues);
			break;
		}
	}
	SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_RESETCONTENT);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->SetWindowText(EMPTYSTRING);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_ADD)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVE)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVEALL)->EnableWindow(FALSE);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->SetFocus();
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesUserInteractionDialog::OnEditchangeMessage()
{
	CString  szMessage;
	CTCProcedureDocumentUserInteractionItem  *pStep;

	if ((pStep = GetStep()))
	{
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_MESSAGE)->GetWindowText(szMessage);
		pStep->SetMessage(szMessage);
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesUserInteractionDialog::OnEditchangeVariableValue()
{
	CString  szValue;

	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->GetWindowText(szValue);
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_ADD)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_FINDSTRINGEXACT, (WPARAM)-1, (LPARAM)(LPCTSTR)szValue) < 0 && !szValue.IsEmpty()) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesUserInteractionDialog::OnSelchangeType()
{
	INT  nVariable;
	INT  nVariables;
	CString  szType;
	CStringArray  szVariables;
	CStringArray  szVariableValues;
	CTCProcedureDocumentUserInteractionItem  *pStep;

	if ((pStep = GetStep()))
	{
		for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE)->GetWindowText(szType); szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_ACKNOWLEDGE); )
		{
			pStep->SetAction(TCPROCEDUREUSERINTERACTIONITEM_ACTION_ACKNOWLEDGE);
			pStep->SetVariables(szVariables);
			break;
		}
		for (; szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_REQUEST); )
		{
			pStep->SetAction(TCPROCEDUREUSERINTERACTIONITEM_ACTION_REQUEST);
			break;
		}
		for (; szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_CHOOSE); )
		{
			pStep->SetAction(TCPROCEDUREUSERINTERACTIONITEM_ACTION_CHOOSE);
			break;
		}
		for (nVariable = 0, nVariables = (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_REQUEST) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_CHOOSE)) ? pStep->GetVariables(szVariables) : 0; nVariable < nVariables; nVariable++)
		{
			pStep->SetVariableValues(szVariables.GetAt(nVariable), szVariableValues);
			continue;
		}
	}
	for (GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_TYPE)->GetWindowText(szType); szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_ACKNOWLEDGE); )
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_RESETCONTENT);
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_RESETCONTENT);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_REMOVE)->EnableWindow(FALSE);
		break;
	}
	if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_ACKNOWLEDGE) || szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_REQUEST))
	{
		SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_RESETCONTENT);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->SetWindowText(EMPTYSTRING);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_STATIC)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_ADD)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVE)->EnableWindow(FALSE);
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVEALL)->EnableWindow(FALSE);
	}
	if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_REQUEST))
	{
		if (!SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT))
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_ADD)->EnableWindow((EnumVariables() && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCURSEL) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_REMOVE)->EnableWindow(FALSE);
		}
	}
	if (szType == STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_STEPSUSERINTERACTIONTYPE_CHOOSE))
	{
		if (!SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT))
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_ADD)->EnableWindow((EnumVariables() && SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_AVAILABLEVARIABLES, LB_GETCURSEL) >= 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_REMOVE)->EnableWindow(FALSE);
		}
		if (!SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS, LB_GETCOUNT))
		{
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_STATIC)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBERS)->EnableWindow((SendDlgItemMessage(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_SELECTEDVARIABLES, LB_GETCOUNT) > 0) ? TRUE : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_ADD)->EnableWindow((GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->GetWindowTextLength() > 0) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVE)->EnableWindow(FALSE);
			GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVEALL)->EnableWindow(FALSE);
		}
		GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER)->SetFocus();
	}
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesUserInteractionDialog::OnSelchangeAvailableVariable()
{
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_ADD)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesUserInteractionDialog::OnSelchangeSelectedVariable()
{
	ShowValues();
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VARIABLE_REMOVE)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDOK)->EnableWindow(Check());
}

void CTCProcedurePropertiesUserInteractionDialog::OnSelchangeVariableValue()
{
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVE)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
	GetDlgItem(IDC_TCPROCEDURE_PROPERTIES_USERINTERACTION_VALUES_NUMBER_REMOVEALL)->EnableWindow(CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE));
}

void CTCProcedurePropertiesUserInteractionDialog::OnOK()
{
	CTCProcedureDocumentUserInteractionItem  *pStep;
	CHourglassCursor  cCursor;

	if ((pStep = GetStep())) m_pStep[0]->Copy(pStep);
	CDisplayDialog::OnOK();
}

BOOL CTCProcedurePropertiesUserInteractionDialog::OnHelpInfo(HELPINFO *pHelpInfo)
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESUSERINTERACTIONDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
	return TRUE;
}

void CTCProcedurePropertiesUserInteractionDialog::OnHelp()
{
	CHourglassCursor  cCursor;

	ShowMessage((!ShowHelp(STRING(IDS_ONLINEHELP_TCPROCEDUREPROPERTIESUSERINTERACTIONDIALOG_TOPIC))) ? SYSTEM_WARNING_ONLINEHELP_FAILURE : SYSTEM_NOERROR);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesThreadDocument

IMPLEMENT_DYNAMIC(CTCProcedurePropertiesThreadDocument, CDocument)

CTCProcedurePropertiesThreadDocument::CTCProcedurePropertiesThreadDocument() : CDocument()
{
	return;
}

CTCProcedurePropertiesThreadDocument::~CTCProcedurePropertiesThreadDocument()
{
	return;
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesThreadView

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesThreadView, CScrollView)

CTCProcedurePropertiesThreadView::CTCProcedurePropertiesThreadView() : CScrollView()
{
	m_rDialog[0].SetRectEmpty();
	m_rDialog[1].SetRectEmpty();
	m_pDialog = (CLocaleDialog *)NULL;
}

BOOL CTCProcedurePropertiesThreadView::Create(CWnd *pParentWnd, CONST RECT &rect, UINT nDialogID, BOOL bVisible)
{
	CRect  rDialog;
	CSize  sizeDialog;
	CCreateContext  cContext;

	for (cContext.m_pCurrentDoc = new CTCProcedurePropertiesThreadDocument; CScrollView::Create(AfxRegisterWndClass(CS_DBLCLKS | CS_NOCLOSE, LoadCursor((HINSTANCE)NULL, IDC_ARROW), GetSysColorBrush(COLOR_3DFACE)), (LPCTSTR)NULL, WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | ((bVisible) ? WS_VISIBLE : 0), rect, pParentWnd, 0, &cContext); )
	{
		if ((m_pDialog = (nDialogID == CTCProcedurePropertiesOverviewDialog::IDD) ? new CTCProcedurePropertiesOverviewDialog : ((nDialogID == CTCProcedurePropertiesArgumentsDialog::IDD) ? new CTCProcedurePropertiesArgumentsDialog : ((nDialogID == CTCProcedurePropertiesVariablesDialog::IDD) ? new CTCProcedurePropertiesVariablesDialog : ((nDialogID == CTCProcedurePropertiesThreadsDialog::IDD) ? new CTCProcedurePropertiesThreadsDialog : ((nDialogID == CTCProcedurePropertiesStepsDialog::IDD) ? new CTCProcedurePropertiesStepsDialog : ((nDialogID == CTCProcedurePropertiesDebugDialog::IDD) ? new CTCProcedurePropertiesDebugDialog : ((nDialogID == CTCProcedurePropertiesCodeDialog::IDD) ? new CTCProcedurePropertiesCodeDialog : ((nDialogID == CTCProcedurePropertiesTCStackDialog::IDD) ? new CTCProcedurePropertiesTCStackDialog : (CLocaleDialog *)NULL)))))))))
		{
			if (m_pDialog->Create(nDialogID, this))
			{
				m_pDialog->GetWindowRect(rDialog);
				sizeDialog.cx = rDialog.Width();
				sizeDialog.cy = rDialog.Height();
				SetScrollSizes(MM_TEXT, sizeDialog);
				return TRUE;
			}
			delete m_pDialog;
			m_pDialog = (CLocaleDialog *)NULL;
		}
		break;
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesThreadView::SetProperties(CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;
	CTCProcedurePropertiesDebugDialog  *pDebugPage;
	CTCProcedurePropertiesStepsDialog  *pStepsPage;
	CTCProcedurePropertiesTCStackDialog  *pTCStackPage;
	CTCProcedurePropertiesThreadsDialog  *pThreadsPage;
	CTCProcedurePropertiesOverviewDialog  *pOverviewPage;
	CTCProcedurePropertiesVariablesDialog  *pVariablesPage;
	CTCProcedurePropertiesArgumentsDialog  *pArgumentsPage;

	if ((pOverviewPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesOverviewDialog))) ? (CTCProcedurePropertiesOverviewDialog *)m_pDialog : (CTCProcedurePropertiesOverviewDialog *)NULL)) return pOverviewPage->SetInfo(pDatabaseTCProcedure);
	if ((pArgumentsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesArgumentsDialog))) ? (CTCProcedurePropertiesArgumentsDialog *)m_pDialog : (CTCProcedurePropertiesArgumentsDialog *)NULL)) return pArgumentsPage->SetInfo(pDatabaseTCProcedure);
	if ((pVariablesPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesVariablesDialog))) ? (CTCProcedurePropertiesVariablesDialog *)m_pDialog : (CTCProcedurePropertiesVariablesDialog *)NULL)) return pVariablesPage->SetInfo(pDatabaseTCProcedure);
	if ((pThreadsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesThreadsDialog))) ? (CTCProcedurePropertiesThreadsDialog *)m_pDialog : (CTCProcedurePropertiesThreadsDialog *)NULL)) return pThreadsPage->SetInfo(pDatabaseTCProcedure);
	if ((pStepsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesStepsDialog))) ? (CTCProcedurePropertiesStepsDialog *)m_pDialog : (CTCProcedurePropertiesStepsDialog *)NULL)) return pStepsPage->SetInfo(pDatabaseTCProcedure);
	if ((pDebugPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesDebugDialog))) ? (CTCProcedurePropertiesDebugDialog *)m_pDialog : (CTCProcedurePropertiesDebugDialog *)NULL)) return pDebugPage->SetInfo(pDatabaseTCProcedure);
	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) return pCodePage->SetInfo(pDatabaseTCProcedure);
	if ((pTCStackPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesTCStackDialog))) ? (CTCProcedurePropertiesTCStackDialog *)m_pDialog : (CTCProcedurePropertiesTCStackDialog *)NULL)) return pTCStackPage->SetInfo(pDatabaseTCProcedure);
	return FALSE;
}

BOOL CTCProcedurePropertiesThreadView::GetProperties(CDatabaseTCProcedure *pDatabaseTCProcedure) CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;
	CTCProcedurePropertiesDebugDialog  *pDebugPage;
	CTCProcedurePropertiesStepsDialog  *pStepsPage;
	CTCProcedurePropertiesTCStackDialog  *pTCStackPage;
	CTCProcedurePropertiesThreadsDialog  *pThreadsPage;
	CTCProcedurePropertiesOverviewDialog  *pOverviewPage;
	CTCProcedurePropertiesVariablesDialog  *pVariablesPage;
	CTCProcedurePropertiesArgumentsDialog  *pArgumentsPage;

	if ((pOverviewPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesOverviewDialog))) ? (CTCProcedurePropertiesOverviewDialog *)m_pDialog : (CTCProcedurePropertiesOverviewDialog *)NULL)) return pOverviewPage->GetInfo(pDatabaseTCProcedure);
	if ((pArgumentsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesArgumentsDialog))) ? (CTCProcedurePropertiesArgumentsDialog *)m_pDialog : (CTCProcedurePropertiesArgumentsDialog *)NULL)) return pArgumentsPage->GetInfo(pDatabaseTCProcedure);
	if ((pVariablesPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesVariablesDialog))) ? (CTCProcedurePropertiesVariablesDialog *)m_pDialog : (CTCProcedurePropertiesVariablesDialog *)NULL)) return pVariablesPage->GetInfo(pDatabaseTCProcedure);
	if ((pThreadsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesThreadsDialog))) ? (CTCProcedurePropertiesThreadsDialog *)m_pDialog : (CTCProcedurePropertiesThreadsDialog *)NULL)) return pThreadsPage->GetInfo(pDatabaseTCProcedure);
	if ((pStepsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesStepsDialog))) ? (CTCProcedurePropertiesStepsDialog *)m_pDialog : (CTCProcedurePropertiesStepsDialog *)NULL)) return pStepsPage->GetInfo(pDatabaseTCProcedure);
	if ((pDebugPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesDebugDialog))) ? (CTCProcedurePropertiesDebugDialog *)m_pDialog : (CTCProcedurePropertiesDebugDialog *)NULL)) return pDebugPage->GetInfo(pDatabaseTCProcedure);
	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) return pCodePage->GetInfo(pDatabaseTCProcedure);
	if ((pTCStackPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesTCStackDialog))) ? (CTCProcedurePropertiesTCStackDialog *)m_pDialog : (CTCProcedurePropertiesTCStackDialog *)NULL)) return pTCStackPage->GetInfo(pDatabaseTCProcedure);
	return FALSE;
}

BOOL CTCProcedurePropertiesThreadView::SetBreakpoints(LPCTSTR pszThread, CONST CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints)
{
	CTCProcedurePropertiesDebugDialog  *pDebugPage;

	return(((pDebugPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesDebugDialog))) ? (CTCProcedurePropertiesDebugDialog *)m_pDialog : (CTCProcedurePropertiesDebugDialog *)NULL)) ? pDebugPage->SetBreakpoints(pszThread, pDatabaseTCProcedureThreadBreakpoints) : FALSE);
}

INT CTCProcedurePropertiesThreadView::GetBreakpoints(LPCTSTR pszThread, CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints) CONST
{
	CTCProcedurePropertiesDebugDialog  *pDebugPage;

	return(((pDebugPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesDebugDialog))) ? (CTCProcedurePropertiesDebugDialog *)m_pDialog : (CTCProcedurePropertiesDebugDialog *)NULL)) ? pDebugPage->GetBreakpoints(pszThread, pDatabaseTCProcedureThreadBreakpoints) : 0);
}

VOID CTCProcedurePropertiesThreadView::UpdateSteps(LPCTSTR pszThread, CONST CPtrArray &pSteps)
{
	CTCProcedurePropertiesStepsDialog  *pStepsPage;
	CTCProcedurePropertiesDebugDialog  *pDebugPage;

	if ((pStepsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesStepsDialog))) ? (CTCProcedurePropertiesStepsDialog *)m_pDialog : (CTCProcedurePropertiesStepsDialog *)NULL)) pStepsPage->UpdateSteps(pSteps);
	if ((pDebugPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesDebugDialog))) ? (CTCProcedurePropertiesDebugDialog *)m_pDialog : (CTCProcedurePropertiesDebugDialog *)NULL)) pDebugPage->UpdateSteps(pszThread, pSteps);
}

VOID CTCProcedurePropertiesThreadView::UpdateIdentifiers(CTMEnvironment *pTMEnvironment, CTCEnvironment *pTCEnvironment, CONST CStringArray &szIdentifiers, CONST CUIntArray &nIdentifierTypes, CONST CLongUIntArray &nIdentifierAttributes, CONST CPtrArray &pIdentifiers)
{
	CTCProcedurePropertiesDebugDialog  *pDebugPage;

	if ((pDebugPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesDebugDialog))) ? (CTCProcedurePropertiesDebugDialog *)m_pDialog : (CTCProcedurePropertiesDebugDialog *)NULL)) pDebugPage->UpdateIdentifiers(pTMEnvironment, pTCEnvironment, szIdentifiers, nIdentifierTypes, nIdentifierAttributes, pIdentifiers);
}

VOID CTCProcedurePropertiesThreadView::UpdateExecutionpoint(LPCTSTR pszThread, UINT nState, UINT nLine)
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->UpdateExecutionpoint(pszThread, nState, nLine);
}

BOOL CTCProcedurePropertiesThreadView::UpdateTCStack(CONST CTCProcedureItem *pItem)
{
	CTCProcedurePropertiesTCStackDialog  *pTCStackPage;

	return(((pTCStackPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesTCStackDialog))) ? (CTCProcedurePropertiesTCStackDialog *)m_pDialog : (CTCProcedurePropertiesTCStackDialog *)NULL)) ? pTCStackPage->UpdateTCStack(pItem) : FALSE);
}
BOOL CTCProcedurePropertiesThreadView::UpdateTCStack(CONST CTCProcedureItem *pItem, LPCTSTR pszStatus, LPCTSTR pszResult)
{
	CTCProcedurePropertiesTCStackDialog  *pTCStackPage;

	return(((pTCStackPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesTCStackDialog))) ? (CTCProcedurePropertiesTCStackDialog *)m_pDialog : (CTCProcedurePropertiesTCStackDialog *)NULL)) ? pTCStackPage->UpdateTCStack(pItem, pszStatus, pszResult) : FALSE);
}
BOOL CTCProcedurePropertiesThreadView::UpdateTCStack(CONST CTCProcedureItem *pItem, CONST CTCPacket *pTCPacket, BOOL &bLogging)
{
	CTCProcedurePropertiesTCStackDialog  *pTCStackPage;

	return(((pTCStackPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesTCStackDialog))) ? (CTCProcedurePropertiesTCStackDialog *)m_pDialog : (CTCProcedurePropertiesTCStackDialog *)NULL)) ? pTCStackPage->UpdateTCStack(pItem, pTCPacket, bLogging) : FALSE);
}
VOID CTCProcedurePropertiesThreadView::UpdateTCStack(BOOL bRunning, BOOL bSuspended)
{
	CTCProcedurePropertiesTCStackDialog  *pTCStackPage;

	if ((pTCStackPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesTCStackDialog))) ? (CTCProcedurePropertiesTCStackDialog *)m_pDialog : (CTCProcedurePropertiesTCStackDialog *)NULL)) pTCStackPage->UpdateTCStack(bRunning, bSuspended);
}

BOOL CTCProcedurePropertiesThreadView::IsTCStackReleaseWaitModeEnabled() CONST
{
	CTCProcedurePropertiesTCStackDialog  *pTCStackPage;

	return(((pTCStackPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesTCStackDialog))) ? (CTCProcedurePropertiesTCStackDialog *)m_pDialog : (CTCProcedurePropertiesTCStackDialog *)NULL)) ? pTCStackPage->IsTCStackReleaseWaitModeEnabled() : FALSE);
}

CTimeSpan CTCProcedurePropertiesThreadView::GetTCStackReleaseWaitInterval() CONST
{
	CTCProcedurePropertiesTCStackDialog  *pTCStackPage;

	return(((pTCStackPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesTCStackDialog))) ? (CTCProcedurePropertiesTCStackDialog *)m_pDialog : (CTCProcedurePropertiesTCStackDialog *)NULL)) ? pTCStackPage->GetTCStackReleaseWaitInterval() : 0);
}

BOOL CTCProcedurePropertiesThreadView::IsTCStackPreexecutionVerificationEnabled() CONST
{
	CTCProcedurePropertiesTCStackDialog  *pTCStackPage;

	return(((pTCStackPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesTCStackDialog))) ? (CTCProcedurePropertiesTCStackDialog *)m_pDialog : (CTCProcedurePropertiesTCStackDialog *)NULL)) ? pTCStackPage->IsTCStackPreexecutionVerificationEnabled() : FALSE);
}

BOOL CTCProcedurePropertiesThreadView::IsTCStackExecutionVerificationEnabled() CONST
{
	CTCProcedurePropertiesTCStackDialog  *pTCStackPage;

	return(((pTCStackPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesTCStackDialog))) ? (CTCProcedurePropertiesTCStackDialog *)m_pDialog : (CTCProcedurePropertiesTCStackDialog *)NULL)) ? pTCStackPage->IsTCStackExecutionVerificationEnabled() : FALSE);
}

VOID CTCProcedurePropertiesThreadView::ResetTCStack()
{
	CTCProcedurePropertiesTCStackDialog  *pTCStackPage;

	if ((pTCStackPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesTCStackDialog))) ? (CTCProcedurePropertiesTCStackDialog *)m_pDialog : (CTCProcedurePropertiesTCStackDialog *)NULL)) pTCStackPage->ResetTCStack();
}

BOOL CTCProcedurePropertiesThreadView::GetPrintProperties(CRichEditCtrl **pEditCtrl) CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->GetPrintProperties(pEditCtrl) : FALSE);
}

VOID CTCProcedurePropertiesThreadView::DoFindCode()
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->DoFindCode();
}

BOOL CTCProcedurePropertiesThreadView::CanFindCode() CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->CanFindCode() : FALSE);
}

VOID CTCProcedurePropertiesThreadView::DoFindNextCode(BOOL bMatchCase, BOOL bMatchWord)
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->DoFindNextCode(bMatchCase, bMatchWord);
}
VOID CTCProcedurePropertiesThreadView::DoFindNextCode(LPCTSTR pszText, BOOL bSearchAll, BOOL bMatchCase, BOOL bMatchWord)
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->DoFindNextCode(pszText, bSearchAll, bMatchCase, bMatchWord);
}

BOOL CTCProcedurePropertiesThreadView::CanFindNextCode() CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->CanFindNextCode() : FALSE);
}

VOID CTCProcedurePropertiesThreadView::DoFindPreviousCode(BOOL bMatchCase, BOOL bMatchWord)
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->DoFindPreviousCode(bMatchCase, bMatchWord);
}
VOID CTCProcedurePropertiesThreadView::DoFindPreviousCode(LPCTSTR pszText, BOOL bSearchAll, BOOL bMatchCase, BOOL bMatchWord)
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->DoFindPreviousCode(pszText, bSearchAll, bMatchCase, bMatchWord);
}

BOOL CTCProcedurePropertiesThreadView::CanFindPreviousCode() CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->CanFindPreviousCode() : FALSE);
}

VOID CTCProcedurePropertiesThreadView::DoReplaceCode()
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->DoReplaceCode();
}

BOOL CTCProcedurePropertiesThreadView::CanReplaceCode() CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->CanReplaceCode() : FALSE);
}

VOID CTCProcedurePropertiesThreadView::DoGoToCode()
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->DoGoToCode();
}
BOOL CTCProcedurePropertiesThreadView::DoGoToCode(LPCTSTR pszLine)
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->GoToCode(pszLine) : FALSE);
}

BOOL CTCProcedurePropertiesThreadView::CanGoToCode() CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->CanGoToCode() : FALSE);
}

VOID CTCProcedurePropertiesThreadView::DoUndo()
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->DoUndo();
}

BOOL CTCProcedurePropertiesThreadView::CanUndo() CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->CanUndo() : FALSE);
}

VOID CTCProcedurePropertiesThreadView::DoRedo()
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->DoRedo();
}

BOOL CTCProcedurePropertiesThreadView::CanRedo() CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->CanRedo() : FALSE);
}

VOID CTCProcedurePropertiesThreadView::DoCutSel()
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->DoCutSel();
}

BOOL CTCProcedurePropertiesThreadView::CanCutSel() CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->CanCutSel() : FALSE);
}

VOID CTCProcedurePropertiesThreadView::DoCopySel()
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->DoCopySel();
}

BOOL CTCProcedurePropertiesThreadView::CanCopySel() CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->CanCopySel() : FALSE);
}

VOID CTCProcedurePropertiesThreadView::DoPasteSel()
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->DoPasteSel();
}

BOOL CTCProcedurePropertiesThreadView::CanPasteSel() CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->CanPasteSel() : FALSE);
}

VOID CTCProcedurePropertiesThreadView::DoDeleteSel()
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->DoDeleteSel();
}

BOOL CTCProcedurePropertiesThreadView::CanDeleteSel() CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->CanDeleteSel() : FALSE);
}

VOID CTCProcedurePropertiesThreadView::DoSelectAllCode()
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->DoSelectAllCode();
}

VOID CTCProcedurePropertiesThreadView::UnSelectAllCode()
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->UnSelectAllCode();
}

BOOL CTCProcedurePropertiesThreadView::CanSelectAllCode() CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->CanSelectAllCode() : FALSE);
}

BOOL CTCProcedurePropertiesThreadView::HasCode() CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->HasCode() : FALSE);
}

VOID CTCProcedurePropertiesThreadView::ShowDialogs(BOOL bShow)
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) pCodePage->ShowDialogs(bShow);
}

BOOL CTCProcedurePropertiesThreadView::HasDialogs() CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;

	return(((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) ? pCodePage->HasDialogs() : FALSE);
}

VOID CTCProcedurePropertiesThreadView::UpdateLayout(BOOL bActivate)
{
	if (bActivate)
	{
		m_rDialog[0].SetRectEmpty();
		m_rDialog[1].SetRectEmpty();
	}
}

BOOL CTCProcedurePropertiesThreadView::IsModified() CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;
	CTCProcedurePropertiesDebugDialog  *pDebugPage;
	CTCProcedurePropertiesStepsDialog  *pStepsPage;
	CTCProcedurePropertiesTCStackDialog  *pTCStackPage;
	CTCProcedurePropertiesThreadsDialog  *pThreadsPage;
	CTCProcedurePropertiesOverviewDialog  *pOverviewPage;
	CTCProcedurePropertiesVariablesDialog  *pVariablesPage;
	CTCProcedurePropertiesArgumentsDialog  *pArgumentsPage;

	if ((pOverviewPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesOverviewDialog))) ? (CTCProcedurePropertiesOverviewDialog *)m_pDialog : (CTCProcedurePropertiesOverviewDialog *)NULL)) return pOverviewPage->IsModified();
	if ((pArgumentsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesArgumentsDialog))) ? (CTCProcedurePropertiesArgumentsDialog *)m_pDialog : (CTCProcedurePropertiesArgumentsDialog *)NULL)) return pArgumentsPage->IsModified();
	if ((pVariablesPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesVariablesDialog))) ? (CTCProcedurePropertiesVariablesDialog *)m_pDialog : (CTCProcedurePropertiesVariablesDialog *)NULL)) return pVariablesPage->IsModified();
	if ((pThreadsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesThreadsDialog))) ? (CTCProcedurePropertiesThreadsDialog *)m_pDialog : (CTCProcedurePropertiesThreadsDialog *)NULL)) return pThreadsPage->IsModified();
	if ((pStepsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesStepsDialog))) ? (CTCProcedurePropertiesStepsDialog *)m_pDialog : (CTCProcedurePropertiesStepsDialog *)NULL)) return pStepsPage->IsModified();
	if ((pDebugPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesDebugDialog))) ? (CTCProcedurePropertiesDebugDialog *)m_pDialog : (CTCProcedurePropertiesDebugDialog *)NULL)) return pDebugPage->IsModified();
	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) return pCodePage->IsModified();
	if ((pTCStackPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesTCStackDialog))) ? (CTCProcedurePropertiesTCStackDialog *)m_pDialog : (CTCProcedurePropertiesTCStackDialog *)NULL)) return pTCStackPage->IsModified();
	return FALSE;
}

BOOL CTCProcedurePropertiesThreadView::Check(BOOL bModified) CONST
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;
	CTCProcedurePropertiesDebugDialog  *pDebugPage;
	CTCProcedurePropertiesStepsDialog  *pStepsPage;
	CTCProcedurePropertiesTCStackDialog  *pTCStackPage;
	CTCProcedurePropertiesThreadsDialog  *pThreadsPage;
	CTCProcedurePropertiesOverviewDialog  *pOverviewPage;
	CTCProcedurePropertiesVariablesDialog  *pVariablesPage;
	CTCProcedurePropertiesArgumentsDialog  *pArgumentsPage;

	if ((pOverviewPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesOverviewDialog))) ? (CTCProcedurePropertiesOverviewDialog *)m_pDialog : (CTCProcedurePropertiesOverviewDialog *)NULL)) return pOverviewPage->Check(bModified);
	if ((pArgumentsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesArgumentsDialog))) ? (CTCProcedurePropertiesArgumentsDialog *)m_pDialog : (CTCProcedurePropertiesArgumentsDialog *)NULL)) return pArgumentsPage->Check(bModified);
	if ((pVariablesPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesVariablesDialog))) ? (CTCProcedurePropertiesVariablesDialog *)m_pDialog : (CTCProcedurePropertiesVariablesDialog *)NULL)) return pVariablesPage->Check(bModified);
	if ((pThreadsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesThreadsDialog))) ? (CTCProcedurePropertiesThreadsDialog *)m_pDialog : (CTCProcedurePropertiesThreadsDialog *)NULL)) return pThreadsPage->Check(bModified);
	if ((pStepsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesStepsDialog))) ? (CTCProcedurePropertiesStepsDialog *)m_pDialog : (CTCProcedurePropertiesStepsDialog *)NULL)) return pStepsPage->Check(bModified);
	if ((pDebugPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesDebugDialog))) ? (CTCProcedurePropertiesDebugDialog *)m_pDialog : (CTCProcedurePropertiesDebugDialog *)NULL)) return pDebugPage->Check(bModified);
	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) return pCodePage->Check(bModified);
	if ((pTCStackPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesTCStackDialog))) ? (CTCProcedurePropertiesTCStackDialog *)m_pDialog : (CTCProcedurePropertiesTCStackDialog *)NULL)) return pTCStackPage->Check(bModified);
	return FALSE;
}

VOID CTCProcedurePropertiesThreadView::AdjustToPrivileges()
{
	CTCProcedurePropertiesCodeDialog  *pCodePage;
	CTCProcedurePropertiesDebugDialog  *pDebugPage;
	CTCProcedurePropertiesStepsDialog  *pStepsPage;
	CTCProcedurePropertiesTCStackDialog  *pTCStackPage;
	CTCProcedurePropertiesThreadsDialog  *pThreadsPage;
	CTCProcedurePropertiesOverviewDialog  *pOverviewPage;
	CTCProcedurePropertiesVariablesDialog  *pVariablesPage;
	CTCProcedurePropertiesArgumentsDialog  *pArgumentsPage;

	if ((pOverviewPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesOverviewDialog))) ? (CTCProcedurePropertiesOverviewDialog *)m_pDialog : (CTCProcedurePropertiesOverviewDialog *)NULL)) return pOverviewPage->AdjustToPrivileges();
	if ((pArgumentsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesArgumentsDialog))) ? (CTCProcedurePropertiesArgumentsDialog *)m_pDialog : (CTCProcedurePropertiesArgumentsDialog *)NULL)) return pArgumentsPage->AdjustToPrivileges();
	if ((pVariablesPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesVariablesDialog))) ? (CTCProcedurePropertiesVariablesDialog *)m_pDialog : (CTCProcedurePropertiesVariablesDialog *)NULL)) return pVariablesPage->AdjustToPrivileges();
	if ((pThreadsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesThreadsDialog))) ? (CTCProcedurePropertiesThreadsDialog *)m_pDialog : (CTCProcedurePropertiesThreadsDialog *)NULL)) return pThreadsPage->AdjustToPrivileges();
	if ((pStepsPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesStepsDialog))) ? (CTCProcedurePropertiesStepsDialog *)m_pDialog : (CTCProcedurePropertiesStepsDialog *)NULL)) return pStepsPage->AdjustToPrivileges();
	if ((pDebugPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesDebugDialog))) ? (CTCProcedurePropertiesDebugDialog *)m_pDialog : (CTCProcedurePropertiesDebugDialog *)NULL)) return pDebugPage->AdjustToPrivileges();
	if ((pCodePage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesCodeDialog))) ? (CTCProcedurePropertiesCodeDialog *)m_pDialog : (CTCProcedurePropertiesCodeDialog *)NULL)) return pCodePage->AdjustToPrivileges();
	if ((pTCStackPage = (m_pDialog->IsKindOf(RUNTIME_CLASS(CTCProcedurePropertiesTCStackDialog))) ? (CTCProcedurePropertiesTCStackDialog *)m_pDialog : (CTCProcedurePropertiesTCStackDialog *)NULL)) return pTCStackPage->AdjustToPrivileges();
}

CTCProcedurePropertiesTabCtrl *CTCProcedurePropertiesThreadView::GetParent() CONST
{
	return((CTCProcedurePropertiesTabCtrl *)CScrollView::GetParent());
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesThreadView, CScrollView)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesThreadView)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_SHOWWINDOW()
	ON_WM_MOUSEACTIVATE()
	ON_WM_DESTROY()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesThreadView drawing

void CTCProcedurePropertiesThreadView::OnDraw(CDC *pDC)
{
	return;
}

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesThreadView message handlers

int CTCProcedurePropertiesThreadView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CScrollView::OnCreate(lpCreateStruct) != -1)
	{
		SetScrollSizes(MM_TEXT, CSize(0, 0));
		return 0;
	}
	return -1;
}

void CTCProcedurePropertiesThreadView::OnSize(UINT nType, int cx, int cy)
{
	CRect  rDialog;

	if (IsWindow(m_pDialog->GetSafeHwnd()))
	{
		for (m_pDialog->GetWindowRect(rDialog); GetMainWnd()->MDIGetActive() == GetParentFrame() && m_rDialog[1].TopLeft() == rDialog.TopLeft(); )
		{
			m_pDialog->Invalidate(TRUE);
			m_pDialog->ValidateRect(m_rDialog[0]);
			break;
		}
		m_pDialog->UpdateWindow();
		GetClientRect(m_rDialog[0]);
		m_rDialog[1] = rDialog;
	}
	CScrollView::OnSize(nType, cx, cy);
}

BOOL CTCProcedurePropertiesThreadView::OnEraseBkgnd(CDC *pDC)
{
	CRect  rDialog;

	if (IsWindow(m_pDialog->GetSafeHwnd()))
	{
		m_pDialog->GetWindowRect(rDialog);
		ScreenToClient(rDialog);
		pDC->ExcludeClipRect(rDialog);
	}
	return CScrollView::OnEraseBkgnd(pDC);
}

void CTCProcedurePropertiesThreadView::OnShowWindow(BOOL bShow, UINT nStatus)
{
	for (m_rDialog[0].SetRectEmpty(), m_rDialog[1].SetRectEmpty(); IsWindow(m_pDialog->GetSafeHwnd()); )
	{
		m_pDialog->ShowWindow((bShow) ? SW_SHOW : SW_HIDE);
		break;
	}
	CScrollView::OnShowWindow(bShow, nStatus);
}

int CTCProcedurePropertiesThreadView::OnMouseActivate(CWnd *pDesktopWnd, UINT nHitTest, UINT message)
{
	CRect  rDialog;
	CONST MSG  *pMsg;

	for (pMsg = CWnd::GetCurrentMessage(); IsWindow(m_pDialog->GetSafeHwnd()); )
	{
		m_pDialog->GetWindowRect(rDialog);
		if (!rDialog.PtInRect(pMsg->pt)) break;
		return MA_NOACTIVATE;
	}
	return CScrollView::OnMouseActivate(pDesktopWnd, nHitTest, message);
}

void CTCProcedurePropertiesThreadView::OnDestroy()
{
	if (IsWindow(m_pDialog->GetSafeHwnd()))
	{
		m_pDialog->DestroyWindow();
		delete m_pDialog;
	}
	CScrollView::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesDocument

IMPLEMENT_DYNAMIC(CTCProcedurePropertiesDocument, CDocument)

CTCProcedurePropertiesDocument::CTCProcedurePropertiesDocument() : CDocument()
{
	return;
}

CTCProcedurePropertiesDocument::~CTCProcedurePropertiesDocument()
{
	return;
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTabCtrl

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesTabCtrl, CTabCtrl)

CTCProcedurePropertiesTabCtrl::CTCProcedurePropertiesTabCtrl() : CTabCtrl()
{
	m_sizeTabMargins.cx = m_sizeTabMargins.cy = 0;
}

BOOL CTCProcedurePropertiesTabCtrl::Create(CWnd *pParentWnd, CONST RECT &rect)
{
	INT  nTab;
	INT  nTabs;
	CRect  rTabs;
	CRect  rView;
	CUIntArray  nDialogIDs;
	CTCProcedurePropertiesThreadView  *pView;

	if (CTabCtrl::Create(TCS_TABS | TCS_SINGLELINE | WS_CHILD | WS_VISIBLE, rect, pParentWnd, 0))
	{
		for (nTab = 0, nTabs = MAXTCPROCEDUREPROPERTIESTAB - MINTCPROCEDUREPROPERTIESTAB + 1, GetClientRect(rView), AdjustRect(FALSE, rView); nTab < nTabs; nTab++)
		{
			if (nTab == TCPROCEDUREPROPERTIESVIEW_OVERVIEWTAB)
			{
				nDialogIDs.Add(CTCProcedurePropertiesOverviewDialog::IDD);
				continue;
			}
			if (nTab == TCPROCEDUREPROPERTIESVIEW_ARGUMENTSTAB)
			{
				nDialogIDs.Add(CTCProcedurePropertiesArgumentsDialog::IDD);
				continue;
			}
			if (nTab == TCPROCEDUREPROPERTIESVIEW_VARIABLESTAB)
			{
				nDialogIDs.Add(CTCProcedurePropertiesVariablesDialog::IDD);
				continue;
			}
			if (nTab == TCPROCEDUREPROPERTIESVIEW_THREADSTAB)
			{
				nDialogIDs.Add(CTCProcedurePropertiesThreadsDialog::IDD);
				continue;
			}
			if (nTab == TCPROCEDUREPROPERTIESVIEW_STEPSTAB)
			{
				nDialogIDs.Add(CTCProcedurePropertiesStepsDialog::IDD);
				continue;
			}
			if (nTab == TCPROCEDUREPROPERTIESVIEW_DEBUGTAB)
			{
				nDialogIDs.Add(CTCProcedurePropertiesDebugDialog::IDD);
				continue;
			}
			if (nTab == TCPROCEDUREPROPERTIESVIEW_CODETAB)
			{
				nDialogIDs.Add(CTCProcedurePropertiesCodeDialog::IDD);
				continue;
			}
			if (nTab == TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB)
			{
				nDialogIDs.Add(CTCProcedurePropertiesTCStackDialog::IDD);
				continue;
			}
		}
		for (nTab = 0, nTabs = (nTabs == nDialogIDs.GetSize()) ? nTabs : -1; nTab < nTabs; nTab++)
		{
			if ((pView = new CTCProcedurePropertiesThreadView))
			{
				if (pView->Create(this, rView, nDialogIDs.GetAt(nTab), !nTab))
				{
					if (InsertItem(nTab, STRING(MINTCPROCEDUREPROPERTIESTAB + nTab)) >= 0)
					{
						m_pViews.Add(pView);
						continue;
					}
					pView->DestroyWindow();
					break;
				}
				delete pView;
			}
			break;
		}
		if (nTab == nTabs)
		{
			m_sizeTabMargins = (GetItemRect(0, rTabs)) ? CSize(rTabs.left, rTabs.top) : m_sizeTabMargins;
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesTabCtrl::SetProperties(CONST CDatabaseTCProcedure *pDatabaseTCProcedure, INT nFlags)
{
	INT  nTab;
	INT  nTabs;
	CTCProcedurePropertiesThreadView  *pView;

	for (nTab = 0, nTabs = (nFlags) ? (INT)m_pViews.GetSize() : 0; nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(nTab)))
		{
			if (!pView->SetProperties(pDatabaseTCProcedure)) break;
			continue;
		}
	}
	return((nTab == nTabs) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesTabCtrl::GetProperties(CDatabaseTCProcedure *pDatabaseTCProcedure, INT nFlags) CONST
{
	INT  nTab;
	INT  nTabs;
	CTCProcedurePropertiesThreadView  *pView;

	for (nTab = 0, nTabs = (nFlags) ? (INT)m_pViews.GetSize() : 0; nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(nTab)))
		{
			if (!pView->GetProperties(pDatabaseTCProcedure)) break;
			continue;
		}
	}
	return((nTab == nTabs) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesTabCtrl::SetBreakpoints(LPCTSTR pszThread, CONST CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints)
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_DEBUGTAB))) ? pView->SetBreakpoints(pszThread, pDatabaseTCProcedureThreadBreakpoints) : FALSE);
}

INT CTCProcedurePropertiesTabCtrl::GetBreakpoints(LPCTSTR pszThread, CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints) CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_DEBUGTAB))) ? pView->GetBreakpoints(pszThread, pDatabaseTCProcedureThreadBreakpoints) : 0);
}

VOID CTCProcedurePropertiesTabCtrl::UpdateSteps(LPCTSTR pszThread, CONST CPtrArray &pSteps)
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (m_pViews.GetSize() > TCPROCEDUREPROPERTIESVIEW_STEPSTAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_STEPSTAB) : (CTCProcedurePropertiesThreadView *)NULL)) pView->UpdateSteps(pszThread, pSteps);
	if ((pView = (m_pViews.GetSize() > TCPROCEDUREPROPERTIESVIEW_DEBUGTAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_DEBUGTAB) : (CTCProcedurePropertiesThreadView *)NULL)) pView->UpdateSteps(pszThread, pSteps);
}

VOID CTCProcedurePropertiesTabCtrl::UpdateIdentifiers(CTMEnvironment *pTMEnvironment, CTCEnvironment *pTCEnvironment, CONST CStringArray &szIdentifiers, CONST CUIntArray &nIdentifierTypes, CONST CLongUIntArray &nIdentifierAttributes, CONST CPtrArray &pIdentifiers)
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (m_pViews.GetSize() > TCPROCEDUREPROPERTIESVIEW_DEBUGTAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_DEBUGTAB) : (CTCProcedurePropertiesThreadView *)NULL)) pView->UpdateIdentifiers(pTMEnvironment, pTCEnvironment, szIdentifiers, nIdentifierTypes, nIdentifierAttributes, pIdentifiers);
}

VOID CTCProcedurePropertiesTabCtrl::UpdateExecutionpoint(LPCTSTR pszThread, UINT nState, UINT nLine)
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (m_pViews.GetSize() > TCPROCEDUREPROPERTIESVIEW_CODETAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB) : (CTCProcedurePropertiesThreadView *)NULL)) pView->UpdateExecutionpoint(pszThread, nState, nLine);
}

BOOL CTCProcedurePropertiesTabCtrl::UpdateTCStack(CONST CTCProcedureItem *pItem)
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (m_pViews.GetSize() > TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->UpdateTCStack(pItem) : FALSE);
}
BOOL CTCProcedurePropertiesTabCtrl::UpdateTCStack(CONST CTCProcedureItem *pItem, LPCTSTR pszStatus, LPCTSTR pszResult)
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (m_pViews.GetSize() > TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->UpdateTCStack(pItem, pszStatus, pszResult) : FALSE);
}
BOOL CTCProcedurePropertiesTabCtrl::UpdateTCStack(CONST CTCProcedureItem *pItem, CONST CTCPacket *pTCPacket, BOOL &bLogging)
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (m_pViews.GetSize() > TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->UpdateTCStack(pItem, pTCPacket, bLogging) : FALSE);
}
VOID CTCProcedurePropertiesTabCtrl::UpdateTCStack(BOOL bRunning, BOOL bSuspended)
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (m_pViews.GetSize() > TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) : (CTCProcedurePropertiesThreadView *)NULL)) pView->UpdateTCStack(bRunning, bSuspended);
}

BOOL CTCProcedurePropertiesTabCtrl::IsTCStackReleaseWaitModeEnabled() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (m_pViews.GetSize() > TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->IsTCStackReleaseWaitModeEnabled() : FALSE);
}

CTimeSpan CTCProcedurePropertiesTabCtrl::GetTCStackReleaseWaitInterval() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (m_pViews.GetSize() > TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->GetTCStackReleaseWaitInterval() : 0);
}

BOOL CTCProcedurePropertiesTabCtrl::IsTCStackPreexecutionVerificationEnabled() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (m_pViews.GetSize() > TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->IsTCStackPreexecutionVerificationEnabled() : FALSE);
}

BOOL CTCProcedurePropertiesTabCtrl::IsTCStackExecutionVerificationEnabled() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (m_pViews.GetSize() > TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->IsTCStackExecutionVerificationEnabled() : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::ResetTCStack()
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (m_pViews.GetSize() > TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_TCSTACKTAB) : (CTCProcedurePropertiesThreadView *)NULL)) pView->ResetTCStack();
}

BOOL CTCProcedurePropertiesTabCtrl::GetPrintProperties(CRichEditCtrl **pEditCtrl) CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) ? pView->GetPrintProperties(pEditCtrl) : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::DoFindCode()
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->DoFindCode();
}

BOOL CTCProcedurePropertiesTabCtrl::CanFindCode() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (GetCurSel() == TCPROCEDUREPROPERTIESVIEW_CODETAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->CanFindCode() : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::DoFindNextCode(BOOL bMatchCase, BOOL bMatchWord)
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->DoFindNextCode(bMatchCase, bMatchWord);
}
VOID CTCProcedurePropertiesTabCtrl::DoFindNextCode(LPCTSTR pszText, BOOL bSearchAll, BOOL bMatchCase, BOOL bMatchWord)
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->DoFindNextCode(pszText, bSearchAll, bMatchCase, bMatchWord);
}

BOOL CTCProcedurePropertiesTabCtrl::CanFindNextCode() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (GetCurSel() == TCPROCEDUREPROPERTIESVIEW_CODETAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->CanFindNextCode() : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::DoFindPreviousCode(BOOL bMatchCase, BOOL bMatchWord)
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->DoFindPreviousCode(bMatchCase, bMatchWord);
}
VOID CTCProcedurePropertiesTabCtrl::DoFindPreviousCode(LPCTSTR pszText, BOOL bSearchAll, BOOL bMatchCase, BOOL bMatchWord)
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->DoFindPreviousCode(pszText, bSearchAll, bMatchCase, bMatchWord);
}

BOOL CTCProcedurePropertiesTabCtrl::CanFindPreviousCode() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (GetCurSel() == TCPROCEDUREPROPERTIESVIEW_CODETAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->CanFindPreviousCode() : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::DoReplaceCode()
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->DoReplaceCode();
}

BOOL CTCProcedurePropertiesTabCtrl::CanReplaceCode() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (GetCurSel() == TCPROCEDUREPROPERTIESVIEW_CODETAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->CanReplaceCode() : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::DoGoToCode()
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->DoGoToCode();
}
BOOL CTCProcedurePropertiesTabCtrl::DoGoToCode(LPCTSTR pszLine)
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB)) && pView->DoGoToCode(pszLine))
	{
		SetCurSel(TCPROCEDUREPROPERTIESVIEW_CODETAB);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedurePropertiesTabCtrl::CanGoToCode() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (GetCurSel() == TCPROCEDUREPROPERTIESVIEW_CODETAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->CanGoToCode() : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::DoUndo()
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->DoUndo();
}

BOOL CTCProcedurePropertiesTabCtrl::CanUndo() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (GetCurSel() == TCPROCEDUREPROPERTIESVIEW_CODETAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->CanUndo() : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::DoRedo()
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->DoRedo();
}

BOOL CTCProcedurePropertiesTabCtrl::CanRedo() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (GetCurSel() == TCPROCEDUREPROPERTIESVIEW_CODETAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->CanRedo() : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::DoCutSel()
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->DoCutSel();
}

BOOL CTCProcedurePropertiesTabCtrl::CanCutSel() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (GetCurSel() == TCPROCEDUREPROPERTIESVIEW_CODETAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->CanCutSel() : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::DoCopySel()
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->DoCopySel();
}

BOOL CTCProcedurePropertiesTabCtrl::CanCopySel() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (GetCurSel() == TCPROCEDUREPROPERTIESVIEW_CODETAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->CanCopySel() : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::DoPasteSel()
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->DoPasteSel();
}

BOOL CTCProcedurePropertiesTabCtrl::CanPasteSel() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (GetCurSel() == TCPROCEDUREPROPERTIESVIEW_CODETAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->CanPasteSel() : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::DoDeleteSel()
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->DoDeleteSel();
}

BOOL CTCProcedurePropertiesTabCtrl::CanDeleteSel() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (GetCurSel() == TCPROCEDUREPROPERTIESVIEW_CODETAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->CanDeleteSel() : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::DoSelectAllCode()
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->DoSelectAllCode();
}

VOID CTCProcedurePropertiesTabCtrl::UnSelectAllCode()
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->UnSelectAllCode();
}

BOOL CTCProcedurePropertiesTabCtrl::CanSelectAllCode() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (GetCurSel() == TCPROCEDUREPROPERTIESVIEW_CODETAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->CanSelectAllCode() : FALSE);
}

BOOL CTCProcedurePropertiesTabCtrl::HasCode() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) ? pView->HasCode() : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::ShowDialogs(BOOL bShow)
{
	CTCProcedurePropertiesThreadView  *pView;

	if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB))) pView->ShowDialogs(bShow);
}

BOOL CTCProcedurePropertiesTabCtrl::HasDialogs() CONST
{
	CTCProcedurePropertiesThreadView  *pView;

	return(((pView = (GetCurSel() == TCPROCEDUREPROPERTIESVIEW_CODETAB) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(TCPROCEDUREPROPERTIESVIEW_CODETAB) : (CTCProcedurePropertiesThreadView *)NULL)) ? pView->HasDialogs() : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::UpdateLayout(BOOL bActivate)
{
	INT  nTab;
	INT  nTabs;
	CTCProcedurePropertiesThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(nTab)))
		{
			pView->UpdateLayout(bActivate);
			continue;
		}
	}
}

CSize CTCProcedurePropertiesTabCtrl::GetMargins() CONST
{
	return m_sizeTabMargins;
}

BOOL CTCProcedurePropertiesTabCtrl::IsModified() CONST
{
	INT  nTab;
	INT  nTabs;
	CTCProcedurePropertiesThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(nTab)))
		{
			if (pView->IsModified()) break;
			continue;
		}
	}
	return((nTab < nTabs) ? TRUE : FALSE);
}

BOOL CTCProcedurePropertiesTabCtrl::Check(BOOL bModified) CONST
{
	INT  nTab;
	INT  nTabs;
	CTCProcedurePropertiesThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(nTab)))
		{
			if (!pView->Check(bModified)) break;
			continue;
		}
	}
	return((nTab == nTabs) ? (!bModified || IsModified()) : FALSE);
}

VOID CTCProcedurePropertiesTabCtrl::AdjustToPrivileges()
{
	INT  nTab;
	INT  nTabs;
	CTCProcedurePropertiesThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(nTab)))
		{
			pView->AdjustToPrivileges();
			continue;
		}
	}
}

CTCProcedurePropertiesView *CTCProcedurePropertiesTabCtrl::GetParent() CONST
{
	return((CTCProcedurePropertiesView *)CTabCtrl::GetParent());
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesTabCtrl, CTabCtrl)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesTabCtrl)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_LBUTTONDOWN()
	ON_WM_KEYDOWN()
	ON_WM_DESTROY()
	ON_MESSAGE(TCM_SETCURSEL, OnSelectTab)
	ON_NOTIFY_REFLECT(TCN_SELCHANGE, OnSelchange)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesTabCtrl message handlers

int CTCProcedurePropertiesTabCtrl::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	CFontTools  cFontTools(&m_cTabFont);

	if (CTabCtrl::OnCreate(lpCreateStruct) != -1)
	{
		SetFont(&m_cTabFont);
		return 0;
	}
	return -1;
}

void CTCProcedurePropertiesTabCtrl::OnSize(UINT nType, int cx, int cy)
{
	INT  nTab;
	INT  nTabs;
	CRect  rView[2];
	CTCProcedurePropertiesThreadView  *pView;

	GetClientRect(rView[0]);
	AdjustRect(FALSE, rView[0]);
	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(nTab)))
		{
			for (pView->GetWindowRect(rView[1]), ScreenToClient(rView[1]); rView[0] != rView[1]; )
			{
				pView->MoveWindow(rView[0]);
				break;
			}
		}
	}
	CTabCtrl::OnSize(nType, cx, cy);
}

BOOL CTCProcedurePropertiesTabCtrl::OnEraseBkgnd(CDC *pDC)
{
	INT  nTab;
	INT  nTabs;
	CRect  rView;
	CTCProcedurePropertiesThreadView  *pView;

	GetClientRect(rView);
	AdjustRect(FALSE, rView);
	pDC->ExcludeClipRect(rView);
	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(nTab)))
		{
			pView->RedrawWindow();
			continue;
		}
	}
	return CTabCtrl::OnEraseBkgnd(pDC);
}

LRESULT CTCProcedurePropertiesTabCtrl::OnSelectTab(WPARAM wParam, LPARAM lParam)
{
	INT  nTab;
	INT  nTabs;
	INT  nIndex;
	CDatabaseTCProcedure  cDatabaseTCProcedure;
	CTCProcedurePropertiesThreadView  *pView[2];

	for (GetProperties(&cDatabaseTCProcedure); (pView[0] = ((nIndex = (INT)wParam) >= 0 && nIndex < m_pViews.GetSize()) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(nIndex) : (CTCProcedurePropertiesThreadView *)NULL) && !pView[0]->IsWindowVisible(); )
	{
		if ((cDatabaseTCProcedure.GetAttributes() & TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE) != TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE || (nIndex != TCPROCEDUREPROPERTIESVIEW_ARGUMENTSTAB  &&  nIndex != TCPROCEDUREPROPERTIESVIEW_VARIABLESTAB  &&  nIndex != TCPROCEDUREPROPERTIESVIEW_THREADSTAB  &&  nIndex != TCPROCEDUREPROPERTIESVIEW_STEPSTAB))
		{
			for (nTab = 0, nTabs = (INT)m_pViews.GetSize(), pView[0]->ShowWindow(SW_SHOW); nTab < nTabs; nTab++)
			{
				if ((pView[1] = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(nTab)))
				{
					if (pView[0] != pView[1] && pView[1]->IsWindowVisible())
					{
						pView[1]->ShowWindow(SW_HIDE);
						break;
					}
				}
			}
			break;
		}
		for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
		{
			if ((pView[0] = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(nTab)) && pView[0]->IsWindowVisible())
			{
				SetCurSel(nTab);
				break;
			}
		}
		CAudioDevice::AlertBySound();
		break;
	}
	return Default();
}

void CTCProcedurePropertiesTabCtrl::OnSelchange(NMHDR *pNotifyStruct, LRESULT *pResult)
{
	INT  nTab;
	INT  nTabs;
	INT  nIndex;
	CDatabaseTCProcedure  cDatabaseTCProcedure;
	CTCProcedurePropertiesThreadView  *pView[2];

	for (GetProperties(&cDatabaseTCProcedure); (pView[0] = ((nIndex = GetCurSel()) >= 0 && nIndex < m_pViews.GetSize()) ? (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(nIndex) : (CTCProcedurePropertiesThreadView *)NULL) && !pView[0]->IsWindowVisible(); )
	{
		if ((cDatabaseTCProcedure.GetAttributes() & TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE) != TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE || (nIndex != TCPROCEDUREPROPERTIESVIEW_ARGUMENTSTAB  &&  nIndex != TCPROCEDUREPROPERTIESVIEW_VARIABLESTAB  &&  nIndex != TCPROCEDUREPROPERTIESVIEW_THREADSTAB  &&  nIndex != TCPROCEDUREPROPERTIESVIEW_STEPSTAB))
		{
			for (nTab = 0, nTabs = (INT)m_pViews.GetSize(), pView[0]->ShowWindow(SW_SHOW); nTab < nTabs; nTab++)
			{
				if ((pView[1] = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(nTab)))
				{
					if (pView[0] != pView[1] && pView[1]->IsWindowVisible())
					{
						pView[1]->ShowWindow(SW_HIDE);
						*pResult = TRUE;
						break;
					}
				}
			}
			break;
		}
		for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
		{
			if ((pView[0] = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(nTab)) && pView[0]->IsWindowVisible())
			{
				SetCurSel(nTab);
				break;
			}
		}
		CAudioDevice::AlertBySound();
		break;
	}
}

void CTCProcedurePropertiesTabCtrl::OnLButtonDown(UINT nFlags, CPoint point)
{
	INT  nTab;
	INT  nTabs;
	CRect  rTab;
	CDatabaseTCProcedure  cDatabaseTCProcedure;

	for (nTab = 0, nTabs = (GetProperties(&cDatabaseTCProcedure)) ? GetItemCount() : -1; nTab < nTabs; nTab++)
	{
		if (GetItemRect(nTab, rTab) && rTab.PtInRect(point)) break;
		continue;
	}
	if (nTab < nTabs)
	{
		if (cDatabaseTCProcedure.GetAttributes() & TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE)
		{
			if (nTab >= TCPROCEDUREPROPERTIESVIEW_ARGUMENTSTAB  &&  nTab <= TCPROCEDUREPROPERTIESVIEW_STEPSTAB)
			{
				CAudioDevice::AlertBySound();
				return;
			}
		}
	}
	CTabCtrl::OnLButtonDown(nFlags, point);
}

void CTCProcedurePropertiesTabCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	INT  nIndex;
	CDatabaseTCProcedure  cDatabaseTCProcedure;

	if (nChar == VK_LEFT)
	{
		for (GetProperties(&cDatabaseTCProcedure), nIndex = GetCurSel(); (cDatabaseTCProcedure.GetAttributes() & TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE) && nIndex > 0; )
		{
			SetCurSel((nIndex > TCPROCEDUREPROPERTIESVIEW_DEBUGTAB) ? (nIndex - 1) : TCPROCEDUREPROPERTIESVIEW_OVERVIEWTAB);
			return;
		}
	}
	if (nChar == VK_RIGHT)
	{
		for (GetProperties(&cDatabaseTCProcedure), nIndex = GetCurSel(); (cDatabaseTCProcedure.GetAttributes() & TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE) && nIndex < GetItemCount() - 1; )
		{
			SetCurSel((nIndex >= TCPROCEDUREPROPERTIESVIEW_DEBUGTAB) ? (nIndex + 1) : TCPROCEDUREPROPERTIESVIEW_DEBUGTAB);
			return;
		}
	}
	if (nChar == VK_UP)
	{
		GetParent()->SetFocus();
		return;
	}
	CTabCtrl::OnKeyDown(nChar, nRepCnt, nFlags);
}

void CTCProcedurePropertiesTabCtrl::OnDestroy()
{
	INT  nTab;
	INT  nTabs;
	CTCProcedurePropertiesThreadView  *pView;

	for (nTab = 0, nTabs = (INT)m_pViews.GetSize(); nTab < nTabs; nTab++)
	{
		if ((pView = (CTCProcedurePropertiesThreadView *)m_pViews.GetAt(nTab)))
		{
			pView->DestroyWindow();
			continue;
		}
	}
	m_cTabFont.DeleteObject();
	CTabCtrl::OnDestroy();
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesView

IMPLEMENT_DYNCREATE(CTCProcedurePropertiesView, CView)

CTCProcedurePropertiesView::CTCProcedurePropertiesView() : CView()
{
	return;
}

VOID CTCProcedurePropertiesView::SetProperties(CONST CDatabaseTCProcedure *pDatabaseTCProcedure, INT nFlags)
{
	m_wndTabCtrl.SetProperties(pDatabaseTCProcedure, nFlags);
}

BOOL CTCProcedurePropertiesView::GetProperties(CDatabaseTCProcedure *pDatabaseTCProcedure, INT nFlags) CONST
{
	return m_wndTabCtrl.GetProperties(pDatabaseTCProcedure, nFlags);
}

BOOL CTCProcedurePropertiesView::SetBreakpoints(LPCTSTR pszThread, CONST CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints)
{
	return m_wndTabCtrl.SetBreakpoints(pszThread, pDatabaseTCProcedureThreadBreakpoints);
}

INT CTCProcedurePropertiesView::GetBreakpoints(LPCTSTR pszThread, CDatabaseTCProcedureThreadBreakpoints &pDatabaseTCProcedureThreadBreakpoints) CONST
{
	return m_wndTabCtrl.GetBreakpoints(pszThread, pDatabaseTCProcedureThreadBreakpoints);
}

VOID CTCProcedurePropertiesView::UpdateSteps(LPCTSTR pszThread, CONST CPtrArray &pSteps)
{
	m_wndTabCtrl.UpdateSteps(pszThread, pSteps);
}

VOID CTCProcedurePropertiesView::UpdateIdentifiers(CTMEnvironment *pTMEnvironment, CTCEnvironment *pTCEnvironment, CONST CStringArray &szIdentifiers, CONST CUIntArray &nIdentifierTypes, CONST CLongUIntArray &nIdentifierAttributes, CONST CPtrArray &pIdentifiers)
{
	m_wndTabCtrl.UpdateIdentifiers(pTMEnvironment, pTCEnvironment, szIdentifiers, nIdentifierTypes, nIdentifierAttributes, pIdentifiers);
}

VOID CTCProcedurePropertiesView::UpdateExecutionpoint(LPCTSTR pszThread, UINT nState, UINT nLine)
{
	m_wndTabCtrl.UpdateExecutionpoint(pszThread, nState, nLine);
}

BOOL CTCProcedurePropertiesView::UpdateTCStack(CONST CTCProcedureItem *pItem)
{
	return m_wndTabCtrl.UpdateTCStack(pItem);
}
BOOL CTCProcedurePropertiesView::UpdateTCStack(CONST CTCProcedureItem *pItem, LPCTSTR pszStatus, LPCTSTR pszResult)
{
	return m_wndTabCtrl.UpdateTCStack(pItem, pszStatus, pszResult);
}
BOOL CTCProcedurePropertiesView::UpdateTCStack(CONST CTCProcedureItem *pItem, CONST CTCPacket *pTCPacket, BOOL &bLogging)
{
	return m_wndTabCtrl.UpdateTCStack(pItem, pTCPacket, bLogging);
}
VOID CTCProcedurePropertiesView::UpdateTCStack(BOOL bRunning, BOOL bSuspended)
{
	m_wndTabCtrl.UpdateTCStack(bRunning, bSuspended);
}

BOOL CTCProcedurePropertiesView::IsTCStackReleaseWaitModeEnabled() CONST
{
	return m_wndTabCtrl.IsTCStackReleaseWaitModeEnabled();
}

CTimeSpan CTCProcedurePropertiesView::GetTCStackReleaseWaitInterval() CONST
{
	return m_wndTabCtrl.GetTCStackReleaseWaitInterval();
}

BOOL CTCProcedurePropertiesView::IsTCStackPreexecutionVerificationEnabled() CONST
{
	return m_wndTabCtrl.IsTCStackPreexecutionVerificationEnabled();
}

BOOL CTCProcedurePropertiesView::IsTCStackExecutionVerificationEnabled() CONST
{
	return m_wndTabCtrl.IsTCStackExecutionVerificationEnabled();
}

VOID CTCProcedurePropertiesView::ResetTCStack()
{
	m_wndTabCtrl.ResetTCStack();
}

BOOL CTCProcedurePropertiesView::GetPrintProperties(CRichEditCtrl **pEditCtrl) CONST
{
	return m_wndTabCtrl.GetPrintProperties(pEditCtrl);
}

VOID CTCProcedurePropertiesView::DoFindCode()
{
	m_wndTabCtrl.DoFindCode();
}

BOOL CTCProcedurePropertiesView::CanFindCode() CONST
{
	return m_wndTabCtrl.CanFindCode();
}

VOID CTCProcedurePropertiesView::DoFindNextCode(BOOL bMatchCase, BOOL bMatchWord)
{
	m_wndTabCtrl.SetCurSel(TCPROCEDUREPROPERTIESVIEW_CODETAB);
	m_wndTabCtrl.DoFindNextCode(bMatchCase, bMatchWord);
}
VOID CTCProcedurePropertiesView::DoFindNextCode(LPCTSTR pszText, BOOL bSearchAll, BOOL bMatchCase, BOOL bMatchWord)
{
	m_wndTabCtrl.SetCurSel(TCPROCEDUREPROPERTIESVIEW_CODETAB);
	m_wndTabCtrl.DoFindNextCode(pszText, bSearchAll, bMatchCase, bMatchWord);
}

BOOL CTCProcedurePropertiesView::CanFindNextCode() CONST
{
	return m_wndTabCtrl.CanFindNextCode();
}

VOID CTCProcedurePropertiesView::DoFindPreviousCode(BOOL bMatchCase, BOOL bMatchWord)
{
	m_wndTabCtrl.SetCurSel(TCPROCEDUREPROPERTIESVIEW_CODETAB);
	m_wndTabCtrl.DoFindPreviousCode(bMatchCase, bMatchWord);
}
VOID CTCProcedurePropertiesView::DoFindPreviousCode(LPCTSTR pszText, BOOL bSearchAll, BOOL bMatchCase, BOOL bMatchWord)
{
	m_wndTabCtrl.SetCurSel(TCPROCEDUREPROPERTIESVIEW_CODETAB);
	m_wndTabCtrl.DoFindPreviousCode(pszText, bSearchAll, bMatchCase, bMatchWord);
}

BOOL CTCProcedurePropertiesView::CanFindPreviousCode() CONST
{
	return m_wndTabCtrl.CanFindPreviousCode();
}

VOID CTCProcedurePropertiesView::DoReplaceCode()
{
	m_wndTabCtrl.DoReplaceCode();
}

BOOL CTCProcedurePropertiesView::CanReplaceCode() CONST
{
	return m_wndTabCtrl.CanReplaceCode();
}

VOID CTCProcedurePropertiesView::DoGoToCode()
{
	m_wndTabCtrl.DoGoToCode();
}
BOOL CTCProcedurePropertiesView::DoGoToCode(LPCTSTR pszLine)
{
	return m_wndTabCtrl.DoGoToCode(pszLine);
}

BOOL CTCProcedurePropertiesView::CanGoToCode() CONST
{
	return m_wndTabCtrl.CanGoToCode();
}

VOID CTCProcedurePropertiesView::DoUndo()
{
	m_wndTabCtrl.DoUndo();
}

BOOL CTCProcedurePropertiesView::CanUndo() CONST
{
	return m_wndTabCtrl.CanUndo();
}

VOID CTCProcedurePropertiesView::DoRedo()
{
	m_wndTabCtrl.DoRedo();
}

BOOL CTCProcedurePropertiesView::CanRedo() CONST
{
	return m_wndTabCtrl.CanRedo();
}

VOID CTCProcedurePropertiesView::DoCutSel()
{
	m_wndTabCtrl.DoCutSel();
}

BOOL CTCProcedurePropertiesView::CanCutSel() CONST
{
	return m_wndTabCtrl.CanCutSel();
}

VOID CTCProcedurePropertiesView::DoCopySel()
{
	m_wndTabCtrl.DoCopySel();
}

BOOL CTCProcedurePropertiesView::CanCopySel() CONST
{
	return m_wndTabCtrl.CanCopySel();
}

VOID CTCProcedurePropertiesView::DoPasteSel()
{
	m_wndTabCtrl.DoPasteSel();
}

BOOL CTCProcedurePropertiesView::CanPasteSel() CONST
{
	return m_wndTabCtrl.CanPasteSel();
}

VOID CTCProcedurePropertiesView::DoDeleteSel()
{
	m_wndTabCtrl.DoDeleteSel();
}

BOOL CTCProcedurePropertiesView::CanDeleteSel() CONST
{
	return m_wndTabCtrl.CanDeleteSel();
}

VOID CTCProcedurePropertiesView::DoSelectAllCode()
{
	m_wndTabCtrl.DoSelectAllCode();
}

VOID CTCProcedurePropertiesView::UnSelectAllCode()
{
	m_wndTabCtrl.UnSelectAllCode();
}

BOOL CTCProcedurePropertiesView::CanSelectAllCode() CONST
{
	return m_wndTabCtrl.CanSelectAllCode();
}

BOOL CTCProcedurePropertiesView::HasCode() CONST
{
	return m_wndTabCtrl.HasCode();
}

VOID CTCProcedurePropertiesView::ShowDialogs(BOOL bShow)
{
	m_wndTabCtrl.ShowDialogs(bShow);
}

BOOL CTCProcedurePropertiesView::HasDialogs() CONST
{
	return m_wndTabCtrl.HasDialogs();
}

VOID CTCProcedurePropertiesView::UpdateLayout(BOOL bActivate)
{
	m_wndTabCtrl.UpdateLayout(bActivate);
}

BOOL CTCProcedurePropertiesView::IsModified() CONST
{
	return m_wndTabCtrl.IsModified();
}

BOOL CTCProcedurePropertiesView::Check(BOOL bModified) CONST
{
	return m_wndTabCtrl.Check(bModified);
}

VOID CTCProcedurePropertiesView::AdjustToPrivileges()
{
	m_wndTabCtrl.AdjustToPrivileges();
}

CTCProcedureSplitterWnd *CTCProcedurePropertiesView::GetParent() CONST
{
	return((CTCProcedureSplitterWnd *)CView::GetParent());
}

BEGIN_MESSAGE_MAP(CTCProcedurePropertiesView, CView)
	//{{AFX_MSG_MAP(CTCProcedurePropertiesView)
	ON_WM_CREATE()
	ON_WM_SIZE()
	ON_WM_ERASEBKGND()
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesView drawing

void CTCProcedurePropertiesView::OnDraw(CDC *pDC)
{
	return;
}

/////////////////////////////////////////////////////////////////////////////
// CTCProcedurePropertiesView message handlers

int CTCProcedurePropertiesView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	return((CView::OnCreate(lpCreateStruct) != -1 && m_wndTabCtrl.Create(this, CRect(0, 0, lpCreateStruct->cx, lpCreateStruct->cy))) ? 0 : -1);
}

void CTCProcedurePropertiesView::OnSize(UINT nType, int cx, int cy)
{
	m_wndTabCtrl.MoveWindow(0, 0, cx, cy);
	CView::OnSize(nType, cx, cy);
}

BOOL CTCProcedurePropertiesView::OnEraseBkgnd(CDC *pDC)
{
	CRect  rView;
	CRect  rPage[3];

	for (GetClientRect(rView), m_wndTabCtrl.GetItemRect(0, rPage[0]), m_wndTabCtrl.GetItemRect(m_wndTabCtrl.GetCurSel(), rPage[1]), m_wndTabCtrl.GetItemRect(m_wndTabCtrl.GetItemCount() - 1, rPage[2]), m_wndTabCtrl.ClientToScreen(rPage[0]), m_wndTabCtrl.ClientToScreen(rPage[1]), m_wndTabCtrl.ClientToScreen(rPage[2]), ScreenToClient(rPage[0]), ScreenToClient(rPage[1]), ScreenToClient(rPage[2]), rPage[0].InflateRect((!m_wndTabCtrl.GetCurSel()) ? m_wndTabCtrl.GetMargins().cx : 0, 0, 0, 0), rPage[1].InflateRect(0, m_wndTabCtrl.GetMargins().cy); m_wndTabCtrl.GetCurSel() != m_wndTabCtrl.GetItemCount() - 1; )
	{
		rPage[2].DeflateRect(0, 0, m_wndTabCtrl.GetMargins().cx, 0);
		break;
	}
	rView.SetRect(rView.left, rView.top, rView.right, rPage[0].bottom);
	pDC->ExcludeClipRect(rPage[0].left, rPage[0].top, rPage[2].right, (rView.Width() < rPage[2].right - rPage[0].left) ? (rPage[0].top + GetSystemMetrics(SM_CYHSCROLL)) : rPage[2].bottom);
	pDC->ExcludeClipRect(rPage[1].left, rPage[1].top, rPage[1].right, (rView.Width() < rPage[2].right - rPage[0].left) ? (rPage[0].top + GetSystemMetrics(SM_CYHSCROLL)) : rPage[1].bottom);
	pDC->FillSolidRect(rView, GetSysColor(COLOR_BTNFACE));
	return TRUE;
}

void CTCProcedurePropertiesView::OnSetFocus(CWnd *pOldWnd)
{
	if (IsChild(pOldWnd))
	{
		GetParent()->SetFocus();
		return;
	}
	if (IsWindow(pOldWnd->GetSafeHwnd()) && pOldWnd->IsChild(this))
	{
		m_wndTabCtrl.SetFocus();
		return;
	}
	CView::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureSplitterWnd

IMPLEMENT_DYNCREATE(CTCProcedureSplitterWnd, CSplitterWndEx)

CTCProcedureSplitterWnd::CTCProcedureSplitterWnd()
{
	m_bTracking = TRUE;
}

BOOL CTCProcedureSplitterWnd::Create(CTCProcedureWnd *pParentWnd)
{
	CRect  rPanes;
	CCreateContext  cContext;

	if (CreateStatic(pParentWnd, 1, 2))
	{
		pParentWnd->GetClientRect(rPanes);
		cContext.m_pCurrentDoc = new CTCProcedurePropertiesDocument;
		return CreateView(0, 0, RUNTIME_CLASS(CTCProcedureFlowchartView), CSize(rPanes.Width() / 2, rPanes.Height()), &cContext) && CreateView(0, 1, RUNTIME_CLASS(CTCProcedurePropertiesView), CSize(rPanes.Width() / 2, rPanes.Height()), &cContext);
	}
	return FALSE;
}

VOID CTCProcedureSplitterWnd::DoUndo()
{
	if (GetPropertiesView()->CanUndo())
	{
		GetPropertiesView()->DoUndo();
		return;
	}
	GetFlowchartView()->DoUndo();
}

BOOL CTCProcedureSplitterWnd::CanUndo() CONST
{
	return GetPropertiesView()->CanUndo() || GetFlowchartView()->CanUndo();
}

VOID CTCProcedureSplitterWnd::DoRedo()
{
	if (GetPropertiesView()->CanRedo())
	{
		GetPropertiesView()->DoRedo();
		return;
	}
	GetFlowchartView()->DoRedo();
}

BOOL CTCProcedureSplitterWnd::CanRedo() CONST
{
	return GetPropertiesView()->CanRedo() || GetFlowchartView()->CanRedo();
}

VOID CTCProcedureSplitterWnd::DoFind()
{
	if (GetPropertiesView()->CanFindCode())
	{
		GetPropertiesView()->DoFindCode();
		return;
	}
	GetFlowchartView()->DoFindStep();
}

BOOL CTCProcedureSplitterWnd::CanFind() CONST
{
	return GetPropertiesView()->CanFindCode() || GetFlowchartView()->CanFindStep();
}

VOID CTCProcedureSplitterWnd::DoFindNext(BOOL bMatchCase, BOOL bMatchWord)
{
	GetPropertiesView()->DoFindNextCode(bMatchCase, bMatchWord);
}
VOID CTCProcedureSplitterWnd::DoFindNext(LPCTSTR pszText, BOOL bSearchAll, BOOL bMatchCase, BOOL bMatchWord)
{
	GetPropertiesView()->DoFindNextCode(pszText, bSearchAll, bMatchCase, bMatchWord);
}

BOOL CTCProcedureSplitterWnd::CanFindNext() CONST
{
	return GetPropertiesView()->CanFindNextCode();
}

VOID CTCProcedureSplitterWnd::DoFindPrevious(BOOL bMatchCase, BOOL bMatchWord)
{
	GetPropertiesView()->DoFindPreviousCode(bMatchCase, bMatchWord);
}
VOID CTCProcedureSplitterWnd::DoFindPrevious(LPCTSTR pszText, BOOL bSearchAll, BOOL bMatchCase, BOOL bMatchWord)
{
	GetPropertiesView()->DoFindPreviousCode(pszText, bSearchAll, bMatchCase, bMatchWord);
}

BOOL CTCProcedureSplitterWnd::CanFindPrevious() CONST
{
	return GetPropertiesView()->CanFindPreviousCode();
}

VOID CTCProcedureSplitterWnd::DoReplace()
{
	GetPropertiesView()->DoReplaceCode();
}

BOOL CTCProcedureSplitterWnd::CanReplace() CONST
{
	return GetPropertiesView()->CanReplaceCode();
}

VOID CTCProcedureSplitterWnd::DoGoTo()
{
	GetPropertiesView()->DoGoToCode();
}

BOOL CTCProcedureSplitterWnd::CanGoTo() CONST
{
	return GetPropertiesView()->CanGoToCode();
}

VOID CTCProcedureSplitterWnd::DoCutSel()
{
	if (GetPropertiesView()->CanCutSel())
	{
		GetPropertiesView()->DoCutSel();
		return;
	}
	GetFlowchartView()->DoCutStep();
}

BOOL CTCProcedureSplitterWnd::CanCutSel() CONST
{
	return GetPropertiesView()->CanCutSel() || GetFlowchartView()->CanCutStep();
}

VOID CTCProcedureSplitterWnd::DoCopySel()
{
	if (GetPropertiesView()->CanCopySel())
	{
		GetPropertiesView()->DoCopySel();
		return;
	}
	GetFlowchartView()->DoCopyStep();
}

BOOL CTCProcedureSplitterWnd::CanCopySel() CONST
{
	return GetPropertiesView()->CanCopySel() || GetFlowchartView()->CanCopyStep();
}

VOID CTCProcedureSplitterWnd::DoPasteSel()
{
	if (GetPropertiesView()->CanPasteSel())
	{
		GetPropertiesView()->DoPasteSel();
		return;
	}
	GetFlowchartView()->DoPasteStep();
}

BOOL CTCProcedureSplitterWnd::CanPasteSel() CONST
{
	return GetPropertiesView()->CanPasteSel() || GetFlowchartView()->CanPasteStep();
}

VOID CTCProcedureSplitterWnd::DoDeleteSel()
{
	if (GetPropertiesView()->CanDeleteSel())
	{
		GetPropertiesView()->DoDeleteSel();
		return;
	}
	GetFlowchartView()->DoDeleteStep();
}

BOOL CTCProcedureSplitterWnd::CanDeleteSel() CONST
{
	return GetPropertiesView()->CanDeleteSel() || GetFlowchartView()->CanDeleteStep();
}

VOID CTCProcedureSplitterWnd::DoSelectAll()
{
	GetPropertiesView()->DoSelectAllCode();
}

VOID CTCProcedureSplitterWnd::UnSelectAll()
{
	GetFlowchartView()->UnSelectAllSteps();
	GetPropertiesView()->UnSelectAllCode();
}

BOOL CTCProcedureSplitterWnd::CanSelectAll() CONST
{
	return GetPropertiesView()->CanSelectAllCode();
}

VOID CTCProcedureSplitterWnd::SetPaneWidths(INT nFlowchartPaneWidth, INT nPropertiesPaneWidth)
{
	INT  nPaneWidth[2][2];

	GetColumnInfo(0, nPaneWidth[0][0], nPaneWidth[0][1]);
	GetColumnInfo(1, nPaneWidth[1][0], nPaneWidth[1][1]);
	SetColumnInfo(0, nFlowchartPaneWidth, min(nFlowchartPaneWidth, nPaneWidth[0][1]));
	SetColumnInfo(1, nPropertiesPaneWidth, min(nPropertiesPaneWidth, nPaneWidth[1][1]));
	RecalcLayout();
}

VOID CTCProcedureSplitterWnd::GetPaneWidths(INT &nFlowchartPaneWidth, INT &nPropertiesPaneWidth) CONST
{
	INT  nPaneWidth[2][2];

	GetColumnInfo(0, nPaneWidth[0][0], nPaneWidth[0][1]);
	GetColumnInfo(1, nPaneWidth[1][0], nPaneWidth[1][1]);
	nFlowchartPaneWidth = nPaneWidth[0][0];
	nPropertiesPaneWidth = nPaneWidth[1][0];
}

VOID CTCProcedureSplitterWnd::EnableGraphicalInterface(BOOL bEnable)
{
	CRect  rPanes;

	for (GetClientRect(rPanes), m_bTracking = bEnable; bEnable; )
	{
		SetPaneWidths(rPanes.Width() / 2, rPanes.Width() / 2);
		return;
	}
	SetPaneWidths(0, rPanes.Width());
}

VOID CTCProcedureSplitterWnd::UpdateLayout(BOOL bActivate)
{
	GetPropertiesView()->UpdateLayout(bActivate);
}

VOID CTCProcedureSplitterWnd::AdjustToPrivileges()
{
	GetPropertiesView()->AdjustToPrivileges();
}

CTCProcedureFlowchartView *CTCProcedureSplitterWnd::GetFlowchartView() CONST
{
	return((IsWindow(GetDlgItem(IdFromRowCol(0, 0))->GetSafeHwnd())) ? (CTCProcedureFlowchartView *)GetPane(0, 0) : (CTCProcedureFlowchartView *)NULL);
}

CTCProcedurePropertiesView *CTCProcedureSplitterWnd::GetPropertiesView() CONST
{
	return((IsWindow(GetDlgItem(IdFromRowCol(0, 1))->GetSafeHwnd())) ? (CTCProcedurePropertiesView *)GetPane(0, 1) : (CTCProcedurePropertiesView *)NULL);
}

CTCProcedureWnd *CTCProcedureSplitterWnd::GetParent() CONST
{
	return((CTCProcedureWnd *)CSplitterWndEx::GetParent());
}

BEGIN_MESSAGE_MAP(CTCProcedureSplitterWnd, CSplitterWndEx)
	//{{AFX_MSG_MAP(CTCProcedureSplitterWnd)
	ON_WM_MOUSEMOVE()
	ON_WM_LBUTTONDOWN()
	ON_WM_SETFOCUS()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureSplitterWnd message handlers

void CTCProcedureSplitterWnd::OnMouseMove(UINT nFlags, CPoint point)
{
	if (!m_bTracking) return;
	CSplitterWndEx::OnMouseMove(nFlags, point);
}

void CTCProcedureSplitterWnd::OnLButtonDown(UINT nFlags, CPoint point)
{
	if (!m_bTracking) return;
	CSplitterWndEx::OnLButtonDown(nFlags, point);
}

void CTCProcedureSplitterWnd::OnSetFocus(CWnd *pOldWnd)
{
	if (pOldWnd == GetParent() || pOldWnd == GetPropertiesView())
	{
		GetFlowchartView()->SetFocus();
		return;
	}
	if (pOldWnd == GetFlowchartView())
	{
		GetPropertiesView()->SetFocus();
		return;
	}
	CSplitterWndEx::OnSetFocus(pOldWnd);
}


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureCompileThread

IMPLEMENT_DYNAMIC(CTCProcedureCompileThread, CThread)

CTCProcedureCompileThread::CTCProcedureCompileThread() : CThread()
{
	m_nErrors = 0;
	m_nWarnings = 0;
	m_bAbort = FALSE;
	m_bStop = FALSE;
}

BOOL CTCProcedureCompileThread::StartCompiling(CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	for (SetAbortStatus(), SetCompileTarget(pDatabase, pDatabaseTCProcedure, FALSE, FALSE), m_bCompilation[0].ResetEvent(), m_bCompilation[1].ResetEvent(); CreateThread((LPVOID)pDatabase, THREAD_PRIORITY_BELOW_NORMAL); )
	{
		WaitForSingleObject(m_bCompilation[0], INFINITE);
		return TRUE;
	}
	return FALSE;
}
BOOL CTCProcedureCompileThread::StartCompiling(CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedure *pDatabaseTCProcedure, BOOL bSyntax, BOOL bBatch, INT &nErrors, INT &nWarnings, BOOL &bAbort)
{
	for (SetAbortStatus(), SetCompileTarget(pDatabase, pDatabaseTCProcedure, bSyntax, bBatch), m_bCompilation[0].ResetEvent(), m_bCompilation[1].ResetEvent(), nErrors = nWarnings = 0; CreateThread((LPVOID)pDatabase, THREAD_PRIORITY_BELOW_NORMAL); )
	{
		for (WaitForSingleObject(m_bCompilation[0], INFINITE); bBatch; )
		{
			WaitForSingleObject(m_bCompilation[1], INFINITE);
			break;
		}
		nErrors = GetErrorCount();
		nWarnings = GetWarningCount();
		bAbort = GetAbortStatus();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureCompileThread::IsCompiling() CONST
{
	return((IsThreadActive()) ? (!m_bStop  &&  !m_bAbort) : FALSE);
}

BOOL CTCProcedureCompileThread::StopCompiling()
{
	if (IsCompiling())
	{
		ShowCompileMessage(STRING(IDS_COMPILER_MESSAGE_BREAKCOMPILING));
		SetAbortStatus(TRUE);
		DestroyThread();
		return TRUE;
	}
	return FALSE;
}

VOID CTCProcedureCompileThread::SetCompileTarget(CONST CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedure *pDatabaseTCProcedure, BOOL bSyntax, BOOL bBatch)
{
	CString  szFileName[3];
	CFileFindEx  cFileFind[2];

	for (m_cDatabaseTCProcedure.Copy(pDatabaseTCProcedure), m_cDatabaseTCProcedure.SetExecutableFileName(EMPTYSTRING), m_bSyntax = bSyntax, m_bBatch = bBatch, szFileName[0] = pDatabase->GetFileName(), szFileName[1] = pDatabase->GetUpdateFileName(); (cFileFind[0].FindFile(szFileName[0]) || cFileFind[0].FindFile(szFileName[1])) && !cFileFind[0].FindNextFile(); )
	{
		szFileName[0].Format(STRING(IDS_TELECOMMANDPROCEDURECODE_NORMAL_FILENAME), (LPCTSTR)pDatabaseTCProcedure->GetName());
		szFileName[1].Format(STRING(IDS_TELECOMMANDPROCEDURECODE_UPDATE_FILENAME), (LPCTSTR)pDatabaseTCProcedure->GetName());
		szFileName[2].Format(STRING(IDS_TELECOMMANDPROCEDURECODE_TEMPORARY_FILENAME), (LPCTSTR)pDatabaseTCProcedure->GetName());
		szFileName[0] = cFileFind[0].GetFilePath().Left(cFileFind[0].GetFilePath().GetLength() - cFileFind[0].GetFileName().GetLength()) + szFileName[0];
		szFileName[1] = cFileFind[0].GetFilePath().Left(cFileFind[0].GetFilePath().GetLength() - cFileFind[0].GetFileName().GetLength()) + szFileName[1];
		szFileName[2] = cFileFind[0].GetFilePath().Left(cFileFind[0].GetFilePath().GetLength() - cFileFind[0].GetFileName().GetLength()) + szFileName[2];
		if (cFileFind[1].FindFile(szFileName[0]) && !cFileFind[1].FindNextFile())
		{
			szFileName[1] = (!bSyntax) ? szFileName[1] : szFileName[2];
			m_cDatabaseTCProcedure.SetExecutableFileName(szFileName[1]);
			cFileFind[1].Close();
			cFileFind[0].Close();
			break;
		}
		szFileName[0] = (!bSyntax) ? szFileName[0] : szFileName[2];
		m_cDatabaseTCProcedure.SetExecutableFileName(szFileName[0]);
		cFileFind[0].Close();
		break;
	}
}

VOID CTCProcedureCompileThread::GetCompileTarget(CDatabaseTCProcedure *pDatabaseTCProcedure) CONST
{
	pDatabaseTCProcedure->Copy(&m_cDatabaseTCProcedure);
}

BOOL CTCProcedureCompileThread::IsSyntaxCompileTarget() CONST
{
	return m_bSyntax;
}

BOOL CTCProcedureCompileThread::IsBatchCompileTarget() CONST
{
	return m_bBatch;
}

BOOL CTCProcedureCompileThread::GenerateSourceCode(CONST CBinaryDatabase *pDatabase, CDatabaseTCProcedure *pDatabaseTCProcedure, CString &szSourceCode, INT nFlags)
{
	INT  nPos;
	INT  nStep;
	INT  nSteps;
	INT  nThread;
	INT  nThreads;
	INT  nFunction;
	INT  nFunctions;
	INT  nArgument;
	INT  nArguments;
	INT  nVariable;
	INT  nVariables;
	INT  nParameter;
	INT  nParameters;
	INT  nExpression;
	INT  nExpressions;
	INT  nSyncObject;
	INT  nSyncObjects;
	INT  nQuotePos[3];
	INT  nQuoteCount;
	BOOL  bSourceCode;
	CString  szName;
	CString  szObject;
	CString  szIndent;
	CString  szCode[4];
	CString  szBlock[9];
	CString  szLabel[3];
	CString  szFunctions;
	CString  szHeader[2];
	CString  szTemplate[2];
	CString  szIdentifiers[3];
	POSITION  lPosition;
	CPtrArray  pSteps;
	CStringArray  szSyncObjects;
	CStringArray  szFailureLabels;
	CStringArray  szExpressions[2];
	CStringArray  szParameters[2][2];
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;
	CDatabaseTCProcedureVariables  pDatabaseTCProcedureVariables;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments[2];
	CTCProcedureDocumentBranchItem  *pBranchItem;
	CTCProcedureDocumentSwitchItem  *pSwitchItem;
	CTCProcedureDocumentDoLoopItem  *pDoLoopItem;
	CTCProcedureDocumentForLoopItem  *pForLoopItem;
	CTCProcedureDocumentWhileLoopItem  *pWhileLoopItem;
	CTCProcedureDocumentSetArgumentsItem  *pSetArgumentsItem;
	CTCProcedureDocumentSetVariablesItem  *pSetVariablesItem;
	CTCProcedureDocumentSetParametersItem  *pSetParametersItem;
	CTCProcedureDocumentCallProcedureItem  *pCallProcedureItem;
	CTCProcedureDocumentStartProcedureItem  *pStartProcedureItem;
	CTCProcedureDocumentSendTCFunctionItem  *pSendTCFunctionItem;
	CTCProcedureDocumentSendTCSequenceItem  *pSendTCSequenceItem;
	CTCProcedureDocumentSetSynchronizationObjectItem  *pSetSyncObjectItem;
	CTCProcedureDocumentWaitSynchronizationObjectItem  *pWaitSyncObjectItem;

	for (nThread = 0, nThreads = (INT)pDatabaseTCProcedure->GetSize(); nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(nThread)))
		{
			if ((pDocument = new CTCProcedureDocument))
			{
				if (pDocument->Unmap(pDatabaseTCProcedureThread))
				{
					for (nStep = 0, nSteps = pDocument->EnumSteps(pSteps, FALSE, TRUE); nStep < nSteps; nStep++)
					{
						if ((pStep = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)) != (CTCProcedureDocumentItem *)NULL)
						{
							if ((pSetSyncObjectItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETSYNCOBJECT) ? (CTCProcedureDocumentSetSynchronizationObjectItem *)pStep : (CTCProcedureDocumentSetSynchronizationObjectItem *)NULL))
							{
								for (nSyncObject = 0, nSyncObjects = (INT)szSyncObjects.GetSize(); nSyncObject < nSyncObjects; nSyncObject++)
								{
									if (szSyncObjects.GetAt(nSyncObject) == pSetSyncObjectItem->GetObjectName()) break;
									continue;
								}
								if (nSyncObject == nSyncObjects)
								{
									szSyncObjects.Add(pSetSyncObjectItem->GetObjectName());
									continue;
								}
							}
							if ((pWaitSyncObjectItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_WAITSYNCOBJECT) ? (CTCProcedureDocumentWaitSynchronizationObjectItem *)pStep : (CTCProcedureDocumentWaitSynchronizationObjectItem *)NULL))
							{
								for (nSyncObject = 0, nSyncObjects = (INT)szSyncObjects.GetSize(); nSyncObject < nSyncObjects; nSyncObject++)
								{
									if (szSyncObjects.GetAt(nSyncObject) == pWaitSyncObjectItem->GetObjectName()) break;
									continue;
								}
								if (nSyncObject == nSyncObjects)
								{
									szSyncObjects.Add(pWaitSyncObjectItem->GetObjectName());
									continue;
								}
							}
						}
					}
				}
				delete pDocument;
			}
		}
	}
	if (szSourceCode.IsEmpty())
	{
		for (szSourceCode = STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_PROCEDURE), szSourceCode += SPACE, szSourceCode += STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER), szSourceCode += (!pDatabaseTCProcedure->GetName().IsEmpty()) ? pDatabaseTCProcedure->GetName() : STRING(IDS_WINDOW_UNTITLED), szSourceCode += STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER), bSourceCode = !pDatabaseTCProcedure->GetName().IsEmpty(); !szSourceCode.IsEmpty(); )
		{
			for (nArgument = 0, nArguments = pDatabaseTCProcedure->GetArguments(pDatabaseTCProcedureArguments[0]); nArgument < nArguments; nArgument++)
			{
				if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments[0].GetAt(nArgument)))
				{
					szSourceCode += (!nArgument) ? STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINARGUMENTS) : EMPTYSTRING;
					szSourceCode += (nArgument > 0) ? STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR) : EMPTYSTRING;
					szSourceCode += TranslateIdentifierDataType(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetWidth()) + SPACE;
					szSourceCode += (nArgument == nArguments - 1) ? (pDatabaseTCProcedureArgument->GetTag() + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDARGUMENTS)) : pDatabaseTCProcedureArgument->GetTag();
				}
			}
			for (nVariable = 0, nVariables = pDatabaseTCProcedure->GetVariables(pDatabaseTCProcedureVariables); nVariable < nVariables; nVariable++)
			{
				if ((pDatabaseTCProcedureVariable = pDatabaseTCProcedureVariables.GetAt(nVariable)))
				{
					szSourceCode += CString(CR) + CString(EOL) + TranslateIdentifierDataType(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetWidth()) + CString(SPACE) + CString(SPACE) + pDatabaseTCProcedureVariable->GetTag() + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR);
					continue;
				}
			}
			for (nSyncObject = 0, nSyncObjects = (INT)szSyncObjects.GetSize(), szSourceCode += CString(CR) + CString(EOL) + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_BEGIN) + CString(CR) + CString(EOL); nSyncObject < nSyncObjects; nSyncObject++)
			{
				szObject.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SYNCOBJECT_DECLARATION), (LPCTSTR)szSyncObjects.GetAt(nSyncObject));
				szSourceCode += CString(SPACE) + CString(SPACE) + szObject + CR + EOL;
			}
			for (nThread = 0; nThread < nThreads; nThread++)
			{
				if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(nThread)))
				{
					szSourceCode += CString(CR) + CString(EOL);
					szSourceCode += CString(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_THREAD)) + SPACE;
					szSourceCode += STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER) + pDatabaseTCProcedureThread->GetName() + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER);
					szSourceCode += CString(CR) + CString(EOL);
					if ((pDocument = new CTCProcedureDocument))
					{
						if (pDocument->Unmap(pDatabaseTCProcedureThread))
						{
							for (szParameters[0][0].RemoveAll(), szParameters[1][0].RemoveAll(); ExtractExpressionParameters(pDatabase, pDatabaseTCProcedureThread->GetActivationExpression(), szParameters[0][1], szParameters[1][1]) > 0; )
							{
								CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
								CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
								break;
							}
							for (nStep = 0, nSteps = pDocument->EnumSteps(pSteps, FALSE, TRUE); nStep < nSteps; nStep++)
							{
								if ((pStep = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)) != (CTCProcedureDocumentItem *)NULL)
								{
									if (pStep->GetTriggerType() & TCPROCEDURETHREADSTEP_TRIGGERTYPE_EXPRESSION)
									{
										if (ExtractExpressionParameters(pDatabase, pStep->GetTriggerExpression(), szParameters[0][1], szParameters[1][1]) > 0)
										{
											CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
											CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
										}
									}
									if (pStep->GetConfirmationType() & TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_EXPRESSION)
									{
										if (ExtractExpressionParameters(pDatabase, pStep->GetConfirmationExpression(), szParameters[0][1], szParameters[1][1]) > 0)
										{
											CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
											CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
										}
									}
									if (ExtractExpressionParameters(pDatabase, pStep->GetPreexecutionExpression(), szParameters[0][1], szParameters[1][1]) > 0)
									{
										CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
										CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
									}
									switch (pStep->GetType())
									{
									case TCPROCEDURETHREADSTEP_FLOWCONTROL_BRANCH:
									{ if ((pBranchItem = (CTCProcedureDocumentBranchItem *)pStep))
									{
										if (ExtractExpressionParameters(pDatabase, pBranchItem->GetInvariantCondition(), szParameters[0][1], szParameters[1][1]) > 0)
										{
											CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
											CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
										}
										if (ExtractExpressionParameters(pDatabase, pBranchItem->GetTestExpression(), szParameters[0][1], szParameters[1][1]) > 0)
										{
											CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
											CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
										}
									}
									break;
									}
									case TCPROCEDURETHREADSTEP_FLOWCONTROL_SWITCH:
									{ if ((pSwitchItem = (CTCProcedureDocumentSwitchItem *)pStep))
									{
										if (ExtractExpressionParameters(pDatabase, pSwitchItem->GetInvariantCondition(), szParameters[0][1], szParameters[1][1]) > 0)
										{
											CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
											CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
										}
										for (nExpression = 0, nExpressions = pSwitchItem->GetBranches(); nExpression < nExpressions; nExpression++)
										{
											if (ExtractExpressionParameters(pDatabase, pSwitchItem->GetBranchTestExpression(nExpression), szParameters[0][1], szParameters[1][1]) > 0)
											{
												CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
												CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
											}
										}
									}
									break;
									}
									case TCPROCEDURETHREADSTEP_FLOWCONTROL_FORLOOP:
									{ if ((pForLoopItem = (CTCProcedureDocumentForLoopItem *)pStep))
									{
										if (ExtractExpressionParameters(pDatabase, pForLoopItem->GetInvariantCondition(), szParameters[0][1], szParameters[1][1]) > 0)
										{
											CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
											CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
										}
									}
									break;
									}
									case TCPROCEDURETHREADSTEP_FLOWCONTROL_WHILELOOP:
									{ if ((pWhileLoopItem = (CTCProcedureDocumentWhileLoopItem *)pStep))
									{
										if (ExtractExpressionParameters(pDatabase, pWhileLoopItem->GetInvariantCondition(), szParameters[0][1], szParameters[1][1]) > 0)
										{
											CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
											CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
										}
										if (ExtractExpressionParameters(pDatabase, pWhileLoopItem->GetTestExpression(), szParameters[0][1], szParameters[1][1]) > 0)
										{
											CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
											CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
										}
									}
									break;
									}
									case TCPROCEDURETHREADSTEP_FLOWCONTROL_DOLOOP:
									{ if ((pDoLoopItem = (CTCProcedureDocumentDoLoopItem *)pStep))
									{
										if (ExtractExpressionParameters(pDatabase, pDoLoopItem->GetInvariantCondition(), szParameters[0][1], szParameters[1][1]) > 0)
										{
											CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
											CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
										}
										if (ExtractExpressionParameters(pDatabase, pDoLoopItem->GetTestExpression(), szParameters[0][1], szParameters[1][1]) > 0)
										{
											CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
											CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
										}
									}
									break;
									}
									case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETARGUMENTS:
									{ if ((pSetArgumentsItem = (CTCProcedureDocumentSetArgumentsItem *)pStep))
									{
										for (nExpression = 0, nExpressions = pSetArgumentsItem->GetExpressions(szExpressions[0]); nExpression < nExpressions; nExpression++)
										{
											if (ExtractExpressionParameters(pDatabase, szExpressions[0].GetAt(nExpression), szParameters[0][1], szParameters[1][1]) > 0)
											{
												CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
												CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
											}
										}
									}
									break;
									}
									case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETVARIABLES:
									{ if ((pSetVariablesItem = (CTCProcedureDocumentSetVariablesItem *)pStep))
									{
										for (nExpression = 0, nExpressions = pSetVariablesItem->GetExpressions(szExpressions[0]); nExpression < nExpressions; nExpression++)
										{
											if (ExtractExpressionParameters(pDatabase, szExpressions[0].GetAt(nExpression), szParameters[0][1], szParameters[1][1]) > 0)
											{
												CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
												CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
											}
										}
									}
									break;
									}
									case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETPARAMETERS:
									{ if ((pSetParametersItem = (CTCProcedureDocumentSetParametersItem *)pStep))
									{
										for (; pSetParametersItem->GetParameters(szParameters[1][1]) > 0; )
										{
											CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
											break;
										}
										for (nExpression = 0, nExpressions = pSetParametersItem->GetExpressions(szExpressions[0]); nExpression < nExpressions; nExpression++)
										{
											if (ExtractExpressionParameters(pDatabase, szExpressions[0].GetAt(nExpression), szParameters[0][1], szParameters[1][1]) > 0)
											{
												CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
												CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
											}
										}
									}
									break;
									}
									case TCPROCEDURETHREADSTEP_ACTIONOBJECT_CALLPROCEDURE:
									{ if ((pCallProcedureItem = (CTCProcedureDocumentCallProcedureItem *)pStep))
									{
										if (ExtractExpressionParameters(pDatabase, pCallProcedureItem->GetInvariantCondition(), szParameters[0][1], szParameters[1][1]) > 0)
										{
											CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
											CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
										}
										for (nExpression = 0, nExpressions = pCallProcedureItem->GetArguments(pDatabaseTCProcedureArguments[1], szExpressions[0]); nExpression < nExpressions; nExpression++)
										{
											if (ExtractExpressionParameters(pDatabase, szExpressions[0].GetAt(nExpression), szParameters[0][1], szParameters[1][1]) > 0)
											{
												CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
												CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
											}
										}
									}
									break;
									}
									case TCPROCEDURETHREADSTEP_ACTIONOBJECT_STARTPROCEDURE:
									{ if ((pStartProcedureItem = (CTCProcedureDocumentStartProcedureItem *)pStep))
									{
										if (ExtractExpressionParameters(pDatabase, pStartProcedureItem->GetInvariantCondition(), szParameters[0][1], szParameters[1][1]) > 0)
										{
											CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
											CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
										}
										for (nExpression = 0, nExpressions = pStartProcedureItem->GetArguments(pDatabaseTCProcedureArguments[1], szExpressions[0]); nExpression < nExpressions; nExpression++)
										{
											if (ExtractExpressionParameters(pDatabase, szExpressions[0].GetAt(nExpression), szParameters[0][1], szParameters[1][1]) > 0)
											{
												CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
												CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
											}
										}
									}
									break;
									}
									case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION:
									{ if ((pSendTCFunctionItem = (CTCProcedureDocumentSendTCFunctionItem *)pStep))
									{
										if (ExtractExpressionParameters(pDatabase, pSendTCFunctionItem->GetPreexecutionVerificationCondition(), szParameters[0][1], szParameters[1][1]) > 0)
										{
											CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
											CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
										}
										if (ExtractExpressionParameters(pDatabase, pSendTCFunctionItem->GetExecutionVerificationCondition(), szParameters[0][1], szParameters[1][1]) > 0)
										{
											CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
											CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
										}
									}
									break;
									}
									case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE:
									{ if ((pSendTCSequenceItem = (CTCProcedureDocumentSendTCSequenceItem *)pStep))
									{
										for (nFunction = 0, nFunctions = pSendTCSequenceItem->GetSize(); nFunction < nFunctions; nFunction++)
										{
											if ((pSendTCFunctionItem = pSendTCSequenceItem->GetAt(nFunction)) != (CTCProcedureDocumentSendTCFunctionItem *)NULL)
											{
												if (ExtractExpressionParameters(pDatabase, pSendTCFunctionItem->GetPreexecutionVerificationCondition(), szParameters[0][1], szParameters[1][1]) > 0)
												{
													CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
													CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
												}
												if (ExtractExpressionParameters(pDatabase, pSendTCFunctionItem->GetExecutionVerificationCondition(), szParameters[0][1], szParameters[1][1]) > 0)
												{
													CollectExpressionParameters(szParameters[0][1], szParameters[0][0]);
													CollectExpressionParameters(szParameters[1][1], szParameters[1][0]);
												}
											}
										}
									}
									break;
									}
									}
								}
							}
							if (szParameters[1][0].GetSize() > 0)
							{
								for (nParameter = 0, nParameters = (INT)szParameters[1][0].GetSize(), szSourceCode += STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_TCPARAMETERS) + CString(SPACE) + CString(SPACE); nParameter < nParameters; nParameter++)
								{
									szSourceCode += (nParameter % 16 == 0 && nParameter > 0) ? (STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR) + CString(CR) + CString(EOL) + CString(SPACE[0], lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_TCPARAMETERS))) + CString(SPACE) + CString(SPACE)) : ((nParameter > 0) ? STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR) : EMPTYSTRING);
									szSourceCode += szParameters[1][0].GetAt(nParameter);
								}
								szSourceCode += STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR);
								szSourceCode += CString(CR) + CString(EOL);
							}
							if (szParameters[0][0].GetSize() > 0)
							{
								for (nParameter = 0, nParameters = (INT)szParameters[0][0].GetSize(), szSourceCode += STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_PARAMETERS) + CString(SPACE) + CString(SPACE); nParameter < nParameters; nParameter++)
								{
									szSourceCode += (nParameter % 16 == 0 && nParameter > 0) ? (STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR) + CString(CR) + CString(EOL) + CString(SPACE[0], lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_PARAMETERS))) + CString(SPACE) + CString(SPACE)) : ((nParameter > 0) ? STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR) : EMPTYSTRING);
									szSourceCode += szParameters[0][0].GetAt(nParameter);
								}
								szSourceCode += STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR);
								szSourceCode += CString(CR) + CString(EOL);
							}
							for (szSourceCode += STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_BEGIN) + CString(CR) + CString(EOL), szIndent.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_THREAD_BLOCK), CString(TAB)); (nPos = szIndent.Find(TAB)) >= 0; )
							{
								for (szIndent = szIndent.Left(nPos), nPos = szIndent.GetLength() - 1; nPos >= 0; nPos--)
								{
									if (szIndent.GetAt(nPos) != SPACE[0]) break;
									continue;
								}
								szIndent = szIndent.Mid(nPos + 1);
								break;
							}
							for (lPosition = pDocument->GetStartPosition(), szBlock[0].Empty(); lPosition; )
							{
								if ((pStep = pDocument->GetNextStep(lPosition)) && pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_START  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_END)
								{
									szLabel[0].Format((szFailureLabels.GetSize() > 0 && !szFailureLabels.GetAt(0).IsEmpty()) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_RETURNCODE_GOTOSTATEMENT) : STRING(IDS_TELECOMMANDPROCEDUREFILE_RETURNCODE_EXITSTATEMENT), (pStep->GetFailureLabels(szFailureLabels) > 0) ? (LPCTSTR)szFailureLabels.GetAt(0) : EMPTYSTRING);
									szLabel[1].Format((szFailureLabels.GetSize() > 1 && !szFailureLabels.GetAt(1).IsEmpty()) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_RETURNCODE_GOTOSTATEMENT) : STRING(IDS_TELECOMMANDPROCEDUREFILE_RETURNCODE_EXITSTATEMENT), (szFailureLabels.GetSize() > 1) ? (LPCTSTR)szFailureLabels.GetAt(1) : EMPTYSTRING);
									szLabel[2].Format((szFailureLabels.GetSize() > 2 && !szFailureLabels.GetAt(2).IsEmpty()) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_RETURNCODE_GOTOSTATEMENT) : STRING(IDS_TELECOMMANDPROCEDUREFILE_RETURNCODE_EXITSTATEMENT), (szFailureLabels.GetSize() > 2) ? (LPCTSTR)szFailureLabels.GetAt(2) : EMPTYSTRING);
									szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_BLOCK), (LPCTSTR)pStep->GetName(), (LPCTSTR)szIndent, (LPCTSTR)pStep->GetName(), (LPCTSTR)szIndent, (LPCTSTR)szLabel[0], (LPCTSTR)szIndent, (LPCTSTR)szIndent, (LPCTSTR)pStep->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szIndent, (LPCTSTR)pStep->GetName(), (LPCTSTR)szIndent, (LPCTSTR)szLabel[1], (LPCTSTR)szIndent, (LPCTSTR)szIndent, (!(szBlock[1] = GenerateStepSourceCode(pDatabase, pDatabaseTCProcedure, pStep, szLabel[1], szIndent)).IsEmpty()) ? (LPCTSTR)(szBlock[1] + CR + EOL + szIndent) : EMPTYSTRING, (LPCTSTR)pStep->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szIndent, (LPCTSTR)pStep->GetName(), (LPCTSTR)szIndent, (LPCTSTR)szLabel[2], (LPCTSTR)szIndent, (LPCTSTR)szIndent, (LPCTSTR)pStep->GetName());
									szBlock[0] += (pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO  &&  pStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? ((!szBlock[0].IsEmpty()) ? (szIndent + szBlock[2]) : szBlock[2]) : ((!szBlock[0].IsEmpty()) ? (szIndent + szBlock[1]) : szBlock[1]);
									szBlock[0] += CString(CR) + CString(EOL);
								}
							}
							if (szBlock[0].GetLength() >= lstrlen(CString(CR) + CString(EOL)) && szBlock[0].Right(lstrlen(CString(CR) + CString(EOL))) == CString(CR) + CString(EOL))
							{
								szBlock[0] = szBlock[0].Left(szBlock[0].GetLength() - 1);
								szBlock[0] = szBlock[0].Left(szBlock[0].GetLength() - 1);
							}
							szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_THREAD_BLOCK), (!szBlock[0].IsEmpty()) ? (LPCTSTR)szBlock[0] : STRING(IDS_TELECOMMANDPROCEDUREFILE_DEFAULT_BLOCK));
							szSourceCode += szBlock[1] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_END) + CString(CR) + CString(EOL);
							delete pDocument;
							continue;
						}
						delete pDocument;
					}
				}
				break;
			}
			szSourceCode += CString(CR) + CString(EOL) + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_END) + CString(CR) + CString(EOL);
			bSourceCode = (nThread == nThreads) ? bSourceCode : FALSE;
			break;
		}
		for (; !bSourceCode; )
		{
			szSourceCode.Empty();
			break;
		}
	}
	if (nFlags != 0)
	{
		if (LoadSourceCodeTemplate(IDR_TCPROCEDUREPROCESSTEMPLATE, szTemplate[0]) && LoadSourceCodeTemplate(IDR_TCPROCEDURETHREADTEMPLATE, szTemplate[1]) && !szSourceCode.IsEmpty() && EnumExpressionParameters(pDatabase, szSourceCode, szParameters[0][0], szParameters[0][1]) >= 0)
		{
			for (nThread = 0, nThreads = EnumThreads(pDatabaseTCProcedure, szSourceCode), pDatabaseTCProcedure->GetArguments(pDatabaseTCProcedureArguments[0]), pDatabaseTCProcedure->GetVariables(pDatabaseTCProcedureVariables), szExpressions[0].RemoveAll(), szExpressions[1].RemoveAll(), szBlock[0] = EnumParameterIdentifiers(szParameters[0][0]); nThread < nThreads; nThread++)
			{
				if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(nThread)) != (CDatabaseTCProcedureThread *)NULL)
				{
					szExpressions[0].InsertAt(nThread, ExtractThreadTCFunctionPreexecutionExpressions(pDatabase, pDatabaseTCProcedure, pDatabaseTCProcedureThread->GetName(), szBlock[0]));
					szExpressions[1].InsertAt(nThread, ExtractThreadTCFunctionExecutionExpressions(pDatabase, pDatabaseTCProcedure, pDatabaseTCProcedureThread->GetName(), szBlock[0]));
				}
			}
			for (nThread = 0; nThread < nThreads; nThread++)
			{
				if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(nThread)))
				{
					szName = TranslateToIdentifierName(pDatabaseTCProcedureThread->GetName());
					szBlock[1] = ExtractThreadCode(szSourceCode, pDatabaseTCProcedureThread->GetName());
					szBlock[2] = ExtractThreadTriggerExpressions(pDatabaseTCProcedure, pDatabaseTCProcedureThread->GetName());
					szBlock[3] = ExtractThreadBodyExpressions(pDatabaseTCProcedure, pDatabaseTCProcedureThread->GetName());
					szBlock[4] = ExtractThreadConfirmationExpressions(pDatabaseTCProcedure, pDatabaseTCProcedureThread->GetName());
					szBlock[5] = ExtractThreadTCFunctionInitializations(pDatabase, pDatabaseTCProcedure, pDatabaseTCProcedureThread->GetName(), FALSE);
					szBlock[6] = ExtractThreadTCFunctionInitializations(pDatabase, pDatabaseTCProcedure, pDatabaseTCProcedureThread->GetName(), TRUE);
					szBlock[7] = ExtractThreadTCFunctionExecutionVerificationTimeWindows(pDatabase, pDatabaseTCProcedure, pDatabaseTCProcedureThread->GetName());
					szHeader[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_THREAD_INITIALIZATIONHEADER), (LPCTSTR)szName);
					szHeader[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_THREAD_EXECUTIONHEADER), (LPCTSTR)szName);
					szCode[0].Format(szTemplate[1], (LPCTSTR)szName, (LPCTSTR)szName, (LPCTSTR)szName, (LPCTSTR)szName, (LPCTSTR)szName, (LPCTSTR)szHeader[1], (LPCTSTR)szBlock[1], (LPCTSTR)szHeader[0], STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_PARAMETERSPLACEHOLDER), (LPCTSTR)szName, (LPCTSTR)szBlock[0], (LPCTSTR)szName, TranslateConditionExpression(pDatabaseTCProcedureThread->GetActivationExpression()), (LPCTSTR)szName, (LPCTSTR)szBlock[2], (LPCTSTR)szName, (LPCTSTR)szBlock[3], (LPCTSTR)szName, (LPCTSTR)szBlock[4], (LPCTSTR)szName, (LPCTSTR)szBlock[5], (LPCTSTR)szBlock[6], (LPCTSTR)szName, (LPCTSTR)szBlock[7], (LPCTSTR)szName, (LPCTSTR)szExpressions[0].GetAt(nThread), (LPCTSTR)szName, (LPCTSTR)szExpressions[1].GetAt(nThread));
					szCode[1] += CString(CR) + CString(EOL) + CString(CR) + CString(EOL) + szCode[0];
					szCode[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_INITIALIZATION_THREADS_STATEMENT), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)szName);
					szCode[2] += (!szCode[2].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + szCode[0]) : szCode[0];
				}
			}
			for (szName = TranslateToIdentifierName(pDatabaseTCProcedure->GetName()), szIdentifiers[0] = EnumArgumentIdentifiers(pDatabaseTCProcedureArguments[0]), szIdentifiers[1] = EnumVariableIdentifiers(pDatabaseTCProcedureVariables), szIdentifiers[2] = EnumSynchronizationObjectIdentifiers(szSyncObjects), szBlock[0] = EnumExpressionTMParameterDeclarations(szParameters[0][0]), szBlock[1] = EnumExpressionTCParameterDeclarations(szParameters[0][1]), szBlock[2] = EnumArgumentAssignments(pDatabaseTCProcedureArguments[0], TRUE), szBlock[3] = EnumArgumentAssignments(pDatabaseTCProcedureArguments[0], FALSE), szBlock[4] = EnumVariableAssignments(pDatabaseTCProcedureVariables), szBlock[5] = EnumIdentifierReferences(pDatabase, pDatabaseTCProcedureArguments[0], pDatabaseTCProcedureVariables, szParameters[0][0], szParameters[0][1]), szBlock[6] = EnumSynchronizationObjectReferences(szSyncObjects), szBlock[7] = EnumExpressionTMParameterInitializations(szParameters[0][0]), szBlock[8] = EnumExpressionTCParameterInitializations(szParameters[0][1]), szFunctions = ExtractFunctions(pDatabaseTCProcedure, szSourceCode), szCode[0].Format(szTemplate[0], (LPCTSTR)szBlock[0], (LPCTSTR)szBlock[1], (LPCTSTR)szIdentifiers[0], (LPCTSTR)szIdentifiers[1], (LPCTSTR)szIdentifiers[2], (LPCTSTR)szName, (LPCTSTR)szFunctions, (LPCTSTR)szName, (LPCTSTR)szName, (LPCTSTR)szName, (LPCTSTR)szCode[1], (LPCTSTR)szName, (LPCTSTR)szName, (LPCTSTR)szName, (!szCode[2].IsEmpty()) ? (LPCTSTR)(szCode[2] + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE)) : EMPTYSTRING, (LPCTSTR)szName, (LPCTSTR)szName, (LPCTSTR)szName, (LPCTSTR)szBlock[2], (LPCTSTR)szName, STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_PLACEHOLDER), (LPCTSTR)szBlock[3], (LPCTSTR)szName, (LPCTSTR)szBlock[4], (LPCTSTR)szName, (LPCTSTR)szBlock[5], (LPCTSTR)szName, (LPCTSTR)szBlock[6], (LPCTSTR)szName, (LPCTSTR)szName, (LPCTSTR)szName, (LPCTSTR)szName, (LPCTSTR)szName, (LPCTSTR)szName, STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_LINNUMBERSPLACEHOLDER), (LPCTSTR)szBlock[8], (LPCTSTR)szBlock[7], STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_PLACEHOLDER)); TranslateSourceCode(pDatabase, pDatabaseTCProcedure, szSourceCode, szCode[0], pDatabaseTCProcedureArguments[0], pDatabaseTCProcedureVariables, szCode[1]); )
			{
				szSourceCode = szCode[1];
				break;
			}
			for (szCode[0] = szCode[1] = szSourceCode; (nPos = szCode[1].Find(STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDURESOURCECODEVERSION))) >= 0; )
			{
				for (szCode[1] = szCode[1].Mid(nPos + lstrlen(STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDURESOURCECODEVERSION))); (nPos = szCode[1].Find(STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDURESOURCECODEVERSION))) >= 0; )
				{
					for (; nPos >= 0 && szCode[1].GetAt(nPos) != EOL; nPos--);
					szCode[1] = (nPos >= 0) ? szCode[1].Mid(nPos + 1) : EMPTYSTRING;
					break;
				}
				break;
			}
			if (nPos >= 0)
			{
				for (szCode[0] = szCode[0].Left(szCode[0].GetLength() - szCode[1].GetLength()); nFlags < 0; )
				{
					szSourceCode = szCode[0];
					return TRUE;
				}
				for (szCode[1].Empty(), nQuoteCount = 0, nPos = 0; (nPos = szCode[0].Find(CR)) >= 0; szCode[0] = szCode[0].Mid(nPos + 1 + 1))
				{
					for (szCode[2] = szCode[0].Left(nPos) + STRING(IDS_TELECOMMANDPROCEDUREFILE_CHECKVERSION_SEPARATOR), nQuotePos[0] = 0; nQuotePos[0] < szCode[2].GetLength(); )
					{
						for (nQuotePos[1] = szCode[2].Mid(nQuotePos[0]).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE)), nQuotePos[2] = szCode[2].Mid(nQuotePos[0]).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_PATHNAMESYMBOL)); nQuotePos[1] >= 0 && (nQuotePos[1] < nQuotePos[2] || nQuotePos[2] < 0); nQuotePos[1] = szCode[2].Mid(nQuotePos[0]).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE)), nQuotePos[2] = szCode[2].Mid(nQuotePos[0]).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_PATHNAMESYMBOL)))
						{
							if (nQuotePos[0] + nQuotePos[1] < lstrlen(STRING(IDS_TELECOMMANDPROCEDUREFILE_CHECKVERSION_STRINGQUOTE)) || szCode[2].Mid(nQuotePos[0] + nQuotePos[1] - lstrlen(STRING(IDS_TELECOMMANDPROCEDUREFILE_CHECKVERSION_STRINGQUOTE)) + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE)), lstrlen(STRING(IDS_TELECOMMANDPROCEDUREFILE_CHECKVERSION_STRINGQUOTE))) != STRING(IDS_TELECOMMANDPROCEDUREFILE_CHECKVERSION_STRINGQUOTE))
							{
								szCode[2] = szCode[2].Left(nQuotePos[0] + nQuotePos[1]) + STRING(IDS_TELECOMMANDPROCEDUREFILE_CHECKVERSION_STRINGQUOTE) + szCode[2].Mid(nQuotePos[0] + nQuotePos[1] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE)));
								nQuotePos[0] += nQuotePos[1] + lstrlen(STRING(IDS_TELECOMMANDPROCEDUREFILE_CHECKVERSION_STRINGQUOTE));
								nQuoteCount++;
								break;
							}
							szCode[2] = szCode[2].Left(nQuotePos[0] + nQuotePos[1]) + STRINGCHAR(IDS_TELECOMMANDPROCEDUREFILE_CHECKVERSION_STRINGQUOTE) + STRINGCHAR(IDS_TELECOMMANDPROCEDUREFILE_CHECKVERSION_STRINGQUOTE) + szCode[2].Mid(nQuotePos[0] + nQuotePos[1]);
							nQuotePos[0] += 2 + nQuotePos[1] + 1;
							break;
						}
						if (nQuotePos[2] >= 0 && (nQuotePos[2] < nQuotePos[1] || nQuotePos[1] < 0))
						{
							szCode[2] = (nQuoteCount % 2) ? (szCode[2].Left(nQuotePos[0] + nQuotePos[2]) + STRING(IDS_TELECOMMANDPROCEDUREFILE_CHECKVERSION_PATHNAMESYMBOL) + szCode[2].Mid(nQuotePos[0] + nQuotePos[2] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_PATHNAMESYMBOL)))) : szCode[2];
							nQuotePos[0] += (nQuoteCount % 2) ? (nQuotePos[2] + lstrlen(STRING(IDS_TELECOMMANDPROCEDUREFILE_CHECKVERSION_PATHNAMESYMBOL))) : (nQuotePos[2] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_PATHNAMESYMBOL)));
						}
						if (nQuotePos[1] < 0 && nQuotePos[2] < 0) break;
					}
					szCode[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_CHECKVERSION_STATEMENT), (LPCTSTR)szCode[2]);
					szCode[1] += (!szCode[1].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + szCode[3]) : szCode[3];
				}
				for (szCode[0] = szSourceCode, szCode[1] += (!szCode[1].IsEmpty()) ? (CString(CR) + CString(EOL) + SPACE + SPACE) : EMPTYSTRING, nPos = szCode[0].GetLength() - lstrlen(STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_PLACEHOLDER)); nPos >= 0; nPos--)
				{
					if (szCode[0].Mid(nPos, lstrlen(STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_PLACEHOLDER))) == STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_PLACEHOLDER))
					{
						szSourceCode = szCode[0].Left(nPos) + szCode[1] + szCode[0].Mid(nPos + lstrlen(STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_PLACEHOLDER)));
						break;
					}
				}
				return TRUE;
			}
		}
	}
	return((!nFlags) ? !szSourceCode.IsEmpty() : FALSE);
}

int CTCProcedureCompileThread::Run()
{
	CBinaryDatabase  *pDatabase = (CBinaryDatabase *)GetThreadInfo();
	CUpdateUI  cUpdateUI;

	for (SetErrorCount(), SetWarningCount(), ShowStartCompileMessages(); OpenCompileTarget(pDatabase); )
	{
		CompileTarget(pDatabase);
		CloseCompileTarget();
		break;
	}
	ShowStopCompileMessages();
	return 0;
}

BOOL CTCProcedureCompileThread::OpenCompileTarget(CBinaryDatabase *pDatabase)
{
	return m_bCompilation[0].SetEvent();
}

VOID CTCProcedureCompileThread::CompileTarget(CBinaryDatabase *pDatabase)
{
	INT  nPos;
	INT  nStep;
	INT  nSteps;
	INT  nEntry;
	INT  nEntries;
	INT  nThread;
	INT  nThreads;
	INT  nBranch;
	INT  nBranches;
	INT  nLabel[2];
	INT  nLabels[2];
	INT  nElement;
	INT  nElements;
	INT  nArgument;
	INT  nArguments;
	INT  nVariable;
	INT  nVariables;
	INT  nSyncObject;
	INT  nSyncObjects;
	INT  nParameter[2];
	INT  nParameters[2];
	BOOL  bArgument[3];
	BOOL  bVariable[3];
	BOOL  bSourceFile;
	BOOL  bSourceCode;
	CHAR  szOut[512];
	DWORD  dwData;
	DWORD  dwOut;
	DWORD  cbOut;
	double  fRange[3];
	HANDLE  hStdIn[3];
	HANDLE  hStdOut[3];
	HANDLE  hStdError;
	CFileEx  cFile;
	CString  szError;
	CString  szErrors;
	CString  szMessage;
	CString  szOptions;
	CString  szSyncObject;
	CString  szOutputName;
	CString  szFileName[3];
	CString  szSourceCode[3];
	CPtrArray  pThreadSteps;
	ULONGLONG  nRange[3];
	CFileFind  cFileFind;
	CPtrArray  pDisplays;
	CByteArray  nFileData;
	CStringArray  szValues;
	CStringArray  szArguments;
	CStringArray  szVariables;
	CStringArray  szGotoLabels;
	CStringArray  szSyncObjects;
	CStringArray  szExpressions;
	CStringArray  szFailureLabels;
	CStringArray  szParameters[3];
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments[2];
	CDatabaseTCProcedureVariables  pDatabaseTCProcedureVariables;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep;
	CTCProcedureDocumentGotoItem  *pGotoItem;
	CTCProcedureDocumentLabelItem  *pLabelItem;
	CTCProcedureDocumentBranchItem  *pBranchItem;
	CTCProcedureDocumentSwitchItem  *pSwitchItem;
	CTCProcedureDocumentDoLoopItem  *pDoLoopItem;
	CTCProcedureDocumentForLoopItem  *pForLoopItem;
	CTCProcedureDocumentWhileLoopItem  *pWhileLoopItem;
	CTCProcedureDocumentSetArgumentsItem  *pSetArgumentsItem;
	CTCProcedureDocumentSetVariablesItem  *pSetVariablesItem;
	CTCProcedureDocumentSetParametersItem  *pSetParametersItem;
	CTCProcedureDocumentCallProcedureItem  *pCallProcedureItem;
	CTCProcedureDocumentStartProcedureItem  *pStartProcedureItem;
	CTCProcedureDocumentSendTCFunctionItem  *pSendTCFunctionItem;
	CTCProcedureDocumentSendTCSequenceItem  *pSendTCSequenceItem;
	CTCProcedureDocumentSetSynchronizationObjectItem  *pSetSyncObjectItem;
	CTCProcedureDocumentWaitSynchronizationObjectItem  *pWaitSyncObjectItem;
	SECURITY_ATTRIBUTES  sCompilerSecurityAttributes = { 0 };
	PROCESS_INFORMATION  sCompilerInformation = { 0 };
	STARTUPINFO  sCompilerStartupInformation = { 0 };

	for (szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALNAME), (LPCTSTR)m_cDatabaseTCProcedure.GetName()); !GetDatabase()->CheckTCProcedureName(m_cDatabaseTCProcedure.GetName()); )
	{
		ShowError(szMessage);
		break;
	}
	if (!GetDatabase()->CheckTCProcedureDescription(m_cDatabaseTCProcedure.GetDescription()))
	{
		szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALDESCRIPTION), (LPCTSTR)m_cDatabaseTCProcedure.GetName());
		ShowError(szMessage);
	}
	if (!GetDatabase()->CheckTCProcedureCreationDate(m_cDatabaseTCProcedure.GetCreationDate()))
	{
		szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALCREATIONDATE), (LPCTSTR)m_cDatabaseTCProcedure.GetName());
		ShowError(szMessage);
	}
	if (!GetDatabase()->CheckTCProcedureModificationDate(m_cDatabaseTCProcedure.GetCreationDate(), m_cDatabaseTCProcedure.GetModificationDate()))
	{
		szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALMODIFICATIONDATE), (LPCTSTR)m_cDatabaseTCProcedure.GetName());
		ShowError(szMessage);
	}
	if (!GetDatabase()->CheckTCProcedureExecutionMode(m_cDatabaseTCProcedure.GetAttributes()))
	{
		szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALEXECUTIONMODE), (LPCTSTR)m_cDatabaseTCProcedure.GetName());
		ShowError(szMessage);
	}
	for (nArgument = 0, nArguments = (CollectArguments(&m_cDatabaseTCProcedure, m_cDatabaseTCProcedure.GetSourceCode(), pDatabaseTCProcedureArguments[0], szArguments) >= 0) ? (INT)szArguments.GetSize() : 0; nArgument < nArguments; nArgument++)
	{
		szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_UNRECOGNIZEDARGUMENTTYPE), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)szArguments.GetAt(nArgument));
		ShowError(szMessage);
	}
	for (nArgument = 0, nArguments = (INT)pDatabaseTCProcedureArguments[0].GetSize(); nArgument < nArguments; nArgument++)
	{
		if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments[0].GetAt(nArgument)))
		{
			if (!CheckArgumentIdentifierName(pDatabaseTCProcedureArgument->GetTag()))
			{
				szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALARGUMENTNAME), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag());
				ShowError(szMessage);
			}
			if ((bArgument[0] = !pDatabaseTCProcedureArgument->GetConstValueAsText().IsEmpty() && (((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0 && !GetDatabase()->CheckTCProcedureArgumentValue(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetConstValueAsText())) || ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) && GetDatabase()->TranslateTCProcedureArgumentTime(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetConstValueAsText()) > 0))))
			{
				szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALARGUMENTDEFAULTVALUE), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag());
				ShowError(szMessage);
			}
			if ((bArgument[1] = !pDatabaseTCProcedureArgument->GetMinValueAsText().IsEmpty() && (((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0 && !GetDatabase()->CheckTCProcedureArgumentValue(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetMinValueAsText())) || ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) && GetDatabase()->TranslateTCProcedureArgumentTime(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetMinValueAsText()) > 0))))
			{
				szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALARGUMENTMINIMUMVALUE), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag());
				ShowError(szMessage);
			}
			if ((bArgument[2] = !pDatabaseTCProcedureArgument->GetMaxValueAsText().IsEmpty() && (((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0 && !GetDatabase()->CheckTCProcedureArgumentValue(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetMaxValueAsText())) || ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) && GetDatabase()->TranslateTCProcedureArgumentTime(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetMaxValueAsText()) > 0))))
			{
				szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALARGUMENTMAXIMUMVALUE), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag());
				ShowError(szMessage);
			}
			for (pDatabaseTCProcedureArgument->SetConstValue((nRange[0] = GetDatabase()->TranslateTCProcedureArgumentValue(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetWidth(), pDatabaseTCProcedureArgument->GetConstValueAsText()))), pDatabaseTCProcedureArgument->SetMinValue((nRange[1] = GetDatabase()->TranslateTCProcedureArgumentValue(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetWidth(), pDatabaseTCProcedureArgument->GetMinValueAsText()))); !pDatabaseTCProcedureArgument->GetConstValueAsText().IsEmpty() && !pDatabaseTCProcedureArgument->GetMinValueAsText().IsEmpty() && !bArgument[0] && !bArgument[1]; )
			{
				if ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) || (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL))
				{
					fRange[0] = CDatabaseEngine::DecodeValue(pDatabase->GetType(), pDatabaseTCProcedureArgument->GetAttributes(), nRange[0]);
					fRange[1] = CDatabaseEngine::DecodeValue(pDatabase->GetType(), pDatabaseTCProcedureArgument->GetAttributes(), nRange[1]);
					if (fRange[0] >= fRange[1]) break;
				}
				if ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) && GetDatabase()->TranslateTCProcedureArgumentTime(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetConstValueAsText()) >= GetDatabase()->TranslateTCProcedureArgumentTime(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetMinValueAsText())) break;
				if ((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) == 0 && pDatabaseTCProcedureArgument->GetConstValueAsText() >= pDatabaseTCProcedureArgument->GetMinValueAsText()) break;
				if (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) && (INT)nRange[0] >= (INT)nRange[1]) || ((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER)) && nRange[0] >= nRange[1])) break;
				szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALARGUMENTDEFAULTVALUE), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag());
				ShowError(szMessage);
				break;
			}
			for (pDatabaseTCProcedureArgument->SetMaxValue((nRange[2] = GetDatabase()->TranslateTCProcedureArgumentValue(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetWidth(), pDatabaseTCProcedureArgument->GetMaxValueAsText()))); !pDatabaseTCProcedureArgument->GetConstValueAsText().IsEmpty() && !pDatabaseTCProcedureArgument->GetMaxValueAsText().IsEmpty() && !bArgument[0] && !bArgument[2]; )
			{
				if ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) || (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL))
				{
					fRange[0] = CDatabaseEngine::DecodeValue(pDatabase->GetType(), pDatabaseTCProcedureArgument->GetAttributes(), nRange[0]);
					fRange[2] = CDatabaseEngine::DecodeValue(pDatabase->GetType(), pDatabaseTCProcedureArgument->GetAttributes(), nRange[2]);
					if (fRange[0] <= fRange[2]) break;
				}
				if ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) && GetDatabase()->TranslateTCProcedureArgumentTime(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetConstValueAsText()) <= GetDatabase()->TranslateTCProcedureArgumentTime(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetMaxValueAsText())) break;
				if ((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) == 0 && pDatabaseTCProcedureArgument->GetConstValueAsText() <= pDatabaseTCProcedureArgument->GetMaxValueAsText()) break;
				if (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) && (INT)nRange[0] <= (INT)nRange[2]) || ((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER)) && nRange[0] <= nRange[2])) break;
				szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALARGUMENTDEFAULTVALUE), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag());
				ShowError(szMessage);
				break;
			}
			for (; !pDatabaseTCProcedureArgument->GetMinValueAsText().IsEmpty() && !pDatabaseTCProcedureArgument->GetMaxValueAsText().IsEmpty() && !bArgument[1] && !bArgument[2]; )
			{
				if ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) || (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL))
				{
					fRange[1] = CDatabaseEngine::DecodeValue(pDatabase->GetType(), pDatabaseTCProcedureArgument->GetAttributes(), nRange[1]);
					fRange[2] = CDatabaseEngine::DecodeValue(pDatabase->GetType(), pDatabaseTCProcedureArgument->GetAttributes(), nRange[2]);
					if (fRange[1] <= fRange[2]) break;
				}
				if ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) && GetDatabase()->TranslateTCProcedureArgumentTime(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetMinValueAsText()) <= GetDatabase()->TranslateTCProcedureArgumentTime(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetMaxValueAsText())) break;
				if ((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) == 0 && pDatabaseTCProcedureArgument->GetMinValueAsText() <= pDatabaseTCProcedureArgument->GetMaxValueAsText()) break;
				if (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) && (INT)nRange[1] <= (INT)nRange[2]) || ((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER)) && nRange[1] <= nRange[2])) break;
				szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALARGUMENTMAXIMUMVALUE), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag());
				ShowError(szMessage);
				break;
			}
		}
	}
	for (nVariable = 0, nVariables = (CollectVariables(&m_cDatabaseTCProcedure, m_cDatabaseTCProcedure.GetSourceCode(), pDatabaseTCProcedureVariables, szVariables) >= 0) ? (INT)szVariables.GetSize() : 0; nVariable < nVariables; nVariable++)
	{
		szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_UNRECOGNIZEDVARIABLETYPE), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)szVariables.GetAt(nVariable));
		ShowError(szMessage);
	}
	for (nVariable = 0, nVariables = (INT)pDatabaseTCProcedureVariables.GetSize(); nVariable < nVariables; nVariable++)
	{
		if ((pDatabaseTCProcedureVariable = pDatabaseTCProcedureVariables.GetAt(nVariable)))
		{
			if (!CheckVariableIdentifierName(pDatabaseTCProcedureVariable->GetTag()))
			{
				szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALVARIABLENAME), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureVariable->GetTag());
				ShowError(szMessage);
			}
			if ((bVariable[0] = !pDatabaseTCProcedureVariable->GetConstValueAsText().IsEmpty() && (((pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0 && !GetDatabase()->CheckTCProcedureVariableValue(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetConstValueAsText())) || ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TIME) && GetDatabase()->TranslateTCProcedureVariableTime(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetConstValueAsText()) > 0))))
			{
				szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALVARIABLEDEFAULTVALUE), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureVariable->GetTag());
				ShowError(szMessage);
			}
			if ((bVariable[1] = !pDatabaseTCProcedureVariable->GetMinValueAsText().IsEmpty() && (((pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0 && !GetDatabase()->CheckTCProcedureVariableValue(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetMinValueAsText())) || ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TIME) && GetDatabase()->TranslateTCProcedureVariableTime(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetMinValueAsText()) > 0))))
			{
				szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALVARIABLEMINIMUMVALUE), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureVariable->GetTag());
				ShowError(szMessage);
			}
			if ((bVariable[2] = !pDatabaseTCProcedureVariable->GetMaxValueAsText().IsEmpty() && (((pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CODING_TIME)) == 0 && !GetDatabase()->CheckTCProcedureVariableValue(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetMaxValueAsText())) || ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TIME) && GetDatabase()->TranslateTCProcedureVariableTime(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetMaxValueAsText()) > 0))))
			{
				szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALVARIABLEMAXIMUMVALUE), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureVariable->GetTag());
				ShowError(szMessage);
			}
			for (pDatabaseTCProcedureVariable->SetConstValue((nRange[0] = GetDatabase()->TranslateTCProcedureVariableValue(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetWidth(), pDatabaseTCProcedureVariable->GetConstValueAsText()))), pDatabaseTCProcedureVariable->SetMinValue((nRange[1] = GetDatabase()->TranslateTCProcedureVariableValue(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetWidth(), pDatabaseTCProcedureVariable->GetMinValueAsText()))); !pDatabaseTCProcedureVariable->GetConstValueAsText().IsEmpty() && !pDatabaseTCProcedureVariable->GetMinValueAsText().IsEmpty() && !bVariable[0] && !bVariable[1]; )
			{
				if ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) || (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL))
				{
					fRange[0] = CDatabaseEngine::DecodeValue(pDatabase->GetType(), pDatabaseTCProcedureVariable->GetAttributes(), nRange[0]);
					fRange[1] = CDatabaseEngine::DecodeValue(pDatabase->GetType(), pDatabaseTCProcedureVariable->GetAttributes(), nRange[1]);
					if (fRange[0] >= fRange[1]) break;
				}
				if ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TIME) && GetDatabase()->TranslateTCProcedureVariableTime(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetConstValueAsText()) >= GetDatabase()->TranslateTCProcedureVariableTime(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetMinValueAsText())) break;
				if ((pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) == 0 && pDatabaseTCProcedureVariable->GetConstValueAsText() >= pDatabaseTCProcedureVariable->GetMinValueAsText()) break;
				if (((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) && (INT)nRange[0] >= (INT)nRange[1]) || ((pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER)) && nRange[0] >= nRange[1])) break;
				szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALVARIABLEDEFAULTVALUE), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureVariable->GetTag());
				ShowError(szMessage);
				break;
			}
			for (pDatabaseTCProcedureVariable->SetMaxValue((nRange[2] = GetDatabase()->TranslateTCProcedureVariableValue(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetWidth(), pDatabaseTCProcedureVariable->GetMaxValueAsText()))); !pDatabaseTCProcedureVariable->GetConstValueAsText().IsEmpty() && !pDatabaseTCProcedureVariable->GetMaxValueAsText().IsEmpty() && !bVariable[0] && !bVariable[2]; )
			{
				if ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) || (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL))
				{
					fRange[0] = CDatabaseEngine::DecodeValue(pDatabase->GetType(), pDatabaseTCProcedureVariable->GetAttributes(), nRange[0]);
					fRange[2] = CDatabaseEngine::DecodeValue(pDatabase->GetType(), pDatabaseTCProcedureVariable->GetAttributes(), nRange[2]);
					if (fRange[0] <= fRange[2]) break;
				}
				if ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TIME) && GetDatabase()->TranslateTCProcedureVariableTime(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetConstValueAsText()) <= GetDatabase()->TranslateTCProcedureVariableTime(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetMaxValueAsText())) break;
				if ((pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) == 0 && pDatabaseTCProcedureVariable->GetConstValueAsText() <= pDatabaseTCProcedureVariable->GetMaxValueAsText()) break;
				if (((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) && (INT)nRange[0] <= (INT)nRange[2]) || ((pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER)) && nRange[0] <= nRange[2])) break;
				szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALVARIABLEDEFAULTVALUE), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureVariable->GetTag());
				ShowError(szMessage);
				break;
			}
			for (; !pDatabaseTCProcedureVariable->GetMinValueAsText().IsEmpty() && !pDatabaseTCProcedureVariable->GetMaxValueAsText().IsEmpty() && !bVariable[1] && !bVariable[2]; )
			{
				if ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) || (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL))
				{
					fRange[1] = CDatabaseEngine::DecodeValue(pDatabase->GetType(), pDatabaseTCProcedureVariable->GetAttributes(), nRange[1]);
					fRange[2] = CDatabaseEngine::DecodeValue(pDatabase->GetType(), pDatabaseTCProcedureVariable->GetAttributes(), nRange[2]);
					if (fRange[1] <= fRange[2]) break;
				}
				if ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TIME) && GetDatabase()->TranslateTCProcedureVariableTime(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetMinValueAsText()) <= GetDatabase()->TranslateTCProcedureVariableTime(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetMaxValueAsText())) break;
				if ((pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT)) == 0 && pDatabaseTCProcedureVariable->GetMinValueAsText() <= pDatabaseTCProcedureVariable->GetMaxValueAsText()) break;
				if (((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER) && (INT)nRange[1] <= (INT)nRange[2]) || ((pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_UNSIGNEDINTEGER)) && nRange[1] <= nRange[2])) break;
				szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALVARIABLEMAXIMUMVALUE), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureVariable->GetTag());
				ShowError(szMessage);
				break;
			}
		}
	}
	for (nThread = 0, nThreads = (INT)m_cDatabaseTCProcedure.GetSize(); nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(nThread)))
		{
			if (ExtractExpressionParameters(pDatabase, pDatabaseTCProcedureThread->GetActivationExpression(), szParameters[0], szParameters[1]) > 0)
			{
				for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
				{
					if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
					{
						szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADACTIVATIONEXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
						ShowError(szMessage);
					}
				}
				for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
				{
					if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
					{
						szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADACTIVATIONEXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
						ShowError(szMessage);
					}
				}
			}
			if ((pDocument = new CTCProcedureDocument))
			{
				if (pDocument->Unmap(pDatabaseTCProcedureThread) && pDocument->EnumSteps(pThreadSteps, FALSE, TRUE) > 0)
				{
					for (nStep = 0, nSteps = (INT)pThreadSteps.GetSize(); nStep < nSteps; nStep++)
					{
						if ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)))
						{
							if ((pLabelItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL) ? (CTCProcedureDocumentLabelItem *)pStep : (CTCProcedureDocumentLabelItem *)NULL))
							{
								for (nLabel[0] = 0, nLabels[0] = (INT)szGotoLabels.GetSize(); nLabel[0] < nLabels[0]; nLabel[0]++)
								{
									if (szGotoLabels.GetAt(nLabel[0]) == pLabelItem->GetJumpLabel()) break;
									continue;
								}
								for (; nLabel[0] == nLabels[0]; )
								{
									szGotoLabels.Add(pLabelItem->GetJumpLabel());
									break;
								}
								if (nLabel[0] < nLabels[0])
								{
									szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPLABEL), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)pLabelItem->GetJumpLabel());
									ShowError(szMessage);
								}
							}
							for (szSyncObject.Empty(); (pSetSyncObjectItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETSYNCOBJECT) ? (CTCProcedureDocumentSetSynchronizationObjectItem *)pStep : (CTCProcedureDocumentSetSynchronizationObjectItem *)NULL); )
							{
								szSyncObject = pSetSyncObjectItem->GetObjectName();
								break;
							}
							for (; (pWaitSyncObjectItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_WAITSYNCOBJECT) ? (CTCProcedureDocumentWaitSynchronizationObjectItem *)pStep : (CTCProcedureDocumentWaitSynchronizationObjectItem *)NULL); )
							{
								szSyncObject = pWaitSyncObjectItem->GetObjectName();
								break;
							}
							for (nSyncObject = 0, nSyncObjects = (!szSyncObject.IsEmpty()) ? (INT)szSyncObjects.GetSize() : -1; nSyncObject < nSyncObjects; nSyncObject++)
							{
								if (szSyncObjects.GetAt(nSyncObject) == szSyncObject) break;
								continue;
							}
							if (nSyncObject == nSyncObjects)
							{
								szSyncObjects.Add(szSyncObject);
								continue;
							}
						}
					}
					for (nStep = 0, nSteps = (INT)pThreadSteps.GetSize(); nStep < nSteps; nStep++)
					{
						if ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)) != (CTCProcedureDocumentItem *)NULL)
						{
							if ((pGotoItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO) ? (CTCProcedureDocumentGotoItem *)pStep : (CTCProcedureDocumentGotoItem *)NULL))
							{
								for (nLabel[0] = 0, nLabels[0] = (INT)szGotoLabels.GetSize(); nLabel[0] < nLabels[0]; nLabel[0]++)
								{
									if (szGotoLabels.GetAt(nLabel[0]) == pGotoItem->GetJumpLabel()) break;
									continue;
								}
								if (nLabel[0] == nLabels[0])
								{
									szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPGOTOLABEL), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)pGotoItem->GetJumpLabel());
									ShowError(szMessage);
								}
							}
							for (nLabel[0] = 0, nLabels[0] = pStep->GetFailureLabels(szFailureLabels); nLabel[0] < nLabels[0]; nLabel[0]++)
							{
								for (nLabel[1] = 0, nLabels[1] = (!szFailureLabels.GetAt(nLabel[0]).IsEmpty()) ? (INT)szGotoLabels.GetSize() : -1; nLabel[1] < nLabels[1]; nLabel[1]++)
								{
									if (szFailureLabels.GetAt(nLabel[0]) == szGotoLabels.GetAt(nLabel[1])) break;
									continue;
								}
								if (nLabel[1] == nLabels[1])
								{
									szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPFAILURELABEL), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szFailureLabels.GetAt(nLabel[0]));
									ShowError(szMessage);
								}
							}
						}
					}
				}
				delete pDocument;
			}
		}
	}
	for (nArgument = 0, nArguments = (INT)pDatabaseTCProcedureArguments[0].GetSize(); nArgument < nArguments; nArgument++)
	{
		for (nVariable = 0, nVariables = ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments[0].GetAt(nArgument))) ? (INT)pDatabaseTCProcedureVariables.GetSize() : 0, szMessage.Empty(); nVariable < nVariables; nVariable++)
		{
			if ((pDatabaseTCProcedureVariable = pDatabaseTCProcedureVariables.GetAt(nVariable)) != (CDatabaseTCProcedureVariable *)NULL  &&  pDatabaseTCProcedureArgument->GetTag() == pDatabaseTCProcedureVariable->GetTag())
			{
				szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_DUPLICATEIDENTIFIER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag());
				ShowError(szMessage);
				break;
			}
		}
		for (nSyncObject = 0, nSyncObjects = (nVariable == nVariables) ? (INT)szSyncObjects.GetSize() : 0, szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_DUPLICATEIDENTIFIER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag()); nSyncObject < nSyncObjects; nSyncObject++)
		{
			if (!pDatabaseTCProcedureArgument->GetTag().Compare(szSyncObjects.GetAt(nSyncObject)))
			{
				ShowError(szMessage);
				break;
			}
		}
	}
	for (nVariable = 0, nVariables = (INT)pDatabaseTCProcedureVariables.GetSize(); nVariable < nVariables; nVariable++)
	{
		for (nSyncObject = 0, nSyncObjects = ((pDatabaseTCProcedureVariable = pDatabaseTCProcedureVariables.GetAt(nVariable))) ? (INT)szSyncObjects.GetSize() : 0, szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_DUPLICATEIDENTIFIER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureVariable->GetTag()); nSyncObject < nSyncObjects; nSyncObject++)
		{
			if (!pDatabaseTCProcedureVariable->GetTag().Compare(szSyncObjects.GetAt(nSyncObject)))
			{
				ShowError(szMessage);
				break;
			}
		}
	}
	for (nThread = 0, nThreads = (INT)m_cDatabaseTCProcedure.GetSize(); nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(nThread)))
		{
			if ((pDocument = new CTCProcedureDocument))
			{
				if (pDocument->Unmap(pDatabaseTCProcedureThread) && pDocument->EnumSteps(pThreadSteps, FALSE, TRUE) > 0)
				{
					for (nStep = 0, nSteps = (INT)pThreadSteps.GetSize(); nStep < nSteps; nStep++)
					{
						if ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)))
						{
							if (pStep->GetTriggerType() == TCPROCEDURETHREADSTEP_TRIGGERTYPE_SYNCOBJECT)
							{
								for (nSyncObject = 0, nSyncObjects = (INT)szSyncObjects.GetSize(); nSyncObject < nSyncObjects; nSyncObject++)
								{
									if (szSyncObjects.GetAt(nSyncObject) == pStep->GetTriggerSynchronizationObject()) break;
									continue;
								}
								if (nSyncObject == nSyncObjects)
								{
									szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPTRIGGERSYNCOBJECT), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)pStep->GetTriggerSynchronizationObject());
									ShowError(szMessage);
								}
							}
							if (pStep->GetTriggerType() == TCPROCEDURETHREADSTEP_TRIGGERTYPE_EXPRESSION  &&  ExtractExpressionParameters(pDatabase, pStep->GetTriggerExpression(), szParameters[0], szParameters[1]) > 0)
							{
								for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
								{
									if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
									{
										szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPTRIGGEREXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
										ShowError(szMessage);
									}
								}
								for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
								{
									if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
									{
										szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPTRIGGEREXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
										ShowError(szMessage);
									}
								}
							}
							if (ExtractExpressionParameters(pDatabase, pStep->GetPreexecutionExpression(), szParameters[0], szParameters[1]) > 0)
							{
								for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
								{
									if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
									{
										szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPPREEXECUTIONEXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
										ShowError(szMessage);
									}
								}
								for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
								{
									if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
									{
										szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPPREEXECUTIONEXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
										ShowError(szMessage);
									}
								}
							}
							if (pStep->GetConfirmationType() == TCPROCEDURETHREADSTEP_CONFIRMATIONTYPE_EXPRESSION  &&  ExtractExpressionParameters(pDatabase, pStep->GetConfirmationExpression(), szParameters[0], szParameters[1]) > 0)
							{
								for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
								{
									if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
									{
										szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPCONFIRMATIONEXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
										ShowError(szMessage);
									}
								}
								for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
								{
									if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
									{
										szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPCONFIRMATIONEXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
										ShowError(szMessage);
									}
								}
							}
							if ((pBranchItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_FLOWCONTROL_BRANCH) ? (CTCProcedureDocumentBranchItem *)pStep : (CTCProcedureDocumentBranchItem *)NULL))
							{
								if (ExtractExpressionParameters(pDatabase, pBranchItem->GetInvariantCondition(), szParameters[0], szParameters[1]) > 0)
								{
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPINVARIANTCONDITIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPINVARIANTCONDITIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
								}
								if (ExtractExpressionParameters(pDatabase, pBranchItem->GetTestExpression(), szParameters[0], szParameters[1]) > 0)
								{
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPTESTEXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPTESTEXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
								}
							}
							if ((pSwitchItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_FLOWCONTROL_SWITCH) ? (CTCProcedureDocumentSwitchItem *)pStep : (CTCProcedureDocumentSwitchItem *)NULL))
							{
								if (ExtractExpressionParameters(pDatabase, pSwitchItem->GetInvariantCondition(), szParameters[0], szParameters[1]) > 0)
								{
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPINVARIANTCONDITIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPINVARIANTCONDITIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
								}
								for (nBranch = 0, nBranches = pSwitchItem->GetBranches(); nBranch < nBranches; nBranch++)
								{
									if (ExtractExpressionParameters(pDatabase, pSwitchItem->GetBranchTestExpression(nBranch + 1), szParameters[0], szParameters[1]) > 0)
									{
										for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
										{
											if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
											{
												szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPTESTEXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
												ShowError(szMessage);
											}
										}
										for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
										{
											if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
											{
												szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPTESTEXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
												ShowError(szMessage);
											}
										}
									}
								}
							}
							if ((pForLoopItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_FLOWCONTROL_FORLOOP) ? (CTCProcedureDocumentForLoopItem *)pStep : (CTCProcedureDocumentForLoopItem *)NULL))
							{
								if (ExtractExpressionParameters(pDatabase, pForLoopItem->GetInvariantCondition(), szParameters[0], szParameters[1]) > 0)
								{
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPINVARIANTCONDITIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPINVARIANTCONDITIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
								}
							}
							if ((pWhileLoopItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_FLOWCONTROL_WHILELOOP) ? (CTCProcedureDocumentWhileLoopItem *)pStep : (CTCProcedureDocumentWhileLoopItem *)NULL))
							{
								if (ExtractExpressionParameters(pDatabase, pWhileLoopItem->GetInvariantCondition(), szParameters[0], szParameters[1]) > 0)
								{
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPINVARIANTCONDITIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPINVARIANTCONDITIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
								}
								if (ExtractExpressionParameters(pDatabase, pWhileLoopItem->GetTestExpression(), szParameters[0], szParameters[1]) > 0)
								{
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPTESTEXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPTESTEXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
								}
							}
							if ((pDoLoopItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_FLOWCONTROL_DOLOOP) ? (CTCProcedureDocumentDoLoopItem *)pStep : (CTCProcedureDocumentDoLoopItem *)NULL))
							{
								if (ExtractExpressionParameters(pDatabase, pDoLoopItem->GetInvariantCondition(), szParameters[0], szParameters[1]) > 0)
								{
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPINVARIANTCONDITIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPINVARIANTCONDITIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
								}
								if (ExtractExpressionParameters(pDatabase, pDoLoopItem->GetTestExpression(), szParameters[0], szParameters[1]) > 0)
								{
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPTESTEXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPTESTEXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
								}
							}
							if ((pSetArgumentsItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETARGUMENTS) ? (CTCProcedureDocumentSetArgumentsItem *)pStep : (CTCProcedureDocumentSetArgumentsItem *)NULL))
							{
								for (nArgument = 0, nArguments = pSetArgumentsItem->GetArguments(szArguments), pSetArgumentsItem->GetExpressions(szExpressions); nArgument < nArguments; nArgument++)
								{
									if (ExtractExpressionParameters(pDatabase, (nArgument < szExpressions.GetSize()) ? szExpressions.GetAt(nArgument) : EMPTYSTRING, szParameters[0], szParameters[1]) > 0)
									{
										for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
										{
											if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
											{
												szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPARGUMENTEXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]), (LPCTSTR)szArguments.GetAt(nArgument));
												ShowError(szMessage);
											}
										}
										for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
										{
											if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
											{
												szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPARGUMENTEXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]), (LPCTSTR)szArguments.GetAt(nArgument));
												ShowError(szMessage);
											}
										}
									}
								}
							}
							if ((pSetVariablesItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETVARIABLES) ? (CTCProcedureDocumentSetVariablesItem *)pStep : (CTCProcedureDocumentSetVariablesItem *)NULL))
							{
								for (nVariable = 0, nVariables = pSetVariablesItem->GetVariables(szVariables), pSetVariablesItem->GetExpressions(szExpressions); nVariable < nVariables; nVariable++)
								{
									if (ExtractExpressionParameters(pDatabase, (nVariable < szExpressions.GetSize()) ? szExpressions.GetAt(nVariable) : EMPTYSTRING, szParameters[0], szParameters[1]) > 0)
									{
										for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
										{
											if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
											{
												szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPVARIABLEEXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]), (LPCTSTR)szVariables.GetAt(nVariable));
												ShowError(szMessage);
											}
										}
										for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
										{
											if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
											{
												szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPVARIABLEEXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]), (LPCTSTR)szVariables.GetAt(nVariable));
												ShowError(szMessage);
											}
										}
									}
								}
							}
							if ((pSetParametersItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETPARAMETERS) ? (CTCProcedureDocumentSetParametersItem *)pStep : (CTCProcedureDocumentSetParametersItem *)NULL))
							{
								for (nParameter[0] = 0, nParameters[0] = pSetParametersItem->GetParameters(szParameters[0]), pSetParametersItem->GetExpressions(szExpressions); nParameter[0] < nParameters[0]; nParameter[0]++)
								{
									if (ExtractExpressionParameters(pDatabase, (nParameter[0] < szExpressions.GetSize()) ? szExpressions.GetAt(nParameter[0]) : EMPTYSTRING, szParameters[1], szParameters[2]) > 0)
									{
										for (nParameter[1] = 0, nParameters[1] = (INT)szParameters[1].GetSize(); nParameter[1] < nParameters[1]; nParameter[1]++)
										{
											if (pDatabase->GetTMParameters()->Find(szParameters[1].GetAt(nParameter[1])) < 0)
											{
												szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPPARAMETEREXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[1]), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
												ShowError(szMessage);
											}
										}
										for (nParameter[1] = 0, nParameters[1] = (INT)szParameters[2].GetSize(); nParameter[1] < nParameters[1]; nParameter[1]++)
										{
											if (pDatabase->GetTCParameters()->Find(szParameters[2].GetAt(nParameter[1])) < 0)
											{
												szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPPARAMETEREXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[2].GetAt(nParameter[1]), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
												ShowError(szMessage);
											}
										}
									}
								}
							}
							if ((pCallProcedureItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_CALLPROCEDURE) ? (CTCProcedureDocumentCallProcedureItem *)pStep : (CTCProcedureDocumentCallProcedureItem *)NULL))
							{
								if (ExtractExpressionParameters(pDatabase, pCallProcedureItem->GetInvariantCondition(), szParameters[0], szParameters[1]) > 0)
								{
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPINVARIANTCONDITIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPINVARIANTCONDITIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
								}
								for (nArgument = 0, nArguments = pCallProcedureItem->GetArguments(pDatabaseTCProcedureArguments[1], szValues); nArgument < nArguments; nArgument++)
								{
									if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments[1].GetAt(nArgument)) != (CDatabaseTCProcedureArgument *)NULL)
									{
										if (ExtractExpressionParameters(pDatabase, (nArgument < szValues.GetSize()) ? szValues.GetAt(nArgument) : EMPTYSTRING, szParameters[0], szParameters[1]) > 0)
										{
											for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
											{
												if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
												{
													szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPARGUMENTEXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag());
													ShowError(szMessage);
												}
											}
											for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
											{
												if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
												{
													szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPARGUMENTEXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag());
													ShowError(szMessage);
												}
											}
										}
									}
								}
							}
							if ((pStartProcedureItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_STARTPROCEDURE) ? (CTCProcedureDocumentStartProcedureItem *)pStep : (CTCProcedureDocumentStartProcedureItem *)NULL))
							{
								if (ExtractExpressionParameters(pDatabase, pStartProcedureItem->GetInvariantCondition(), szParameters[0], szParameters[1]) > 0)
								{
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPINVARIANTCONDITIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPINVARIANTCONDITIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
								}
								for (nArgument = 0, nArguments = pStartProcedureItem->GetArguments(pDatabaseTCProcedureArguments[1], szValues); nArgument < nArguments; nArgument++)
								{
									if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments[1].GetAt(nArgument)) != (CDatabaseTCProcedureArgument *)NULL)
									{
										if (ExtractExpressionParameters(pDatabase, (nArgument < szValues.GetSize()) ? szValues.GetAt(nArgument) : EMPTYSTRING, szParameters[0], szParameters[1]) > 0)
										{
											for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
											{
												if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
												{
													szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPARGUMENTEXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag());
													ShowError(szMessage);
												}
											}
											for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
											{
												if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
												{
													szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPARGUMENTEXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag());
													ShowError(szMessage);
												}
											}
										}
									}
								}
							}
							if ((pSendTCFunctionItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION) ? (CTCProcedureDocumentSendTCFunctionItem *)pStep : (CTCProcedureDocumentSendTCFunctionItem *)NULL))
							{
								if (ExtractExpressionParameters(pDatabase, pSendTCFunctionItem->GetPreexecutionVerificationCondition(), szParameters[0], szParameters[1]) > 0)
								{
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPPREEXECUTIONCONDITIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPPREEXECUTIONCONDITIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
								}
								if (ExtractExpressionParameters(pDatabase, pSendTCFunctionItem->GetExecutionVerificationCondition(), szParameters[0], szParameters[1]) > 0)
								{
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPEXECUTIONCONDITIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
									for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
										{
											szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPEXECUTIONCONDITIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
											ShowError(szMessage);
										}
									}
								}
								if (pSendTCFunctionItem->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
								{
									for (nElement = 0, nElements = (INT)cDatabaseTCFunction.GetSize(); nElement < nElements; nElement++)
									{
										if ((pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(nElement)))
										{
											if (ExtractExpressionParameters(pDatabase, pDatabaseTCFunctionElement->GetConstValueAsText(), szParameters[0], szParameters[1]) > 0)
											{
												for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
												{
													if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
													{
														szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPTCFUNCTIONPARAMETEREXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)cDatabaseTCFunction.GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunctionElement->GetName());
														ShowError(szMessage);
													}
												}
												for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
												{
													if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
													{
														szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPTCFUNCTIONPARAMETEREXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)cDatabaseTCFunction.GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunctionElement->GetName());
														ShowError(szMessage);
													}
												}
											}
										}
									}
									for (nParameter[0] = 0, nParameters[0] = (INT)cDatabaseTCPacket.GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
									{
										if ((pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(nParameter[0])))
										{
											if (ExtractExpressionParameters(pDatabase, pDatabaseTCPacketParameter->GetConstValueAsText(), szParameters[0], szParameters[1]) > 0)
											{
												for (nParameter[1] = 0, nParameters[1] = (INT)szParameters[0].GetSize(); nParameter[1] < nParameters[1]; nParameter[1]++)
												{
													if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[1])) < 0)
													{
														szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPTCPACKETPARAMETEREXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)cDatabaseTCPacket.GetTag(), (LPCTSTR)szParameters[0].GetAt(nParameter[1]), (LPCTSTR)pDatabaseTCPacketParameter->GetTag());
														ShowError(szMessage);
													}
												}
												for (nParameter[1] = 0, nParameters[1] = (INT)szParameters[1].GetSize(); nParameter[1] < nParameters[1]; nParameter[1]++)
												{
													if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[1])) < 0)
													{
														szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPTCPACKETPARAMETEREXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), (LPCTSTR)cDatabaseTCPacket.GetTag(), (LPCTSTR)szParameters[1].GetAt(nParameter[1]), (LPCTSTR)pDatabaseTCPacketParameter->GetTag());
														ShowError(szMessage);
													}
												}
											}
										}
									}
								}
							}
							if ((pSendTCSequenceItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE) ? (CTCProcedureDocumentSendTCSequenceItem *)pStep : (CTCProcedureDocumentSendTCSequenceItem *)NULL))
							{
								for (nEntry = 0, nEntries = pSendTCSequenceItem->GetSize(); nEntry < nEntries; nEntry = nEntry + 1)
								{
									if ((pSendTCFunctionItem = pSendTCSequenceItem->GetAt(nEntry)) != (CTCProcedureDocumentSendTCFunctionItem *)NULL)
									{
										if (ExtractExpressionParameters(pDatabase, pSendTCFunctionItem->GetPreexecutionVerificationCondition(), szParameters[0], szParameters[1]) > 0)
										{
											for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
											{
												if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
												{
													szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPENTRYPREEXECUTIONCONDITIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), nEntry + 1, (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
													ShowError(szMessage);
												}
											}
											for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
											{
												if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
												{
													szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPENTRYPREEXECUTIONCONDITIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), nEntry + 1, (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
													ShowError(szMessage);
												}
											}
										}
										if (ExtractExpressionParameters(pDatabase, pSendTCFunctionItem->GetExecutionVerificationCondition(), szParameters[0], szParameters[1]) > 0)
										{
											for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
											{
												if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
												{
													szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPENTRYEXECUTIONCONDITIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), nEntry + 1, (LPCTSTR)szParameters[0].GetAt(nParameter[0]));
													ShowError(szMessage);
												}
											}
											for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
											{
												if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
												{
													szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPENTRYEXECUTIONCONDITIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), nEntry + 1, (LPCTSTR)szParameters[1].GetAt(nParameter[0]));
													ShowError(szMessage);
												}
											}
										}
										if (pSendTCFunctionItem->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
										{
											if (((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_BLOCKED) && nEntry < nEntries - 1 && (pSendTCSequenceItem->GetAt(nEntry + 1)->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_BLOCKED) && pSendTCFunctionItem->GetReleaseDeltaTime() != pSendTCSequenceItem->GetAt(nEntry + 1)->GetReleaseDeltaTime()) || ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_GROUPED) && nEntry > 0 && pSendTCFunctionItem->GetReleaseDeltaTime() != pSendTCSequenceItem->GetAt(nEntry - 1)->GetReleaseDeltaTime()) || ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_BLOCKED) && !nEntry  &&  pSendTCFunctionItem->GetReleaseDeltaTime() > 0))
											{
												szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPENTRYTCFUNCTIONRELEASEDELTATIME), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), nEntry + 1, (LPCTSTR)cDatabaseTCFunction.GetName());
												ShowError(szMessage);
											}
											if ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_GROUPED) && nEntry == 1 && pSendTCSequenceItem->GetAt(nEntry - 1)->GetReleaseDeltaTime() > 0)
											{
												szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPENTRYTCFUNCTIONRELEASEDELTATIME), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), nEntry, (LPCTSTR)cDatabaseTCFunction.GetName());
												ShowError(szMessage);
											}
											for (nElement = 0, nElements = (INT)cDatabaseTCFunction.GetSize(); nElement < nElements; nElement++)
											{
												if ((pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(nElement)))
												{
													if (ExtractExpressionParameters(pDatabase, pDatabaseTCFunctionElement->GetConstValueAsText(), szParameters[0], szParameters[1]) > 0)
													{
														for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
														{
															if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[0])) < 0)
															{
																szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPENTRYTCFUNCTIONPARAMETEREXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), nEntry + 1, (LPCTSTR)cDatabaseTCFunction.GetName(), (LPCTSTR)szParameters[0].GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunctionElement->GetName());
																ShowError(szMessage);
															}
														}
														for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
														{
															if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[0])) < 0)
															{
																szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPENTRYTCFUNCTIONPARAMETEREXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), nEntry + 1, (LPCTSTR)cDatabaseTCFunction.GetName(), (LPCTSTR)szParameters[1].GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunctionElement->GetName());
																ShowError(szMessage);
															}
														}
													}
												}
											}
											for (nParameter[0] = 0, nParameters[0] = (INT)cDatabaseTCPacket.GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
											{
												if ((pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(nParameter[0])))
												{
													if (ExtractExpressionParameters(pDatabase, pDatabaseTCPacketParameter->GetConstValueAsText(), szParameters[0], szParameters[1]) > 0)
													{
														for (nParameter[1] = 0, nParameters[1] = (INT)szParameters[0].GetSize(); nParameter[1] < nParameters[1]; nParameter[1]++)
														{
															if (pDatabase->GetTMParameters()->Find(szParameters[0].GetAt(nParameter[1])) < 0)
															{
																szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPENTRYTCPACKETPARAMETEREXPRESSIONTMPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), nEntry + 1, (LPCTSTR)cDatabaseTCPacket.GetTag(), (LPCTSTR)szParameters[0].GetAt(nParameter[1]), (LPCTSTR)pDatabaseTCPacketParameter->GetTag());
																ShowError(szMessage);
															}
														}
														for (nParameter[1] = 0, nParameters[1] = (INT)szParameters[1].GetSize(); nParameter[1] < nParameters[1]; nParameter[1]++)
														{
															if (pDatabase->GetTCParameters()->Find(szParameters[1].GetAt(nParameter[1])) < 0)
															{
																szMessage.Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADSTEPENTRYTCPACKETPARAMETEREXPRESSIONTCPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)pStep->GetName(), nEntry + 1, (LPCTSTR)cDatabaseTCPacket.GetTag(), (LPCTSTR)szParameters[1].GetAt(nParameter[1]), (LPCTSTR)pDatabaseTCPacketParameter->GetTag());
																ShowError(szMessage);
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				delete pDocument;
			}
		}
	}
	for (m_cDatabaseTCProcedure.SetArguments(pDatabaseTCProcedureArguments[0]), m_cDatabaseTCProcedure.SetVariables(pDatabaseTCProcedureVariables), szSourceCode[0] = szSourceCode[1] = szSourceCode[2] = (m_cDatabaseTCProcedure.GetAttributes() & (TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE | TCPROCEDURE_SOURCECODE_CUSTOM)) ? m_cDatabaseTCProcedure.GetSourceCode() : EMPTYSTRING; (bSourceCode = GenerateSourceCode(pDatabase, &m_cDatabaseTCProcedure, szSourceCode[0], FALSE) && GenerateSourceCode(pDatabase, &m_cDatabaseTCProcedure, szSourceCode[1], TRUE) && GenerateSourceCode(pDatabase, &m_cDatabaseTCProcedure, szSourceCode[2], -TRUE)); )
	{
		for (m_cDatabaseTCProcedure.SetSourceCode(szSourceCode[0]); GetDatabase()->Save(&m_cDatabaseTCProcedure) < 0; )
		{
			szMessage.Format(STRING(IDS_TCPROCEDURE_FAILURE_SAVE), (LPCTSTR)m_cDatabaseTCProcedure.GetDescription());
			ShowError(szMessage);
			break;
		}
		if (!GetErrorCount())
		{
			for (ConvertSourceCodeToData(szSourceCode[1], nFileData); (bSourceFile = cFile.Open(GetTelecommandProcedureFileName(pDatabase, STRING(IDS_TELECOMMANDPROCEDUREFILE_COMPILENAME)), CFile::modeCreate | CFile::modeReadWrite | CFile::shareExclusive)); )
			{
				if (!WriteFile(cFile.m_hFile, nFileData.GetData(), (DWORD)nFileData.GetSize(), &dwData, (LPOVERLAPPED)NULL))
				{
					ShowError(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_OPERATEFILE));
					break;
				}
				cFile.Close();
				break;
			}
			if (!bSourceFile) ShowError(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_OPERATEFILE));
		}
		break;
	}
	if (!bSourceCode)
	{
		szMessage.Format(STRING(IDS_TCPROCEDURE_FAILURE_COMPILE), (LPCTSTR)m_cDatabaseTCProcedure.GetDescription());
		ShowError(szMessage);
	}
	if (!GetErrorCount() && !GetAbortStatus())
	{
		sCompilerSecurityAttributes.bInheritHandle = TRUE;
		sCompilerSecurityAttributes.nLength = sizeof(SECURITY_ATTRIBUTES);
		if (CreatePipe(&hStdOut[0], &hStdOut[1], &sCompilerSecurityAttributes, 0))
		{
			if (CreatePipe(&hStdIn[0], &hStdIn[1], &sCompilerSecurityAttributes, 0))
			{
				if (DuplicateHandle(GetCurrentProcess(), hStdOut[1], GetCurrentProcess(), &hStdError, 0, TRUE, DUPLICATE_SAME_ACCESS) && DuplicateHandle(GetCurrentProcess(), hStdOut[0], GetCurrentProcess(), &hStdOut[2], 0, FALSE, DUPLICATE_SAME_ACCESS) && DuplicateHandle(GetCurrentProcess(), hStdIn[1], GetCurrentProcess(), &hStdIn[2], 0, FALSE, DUPLICATE_SAME_ACCESS))
				{
					sCompilerStartupInformation.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
					sCompilerStartupInformation.cb = sizeof(STARTUPINFO);
					sCompilerStartupInformation.hStdOutput = hStdOut[1];
					sCompilerStartupInformation.hStdInput = hStdIn[0];
					sCompilerStartupInformation.hStdError = hStdError;
					sCompilerStartupInformation.wShowWindow = SW_HIDE;
					for (szFileName[0] = GetTelecommandProcedureCompilerFileName(), szOptions = GetTelecommandProcedureCompileOptions(pDatabase), CloseHandle(hStdOut[0]), CloseHandle(hStdIn[1]); CreateProcess(szFileName[0], (LPTSTR)(LPCTSTR)szOptions, (LPSECURITY_ATTRIBUTES)NULL, (LPSECURITY_ATTRIBUTES)NULL, TRUE, CREATE_NEW_CONSOLE | IDLE_PRIORITY_CLASS, (LPVOID)NULL, (LPCTSTR)NULL, &sCompilerStartupInformation, &sCompilerInformation); )
					{
						for (CloseHandle(hStdIn[0]), CloseHandle(hStdOut[1]), CloseHandle(hStdError), cbOut = 0; WaitForSingleObject(sCompilerInformation.hProcess, 0) == WAIT_TIMEOUT; )
						{
							if (ReadFile(hStdOut[2], szOut, sizeof(szOut), &dwOut, (LPOVERLAPPED)NULL) && dwOut > 0)
							{
								cbOut += dwOut;
#ifndef UNICODE
								CopyMemory(szError.GetBufferSetLength(dwOut), szOut, dwOut);
								szError.ReleaseBuffer();
#else
								MultiByteToWideChar(CP_ACP, 0, szOut, dwOut, szError.GetBufferSetLength(dwOut), dwOut + 1);
								szError.ReleaseBuffer();
#endif
								if (szErrors.IsEmpty())
								{
									if (cFileFind.FindFile(GetTelecommandProcedureFileName(pDatabase, STRING(IDS_TELECOMMANDPROCEDUREFILE_COMPILENAME))) && !cFileFind.FindNextFile())
									{
										szMessage = szError;
										szMessage.MakeLower();
										szFileName[1] = cFileFind.GetFilePath();
										szFileName[2] = cFileFind.GetFileName();
										szFileName[1].MakeLower();
										szFileName[2].MakeLower();
										if ((nPos = szMessage.Find(szFileName[2])) >= 0 && (szError.GetAt(nPos + szFileName[2].GetLength()) == CR || szError.GetAt(nPos + szFileName[2].GetLength()) == EOL))
										{
											for (szError = szError.Mid(nPos + szFileName[2].GetLength()); szError.GetLength() > 0; )
											{
												if (szError.GetAt(0) == CR || szError.GetAt(0) == EOL)
												{
													szError = szError.Mid(1);
													continue;
												}
												break;
											}
											szErrors = szError;
											cFileFind.Close();
											continue;
										}
										if ((nPos = szMessage.Find(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_COMPILECOMMANDLINEPREFIX))) >= 0)
										{
											szErrors = szError.Mid(nPos);
											cFileFind.Close();
											continue;
										}
										if ((nPos = szMessage.Find(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_COMPILEFATALERRORPREFIX))) >= 0)
										{
											szErrors = szError.Mid(nPos);
											cFileFind.Close();
											continue;
										}
										if ((nPos = szMessage.Find(szFileName[1])) >= 0)
										{
											szErrors = szError.Mid(nPos);
											cFileFind.Close();
											continue;
										}
										for (; _tcsstr(szMessage, STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_COMPILEFATALERRORPREFIX)) || _tcsstr(szMessage, STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_COMPILEERRORPREFIX)) || _tcsstr(szMessage, STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_COMPILEWARNINGPREFIX)); )
										{
											szErrors = szError;
											break;
										}
										cFileFind.Close();
										continue;
									}
									szMessage = szError;
									szMessage.MakeLower();
									szErrors = (szErrors.IsEmpty()) ? (((nPos = szMessage.Find(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_COMPILECOMMANDLINEPREFIX))) >= 0) ? szError.Mid(nPos) : szErrors) : szErrors;
									szErrors = (szErrors.IsEmpty()) ? (((nPos = szMessage.Find(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_COMPILEFATALERRORPREFIX))) >= 0) ? szError.Mid(nPos) : szErrors) : szErrors;
									continue;
								}
								szErrors += szError;
							}
						}
						if (!cbOut)
						{
							szError = STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_COMPILERENVIRONMENT);
							ShowError(szError);
						}
						for (ShowTelecommandProcedureCompilerErrors(pDatabase, &m_cDatabaseTCProcedure, szSourceCode[0], szErrors); GetAbortStatus() || !szErrors.IsEmpty() || !cbOut; )
						{
							CleanupTelecommandProcedureBuildOutput(pDatabase);
							CloseHandle(hStdOut[2]);
							CloseHandle(hStdIn[2]);
							return;
						}
						CloseHandle(hStdIn[2]);
						CloseHandle(hStdOut[2]);
						if (CreatePipe(&hStdOut[0], &hStdOut[1], &sCompilerSecurityAttributes, 0))
						{
							if (CreatePipe(&hStdIn[0], &hStdIn[1], &sCompilerSecurityAttributes, 0))
							{
								if (DuplicateHandle(GetCurrentProcess(), hStdOut[1], GetCurrentProcess(), &hStdError, 0, TRUE, DUPLICATE_SAME_ACCESS) && DuplicateHandle(GetCurrentProcess(), hStdOut[0], GetCurrentProcess(), &hStdOut[2], 0, FALSE, DUPLICATE_SAME_ACCESS) && DuplicateHandle(GetCurrentProcess(), hStdIn[1], GetCurrentProcess(), &hStdIn[2], 0, FALSE, DUPLICATE_SAME_ACCESS))
								{
									sCompilerStartupInformation.dwFlags = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW;
									sCompilerStartupInformation.cb = sizeof(STARTUPINFO);
									sCompilerStartupInformation.hStdOutput = hStdOut[1];
									sCompilerStartupInformation.hStdInput = hStdIn[0];
									sCompilerStartupInformation.hStdError = hStdError;
									sCompilerStartupInformation.wShowWindow = SW_HIDE;
									for (szFileName[0] = GetTelecommandProcedureLinkerFileName(), szOptions = GetTelecommandProcedureLinkOptions(pDatabase), szOutputName = GetTelecommandProcedureFileName(pDatabase, STRING(IDS_TELECOMMANDPROCEDURECODE_NORMAL_FILENAME), IsSyntaxCompileTarget()), CFileEx::SetAttributes(szOutputName, CFileEx::GetAttributes(szOutputName) & ~FILE_ATTRIBUTE_READONLY), CloseHandle(hStdOut[0]), CloseHandle(hStdIn[1]); CreateProcess(szFileName[0], (LPTSTR)(LPCTSTR)szOptions, (LPSECURITY_ATTRIBUTES)NULL, (LPSECURITY_ATTRIBUTES)NULL, TRUE, CREATE_NEW_CONSOLE | IDLE_PRIORITY_CLASS, (LPVOID)NULL, (LPCTSTR)NULL, &sCompilerStartupInformation, &sCompilerInformation); )
									{
										for (CloseHandle(hStdIn[0]), CloseHandle(hStdOut[1]), CloseHandle(hStdError), szErrors.Empty(), szError.Empty(), cbOut = 0; WaitForSingleObject(sCompilerInformation.hProcess, 0) == WAIT_TIMEOUT; )
										{
											if (ReadFile(hStdOut[2], szOut, sizeof(szOut) - 1, &dwOut, (LPOVERLAPPED)NULL) && dwOut > 0)
											{
												cbOut += dwOut;
#ifndef UNICODE
												CopyMemory(szError.GetBufferSetLength(dwOut), szOut, dwOut);
												szError.ReleaseBuffer();
#else
												MultiByteToWideChar(CP_ACP, 0, szOut, dwOut, szError.GetBufferSetLength(dwOut), dwOut + 1);
												szError.ReleaseBuffer();
#endif
												szOut[dwOut] = EOS;
												szErrors += szOut;
											}
										}
										if (!cbOut)
										{
											szError = STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_LINKERENVIRONMENT);
											ShowError(szError);
										}
										if (cFileFind.FindFile(GetTelecommandProcedureFileName(pDatabase, STRING(IDS_TELECOMMANDPROCEDUREFILE_OBJECTNAME))) && !cFileFind.FindNextFile())
										{
											szMessage = szErrors;
											szMessage.MakeLower();
											szFileName[1] = cFileFind.GetFileName();
											szFileName[1].MakeLower();
											szError = ((nPos = szMessage.Find(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_LINKFATALERRORPREFIX))) >= 0) ? (LPCTSTR)szErrors.Mid(nPos) : EMPTYSTRING;
											szError = ((nPos = szMessage.Find(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_LINKERRORPREFIX))) >= 0) ? szErrors.Mid(nPos) : szError;
											szError = ((nPos = szMessage.Find(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_LINKWARNINGPREFIX))) >= 0) ? szErrors.Mid(nPos) : szError;
											szError = ((nPos = szMessage.Find(szFileName[1])) >= 0) ? szErrors.Mid(nPos) : szError;
											cFileFind.Close();
										}
										for (ShowTelecommandProcedureLinkerErrors(pDatabase, &m_cDatabaseTCProcedure, szSourceCode[0], (szErrors = (cbOut > 0) ? (LPCTSTR)szError : EMPTYSTRING)); !IsSyntaxCompileTarget(); )
										{
											CFileEx::SetAttributes(szOutputName, CFileEx::GetAttributes(szOutputName) | FILE_ATTRIBUTE_READONLY);
											SecureTelecommandProcedureFile(szOutputName);
											break;
										}
										for (; IsSyntaxCompileTarget(); )
										{
											CFileEx::Remove(szOutputName);
											break;
										}
										if (!GetErrorCount() && !IsSyntaxCompileTarget())
										{
											for (m_cDatabaseTCProcedure.SetPrecompiledCode(szSourceCode[2]); GetDatabase()->Save(&m_cDatabaseTCProcedure) < 0; )
											{
												szMessage.Format(STRING(IDS_TCPROCEDURE_FAILURE_SAVE), (LPCTSTR)m_cDatabaseTCProcedure.GetDescription());
												ShowError(szMessage);
												break;
											}
										}
										CleanupTelecommandProcedureBuildOutput(pDatabase);
										CloseHandle(hStdOut[2]);
										CloseHandle(hStdIn[2]);
										return;
									}
									CloseHandle(hStdIn[0]);
									CloseHandle(hStdIn[2]);
									CloseHandle(hStdOut[1]);
									CloseHandle(hStdOut[2]);
									CloseHandle(hStdError);
									CleanupTelecommandProcedureBuildOutput(pDatabase);
									ShowError((!cFileFind.FindFile(szFileName[0])) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_LINKERPATH) : STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_STDINOUT));
									return;
								}
								CloseHandle(hStdIn[0]);
								CloseHandle(hStdIn[1]);
							}
							CloseHandle(hStdOut[0]);
							CloseHandle(hStdOut[1]);
						}
						CleanupTelecommandProcedureBuildOutput(pDatabase);
						ShowError(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_STDINOUT));
						return;
					}
					CloseHandle(hStdIn[0]);
					CloseHandle(hStdIn[2]);
					CloseHandle(hStdOut[1]);
					CloseHandle(hStdOut[2]);
					CloseHandle(hStdError);
					CleanupTelecommandProcedureBuildOutput(pDatabase);
					ShowError((!cFileFind.FindFile(szFileName[0])) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_COMPILERPATH) : STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_STDINOUT));
					return;
				}
				CloseHandle(hStdIn[0]);
				CloseHandle(hStdIn[1]);
			}
			CloseHandle(hStdOut[0]);
			CloseHandle(hStdOut[1]);
		}
		ShowError(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_STDINOUT));
	}
	CleanupTelecommandProcedureBuildOutput(pDatabase);
}

VOID CTCProcedureCompileThread::CloseCompileTarget()
{
	m_bCompilation[1].SetEvent();
}

CString CTCProcedureCompileThread::GenerateStepSourceCode(CONST CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedure *pDatabaseTCProcedure, CONST CTCProcedureDocumentItem *pStep, LPCTSTR pszLabel, LPCTSTR pszIndent) CONST
{
	INT  nPos;
	INT  nValue;
	INT  nValues;
	INT  nEntry;
	INT  nEntries;
	INT  nSample;
	INT  nSamples;
	INT  nBlockID;
	INT  nBranch;
	INT  nBranches;
	INT  nArgument;
	INT  nArguments;
	INT  nVariable;
	INT  nVariables;
	INT  nParameter;
	INT  nParameters;
	BOOL  bTimeValue;
	CString  szSample;
	CString  szMessage;
	CString  szFileName;
	CString  szBlock[4];
	CString  szVarValues;
	CTimeTag  tReleaseTime;
	CStringArray  szValues;
	CStringArray  szSamples;
	CStringArray  szArguments;
	CStringArray  szVariables;
	CStringArray  szParameters;
	CStringArray  szExpressions;
	CStringTools  cStringTools;
	CLogicalDrives  cDrives;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CDatabaseTCProcedureVariables  pDatabaseTCProcedureVariables;
	CTCProcedureDocumentGotoItem  *pGotoItem;
	CTCProcedureDocumentLabelItem  *pLabelItem;
	CTCProcedureDocumentBlockItem  *pBlockItem;
	CTCProcedureDocumentBranchItem  *pBranchItem;
	CTCProcedureDocumentSwitchItem  *pSwitchItem;
	CTCProcedureDocumentDoLoopItem  *pDoLoopItem;
	CTCProcedureDocumentForLoopItem  *pForLoopItem;
	CTCProcedureDocumentWhileLoopItem  *pWhileLoopItem;
	CTCProcedureDocumentLogMessageItem  *pLogMessageItem;
	CTCProcedureDocumentInjectAlertItem  *pInjectAlertItem;
	CTCProcedureDocumentSetArgumentsItem  *pSetArgumentsItem;
	CTCProcedureDocumentSetVariablesItem  *pSetVariablesItem;
	CTCProcedureDocumentSetParametersItem  *pSetParametersItem;
	CTCProcedureDocumentControlThreadItem  *pControlThreadItem;
	CTCProcedureDocumentCallProcedureItem  *pCallProcedureItem;
	CTCProcedureDocumentStartProcedureItem  *pStartProcedureItem;
	CTCProcedureDocumentSendTCFunctionItem  *pSendTCFunctionItem;
	CTCProcedureDocumentSendTCSequenceItem  *pSendTCSequenceItem;
	CTCProcedureDocumentUserInteractionItem  *pUserInteractionItem;
	CTCProcedureDocumentControlProcedureItem  *pControlProcedureItem;
	CTCProcedureDocumentWaitTimeIntervalItem  *pWaitTimeIntervalItem;
	CTCProcedureDocumentSetSynchronizationObjectItem  *pSetSyncObjectItem;
	CTCProcedureDocumentWaitSynchronizationObjectItem  *pWaitSyncObjectItem;

	switch (pStep->GetType())
	{
	case TCPROCEDURETHREADSTEP_FLOWCONTROL_BRANCH:
	{ for (szBlock[0].Empty(); (pBranchItem = (CTCProcedureDocumentBranchItem *)pStep); )
	{
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_BRANCH_CODE), (LPCTSTR)TranslateConditionExpression(pBranchItem->GetInvariantCondition()), pszIndent, (LPCTSTR)TranslateConditionExpression(pBranchItem->GetTestExpression()), pszIndent, pszIndent, (LPCTSTR)GenerateSubStepsSourceCode(pDatabase, pDatabaseTCProcedure, pStep, pStep->GetSubThreadID() + 2, pBranchItem->GetInvariantCondition(), pszLabel, CString(pszIndent) + SPACE + SPACE + SPACE + SPACE), pszIndent, pszIndent, pszIndent, pszIndent, (LPCTSTR)GenerateSubStepsSourceCode(pDatabase, pDatabaseTCProcedure, pStep, pStep->GetSubThreadID() + 1, pBranchItem->GetInvariantCondition(), pszLabel, CString(pszIndent) + SPACE + SPACE + SPACE + SPACE), pszIndent, pszIndent, pszIndent, pszIndent, (LPCTSTR)pStep->GetName(), pszIndent, pszLabel, pszIndent);
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_FLOWCONTROL_SWITCH:
	{ for (szBlock[0].Empty(), szBlock[1].Empty(); (pSwitchItem = (CTCProcedureDocumentSwitchItem *)pStep); )
	{
		for (nBranch = 0, nBranches = pSwitchItem->GetBranches(); nBranch < nBranches; nBranch = nBranch + 1)
		{
			szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_SWITCH_SUBCODE), (LPCTSTR)TranslateConditionExpression(pSwitchItem->GetBranchTestExpression(nBranch + 1)), pszIndent, pszIndent, (LPCTSTR)GenerateSubStepsSourceCode(pDatabase, pDatabaseTCProcedure, pStep, pStep->GetSubThreadID() + nBranch + 1, pSwitchItem->GetInvariantCondition(), pszLabel, CString(pszIndent) + SPACE + SPACE + SPACE + SPACE), pszIndent);
			szBlock[1] += (nBranch > 0) ? (CString(CR) + CString(EOL) + pszIndent + SPACE + SPACE + szBlock[0]) : szBlock[0];
		}
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_SWITCH_CODE), (LPCTSTR)TranslateConditionExpression(pSwitchItem->GetInvariantCondition()), pszIndent, pszIndent, (!szBlock[1].IsEmpty()) ? (LPCTSTR)szBlock[1] : STRING(IDS_TELECOMMANDPROCEDUREFILE_DEFAULT_STATEMENT), pszIndent, pszIndent, pszIndent, (LPCTSTR)pStep->GetName(), pszIndent, pszLabel, pszIndent);
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_FLOWCONTROL_FORLOOP:
	{ for (szBlock[0].Empty(); (pForLoopItem = (CTCProcedureDocumentForLoopItem *)pStep); )
	{
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_FORLOOP_CODE), (LPCTSTR)TranslateConditionExpression(pForLoopItem->GetInvariantCondition()), pszIndent, pForLoopItem->GetIterations(), pszIndent, pszIndent, (LPCTSTR)GenerateSubStepsSourceCode(pDatabase, pDatabaseTCProcedure, pStep, pStep->GetSubThreadID() + 1, pForLoopItem->GetInvariantCondition(), pszLabel, CString(pszIndent) + SPACE + SPACE + SPACE + SPACE), pszIndent, pszIndent, pszIndent, pszIndent, (LPCTSTR)pStep->GetName(), pszIndent, pszLabel, pszIndent);
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_FLOWCONTROL_WHILELOOP:
	{ for (szBlock[0].Empty(); (pWhileLoopItem = (CTCProcedureDocumentWhileLoopItem *)pStep); )
	{
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_WHILELOOP_CODE), (LPCTSTR)TranslateConditionExpression(pWhileLoopItem->GetInvariantCondition()), pszIndent, (LPCTSTR)TranslateConditionExpression(pWhileLoopItem->GetTestExpression()), pszIndent, pszIndent, (LPCTSTR)GenerateSubStepsSourceCode(pDatabase, pDatabaseTCProcedure, pStep, pStep->GetSubThreadID() + 1, pWhileLoopItem->GetInvariantCondition(), pszLabel, CString(pszIndent) + SPACE + SPACE + SPACE + SPACE), pszIndent, pszIndent, pszIndent, pszIndent, (LPCTSTR)pStep->GetName(), pszIndent, pszLabel, pszIndent);
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_FLOWCONTROL_DOLOOP:
	{ for (szBlock[0].Empty(); (pDoLoopItem = (CTCProcedureDocumentDoLoopItem *)pStep); )
	{
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_DOLOOP_CODE), (LPCTSTR)TranslateConditionExpression(pDoLoopItem->GetInvariantCondition()), pszIndent, pszIndent, pszIndent, (LPCTSTR)GenerateSubStepsSourceCode(pDatabase, pDatabaseTCProcedure, pStep, pStep->GetSubThreadID() + 1, pDoLoopItem->GetInvariantCondition(), pszLabel, CString(pszIndent) + SPACE + SPACE + SPACE + SPACE), pszIndent, pszIndent, (LPCTSTR)TranslateConditionExpression(pDoLoopItem->GetTestExpression()), pszIndent, pszIndent, pszIndent, (LPCTSTR)pStep->GetName(), pszIndent, pszLabel, pszIndent);
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_FLOWCONTROL_BLOCK:
	{ for (szBlock[0].Empty(); (pBlockItem = (CTCProcedureDocumentBlockItem *)pStep); )
	{
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_BLOCK_CODE), (LPCTSTR)GenerateSubStepsSourceCode(pDatabase, pDatabaseTCProcedure, pStep, pStep->GetSubThreadID() + 1, EMPTYSTRING, pszLabel, pszIndent));
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_FLOWCONTROL_GOTO:
	{ for (szBlock[0].Empty(); (pGotoItem = (CTCProcedureDocumentGotoItem *)pStep); )
	{
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_GOTO_CODE), (LPCTSTR)pGotoItem->GetJumpLabel());
		szBlock[0] = (!pGotoItem->GetJumpLabel().IsEmpty()) ? szBlock[0] : EMPTYSTRING;
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_FLOWCONTROL_LABEL:
	{ for (szBlock[0].Empty(); (pLabelItem = (CTCProcedureDocumentLabelItem *)pStep); )
	{
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_LABEL_CODE), (LPCTSTR)pLabelItem->GetJumpLabel());
		szBlock[0] = (!pLabelItem->GetJumpLabel().IsEmpty()) ? szBlock[0] : EMPTYSTRING;
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETARGUMENTS:
	{ for (szBlock[0].Empty(), szBlock[1].Empty(); (pSetArgumentsItem = (CTCProcedureDocumentSetArgumentsItem *)pStep); )
	{
		for (nArgument = 0, nArguments = pSetArgumentsItem->GetArguments(szArguments), pSetArgumentsItem->GetExpressions(szExpressions), pDatabaseTCProcedure->GetArguments(pDatabaseTCProcedureArguments); nArgument < nArguments; nArgument++)
		{
			if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments.GetAt(pDatabaseTCProcedureArguments.Find(szArguments.GetAt(nArgument)))) != (CDatabaseTCProcedureArgument *)NULL)
			{
				for (szBlock[2] = szExpressions.GetAt(nArgument); (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0 && (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) == 0 && (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) == 0; )
				{
					if (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_BINARY) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_BINARY), (LPCTSTR)szExpressions.GetAt(nArgument));
					if (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_OCTAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_OCTAL), (LPCTSTR)szExpressions.GetAt(nArgument));
					if (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_HEXADECIMAL), (LPCTSTR)szExpressions.GetAt(nArgument));
					break;
				}
				for (; pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME; )
				{
					szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_DATETIME), (LPCTSTR)szExpressions.GetAt(nArgument));
					break;
				}
				if ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) || (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS))
				{
					for (szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_STRING), (LPCTSTR)szExpressions.GetAt(nArgument)); szExpressions.GetAt(nArgument).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE)) >= 0; )
					{
						szBlock[2] = szExpressions.GetAt(nArgument);
						break;
					}
				}
				if (!pDatabaseTCProcedureArgument->GetMinValueAsText().IsEmpty() || !pDatabaseTCProcedureArgument->GetMaxValueAsText().IsEmpty())
				{
					szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTVALUERANGE_CHECK), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag(), (LPCTSTR)szBlock[2]);
					szBlock[2] = szBlock[1];
				}
				szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_SETARGUMENTS_CODE), (LPCTSTR)szArguments.GetAt(nArgument), (LPCTSTR)szBlock[2]);
				szBlock[0] += (nArgument > 0) ? (CString(CR) + CString(EOL) + pszIndent + szBlock[1]) : szBlock[1];
			}
		}
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETVARIABLES:
	{ for (szBlock[0].Empty(), szBlock[1].Empty(); (pSetVariablesItem = (CTCProcedureDocumentSetVariablesItem *)pStep); )
	{
		for (nVariable = 0, nVariables = pSetVariablesItem->GetVariables(szVariables), pSetVariablesItem->GetExpressions(szExpressions), pDatabaseTCProcedure->GetVariables(pDatabaseTCProcedureVariables); nVariable < nVariables; nVariable++)
		{
			if ((pDatabaseTCProcedureVariable = pDatabaseTCProcedureVariables.GetAt(pDatabaseTCProcedureVariables.Find(szVariables.GetAt(nVariable)))))
			{
				for (szBlock[2] = szExpressions.GetAt(nVariable); (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) == 0 && (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TIME) == 0; )
				{
					if (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_BINARY) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_BINARY), (LPCTSTR)szExpressions.GetAt(nVariable));
					if (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_OCTAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_OCTAL), (LPCTSTR)szExpressions.GetAt(nVariable));
					if (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_HEXADECIMAL), (LPCTSTR)szExpressions.GetAt(nVariable));
					break;
				}
				for (; pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TIME; )
				{
					szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_DATETIME), (LPCTSTR)szExpressions.GetAt(nVariable));
					break;
				}
				if (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING)
				{
					for (szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_STRING), (LPCTSTR)szExpressions.GetAt(nVariable)); szExpressions.GetAt(nVariable).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE)) >= 0; )
					{
						szBlock[2] = szExpressions.GetAt(nVariable);
						break;
					}
				}
				if (!pDatabaseTCProcedureVariable->GetMinValueAsText().IsEmpty() || !pDatabaseTCProcedureVariable->GetMaxValueAsText().IsEmpty())
				{
					szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VARIABLEVALUERANGE_CHECK), (LPCTSTR)pDatabaseTCProcedureVariable->GetTag(), (LPCTSTR)szBlock[2]);
					szBlock[2] = szBlock[1];
				}
				szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_SETVARIABLES_CODE), (LPCTSTR)szVariables.GetAt(nVariable), (LPCTSTR)szBlock[2]);
				szBlock[0] += (nVariable > 0) ? (CString(CR) + CString(EOL) + pszIndent + szBlock[1]) : szBlock[1];
			}
		}
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETPARAMETERS:
	{ for (szBlock[0].Empty(), szBlock[1].Empty(); (pSetParametersItem = (CTCProcedureDocumentSetParametersItem *)pStep); )
	{
		for (nParameter = 0, nParameters = pSetParametersItem->GetParameters(szParameters), pSetParametersItem->GetExpressions(szExpressions); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(pDatabase->GetTCParameters()->Find(szParameters.GetAt(nParameter)))) != (CDatabaseTCParameter *)NULL)
			{
				for (szSample = szExpressions.GetAt(nParameter), szSamples.RemoveAll(); (nPos = szSample.Find(TAB)) >= 0; szSample = szSample.Mid(nPos + 1))
				{
					szSamples.Add(szSample.Left(nPos));
					continue;
				}
				for (; !szSample.IsEmpty(); )
				{
					szSamples.Add(szSample);
					break;
				}
				for (nSample = 0, nSamples = (INT)szSamples.GetSize(); nSample < nSamples; nSample++)
				{
					for (szBlock[1] = szBlock[2] = szSamples.GetAt(nSample), bTimeValue = (GetDatabase()->CheckTCParameterConstTimeType(pDatabaseTCParameter->GetTag()) || (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME)) ? TRUE : FALSE; (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0 && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 && !bTimeValue && !szSamples.GetAt(nSample).IsEmpty(); )
					{
						if (GetDatabase()->TranslateTCParameterConstValue(pDatabaseTCParameter->GetAttributes(), pDatabaseTCParameter->GetWidth(), pDatabaseTCParameter->GetConstValueAsText()))
						{
							if ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) == TCPARAMETER_RADIX_BINARY) szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_BINARY), (LPCTSTR)szSamples.GetAt(nSample));
							if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_OCTAL), (LPCTSTR)szSamples.GetAt(nSample));
							if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_HEXADECIMAL), (LPCTSTR)szSamples.GetAt(nSample));
						}
						szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SETPARAMETERVALUE_RAW), (LPCTSTR)szParameters.GetAt(nParameter), nSample, (LPCTSTR)szBlock[1]);
						break;
					}
					if (!szSamples.GetAt(nSample).IsEmpty())
					{
						if ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME) || bTimeValue)
						{
							szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_DATETIME), (LPCTSTR)szSamples.GetAt(nSample));
							szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SETPARAMETERVALUE_TIME), (LPCTSTR)szParameters.GetAt(nParameter), nSample, (LPCTSTR)szBlock[1]);
						}
						for (; (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) && !bTimeValue; )
						{
							szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SETPARAMETERVALUE_CALIBRATED), (LPCTSTR)szParameters.GetAt(nParameter), nSample, (LPCTSTR)szBlock[1]);
							break;
						}
						if ((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) && !bTimeValue)
						{
							for (szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_STRING), (LPCTSTR)szSamples.GetAt(nSample)); szSamples.GetAt(nSample).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE)) >= 0; )
							{
								szBlock[1] = szSamples.GetAt(nSample);
								break;
							}
							szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SETPARAMETERVALUE_CALIBRATED), (LPCTSTR)szParameters.GetAt(nParameter), nSample, (LPCTSTR)szBlock[1]);
						}
						szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_SETPARAMETERS_CODE), (LPCTSTR)szBlock[2], pszIndent, (LPCTSTR)pStep->GetName(), (LPCTSTR)szParameters.GetAt(nParameter), pszIndent, pszLabel, pszIndent);
						szBlock[0] += (nParameter > 0) ? (CString(CR) + CString(EOL) + pszIndent + szBlock[1]) : szBlock[1];
					}
				}
			}
		}
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SETSYNCOBJECT:
	{ for (szBlock[0].Empty(); (pSetSyncObjectItem = (CTCProcedureDocumentSetSynchronizationObjectItem *)pStep); )
	{
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_SETSYNCOBJECT_CODE), (LPCTSTR)pSetSyncObjectItem->GetObjectName(), pszIndent, (LPCTSTR)pStep->GetName(), (LPCTSTR)pSetSyncObjectItem->GetObjectName(), pszIndent, pszLabel, pszIndent);
		szBlock[0] = (!pSetSyncObjectItem->GetObjectName().IsEmpty()) ? szBlock[0] : EMPTYSTRING;
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_ACTIONOBJECT_INJECTALERT:
	{ for (szBlock[0].Empty(); (pInjectAlertItem = (CTCProcedureDocumentInjectAlertItem *)pStep); )
	{
		for (szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_INJECTALERTOPTION_CATEGORY), (pInjectAlertItem->GetCategory() == EVENT_CATEGORY_SYSTEM) ? STRING(IDS_EVENTCATEGORY_SYSTEM) : ((pInjectAlertItem->GetCategory() == EVENT_CATEGORY_SPACECRAFT) ? STRING(IDS_EVENTCATEGORY_SPACECRAFT) : STRING(IDS_EVENTCATEGORY_USER))), szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_INJECTALERTOPTION_TYPE), (LPCTSTR)pInjectAlertItem->GetType()), szBlock[1] += SPACE + szBlock[2]; !pInjectAlertItem->GetSubtype().IsEmpty(); )
		{
			szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_INJECTALERTOPTION_SUBTYPE), (LPCTSTR)pInjectAlertItem->GetSubtype());
			szBlock[1] += SPACE + szBlock[2];
			break;
		}
		for (szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_INJECTALERTOPTION_MESSAGE), (LPCTSTR)pInjectAlertItem->GetMessage()), szBlock[1] += SPACE + szBlock[2]; !pInjectAlertItem->GetComments().IsEmpty(); )
		{
			szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_INJECTALERTOPTION_COMMENT), (LPCTSTR)pInjectAlertItem->GetComments());
			szBlock[1] += SPACE + szBlock[2];
			break;
		}
		if (!pInjectAlertItem->GetAudition().IsEmpty())
		{
			szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_INJECTALERTOPTION_AUDITION), (LPCTSTR)pInjectAlertItem->GetAudition());
			szBlock[1] += SPACE + szBlock[2];
		}
		if (!pInjectAlertItem->GetNotification().IsEmpty())
		{
			szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_INJECTALERTOPTION_NOTIFICATION), (LPCTSTR)pInjectAlertItem->GetNotification());
			szBlock[1] += SPACE + szBlock[2];
		}
		for (szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_INJECTALERTOPTION_COLOR), (UINT)pInjectAlertItem->GetColor()), szBlock[1] += SPACE + szBlock[2]; pInjectAlertItem->IsBlinking(); )
		{
			szBlock[1] += CString(SPACE) + STRING(IDS_TELECOMMANDPROCEDUREFILE_INJECTALERTOPTION_BLINK);
			break;
		}
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_INJECTALERT_CODE), (LPCTSTR)szBlock[1], pszIndent, (LPCTSTR)pStep->GetName(), pszIndent, pszIndent);
		szBlock[0] = (pInjectAlertItem->GetCategory() != EVENT_CATEGORY_NONE) ? szBlock[0] : EMPTYSTRING;
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_ACTIONOBJECT_CALLPROCEDURE:
	{ for (szBlock[0].Empty(), szBlock[1].Empty(); (pCallProcedureItem = (CTCProcedureDocumentCallProcedureItem *)pStep); )
	{
		for (nArgument = 0, nArguments = pCallProcedureItem->GetArguments(pDatabaseTCProcedureArguments, szValues); nArgument < nArguments; nArgument++)
		{
			if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments.GetAt(nArgument)) != (CDatabaseTCProcedureArgument *)NULL)
			{
				for (szBlock[2] = szValues.GetAt(nArgument); (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0 && (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) == 0 && (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) == 0; )
				{
					if (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_BINARY) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_BINARY), (LPCTSTR)szValues.GetAt(nArgument));
					if (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_OCTAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_OCTAL), (LPCTSTR)szValues.GetAt(nArgument));
					if (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_HEXADECIMAL), (LPCTSTR)szValues.GetAt(nArgument));
					break;
				}
				for (; pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME; )
				{
					szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_DATETIME), (LPCTSTR)szValues.GetAt(nArgument));
					break;
				}
				if ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) || (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS))
				{
					for (szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_STRING), (LPCTSTR)szValues.GetAt(nArgument)); szValues.GetAt(nArgument).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE)) >= 0; )
					{
						szBlock[2] = szValues.GetAt(nArgument);
						break;
					}
				}
				szBlock[1] += STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR);
				szBlock[1] += szBlock[2];
			}
		}
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_CALLPROCEDURE_CODE), (LPCTSTR)TranslateConditionExpression(pCallProcedureItem->GetInvariantCondition()), pszIndent, (LPCTSTR)pCallProcedureItem->GetProcedure(), (LPCTSTR)szBlock[1], pszIndent, (LPCTSTR)pStep->GetName(), (LPCTSTR)pCallProcedureItem->GetProcedure(), pszIndent, pszLabel, pszIndent, pszIndent, (LPCTSTR)TranslateConditionExpression(pCallProcedureItem->GetInvariantCondition()), pszIndent, (LPCTSTR)pStep->GetName(), pszIndent, pszLabel, pszIndent, pszIndent, pszIndent, pszIndent, (LPCTSTR)pStep->GetName(), pszIndent, pszLabel, pszIndent);
		szBlock[0] = (!pCallProcedureItem->GetProcedure().IsEmpty()) ? szBlock[0] : EMPTYSTRING;
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_ACTIONOBJECT_STARTPROCEDURE:
	{ for (szBlock[0].Empty(), szBlock[1].Empty(); (pStartProcedureItem = (CTCProcedureDocumentStartProcedureItem *)pStep); )
	{
		for (nArgument = 0, nArguments = pStartProcedureItem->GetArguments(pDatabaseTCProcedureArguments, szValues); nArgument < nArguments; nArgument++)
		{
			if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments.GetAt(nArgument)) != (CDatabaseTCProcedureArgument *)NULL)
			{
				for (szBlock[2] = szValues.GetAt(nArgument); (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0 && (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) == 0 && (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) == 0; )
				{
					if (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_BINARY) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_BINARY), (LPCTSTR)szValues.GetAt(nArgument));
					if (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_OCTAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_OCTAL), (LPCTSTR)szValues.GetAt(nArgument));
					if (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_HEXADECIMAL), (LPCTSTR)szValues.GetAt(nArgument));
					break;
				}
				for (; pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME; )
				{
					szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_DATETIME), (LPCTSTR)szValues.GetAt(nArgument));
					break;
				}
				if ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) || (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS))
				{
					for (szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_STRING), (LPCTSTR)szValues.GetAt(nArgument)); szValues.GetAt(nArgument).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE)) >= 0; )
					{
						szBlock[2] = szValues.GetAt(nArgument);
						break;
					}
				}
				szBlock[1] += STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR);
				szBlock[1] += szBlock[2];
			}
		}
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_STARTPROCEDURE_CODE), (LPCTSTR)TranslateConditionExpression(pStartProcedureItem->GetInvariantCondition()), pszIndent, (LPCTSTR)pStartProcedureItem->GetProcedure(), (LPCTSTR)szBlock[1], pszIndent, (LPCTSTR)pStep->GetName(), (LPCTSTR)pStartProcedureItem->GetProcedure(), pszIndent, pszLabel, pszIndent, pszIndent, pszIndent, pszIndent, (LPCTSTR)pStep->GetName(), pszIndent, pszLabel, pszIndent);
		szBlock[0] = (!pStartProcedureItem->GetProcedure().IsEmpty()) ? szBlock[0] : EMPTYSTRING;
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_ACTIONOBJECT_CONTROLPROCEDURE:
	{ for (szBlock[0].Empty(); (pControlProcedureItem = (CTCProcedureDocumentControlProcedureItem *)pStep); )
	{
		szBlock[1] = (pControlProcedureItem->GetActionState() == TCPROCEDURE_ACTIONSTATE_SUSPEND) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_CONTROLPROCEDUREOPTION_SUSPEND) : EMPTYSTRING;
		szBlock[1] = (pControlProcedureItem->GetActionState() == TCPROCEDURE_ACTIONSTATE_RESUME) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_CONTROLPROCEDUREOPTION_RESUME) : szBlock[1];
		szBlock[1] = (pControlProcedureItem->GetActionState() == TCPROCEDURE_ACTIONSTATE_ABORT) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_CONTROLPROCEDUREOPTION_ABORT) : szBlock[1];
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_CONTROLPROCEDURE_CODE), (LPCTSTR)pControlProcedureItem->GetProcedure(), (LPCTSTR)szBlock[1], pszIndent, (LPCTSTR)pStep->GetName(), (LPCTSTR)pControlProcedureItem->GetProcedure(), pszIndent, pszLabel, pszIndent);
		szBlock[0] = (!pControlProcedureItem->GetProcedure().IsEmpty()) ? szBlock[0] : EMPTYSTRING;
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_ACTIONOBJECT_CONTROLTHREAD:
	{ for (szBlock[0].Empty(); (pControlThreadItem = (CTCProcedureDocumentControlThreadItem *)pStep); )
	{
		szBlock[1] = (pControlThreadItem->GetActionState() == TCPROCEDURETHREAD_ACTIONSTATE_SUSPEND) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_CONTROLTHREADOPTION_SUSPEND) : EMPTYSTRING;
		szBlock[1] = (pControlThreadItem->GetActionState() == TCPROCEDURETHREAD_ACTIONSTATE_RESUME) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_CONTROLTHREADOPTION_RESUME) : szBlock[1];
		szBlock[1] = (pControlThreadItem->GetActionState() == TCPROCEDURETHREAD_ACTIONSTATE_ENABLE) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_CONTROLTHREADOPTION_ENABLE) : szBlock[1];
		szBlock[1] = (pControlThreadItem->GetActionState() == TCPROCEDURETHREAD_ACTIONSTATE_DISABLE) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_CONTROLTHREADOPTION_DISABLE) : szBlock[1];
		szBlock[1] = (pControlThreadItem->GetActionState() == TCPROCEDURETHREAD_ACTIONSTATE_ABORT) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_CONTROLTHREADOPTION_ABORT) : szBlock[1];
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_CONTROLTHREAD_CODE), (LPCTSTR)pControlThreadItem->GetThread(), (LPCTSTR)szBlock[1], pszIndent, (LPCTSTR)pStep->GetName(), (LPCTSTR)pControlThreadItem->GetThread(), pszIndent, pszLabel, pszIndent);
		szBlock[0] = (!pControlThreadItem->GetThread().IsEmpty()) ? szBlock[0] : EMPTYSTRING;
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_ACTIONOBJECT_WAITTIMEINTERVAL:
	{ for (szBlock[0].Empty(); (pWaitTimeIntervalItem = (CTCProcedureDocumentWaitTimeIntervalItem *)pStep); )
	{
		szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_WAITTIMEINTERVAL_CODE), pWaitTimeIntervalItem->GetWaitInterval(), pszIndent, (LPCTSTR)pStep->GetName(), pszIndent, pszLabel, pszIndent);
		szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_WAITABSOLUTETIME_CODE), (LPCTSTR)cStringTools.ConvertLongIntToString(pWaitTimeIntervalItem->GetWaitTime().GetTime()), pszIndent, (LPCTSTR)pStep->GetName(), pszIndent, pszLabel, pszIndent);
		szBlock[0] = (pWaitTimeIntervalItem->GetWaitTime() == 0) ? szBlock[1] : szBlock[2];
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_ACTIONOBJECT_WAITSYNCOBJECT:
	{ for (szBlock[0].Empty(); (pWaitSyncObjectItem = (CTCProcedureDocumentWaitSynchronizationObjectItem *)pStep); )
	{
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_WAITSYNCOBJECT_CODE), (LPCTSTR)pWaitSyncObjectItem->GetObjectName(), pWaitSyncObjectItem->GetTimeout(), pszIndent, (LPCTSTR)pStep->GetName(), (LPCTSTR)pWaitSyncObjectItem->GetObjectName(), pszIndent, pszLabel, pszIndent);
		szBlock[0] = (!pWaitSyncObjectItem->GetObjectName().IsEmpty()) ? szBlock[0] : EMPTYSTRING;
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION:
	{ for (szBlock[0].Empty(); (pSendTCFunctionItem = (CTCProcedureDocumentSendTCFunctionItem *)pStep) && pSendTCFunctionItem->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket); )
	{
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_SENDTCFUNCTION_CODE), EMPTYSTRING, (LPCTSTR)pStep->GetName(), EMPTYSTRING, (LPCTSTR)cDatabaseTCFunction.GetName(), -1, -1, (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATTIME) ? (LPCTSTR)cStringTools.ConvertLongIntToString(pSendTCFunctionItem->GetReleaseTime().GetTime()) : ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATOFFSET) ? (LPCTSTR)(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_STARTTIME) + cStringTools.ConvertLongIntToString(1000 * (TIMETAG)pSendTCFunctionItem->GetReleaseDeltaTime())) : (LPCTSTR)cStringTools.ConvertLongIntToString(0)), 0, (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATTIME) ? (LPCTSTR)cStringTools.ConvertLongIntToString(pSendTCFunctionItem->GetExecutionTime().GetTime()) : ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_EXECUTEATOFFSET) ? (((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATTIME) && pSendTCFunctionItem->GetReleaseTime() > 0) ? (LPCTSTR)(cStringTools.ConvertLongIntToString(pSendTCFunctionItem->GetReleaseTime().GetTime() + 1000 * (TIMETAG)pSendTCFunctionItem->GetExecutionDeltaTime())) : (LPCTSTR)(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_STARTTIME) + cStringTools.ConvertLongIntToString(1000 * (TIMETAG)pSendTCFunctionItem->GetExecutionDeltaTime()))) : (LPCTSTR)cStringTools.ConvertLongIntToString(0)), 0, STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_NONEARLIERTIME), -1, STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_NONGROUPED), (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_CRITICAL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_CRITICAL) : STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_NONCRITICAL), ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_ACCEPTANCE) ? TCFUNCTION_ACKFLAG_ACCEPTANCE : 0) | ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_START) ? TCFUNCTION_ACKFLAG_START : 0) | ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_PROGRESS) ? TCFUNCTION_ACKFLAG_PROGRESS : 0) | ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_ACKFLAG_COMPLETION) ? TCFUNCTION_ACKFLAG_COMPLETION : 0), pszIndent, (LPCTSTR)pStep->GetName(), (LPCTSTR)cDatabaseTCFunction.GetName(), pszIndent, pszLabel, pszIndent);
		szBlock[0] = (!cDatabaseTCFunction.GetName().IsEmpty()) ? szBlock[0] : EMPTYSTRING;
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE:
	{ for (szBlock[0].Empty(), szBlock[3].Empty(); (pSendTCSequenceItem = (CTCProcedureDocumentSendTCSequenceItem *)pStep); )
	{
		for (nEntry = 0, nEntries = pSendTCSequenceItem->GetSize(), tReleaseTime = 0, nBlockID = -1; nEntry < nEntries; nEntry++)
		{
			if ((pSendTCFunctionItem = pSendTCSequenceItem->GetAt(nEntry)) != (CTCProcedureDocumentSendTCFunctionItem *)NULL  &&  pSendTCFunctionItem->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
			{
				tReleaseTime = ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_RELEASEATTIME) && !nEntry) ? pSendTCFunctionItem->GetReleaseTime() : tReleaseTime;
				szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_STARTOFFSETTIME), (LPCTSTR)TranslateToIdentifierName(pStep->GetName()));
				szBlock[2].Format((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_SENDTCSEQUENCEENTRY_PROCEDURE_CODE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_SENDTCSEQUENCEENTRY_FUNCTION_CODE), (nEntry > 0) ? pszIndent : EMPTYSTRING, (LPCTSTR)pStep->GetName(), (LPCTSTR)pSendTCSequenceItem->GetSequence(), (LPCTSTR)cDatabaseTCFunction.GetName(), nEntry + 1, nEntries, (LPCTSTR)szBlock[1].Left(szBlock[1].GetLength() - 1), (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATTIME) ? (LPCTSTR)cStringTools.ConvertLongIntToString(pSendTCFunctionItem->GetReleaseTime().GetTime()) : ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATOFFSET) ? ((tReleaseTime > 0) ? (LPCTSTR)cStringTools.ConvertLongIntToString(tReleaseTime.GetTime() + 1000 * (TIMETAG)pSendTCFunctionItem->GetReleaseDeltaTime()) : (LPCTSTR)(szBlock[1] + cStringTools.ConvertLongIntToString(1000 * (TIMETAG)pSendTCFunctionItem->GetReleaseDeltaTime()))) : (LPCTSTR)cStringTools.ConvertLongIntToString(0)), (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_RELEASEATOFFSET) ? pSendTCFunctionItem->GetReleaseDeltaTime() : 0, ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATTIME)) ? (LPCTSTR)cStringTools.ConvertLongIntToString(pSendTCFunctionItem->GetExecutionTime().GetTime()) : ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATOFFSET) ? ((tReleaseTime > 0) ? (LPCTSTR)cStringTools.ConvertLongIntToString(tReleaseTime.GetTime() + 1000 * (TIMETAG)pSendTCFunctionItem->GetExecutionDeltaTime()) : (LPCTSTR)(szBlock[1] + cStringTools.ConvertLongIntToString(1000 * (TIMETAG)pSendTCFunctionItem->GetExecutionDeltaTime()))) : (LPCTSTR)cStringTools.ConvertLongIntToString(0)), (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_EXECUTEATOFFSET) ? pSendTCFunctionItem->GetExecutionDeltaTime() : 0, (pSendTCFunctionItem->IsEarlierExecutionDeltaTime()) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_EARLIERTIME) : STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_NONEARLIERTIME), (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_BLOCKED) ? (nBlockID = nBlockID + 1) : (nBlockID = -1), (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_GROUPED) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_GROUPED) : STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_NONGROUPED), (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_CRITICAL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_CRITICAL) : STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_NONCRITICAL), ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_AUTHORIZATION) ? TCSEQUENCEENTRY_RELTYPE_MANUAL : TCSEQUENCEENTRY_RELTYPE_AUTOMATIC) | ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_ACCEPTANCE) ? TCSEQUENCEENTRY_ACKFLAG_ACCEPTANCE : 0) | ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_START) ? TCSEQUENCEENTRY_ACKFLAG_START : 0) | ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_PROGRESS) ? TCSEQUENCEENTRY_ACKFLAG_PROGRESS : 0) | ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_ACKFLAG_COMPLETION) ? TCSEQUENCEENTRY_ACKFLAG_COMPLETION : 0), pszIndent, (LPCTSTR)pStep->GetName(), (LPCTSTR)cDatabaseTCFunction.GetName(), (LPCTSTR)pSendTCSequenceItem->GetSequence(), nEntry + 1, pszIndent, pszLabel, pszIndent);
				szBlock[3] += (!cDatabaseTCFunction.GetName().IsEmpty()) ? ((!szBlock[3].IsEmpty()) ? (CString(CR) + CString(EOL) + szBlock[2]) : szBlock[2]) : EMPTYSTRING;
			}
		}
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_SENDTCSEQUENCE_CODE), (LPCTSTR)TranslateToIdentifierName(pStep->GetName()), pszIndent, (LPCTSTR)szBlock[3]);
		szBlock[0] = (!pSendTCSequenceItem->GetSequence().IsEmpty()) ? szBlock[0] : EMPTYSTRING;
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_ACTIONOBJECT_LOGMESSAGE:
	{ for (szBlock[0].Empty(); (pLogMessageItem = (CTCProcedureDocumentLogMessageItem *)pStep); )
	{
		for (nPos = 0, szFileName = pLogMessageItem->GetFileName(); nPos < szFileName.GetLength(); nPos++)
		{
			if (szFileName.GetAt(nPos) == cDrives.GetPathDelimiter() && (nPos == szFileName.GetLength() - 1 || szFileName.GetAt(nPos + 1) != cDrives.GetPathDelimiter()))
			{
				szFileName = szFileName.Left(nPos + 1) + cDrives.GetPathDelimiter() + szFileName.Mid(nPos + 1);
				nPos++;
			}
		}
		for (nPos = 0, szMessage = pLogMessageItem->GetMessage(); nPos < szMessage.GetLength(); nPos++)
		{
			if (szMessage.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE))
			{
				szMessage = szMessage.Left(nPos) + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_QUOTEINSTRING) + szMessage.Mid(nPos);
				nPos++;
			}
		}
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_LOGMESSAGE_CODE), (LPCTSTR)szFileName, (LPCTSTR)szMessage, (pLogMessageItem->GetOptions() & TCPROCEDURELOGMESSAGEITEM_OPTIONS_PLAINTEXT) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_LOGMESSAGEOPTION_PLAINTEXT) : STRING(IDS_TELECOMMANDPROCEDUREFILE_LOGMESSAGEOPTION_NOPLAINTEXT), (pLogMessageItem->GetOptions() & TCPROCEDURELOGMESSAGEITEM_OPTIONS_UNICODE) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_LOGMESSAGEOPTION_UNICODE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_LOGMESSAGEOPTION_NOUNICODE), pszIndent, (LPCTSTR)pStep->GetName(), pszIndent, pszIndent);
		szBlock[0] = (!pLogMessageItem->GetFileName().IsEmpty()) ? szBlock[0] : EMPTYSTRING;
		break;
	}
	break;
	}
	case TCPROCEDURETHREADSTEP_ACTIONOBJECT_USERINTERACTION:
	{ for (szBlock[0].Empty(), szBlock[1].Empty(); (pUserInteractionItem = (CTCProcedureDocumentUserInteractionItem *)pStep); )
	{
		for (nVariable = 0, nVariables = pUserInteractionItem->GetVariables(szVariables); nVariable < nVariables; nVariable++)
		{
			for (nValue = 0, nValues = pUserInteractionItem->GetVariableValues(szVariables.GetAt(nVariable), szValues), szVarValues.Empty(); nValue < nValues; nValue++)
			{
				szVarValues += (nValue > 0) ? (TAB + szValues.GetAt(nValue)) : szValues.GetAt(nValue);
				continue;
			}
			szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_USERINTERACTION_ADDVARIABLE), (LPCTSTR)TranslateToIdentifierName(pStep->GetName()), (LPCTSTR)szVariables.GetAt(nVariable));
			szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_USERINTERACTION_ADDVARIABLEVALUES), (LPCTSTR)TranslateToIdentifierName(pStep->GetName()), (LPCTSTR)szVarValues);
			szBlock[1] += (nVariable > 0) ? (CString(CR) + CString(EOL) + pszIndent + szBlock[2] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR)) : (szBlock[2] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR));
			szBlock[1] += (!szVarValues.IsEmpty()) ? (CString(CR) + CString(EOL) + pszIndent + szBlock[3] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR)) : EMPTYSTRING;
		}
		szBlock[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_USERINTERACTION_CODE), pszIndent, (LPCTSTR)TranslateToIdentifierName(pStep->GetName()), pszIndent, (LPCTSTR)TranslateToIdentifierName(pStep->GetName()), pszIndent, (!szBlock[1].IsEmpty()) ? (LPCTSTR)(szBlock[1] + CR + EOL + pszIndent) : EMPTYSTRING, (pUserInteractionItem->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_ACKNOWLEDGE) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_USERINTERACTIONOPTION_ACKNOWLEDGE) : ((pUserInteractionItem->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_REQUEST) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_USERINTERACTIONOPTION_REQUEST) : STRING(IDS_TELECOMMANDPROCEDUREFILE_USERINTERACTIONOPTION_CHOOSE)), (LPCTSTR)pUserInteractionItem->GetMessage(), (LPCTSTR)TranslateToIdentifierName(pStep->GetName()), (LPCTSTR)TranslateToIdentifierName(pStep->GetName()), pszIndent, (LPCTSTR)pStep->GetName(), pszIndent, pszLabel, pszIndent, pszIndent, pszIndent);
		szBlock[0] = (pUserInteractionItem->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_ACKNOWLEDGE || pUserInteractionItem->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_REQUEST || pUserInteractionItem->GetAction() == TCPROCEDUREUSERINTERACTIONITEM_ACTION_CHOOSE) ? szBlock[0] : EMPTYSTRING;
		break;
	}
	break;
	}
	}
	return szBlock[0];
}

CString CTCProcedureCompileThread::GenerateSubStepsSourceCode(CONST CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedure *pDatabaseTCProcedure, CONST CTCProcedureDocumentItem *pStep, UINT nSubThreadID, LPCTSTR pszInvariantCondition, LPCTSTR pszLabel, LPCTSTR pszIndent) CONST
{
	CString  szBlock[3];
	CString  szLabel[3];
	POSITION  lPosition;
	CStringArray  szFailureLabels;
	CTCProcedureDocumentItem  *pSubStep;

	for (lPosition = pStep->GetSubSteps()->GetStartPosition(); lPosition; )
	{
		if ((pSubStep = pStep->GetSubSteps()->GetNextStep(lPosition)) && pSubStep->GetSubThreadID() == nSubThreadID  &&  pSubStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_START  &&  pSubStep->GetType() != TCPROCEDURETHREADSTEP_FLOWCONTROL_END)
		{
			for (szLabel[0].Format((szFailureLabels.GetSize() > 0 && !szFailureLabels.GetAt(0).IsEmpty()) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_RETURNCODE_GOTOSTATEMENT) : STRING(IDS_TELECOMMANDPROCEDUREFILE_RETURNCODE_EXITSTATEMENT), (pSubStep->GetFailureLabels(szFailureLabels) > 0) ? (LPCTSTR)szFailureLabels.GetAt(0) : EMPTYSTRING), szLabel[1].Format((szFailureLabels.GetSize() > 1 && !szFailureLabels.GetAt(1).IsEmpty()) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_RETURNCODE_GOTOSTATEMENT) : STRING(IDS_TELECOMMANDPROCEDUREFILE_RETURNCODE_EXITSTATEMENT), (szFailureLabels.GetSize() > 1) ? (LPCTSTR)szFailureLabels.GetAt(1) : EMPTYSTRING), szLabel[2].Format((szFailureLabels.GetSize() > 2 && !szFailureLabels.GetAt(2).IsEmpty()) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_RETURNCODE_GOTOSTATEMENT) : STRING(IDS_TELECOMMANDPROCEDUREFILE_RETURNCODE_EXITSTATEMENT), (szFailureLabels.GetSize() > 2) ? (LPCTSTR)szFailureLabels.GetAt(2) : EMPTYSTRING), szBlock[1] = GenerateStepSourceCode(pDatabase, pDatabaseTCProcedure, pSubStep, szLabel[1], pszIndent); !szBlock[1].IsEmpty(); )
			{
				for (szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_INVARIANTCONDITION_BLOCK), pszInvariantCondition, pszIndent, (LPCTSTR)pStep->GetName(), pszIndent, pszLabel, pszIndent); lstrlen(pszInvariantCondition) > 0; )
				{
					szBlock[1] += CString(CR) + CString(EOL) + pszIndent + szBlock[2];
					break;
				}
				szBlock[1] += CString(CR) + CString(EOL) + pszIndent;
				break;
			}
			szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_STEP_BLOCK), (LPCTSTR)pSubStep->GetName(), pszIndent, (LPCTSTR)pSubStep->GetName(), pszIndent, (LPCTSTR)szLabel[0], pszIndent, pszIndent, (LPCTSTR)pSubStep->GetName(), (LPCTSTR)pSubStep->GetName(), pszIndent, (LPCTSTR)pSubStep->GetName(), pszIndent, (LPCTSTR)szLabel[1], pszIndent, pszIndent, (LPCTSTR)szBlock[1], (LPCTSTR)pSubStep->GetName(), (LPCTSTR)pSubStep->GetName(), pszIndent, (LPCTSTR)pSubStep->GetName(), pszIndent, (LPCTSTR)szLabel[2], pszIndent, pszIndent, (LPCTSTR)pSubStep->GetName());
			szBlock[0] += (!szBlock[0].IsEmpty()) ? (CString(CR) + CString(EOL) + pszIndent + szBlock[2]) : szBlock[2];
		}
	}
	return((szBlock[0].IsEmpty()) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_DEFAULT_STATEMENT) : szBlock[0]);
}

BOOL CTCProcedureCompileThread::TranslateSourceCode(CONST CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedure *pDatabaseTCProcedure, LPCTSTR pszSourceCode, LPCTSTR pszPrecompileCode, CONST CDatabaseTCProcedureArguments &pDatabaseTCProcedureArguments, CONST CDatabaseTCProcedureVariables &pDatabaseTCProcedureVariables, CString &szCompileCode)
{
	INT  nCount;
	INT  nPos[5];
	INT  nThread;
	INT  nThreads;
	INT  nLine[2];
	INT  nKeyword;
	INT  nKeywords;
	INT  nArgument;
	INT  nArguments;
	INT  nVariable;
	INT  nVariables;
	INT  nParameter;
	INT  nParameters;
	TCHAR  szChar;
	CString  szCode;
	CString  szLine;
	CString  szBlock;
	CString  szMacro;
	CString  szThread;
	CString  szHeader[2];
	CString  szStatement;
	CString  szStatements;
	CString  szSourceCode;
	CString  szParameter[2];
	CUIntArray  nSampleCount;
	CStringArray  szParameters;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;

	for (nKeyword = MINTELECOMMANDPROCEDURELANGUAGETMUNITPROCEDURE, nKeywords = MAXTELECOMMANDPROCEDURELANGUAGETMUNITPROCEDURE, szSourceCode = pszSourceCode, szCompileCode = pszPrecompileCode, m_szLines.RemoveAll(); nKeyword <= nKeywords; nKeyword++)
	{
		for (nPos[0] = 0; (nPos[1] = szCompileCode.Mid(nPos[0]).Find(STRING(nKeyword))) >= 0; nPos[0] += nPos[1] + lstrlen(STRING(nKeyword)))
		{
			for (szMacro.Empty(); CheckSourceCode(szCompileCode, nPos[0] + nPos[1]); )
			{
				if (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETTMUNITTAG))) szMacro = STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETTMUNITTAG);
				if (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETTMUNITTIME))) szMacro = STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETTMUNITTIME);
				if (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETTMUNITID))) szMacro = STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETTMUNITID);
				if (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETTMUNITDATA))) szMacro = STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETTMUNITDATA);
				if (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETTMUNITQUALITY))) szMacro = STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETTMUNITQUALITY);
				if (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETTOTALTMBANDWIDTH))) szMacro = STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETTOTALTMBANDWIDTH);
				if (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETAVAILABLETMBANDWIDTH))) szMacro = STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETAVAILABLETMBANDWIDTH);
				if (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETMAXDIAGNOSTICTMBANDWIDTH))) szMacro = STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETMAXDIAGNOSTICTMBANDWIDTH);
				if (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETAVAILABLEDIAGNOSTICTMBANDWIDTH))) szMacro = STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETAVAILABLEDIAGNOSTICTMBANDWIDTH);
				if (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETLASTTMBANDWIDTHMEASUREMENTTIME))) szMacro = STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETLASTTMBANDWIDTHMEASUREMENTTIME);
				if (!szMacro.IsEmpty()) szCompileCode = szCompileCode.Left(nPos[0] + nPos[1]) + szMacro + szCompileCode.Mid(nPos[0] + nPos[1] + lstrlen(STRING(nKeyword)));
				break;
			}
		}
	}
	for (nKeyword = MINTELECOMMANDPROCEDURELANGUAGEPARAMETERPROCEDURE, nKeywords = MAXTELECOMMANDPROCEDURELANGUAGEPARAMETERPROCEDURE; nKeyword <= nKeywords; nKeyword++)
	{
		for (nPos[0] = 0; (nPos[1] = szCompileCode.Mid(nPos[0]).Find(STRING(nKeyword))) >= 0; nPos[0] = nPos[1])
		{
			for (nPos[1] += nPos[0] + lstrlen(STRING(nKeyword)), nPos[2] = 0, szParameter[0].Empty(); nPos[1] + nPos[2] < szCompileCode.GetLength(); nPos[2]++)
			{
				if ((szChar = szCompileCode.GetAt(nPos[1] + nPos[2])) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR) && szChar != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDARGUMENTS) && szChar != SPACE[0] && szChar != TAB)
				{
					if (GetDatabase()->CheckTCParameterTag(szParameter[0] + szChar))
					{
						szParameter[0] += szChar;
						continue;
					}
					break;
				}
				if (GetDatabase()->CheckTCParameterTag(szParameter[0] + szChar) && (szChar == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR) || szChar == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDARGUMENTS)) && pDatabase->GetTCParameters()->Find(szParameter[0]) < 0)
				{
					szParameter[0] += szChar;
					continue;
				}
				if (!szParameter[0].IsEmpty()) break;
			}
			if ((pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(pDatabase->GetTCParameters()->Find(szParameter[0]))))
			{
				for (szMacro.Empty(); (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) || (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) || (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == 0; )
				{
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_SETVALUE))) ? (((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) != TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_SETUINTVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_SETSTRINGVALUE)) : EMPTYSTRING;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETVALUE))) ? (((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) != TCPARAMETER_CALIBRATION_STATUS) ? (((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) != TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETUINTVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETFLOATVALUE)) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETSTRINGVALUE)) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_SETRAWVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_SETRAWUINTVALUE) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETRAWVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETRAWUINTVALUE) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_SETTIMEVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_SETTIMEVALUE) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETTIMEVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETTIMEVALUE) : szMacro;
					break;
				}
				if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER)
				{
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_SETVALUE))) ? (((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) != TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_SETINTVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_SETSTRINGVALUE)) : EMPTYSTRING;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETVALUE))) ? (((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) != TCPARAMETER_CALIBRATION_STATUS) ? (((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) != TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETINTVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETFLOATVALUE)) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETSTRINGVALUE)) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_SETRAWVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_SETRAWINTVALUE) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETRAWVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETRAWINTVALUE) : szMacro;
				}
				if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
				{
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_SETVALUE))) ? (((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) != TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_SETFLOATVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_SETSTRINGVALUE)) : EMPTYSTRING;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETVALUE))) ? (((pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) != TCPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETFLOATVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETSTRINGVALUE)) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_SETRAWVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_SETRAWFLOATVALUE) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETRAWVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETRAWFLOATVALUE) : szMacro;
				}
				if (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CODING_TIME)
				{
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_SETVALUE)) || !lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_SETRAWVALUE)) || !lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_SETTIMEVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_SETTIMEVALUE) : EMPTYSTRING;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETVALUE)) || !lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETRAWVALUE)) || !lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETTIMEVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETTIMEVALUE) : szMacro;
				}
				for (; !lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETSTATUS)); )
				{
					szMacro = STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETVALUESTATUS);
					break;
				}
				if (CheckSourceCode(szCompileCode, nPos[1]))
				{
					for (szParameter[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_TCPARAMETERARGUMENT), (LPCTSTR)szParameter[0]), szCompileCode = szCompileCode.Left(nPos[1]) + szParameter[1] + szCompileCode.Mid(nPos[1] + nPos[2]); !szMacro.IsEmpty(); )
					{
						szCompileCode = szCompileCode.Left(nPos[1] - lstrlen(STRING(nKeyword))) + szMacro + szCompileCode.Mid(nPos[1]);
						break;
					}
				}
				continue;
			}
			for (nPos[2] = 0, szParameter[0].Empty(); nPos[1] + nPos[2] < szCompileCode.GetLength(); nPos[2]++)
			{
				if ((szChar = szCompileCode.GetAt(nPos[1] + nPos[2])) != SPACE[0] && szChar != TAB)
				{
					if (GetDatabase()->CheckTMParameterTag(szParameter[0] + szChar))
					{
						szParameter[0] += szChar;
						continue;
					}
					break;
				}
				if (!szParameter[0].IsEmpty()) break;
			}
			if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(szParameter[0]))))
			{
				for (szMacro.Empty(); (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN)) || (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_UNSIGNEDINTEGER) || (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_UNSIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX | TMPARAMETER_CODING_FLOATINGPOINT)) == 0; )
				{
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETVALUE))) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) != TMPARAMETER_CALIBRATION_STATUS) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) != TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETUINTVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETFLOATVALUE)) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETSTRINGVALUE)) : EMPTYSTRING;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETNUMERICALVALUE))) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) != TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETNUMERICALUINTVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETNUMERICALFLOATVALUE)) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETRAWVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETRAWUINTVALUE) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETVALUETIME))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETVALUETIME) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTVALUE))) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) != TMPARAMETER_CALIBRATION_STATUS) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) != TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTUINTVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTFLOATVALUE)) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTSTRINGVALUE)) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTNUMERICALVALUE))) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) != TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTNUMERICALUINTVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTNUMERICALFLOATVALUE)) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTRAWVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTRAWUINTVALUE) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTVALUETIME))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTVALUETIME) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_CALCULATEVALUEAVERAGE))) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) != TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_CALCULATEAVERAGEUINTVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_CALCULATEAVERAGEFLOATVALUE)) : szMacro;
					break;
				}
				if (pDatabaseTMParameter->GetAttributes() & (TMPARAMETER_CODING_SIGNEDINTEGER | TMPARAMETER_CODING_COMPLEMENTCOMPLEX))
				{
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETVALUE))) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) != TMPARAMETER_CALIBRATION_STATUS) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) != TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETINTVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETFLOATVALUE)) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETSTRINGVALUE)) : EMPTYSTRING;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETNUMERICALVALUE))) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) != TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETNUMERICALINTVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETNUMERICALFLOATVALUE)) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETRAWVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETRAWINTVALUE) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETVALUETIME))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETVALUETIME) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTVALUE))) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) != TMPARAMETER_CALIBRATION_STATUS) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) != TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTINTVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTFLOATVALUE)) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTSTRINGVALUE)) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTNUMERICALVALUE))) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) != TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTNUMERICALINTVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTNUMERICALFLOATVALUE)) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTRAWVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTRAWINTVALUE) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTVALUETIME))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTVALUETIME) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_CALCULATEVALUEAVERAGE))) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) != TMPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_CALCULATEAVERAGEINTVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_CALCULATEAVERAGEFLOATVALUE)) : szMacro;
				}
				if (pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT)
				{
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETVALUE))) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) != TMPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETFLOATVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETSTRINGVALUE)) : EMPTYSTRING;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETNUMERICALVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETNUMERICALFLOATVALUE) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETRAWVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETRAWFLOATVALUE) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETVALUETIME))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETVALUETIME) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTVALUE))) ? (((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS) != TMPARAMETER_CALIBRATION_STATUS) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTFLOATVALUE) : STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTSTRINGVALUE)) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTNUMERICALVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTNUMERICALFLOATVALUE) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTRAWVALUE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTRAWFLOATVALUE) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTVALUETIME))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETPASTVALUETIME) : szMacro;
					szMacro = (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_CALCULATEVALUEAVERAGE))) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_CALCULATEAVERAGEFLOATVALUE) : szMacro;
				}
				if (!lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTVALUE)) || !lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTNUMERICALVALUE)) || !lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTRAWVALUE)) || !lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETPASTVALUETIME)))
				{
					for (; nPos[1] + nPos[2] < szCompileCode.GetLength(); nPos[2] = nPos[2] + 1)
					{
						if ((szChar = szCompileCode.GetAt(nPos[1] + nPos[2])) != SPACE[0] && szChar != TAB) break;
						continue;
					}
					if ((nCount = (szCompileCode.GetAt(nPos[1] + nPos[2]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR)) ? _ttoi(szCompileCode.Mid(nPos[1] + nPos[2] + 1)) : -1) >= 0)
					{
						for (nParameter = 0, nParameters = (INT)szParameters.GetSize(); nParameter < nParameters; nParameter++)
						{
							if (szParameters.GetAt(nParameter) == szParameter[0]) break;
							continue;
						}
						for (; nParameter < nParameters; )
						{
							nSampleCount.SetAt(nParameter, max(nSampleCount.GetAt(nParameter), (UINT)nCount));
							break;
						}
						if (nParameter == nParameters)
						{
							szParameters.Add(szParameter[0]);
							nSampleCount.Add(nCount);
						}
					}
				}
				for (; !lstrcmp(STRING(nKeyword), STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_MACRO_GETSTATUS)); )
				{
					szMacro = STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_GETVALUESTATUS);
					break;
				}
				if (CheckSourceCode(szCompileCode, nPos[1]))
				{
					for (szParameter[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_TMPARAMETERARGUMENT), (LPCTSTR)szParameter[0]), szCompileCode = szCompileCode.Left(nPos[1]) + szParameter[1] + szCompileCode.Mid(nPos[1] + nPos[2]); !szMacro.IsEmpty(); )
					{
						szCompileCode = szCompileCode.Left(nPos[1] - lstrlen(STRING(nKeyword))) + szMacro + szCompileCode.Mid(nPos[1]);
						break;
					}
				}
				continue;
			}
		}
	}
	for (nArgument = 0, nArguments = (INT)pDatabaseTCProcedureArguments.GetSize(); nArgument < nArguments; nArgument++)
	{
		if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments.GetAt(nArgument)) != (CDatabaseTCProcedureArgument *)NULL)
		{
			for (nPos[0] = 0, szMacro.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTVALUERANGE_CHECK), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag(), EMPTYSTRING), szMacro = ((nPos[1] = szMacro.Find(pDatabaseTCProcedureArgument->GetTag())) >= 0) ? szMacro.Left(nPos[1]) : szMacro; (nPos[1] = szCompileCode.Mid(nPos[0]).Find(pDatabaseTCProcedureArgument->GetTag())) >= 0; nPos[0] += nPos[1] + pDatabaseTCProcedureArgument->GetTag().GetLength())
			{
				if (nPos[0] + nPos[1] > 0 && !_istalnum((szChar = szCompileCode.GetAt(nPos[0] + nPos[1] - 1))) && szChar != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE) && szChar != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE) && !_istalnum((szChar = szCompileCode.GetAt(nPos[0] + nPos[1] + pDatabaseTCProcedureArgument->GetTag().GetLength()))) && szChar != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE) && szChar != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE))
				{
					szCompileCode = (CheckSourceCode(szCompileCode, nPos[0] + nPos[1])) ? (szCompileCode.Left(nPos[0] + nPos[1]) + STRING(IDS_TELECOMMANDPROCEDUREFILE_PREFIX_IDENTIFIER) + szCompileCode.Mid(nPos[0] + nPos[1])) : szCompileCode;
					continue;
				}
				if (nPos[0] + nPos[1] >= szMacro.GetLength() && szCompileCode.Mid(nPos[0] + nPos[1] - szMacro.GetLength(), szMacro.GetLength()) == szMacro)
				{
					for (nPos[2] = nPos[0] + nPos[1] - szMacro.GetLength(); nPos[2] < szCompileCode.GetLength(); nPos[2] = nPos[2] + 1)
					{
						if (szCompileCode.GetAt(nPos[2]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINARGUMENTS)) break;
						continue;
					}
					if (nPos[2] < szCompileCode.GetLength())
					{
						if ((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) || (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) || (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == 0)
						{
							szCompileCode = (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) ? (szCompileCode.Left(nPos[0] + nPos[1] - szMacro.GetLength()) + STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTUINTVALUERANGE_CHECK) + szCompileCode.Mid(nPos[2])) : (szCompileCode.Left(nPos[0] + nPos[1] - szMacro.GetLength()) + STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTSTRINGVALUERANGE_CHECK) + szCompileCode.Mid(nPos[2]));
							continue;
						}
						if (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER)
						{
							szCompileCode = szCompileCode.Left(nPos[0] + nPos[1] - szMacro.GetLength()) + STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTINTVALUERANGE_CHECK) + szCompileCode.Mid(nPos[2]);
							continue;
						}
						if (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
						{
							szCompileCode = szCompileCode.Left(nPos[0] + nPos[1] - szMacro.GetLength()) + STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTFLOATVALUERANGE_CHECK) + szCompileCode.Mid(nPos[2]);
							continue;
						}
						if (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME)
						{
							szCompileCode = szCompileCode.Left(nPos[0] + nPos[1] - szMacro.GetLength()) + STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTTIMEVALUERANGE_CHECK) + szCompileCode.Mid(nPos[2]);
							continue;
						}
					}
				}
			}
		}
	}
	for (nVariable = 0, nVariables = (INT)pDatabaseTCProcedureVariables.GetSize(); nVariable < nVariables; nVariable++)
	{
		if ((pDatabaseTCProcedureVariable = pDatabaseTCProcedureVariables.GetAt(nVariable)))
		{
			for (nPos[0] = 0, szMacro.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VARIABLEVALUERANGE_CHECK), (LPCTSTR)pDatabaseTCProcedureVariable->GetTag(), EMPTYSTRING), szMacro = ((nPos[1] = szMacro.Find(pDatabaseTCProcedureVariable->GetTag())) >= 0) ? szMacro.Left(nPos[1]) : szMacro; (nPos[1] = szCompileCode.Mid(nPos[0]).Find(pDatabaseTCProcedureVariable->GetTag())) >= 0; nPos[0] += nPos[1] + pDatabaseTCProcedureVariable->GetTag().GetLength())
			{
				if (nPos[0] + nPos[1] > 0 && !_istalnum((szChar = szCompileCode.GetAt(nPos[0] + nPos[1] - 1))) && szChar != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE) && szChar != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE) && !_istalnum((szChar = szCompileCode.GetAt(nPos[0] + nPos[1] + pDatabaseTCProcedureVariable->GetTag().GetLength()))) && szChar != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE) && szChar != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE))
				{
					szCompileCode = (CheckSourceCode(szCompileCode, nPos[0] + nPos[1])) ? (szCompileCode.Left(nPos[0] + nPos[1]) + STRING(IDS_TELECOMMANDPROCEDUREFILE_PREFIX_IDENTIFIER) + szCompileCode.Mid(nPos[0] + nPos[1])) : szCompileCode;
					continue;
				}
				if (nPos[0] + nPos[1] >= szMacro.GetLength() && szCompileCode.Mid(nPos[0] + nPos[1] - szMacro.GetLength(), szMacro.GetLength()) == szMacro)
				{
					for (nPos[2] = nPos[0] + nPos[1] - szMacro.GetLength(); nPos[2] < szCompileCode.GetLength(); nPos[2] = nPos[2] + 1)
					{
						if (szCompileCode.GetAt(nPos[2]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINARGUMENTS)) break;
						continue;
					}
					if (nPos[2] < szCompileCode.GetLength())
					{
						if ((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_BITPATTERN) || (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_UNSIGNEDINTEGER) || (pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) == 0)
						{
							szCompileCode = (pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME)) ? (szCompileCode.Left(nPos[0] + nPos[1] - szMacro.GetLength()) + STRING(IDS_TELECOMMANDPROCEDUREFILE_VARIABLEUINTVALUERANGE_CHECK) + szCompileCode.Mid(nPos[2])) : (szCompileCode.Left(nPos[0] + nPos[1] - szMacro.GetLength()) + STRING(IDS_TELECOMMANDPROCEDUREFILE_VARIABLESTRINGVALUERANGE_CHECK) + szCompileCode.Mid(nPos[2]));
							continue;
						}
						if (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER)
						{
							szCompileCode = szCompileCode.Left(nPos[0] + nPos[1] - szMacro.GetLength()) + STRING(IDS_TELECOMMANDPROCEDUREFILE_VARIABLEINTVALUERANGE_CHECK) + szCompileCode.Mid(nPos[2]);
							continue;
						}
						if (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
						{
							szCompileCode = szCompileCode.Left(nPos[0] + nPos[1] - szMacro.GetLength()) + STRING(IDS_TELECOMMANDPROCEDUREFILE_VARIABLEFLOATVALUERANGE_CHECK) + szCompileCode.Mid(nPos[2]);
							continue;
						}
						if (pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TIME)
						{
							szCompileCode = szCompileCode.Left(nPos[0] + nPos[1] - szMacro.GetLength()) + STRING(IDS_TELECOMMANDPROCEDUREFILE_VARIABLETIMEVALUERANGE_CHECK) + szCompileCode.Mid(nPos[2]);
							continue;
						}
					}
				}
			}
		}
	}
	for (nParameter = 0, nParameters = (INT)szParameters.GetSize(); nParameter < nParameters; nParameter++)
	{
		szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_PARAMETERASSIGNMENT_STATEMENT), (LPCTSTR)szParameters.GetAt(nParameter), (LPCTSTR)szParameters.GetAt(nParameter), nSampleCount.GetAt(nParameter));
		szStatements += (!szStatements.IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + szCode) : szCode;
	}
	for (szStatements = (!szStatements.IsEmpty()) ? (szStatements + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE)) : EMPTYSTRING; (nPos[0] = szCompileCode.Find(STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_PARAMETERSPLACEHOLDER))) >= 0; )
	{
		szCompileCode = szCompileCode.Left(nPos[0]) + szStatements + szCompileCode.Mid(nPos[0] + lstrlen(STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_PARAMETERSPLACEHOLDER)));
		continue;
	}
	for (nThread = 0, nThreads = (INT)pDatabaseTCProcedure->GetSize(), szStatements.Empty(); nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(nThread)) != (CDatabaseTCProcedureThread *)NULL)
		{
			for (szHeader[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_THREAD_INITIALIZATIONHEADER), (LPCTSTR)TranslateToIdentifierName(pDatabaseTCProcedureThread->GetName())), szHeader[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_THREAD_EXECUTIONHEADER), (LPCTSTR)TranslateToIdentifierName(pDatabaseTCProcedureThread->GetName())); (nPos[0] = szCompileCode.Find(szHeader[1])) >= 0; )
			{
				for (nPos[1] = 0, nLine[0] = 0; nPos[1] <= nPos[0]; nPos[1] += lstrlen(CString(CR) + CString(EOL)))
				{
					if ((nPos[2] = szCompileCode.Mid(nPos[1]).Find(CString(CR) + CString(EOL))) >= 0)
					{
						nPos[1] += nPos[2];
						nLine[0]++;
					}
				}
				for (nPos[1] = 0, nLine[1] = 0; (nPos[2] = FindTelecommandProcedureLangaugeSourceCodeKeyword(szSourceCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_THREAD), nPos[1])) >= 0; nPos[1] += (nPos[3] < 0) ? nPos[2] : nPos[3])
				{
					for (nPos[2] += lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_THREAD)); nPos[1] + nPos[2] < szSourceCode.GetLength(); nPos[2]++)
					{
						if (!_istspace(szSourceCode.GetAt(nPos[1] + nPos[2]))) break;
						continue;
					}
					for (nPos[3] = (nPos[1] + nPos[2] < szSourceCode.GetLength() && szSourceCode.GetAt(nPos[1] + nPos[2]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER)) ? (nPos[2] + 1) : -1, szThread.Empty(); nPos[1] + nPos[3] < szSourceCode.GetLength() && nPos[3] >= 0; nPos[3]++)
					{
						if (szSourceCode.GetAt(nPos[1] + nPos[3]) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER))
						{
							szThread += szSourceCode.GetAt(nPos[1] + nPos[3]);
							continue;
						}
						nPos[3]++;
						break;
					}
					if (szThread == pDatabaseTCProcedureThread->GetName())
					{
						if ((nPos[3] = FindTelecommandProcedureLangaugeSourceCodeKeyword(szSourceCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_BEGIN), nPos[1] + (nPos[2] = nPos[3]))) >= 0)
						{
							for (nPos[2] += nPos[3]; nPos[1] + nPos[2] < szSourceCode.GetLength(); nPos[2]++)
							{
								if (!_istspace(szSourceCode.GetAt(nPos[1] + nPos[2]))) break;
								continue;
							}
							for (nPos[3] = 0; nPos[3] < nPos[1] + nPos[2]; nPos[3] += lstrlen(CString(CR) + CString(EOL)))
							{
								if ((nPos[4] = szSourceCode.Mid(nPos[3]).Find(CString(CR) + CString(EOL))) >= 0)
								{
									nPos[3] += nPos[4];
									nLine[1]++;
								}
							}
						}
						break;
					}
				}
				if (nLine[0] > 0 && nLine[1] > 0)
				{
					for (nPos[1] = nPos[0], nCount = 0; (nPos[2] = szCompileCode.Mid(nPos[1]).Find(CString(CR) + CString(EOL))) >= 0; nPos[1] += nPos[2] + lstrlen(CString(CR) + CString(EOL)))
					{
						if ((szLine = szCompileCode.Mid(nPos[1], nPos[2] + lstrlen(CString(CR) + CString(EOL)))).GetLength() >= 0)
						{
							if (szLine.Left(szHeader[0].GetLength()).Compare(szHeader[0].Left(szHeader[0].GetLength())) != 0)
							{
								while ((nPos[3] = szLine.Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS))) >= 0)
								{
									for (szLine = szLine.Left(nPos[3]) + CString(SPACE[0], lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS))) + szLine.Mid(nPos[3] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS))), nPos[3] -= lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS)); nPos[3] >= 0; nPos[3]--)
									{
										if (nPos[3] > 0 && szLine.Mid(nPos[3] - 1, lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINCOMMENTS))) == STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINCOMMENTS)) break;
										szLine.SetAt(nPos[3], SPACE[0]);
									}
									if (nPos[3] > 0)
									{
										szLine = szLine.Left(nPos[3] - 1) + CString(SPACE[0], lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINCOMMENTS))) + szLine.Mid(nPos[3] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINCOMMENTS)) - 1);
										continue;
									}
								}
								for (szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_LINENUMBERASSIGNMENT_STATEMENT), (LPCTSTR)pDatabaseTCProcedure->GetName(), nLine[0], (LPCTSTR)pDatabaseTCProcedure->GetName(), nLine[1]); nCount > 1; )
								{
									for (nPos[3] = (!CheckSourceCodeLine(szCompileCode, szLine.Left(szLine.GetLength() - lstrlen(CString(CR) + CString(EOL))), nPos[1])) ? szLine.GetLength() : 0; nPos[3] < szLine.GetLength(); nPos[3]++)
									{
										if ((!nPos[3] && _istalpha(szLine.GetAt(nPos[3]))) || (nPos[3] > 0 && _istalnum(szLine.GetAt(nPos[3])))) break;
										if (szLine.GetAt(nPos[3]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE)) break;
										if (szLine.GetAt(nPos[3]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR))
										{
											szCompileCode = szCompileCode.Left(nPos[1] + nPos[3]) + szCompileCode.Mid(nPos[1] + nPos[3] + 1);
											nPos[2]--;
											break;
										}
									}
									if (nPos[3] < szLine.GetLength())
									{
										szStatement.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_CHECKLINENUMBEREXECUTION_STATEMENT), nLine[0]);
										szCompileCode = szCompileCode.Left(nPos[1] + nPos[3]) + szStatement + SPACE + szCompileCode.Mid(nPos[1] + nPos[3]);
										nPos[2] += szStatement.GetLength() + 1;
									}
									szStatements += (!szStatements.IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + szCode) : szCode;
									break;
								}
								nLine[0]++;
								nLine[1]++;
								nCount++;
								continue;
							}
						}
						break;
					}
				}
				break;
			}
		}
	}
	for (szStatements = (!szStatements.IsEmpty()) ? (szStatements + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE)) : EMPTYSTRING; (nPos[0] = szCompileCode.Find(STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_LINNUMBERSPLACEHOLDER))) >= 0; )
	{
		szCompileCode = szCompileCode.Left(nPos[0]) + szStatements + szCompileCode.Mid(nPos[0] + lstrlen(STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_LINNUMBERSPLACEHOLDER)));
		break;
	}
	return TRUE;
}

BOOL CTCProcedureCompileThread::LoadSourceCodeTemplate(UINT nTemplateID, CString &szTemplate) CONST
{
	HRSRC  hResource;
	LPVOID  pTemplate;
	HGLOBAL  hTemplate;

	if ((hResource = FindResource((HMODULE)NULL, MAKEINTRESOURCE(nTemplateID), STRING(IDS_TELECOMMANDPROCEDUREFILE_RESOURCETYPE_TEMPLATE))))
	{
		if ((hTemplate = LoadResource((HMODULE)NULL, hResource)))
		{
			if ((pTemplate = LockResource(hTemplate)))
			{
#ifndef UNICODE
				CopyMemory(szTemplate.GetBufferSetLength(SizeofResource((HMODULE)NULL, hResource)), pTemplate, SizeofResource((HMODULE)NULL, hResource));
#else
				MultiByteToWideChar(CP_ACP, 0, (LPCSTR)pTemplate, SizeofResource((HMODULE)NULL, hResource), szTemplate.GetBufferSetLength(SizeofResource((HMODULE)NULL, hResource)), SizeofResource((HMODULE)NULL, hResource));
#endif
				szTemplate.ReleaseBuffer();
				return TRUE;
			}
		}
	}
	return FALSE;
}

CString CTCProcedureCompileThread::GetTelecommandProcedureFileName(CONST CBinaryDatabase *pDatabase, LPCTSTR pszFormat, BOOL bTemporary) CONST
{
	INT  nPos;
	INT  cbTitle;
	CString  szFileTitle;
	CString  szFileName[3];
	CFileFindEx  cFileFind;

	if (!GetFileTitle((szFileName[0] = pDatabase->GetFileName()), szFileTitle.GetBufferSetLength(cbTitle), (cbTitle = max(GetFileTitle((szFileName[0] = pDatabase->GetFileName()), (LPTSTR)NULL, 0), 0))))
	{
		for (nPos = szFileName[0].GetLength() - lstrlen(szFileTitle), szFileTitle.ReleaseBuffer(); nPos >= 0; nPos--)
		{
			if (!szFileName[0].Mid(nPos, lstrlen(szFileTitle)).CompareNoCase(szFileTitle)) break;
			continue;
		}
		if (nPos >= 0)
		{
			if (bTemporary)
			{
				szFileName[1].Format(STRING(IDS_TELECOMMANDPROCEDURECODE_TEMPORARY_FILENAME), (LPCTSTR)m_cDatabaseTCProcedure.GetName());
				szFileName[2] = szFileName[0].Left(nPos) + szFileName[1];
				return szFileName[2];
			}
			szFileName[1].Format(pszFormat, (LPCTSTR)m_cDatabaseTCProcedure.GetName());
			szFileName[2] = szFileName[0].Left(nPos) + szFileName[1];
			if (!lstrcmp(pszFormat, STRING(IDS_TELECOMMANDPROCEDURECODE_NORMAL_FILENAME)))
			{
				if (cFileFind.FindFile(szFileName[2]) && !cFileFind.FindNextFile())
				{
					szFileName[1].Format(STRING(IDS_TELECOMMANDPROCEDURECODE_UPDATE_FILENAME), (LPCTSTR)m_cDatabaseTCProcedure.GetName());
					szFileName[2] = szFileName[0].Left(nPos) + szFileName[1];
					cFileFind.Close();
				}
			}
		}
		return szFileName[2];
	}
	szFileTitle.ReleaseBuffer();
	return EMPTYSTRING;
}

BOOL CTCProcedureCompileThread::SecureTelecommandProcedureFile(LPCTSTR pszFileName) CONST
{
	CFileFindEx  cFileFind;
	CSecurityDescriptor  cSecurityDescriptor;

	if (cFileFind.FindFile(pszFileName) && !cFileFind.FindNextFile())
	{
		if (cSecurityDescriptor.SetRightsOfSystem(FILE_ALL_ACCESS) && cSecurityDescriptor.SetRightsOfNetworkService(FILE_ALL_ACCESS) && cSecurityDescriptor.SetRightsOfAdministrators(FILE_ALL_ACCESS) && (cSecurityDescriptor.SetRightsOfSystemOperators(FILE_GENERIC_READ | FILE_GENERIC_WRITE) || cSecurityDescriptor.SetRightsOfPowerUsers(FILE_GENERIC_READ | FILE_GENERIC_WRITE)) && cSecurityDescriptor.SetRightsOfAuthenticatedUsers(FILE_GENERIC_READ) && cSecurityDescriptor.SetRightsOfEveryone(FILE_GENERIC_READ) && CSecurity::SecureDirectory(cFileFind.GetRoot(), cSecurityDescriptor) && CSecurity::SecureFile(cFileFind.GetFilePath(), cSecurityDescriptor))
		{
			cFileFind.Close();
			return TRUE;
		}
		cFileFind.Close();
	}
	return FALSE;
}

CString CTCProcedureCompileThread::GetTelecommandProcedureCompilerFileName() CONST
{
	INT  nDrive;
	INT  nDrives;
	CString  szPlatForm;
	CString  szFileName[2];
	CString  szDirectory[2];
	CString  szOptions[3];
	CProfile  cProfile;
	CStringArray  szDrives;
	CLogicalDrives  cDrives;
	CCompileOptionsDialog  cCompileOptionsDialog;

	if (!cProfile.GetCompileOptions(szFileName[0], szFileName[1], szPlatForm, szDirectory[0], szDirectory[1], szOptions[0], szOptions[1], szOptions[2]))
	{
		for (nDrive = 0, nDrives = cDrives.EnumDrives(szDrives); nDrive < nDrives; nDrive = nDrive + 1)
		{
			if (GetDriveType(szDrives.GetAt(nDrive)) == DRIVE_FIXED || GetDriveType(szDrives.GetAt(nDrive)) == DRIVE_REMOTE)
			{
				if ((szFileName[0] = GetTelecommandProcedureCompilerFileName(szDrives.GetAt(nDrive))).GetLength() > 0) break;
				continue;
			}
		}
		return((cCompileOptionsDialog.DoModal(szFileName[0]) == IDOK) ? (LPCTSTR)szFileName[0] : EMPTYSTRING);
	}
	return szFileName[0];
}
CString CTCProcedureCompileThread::GetTelecommandProcedureCompilerFileName(LPCTSTR pszDirectory) CONST
{
	CString  szFileName;
	CFileFindEx  cFileFind[2];

	if (cFileFind[0].FindFile(CString(pszDirectory) + STRING(IDS_FILENAME_ALL)))
	{
		while (cFileFind[0].FindNextFile())
		{
			if (cFileFind[0].IsDirectory() && !cFileFind[0].IsDots())
			{
				if ((szFileName = GetTelecommandProcedureCompilerFileName(cFileFind[0].GetFilePath())).GetLength() > 0) break;
				continue;
			}
			if (!cFileFind[0].GetFileName().CompareNoCase(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILER_FILENAME)))
			{
				if (cFileFind[1].FindFile(cFileFind[0].GetRoot() + STRINGCHAR(IDS_FILENAME_ALL) + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_LINKER_FILENAME)))
				{
					szFileName = cFileFind[0].GetFilePath();
					cFileFind[1].Close();
					break;
				}
			}
		}
		cFileFind[0].Close();
	}
	return szFileName;
}

CString CTCProcedureCompileThread::GetTelecommandProcedureCompileOptions(CONST CBinaryDatabase *pDatabase) CONST
{
	INT  nPos[2];
	CString  szPlatForm;
	CString  szOptions[5];
	CString  szFileName[2];
	CString  szDirectory[2];
	CString  szIncludeDirectories;
	CProfile  cProfile;

	for (szOptions[0] = (!cProfile.GetCompileOptions(szFileName[0], szFileName[1], szPlatForm, szDirectory[0], szDirectory[1], szOptions[0], szOptions[1], szOptions[2])) ? (CString(STRING(IDS_COMPILER_OPTION_OPTIMIZATION_DEFAULT)) + CString(SPACE) + CString(STRING(IDS_COMPILER_OPTION_WARNING3))) : szOptions[0], nPos[0] = 0; nPos[0] + (nPos[1] = (INT)_tcscspn(szDirectory[0].Mid(nPos[0]), STRING(IDS_COMPILER_OPTION_PATH_SEPARATORS))) < szDirectory[0].GetLength() || nPos[0] < szDirectory[0].GetLength(); nPos[0] += nPos[1] + 1)
	{
		for (szOptions[3].Format(STRING(IDS_COMPILER_OPTION_INCLUDEDIRECTORY), (LPCTSTR)szDirectory[0].Mid(nPos[0], nPos[1])); !szIncludeDirectories.IsEmpty(); )
		{
			szIncludeDirectories += SPACE;
			break;
		}
		szIncludeDirectories += szOptions[3];
	}
	szOptions[3] = (!szIncludeDirectories.IsEmpty()) ? (szOptions[0] + SPACE + szIncludeDirectories) : szOptions[0];
	szOptions[4].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILER_OPTIONS), (LPCTSTR)szOptions[3], (LPCTSTR)GetTelecommandProcedureFileName(pDatabase, STRING(IDS_TELECOMMANDPROCEDUREFILE_OBJECTNAME)), (LPCTSTR)GetTelecommandProcedureFileName(pDatabase, STRING(IDS_TELECOMMANDPROCEDUREFILE_COMPILENAME)));
	return szOptions[4];
}

CString CTCProcedureCompileThread::GetTelecommandProcedureLinkerFileName() CONST
{
	CString  szPlatForm;
	CString  szFileName[2];
	CString  szDirectory[2];
	CString  szOptions[3];
	CProfile  cProfile;

	return((cProfile.GetCompileOptions(szFileName[0], szFileName[1], szPlatForm, szDirectory[0], szDirectory[1], szOptions[0], szOptions[1], szOptions[2])) ? (LPCTSTR)szFileName[1] : EMPTYSTRING);
}

CString CTCProcedureCompileThread::GetTelecommandProcedureLinkOptions(CONST CBinaryDatabase *pDatabase) CONST
{
	INT  nPos[2];
	CString  szPlatForm;
	CString  szOptions[4];
	CString  szFileName[3];
	CString  szDirectory[2];
	CString  szLibraryFiles;
	CLogicalDrives  cDrives;
	CVersionInfo  cVersionInfo;
	CFileFindEx  cFileFind;
	CProfile  cProfile;

	if (cProfile.GetCompileOptions(szFileName[0], szFileName[1], szPlatForm, szDirectory[0], szDirectory[1], szOptions[0], szOptions[1], szOptions[2]))
	{
		for (nPos[0] = 0; nPos[0] + (nPos[1] = (INT)_tcscspn(szDirectory[1].Mid(nPos[0]), STRING(IDS_COMPILER_OPTION_PATH_SEPARATORS))) < szDirectory[1].GetLength() || nPos[0] < szDirectory[1].GetLength() || szDirectory[1].IsEmpty(); nPos[0] += nPos[1] + 1)
		{
			if (cFileFind.FindFile(szDirectory[1].Mid(nPos[0], nPos[1])))
			{
				for (cFileFind.FindNextFile(); !cFileFind.IsDirectory(); )
				{
					szFileName[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_LIBRARYNAME), (LPCTSTR)szDirectory[1].Mid(nPos[0], nPos[1]));
					break;
				}
				for (; cFileFind.IsDirectory(); )
				{
					szFileName[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_DEFAULTLIBRARYNAME), (LPCTSTR)(cFileFind.GetFilePath() + cDrives.GetPathDelimiter() + cVersionInfo.QueryInternalName()));
					break;
				}
				szLibraryFiles += (!szLibraryFiles.IsEmpty()) ? (SPACE + szFileName[2]) : szFileName[2];
				cFileFind.Close();
				continue;
			}
			if (szDirectory[1].IsEmpty())
			{
				szLibraryFiles.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_DEFAULTLIBRARYNAME), (LPCTSTR)cVersionInfo.QueryInternalName());
				break;
			}
		}
		szOptions[3].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_LINKER_OPTIONS), (LPCTSTR)szPlatForm, (LPCTSTR)GetTelecommandProcedureFileName(pDatabase, STRING(IDS_TELECOMMANDPROCEDURECODE_NORMAL_FILENAME), IsSyntaxCompileTarget()), (LPCTSTR)szLibraryFiles, (LPCTSTR)GetTelecommandProcedureFileName(pDatabase, STRING(IDS_TELECOMMANDPROCEDUREFILE_OBJECTNAME)));
		return szOptions[3];
	}
	return EMPTYSTRING;
}

INT CTCProcedureCompileThread::EnumThreads(CDatabaseTCProcedure *pDatabaseTCProcedure, LPCTSTR pszSourceCode) CONST
{
	INT  nPos[3];
	INT  nThread[2];
	INT  nThreads[2];
	CString  szThread;
	CString  szSourceCode;
	CStringArray  szThreads;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if (pDatabaseTCProcedure->GetAttributes() & (TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE | TCPROCEDURE_SOURCECODE_CUSTOM))
	{
		for (nPos[0] = 0, szSourceCode = pszSourceCode; (nPos[1] = FindTelecommandProcedureLangaugeSourceCodeKeyword(szSourceCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_THREAD), nPos[0])) >= 0; nPos[0] += (nPos[2] < 0) ? nPos[1] : nPos[2])
		{
			for (nPos[1] += lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_THREAD)); nPos[0] + nPos[1] < szSourceCode.GetLength(); nPos[1]++)
			{
				if (!_istspace(szSourceCode.GetAt(nPos[0] + nPos[1]))) break;
				continue;
			}
			for (nPos[2] = (nPos[0] + nPos[1] < szSourceCode.GetLength() && szSourceCode.GetAt(nPos[0] + nPos[1]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER)) ? (nPos[1] + 1) : -1, szThread.Empty(); nPos[0] + nPos[2] < szSourceCode.GetLength() && nPos[2] >= 0; nPos[2]++)
			{
				if (szSourceCode.GetAt(nPos[0] + nPos[2]) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER))
				{
					szThread += szSourceCode.GetAt(nPos[0] + nPos[2]);
					continue;
				}
				break;
			}
			if (!szThread.IsEmpty())
			{
				szThreads.Add(szThread);
				continue;
			}
		}
		for (nThread[0] = 0, nThreads[0] = (INT)szThreads.GetSize(); nThread[0] < nThreads[0]; nThread[0]++)
		{
			if ((pDatabaseTCProcedureThread = (pDatabaseTCProcedure->Find(szThreads.GetAt(nThread[0])) < 0) ? new CDatabaseTCProcedureThread : (CDatabaseTCProcedureThread *)NULL))
			{
				for (pDatabaseTCProcedureThread->SetName(szThreads.GetAt(nThread[0])), pDatabaseTCProcedureThread->SetAttributes(TCPROCEDURETHREAD_AUTHORITY_AUTOENABLED), pDatabaseTCProcedureThread->SetState(TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING | TCPROCEDURETHREAD_AUTHORITY_ENABLED); pDatabaseTCProcedure->Add(pDatabaseTCProcedureThread) < 0; )
				{
					delete pDatabaseTCProcedureThread;
					break;
				}
			}
		}
		for (nThread[0] = 0, nThreads[0] = (INT)pDatabaseTCProcedure->GetSize(); nThread[0] < nThreads[0]; nThread[0]++)
		{
			if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(nThread[0])) != (CDatabaseTCProcedureThread *)NULL)
			{
				for (nThread[1] = 0, nThreads[1] = (INT)szThreads.GetSize(); nThread[1] < nThreads[1]; nThread[1]++)
				{
					if (pDatabaseTCProcedureThread->GetName() == szThreads.GetAt(nThread[1])) break;
					continue;
				}
				if (nThread[1] == nThreads[1])
				{
					pDatabaseTCProcedure->RemoveAt(nThread[0]);
					delete pDatabaseTCProcedureThread;
					nThreads[0]--;
					nThread[0]--;
				}
			}
		}
	}
	return((INT)pDatabaseTCProcedure->GetSize());
}

INT CTCProcedureCompileThread::EnumExpressionParameters(CONST CBinaryDatabase *pDatabase, LPCTSTR pszSourceCode, CStringArray &szTMParameters, CStringArray &szTCParameters) CONST
{
	INT  nItem;
	INT  nItems;
	INT  nPos[2];
	TCHAR  szChar;
	CString  szParameter;
	CString  szSourceCode;

	for (nPos[0] = 0, szSourceCode = pszSourceCode, szTMParameters.RemoveAll(), szTCParameters.RemoveAll(); nPos[0] >= 0; nPos[0] = (nPos[1] >= 0) ? nPos[1] : -1)
	{
		if ((nPos[1] = FindTelecommandProcedureLangaugeSourceCodeKeyword(szSourceCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_PARAMETERS), nPos[0])) != FindTelecommandProcedureLangaugeSourceCodeKeyword(szSourceCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_TCPARAMETERS), nPos[0]) + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_TCPARAMETERS)) - lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_PARAMETERS)) && nPos[1] >= 0)
		{
			for (nPos[1] += nPos[0] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_PARAMETERS)); nPos[1] < szSourceCode.GetLength(); )
			{
				while (nPos[1] < szSourceCode.GetLength() && _istspace(szSourceCode.GetAt(nPos[1])))
				{
					nPos[1]++;
					continue;
				}
				if (szSourceCode.GetAt(nPos[1]) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR))
				{
					for (szParameter.Empty(); nPos[1] < szSourceCode.GetLength() && (szChar = szSourceCode.GetAt(nPos[1])) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR) && szChar != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR) && !_istspace(szChar) && szChar != CR && szChar != EOL; nPos[1]++)
					{
						szParameter += szChar;
						continue;
					}
					if (pDatabase->GetTMParameters()->Find(szParameter) >= 0)
					{
						for (nItem = 0, nItems = (INT)szTMParameters.GetSize(); nItem < nItems; nItem++)
						{
							if (szTMParameters.GetAt(nItem) == szParameter) break;
							continue;
						}
						for (; nItem == nItems; )
						{
							szTMParameters.Add(szParameter);
							break;
						}
					}
					while (nPos[1] < szSourceCode.GetLength() && ((szChar = szSourceCode.GetAt(nPos[1])) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR) || _istspace(szChar) || szChar == CR || szChar == EOL))
					{
						nPos[1]++;
						continue;
					}
					continue;
				}
				break;
			}
			continue;
		}
		if ((nPos[1] = FindTelecommandProcedureLangaugeSourceCodeKeyword(szSourceCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_TCPARAMETERS), nPos[0])) >= 0)
		{
			for (nPos[1] += nPos[0] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_TCPARAMETERS)); nPos[1] < szSourceCode.GetLength(); )
			{
				while (nPos[1] < szSourceCode.GetLength() && _istspace(szSourceCode.GetAt(nPos[1])))
				{
					nPos[1]++;
					continue;
				}
				if (szSourceCode.GetAt(nPos[1]) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR))
				{
					for (szParameter.Empty(); nPos[1] < szSourceCode.GetLength() && (szChar = szSourceCode.GetAt(nPos[1])) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR) && szChar != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR) && !_istspace(szChar) && szChar != CR && szChar != EOL; nPos[1]++)
					{
						szParameter += szChar;
						continue;
					}
					if (pDatabase->GetTCParameters()->Find(szParameter) >= 0)
					{
						for (nItem = 0, nItems = (INT)szTCParameters.GetSize(); nItem < nItems; nItem++)
						{
							if (szTCParameters.GetAt(nItem) == szParameter) break;
							continue;
						}
						for (; nItem == nItems; )
						{
							szTCParameters.Add(szParameter);
							break;
						}
					}
					while (nPos[1] < szSourceCode.GetLength() && ((szChar = szSourceCode.GetAt(nPos[1])) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR) || _istspace(szChar) || szChar == CR || szChar == EOL))
					{
						nPos[1]++;
						continue;
					}
					continue;
				}
				break;
			}
			continue;
		}
		break;
	}
	return((INT)(szTMParameters.GetSize() + szTCParameters.GetSize()));
}

INT CTCProcedureCompileThread::ExtractExpressionParameters(CONST CBinaryDatabase *pDatabase, LPCTSTR pszExpression, CStringArray &szTMParameters, CStringArray &szTCParameters) CONST
{
	INT  nPos[2];
	INT  nKeyword;
	INT  nKeywords;
	TCHAR  szChar;
	LPCTSTR  pszKeyword;
	CString  szParameter;

	for (nKeyword = MINTELECOMMANDPROCEDURELANGUAGEPARAMETERPROCEDURE, nKeywords = MAXTELECOMMANDPROCEDURELANGUAGEPARAMETERPROCEDURE, szTMParameters.RemoveAll(), szTCParameters.RemoveAll(); nKeyword <= nKeywords; nKeyword++)
	{
		for (nPos[0] = 0; (pszKeyword = _tcsstr(&pszExpression[nPos[0]], STRING(nKeyword))) != (LPCTSTR)NULL; )
		{
			for (nPos[1] = lstrlen(STRING(nKeyword)), szParameter.Empty(); lstrlen(&pszKeyword[nPos[1]]) > 0; nPos[1]++)
			{
				if ((szChar = pszKeyword[nPos[1]]) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR) && szChar != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDARGUMENTS) && szChar != SPACE[0] && szChar != TAB)
				{
					if (GetDatabase()->CheckTCParameterTag(szParameter + szChar))
					{
						szParameter += szChar;
						continue;
					}
					break;
				}
				if (GetDatabase()->CheckTCParameterTag(szParameter + szChar) && (szChar == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR) || szChar == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDARGUMENTS)) && pDatabase->GetTCParameters()->Find(szParameter) < 0)
				{
					szParameter += szChar;
					continue;
				}
				if (!szParameter.IsEmpty()) break;
			}
			if (pDatabase->GetTCParameters()->Find(szParameter) >= 0)
			{
				nPos[0] = (INT)((pszKeyword - pszExpression) + lstrlen(STRING(nKeyword)));
				szTCParameters.Add(szParameter);
				continue;
			}
			for (nPos[1] = lstrlen(STRING(nKeyword)), szParameter.Empty(); lstrlen(&pszKeyword[nPos[1]]) > 0; nPos[1]++)
			{
				if ((szChar = pszKeyword[nPos[1]]) != SPACE[0] && szChar != TAB)
				{
					if (GetDatabase()->CheckTMParameterTag(szParameter + szChar))
					{
						szParameter += szChar;
						continue;
					}
					break;
				}
				if (!szParameter.IsEmpty()) break;
			}
			if (pDatabase->GetTMParameters()->Find(szParameter) >= 0)
			{
				nPos[0] = (INT)((pszKeyword - pszExpression) + lstrlen(STRING(nKeyword)));
				szTMParameters.Add(szParameter);
				continue;
			}
			nPos[0] += lstrlen(STRING(nKeyword));
		}
	}
	return((INT)(szTMParameters.GetSize() + szTCParameters.GetSize()));
}

INT CTCProcedureCompileThread::CollectArguments(CONST CDatabaseTCProcedure *pDatabaseTCProcedure, LPCTSTR pszSourceCode, CDatabaseTCProcedureArguments &pDatabaseTCProcedureArguments, CStringArray &szArguments) CONST
{
	INT  nPos;
	INT  nLength;
	INT  nBitWidth;
	BOOL  bDataType;
	CString  szError;
	CString  szDataType;
	CString  szSourceCode;
	CString  szIdentifier;
	ULONGLONG  nAttributes;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	if (pDatabaseTCProcedure->GetAttributes() & (TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE | TCPROCEDURE_SOURCECODE_CUSTOM))
	{
		for (szSourceCode = pszSourceCode, pDatabaseTCProcedure->GetArguments(pDatabaseTCProcedureArguments), szArguments.RemoveAll(); (nPos = FindTelecommandProcedureLangaugeSourceCodeKeyword(szSourceCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_PROCEDURE), 0)) >= 0; )
		{
			for (nPos += lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_PROCEDURE)), nLength = szSourceCode.GetLength(); nPos < nLength; nPos++)
			{
				if (!_istspace(szSourceCode.GetAt(nPos))) break;
				continue;
			}
			for (nPos = (nPos < nLength && szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER)) ? (nPos + 1) : -1; nPos < nLength && nPos >= 0; nPos++)
			{
				if (szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER)) break;
				continue;
			}
			for (nPos = (nPos < nLength && nPos >= 0) ? (nPos + 1) : -1; nPos < nLength; nPos++)
			{
				if (!_istspace(szSourceCode.GetAt(nPos))) break;
				continue;
			}
			for (nPos = (nPos < nLength && nPos >= 0 && szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINARGUMENTS)) ? (nPos + 1) : -1; nPos < nLength && nPos >= 0; nPos++)
			{
				if (!_istspace(szSourceCode.GetAt(nPos)))
				{
					for (nAttributes = 0, nBitWidth = 0; ; )
					{
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_UINT)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_UNSIGNEDINTEGER)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_DWORD)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(UINT);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_USHORT)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_USHORTINTEGER)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_WORD)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(USHORT);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_INT)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_INTEGER)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(INT);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_SHORT)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_SHORTINTEGER)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(SHORT);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_FLOAT)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_FLOATINGPOINT)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(FLOAT);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_DOUBLE)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_DOUBLEFLOATINGPOINT)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(DOUBLE);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_TIMETAG)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_TIME | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(TIMETAG);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_BYTE)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_UCHAR)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_UNSIGNEDCHARACTER)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(BYTE);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_CHAR)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_CHARACTER)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(CHAR);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_TCHAR)) + SPACE, szDataType.GetLength() + 1))
						{
							for (nPos += szDataType.GetLength(); nPos < nLength; nPos++)
							{
								if (!_istspace(szSourceCode.GetAt(nPos))) break;
								continue;
							}
							if (nPos < nLength  &&  szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERMODIFIER_POINTER))
							{
								nAttributes = TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED;
								nBitWidth = 8 * sizeof(LPCTSTR);
								nPos++;
								break;
							}
							if (nPos < nLength)
							{
								nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_RADIX_BINARY | TCPARAMETER_CALIBRATION_NONE;
								nBitWidth = 8 * sizeof(TCHAR);
								break;
							}
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_LPCTSTR)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(LPCTSTR);
						}
						break;
					}
					if (nBitWidth > 0)
					{
						for (; nPos < nLength; nPos++)
						{
							if (!_istspace(szSourceCode.GetAt(nPos))) break;
							continue;
						}
						for (szIdentifier.Empty(), bDataType = TRUE; nPos < nLength; nPos++)
						{
							if ((_istalnum(szSourceCode.GetAt(nPos)) && (!szIdentifier.IsEmpty() || !_istdigit(szSourceCode.GetAt(nPos)))) || szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE))
							{
								szIdentifier += szSourceCode.GetAt(nPos);
								continue;
							}
							if (!szIdentifier.IsEmpty()) break;
							bDataType = FALSE;
						}
						for (; nPos < nLength; nPos++)
						{
							if (!_istspace(szSourceCode.GetAt(nPos)))
							{
								bDataType = (szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR) || szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDARGUMENTS)) ? bDataType : FALSE;
								break;
							}
						}
						if (bDataType  &&  !szIdentifier.IsEmpty())
						{
							if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments.GetAt(pDatabaseTCProcedureArguments.Find(szIdentifier))))
							{
								pDatabaseTCProcedureArgument->SetAttributes((nAttributes & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
								pDatabaseTCProcedureArgument->SetWidth(nBitWidth);
							}
							else if ((pDatabaseTCProcedureArgument = new CDatabaseTCProcedureArgument))
							{
								pDatabaseTCProcedureArgument->SetTag(szIdentifier);
								pDatabaseTCProcedureArgument->SetAttributes(nAttributes);
								pDatabaseTCProcedureArgument->SetWidth(nBitWidth);
								if (pDatabaseTCProcedureArguments.Add(pDatabaseTCProcedureArgument) < 0) delete pDatabaseTCProcedureArgument;
							}
						}
						for (; !bDataType && !szIdentifier.IsEmpty(); )
						{
							szArguments.Add(szIdentifier);
							break;
						}
					}
					for (; nPos < nLength; nPos++)
					{
						if (!_istspace(szSourceCode.GetAt(nPos))) break;
						continue;
					}
					if (nPos < nLength  &&  szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR)) continue;
					break;
				}
			}
			break;
		}
		return((INT)pDatabaseTCProcedureArguments.GetSize());
	}
	return pDatabaseTCProcedure->GetArguments(pDatabaseTCProcedureArguments);
}

INT CTCProcedureCompileThread::CollectVariables(CONST CDatabaseTCProcedure *pDatabaseTCProcedure, LPCTSTR pszSourceCode, CDatabaseTCProcedureVariables &pDatabaseTCProcedureVariables, CStringArray &szVariables) CONST
{
	INT  nPos;
	INT  nLength;
	INT  nBitWidth;
	BOOL  bDataType;
	CString  szError;
	CString  szDataType;
	CString  szSourceCode;
	CString  szIdentifier;
	ULONGLONG  nAttributes;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;

	if (pDatabaseTCProcedure->GetAttributes() & (TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE | TCPROCEDURE_SOURCECODE_CUSTOM))
	{
		for (szSourceCode = pszSourceCode, pDatabaseTCProcedure->GetVariables(pDatabaseTCProcedureVariables), szVariables.RemoveAll(); (nPos = FindTelecommandProcedureLangaugeSourceCodeKeyword(szSourceCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_PROCEDURE), 0)) >= 0; )
		{
			for (nPos += lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_PROCEDURE)), nLength = szSourceCode.GetLength(); nPos < nLength; nPos++)
			{
				if (!_istspace(szSourceCode.GetAt(nPos))) break;
				continue;
			}
			for (nPos = (nPos < nLength && szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER)) ? (nPos + 1) : -1; nPos < nLength && nPos >= 0; nPos++)
			{
				if (szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER)) break;
				continue;
			}
			for (nPos = (nPos < nLength && nPos >= 0) ? (nPos + 1) : -1; nPos < nLength; nPos++)
			{
				if (!_istspace(szSourceCode.GetAt(nPos))) break;
				continue;
			}
			if (nPos < nLength  &&  nPos >= 0 && szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINARGUMENTS))
			{
				for (nPos++; nPos < nLength && nPos >= 0 && szSourceCode.GetAt(nPos) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDARGUMENTS); )
				{
					nPos = nPos + 1;
					continue;
				}
				nPos = (nPos < nLength  &&  szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDARGUMENTS)) ? nPos : -1;
			}
			for (nPos = (nPos < nLength && nPos >= 0) ? (nPos + 1) : -1; nPos < nLength && nPos >= 0; nPos++)
			{
				if (!_istspace(szSourceCode.GetAt(nPos)))
				{
					for (nAttributes = 0, nBitWidth = 0; ; )
					{
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_UINT)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_UNSIGNEDINTEGER)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_DWORD)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(UINT);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_USHORT)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_USHORTINTEGER)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_WORD)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(USHORT);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_INT)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_INTEGER)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(INT);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_SHORT)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_SHORTINTEGER)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(SHORT);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_FLOAT)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_FLOATINGPOINT)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(FLOAT);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_DOUBLE)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_DOUBLEFLOATINGPOINT)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(DOUBLE);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_TIMETAG)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_TIME | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(TIMETAG);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_BYTE)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_UCHAR)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_UNSIGNEDCHARACTER)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(BYTE);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_CHAR)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_CHARACTER)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_CALIBRATION_NONE;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(CHAR);
							break;
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_TCHAR)) + SPACE, szDataType.GetLength() + 1))
						{
							for (nPos += szDataType.GetLength(); nPos < nLength; nPos++)
							{
								if (!_istspace(szSourceCode.GetAt(nPos))) break;
								continue;
							}
							if (nPos < nLength  &&  szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERMODIFIER_POINTER))
							{
								nAttributes = TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED;
								nBitWidth = 8 * sizeof(LPCTSTR);
								nPos++;
								break;
							}
							if (nPos < nLength)
							{
								nAttributes = TCPARAMETER_VTYPE_RAW | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_RADIX_BINARY | TCPARAMETER_CALIBRATION_NONE;
								nBitWidth = 8 * sizeof(TCHAR);
								break;
							}
						}
						if (!_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_LPCTSTR)) + SPACE, szDataType.GetLength() + 1) || !_tcsncmp(szSourceCode.Mid(nPos), (szDataType = STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERCLASSTYPE_STRING)) + SPACE, szDataType.GetLength() + 1))
						{
							nAttributes = TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_TYPE_CONSTANT | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED;
							nPos += szDataType.GetLength();
							nBitWidth = 8 * sizeof(LPCTSTR);
						}
						break;
					}
					if (nBitWidth > 0)
					{
						for (; nPos < nLength; nPos++)
						{
							if (!_istspace(szSourceCode.GetAt(nPos))) break;
							continue;
						}
						for (szIdentifier.Empty(), bDataType = TRUE; nPos < nLength; nPos++)
						{
							if ((_istalnum(szSourceCode.GetAt(nPos)) && (!szIdentifier.IsEmpty() || !_istdigit(szSourceCode.GetAt(nPos)))) || szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE))
							{
								szIdentifier += szSourceCode.GetAt(nPos);
								continue;
							}
							if (!szIdentifier.IsEmpty()) break;
							bDataType = FALSE;
						}
						for (; nPos < nLength; nPos++)
						{
							if (!_istspace(szSourceCode.GetAt(nPos)))
							{
								bDataType = (szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR)) ? bDataType : FALSE;
								break;
							}
						}
						if (bDataType  &&  !szIdentifier.IsEmpty())
						{
							if ((pDatabaseTCProcedureVariable = pDatabaseTCProcedureVariables.GetAt(pDatabaseTCProcedureVariables.Find(szIdentifier))))
							{
								pDatabaseTCProcedureVariable->SetAttributes((nAttributes & ~(TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)) | (pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CALIBRATION_NONE | TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS | TCPARAMETER_CALIBRATION_ENABLED | TCPARAMETER_CALIBRATION_DISABLED | TCPARAMETER_VTYPE_RAW | TCPARAMETER_VTYPE_CALIBRATED | TCPARAMETER_RADIX_BINARY | TCPARAMETER_RADIX_OCTAL | TCPARAMETER_RADIX_DECIMAL | TCPARAMETER_RADIX_HEXADECIMAL)));
								pDatabaseTCProcedureVariable->SetWidth(nBitWidth);
							}
							else if ((pDatabaseTCProcedureVariable = new CDatabaseTCProcedureVariable))
							{
								pDatabaseTCProcedureVariable->SetTag(szIdentifier);
								pDatabaseTCProcedureVariable->SetAttributes(nAttributes);
								pDatabaseTCProcedureVariable->SetWidth(nBitWidth);
								if (pDatabaseTCProcedureVariables.Add(pDatabaseTCProcedureVariable) < 0) delete pDatabaseTCProcedureVariable;
							}
						}
						for (; !bDataType && !szIdentifier.IsEmpty(); )
						{
							szVariables.Add(szIdentifier);
							break;
						}
					}
					for (; nPos < nLength; nPos++)
					{
						if (!_istspace(szSourceCode.GetAt(nPos))) break;
						continue;
					}
					if (nPos < nLength  &&  szSourceCode.GetAt(nPos) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR)) continue;
					break;
				}
			}
			break;
		}
		return((INT)pDatabaseTCProcedureVariables.GetSize());
	}
	return pDatabaseTCProcedure->GetVariables(pDatabaseTCProcedureVariables);
}

INT CTCProcedureCompileThread::CollectExpressionParameters(CONST CStringArray &szNewParameters, CStringArray &szParameters) CONST
{
	INT  nParameter[2];
	INT  nParameters[2];

	for (nParameter[0] = 0, nParameters[0] = (INT)szNewParameters.GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
	{
		for (nParameter[1] = 0, nParameters[1] = (INT)szParameters.GetSize(); nParameter[1] < nParameters[1]; nParameter[1]++)
		{
			if (szNewParameters.GetAt(nParameter[0]) == szParameters.GetAt(nParameter[1])) break;
			continue;
		}
		if (nParameter[1] == nParameters[1])
		{
			szParameters.Add(szNewParameters.GetAt(nParameter[0]));
			continue;
		}
	}
	return((INT)szParameters.GetSize());
}

CString CTCProcedureCompileThread::EnumArgumentIdentifiers(CONST CDatabaseTCProcedureArguments &pDatabaseTCProcedureArguments) CONST
{
	INT  nArgument;
	INT  nArguments;
	CString  szCode;
	CString  szStatements;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	for (nArgument = 0, nArguments = (INT)pDatabaseTCProcedureArguments.GetSize(); nArgument < nArguments; nArgument++)
	{
		if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments.GetAt(nArgument)))
		{
			szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_DECLARATION_ARGUMENTS), (LPCTSTR)TranslateIdentifierDataType(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetWidth(), FALSE), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag());
			szStatements += szCode + CString(CR) + CString(EOL);
		}
	}
	return((!szStatements.IsEmpty()) ? (szStatements + CString(CR) + CString(EOL)) : EMPTYSTRING);
}

CString CTCProcedureCompileThread::EnumVariableIdentifiers(CONST CDatabaseTCProcedureVariables &pDatabaseTCProcedureVariables) CONST
{
	INT  nVariable;
	INT  nVariables;
	CString  szCode;
	CString  szStatements;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;

	for (nVariable = 0, nVariables = (INT)pDatabaseTCProcedureVariables.GetSize(); nVariable < nVariables; nVariable++)
	{
		if ((pDatabaseTCProcedureVariable = pDatabaseTCProcedureVariables.GetAt(nVariable)))
		{
			szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_DECLARATION_VARIABLES), (LPCTSTR)TranslateIdentifierDataType(pDatabaseTCProcedureVariable->GetAttributes(), pDatabaseTCProcedureVariable->GetWidth(), FALSE), (LPCTSTR)pDatabaseTCProcedureVariable->GetTag());
			szStatements += szCode + CString(CR) + CString(EOL);
		}
	}
	return((!szStatements.IsEmpty()) ? (szStatements + CString(CR) + CString(EOL)) : EMPTYSTRING);
}

CString CTCProcedureCompileThread::EnumParameterIdentifiers(CONST CStringArray &szParameters) CONST
{
	INT  nParameter;
	INT  nParameters;
	CString  szCode;
	CString  szStatements;

	for (nParameter = 0, nParameters = (INT)szParameters.GetSize(); nParameter < nParameters; nParameter++)
	{
		szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_PARAMETERENUMERATION_STATEMENT), (LPCTSTR)szParameters.GetAt(nParameter));
		szStatements += CString(CR) + CString(EOL) + szCode;
	}
	return szStatements;
}

CString CTCProcedureCompileThread::EnumArgumentAssignments(CONST CDatabaseTCProcedureArguments &pDatabaseTCProcedureArguments, BOOL bFormal) CONST
{
	INT  nArgument;
	INT  nArguments;
	CString  szCode;
	CString  szValue[7];
	CString  szAssignment;
	CString  szStatements;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;

	for (nArgument = 0, nArguments = (bFormal) ? (INT)pDatabaseTCProcedureArguments.GetSize() : 0; nArgument < nArguments; nArgument++)
	{
		if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments.GetAt(nArgument)))
		{
			for (szValue[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_BINARY), (LPCTSTR)pDatabaseTCProcedureArgument->GetConstValueAsText()), szValue[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_OCTAL), (LPCTSTR)pDatabaseTCProcedureArgument->GetConstValueAsText()), szValue[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_HEXADECIMAL), (LPCTSTR)pDatabaseTCProcedureArgument->GetConstValueAsText()), szValue[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_DATETIME), (LPCTSTR)pDatabaseTCProcedureArgument->GetConstValueAsText()), szValue[4].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_STRING), (LPCTSTR)pDatabaseTCProcedureArgument->GetConstValueAsText()), szValue[5] = (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CALIBRATION_STATUS)) ? (((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CALIBRATION_STATUS)) == 0) ? (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) != TCPARAMETER_CODING_TIME) ? (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) != TCPARAMETER_RADIX_HEXADECIMAL) ? (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_OCTAL) != TCPARAMETER_RADIX_OCTAL) ? (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_BINARY) != TCPARAMETER_RADIX_BINARY) ? pDatabaseTCProcedureArgument->GetConstValueAsText() : szValue[0]) : szValue[1]) : szValue[2]) : szValue[3]) : szValue[4]) : EMPTYSTRING, szAssignment.Empty(); !pDatabaseTCProcedureArgument->GetConstValueAsText().IsEmpty(); )
			{
				szAssignment.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_ASSIGNMENT), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag(), (LPCTSTR)szValue[5]);
				szAssignment = CString(SPACE) + CString(SPACE) + szAssignment + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE);
				break;
			}
			szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTASSIGNMENT_STATEMENT), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag(), (LPCTSTR)TranslateIdentifierDataType(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetWidth()), (LPCTSTR)szAssignment);
			szStatements += (!szStatements.IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + szCode) : szCode;
		}
	}
	for (nArgument = 0, nArguments = (!bFormal) ? (INT)pDatabaseTCProcedureArguments.GetSize() : 0; nArgument < nArguments; nArgument++)
	{
		if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments.GetAt(nArgument)))
		{
			for (szValue[0] = (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CALIBRATION_STATUS)) ? (((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CALIBRATION_STATUS)) == 0) ? (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) == 0) ? (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) != TCPARAMETER_RADIX_HEXADECIMAL) ? (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_OCTAL) != TCPARAMETER_RADIX_OCTAL) ? (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_BINARY) != TCPARAMETER_RADIX_BINARY) ? (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) != TCPARAMETER_CODING_FLOATINGPOINT && (pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) != TCPARAMETER_CALIBRATION_NUMERICAL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTASSIGNMENT_DECIMALINTEGERSTRING) : STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTASSIGNMENT_DECIMALFLOATINGPOINTSTRING)) : STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTASSIGNMENT_BINARYSTRING)) : STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTASSIGNMENT_OCTALSTRING)) : STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTASSIGNMENT_HEXADECIMALSTRING)) : STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTASSIGNMENT_DATETIMESTRING)) : STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTASSIGNMENT_STRING)) : EMPTYSTRING, szValue[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_BINARY), (LPCTSTR)pDatabaseTCProcedureArgument->GetConstValueAsText()), szValue[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_OCTAL), (LPCTSTR)pDatabaseTCProcedureArgument->GetConstValueAsText()), szValue[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_HEXADECIMAL), (LPCTSTR)pDatabaseTCProcedureArgument->GetConstValueAsText()), szValue[4].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_DATETIME), (LPCTSTR)pDatabaseTCProcedureArgument->GetConstValueAsText()), szValue[5].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_STRING), (LPCTSTR)pDatabaseTCProcedureArgument->GetConstValueAsText()), szValue[6] = (pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CALIBRATION_STATUS)) ? (((pDatabaseTCProcedureArgument->GetAttributes() & (TCPARAMETER_CODING_TIME | TCPARAMETER_CALIBRATION_STATUS)) == 0) ? (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_CODING_TIME) != TCPARAMETER_CODING_TIME) ? (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) != TCPARAMETER_RADIX_HEXADECIMAL) ? (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_OCTAL) != TCPARAMETER_RADIX_OCTAL) ? (((pDatabaseTCProcedureArgument->GetAttributes() & TCPARAMETER_RADIX_BINARY) != TCPARAMETER_RADIX_BINARY) ? pDatabaseTCProcedureArgument->GetConstValueAsText() : szValue[1]) : szValue[2]) : szValue[3]) : szValue[4]) : szValue[5]) : EMPTYSTRING; szValue[0] == STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTASSIGNMENT_DECIMALINTEGERSTRING) || szValue[0] == STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTASSIGNMENT_DECIMALFLOATINGPOINTSTRING); )
			{
				szValue[1].Format(szValue[0], (LPCTSTR)TranslateIdentifierDataType(pDatabaseTCProcedureArgument->GetAttributes(), pDatabaseTCProcedureArgument->GetWidth()));
				szValue[0] = szValue[1];
				break;
			}
			szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_ARGUMENTASSIGNMENT_CODE), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag(), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag(), (LPCTSTR)szValue[0], (!szValue[6].IsEmpty()) ? (LPCTSTR)szValue[6] : (LPCTSTR)pDatabaseTCProcedureArgument->GetTag());
			szStatements += (!szStatements.IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + szCode) : szCode;
		}
	}
	return((!szStatements.IsEmpty()) ? (szStatements + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE)) : EMPTYSTRING);
}

CString CTCProcedureCompileThread::EnumVariableAssignments(CONST CDatabaseTCProcedureVariables &pDatabaseTCProcedureVariables) CONST
{
	INT  nVariable;
	INT  nVariables;
	CString  szCode;
	CString  szValue[6];
	CString  szAssignment;
	CString  szStatements;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;

	for (nVariable = 0, nVariables = (INT)pDatabaseTCProcedureVariables.GetSize(); nVariable < nVariables; nVariable++)
	{
		if ((pDatabaseTCProcedureVariable = pDatabaseTCProcedureVariables.GetAt(nVariable)) && !pDatabaseTCProcedureVariable->GetConstValueAsText().IsEmpty())
		{
			szValue[0].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_BINARY), (LPCTSTR)pDatabaseTCProcedureVariable->GetConstValueAsText());
			szValue[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_OCTAL), (LPCTSTR)pDatabaseTCProcedureVariable->GetConstValueAsText());
			szValue[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_HEXADECIMAL), (LPCTSTR)pDatabaseTCProcedureVariable->GetConstValueAsText());
			szValue[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_DATETIME), (LPCTSTR)pDatabaseTCProcedureVariable->GetConstValueAsText());
			szValue[4].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_STRING), (LPCTSTR)pDatabaseTCProcedureVariable->GetConstValueAsText());
			szValue[5] = (pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_BITPATTERN | TCPARAMETER_CODING_SIGNEDINTEGER | TCPARAMETER_CODING_UNSIGNEDINTEGER | TCPARAMETER_CODING_FLOATINGPOINT | TCPARAMETER_CODING_TIME | TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CALIBRATION_STATUS)) ? (((pDatabaseTCProcedureVariable->GetAttributes() & (TCPARAMETER_CODING_TEXTSTRING | TCPARAMETER_CALIBRATION_STATUS)) == 0) ? (((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_CODING_TIME) == 0) ? (((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) != TCPARAMETER_RADIX_HEXADECIMAL) ? (((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_OCTAL) != TCPARAMETER_RADIX_OCTAL) ? (((pDatabaseTCProcedureVariable->GetAttributes() & TCPARAMETER_RADIX_BINARY) != TCPARAMETER_RADIX_BINARY) ? pDatabaseTCProcedureVariable->GetConstValueAsText() : szValue[0]) : szValue[1]) : szValue[2]) : szValue[3]) : szValue[4]) : EMPTYSTRING;
			szAssignment.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_ASSIGNMENT), (LPCTSTR)pDatabaseTCProcedureVariable->GetTag(), (LPCTSTR)szValue[5]);
			szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VARIABLEASSIGNMENT_STATEMENT), (LPCTSTR)szAssignment);
			szStatements += (!szStatements.IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + szCode) : szCode;
		}
	}
	return((!szStatements.IsEmpty()) ? (szStatements + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE)) : EMPTYSTRING);
}

CString CTCProcedureCompileThread::EnumSynchronizationObjectIdentifiers(CONST CStringArray &szSyncObjects) CONST
{
	INT  nObject;
	INT  nObjects;
	CString  szCode;
	CString  szStatements;

	for (nObject = 0, nObjects = (INT)szSyncObjects.GetSize(); nObject < nObjects; nObject++)
	{
		szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_DECLARATION_SYNCOBJECTS), (LPCTSTR)szSyncObjects.GetAt(nObject));
		szStatements += szCode + CString(CR) + CString(EOL);
	}
	return((!szStatements.IsEmpty()) ? (szStatements + CString(CR) + CString(EOL)) : EMPTYSTRING);
}

CString CTCProcedureCompileThread::EnumExpressionTMParameterDeclarations(CONST CStringArray &szTMParameters) CONST
{
	INT  nParameter;
	INT  nParameters;
	CString  szCode;
	CString  szStatements;

	for (nParameter = 0, nParameters = (INT)szTMParameters.GetSize(); nParameter < nParameters; nParameter++)
	{
		szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_DECLARATION_TMPARAMETERS), (LPCTSTR)szTMParameters.GetAt(nParameter));
		szStatements += szCode + CString(CR) + CString(EOL);
	}
	return((!szStatements.IsEmpty()) ? (szStatements + CString(CR) + CString(EOL)) : EMPTYSTRING);
}

CString CTCProcedureCompileThread::EnumExpressionTCParameterDeclarations(CONST CStringArray &szTCParameters) CONST
{
	INT  nParameter;
	INT  nParameters;
	CString  szCode;
	CString  szStatements;

	for (nParameter = 0, nParameters = (INT)szTCParameters.GetSize(); nParameter < nParameters; nParameter++)
	{
		szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_DECLARATION_TCPARAMETERS), (LPCTSTR)szTCParameters.GetAt(nParameter));
		szStatements += szCode + CString(CR) + CString(EOL);
	}
	return((!szStatements.IsEmpty()) ? (szStatements + CString(CR) + CString(EOL)) : EMPTYSTRING);
}

CString CTCProcedureCompileThread::EnumExpressionTMParameterInitializations(CONST CStringArray &szTMParameters) CONST
{
	INT  nParameter;
	INT  nParameters;
	CString  szCode;
	CString  szStatements;

	for (nParameter = 0, nParameters = (INT)szTMParameters.GetSize(); nParameter < nParameters; nParameter++)
	{
		szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_INITIALIZATION_TMPARAMETER_STATEMENT), (LPCTSTR)szTMParameters.GetAt(nParameter), (LPCTSTR)szTMParameters.GetAt(nParameter), (LPCTSTR)szTMParameters.GetAt(nParameter));
		szStatements += szCode + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE);
	}
	return szStatements;
}

CString CTCProcedureCompileThread::EnumExpressionTCParameterInitializations(CONST CStringArray &szTCParameters) CONST
{
	INT  nParameter;
	INT  nParameters;
	CString  szCode;
	CString  szStatements;

	for (nParameter = 0, nParameters = (INT)szTCParameters.GetSize(); nParameter < nParameters; nParameter++)
	{
		szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_INITIALIZATION_TCPARAMETER_STATEMENT), (LPCTSTR)szTCParameters.GetAt(nParameter), (LPCTSTR)szTCParameters.GetAt(nParameter), (LPCTSTR)szTCParameters.GetAt(nParameter));
		szStatements += szCode + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE);
	}
	return szStatements;
}

CString CTCProcedureCompileThread::EnumIdentifierReferences(CONST CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedureArguments &pDatabaseTCProcedureArguments, CONST CDatabaseTCProcedureVariables &pDatabaseTCProcedureVariables, CONST CStringArray &szTMParameters, CONST CStringArray &szTCParameters) CONST
{
	INT  nArgument;
	INT  nArguments;
	INT  nVariable;
	INT  nVariables;
	INT  nParameter;
	INT  nParameters;
	CString  szCode;
	CString  szStatements;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCProcedureArgument  *pDatabaseTCProcedureArgument;
	CDatabaseTCProcedureVariable  *pDatabaseTCProcedureVariable;

	for (nArgument = 0, nArguments = (INT)pDatabaseTCProcedureArguments.GetSize(); nArgument < nArguments; nArgument++)
	{
		if ((pDatabaseTCProcedureArgument = pDatabaseTCProcedureArguments.GetAt(nArgument)))
		{
			szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERENUMERATION_STATEMENT), (LPCTSTR)pDatabaseTCProcedureArgument->GetTag(), STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERTYPE_ARGUMENT), pDatabaseTCProcedureArgument->GetAttributes(), (LPCTSTR)(CString(STRING(IDS_TELECOMMANDPROCEDUREFILE_PREFIX_POINTER)) + CString(STRING(IDS_TELECOMMANDPROCEDUREFILE_PREFIX_IDENTIFIER)) + pDatabaseTCProcedureArgument->GetTag()));
			szStatements += CString(CR) + CString(EOL) + szCode;
		}
	}
	for (nVariable = 0, nVariables = (INT)pDatabaseTCProcedureVariables.GetSize(); nVariable < nVariables; nVariable++)
	{
		if ((pDatabaseTCProcedureVariable = pDatabaseTCProcedureVariables.GetAt(nVariable)) != (CDatabaseTCProcedureVariable *)NULL)
		{
			szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERENUMERATION_STATEMENT), (LPCTSTR)pDatabaseTCProcedureVariable->GetTag(), STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERTYPE_VARIABLE), pDatabaseTCProcedureVariable->GetAttributes(), (LPCTSTR)(CString(STRING(IDS_TELECOMMANDPROCEDUREFILE_PREFIX_POINTER)) + CString(STRING(IDS_TELECOMMANDPROCEDUREFILE_PREFIX_IDENTIFIER)) + pDatabaseTCProcedureVariable->GetTag()));
			szStatements += CString(CR) + CString(EOL) + szCode;
		}
	}
	for (nParameter = 0, nParameters = (INT)szTMParameters.GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTMParameter = pDatabase->GetTMParameters()->GetAt(pDatabase->GetTMParameters()->Find(szTMParameters.GetAt(nParameter)))))
		{
			szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERENUMERATION_STATEMENT), (LPCTSTR)pDatabaseTMParameter->GetTag(), STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERTYPE_TMPARAMETER), pDatabaseTMParameter->GetAttributes(), STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_NULL));
			szStatements += CString(CR) + CString(EOL) + szCode;
		}
	}
	for (nParameter = 0, nParameters = (INT)szTCParameters.GetSize(); nParameter < nParameters; nParameter++)
	{
		if ((pDatabaseTCParameter = pDatabase->GetTCParameters()->GetAt(pDatabase->GetTCParameters()->Find(szTCParameters.GetAt(nParameter)))))
		{
			szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERENUMERATION_STATEMENT), (LPCTSTR)pDatabaseTCParameter->GetTag(), STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERTYPE_TCPARAMETER), pDatabaseTCParameter->GetAttributes(), STRING(IDS_TELECOMMANDPROCEDUREFILE_MACRO_NULL));
			szStatements += CString(CR) + CString(EOL) + szCode;
		}
	}
	return szStatements;
}

CString CTCProcedureCompileThread::EnumSynchronizationObjectReferences(CONST CStringArray &szSyncObjects) CONST
{
	INT  nObject;
	INT  nObjects;
	CString  szCode;
	CString  szStatements;

	for (nObject = 0, nObjects = (INT)szSyncObjects.GetSize(); nObject < nObjects; nObject++)
	{
		szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SYNCOBJECTENUMERATION_STATEMENT), (LPCTSTR)szSyncObjects.GetAt(nObject), (LPCTSTR)szSyncObjects.GetAt(nObject));
		szStatements += CString(CR) + CString(EOL) + szCode;
	}
	return szStatements;
}

CString CTCProcedureCompileThread::ExtractThreadTriggerExpressions(CONST CDatabaseTCProcedure *pDatabaseTCProcedure, LPCTSTR pszThread) CONST
{
	INT  nStep;
	INT  nSteps;
	CString  szCode;
	CString  szStatements;
	CPtrArray  pThreadSteps;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if ((pDocument = new CTCProcedureDocument))
	{
		if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(pDatabaseTCProcedure->Find(pszThread))))
		{
			for (nStep = 0, nSteps = (pDocument->Unmap(pDatabaseTCProcedureThread)) ? pDocument->EnumSteps(pThreadSteps, FALSE, TRUE) : -1; nStep < nSteps; nStep++)
			{
				if ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)) && !pStep->GetTriggerExpression().IsEmpty())
				{
					szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_CHECKTRIGGEREXPRESSION_STATEMENT), (LPCTSTR)pStep->GetName(), (LPCTSTR)pStep->GetTriggerExpression());
					szStatements += szCode + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE);
				}
			}
		}
		delete pDocument;
	}
	return szStatements;
}

CString CTCProcedureCompileThread::ExtractThreadBodyExpressions(CONST CDatabaseTCProcedure *pDatabaseTCProcedure, LPCTSTR pszThread) CONST
{
	INT  nStep;
	INT  nSteps;
	CString  szCode;
	CString  szStatements;
	CPtrArray  pThreadSteps;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if ((pDocument = new CTCProcedureDocument))
	{
		if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(pDatabaseTCProcedure->Find(pszThread))))
		{
			for (nStep = 0, nSteps = (pDocument->Unmap(pDatabaseTCProcedureThread)) ? pDocument->EnumSteps(pThreadSteps, FALSE, TRUE) : -1; nStep < nSteps; nStep++)
			{
				if ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)) && !pStep->GetPreexecutionExpression().IsEmpty())
				{
					szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_CHECKBODYEXPRESSION_STATEMENT), (LPCTSTR)pStep->GetName(), (LPCTSTR)pStep->GetPreexecutionExpression());
					szStatements += szCode + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE);
				}
			}
		}
		delete pDocument;
	}
	return szStatements;
}

CString CTCProcedureCompileThread::ExtractThreadConfirmationExpressions(CONST CDatabaseTCProcedure *pDatabaseTCProcedure, LPCTSTR pszThread) CONST
{
	INT  nStep;
	INT  nSteps;
	CString  szCode;
	CString  szStatements;
	CPtrArray  pThreadSteps;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if ((pDocument = new CTCProcedureDocument))
	{
		if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(pDatabaseTCProcedure->Find(pszThread))))
		{
			for (nStep = 0, nSteps = (pDocument->Unmap(pDatabaseTCProcedureThread)) ? pDocument->EnumSteps(pThreadSteps, FALSE, TRUE) : -1; nStep < nSteps; nStep++)
			{
				if ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)) && !pStep->GetConfirmationExpression().IsEmpty())
				{
					szCode.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_CHECKCONFIRMATIONEXPRESSION_STATEMENT), (LPCTSTR)pStep->GetName(), (LPCTSTR)pStep->GetConfirmationExpression());
					szStatements += szCode + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE);
				}
			}
		}
		delete pDocument;
	}
	return szStatements;
}

CString CTCProcedureCompileThread::ExtractThreadTCFunctionInitializations(CONST CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedure *pDatabaseTCProcedure, LPCTSTR pszThread, BOOL bExpanded) CONST
{
	INT  nStep;
	INT  nSteps;
	INT  nEntry;
	INT  nEntries;
	INT  nArgument;
	INT  nArguments;
	INT  nParameter;
	INT  nParameters;
	INT  nByteOffset;
	BOOL  bTimeValue;
	CString  szBlock[4];
	CString  szStatements;
	CString  szMemoryPatch;
	CPtrArray  pThreadSteps;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CTCProcedureDocumentSendTCFunctionItem  *pSendTCFunctionItem;
	CTCProcedureDocumentSendTCSequenceItem  *pSendTCSequenceItem;
	CTCProcedureDocumentItem  *pStep;
	CTCProcedureDocument  *pDocument;

	if ((pDocument = new CTCProcedureDocument))
	{
		if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(pDatabaseTCProcedure->Find(pszThread))))
		{
			for (nStep = 0, nSteps = (pDocument->Unmap(pDatabaseTCProcedureThread)) ? pDocument->EnumSteps(pThreadSteps, FALSE, TRUE) : -1; nStep < nSteps; nStep++)
			{
				if ((pSendTCFunctionItem = ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)) && pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION) ? (CTCProcedureDocumentSendTCFunctionItem *)pStep : (CTCProcedureDocumentSendTCFunctionItem *)NULL))
				{
					for (nParameter = (bExpanded) ? CalculateTCFunctionElementCount(pDatabase, &cDatabaseTCFunction) : 0, nParameters = (pSendTCFunctionItem->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket)) ? ((!bExpanded) ? CalculateTCFunctionElementCount(pDatabase, &cDatabaseTCFunction) : (INT)cDatabaseTCFunction.GetSize()) : 0, nByteOffset = (!bExpanded) ? CalculateTCFunctionElementOffset(pDatabase, &cDatabaseTCFunction) : 0; nParameter < nParameters; nParameter++)
					{
						if ((pDatabaseTCParameter = ((pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(nParameter)) && !pDatabaseTCFunctionElement->GetName().IsEmpty() && (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0) ? pDatabase->GetTCParameters()->GetAt(pDatabase->GetTCParameters()->Find(pDatabaseTCFunctionElement->GetName())) : (CDatabaseTCParameter *)NULL))
						{
							for (szBlock[2] = pDatabaseTCFunctionElement->GetConstValueAsText(), szBlock[3].Empty(), bTimeValue = (GetDatabase()->CheckTCFunctionElementConstTimeType(pDatabaseTCFunctionElement->GetName()) || (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME)) ? TRUE : FALSE; ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) == 0 || (pDatabaseTCParameter->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0) && (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 && !bTimeValue; )
							{
								if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER)
								{
									szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETERRAWINTVALUE), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos(), (LPCTSTR)szBlock[2]);
									break;
								}
								if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
								{
									szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETERRAWFLOATVALUE), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos(), (LPCTSTR)szBlock[2]);
									break;
								}
								if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_BINARY), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
								if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_OCTAL), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
								if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_HEXADECIMAL), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
								szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETERRAWUINTVALUE), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos(), (LPCTSTR)szBlock[2]);
								break;
							}
							if ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) || bTimeValue)
							{
								szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_STRING), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
								szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETERTIMEVALUE), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos(), (LPCTSTR)szBlock[2]);
							}
							for (; (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) && !bTimeValue; )
							{
								szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETERVALUE), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos(), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText(), (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONPARAMETEROPTION_NOEXTRAPOLATION) : STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONPARAMETEROPTION_EXTRAPOLATION));
								break;
							}
							if ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && (pDatabaseTCParameter->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) && !bTimeValue)
							{
								szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_STRING), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
								szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETERSTRINGVALUE), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos(), (LPCTSTR)szBlock[2]);
							}
							for (; pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty(); )
							{
								szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETER), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos());
								break;
							}
							szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETERATTRIBUTES), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos(), pDatabaseTCFunctionElement->GetAttributes());
							szBlock[1] += (!szBlock[3].IsEmpty()) ? ((!szBlock[1].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[2] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR) + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[3] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR)) : (szBlock[2] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR) + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[3] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR))) : EMPTYSTRING;
						}
					}
					for (nParameter = 0, nParameters = (!bExpanded) ? (INT)cDatabaseTCPacket.GetSize() : 0; nParameter < nParameters; nParameter++)
					{
						if ((pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(nParameter)) && !pDatabaseTCPacketParameter->GetTag().IsEmpty() && (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0)
						{
							for (szBlock[2] = pDatabaseTCPacketParameter->GetConstValueAsText(), szBlock[3].Empty(), bTimeValue = (GetDatabase()->CheckTCPacketParameterConstTimeType(pDatabaseTCPacketParameter->GetTag()) || (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME)) ? TRUE : FALSE; (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) == 0 && (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 && !bTimeValue; )
							{
								if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER)
								{
									szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETPACKETPARAMETERRAWINTVALUE), (LPCTSTR)pDatabaseTCPacketParameter->GetTag(), pDatabaseTCPacketParameter->GetBytePos(), pDatabaseTCPacketParameter->GetBitPos(), (LPCTSTR)szBlock[2]);
									break;
								}
								if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
								{
									szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETPACKETPARAMETERRAWFLOATVALUE), (LPCTSTR)pDatabaseTCPacketParameter->GetTag(), pDatabaseTCPacketParameter->GetBytePos(), pDatabaseTCPacketParameter->GetBitPos(), (LPCTSTR)szBlock[2]);
									break;
								}
								if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_BINARY), (LPCTSTR)pDatabaseTCPacketParameter->GetConstValueAsText());
								if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_OCTAL), (LPCTSTR)pDatabaseTCPacketParameter->GetConstValueAsText());
								if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_HEXADECIMAL), (LPCTSTR)pDatabaseTCPacketParameter->GetConstValueAsText());
								szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETPACKETPARAMETERRAWUINTVALUE), (LPCTSTR)pDatabaseTCPacketParameter->GetTag(), pDatabaseTCPacketParameter->GetBytePos(), pDatabaseTCPacketParameter->GetBitPos(), (LPCTSTR)szBlock[2]);
								break;
							}
							if ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) || bTimeValue)
							{
								szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_STRING), (LPCTSTR)pDatabaseTCPacketParameter->GetConstValueAsText());
								szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETPACKETPARAMETERRAWTIMEVALUE), (LPCTSTR)pDatabaseTCPacketParameter->GetTag(), pDatabaseTCPacketParameter->GetBytePos(), pDatabaseTCPacketParameter->GetBitPos(), (LPCTSTR)szBlock[2]);
							}
							for (; pDatabaseTCPacketParameter->GetConstValueAsText().IsEmpty(); )
							{
								szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETPACKETPARAMETER), (LPCTSTR)pDatabaseTCPacketParameter->GetTag(), pDatabaseTCPacketParameter->GetBytePos(), pDatabaseTCPacketParameter->GetBitPos());
								break;
							}
							szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETPACKETPARAMETERATTRIBUTES), (LPCTSTR)pDatabaseTCPacketParameter->GetTag(), pDatabaseTCPacketParameter->GetBytePos(), pDatabaseTCPacketParameter->GetBitPos(), pDatabaseTCPacketParameter->GetAttributes());
							szBlock[1] += (!szBlock[3].IsEmpty()) ? ((!szBlock[1].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[2] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR) + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[3] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR)) : (szBlock[2] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR) + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[3] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR))) : EMPTYSTRING;
						}
					}
					szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_INITIALIZEFUNCTION_STATEMENT), (LPCTSTR)pStep->GetName(), -1, (LPCTSTR)szBlock[1], (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_AUTHORIZATION) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_AUTHORIZATION) : STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_NOAUTHORIZATION));
					szBlock[0] += (!szBlock[0].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[2]) : szBlock[2];
				}
				if ((pSendTCSequenceItem = ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)) && pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE) ? (CTCProcedureDocumentSendTCSequenceItem *)pStep : (CTCProcedureDocumentSendTCSequenceItem *)NULL))
				{
					for (nEntry = 0, nEntries = pSendTCSequenceItem->GetSize(), szBlock[1].Empty(); nEntry < nEntries; nEntry++, szBlock[1].Empty())
					{
						if ((pSendTCFunctionItem = pSendTCSequenceItem->GetAt(nEntry)))
						{
							if (pSendTCFunctionItem->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
							{
								if ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) == 0)
								{
									for (nParameter = (bExpanded) ? CalculateTCFunctionElementCount(pDatabase, &cDatabaseTCFunction) : 0, nParameters = (!bExpanded) ? CalculateTCFunctionElementCount(pDatabase, &cDatabaseTCFunction) : (INT)cDatabaseTCFunction.GetSize(), nByteOffset = (!bExpanded) ? CalculateTCFunctionElementOffset(pDatabase, &cDatabaseTCFunction) : 0; nParameter < nParameters; nParameter++)
									{
										if ((pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(nParameter)) && !pDatabaseTCFunctionElement->GetName().IsEmpty() && (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0)
										{
											for (szBlock[2] = pDatabaseTCFunctionElement->GetConstValueAsText(), szBlock[3].Empty(), bTimeValue = (GetDatabase()->CheckTCFunctionElementConstTimeType(pDatabaseTCFunctionElement->GetName()) || (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME)) ? TRUE : FALSE; ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) == 0 || (pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0) && (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 && !bTimeValue; )
											{
												if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER)
												{
													szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETERRAWINTVALUE), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos(), (LPCTSTR)szBlock[2]);
													break;
												}
												if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
												{
													szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETERRAWFLOATVALUE), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos(), (LPCTSTR)szBlock[2]);
													break;
												}
												if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_BINARY), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
												if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_OCTAL), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
												if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_HEXADECIMAL), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
												szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETERRAWUINTVALUE), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos(), (LPCTSTR)szBlock[2]);
												break;
											}
											if ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) || bTimeValue)
											{
												szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_STRING), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
												szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETERTIMEVALUE), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos(), (LPCTSTR)szBlock[2]);
											}
											for (; (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_NUMERICAL) && !bTimeValue; )
											{
												szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETERVALUE), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos(), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText(), (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_INTERPRETATION_FULL) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONPARAMETEROPTION_NOEXTRAPOLATION) : STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONPARAMETEROPTION_EXTRAPOLATION));
												break;
											}
											if ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) && (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS) && !bTimeValue)
											{
												szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_STRING), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
												szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETERSTRINGVALUE), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos(), (LPCTSTR)szBlock[2]);
											}
											for (; pDatabaseTCFunctionElement->GetConstValueAsText().IsEmpty(); )
											{
												szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETER), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos());
												break;
											}
											szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETFUNCTIONPARAMETERATTRIBUTES), (LPCTSTR)pDatabaseTCFunctionElement->GetName(), pDatabaseTCFunctionElement->GetBytePos() - nByteOffset, pDatabaseTCFunctionElement->GetBitPos(), pDatabaseTCFunctionElement->GetAttributes());
											szBlock[1] += (!szBlock[3].IsEmpty()) ? ((!szBlock[1].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[2] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR) + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[3] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR)) : (szBlock[2] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR) + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[3] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR))) : EMPTYSTRING;
										}
									}
									for (nParameter = 0, nParameters = (!bExpanded) ? (INT)cDatabaseTCPacket.GetSize() : 0; nParameter < nParameters; nParameter++)
									{
										if ((pDatabaseTCPacketParameter = cDatabaseTCPacket.GetAt(nParameter)) && !pDatabaseTCPacketParameter->GetTag().IsEmpty() && (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_VTYPE_AUTO) == 0)
										{
											for (szBlock[2] = pDatabaseTCPacketParameter->GetConstValueAsText(), szBlock[3].Empty(), bTimeValue = (GetDatabase()->CheckTCPacketParameterConstTimeType(pDatabaseTCPacketParameter->GetTag()) || (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME)) ? TRUE : FALSE; (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CALIBRATION_ENABLED) == 0 && (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) == 0 && !bTimeValue; )
											{
												if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_SIGNEDINTEGER)
												{
													szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETPACKETPARAMETERRAWINTVALUE), (LPCTSTR)pDatabaseTCPacketParameter->GetTag(), pDatabaseTCPacketParameter->GetBytePos(), pDatabaseTCPacketParameter->GetBitPos(), (LPCTSTR)szBlock[2]);
													break;
												}
												if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT)
												{
													szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETPACKETPARAMETERRAWFLOATVALUE), (LPCTSTR)pDatabaseTCPacketParameter->GetTag(), pDatabaseTCPacketParameter->GetBytePos(), pDatabaseTCPacketParameter->GetBitPos(), (LPCTSTR)szBlock[2]);
													break;
												}
												if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_BINARY) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_BINARY), (LPCTSTR)pDatabaseTCPacketParameter->GetConstValueAsText());
												if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_OCTAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_OCTAL), (LPCTSTR)pDatabaseTCPacketParameter->GetConstValueAsText());
												if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_HEXADECIMAL), (LPCTSTR)pDatabaseTCPacketParameter->GetConstValueAsText());
												szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETPACKETPARAMETERRAWUINTVALUE), (LPCTSTR)pDatabaseTCPacketParameter->GetTag(), pDatabaseTCPacketParameter->GetBytePos(), pDatabaseTCPacketParameter->GetBitPos(), (LPCTSTR)szBlock[2]);
												break;
											}
											if ((pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME) || bTimeValue)
											{
												szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_STRING), (LPCTSTR)pDatabaseTCPacketParameter->GetConstValueAsText());
												szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETPACKETPARAMETERRAWTIMEVALUE), (LPCTSTR)pDatabaseTCPacketParameter->GetTag(), pDatabaseTCPacketParameter->GetBytePos(), pDatabaseTCPacketParameter->GetBitPos(), (LPCTSTR)szBlock[2]);
											}
											for (; pDatabaseTCPacketParameter->GetConstValueAsText().IsEmpty(); )
											{
												szBlock[3].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETPACKETPARAMETER), (LPCTSTR)pDatabaseTCPacketParameter->GetTag(), pDatabaseTCPacketParameter->GetBytePos(), pDatabaseTCPacketParameter->GetBitPos());
												break;
											}
											szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_SETPACKETPARAMETERATTRIBUTES), (LPCTSTR)pDatabaseTCPacketParameter->GetTag(), pDatabaseTCPacketParameter->GetBytePos(), pDatabaseTCPacketParameter->GetBitPos(), pDatabaseTCPacketParameter->GetAttributes());
											szBlock[1] += (!szBlock[3].IsEmpty()) ? ((!szBlock[1].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[2] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR) + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[3] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR)) : (szBlock[2] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR) + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[3] + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR))) : EMPTYSTRING;
										}
									}
									if (!pSendTCFunctionItem->GetMemoryPatch().IsEmpty())
									{
										szMemoryPatch.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_ENUMFUNCTIONMEMORYPATCHDETAILS), (LPCTSTR)pSendTCFunctionItem->GetMemoryPatch());
										szBlock[1] += (!szBlock[1].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szMemoryPatch) : szMemoryPatch;
									}
									szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_INITIALIZEFUNCTION_STATEMENT), (LPCTSTR)pStep->GetName(), nEntry + 1, (LPCTSTR)szBlock[1], (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_AUTHORIZATION) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_AUTHORIZATION) : STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTIONOPTION_NOAUTHORIZATION));
								}
								else
								{
									for (nArgument = 0, nArguments = (INT)cDatabaseTCFunction.GetSize(); nArgument < nArguments; nArgument++)
									{
										if ((pDatabaseTCFunctionElement = cDatabaseTCFunction.GetAt(nArgument)) != (CDatabaseTCFunctionElement *)NULL)
										{
											for (szBlock[2] = pDatabaseTCFunctionElement->GetConstValueAsText(); (pDatabaseTCFunctionElement->GetAttributes() & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0 && (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_FLOATINGPOINT) == 0 && (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) == 0; )
											{
												if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_BINARY) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_BINARY), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
												if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_OCTAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_OCTAL), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
												if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_RADIX_HEXADECIMAL) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_HEXADECIMAL), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
												break;
											}
											if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_DATETIME), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
											if ((pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TEXTSTRING) || (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CALIBRATION_STATUS)) szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_VALUEPREFIX_STRING), (LPCTSTR)pDatabaseTCFunctionElement->GetConstValueAsText());
										}
										szBlock[1] += STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SEPARATOR);
										szBlock[1] += szBlock[2];
									}
									szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_INITIALIZEPROCEDURE_STATEMENT), (LPCTSTR)pStep->GetName(), nEntry + 1, EMPTYSTRING, (LPCTSTR)cDatabaseTCFunction.GetName(), (LPCTSTR)szBlock[1]);
								}
								szBlock[0] += (!szBlock[0].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[2]) : szBlock[2];
							}
						}
					}
				}
			}
			szStatements = (!szBlock[0].IsEmpty()) ? (szBlock[0] + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE)) : EMPTYSTRING;
		}
		delete pDocument;
	}
	return szStatements;
}

CString CTCProcedureCompileThread::ExtractThreadTCFunctionPreexecutionExpressions(CONST CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedure *pDatabaseTCProcedure, LPCTSTR pszThread, CString &szParameters) CONST
{
	INT  nStep;
	INT  nSteps;
	INT  nEntry;
	INT  nEntries;
	INT  nParameter;
	INT  nParameters;
	CString  szBlock[3];
	CString  szParameter;
	CString  szStatements;
	CPtrArray  pThreadSteps;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCPreExeGroup  *pDatabaseTCPreExeGroup;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCPreExeGroupParameter  *pDatabaseTCPreExeGroupParameter;
	CTCProcedureDocumentSendTCFunctionItem  *pSendTCFunctionItem;
	CTCProcedureDocumentSendTCSequenceItem  *pSendTCSequenceItem;
	CTCProcedureDocumentItem  *pStep;
	CTCProcedureDocument  *pDocument;

	if ((pDocument = new CTCProcedureDocument))
	{
		if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(pDatabaseTCProcedure->Find(pszThread))))
		{
			for (nStep = 0, nSteps = (pDocument->Unmap(pDatabaseTCProcedureThread)) ? pDocument->EnumSteps(pThreadSteps, FALSE, TRUE) : -1; nStep < nSteps; nStep++)
			{
				if ((pSendTCFunctionItem = ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)) && pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION) ? (CTCProcedureDocumentSendTCFunctionItem *)pStep : (CTCProcedureDocumentSendTCFunctionItem *)NULL) && pSendTCFunctionItem->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
				{
					for (szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_CHECKPREEXECUTIONPARAMETERGROUP), (LPCTSTR)cDatabaseTCFunction.GetPreExeGroup()), szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_PREEXECUTION_STATEMENT), (LPCTSTR)pStep->GetName(), -1, (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_IGNOREPREEXEVERIFICATION) ? (LPCTSTR)TranslateConditionExpression(pSendTCFunctionItem->GetPreexecutionVerificationCondition()) : (LPCTSTR)szBlock[2]), szBlock[0] += (!szBlock[0].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + szBlock[1]) : szBlock[1]; (pDatabaseTCPreExeGroup = pDatabase->GetTCPreExeGroups()->GetAt(pDatabase->GetTCPreExeGroups()->Find(cDatabaseTCFunction.GetPreExeGroup()))); )
					{
						for (nParameter = 0, nParameters = (INT)pDatabaseTCPreExeGroup->GetSize(); nParameter < nParameters; nParameter++)
						{
							if ((pDatabaseTCPreExeGroupParameter = pDatabaseTCPreExeGroup->GetAt(nParameter)))
							{
								for (szParameter.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_PARAMETERENUMERATION_STATEMENT), (LPCTSTR)pDatabaseTCPreExeGroupParameter->GetTag()); szParameters.Find(szParameter) < 0; )
								{
									szParameters += CString(CR) + CString(EOL) + szParameter;
									break;
								}
							}
						}
						break;
					}
				}
				if ((pSendTCSequenceItem = ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)) && pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE) ? (CTCProcedureDocumentSendTCSequenceItem *)pStep : (CTCProcedureDocumentSendTCSequenceItem *)NULL))
				{
					for (nEntry = 0, nEntries = pSendTCSequenceItem->GetSize(); nEntry < nEntries; nEntry = nEntry + 1)
					{
						if ((pSendTCFunctionItem = pSendTCSequenceItem->GetAt(nEntry)) && pSendTCFunctionItem->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
						{
							if ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) != TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE)
							{
								for (szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_CHECKPREEXECUTIONPARAMETERGROUP), (LPCTSTR)cDatabaseTCFunction.GetPreExeGroup()), szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_PREEXECUTION_STATEMENT), (LPCTSTR)pStep->GetName(), nEntry + 1, (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_IGNOREPREEXEVERIFICATION) ? (LPCTSTR)TranslateConditionExpression(pSendTCFunctionItem->GetPreexecutionVerificationCondition()) : (LPCTSTR)szBlock[2]), szBlock[0] += (!szBlock[0].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + szBlock[1]) : szBlock[1]; (pDatabaseTCPreExeGroup = pDatabase->GetTCPreExeGroups()->GetAt(pDatabase->GetTCPreExeGroups()->Find(cDatabaseTCFunction.GetPreExeGroup()))); )
								{
									for (nParameter = 0, nParameters = (INT)pDatabaseTCPreExeGroup->GetSize(); nParameter < nParameters; nParameter++)
									{
										if ((pDatabaseTCPreExeGroupParameter = pDatabaseTCPreExeGroup->GetAt(nParameter)))
										{
											for (szParameter.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_PARAMETERENUMERATION_STATEMENT), (LPCTSTR)pDatabaseTCPreExeGroupParameter->GetTag()); szParameters.Find(szParameter) < 0; )
											{
												szParameters += CString(CR) + CString(EOL) + szParameter;
												break;
											}
										}
									}
									break;
								}
							}
						}
					}
				}
			}
			szStatements = (!szBlock[0].IsEmpty()) ? (szBlock[0] + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE)) : EMPTYSTRING;
		}
		delete pDocument;
	}
	return szStatements;
}

CString CTCProcedureCompileThread::ExtractThreadTCFunctionExecutionVerificationTimeWindows(CONST CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedure *pDatabaseTCProcedure, LPCTSTR pszThread) CONST
{
	INT  nStep;
	INT  nSteps;
	INT  nStage;
	INT  nStages;
	INT  nEntry;
	INT  nEntries;
	INT  nParameter;
	INT  nParameters;
	UINT  nStageID;
	CString  szBlock[3];
	CString  szStatements;
	CPtrArray  pThreadSteps;
	CUIntArray  nStageIDs;
	CUIntArray  nStageTimeWindows[3];
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCExeVerGroupParameter  *pDatabaseTCExeVerGroupParameter;
	CTCProcedureDocumentSendTCFunctionItem  *pSendTCFunctionItem;
	CTCProcedureDocumentSendTCSequenceItem  *pSendTCSequenceItem;
	CTCProcedureDocumentItem  *pStep;
	CTCProcedureDocument  *pDocument;

	if ((pDocument = new CTCProcedureDocument))
	{
		if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(pDatabaseTCProcedure->Find(pszThread))))
		{
			for (nStep = 0, nSteps = (pDocument->Unmap(pDatabaseTCProcedureThread)) ? pDocument->EnumSteps(pThreadSteps, FALSE, TRUE) : -1; nStep < nSteps; nStep++)
			{
				if ((pSendTCFunctionItem = ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)) && pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION) ? (CTCProcedureDocumentSendTCFunctionItem *)pStep : (CTCProcedureDocumentSendTCFunctionItem *)NULL) && pSendTCFunctionItem->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
				{
					if ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_IGNOREEXEVERIFICATION) == TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_IGNOREEXEVERIFICATION)
					{
						for (szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_ENUMVERIFICATIONSTAGETIMEWINDOW), MAKETCEXEVERSTAGEID(TCVERIFICATIONSTAGE_COMPLETION, 0), 0, pSendTCFunctionItem->GetExecutionVerificationTimeWindow().GetTotalSeconds(), 0); !pSendTCFunctionItem->GetExecutionVerificationCondition().IsEmpty(); )
						{
							szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_ENUMTIMEWINDOWS_STATEMENT), (LPCTSTR)pStep->GetName(), -1, (LPCTSTR)szBlock[2]);
							szBlock[0] += (!szBlock[0].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + szBlock[1]) : szBlock[1];
							break;
						}
						continue;
					}
					if ((pDatabaseTCExeVerGroup = pDatabase->GetTCExeVerGroups()->GetAt(pDatabase->GetTCExeVerGroups()->Find(cDatabaseTCFunction.GetExeVerGroup()))))
					{
						for (nParameter = 0, nParameters = (INT)pDatabaseTCExeVerGroup->GetSize(), nStageIDs.RemoveAll(), nStageTimeWindows[0].RemoveAll(), nStageTimeWindows[1].RemoveAll(), nStageTimeWindows[2].RemoveAll(); nParameter < nParameters; nParameter++)
						{
							if ((pDatabaseTCExeVerGroupParameter = pDatabaseTCExeVerGroup->GetAt(nParameter)))
							{
								if (pDatabaseTCExeVerGroupParameter->GetStage() != TCVERIFICATIONSTAGE_NONE)
								{
									for (nStage = 0, nStages = (INT)nStageIDs.GetSize(); nStage < nStages; nStage++)
									{
										if ((nStageID = MAKETCEXEVERSTAGEID(pDatabaseTCExeVerGroupParameter->GetStage(), pDatabaseTCExeVerGroupParameter->GetStep())) == nStageIDs.GetAt(nStage))
										{
											nStageTimeWindows[0].SetAt(nStage, (UINT)min(pDatabaseTCExeVerGroupParameter->GetTimeWindowOffset().GetTotalSeconds(), nStageTimeWindows[0].GetAt(nStage)));
											nStageTimeWindows[1].SetAt(nStage, (UINT)max(pDatabaseTCExeVerGroupParameter->GetTimeWindowInterval().GetTotalSeconds(), nStageTimeWindows[1].GetAt(nStage)));
											nStageTimeWindows[2].SetAt(nStage, (UINT)max(pDatabaseTCExeVerGroupParameter->GetTimeWindowUncertainty().GetTotalSeconds(), nStageTimeWindows[2].GetAt(nStage)));
											break;
										}
										if (nStageID < nStageIDs.GetAt(nStage))
										{
											nStageIDs.InsertAt(nStage, nStageID);
											nStageTimeWindows[0].InsertAt(nStage, (UINT)pDatabaseTCExeVerGroupParameter->GetTimeWindowOffset().GetTotalSeconds());
											nStageTimeWindows[1].InsertAt(nStage, (UINT)pDatabaseTCExeVerGroupParameter->GetTimeWindowInterval().GetTotalSeconds());
											nStageTimeWindows[2].InsertAt(nStage, (UINT)pDatabaseTCExeVerGroupParameter->GetTimeWindowUncertainty().GetTotalSeconds());
											break;
										}
									}
									if (nStage == nStages)
									{
										nStageIDs.InsertAt(nStage, MAKETCEXEVERSTAGEID(pDatabaseTCExeVerGroupParameter->GetStage(), pDatabaseTCExeVerGroupParameter->GetStep()));
										nStageTimeWindows[0].InsertAt(nStage, (UINT)pDatabaseTCExeVerGroupParameter->GetTimeWindowOffset().GetTotalSeconds());
										nStageTimeWindows[1].InsertAt(nStage, (UINT)pDatabaseTCExeVerGroupParameter->GetTimeWindowInterval().GetTotalSeconds());
										nStageTimeWindows[2].InsertAt(nStage, (UINT)pDatabaseTCExeVerGroupParameter->GetTimeWindowUncertainty().GetTotalSeconds());
									}
								}
							}
						}
						for (nStage = 0, nStages = (INT)nStageIDs.GetSize(), szBlock[2].Empty(); nStage < nStages; nStage++)
						{
							szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_ENUMVERIFICATIONSTAGETIMEWINDOW), nStageIDs.GetAt(nStage), nStageTimeWindows[0].GetAt(nStage), nStageTimeWindows[1].GetAt(nStage), nStageTimeWindows[2].GetAt(nStage));
							szBlock[2] += (!szBlock[2].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[1]) : szBlock[1];
						}
						szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_ENUMTIMEWINDOWS_STATEMENT), (LPCTSTR)pStep->GetName(), -1, (LPCTSTR)szBlock[2]);
						szBlock[0] += (!szBlock[0].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + szBlock[1]) : szBlock[1];
					}
					continue;
				}
				if ((pSendTCSequenceItem = ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)) && pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE) ? (CTCProcedureDocumentSendTCSequenceItem *)pStep : (CTCProcedureDocumentSendTCSequenceItem *)NULL))
				{
					for (nEntry = 0, nEntries = pSendTCSequenceItem->GetSize(); nEntry < nEntries; nEntry++)
					{
						if ((pSendTCFunctionItem = pSendTCSequenceItem->GetAt(nEntry)) && pSendTCFunctionItem->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
						{
							if ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) != TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE)
							{
								if ((pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_IGNOREEXEVERIFICATION) == TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_IGNOREEXEVERIFICATION)
								{
									for (szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_ENUMVERIFICATIONSTAGETIMEWINDOW), MAKETCEXEVERSTAGEID(TCVERIFICATIONSTAGE_COMPLETION, 0), 0, pSendTCFunctionItem->GetExecutionVerificationTimeWindow().GetTotalSeconds(), 0); !pSendTCFunctionItem->GetExecutionVerificationCondition().IsEmpty(); )
									{
										szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_ENUMTIMEWINDOWS_STATEMENT), (LPCTSTR)pStep->GetName(), nEntry + 1, (LPCTSTR)szBlock[2]);
										szBlock[0] += (!szBlock[0].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + szBlock[1]) : szBlock[1];
										break;
									}
									continue;
								}
								if ((pDatabaseTCExeVerGroup = pDatabase->GetTCExeVerGroups()->GetAt(pDatabase->GetTCExeVerGroups()->Find(cDatabaseTCFunction.GetExeVerGroup()))))
								{
									for (nParameter = 0, nParameters = (INT)pDatabaseTCExeVerGroup->GetSize(), nStageIDs.RemoveAll(), nStageTimeWindows[0].RemoveAll(), nStageTimeWindows[1].RemoveAll(), nStageTimeWindows[2].RemoveAll(); nParameter < nParameters; nParameter++)
									{
										if ((pDatabaseTCExeVerGroupParameter = pDatabaseTCExeVerGroup->GetAt(nParameter)))
										{
											if (pDatabaseTCExeVerGroupParameter->GetStage() != TCVERIFICATIONSTAGE_NONE)
											{
												for (nStage = 0, nStages = (INT)nStageIDs.GetSize(); nStage < nStages; nStage++)
												{
													if ((nStageID = MAKETCEXEVERSTAGEID(pDatabaseTCExeVerGroupParameter->GetStage(), pDatabaseTCExeVerGroupParameter->GetStep())) == nStageIDs.GetAt(nStage))
													{
														nStageTimeWindows[0].SetAt(nStage, (UINT)min(pDatabaseTCExeVerGroupParameter->GetTimeWindowOffset().GetTotalSeconds(), nStageTimeWindows[0].GetAt(nStage)));
														nStageTimeWindows[1].SetAt(nStage, (UINT)max(pDatabaseTCExeVerGroupParameter->GetTimeWindowInterval().GetTotalSeconds(), nStageTimeWindows[1].GetAt(nStage)));
														nStageTimeWindows[2].SetAt(nStage, (UINT)max(pDatabaseTCExeVerGroupParameter->GetTimeWindowUncertainty().GetTotalSeconds(), nStageTimeWindows[2].GetAt(nStage)));
														break;
													}
													if (nStageID < nStageIDs.GetAt(nStage))
													{
														nStageIDs.InsertAt(nStage, nStageID);
														nStageTimeWindows[0].InsertAt(nStage, (UINT)pDatabaseTCExeVerGroupParameter->GetTimeWindowOffset().GetTotalSeconds());
														nStageTimeWindows[1].InsertAt(nStage, (UINT)pDatabaseTCExeVerGroupParameter->GetTimeWindowInterval().GetTotalSeconds());
														nStageTimeWindows[2].InsertAt(nStage, (UINT)pDatabaseTCExeVerGroupParameter->GetTimeWindowUncertainty().GetTotalSeconds());
														break;
													}
												}
												if (nStage == nStages)
												{
													nStageIDs.InsertAt(nStage, MAKETCEXEVERSTAGEID(pDatabaseTCExeVerGroupParameter->GetStage(), pDatabaseTCExeVerGroupParameter->GetStep()));
													nStageTimeWindows[0].InsertAt(nStage, (UINT)pDatabaseTCExeVerGroupParameter->GetTimeWindowOffset().GetTotalSeconds());
													nStageTimeWindows[1].InsertAt(nStage, (UINT)pDatabaseTCExeVerGroupParameter->GetTimeWindowInterval().GetTotalSeconds());
													nStageTimeWindows[2].InsertAt(nStage, (UINT)pDatabaseTCExeVerGroupParameter->GetTimeWindowUncertainty().GetTotalSeconds());
												}
											}
										}
									}
									for (nStage = 0, nStages = (INT)nStageIDs.GetSize(), szBlock[2].Empty(); nStage < nStages; nStage++)
									{
										szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_ENUMVERIFICATIONSTAGETIMEWINDOW), nStageIDs.GetAt(nStage), nStageTimeWindows[0].GetAt(nStage), nStageTimeWindows[1].GetAt(nStage), nStageTimeWindows[2].GetAt(nStage));
										szBlock[2] += (!szBlock[2].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + CString(SPACE) + CString(SPACE) + szBlock[1]) : szBlock[1];
									}
									szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_ENUMTIMEWINDOWS_STATEMENT), (LPCTSTR)pStep->GetName(), nEntry + 1, (LPCTSTR)szBlock[2]);
									szBlock[0] += (!szBlock[0].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + szBlock[1]) : szBlock[1];
								}
							}
						}
					}
					continue;
				}
			}
			szStatements = (!szBlock[0].IsEmpty()) ? (szBlock[0] + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE)) : EMPTYSTRING;
		}
		delete pDocument;
	}
	return szStatements;
}

CString CTCProcedureCompileThread::ExtractThreadTCFunctionExecutionExpressions(CONST CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedure *pDatabaseTCProcedure, LPCTSTR pszThread, CString &szParameters) CONST
{
	INT  nStep;
	INT  nSteps;
	INT  nIndex;
	INT  nEntry;
	INT  nEntries;
	INT  nParameter;
	INT  nParameters;
	CString  szBlock[3];
	CString  szParameter;
	CString  szStatements;
	CPtrArray  pThreadSteps;
	CDatabaseTCPacket  cDatabaseTCPacket;
	CDatabaseTCFunction  cDatabaseTCFunction;
	CDatabaseTCExeVerGroup  *pDatabaseTCExeVerGroup;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCExeVerGroupParameter  *pDatabaseTCExeVerGroupParameter;
	CTCProcedureDocumentSendTCFunctionItem  *pSendTCFunctionItem;
	CTCProcedureDocumentSendTCSequenceItem  *pSendTCSequenceItem;
	CTCProcedureDocumentItem  *pStep;
	CTCProcedureDocument  *pDocument;

	if ((pDocument = new CTCProcedureDocument))
	{
		if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(pDatabaseTCProcedure->Find(pszThread))))
		{
			for (nStep = 0, nSteps = (pDocument->Unmap(pDatabaseTCProcedureThread)) ? pDocument->EnumSteps(pThreadSteps, FALSE, TRUE) : -1; nStep < nSteps; nStep++)
			{
				if ((pSendTCFunctionItem = ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)) && pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION) ? (CTCProcedureDocumentSendTCFunctionItem *)pStep : (CTCProcedureDocumentSendTCFunctionItem *)NULL) && pSendTCFunctionItem->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
				{
					for (szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_CHECKEXECUTIONPARAMETERGROUP), (LPCTSTR)cDatabaseTCFunction.GetExeVerGroup()), szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_EXECUTION_STATEMENT), (LPCTSTR)pStep->GetName(), -1, (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCFUNCTIONITEM_OPTIONS_IGNOREEXEVERIFICATION) ? (LPCTSTR)TranslateConditionExpression(pSendTCFunctionItem->GetExecutionVerificationCondition()) : (LPCTSTR)szBlock[2]), szBlock[0] += (!szBlock[0].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + szBlock[1]) : szBlock[1]; (pDatabaseTCExeVerGroup = pDatabase->GetTCExeVerGroups()->GetAt(pDatabase->GetTCExeVerGroups()->Find(cDatabaseTCFunction.GetExeVerGroup()))); )
					{
						for (nParameter = 0, nParameters = (INT)pDatabaseTCExeVerGroup->GetSize(); nParameter < nParameters; nParameter++)
						{
							if ((pDatabaseTCExeVerGroupParameter = pDatabaseTCExeVerGroup->GetAt(nParameter)))
							{
								for (szParameter.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_PARAMETERENUMERATION_STATEMENT), (LPCTSTR)pDatabaseTCExeVerGroupParameter->GetTag()); szParameters.Find(szParameter) < 0; )
								{
									szParameters += CString(CR) + CString(EOL) + szParameter;
									break;
								}
							}
						}
						break;
					}
				}
				if ((pSendTCSequenceItem = ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)) && pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE) ? (CTCProcedureDocumentSendTCSequenceItem *)pStep : (CTCProcedureDocumentSendTCSequenceItem *)NULL))
				{
					for (nEntry = 0, nEntries = pSendTCSequenceItem->GetSize(), nIndex = 0; nEntry < nEntries; nEntry = nEntry + 1)
					{
						if ((pSendTCFunctionItem = pSendTCSequenceItem->GetAt(nEntry)) && (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_PROCEDURE) == 0 && pSendTCFunctionItem->GetFunction(&cDatabaseTCFunction, &cDatabaseTCPacket))
						{
							for (szBlock[2].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_CHECKEXECUTIONPARAMETERGROUP), (LPCTSTR)cDatabaseTCFunction.GetExeVerGroup()), szBlock[1].Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_SENDTCFUNCTION_EXECUTION_STATEMENT), (LPCTSTR)pStep->GetName(), ++nIndex, (pSendTCFunctionItem->GetOptions() & TCPROCEDURESENDTCSEQUENCEITEM_OPTIONS_IGNOREEXEVERIFICATION) ? (LPCTSTR)TranslateConditionExpression(pSendTCFunctionItem->GetExecutionVerificationCondition()) : (LPCTSTR)szBlock[2]), szBlock[0] += (!szBlock[0].IsEmpty()) ? (CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE) + szBlock[1]) : szBlock[1]; (pDatabaseTCExeVerGroup = pDatabase->GetTCExeVerGroups()->GetAt(pDatabase->GetTCExeVerGroups()->Find(cDatabaseTCFunction.GetExeVerGroup()))); )
							{
								for (nParameter = 0, nParameters = (INT)pDatabaseTCExeVerGroup->GetSize(); nParameter < nParameters; nParameter++)
								{
									if ((pDatabaseTCExeVerGroupParameter = pDatabaseTCExeVerGroup->GetAt(nParameter)))
									{
										for (szParameter.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_PARAMETERENUMERATION_STATEMENT), (LPCTSTR)pDatabaseTCExeVerGroupParameter->GetTag()); szParameters.Find(szParameter) < 0; )
										{
											szParameters += CString(CR) + CString(EOL) + szParameter;
											break;
										}
									}
								}
								break;
							}
						}
					}
				}
			}
			szStatements = (!szBlock[0].IsEmpty()) ? (szBlock[0] + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE)) : EMPTYSTRING;
		}
		delete pDocument;
	}
	return szStatements;
}

CString CTCProcedureCompileThread::ExtractThreadCode(LPCTSTR pszSourceCode, LPCTSTR pszThread) CONST
{
	INT  nCount;
	TCHAR  szChar;
	LPCTSTR  pPos[3];
	CString  szThread;
	CString  szStatements;

	for (pPos[0] = pszSourceCode; (pPos[1] = FindTelecommandProcedureLangaugeSourceCodeKeyword(pPos[0], STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_THREAD))); )
	{
		for (pPos[1] += lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_THREAD)); lstrlen(pPos[1]) > 0; pPos[1]++)
		{
			if (!_istspace(pPos[1][0])) break;
			continue;
		}
		if ((szChar = pPos[1][0]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER))
		{
			for (szThread.Empty(), pPos[1]++; lstrlen(pPos[1]) > 0 && pPos[1][0] != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_DELIMITER); pPos[1]++)
			{
				szThread += pPos[1][0];
				continue;
			}
			if (szThread == pszThread)
			{
				if ((pPos[1] = FindTelecommandProcedureLangaugeSourceCodeKeyword(pPos[1], STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_BEGIN))))
				{
					for (pPos[1] += lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_BEGIN)); lstrlen(pPos[1]) > 0; pPos[1]++)
					{
						if (((szChar = pPos[1][0]) != SPACE[0] && szChar != TAB) || szChar == CR || szChar == EOL) break;
						continue;
					}
					for (pPos[1]++; szChar == CR && pPos[1][0] == EOL; )
					{
						pPos[1]++;
						break;
					}
					for (; (nCount = (INT)_tcsspn(pPos[1], SPACE)) > 0; )
					{
						pPos[1] += nCount;
						break;
					}
				}
				if ((pPos[2] = FindTelecommandProcedureLangaugeSourceCodeKeyword(pPos[1], STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_END))))
				{
					for (pPos[2] = pPos[2] - 1; pPos[1] < pPos[2]; pPos[2] = pPos[2] - 1)
					{
						if (((szChar = pPos[2][0]) != SPACE[0] && szChar != TAB) || szChar == CR || szChar == EOL) break;
						continue;
					}
					for (pPos[2]--; szChar == EOL && pPos[2][0] == CR; )
					{
						pPos[2]--;
						break;
					}
				}
				if (pPos[1] < pPos[2] && pPos[1] > 0)
				{
					szStatements = CString(pPos[1], (INT)(pPos[2] - pPos[1] + 1)) + CString(CR) + CString(EOL) + CString(SPACE) + CString(SPACE);
					return szStatements;
				}
			}
		}
		pPos[0] = pPos[1];
	}
	return EMPTYSTRING;
}

CString CTCProcedureCompileThread::ExtractFunctions(CONST CDatabaseTCProcedure *pDatabaseTCProcedure, LPCTSTR pszSourceCode) CONST
{
	INT  nPos[4];
	INT  nKeyword;
	INT  nKeywords;
	CString  szSourceCode;

	for (nPos[0] = 0, szSourceCode = pszSourceCode; (nPos[1] = (pDatabaseTCProcedure->GetAttributes() & (TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE | TCPROCEDURE_SOURCECODE_CUSTOM)) ? FindTelecommandProcedureLangaugeSourceCodeKeyword(szSourceCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_THREAD), nPos[0]) : -1) >= 0; )
	{
		for (nPos[2] = FindTelecommandProcedureLangaugeSourceCodeKeyword(szSourceCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_BEGIN), nPos[0] + nPos[1]); (nPos[3] = FindTelecommandProcedureLangaugeSourceCodeKeyword(szSourceCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_END), nPos[0] + nPos[1] + nPos[2])) >= 0; )
		{
			szSourceCode = szSourceCode.Left(nPos[0] + nPos[1]) + szSourceCode.Mid(nPos[0] + nPos[1] + nPos[2] + nPos[3] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_END)));
			break;
		}
		if (nPos[3] < 0) break;
	}
	for (nPos[0] = 0; (nPos[1] = FindTelecommandProcedureLangaugeSourceCodeKeyword(szSourceCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_BEGIN), nPos[0])) >= 0; )
	{
		if ((nPos[2] = FindTelecommandProcedureLangaugeSourceCodeKeyword(szSourceCode, STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_END), nPos[0] + nPos[1])) >= 0)
		{
			for (nKeyword = MINTELECOMMANDPROCEDURELANGUAGEKEYWORD, nKeywords = MAXTELECOMMANDPROCEDURELANGUAGEKEYWORD, szSourceCode = szSourceCode.Mid(nPos[0] + nPos[1] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_BEGIN)), nPos[2] - lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_BEGIN))); nKeyword <= nKeywords; nKeyword++)
			{
				if (FindTelecommandProcedureLangaugeSourceCodeKeyword(szSourceCode, STRING(nKeyword), 0) >= 0) break;
				continue;
			}
			if (nKeyword == nKeywords + 1)
			{
				for (nPos[0] = 0; (nPos[1] = szSourceCode.Mid(nPos[0]).Find(CString(CR) + CString(EOL))) >= 0; nPos[0] = (nPos[1] > 0) ? (nPos[0] + nPos[1] + lstrlen(CString(CR) + CString(EOL))) : nPos[0])
				{
					szSourceCode = (!nPos[1]) ? (szSourceCode.Left(nPos[0] + nPos[1]) + szSourceCode.Mid(nPos[0] + nPos[1] + lstrlen(CString(CR) + CString(EOL)))) : szSourceCode;
					continue;
				}
				return((!szSourceCode.IsEmpty()) ? (szSourceCode + CR + EOL + CR + EOL) : EMPTYSTRING);
			}
		}
		break;
	}
	return EMPTYSTRING;
}

INT CTCProcedureCompileThread::CalculateTCFunctionElementOffset(CONST CBinaryDatabase *pDatabase, CONST CDatabaseTCFunction *pDatabaseTCFunction) CONST
{
	INT  nIndex;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement[2];

	return(((pDatabaseTCFunctionElement[1] = ((pDatabaseTCFunctionElement[0] = ((nIndex = pDatabase->GetTCFunctions()->Find(pDatabaseTCFunction->GetName())) >= 0) ? pDatabase->GetTCFunctions()->GetAt(nIndex)->GetAt(0) : (CDatabaseTCFunctionElement *)NULL)) ? pDatabaseTCFunction->GetAt(0) : (CDatabaseTCFunctionElement *)NULL) && pDatabaseTCFunctionElement[0]->GetName() == pDatabaseTCFunctionElement[1]->GetName()) ? (pDatabaseTCFunctionElement[1]->GetBytePos() - pDatabaseTCFunctionElement[0]->GetBytePos()) : -1);
}

INT CTCProcedureCompileThread::CalculateTCFunctionElementCount(CONST CBinaryDatabase *pDatabase, CONST CDatabaseTCFunction *pDatabaseTCFunction) CONST
{
	INT  nIndex;
	INT  nElement;
	INT  nElements;
	INT  nByteOffset;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement[2];

	for (nElement = 0, nElements = ((nIndex = pDatabase->GetTCFunctions()->Find(pDatabaseTCFunction->GetName())) >= 0) ? (INT)pDatabase->GetTCFunctions()->GetAt(nIndex)->GetSize() : -1, nByteOffset = CalculateTCFunctionElementOffset(pDatabase, pDatabaseTCFunction); nElement < nElements; nElement++)
	{
		if ((pDatabaseTCFunctionElement[1] = ((pDatabaseTCFunctionElement[0] = pDatabase->GetTCFunctions()->GetAt(nIndex)->GetAt(nElement))) ? pDatabaseTCFunction->GetAt(nElement) : (CDatabaseTCFunctionElement *)NULL) && pDatabaseTCFunctionElement[0]->GetName() == pDatabaseTCFunctionElement[1]->GetName() && pDatabaseTCFunctionElement[0]->GetBytePos() + nByteOffset == pDatabaseTCFunctionElement[1]->GetBytePos()) continue;
		break;
	}
	return((nElement == nElements) ? nElement : -1);
}

BOOL CTCProcedureCompileThread::CheckArgumentIdentifierName(LPCTSTR pszName) CONST
{
	INT  nPos;
	INT  nLength;

	for (nPos = 0, nLength = lstrlen(pszName); nPos < nLength; nPos++)
	{
		if (!_istalnum(pszName[nPos]) && pszName[nPos] != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE)) break;
		continue;
	}
	return((nPos == nLength) ? TRUE : FALSE);
}

BOOL CTCProcedureCompileThread::CheckVariableIdentifierName(LPCTSTR pszName) CONST
{
	INT  nPos;
	INT  nLength;

	for (nPos = 0, nLength = lstrlen(pszName); nPos < nLength; nPos++)
	{
		if (!_istalnum(pszName[nPos]) && pszName[nPos] != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE)) break;
		continue;
	}
	return((nPos == nLength) ? TRUE : FALSE);
}

CString CTCProcedureCompileThread::TranslateToIdentifierName(LPCTSTR pszName) CONST
{
	INT  nPos;
	INT  nLength;
	CString  szName;

	for (nPos = 0, nLength = lstrlen((szName = pszName)); nPos < nLength; nPos++)
	{
		if (_istspace(pszName[nPos])) szName.SetAt(nPos, STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE));
		continue;
	}
	return szName;
}

CString CTCProcedureCompileThread::TranslateIdentifierDataType(ULONGLONG nAttributes, INT nWidth, BOOL bDeclaration) CONST
{
	if ((nAttributes & TCPARAMETER_CODING_SIGNEDINTEGER) && (nAttributes & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0)
	{
		if (nWidth == 8 * sizeof(CHAR)) return STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_CHAR);
		if (nWidth == 8 * sizeof(SHORT)) return STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_SHORT);
		return STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_INT);
	}
	if (((nAttributes & TCPARAMETER_CODING_BITPATTERN) || (nAttributes & TCPARAMETER_CODING_UNSIGNEDINTEGER)) && (nAttributes & (TCPARAMETER_CALIBRATION_NUMERICAL | TCPARAMETER_CALIBRATION_STATUS)) == 0)
	{
		if (nWidth == 8 * sizeof(BYTE)) return STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_BYTE);
		if (nWidth == 8 * sizeof(USHORT)) return STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_USHORT);
		return STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_UINT);
	}
	if ((nAttributes & TCPARAMETER_CODING_FLOATINGPOINT) || (nAttributes & TCPARAMETER_CALIBRATION_NUMERICAL))
	{
		if (nWidth == 8 * sizeof(FLOAT)) return STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_FLOAT);
		return STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_DOUBLE);
	}
	if (nAttributes & TCPARAMETER_CODING_TIME) return STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_TIMETAG);
	if ((nAttributes & TCPARAMETER_CODING_TEXTSTRING) || (nAttributes & TCPARAMETER_CALIBRATION_STATUS)) return((bDeclaration) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERDATATYPE_LPCTSTR) : STRING(IDS_TELECOMMANDPROCEDUREFILE_IDENTIFIERCLASSTYPE_STRING));
	return EMPTYSTRING;
}

CString CTCProcedureCompileThread::TranslateConditionExpression(LPCTSTR pszExpression) CONST
{
	return((!lstrlen(pszExpression)) ? STRING(IDS_TELECOMMANDPROCEDUREFILE_DEFAULT_CONDITION) : pszExpression);
}

INT CTCProcedureCompileThread::FindTelecommandProcedureLangaugeSourceCodeKeyword(LPCTSTR pszSourceCode, LPCTSTR pszKeyword, INT nPos) CONST
{
	LPCTSTR  pPos;

	return(((pPos = FindTelecommandProcedureLangaugeSourceCodeKeyword(&pszSourceCode[nPos], pszKeyword))) ? ((INT)(pPos - pszSourceCode) - nPos) : -1);
}
LPCTSTR CTCProcedureCompileThread::FindTelecommandProcedureLangaugeSourceCodeKeyword(LPCTSTR pszSourceCode, LPCTSTR pszKeyword) CONST
{
	LPCTSTR  pPos[2];

	for (pPos[0] = pszSourceCode; (pPos[1] = _tcsstr(pPos[0], pszKeyword)); pPos[0] = pPos[1] + lstrlen(pszKeyword))
	{
		if ((pPos[1] == pszSourceCode || (!_istalnum(pPos[1][-1]) && pPos[1][-1] != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE))) && (pPos[1] == pszSourceCode + lstrlen(pszSourceCode) - lstrlen(pszKeyword) || (!_istalnum(pPos[1][lstrlen(pszKeyword)]) && pPos[1][lstrlen(pszKeyword)] != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE)))) break;
		continue;
	}
	return pPos[1];
}

BOOL CTCProcedureCompileThread::CheckSourceCode(LPCTSTR pszSourceCode, INT nCodePos, BOOL bCommentsOnly) CONST
{
	INT  nPos;
	INT  nCount;
	TCHAR  szChar;
	LPCTSTR  pPos[3];

	for (pPos[0] = pszSourceCode; (pPos[1] = _tcsstr(pPos[0], STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINCOMMENTS))) && pPos[1] - pszSourceCode < nCodePos; pPos[0] = pPos[2] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS)))
	{
		if ((pPos[2] = _tcsstr(pPos[1], STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS))) && pPos[2] - pszSourceCode < nCodePos) continue;
		break;
	}
	for (nPos = (!pPos[1]) ? nCodePos : -1; nPos > 0; nPos--)
	{
		if ((szChar = pszSourceCode[nPos]) != CR  &&  szChar != EOL)
		{
			if (_tcsncmp(&pszSourceCode[nPos], STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_LINECOMMENTS), lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_LINECOMMENTS)))) continue;
			nPos = -1;
		}
		break;
	}
	if (nPos < 0)
	{
		if (!bCommentsOnly)
		{
			for (pPos[0] = pszSourceCode, nCount = 0; (pPos[1] = _tcsstr(pPos[0], STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE))) && pPos[1] - pszSourceCode < nCodePos; pPos[0] = pPos[1] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE)))
			{
				if (CheckSourceCode(pszSourceCode, (INT)(pPos[1] - pszSourceCode), TRUE)) nCount++;
				continue;
			}
			return(nCount % 2 == 0);
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureCompileThread::CheckSourceCodeLine(LPCTSTR pszSourceCode, LPCTSTR pszLine, INT nLinePos) CONST
{
	INT  nPos[6];
	INT  nLength;
	INT  nKeyword;
	INT  nKeywords;
	CString  szLine;
	CString  szCode;
	CString  szKeyword;

	for (nPos[0] = 0, szCode = pszSourceCode, szLine = pszLine, nLength = szLine.GetLength(); nPos[0] < nLength; nPos[0]++)
	{
		if (_istalpha(szLine.GetAt(nPos[0])) || szLine.GetAt(nPos[0]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE))
		{
			if (szLine.Mid(nPos[0]) == (szKeyword = STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_ELSE)) || !_tcsncmp(szLine.Mid(nPos[0]), szKeyword, lstrlen((szKeyword = CString(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_ELSE)) + SPACE))) || !_tcsncmp(szLine.Mid(nPos[0]), szKeyword, lstrlen((szKeyword = CString(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_ELSE)) + STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_KEYWORDEXTENSION)))))
			{
				szLine = szLine.Mid(nPos[0] + szKeyword.GetLength());
				nLength = szLine.GetLength();
				nPos[0] = -1;
				continue;
			}
			if (!_tcsncmp(szLine.Mid(nPos[0]), szKeyword, lstrlen((szKeyword = CString(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_CASE))))) || !_tcsncmp(szLine.Mid(nPos[0]), szKeyword, lstrlen((szKeyword = CString(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_DEFAULT))))))
			{
				for (nPos[0] += szKeyword.GetLength(); nPos[0] < nLength; nPos[0]++)
				{
					if (!_istspace(szLine.GetAt(nPos[0]))) break;
					continue;
				}
				for (; nPos[0] < nLength; nPos[0]++)
				{
					if (!_istalnum(szLine.GetAt(nPos[0])) && szLine.GetAt(nPos[0]) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_SUBSTITUTE)) break;
					continue;
				}
				for (; nPos[0] < nLength; nPos[0]++)
				{
					if (!_istspace(szLine.GetAt(nPos[0]))) break;
					continue;
				}
				if (nPos[0] < nLength  &&  szLine.GetAt(nPos[0]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_KEYWORDEXTENSION))
				{
					szLine = szLine.Mid(nPos[0] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_KEYWORDEXTENSION)));
					nLength = szLine.GetLength();
					nPos[0] = -1;
					continue;
				}
				break;
			}
			if (!_tcsncmp(szLine.Mid(nPos[0]), szKeyword, lstrlen((szKeyword = STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_KEYWORD_SWITCH)))))
			{
				for (nPos[0] += szKeyword.GetLength(); nPos[0] < nLength; nPos[0]++)
				{
					if (!_istspace(szLine.GetAt(nPos[0]))) break;
					continue;
				}
				if (nPos[0] < nLength  &&  szLine.GetAt(nPos[0]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINARGUMENTS))
				{
					for (nPos[0] += lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINARGUMENTS)); nPos[0] < nLength; nPos[0]++)
					{
						if (szLine.GetAt(nPos[0]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDARGUMENTS)) break;
						continue;
					}
					if (nPos[0] < nLength)
					{
						szLine = szLine.Mid(nPos[0]);
						nLength = szLine.GetLength();
						nPos[0] = -1;
						continue;
					}
				}
			}
			break;
		}
		if ((nPos[1] = nPos[2] = szLine.Mid(nPos[0]).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS))) >= 0)
		{
			for (nPos[1] -= lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS)); nPos[0] + nPos[1] >= 0; nPos[1]--)
			{
				if (szLine.Mid(nPos[0] + nPos[1], lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINCOMMENTS))) == STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINCOMMENTS))
				{
					szLine = szLine.Left(nPos[0] + nPos[1]) + szLine.Mid(nPos[0] + nPos[2] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS)));
					nLength = szLine.GetLength();
					nPos[0] = -1;
					break;
				}
			}
			if (nPos[0] + nPos[1] < 0 && nPos[0] >= 0)
			{
				szLine.Empty();
				nLength = 0;
				break;
			}
			continue;
		}
		if (szLine.GetAt(nPos[0]) == STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_TERMINATOR)) break;
	}
	for (nPos[0] = (nPos[0] == nLength) ? nPos[0] : 0; nPos[0] < nLength; nPos[0]++)
	{
		if (szLine.Mid(nPos[0], lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_LINECOMMENTS))) == STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_LINECOMMENTS))
		{
			nPos[0] = nLength;
			break;
		}
		if (!_istspace(szLine.GetAt(nPos[0]))) break;
	}
	if (nPos[0] < nLength)
	{
		for (nPos[0] = 0, nPos[3] = -1, nPos[4] = nLinePos; (nPos[0] = szCode.Mid(max(nPos[3], 0)).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINCOMMENTS))) >= 0 && nPos[0] + max(nPos[3], 0) < nPos[4]; )
		{
			nPos[3] = nPos[0] + max(nPos[3], 0) + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_BEGINCOMMENTS));
			continue;
		}
		for (nKeyword = MINTELECOMMANDPROCEDURELANGUAGEKEYWORD, nKeywords = MAXTELECOMMANDPROCEDURELANGUAGEKEYWORD; nKeyword <= nKeywords; nKeyword++)
		{
			for (nPos[5] = 0; nPos[5] < nLength; nPos[5]++)
			{
				if (!_istspace(szLine.GetAt(nPos[5]))) break;
				continue;
			}
			if (!szLine.Mid(nPos[5]).Find(CString(STRING(nKeyword)) + SPACE) || szLine.Mid(nPos[5]) == STRING(nKeyword)) break;
			continue;
		}
		return((nPos[3] < 0 || szCode.Mid(nPos[3]).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS)) < nLength - nPos[3] + nPos[4] - lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_ENDCOMMENTS)) && nKeyword == nKeywords + 1) ? TRUE : FALSE);
	}
	return FALSE;
}

VOID CTCProcedureCompileThread::ConvertSourceCodeToData(LPCTSTR pszSourceCode, CByteArray &nData) CONST
{
	nData.SetSize(lstrlen(pszSourceCode));
#ifndef UNICODE
	CopyMemory(nData.GetData(), (LPCVOID)pszSourceCode, nData.GetSize() - 1);
#else
	WideCharToMultiByte(CP_ACP, 0, pszSourceCode, -1, (LPSTR)nData.GetData(), (INT)nData.GetSize(), (LPCSTR)NULL, (LPBOOL)NULL);
#endif
}

CString CTCProcedureCompileThread::FormatTelecommandProcedureCompilerErrors(CONST CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedure *pDatabaseTCProcedure, LPCTSTR pszSourceCode, LPCTSTR pszError, INT nLine)
{
	INT  nIndex;
	INT  nPos[2];
	INT  nThread;
	INT  nThreads;
	TCHAR  szChar;
	DWORD  dwCode;
	LPSTR  pszCode;
	CFileEx  cFile;
	CString  szName;
	CString  szStep;
	CString  szData;
	CString  szLine;
	CString  szError[2];
	LPCTSTR  pData[5];
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if (nLine > 0)
	{
		if (!m_szLines.GetSize())
		{
			if (cFile.Open(GetTelecommandProcedureFileName(pDatabase, STRING(IDS_TELECOMMANDPROCEDUREFILE_COMPILENAME)), CFile::modeRead))
			{
				if ((pszCode = (LPSTR)GlobalAlloc(GPTR, (SIZE_T)cFile.GetLength() + 1)) != (LPSTR)NULL)
				{
					if (ReadFile(cFile.m_hFile, pszCode, (DWORD)cFile.GetLength(), &dwCode, (LPOVERLAPPED)NULL))
					{
#ifndef UNICODE
						szData = pszCode;
#else
						MultiByteToWideChar(CP_ACP, 0, pszCode, (INT)strlen(pszCode), szData.GetBufferSetLength((INT)strlen(pszCode)), (INT)strlen(pszCode));
						szData.ReleaseBuffer();
#endif
						for (nPos[0] = 0, pData[0] = szData; nPos[0] < szData.GetLength(); )
						{
							pData[1] = _tcsstr(pData[0] + nPos[0], CString(CR) + CString(EOL));
							pData[2] = _tcsstr(pData[0] + nPos[0], CString(CR));
							pData[3] = _tcsstr(pData[0] + nPos[0], CString(EOL));
							pData[4] = (pData[1]) ? ((pData[2]) ? ((pData[1] <= pData[2]) ? pData[1] : pData[2]) : pData[1]) : pData[2];
							pData[4] = (pData[4]) ? ((pData[3]) ? ((pData[4] <= pData[3]) ? pData[4] : pData[3]) : pData[4]) : pData[3];
							if (pData[4] && (pData[4] != pData[2] || pData[4] - pData[0] < szData.GetLength() - 1))
							{
								if (!_tcsncpy_s(szLine.GetBufferSetLength((INT)(pData[4] - pData[0] - nPos[0])), (INT)(pData[4] - pData[0] - nPos[0]) + 1, pData[0] + nPos[0], (INT)(pData[4] - pData[0] - nPos[0])))
								{
									szLine.ReleaseBuffer();
									m_szLines.Add(szLine);
								}
								nPos[0] += (pData[1] == pData[4]) ? (szLine.GetLength() + lstrlen(CString(CR) + CString(EOL))) : (szLine.GetLength() + max(lstrlen(CString(CR)), lstrlen(CString(EOL))));
								szLine.ReleaseBuffer();
								continue;
							}
							m_szLines.Add(pData[0] + nPos[0]);
							break;
						}
						szData.Empty();
					}
					GlobalFree(pszCode);
				}
				cFile.Close();
			}
		}
		if (nLine < m_szLines.GetSize())
		{
			for (nIndex = nLine - 1; nIndex >= 0; nIndex--)
			{
				if ((nPos[0] = m_szLines.GetAt(nIndex).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_CODESEARCHKEY))) >= 0)
				{
					for (nThread = 0, nThreads = ((nPos[1] = m_szLines.GetAt(nIndex).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY))) >= 0) ? (INT)pDatabaseTCProcedure->GetSize() : -1, szName = (nPos[0] > nPos[1] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY)) && nPos[1] >= 0) ? m_szLines.GetAt(nIndex).Mid(nPos[1] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY)) + 1, nPos[0] - nPos[1] - lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY)) - 1) : EMPTYSTRING; nThread < nThreads; nThread++)
					{
						if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(nThread)) && szName == TranslateToIdentifierName(pDatabaseTCProcedureThread->GetName()))
						{
							szError[1].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_GENERICCODEFORMAT), (LPCTSTR)pDatabaseTCProcedure->GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), nLine - nIndex - 1 - 1, pszError);
							break;
						}
					}
					for (; nThread == nThreads; )
					{
						szError[1].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_SIMPLEFORMAT), (LPCTSTR)pDatabaseTCProcedure->GetName(), pszError);
						break;
					}
					break;
				}
				if ((nPos[0] = m_szLines.GetAt(nIndex).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ACTIVATIONEXPRESSIONSEARCHKEY))) >= 0)
				{
					for (nThread = 0, nThreads = ((nPos[1] = m_szLines.GetAt(nIndex).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY))) >= 0) ? (INT)pDatabaseTCProcedure->GetSize() : -1, szName = (nPos[0] > nPos[1] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY)) && nPos[1] >= 0) ? m_szLines.GetAt(nIndex).Mid(nPos[1] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY)) + 1, nPos[0] - nPos[1] - lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY)) - 1) : EMPTYSTRING; nThread < nThreads; nThread++)
					{
						if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(nThread)) && szName == TranslateToIdentifierName(pDatabaseTCProcedureThread->GetName()))
						{
							szError[0].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTHREADACTIVATIONEXPRESSION), pszError);
							szError[1].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_GENERICSIMPLECODEFORMAT), (LPCTSTR)pDatabaseTCProcedure->GetName(), (LPCTSTR)pDatabaseTCProcedureThread->GetName(), (LPCTSTR)szError[0]);
							break;
						}
					}
					for (; nThread == nThreads; )
					{
						szError[1].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_SIMPLEFORMAT), (LPCTSTR)pDatabaseTCProcedure->GetName(), pszError);
						break;
					}
					break;
				}
				if ((nPos[0] = m_szLines.GetAt(nIndex).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_TRIGGEREXPRESSIONSEARCHKEY))) >= 0)
				{
					for (nThread = 0, nThreads = ((nPos[1] = m_szLines.GetAt(nIndex).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY))) >= 0) ? (INT)pDatabaseTCProcedure->GetSize() : -1, szName = (nPos[0] > nPos[1] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY)) && nPos[1] >= 0) ? m_szLines.GetAt(nIndex).Mid(nPos[1] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY)) + 1, nPos[0] - nPos[1] - lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY)) - 1) : EMPTYSTRING; nThread < nThreads; nThread++)
					{
						if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(nThread)) && szName == TranslateToIdentifierName(pDatabaseTCProcedureThread->GetName()))
						{
							szName = pDatabaseTCProcedureThread->GetName();
							break;
						}
					}
					if (nThread < nThreads)
					{
						if ((nPos[1] = m_szLines.GetAt(nLine - 1).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSTEPSEARCHKEY))) >= 0)
						{
							for (nPos[1] += lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSTEPSEARCHKEY)), szStep.Empty(); nPos[1] < m_szLines.GetAt(nLine - 1).GetLength(); nPos[1]++)
							{
								if ((szChar = m_szLines.GetAt(nLine - 1).GetAt(nPos[1])) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE))
								{
									szStep += szChar;
									continue;
								}
								break;
							}
							szError[0].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALTRIGGEREXPRESSION), pszError);
							szError[1].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_GENERICEXPRESSIONFORMAT), (LPCTSTR)pDatabaseTCProcedure->GetName(), (LPCTSTR)szName, (LPCTSTR)szStep, (LPCTSTR)szError[0]);
							break;
						}
					}
					szError[1].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_SIMPLEFORMAT), (LPCTSTR)pDatabaseTCProcedure->GetName(), pszError);
					break;
				}
				if ((nPos[0] = m_szLines.GetAt(nIndex).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_BODYEXPRESSIONSEARCHKEY))) >= 0)
				{
					for (nThread = 0, nThreads = ((nPos[1] = m_szLines.GetAt(nIndex).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY))) >= 0) ? (INT)pDatabaseTCProcedure->GetSize() : -1, szName = (nPos[0] > nPos[1] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY)) && nPos[1] >= 0) ? m_szLines.GetAt(nIndex).Mid(nPos[1] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY)) + 1, nPos[0] - nPos[1] - lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY)) - 1) : EMPTYSTRING; nThread < nThreads; nThread++)
					{
						if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(nThread)) && szName == TranslateToIdentifierName(pDatabaseTCProcedureThread->GetName()))
						{
							szName = pDatabaseTCProcedureThread->GetName();
							break;
						}
					}
					if (nThread < nThreads)
					{
						if ((nPos[1] = m_szLines.GetAt(nLine - 1).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSTEPSEARCHKEY))) >= 0)
						{
							for (nPos[1] += lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSTEPSEARCHKEY)), szStep.Empty(); nPos[1] < m_szLines.GetAt(nLine - 1).GetLength(); nPos[1]++)
							{
								if ((szChar = m_szLines.GetAt(nLine - 1).GetAt(nPos[1])) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE))
								{
									szStep += szChar;
									continue;
								}
								break;
							}
							szError[0].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALBODYEXPRESSION), pszError);
							szError[1].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_GENERICEXPRESSIONFORMAT), (LPCTSTR)pDatabaseTCProcedure->GetName(), (LPCTSTR)szName, (LPCTSTR)szStep, (LPCTSTR)szError[0]);
							break;
						}
					}
					szError[1].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_SIMPLEFORMAT), (LPCTSTR)pDatabaseTCProcedure->GetName(), pszError);
					break;
				}
				if ((nPos[0] = m_szLines.GetAt(nIndex).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_CONFIRMATIONEXPRESSIONSEARCHKEY))) >= 0)
				{
					for (nThread = 0, nThreads = ((nPos[1] = m_szLines.GetAt(nIndex).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY))) >= 0) ? (INT)pDatabaseTCProcedure->GetSize() : -1, szName = (nPos[0] > nPos[1] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY)) && nPos[1] >= 0) ? m_szLines.GetAt(nIndex).Mid(nPos[1] + lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY)) + 1, nPos[0] - nPos[1] - lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSEARCHKEY)) - 1) : EMPTYSTRING; nThread < nThreads; nThread++)
					{
						if ((pDatabaseTCProcedureThread = pDatabaseTCProcedure->GetAt(nThread)) && szName == TranslateToIdentifierName(pDatabaseTCProcedureThread->GetName()))
						{
							szName = pDatabaseTCProcedureThread->GetName();
							break;
						}
					}
					if (nThread < nThreads)
					{
						if ((nPos[1] = m_szLines.GetAt(nLine - 1).Find(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSTEPSEARCHKEY))) >= 0)
						{
							for (nPos[1] += lstrlen(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_THREADSTEPSEARCHKEY)), szStep.Empty(); nPos[1] < m_szLines.GetAt(nLine - 1).GetLength(); nPos[1]++)
							{
								if ((szChar = m_szLines.GetAt(nLine - 1).GetAt(nPos[1])) != STRINGCHAR(IDS_TELECOMMANDPROCEDURELANGUAGE_SYMBOL_STRINGQUOTE))
								{
									szStep += szChar;
									continue;
								}
								break;
							}
							szError[0].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_ILLEGALCONFIRMATIONEXPRESSION), pszError);
							szError[1].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_GENERICEXPRESSIONFORMAT), (LPCTSTR)pDatabaseTCProcedure->GetName(), (LPCTSTR)szName, (LPCTSTR)szStep, (LPCTSTR)szError[0]);
							break;
						}
					}
					szError[1].Format(STRING(IDS_TELECOMMANDPROCEDURELANGUAGE_COMPILEERROR_SIMPLEFORMAT), (LPCTSTR)pDatabaseTCProcedure->GetName(), pszError);
					break;
				}
			}
		}
	}
	return((!szError[1].IsEmpty()) ? szError[1] : pszError);
}

VOID CTCProcedureCompileThread::ShowTelecommandProcedureCompilerErrors(CONST CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedure *pDatabaseTCProcedure, LPCTSTR pszSourceCode, LPCTSTR pszErrors)
{
	INT  nLine;
	INT  nPos[3];
	TCHAR  szChar;
	CString  szDigit;
	CString  szError;
	CString  szErrors;
	CString  szPrefix;
	CString  szMessage;
	CString  szFileName;
	CFileFindEx  cFileFind;
	CStringTools  cStringTools;

	for (szErrors = szMessage = pszErrors, szMessage.MakeLower(), nLine = 0; szErrors.GetLength() > 0; szMessage = szErrors, szMessage.MakeLower(), nLine = 0)
	{
		nPos[0] = szMessage.Find(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_COMPILEFATALERRORPREFIX));
		nPos[0] = nPos[1] = ((nPos[1] = szMessage.Find(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_COMPILECOMMANDLINEPREFIX))) >= 0) ? ((nPos[0] >= 0) ? min(nPos[0], nPos[1]) : nPos[1]) : nPos[0];
		if (cFileFind.FindFile(GetTelecommandProcedureFileName(pDatabase, STRING(IDS_TELECOMMANDPROCEDUREFILE_COMPILENAME))) && !cFileFind.FindNextFile() && (nPos[0] > szMessage.Find((!_tcslwr_s((szFileName = cFileFind.GetFileName()).GetBufferSetLength(cFileFind.GetFileName().GetLength()), cFileFind.GetFileName().GetLength() + 1)) ? szFileName : EMPTYSTRING) || nPos[0] < 0))
		{
			for (szFileName.ReleaseBuffer(), nPos[1] = ((nPos[0] = szMessage.Find(szFileName)) >= 0) ? (nPos[0] + szFileName.GetLength() + 1) : -1, szDigit = cStringTools.ConvertUIntToString(0); nPos[1] >= 0 && nPos[1] < szErrors.GetLength(); nPos[1]++)
			{
				if (_istdigit((szChar = szErrors.GetAt(nPos[1]))))
				{
					nLine = 10 * nLine + szChar - szDigit.GetAt(0);
					continue;
				}
				if (nLine > 0) break;
			}
		}
		if (nPos[1] >= 0)
		{
			for (szError.Empty(); nPos[1] < szErrors.GetLength() && nLine > 0; nPos[1]++)
			{
				if (_istalpha(szErrors.GetAt(nPos[1]))) break;
				continue;
			}
			while (nPos[1] < szErrors.GetLength())
			{
				if (szErrors.GetAt(nPos[1]) != CR  &&  szErrors.GetAt(nPos[1]) != EOL)
				{
					szError += szErrors.GetAt(nPos[1]);
					nPos[1]++;
					continue;
				}
				break;
			}
			if (!(szMessage = FormatTelecommandProcedureCompilerErrors(pDatabase, pDatabaseTCProcedure, pszSourceCode, szError, nLine)).IsEmpty())
			{
				szMessage = szMessage.Left(szMessage.GetLength());
				ShowCompileMessage(szMessage);
			}
			for (; nPos[1] < szErrors.GetLength(); )
			{
				if (szErrors.GetAt(nPos[1]) == CR || szErrors.GetAt(nPos[1]) == EOL)
				{
					nPos[1]++;
					continue;
				}
				break;
			}
			for (nPos[2] = 0, szError.MakeUpper(), szPrefix = STRING(IDS_COMPILER_MESSAGE_ERROR_PREFIX), szPrefix.MakeUpper(); nPos[2] < szPrefix.GetLength(); nPos[2]++)
			{
				if (!_istalpha(szPrefix.GetAt(nPos[2])))
				{
					szPrefix = szPrefix.Left(nPos[2]);
					break;
				}
			}
			if (_tcsstr(szError, szPrefix))
			{
				SetErrorCount(GetErrorCount() + 1);
				szErrors = szErrors.Mid(nPos[1]);
				continue;
			}
			SetWarningCount((!szErrors.IsEmpty()) ? (GetWarningCount() + 1) : GetWarningCount());
			szFileName.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_COMPILENAME), (LPCTSTR)m_cDatabaseTCProcedure.GetName());
			if (!szErrors.Mid(nPos[1]).Left(szFileName.GetLength()).CompareNoCase(szFileName) && (szErrors.GetAt(nPos[1] + szFileName.GetLength()) == CR || szErrors.GetAt(nPos[1] + szFileName.GetLength()) == EOL))
			{
				for (nPos[1] = nPos[1] + szFileName.GetLength(); nPos[1] < szErrors.GetLength(); nPos[1]++)
				{
					if (szErrors.GetAt(nPos[1]) == CR || szErrors.GetAt(nPos[1]) == EOL) continue;
					break;
				}
			}
			szErrors = szErrors.Mid(nPos[1]);
			continue;
		}
		for (nPos[0] = 0, szError.Empty(); nPos[0] < szErrors.GetLength(); nPos[0]++)
		{
			if (szErrors.GetAt(nPos[0]) != CR  &&  szErrors.GetAt(nPos[0]) != EOL)
			{
				szError += szErrors.GetAt(nPos[0]);
				continue;
			}
			break;
		}
		if (!_istspace(szError.GetAt(0)))
		{
			ShowCompileMessage(szError);
			SetErrorCount(GetErrorCount() + 1);
		}
		else  ShowCompileMessage(szError, FALSE);
		while (nPos[0] < szErrors.GetLength())
		{
			if (szErrors.GetAt(nPos[0]) == CR || szErrors.GetAt(nPos[0]) == EOL)
			{
				nPos[0]++;
				continue;
			}
			break;
		}
		szFileName.Format(STRING(IDS_TELECOMMANDPROCEDUREFILE_COMPILENAME), (LPCTSTR)m_cDatabaseTCProcedure.GetName());
		if (!szErrors.Mid(nPos[0]).Left(szFileName.GetLength()).CompareNoCase(szFileName) && (szErrors.GetAt(nPos[0] + szFileName.GetLength()) == CR || szErrors.GetAt(nPos[0] + szFileName.GetLength()) == EOL))
		{
			for (nPos[0] = nPos[0] + szFileName.GetLength(); nPos[0] < szErrors.GetLength(); nPos[0]++)
			{
				if (szErrors.GetAt(nPos[0]) == CR || szErrors.GetAt(nPos[0]) == EOL) continue;
				break;
			}
		}
		szErrors = szErrors.Mid(nPos[0]);
		continue;
	}
	cFileFind.Close();
}

VOID CTCProcedureCompileThread::ShowTelecommandProcedureLinkerErrors(CONST CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedure *pDatabaseTCProcedure, LPCTSTR pszSourceCode, LPCTSTR pszErrors)
{
	INT  nPos[3];
	CString  szError;
	CString  szErrors;
	CString  szPrefix;
	CString  szMessage;
	CString  szFileName;
	CFileFindEx  cFileFind;

	for (szErrors = szMessage = pszErrors, szMessage.MakeLower(); szErrors.GetLength() > 0; szMessage = szErrors, szMessage.MakeLower())
	{
		nPos[0] = szMessage.Find(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_LINKFATALERRORPREFIX));
		nPos[1] = szMessage.Find(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_LINKERRORPREFIX));
		nPos[2] = szMessage.Find(STRING(IDS_TELECOMMANDPROCEDUREFILE_ERROR_LINKWARNINGPREFIX));
		nPos[0] = nPos[1] = (nPos[0] >= 0) ? ((nPos[1] >= 0) ? min(nPos[0], nPos[1]) : nPos[0]) : nPos[1];
		nPos[0] = nPos[1] = (nPos[0] >= 0) ? ((nPos[2] >= 0) ? min(nPos[0], nPos[2]) : nPos[0]) : nPos[2];
		if ((cFileFind.FindFile(GetTelecommandProcedureFileName(pDatabase, STRING(IDS_TELECOMMANDPROCEDUREFILE_OBJECTNAME))) && !cFileFind.FindNextFile()) && nPos[0] < 0)
		{
			for (szFileName = cFileFind.GetFileName(), szFileName.MakeLower(), nPos[1] = ((nPos[0] = szMessage.Find(szFileName)) >= 0) ? (nPos[0] + szFileName.GetLength()) : -1; nPos[1] >= 0 && nPos[1] < szErrors.GetLength(); nPos[1]++)
			{
				if (_istalpha(szErrors.GetAt(nPos[1]))) break;
				continue;
			}
		}
		if (nPos[1] >= 0)
		{
			for (szError.Empty(); nPos[1] < szErrors.GetLength(); nPos[1]++)
			{
				if (szErrors.GetAt(nPos[1]) != CR  &&  szErrors.GetAt(nPos[1]) != EOL)
				{
					szError += szErrors.GetAt(nPos[1]);
					continue;
				}
				break;
			}
			for (ShowCompileMessage(szError); nPos[1] < szErrors.GetLength(); )
			{
				if (szErrors.GetAt(nPos[1]) == CR || szErrors.GetAt(nPos[1]) == EOL)
				{
					nPos[1]++;
					continue;
				}
				break;
			}
			for (nPos[2] = 0, szError.MakeUpper(), szPrefix = STRING(IDS_COMPILER_MESSAGE_ERROR_PREFIX), szPrefix.MakeUpper(); nPos[2] < szPrefix.GetLength(); nPos[2]++)
			{
				if (!_istalpha(szPrefix.GetAt(nPos[2])))
				{
					szPrefix = szPrefix.Left(nPos[2]);
					break;
				}
			}
			if (_tcsstr(szError, szPrefix))
			{
				SetErrorCount(GetErrorCount() + 1);
				szErrors = szErrors.Mid(nPos[1]);
				continue;
			}
			SetWarningCount((!szErrors.IsEmpty()) ? (GetWarningCount() + 1) : GetWarningCount());
			szErrors = szErrors.Mid(nPos[1]);
			continue;
		}
		for (nPos[0] = 0, szError.Empty(); nPos[0] < szErrors.GetLength(); nPos[0]++)
		{
			if (szErrors.GetAt(nPos[0]) != CR  &&  szErrors.GetAt(nPos[0]) != EOL)
			{
				szError += szErrors.GetAt(nPos[0]);
				continue;
			}
			break;
		}
		if (!_istspace(szError.GetAt(0)))
		{
			ShowCompileMessage(szError);
			SetErrorCount(GetErrorCount() + 1);
		}
		else  ShowCompileMessage(szError, FALSE);
		while (nPos[0] < szErrors.GetLength())
		{
			if (szErrors.GetAt(nPos[0]) == CR || szErrors.GetAt(nPos[0]) == EOL)
			{
				nPos[0]++;
				continue;
			}
			break;
		}
		szErrors = szErrors.Mid(nPos[0]);
		continue;
	}
	cFileFind.Close();
}

VOID CTCProcedureCompileThread::CleanupTelecommandProcedureBuildOutput(CONST CBinaryDatabase *pDatabase)
{
	BOOL  bFound;
	CString  szFileName[3];
	CFileFindEx  cFileFind;

	for (szFileName[0].Format(STRING(IDS_TELECOMMANDPROCEDURECODE_NORMAL_FILENAME), (LPCTSTR)m_cDatabaseTCProcedure.GetName()), szFileName[1].Format(STRING(IDS_TELECOMMANDPROCEDURECODE_UPDATE_FILENAME), (LPCTSTR)m_cDatabaseTCProcedure.GetName()), szFileName[2] = GetTelecommandProcedureFileName(pDatabase, STRING(IDS_TELECOMMANDPROCEDUREFILE_COMPILENAME)); cFileFind.FindFile(GetTelecommandProcedureFileName(pDatabase, STRING(IDS_TELECOMMANDPROCEDURECODE_SEARCH_FILENAME))); )
	{
		while ((bFound = cFileFind.FindNextFile()) == TRUE || bFound == FALSE)
		{
			if (!cFileFind.GetFilePath().Right(szFileName[0].GetLength()).CompareNoCase(szFileName[0]))
			{
				if (!bFound) break;
				continue;
			}
			if (!cFileFind.GetFilePath().Right(szFileName[1].GetLength()).CompareNoCase(szFileName[1]))
			{
				if (!bFound) break;
				continue;
			}
			if (!cFileFind.GetFilePath().CompareNoCase(szFileName[2]))
			{
				if (!bFound) break;
				continue;
			}
			CFileEx::Remove(cFileFind.GetFilePath());
			if (!bFound) break;
		}
		break;
	}
}

VOID CTCProcedureCompileThread::ShowStartCompileMessages()
{
	CString  szMessage[2];
	CRecentDocumentInfo  cDocument;
	CUpdateUI  cUpdateUI;

	for (SetConsoleContext(STRING(IDS_OUTPUTWINDOW_BUILDTAB), &cDocument), szMessage[0].Format(STRING(IDS_COMPILER_MESSAGE_FORMAT), (LPCTSTR)GetDatabase()->GetName()), szMessage[1].Format(STRING(IDS_COMPILER_MESSAGE_COMPILING_TELECOMMANDPROCEDURE), (LPCTSTR)m_cDatabaseTCProcedure.GetName()); !IsBatchCompileTarget(); )
	{
		ResetConsoleContent(STRING(IDS_OUTPUTWINDOW_BUILDTAB));
		ShowCompileMessage(szMessage[0]);
		break;
	}
	ShowCompileMessage(szMessage[1]);
	cDocument.SetDocument(m_cDatabaseTCProcedure.GetName(), EMPTYSTRING, DATABASE_COMPONENT_TCPROCEDURE);
	SetConsoleContext(STRING(IDS_OUTPUTWINDOW_BUILDTAB), &cDocument);
}

VOID CTCProcedureCompileThread::ShowStopCompileMessages()
{
	CString  szMessage;
	CRecentDocumentInfo  cDocument;
	CUpdateUI  cUpdateUI;

	for (SetConsoleContext(STRING(IDS_OUTPUTWINDOW_BUILDTAB), &cDocument), szMessage.Format(STRING(IDS_COMPILER_MESSAGE_STOPCOMPILING), GetErrorCount(), GetWarningCount()), InterlockedExchange(&m_bStop, TRUE); !IsBatchCompileTarget(); )
	{
		ShowCompileMessage((!GetAbortStatus()) ? (LPCTSTR)szMessage : STRING(IDS_COMPILER_MESSAGE_ABORTCOMPILING), TRUE, TRUE);
		break;
	}
}

VOID CTCProcedureCompileThread::ShowCompileMessage(LPCTSTR pszMessage, BOOL bTimestamp, BOOL bAudition)
{
	ShowConsoleText(STRING(IDS_OUTPUTWINDOW_BUILDTAB), pszMessage, bTimestamp, (!IsBatchCompileTarget()) ? bAudition : FALSE);
}

VOID CTCProcedureCompileThread::ShowError(LPCTSTR pszError)
{
	if (!GetAbortStatus())
	{
		ShowCompileMessage(CString(STRING(IDS_COMPILER_MESSAGE_ERROR_PREFIX)) + pszError);
		SetErrorCount(GetErrorCount() + 1);
	}
}

VOID CTCProcedureCompileThread::ShowWarning(LPCTSTR pszWarning)
{
	if (!GetAbortStatus())
	{
		ShowCompileMessage(CString(STRING(IDS_COMPILER_MESSAGE_WARNING_PREFIX)) + pszWarning);
		SetWarningCount(GetWarningCount() + 1);
	}
}

VOID CTCProcedureCompileThread::SetErrorCount(UINT nCount)
{
	m_nErrors = nCount;
}

UINT CTCProcedureCompileThread::GetErrorCount() CONST
{
	return m_nErrors;
}

VOID CTCProcedureCompileThread::SetWarningCount(UINT nCount)
{
	m_nWarnings = nCount;
}

UINT CTCProcedureCompileThread::GetWarningCount() CONST
{
	return m_nWarnings;
}

VOID CTCProcedureCompileThread::SetAbortStatus(BOOL bAbort)
{
	InterlockedExchange(&m_bAbort, bAbort);
	InterlockedExchange(&m_bStop, (bAbort) ? m_bStop : FALSE);
}

BOOL CTCProcedureCompileThread::GetAbortStatus() CONST
{
	return m_bAbort;
}

BEGIN_MESSAGE_MAP(CTCProcedureCompileThread, CThread)
	//{{AFX_MSG_MAP(CTCProcedureCompileThread)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureCompileThread message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureTestThread

IMPLEMENT_DYNAMIC(CTCProcedureTestThread, CThread)

CTCProcedureTestThread::CTCProcedureTestThread() : CThread()
{
	m_pTCProcedureWnd = (CTCProcedureWnd *)NULL;
	m_pTCEnvironment = (CTCEnvironment *)NULL;
}

BOOL CTCProcedureTestThread::Start(CTCProcedureWnd *pTCProcedureWnd, LPCTSTR pszName, CTCEnvironment *pTCEnvironment, CONST CPtrArray &hTCProcedureEvents)
{
	HANDLE  hEvent;

	if (CThread::CreateThread((LPVOID)NULL, THREAD_PRIORITY_ABOVE_NORMAL, TRUE))
	{
		for (m_pTCProcedureWnd = pTCProcedureWnd, m_szTCProcedureName = pszName, m_pTCEnvironment = pTCEnvironment, m_hTCProcedureEvents.Copy(hTCProcedureEvents), m_hTCProcedureEvents.RemoveAt(0, max(m_hTCProcedureEvents.GetSize() - max(TCPROCEDURETESTTHREAD_EVENT_LAUNCH, TCPROCEDURETESTTHREAD_EVENT_EXIT) + min(TCPROCEDURETESTTHREAD_EVENT_LAUNCH, TCPROCEDURETESTTHREAD_EVENT_EXIT), 0)); (hEvent = pTCEnvironment->SignalTCProcedure()); )
		{
			m_hTCProcedureEvents.InsertAt(0, hEvent);
			break;
		}
		if ((hEvent = pTCEnvironment->SignalMessageQueue())) m_hTCProcedureEvents.Add(hEvent);
		return((ResumeThread() != (DWORD)-1) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCProcedureTestThread::Stop()
{
	return((DestroyThread() >= 0) ? TRUE : FALSE);
}

int CTCProcedureTestThread::Run()
{
	DWORD  dwWaitCode;
	CString  szMessage[2];

	while ((dwWaitCode = Wait(m_hTCProcedureEvents.GetData(), (DWORD)m_hTCProcedureEvents.GetSize(), FALSE, INFINITE, FALSE)) > WAIT_OBJECT_0  &&  dwWaitCode <= WAIT_OBJECT_0 + m_hTCProcedureEvents.GetSize())
	{
		if (dwWaitCode == WAIT_OBJECT_0 + TCPROCEDURETESTTHREAD_EVENT_LAUNCH)
		{
			m_pTCProcedureWnd->LaunchTestingProcedure();
			continue;
		}
		if (dwWaitCode == WAIT_OBJECT_0 + TCPROCEDURETESTTHREAD_EVENT_UPDATE) m_pTCProcedureWnd->UpdateProcedureTestState();
		for (m_pTCProcedureWnd->ScheduleProcedureCommand(); dwWaitCode == WAIT_OBJECT_0 + TCPROCEDURETESTTHREAD_EVENT_EXIT; )
		{
			if (!m_pTCProcedureWnd->TerminateTestingProcedure(FALSE)) m_pTCProcedureWnd->UpdateProcedureTestState();
			break;
		}
		while (m_pTCEnvironment->RemoveMessage(szMessage[0], szMessage[1]))
		{
			if (szMessage[0] == STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ALERT))
			{
				szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ALERT), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szMessage[1]);
				szMessage[1] = szMessage[0];
			}
			ShowTestMessage(szMessage[1]);
		}
	}
	return 0;
}

VOID CTCProcedureTestThread::ShowTestMessage(LPCTSTR pszMessage)
{
	ShowConsoleText(STRING(IDS_OUTPUTWINDOW_DEBUGTAB), pszMessage, TRUE, FALSE);
}

BEGIN_MESSAGE_MAP(CTCProcedureTestThread, CThread)
	//{{AFX_MSG_MAP(CTCProcedureTestThread)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureTestThread message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureScheduleThread

IMPLEMENT_DYNAMIC(CTCProcedureScheduleThread, CThread)

CTCProcedureScheduleThread::CTCProcedureScheduleThread() : CThread()
{
	m_pDatabase = (CONST CDatabaseEngine *) NULL;
	m_pTMEnvironment = (CTMEnvironment *)NULL;
	m_pTCEnvironment = (CTCEnvironment *)NULL;
	m_pTCProcessEngine = (CTCProcessEngine *)NULL;
	m_pTCProcedureWnd = (CTCProcedureWnd *)NULL;
	m_hTCProcedureCode = (HINSTANCE)NULL;
	m_nTCProcedureID = -1;
	m_tReleaseAttempt = 0;
	m_bIdle = TRUE;
}

CTCProcedureScheduleThread::~CTCProcedureScheduleThread()
{
	Stop();
}

BOOL CTCProcedureScheduleThread::Start(CTCProcedureWnd *pTCProcedureWnd, LPCTSTR pszName, CONST CDatabaseEngine *pDatabase, CTCProcessEngine *pTCProcessEngine, CTMEnvironment *pTMEnvironment, CTCEnvironment *pTCEnvironment, INT nTCProcedureID, HINSTANCE hTCProcedureCode)
{
	for (m_pTCProcedureWnd = pTCProcedureWnd, m_szTCProcedureName = pszName, m_pDatabase = pDatabase, m_pTCProcessEngine = pTCProcessEngine, m_pTMEnvironment = pTMEnvironment, m_pTCEnvironment = pTCEnvironment, m_nTCProcedureID = nTCProcedureID, m_hTCProcedureCode = hTCProcedureCode, m_pTCProcedureItems.RemoveAll(), m_tReleaseAttempt = 0, m_bIdle = TRUE; CreateThread((LPVOID)NULL, THREAD_PRIORITY_ABOVE_NORMAL); ) return TRUE;
	return FALSE;
}

BOOL CTCProcedureScheduleThread::Stop()
{
	DWORD  dwResult;

	for (dwResult = (GetThreadHandle() != (HANDLE)NULL) ? ResumeThread() : -1; dwResult > 0 && dwResult != (DWORD)-1; dwResult = ResumeThread());
	return((DestroyThread() >= 0) ? TRUE : FALSE);
}

int CTCProcedureScheduleThread::Run()
{
	INT  nIndex;
	INT  nEntry;
	INT  nEntries;
	INT  nCount[4];
	INT  nSubEntryID[2];
	INT  nSubEntryIDs[2];
	INT  nParameter[2];
	INT  nParameters[2];
	BYTE  nStatus;
	BOOL  bMessage;
	DWORD  dwResult;
	DWORD  dwTimeout[2];
	HANDLE  hResult[2];
	CString  szMessage[6];
	CString  szProcedure[2];
	CString  szParameter[2];
	CString  szMemoryPatch;
	CTimeTag  tAttempt;
	CTimeSpan  tOffset[2];
	CTCPacket  *pTCPacket;
	CPtrArray  pTCPackets;
	CUIntArray  nEntryIDs;
	CByteArray  nOolStatus;
	CByteArray  nProcessInfo;
	CStringArray  szParameters[2];
	CStringArray  szOolParameters;
	CTCParameter  *pTCParameter;
	CTCProcedureItem  *pItem[2];
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCPacket  cDatabaseTCPacket[2];
	CDatabaseTCPackets  pDatabaseTCPackets;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCFunction  cDatabaseTCFunction[2];
	CDatabaseTCFunctions  pDatabaseTCFunctions;
	CDatabaseTCParameter  *pDatabaseTCParameter;
	CDatabaseTCFunctionElement  *pDatabaseTCFunctionElement;
	CDatabaseTCPacketParameter  *pDatabaseTCPacketParameter;
	BOOL(__cdecl *pInitThreadTCFunction)(INT nID, LPCTSTR pszThread, LPCTSTR pszStep, INT nEntry, BOOL bExpanded, CDatabaseTCFunction *pTCFunction, CDatabaseTCPacket *pTCPacket, CString &szMemoryPatch, BOOL bAllowAuthorization);
	BOOL(__cdecl *pCheckThreadTCFunctionPreexecutionExpression)(INT nID, LPCTSTR pszThread, LPCTSTR pszStep, INT nEntry, CStringArray &szParameters);

	do
	{
		if (Lock())
		{
			for (m_pTCProcedureWnd->LockProcedureCommandQueue(m_pTCEnvironment), nIndex = 0, bMessage = TRUE, dwTimeout[0] = INFINITE; nIndex < m_pTCProcedureItems.GetSize(); bMessage = TRUE)
			{
				if ((pItem[0] = m_pTCProcedureItems.GetAt(nIndex)) != (CTCProcedureItem *)NULL  &&  Initialize(pItem[0], &cDatabaseTCFunction[0], &cDatabaseTCPacket[0]))
				{
					if ((dwTimeout[1] = (DWORD)min(max((pItem[0]->GetReleaseTime().GetTime() - CTimeTag().GetTime()) / 1000, 0), 1000 * SECONDSPERDAY)) == 0 || ((pItem[0]->GetAckFlags() & TCSEQUENCEENTRY_RELTYPE_MANUAL) && !nIndex))
					{
						if ((pItem[1] = (!pItem[0]->GetSequence().IsEmpty() && m_pTCProcedureItems.Collect(nIndex, nEntryIDs) > 0) ? m_pTCProcedureItems.GetAt(nEntryIDs.GetAt(nEntryIDs.GetUpperBound())) : (CTCProcedureItem *)NULL) && pItem[1]->GetEntryID() < pItem[0]->GetEntryCount())
						{
							nIndex++;
							continue;
						}
						if (cDatabaseTCFunction[0].GetAttributes() & TCFUNCTION_EXETYPE_FIRSTSTEP)
						{
							for (nEntry = 0, nEntries = (INT)nEntryIDs.GetSize(); nEntry < nEntries; nEntry++)
							{
								if ((pItem[1] = (nIndex < (INT)nEntryIDs.GetAt(nEntry)) ? m_pTCProcedureItems.GetAt(nEntryIDs.GetAt(nEntry)) : (CTCProcedureItem *)NULL) && pItem[1]->GetFunction(&cDatabaseTCFunction[1]))
								{
									if ((cDatabaseTCFunction[1].GetAttributes() & TCFUNCTION_EXETYPE_SECONDSTEP) == TCFUNCTION_EXETYPE_SECONDSTEP)
									{
										pItem[1]->SetAckFlags(pItem[1]->GetAckFlags() | TCFUNCTION_EXETYPE_SECONDSTEP);
										break;
									}
								}
							}
							pItem[0]->SetAckFlags(pItem[0]->GetAckFlags() | TCFUNCTION_EXETYPE_FIRSTSTEP);
						}
						if (cDatabaseTCFunction[0].GetAttributes() & TCFUNCTION_EXETYPE_SECONDSTEP) pItem[0]->SetAckFlags(pItem[0]->GetAckFlags() | TCFUNCTION_EXETYPE_SECONDSTEP);
#ifndef UNICODE
						szProcedure[0] = STRING(IDS_EXPORTINTERFACE_INITIALIZETCPROCEDUREFUNCTIONPARAMETERS);
						szProcedure[1] = STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDUREFUNCTIONPREEXECUTIONCONDITION);
#else
						WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_INITIALIZETCPROCEDUREFUNCTIONPARAMETERS), -1, (LPSTR)szProcedure[0].GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_INITIALIZETCPROCEDUREFUNCTIONPARAMETERS))), lstrlen(STRING(IDS_EXPORTINTERFACE_INITIALIZETCPROCEDUREFUNCTIONPARAMETERS)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
						WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDUREFUNCTIONPREEXECUTIONCONDITION), -1, (LPSTR)szProcedure[1].GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDUREFUNCTIONPREEXECUTIONCONDITION))), lstrlen(STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDUREFUNCTIONPREEXECUTIONCONDITION)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
						szProcedure[0].ReleaseBuffer();
						szProcedure[1].ReleaseBuffer();
#endif
						if ((pInitThreadTCFunction = (BOOL(__cdecl *)(INT nID, LPCTSTR pszThread, LPCTSTR pszStep, INT nEntry, BOOL bExpanded, CDatabaseTCFunction *pTCFunction, CDatabaseTCPacket *pTCPacket, CString &szMemoryPatch, BOOL bAllowAuthorization)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure[0])))
						{
							if ((pCheckThreadTCFunctionPreexecutionExpression = (BOOL(__cdecl *)(INT nID, LPCTSTR pszThread, LPCTSTR pszStep, INT nEntry, CStringArray &szParameters)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure[1])) != (BOOL(__cdecl *)(INT nID, LPCTSTR pszThread, LPCTSTR pszStep, INT nEntry, CStringArray &szParameters)) NULL)
							{
								if (!m_pTCProcedureWnd->GetPropertiesView()->IsTCStackPreexecutionVerificationEnabled() || pItem[0]->GetProcedureFlag() || pItem[0]->GetExecutionTime() > 0 || (*pCheckThreadTCFunctionPreexecutionExpression)(m_nTCProcedureID, pItem[0]->GetThread(), pItem[0]->GetStep(), pItem[0]->GetEntryID(), szParameters[0]))
								{
									if ((*pInitThreadTCFunction)(m_nTCProcedureID, pItem[0]->GetThread(), pItem[0]->GetStep(), pItem[0]->GetEntryID(), FALSE, &cDatabaseTCFunction[0], &cDatabaseTCPacket[0], szMemoryPatch, (pItem[0]->GetAckFlags() & (TCSEQUENCEENTRY_RELTYPE_MANUAL | TCSEQUENCEENTRY_RELTYPE_AUTOMATIC)) ? TRUE : FALSE) && ((pItem[0]->GetAckFlags() & TCSEQUENCEENTRY_RELTYPE_MANUAL) || m_pTCProcessEngine->GenerateTCPackets(m_pDatabase, &cDatabaseTCFunction[0], &cDatabaseTCPacket[0], m_pTMEnvironment, m_pTCEnvironment, szMemoryPatch, pItem[0]->GetExecutionTime() > 0, FALSE, pItem[0]->GetBlockID() > 0, FALSE, pDatabaseTCFunctions, pDatabaseTCPackets)))
									{
										if ((pItem[0]->GetAckFlags() & TCSEQUENCEENTRY_RELTYPE_MANUAL) && pItem[0]->GetReleaseTimeOffset() > 0)
										{
											pItem[0]->SetReleaseTime(CTimeTag().GetTime() + 1000 * (TIMETAG)pItem[0]->GetReleaseTimeOffset());
											pItem[0]->SetAckFlags(pItem[0]->GetAckFlags() & ~TCSEQUENCEENTRY_RELTYPE_MANUAL);
											continue;
										}
										for (nSubEntryID[0] = 0, nSubEntryIDs[0] = (INT)pDatabaseTCPackets.GetSize(); nSubEntryID[0] < nSubEntryIDs[0]; nSubEntryID[0]++)
										{
											if ((pDatabaseTCFunction = pDatabaseTCFunctions.GetAt(nSubEntryID[0])))
											{
												if ((pDatabaseTCPacket = pDatabaseTCPackets.GetAt(nSubEntryID[0])))
												{
													if ((!nSubEntryID[0] && (*pInitThreadTCFunction)(m_nTCProcedureID, pItem[0]->GetThread(), pItem[0]->GetStep(), pItem[0]->GetEntryID(), TRUE, pDatabaseTCFunction, pDatabaseTCPacket, szMemoryPatch, FALSE)) || nSubEntryID[0] > 0)
													{
														for (nParameter[0] = 0, nParameters[0] = (INT)pDatabaseTCFunction->GetSize(), m_pTCProcessEngine->GetTCFunctionParameterTimeOffsets(tOffset[0], tOffset[1]), szParameters[0].RemoveAll(), szParameters[1].RemoveAll(), szOolParameters.RemoveAll(), nOolStatus.RemoveAll(), m_pTCEnvironment->Lock(); nParameter[0] < nParameters[0]; nParameter[0]++)
														{
															if ((pTCParameter = ((pDatabaseTCParameter = ((pDatabaseTCFunctionElement = pDatabaseTCFunction->GetAt(nParameter[0]))) ? m_pDatabase->GetTCParameters()->GetAt((pDatabaseTCFunctionElement->GetRef() < 0) ? m_pDatabase->GetTCParameters()->Find(pDatabaseTCFunctionElement->GetName()) : pDatabaseTCFunctionElement->GetRef()) : (CDatabaseTCParameter *)NULL)) ? m_pTCEnvironment->GetTCParameters()->GetAt((pDatabaseTCFunctionElement->GetRef() < 0) ? m_pTCEnvironment->GetTCParameters()->Find(pDatabaseTCFunctionElement->GetName()) : pDatabaseTCFunctionElement->GetRef()) : (CTCParameter *)NULL))
															{
																for (; (pDatabaseTCFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER) && !pDatabaseTCFunctionElement->HasConstValue(); )
																{
																	szParameters[0].Add(pDatabaseTCFunctionElement->GetName());
																	break;
																}
																if (pDatabaseTCFunctionElement->HasConstValue())
																{
																	if (((nStatus = m_pTCProcessEngine->CheckTCParameterOolStatus(m_pDatabase, pDatabaseTCParameter, pTCParameter, pDatabaseTCFunctionElement->GetConstValue())) & TCPARAMETER_STATUS_NOLIMIT) != TCPARAMETER_STATUS_NOLIMIT)
																	{
																		for (nParameter[1] = 0, nParameters[1] = (INT)szOolParameters.GetSize(); nParameter[1] < nParameters[1]; nParameter[1]++)
																		{
																			if (szOolParameters.GetAt(nParameter[1]) == pTCParameter->GetTag()) break;
																			continue;
																		}
																		szOolParameters.SetAtGrow(nParameter[1], pTCParameter->GetTag());
																		nOolStatus.SetAtGrow(nParameter[1], nStatus);
																		continue;
																	}
																	if (pDatabaseTCFunctionElement->GetAttributes() & TCPARAMETER_CODING_TIME)
																	{
																		if (GetDatabase()->TranslateTCFunctionElementConstTime(pDatabaseTCFunctionElement->GetAttributes(), pDatabaseTCFunctionElement->GetConstValueAsText()).GetTimeInSeconds() < CTime::GetCurrentTime().GetTime() + tOffset[0].GetTotalSeconds())
																		{
																			for (nParameter[1] = 0, nParameters[1] = (INT)szOolParameters.GetSize(); nParameter[1] < nParameters[1]; nParameter[1]++)
																			{
																				if (szOolParameters.GetAt(nParameter[1]) == pTCParameter->GetTag()) break;
																				continue;
																			}
																			szOolParameters.SetAtGrow(nParameter[1], pTCParameter->GetTag());
																			nOolStatus.SetAtGrow(nParameter[1], TCPARAMETER_STATUS_TIMELIMIT);
																		}
																	}
																}
																continue;
															}
															if ((pDatabaseTCFunctionElement = pDatabaseTCFunction->GetAt(nParameter[0])))
															{
																if ((pDatabaseTCFunctionElement->GetAttributes() & TCFUNCTIONELEMENT_TYPE_PARAMETER) && !pDatabaseTCFunctionElement->GetName().IsEmpty())
																{
																	szParameters[1].Add(pDatabaseTCFunctionElement->GetName());
																	continue;
																}
															}
														}
														for (nParameter[0] = 0, nParameters[0] = (INT)pDatabaseTCPacket->GetSize(); nParameter[0] < nParameters[0]; nParameter[0]++)
														{
															if ((pTCParameter = ((pDatabaseTCParameter = ((pDatabaseTCPacketParameter = pDatabaseTCPacket->GetAt(nParameter[0]))) ? m_pDatabase->GetTCParameters()->GetAt((pDatabaseTCPacketParameter->GetRef() < 0) ? m_pDatabase->GetTCParameters()->Find(pDatabaseTCPacketParameter->GetTag()) : pDatabaseTCPacketParameter->GetRef()) : (CDatabaseTCParameter *)NULL)) ? m_pTCEnvironment->GetTCParameters()->GetAt((pDatabaseTCPacketParameter->GetRef() < 0) ? m_pTCEnvironment->GetTCParameters()->Find(pDatabaseTCPacketParameter->GetTag()) : pDatabaseTCPacketParameter->GetRef()) : (CTCParameter *)NULL))
															{
																for (; (pDatabaseTCPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE) && !pDatabaseTCPacketParameter->HasConstValue(); )
																{
																	szParameters[0].Add(pDatabaseTCPacketParameter->GetTag());
																	break;
																}
																if (pDatabaseTCPacketParameter->HasConstValue())
																{
																	if (((nStatus = m_pTCProcessEngine->CheckTCParameterOolStatus(m_pDatabase, pDatabaseTCParameter, pTCParameter, pDatabaseTCPacketParameter->GetConstValue())) & TCPARAMETER_STATUS_NOLIMIT) != TCPARAMETER_STATUS_NOLIMIT)
																	{
																		for (nParameter[1] = 0, nParameters[1] = (INT)szOolParameters.GetSize(); nParameter[1] < nParameters[1]; nParameter[1]++)
																		{
																			if (szOolParameters.GetAt(nParameter[1]) == pTCParameter->GetTag()) break;
																			continue;
																		}
																		szOolParameters.SetAtGrow(nParameter[1], pTCParameter->GetTag());
																		nOolStatus.SetAtGrow(nParameter[1], nStatus);
																		continue;
																	}
																	if (pDatabaseTCPacketParameter->GetAttributes() & TCPARAMETER_CODING_TIME)
																	{
																		if (GetDatabase()->TranslateTCPacketParameterConstTime(pDatabaseTCPacketParameter->GetAttributes(), pDatabaseTCPacketParameter->GetConstValueAsText()).GetTimeInSeconds() < CTime::GetCurrentTime().GetTime() + tOffset[0].GetTotalSeconds())
																		{
																			for (nParameter[1] = 0, nParameters[1] = (INT)szOolParameters.GetSize(); nParameter[1] < nParameters[1]; nParameter[1]++)
																			{
																				if (szOolParameters.GetAt(nParameter[1]) == pTCParameter->GetTag()) break;
																				continue;
																			}
																			szOolParameters.SetAtGrow(nParameter[1], pTCParameter->GetTag());
																			nOolStatus.SetAtGrow(nParameter[1], TCPARAMETER_STATUS_TIMELIMIT);
																		}
																	}
																}
																continue;
															}
															if ((pDatabaseTCPacketParameter = pDatabaseTCPacket->GetAt(nParameter[0])))
															{
																if ((pDatabaseTCPacketParameter->GetAttributes() & TCPACKETPARAMETER_TYPE_VARIABLE) && !pDatabaseTCPacketParameter->GetTag().IsEmpty())
																{
																	szParameters[1].Add(pDatabaseTCPacketParameter->GetTag());
																	continue;
																}
															}
														}
														for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[0].GetSize() - 1, szParameter[0].Empty(), szParameter[1] = (szParameters[0].GetSize() > 0) ? szParameters[0].GetAt(szParameters[0].GetSize() - 1) : EMPTYSTRING, m_pTCEnvironment->Unlock(); nParameter[0] < nParameters[0]; nParameter[0]++)
														{
															szParameter[0] += (!szParameter[0].IsEmpty()) ? (STRING(IDS_TCPROCEDURE_MESSAGE_PARAMETERSEPARATOR) + szParameters[0].GetAt(nParameter[0])) : szParameters[0].GetAt(nParameter[0]);
															continue;
														}
														if (szParameters[0].GetSize() == 1)
														{
															szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCFUNCTIONPARAMETERNOVALUE_WARNING), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[1], (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag());
															szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEQUENCEPARAMETERNOVALUE_WARNING), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[1], (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID());
															szMessage[2].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEGSEQUENCEPARAMETERNOVALUE_WARNING), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[1], (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID(), nSubEntryID[0]);
														}
														if (szParameters[0].GetSize() > 1)
														{
															szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCFUNCTIONPARAMETERSNOVALUE_WARNING), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[0], (LPCTSTR)szParameter[1], (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag());
															szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEQUENCEPARAMETERSNOVALUE_WARNING), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[0], (LPCTSTR)szParameter[1], (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID());
															szMessage[2].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEGSEQUENCEPARAMETERSNOVALUE_WARNING), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[0], (LPCTSTR)szParameter[1], (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID(), nSubEntryID[0]);
														}
														for (; szParameters[0].GetSize() > 0; )
														{
															m_pTCEnvironment->AddMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_WARNING), (pItem[0]->GetSequence().IsEmpty()) ? szMessage[0] : ((!nSubEntryID[0]) ? szMessage[1] : szMessage[2]));
															break;
														}
														for (nParameter[0] = 0, nParameters[0] = (INT)szParameters[1].GetSize() - 1, szParameter[0].Empty(), szParameter[1] = (szParameters[1].GetSize() > 0) ? szParameters[1].GetAt(szParameters[1].GetSize() - 1) : EMPTYSTRING; nParameter[0] < nParameters[0]; nParameter[0]++)
														{
															szParameter[0] += (!szParameter[0].IsEmpty()) ? (STRING(IDS_TCPROCEDURE_MESSAGE_PARAMETERSEPARATOR) + szParameters[1].GetAt(nParameter[0])) : szParameters[1].GetAt(nParameter[0]);
															continue;
														}
														if (szParameters[1].GetSize() == 1)
														{
															szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCFUNCTIONPARAMETERILLEGAL_ERROR), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[1], (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag());
															szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEQUENCEPARAMETERILLEGAL_ERROR), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[1], (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID());
															szMessage[2].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEGSEQUENCEPARAMETERILLEGAL_ERROR), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[1], (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID(), nSubEntryID[0]);
														}
														if (szParameters[1].GetSize() > 1)
														{
															szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCFUNCTIONPARAMETERSILLEGAL_ERROR), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[0], (LPCTSTR)szParameter[1], (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag());
															szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEQUENCEPARAMETERSILLEGAL_ERROR), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[0], (LPCTSTR)szParameter[1], (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID());
															szMessage[2].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEGSEQUENCEPARAMETERSILLEGAL_ERROR), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[0], (LPCTSTR)szParameter[1], (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID(), nSubEntryID[0]);
														}
														for (; szParameters[1].GetSize() > 0; )
														{
															m_pTCEnvironment->AddMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem[0]->GetSequence().IsEmpty()) ? szMessage[0] : ((!nSubEntryID[0]) ? szMessage[1] : szMessage[2]));
															break;
														}
														for (nParameter[0] = 0, nParameters[0] = (INT)szOolParameters.GetSize(), nCount[0] = nCount[1] = nCount[2] = nCount[3] = 0; nParameter[0] < nParameters[0]; nParameter[0]++)
														{
															if (nOolStatus.GetAt(nParameter[0]) == TCPARAMETER_STATUS_HARDLIMIT || nOolStatus.GetAt(nParameter[0]) == TCPARAMETER_STATUS_DELTALIMIT)
															{
																nCount[0]++;
																continue;
															}
															if (nOolStatus.GetAt(nParameter[0]) == TCPARAMETER_STATUS_SOFTLIMIT || nOolStatus.GetAt(nParameter[0]) == TCPARAMETER_STATUS_TIMELIMIT)
															{
																nCount[1]++;
																continue;
															}
														}
														for (nParameter[0] = 0, nParameters[0] = (INT)szOolParameters.GetSize(), szParameter[0].Empty(), szParameter[1].Empty(); nParameter[0] < nParameters[0]; nParameter[0]++)
														{
															if (nOolStatus.GetAt(nParameter[0]) == TCPARAMETER_STATUS_HARDLIMIT || nOolStatus.GetAt(nParameter[0]) == TCPARAMETER_STATUS_DELTALIMIT)
															{
																for (szParameter[0] += (nCount[2] < nCount[0] - 1) ? ((!szParameter[0].IsEmpty()) ? (STRING(IDS_TCPROCEDURE_MESSAGE_PARAMETERSEPARATOR) + szOolParameters.GetAt(nParameter[0])) : szOolParameters.GetAt(nParameter[0])) : EMPTYSTRING; nCount[2] == nCount[0] - 1; )
																{
																	if (pItem[0]->GetSequence().IsEmpty() && pItem[0]->GetEntryID() < 0 && pItem[0]->GetEntryID() == pItem[0]->GetEntryCount())
																	{
																		szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCFUNCTIONPARAMETEROOLSTATUS_ERROR), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szOolParameters.GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag());
																		szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCFUNCTIONPARAMETERSOOLSTATUS_ERROR), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[0], (LPCTSTR)szOolParameters.GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag());
																	}
																	if (!pItem[0]->GetSequence().IsEmpty() && pItem[0]->GetEntryID() >= 0 && pItem[0]->GetEntryID() <= pItem[0]->GetEntryCount())
																	{
																		for (szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEQUENCEPARAMETEROOLSTATUS_ERROR), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szOolParameters.GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID()), szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEQUENCEPARAMETERSOOLSTATUS_ERROR), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[0], (LPCTSTR)szOolParameters.GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID()); nSubEntryID[0] > 0; )
																		{
																			szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEGSEQUENCEPARAMETEROOLSTATUS_ERROR), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szOolParameters.GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID(), nSubEntryID[0]);
																			szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEGSEQUENCEPARAMETERSOOLSTATUS_ERROR), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[0], (LPCTSTR)szOolParameters.GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID(), nSubEntryID[0]);
																			break;
																		}
																	}
																	szMessage[0] = (nCount[0] == 1) ? szMessage[0] : szMessage[1];
																	break;
																}
																nCount[2]++;
															}
															if (nOolStatus.GetAt(nParameter[0]) == TCPARAMETER_STATUS_SOFTLIMIT || nOolStatus.GetAt(nParameter[0]) == TCPARAMETER_STATUS_TIMELIMIT)
															{
																for (szParameter[1] += (nCount[3] < nCount[1] - 1) ? ((!szParameter[1].IsEmpty()) ? (STRING(IDS_TCPROCEDURE_MESSAGE_PARAMETERSEPARATOR) + szOolParameters.GetAt(nParameter[0])) : szOolParameters.GetAt(nParameter[0])) : EMPTYSTRING; nCount[3] == nCount[1] - 1; )
																{
																	if (pItem[0]->GetSequence().IsEmpty() && pItem[0]->GetEntryID() < 0 && pItem[0]->GetEntryID() == pItem[0]->GetEntryCount())
																	{
																		szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCFUNCTIONPARAMETEROOLSTATUS_WARNING), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szOolParameters.GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag());
																		szMessage[2].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCFUNCTIONPARAMETERSOOLSTATUS_WARNING), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[1], (LPCTSTR)szOolParameters.GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag());
																	}
																	if (!pItem[0]->GetSequence().IsEmpty() && pItem[0]->GetEntryID() >= 0 && pItem[0]->GetEntryID() <= pItem[0]->GetEntryCount())
																	{
																		for (szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEQUENCEPARAMETEROOLSTATUS_WARNING), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szOolParameters.GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID()), szMessage[2].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEQUENCEPARAMETERSOOLSTATUS_WARNING), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[1], (LPCTSTR)szOolParameters.GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID()); nSubEntryID[0] > 0; )
																		{
																			szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEGSEQUENCEPARAMETEROOLSTATUS_WARNING), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szOolParameters.GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID(), nSubEntryID[0]);
																			szMessage[2].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEGSEQUENCEPARAMETERSOOLSTATUS_WARNING), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szParameter[1], (LPCTSTR)szOolParameters.GetAt(nParameter[0]), (LPCTSTR)pDatabaseTCFunction->GetName(), (LPCTSTR)pDatabaseTCPacket->GetTag(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID(), nSubEntryID[0]);
																			break;
																		}
																	}
																	szMessage[1] = (nCount[1] == 1) ? szMessage[1] : szMessage[2];
																	break;
																}
																nCount[3]++;
															}
														}
														if (nCount[0] > 0) m_pTCEnvironment->AddMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), szMessage[0]);
														if (nCount[1] > 0) m_pTCEnvironment->AddMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_WARNING), szMessage[1]);
														continue;
													}
												}
											}
											break;
										}
										for (nSubEntryID[1] = 0, nSubEntryIDs[1] = (nSubEntryID[0] == nSubEntryIDs[0]) ? ((!pItem[0]->GetProcedureFlag()) ? ((!nCount[0] && !szParameters[1].GetSize()) ? (INT)pDatabaseTCPackets.GetSize() : -1) : 0) : -1; nSubEntryID[1] < nSubEntryIDs[1]; nSubEntryID[1]++)
										{
											if ((pDatabaseTCFunction = pDatabaseTCFunctions.GetAt(nSubEntryID[1])))
											{
												if ((pDatabaseTCPacket = pDatabaseTCPackets.GetAt(nSubEntryID[1])))
												{
													if (pItem[0]->GetBlockID() <= 0)
													{
														if ((pTCPacket = new CTCPacket))
														{
															if (m_pTCEnvironment->GetTCProcessInfo()->GetData(nProcessInfo) > 0)
															{
																if (m_pTCProcessEngine->InitializeTCPacket(m_pDatabase, m_pTMEnvironment, m_pTCEnvironment, pDatabaseTCFunction, pDatabaseTCPacket, pTCPacket, pItem[0]->GetExecutionTime(), (pItem[0]->GetBlockID() == 0) ? TRUE : FALSE))
																{
																	if ((pItem[1] = m_pTCProcedureItems.GetAt(nIndex + 1)) && pItem[1]->GetBlockID() == pItem[0]->GetBlockID() + 1 && !pItem[0]->GetBlockID())
																	{
																		pTCPackets.Add(pTCPacket);
																		continue;
																	}
																	if (m_pTCProcedureWnd->SendProcedureCommand(pItem[0], pTCPacket, nSubEntryID[1]))
																	{
																		delete pTCPacket;
																		continue;
																	}
																	bMessage = FALSE;
																}
																if (nProcessInfo.GetSize() > 0)
																{
																	m_pTCEnvironment->GetTCProcessInfo()->SetData(nProcessInfo);
																	nProcessInfo.RemoveAll();
																}
															}
															delete pTCPacket;
														}
														break;
													}
													if ((pTCPacket = (pTCPackets.GetSize() > 0) ? (CTCPacket *)pTCPackets.GetAt(pTCPackets.GetUpperBound()) : (CTCPacket *)NULL))
													{
														if (m_pTCProcessEngine->CollectTCPacket(m_pDatabase, m_pTMEnvironment, pDatabaseTCFunction, pTCPacket, pItem[0]->GetBlockID()))
														{
															if ((pItem[1] = m_pTCProcedureItems.GetAt(nIndex + 1)) == (CTCProcedureItem *)NULL || pItem[1]->GetBlockID() != pItem[0]->GetBlockID() + 1)
															{
																if (m_pTCProcedureWnd->SendProcedureCommand(pItem[0], pTCPacket, nSubEntryID[1]))
																{
																	pTCPackets.RemoveAll();
																	delete pTCPacket;
																	continue;
																}
																if (nProcessInfo.GetSize() > 0)
																{
																	m_pTCEnvironment->GetTCProcessInfo()->SetData(nProcessInfo);
																	nProcessInfo.RemoveAll();
																}
																bMessage = FALSE;
																break;
															}
															continue;
														}
														break;
													}
												}
											}
											break;
										}
										if (nSubEntryID[1] == nSubEntryIDs[1])
										{
											for (m_pTCProcedureItems.RemoveAt(nIndex); pItem[0]->GetProcedureFlag(); )
											{
												m_pTCProcedureWnd->GetPropertiesView()->UpdateTCStack(pItem[0], STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_EXECUTED), STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKRESULT_SUCCESSFUL));
												break;
											}
											delete pItem[0];
											continue;
										}
									}
									else
									{
										if (pItem[0]->GetProcedureFlag())
										{
											szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCFUNCTIONPROCEDUREEXECUTION_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem[0]->GetFunction());
											szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEQUENCEPROCEDUREEXECUTION_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem[0]->GetFunction(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID());
											m_pTCProcedureWnd->GetPropertiesView()->UpdateTCStack(pItem[0], STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_EXECUTED), STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKRESULT_FAILED));
											m_pTCEnvironment->AddMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem[0]->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]);
											bMessage = FALSE;
										}
									}
								}
								else
								{
									if (m_pTCProcedureWnd->GetPropertiesView()->IsTCStackReleaseWaitModeEnabled())
									{
										if ((tAttempt = CTimeTag()) < m_tReleaseAttempt + 1000000 * m_pTCProcedureWnd->GetPropertiesView()->GetTCStackReleaseWaitInterval().GetTotalSeconds() || m_tReleaseAttempt == 0)
										{
											dwTimeout[0] = (DWORD)((m_tReleaseAttempt = (m_tReleaseAttempt == 0) ? tAttempt : m_tReleaseAttempt).GetTime() + 1000000 * m_pTCProcedureWnd->GetPropertiesView()->GetTCStackReleaseWaitInterval().GetTotalSeconds() - tAttempt.GetTime()) / 1000;
											break;
										}
									}
									szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCFUNCTIONPREEXECUTIONVERIFICATION_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem[0]->GetFunction());
									szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEQUENCEPREEXECUTIONVERIFICATION_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem[0]->GetFunction(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID());
									szMessage[2].Format(STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCFUNCTION_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem[0]->GetFunction());
									szMessage[3].Format(STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCSEQUENCE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem[0]->GetFunction(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID());
									m_pTCEnvironment->AddMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem[0]->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]);
									m_pTCEnvironment->AddMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem[0]->GetSequence().IsEmpty()) ? szMessage[2] : szMessage[3]);
									bMessage = FALSE;
								}
							}
						}
						for (szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_SCHEDULETCFUNCTION_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem[0]->GetFunction()), szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_SCHEDULETCFUNCTION1STEP_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem[0]->GetFunction()), szMessage[2].Format(STRING(IDS_TCPROCEDURE_MESSAGE_SCHEDULETCFUNCTION2STEP_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem[0]->GetFunction()), szMessage[3].Format(STRING(IDS_TCPROCEDURE_MESSAGE_SCHEDULETCSEQUENCE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem[0]->GetFunction(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID()), szMessage[4].Format(STRING(IDS_TCPROCEDURE_MESSAGE_SCHEDULETCSEQUENCE1STEP_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem[0]->GetFunction(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID()), szMessage[5].Format(STRING(IDS_TCPROCEDURE_MESSAGE_SCHEDULETCSEQUENCE2STEP_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem[0]->GetFunction(), (LPCTSTR)pItem[0]->GetSequence(), pItem[0]->GetEntryID()), m_pTCProcedureWnd->GetPropertiesView()->UpdateTCStack(pItem[0], STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_NOTSCHEDULED), EMPTYSTRING); bMessage; )
						{
							m_pTCEnvironment->AddMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem[0]->GetSequence().IsEmpty()) ? (((pItem[0]->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? szMessage[0] : ((pItem[0]->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? szMessage[1] : szMessage[2])) : (((pItem[0]->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? szMessage[3] : ((pItem[0]->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? szMessage[4] : szMessage[5])));
							break;
						}
						for (nEntry = 0, nEntries = m_pTCProcedureItems.Collect(nIndex, nEntryIDs); nEntry < nEntries; nEntry++)
						{
							if ((pItem[1] = m_pTCProcedureItems.GetAt(nEntryIDs.GetAt(nEntry) - nEntry)))
							{
								for (; pItem[1]->GetHandles(hResult[0], hResult[1]); )
								{
									SetEvent(hResult[1]);
									break;
								}
								m_pTCProcedureItems.RemoveAt(nEntryIDs.GetAt(nEntry) - nEntry);
								delete pItem[1];
							}
							nIndex = (nIndex > (INT)nEntryIDs.GetAt(nEntry)) ? (nIndex - 1) : nIndex;
						}
					}
					m_tReleaseAttempt = 0;
					dwTimeout[0] = min(dwTimeout[0], dwTimeout[1]);
					nIndex++;
					continue;
				}
				m_tReleaseAttempt = 0;
				m_pTCProcedureItems.RemoveAt(nIndex);
			}
			m_bIdle = (!m_pTCProcedureItems.GetSize()) ? TRUE : FALSE;
			m_pTCProcedureWnd->UnlockProcedureCommandQueue(m_pTCEnvironment);
			m_pTCProcedureWnd->TerminateTestingProcedure(FALSE);
			Unlock();
			continue;
		}
		break;
	} while ((dwResult = Wait(m_bUpdate, FALSE, dwTimeout[0])) == WAIT_OBJECT_0 + 1 || dwResult == WAIT_TIMEOUT);
	return 0;
}

BOOL CTCProcedureScheduleThread::Initialize(CONST CTCProcedureItem *pItem, CDatabaseTCFunction *pDatabaseTCFunction, CDatabaseTCPacket *pDatabaseTCPacket)
{
	INT  nIndex[2];

	return(((nIndex[1] = ((nIndex[0] = (pItem->GetFunction(pDatabaseTCFunction) && pItem->GetPacket(pDatabaseTCPacket)) ? m_pDatabase->GetTCFunctions()->Find(pDatabaseTCFunction->GetName()) : -1)) ? m_pDatabase->GetTCPackets()->Find(pDatabaseTCPacket->GetTag()) : -1) >= 0) ? (pDatabaseTCFunction->Copy(m_pDatabase->GetTCFunctions()->GetAt(nIndex[0])) && pDatabaseTCPacket->Copy(m_pDatabase->GetTCPackets()->GetAt(nIndex[1]))) : FALSE);
}

BOOL CTCProcedureScheduleThread::Schedule(CONST CTCProcedureItem *pItem)
{
	INT  nItem;
	INT  nItems;
	INT  nIndex;
	CTCProcedureItem  *pScheduledItem[2];

	if (Lock())
	{
		for (nIndex = nItems = (INT)m_pTCProcedureItems.GetSize(); !pItem->GetSequence().IsEmpty() && pItem->GetEntryID() > 1 && (pItem->GetGroupFlag() || pItem->GetBlockID() > 0); )
		{
			nIndex = m_pTCProcedureItems.Find(pItem->GetThread(), pItem->GetStep(), pItem->GetSequence(), pItem->GetEntryID() - 1, pItem->GetScheduleTime()) + 1;
			break;
		}
		for (nItem = (pItem->GetSequence().IsEmpty() || pItem->GetEntryID() == 1 || (!pItem->GetGroupFlag() && pItem->GetBlockID() <= 0)) ? nItems : 0; nItem > 0; nItem--)
		{
			if ((pScheduledItem[0] = m_pTCProcedureItems.GetAt(nItem - 1)) && pScheduledItem[0]->GetReleaseTime().GetTime() <= pItem->GetReleaseTime().GetTime())
			{
				while ((pScheduledItem[1] = m_pTCProcedureItems.GetAt(nItem)) && (pScheduledItem[1]->GetGroupFlag() || pScheduledItem[1]->GetBlockID() > 0))
				{
					nItem = nItem + 1;
					continue;
				}
				nIndex = nItem;
				break;
			}
			nIndex--;
		}
		if ((pScheduledItem[0] = new CTCProcedureItem))
		{
			if (m_pTCProcedureWnd->GetPropertiesView()->UpdateTCStack(pItem))
			{
				for (pScheduledItem[0]->Copy(pItem), m_pTCProcedureItems.InsertAt(nIndex, pScheduledItem[0], 1), m_bIdle = FALSE; pItem->GetEntryID() == pItem->GetEntryCount(); )
				{
					m_bUpdate.SetEvent();
					break;
				}
				Unlock();
				return TRUE;
			}
			delete pScheduledItem[0];
		}
		Unlock();
	}
	return FALSE;
}

BOOL CTCProcedureScheduleThread::Unschedule(CONST CTCProcedureItem *pItem)
{
	INT  nItem;
	INT  nItems;
	CUIntArray  nItemIDs;
	CTCProcedureItem  *pScheduledItem;

	if (Lock())
	{
		for (nItem = 0, nItems = m_pTCProcedureItems.Collect(m_pTCProcedureItems.Find(pItem->GetThread(), pItem->GetStep(), pItem->GetSequence(), pItem->GetFunction(), pItem->GetEntryID(), pItem->GetScheduleTime()), nItemIDs); nItem < nItems; nItem++)
		{
			if ((pScheduledItem = m_pTCProcedureItems.GetAt(nItemIDs.GetAt(nItem) - nItem)))
			{
				m_pTCProcedureItems.RemoveAt(nItemIDs.GetAt(nItem) - nItem);
				delete pScheduledItem;
			}
		}
		if (nItemIDs.GetSize() > 0)
		{
			m_bIdle = (!m_pTCProcedureItems.GetSize()) ? TRUE : FALSE;
			m_bUpdate.SetEvent();
			Unlock();
			return TRUE;
		}
		Unlock();
	}
	return FALSE;
}

BOOL CTCProcedureScheduleThread::Update()
{
	return m_bUpdate.SetEvent();
}

BOOL CTCProcedureScheduleThread::IsIdle() CONST
{
	return m_bIdle;
}

BEGIN_MESSAGE_MAP(CTCProcedureScheduleThread, CThread)
	//{{AFX_MSG_MAP(CTCProcedureScheduleThread)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureScheduleThread message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureVerificationThread

IMPLEMENT_DYNAMIC(CTCProcedureVerificationThread, CThread)

CTCProcedureVerificationThread::CTCProcedureVerificationThread() : CThread()
{
	m_pDatabase = (CONST CDatabaseEngine *) NULL;
	m_pTCProcessEngine = (CTCProcessEngine *)NULL;
	m_pTCEnvironment = (CTCEnvironment *)NULL;
	m_pTCProcedureWnd = (CTCProcedureWnd *)NULL;
	m_hTCProcedureCode = (HINSTANCE)NULL;
	m_nTCProcedureID = -1;
	m_bIdle = TRUE;
}

CTCProcedureVerificationThread::~CTCProcedureVerificationThread()
{
	Stop();
}

BOOL CTCProcedureVerificationThread::Start(CTCProcedureWnd *pTCProcedureWnd, LPCTSTR pszName, CONST CDatabaseEngine *pDatabase, CTCProcessEngine *pTCProcessEngine, CTCEnvironment *pTCEnvironment, INT nTCProcedureID, HINSTANCE hTCProcedureCode)
{
	for (m_pTCProcedureWnd = pTCProcedureWnd, m_szTCProcedureName = pszName, m_pDatabase = pDatabase, m_pTCProcessEngine = pTCProcessEngine, m_pTCEnvironment = pTCEnvironment, m_nTCProcedureID = nTCProcedureID, m_hTCProcedureCode = hTCProcedureCode, m_pTCProcedureItems.RemoveAll(), m_bIdle = TRUE; CreateThread((LPVOID)NULL, THREAD_PRIORITY_ABOVE_NORMAL); ) return TRUE;
	return FALSE;
}

BOOL CTCProcedureVerificationThread::Stop()
{
	DWORD  dwResult;

	for (dwResult = (GetThreadHandle() != (HANDLE)NULL) ? ResumeThread() : -1; dwResult > 0 && dwResult != (DWORD)-1; dwResult = ResumeThread());
	return((DestroyThread() >= 0) ? TRUE : FALSE);
}

int CTCProcedureVerificationThread::Run()
{
	INT  nItem;
	INT  nItems;
	INT  nStage[4];
	INT  nStages[4];
	BOOL  bResult;
	BOOL  bFailure;
	BOOL  bChecks[2];
	DWORD  dwResult;
	DWORD  dwTimeout[2];
	HANDLE  hResult[2];
	CString  szMessage[2];
	CString  szProcedure[3];
	CTimeTag  tVerification;
	CUIntArray  nStageIDs;
	CUIntArray  nStageTimeWindows[3];
	CStringArray  szParameters;
	CTCProcedureItem  *pItem;
	CDatabaseTCFunction  cTCFunction;
	BOOL(__cdecl *pEnumThreadTCFunctionExecutionVerificationTimeWindows)(INT nID, LPCTSTR pszThread, LPCTSTR pszStep, INT nEntry, CUIntArray &nStageIDs, CUIntArray &nStageTimeWindowOffsets, CUIntArray &nStageTimeWindowSizes, CUIntArray &nStageTimeWindowUncertainties);
	BOOL(__cdecl *pCheckThreadTCFunctionPreexecutionExpression)(INT nID, LPCTSTR pszThread, LPCTSTR pszStep, INT nEntry, CStringArray &szParameters);
	BOOL(__cdecl *pCheckThreadTCFunctionExecutionExpression)(INT nID, LPCTSTR pszThread, LPCTSTR pszStep, INT nEntry, CONST CDatabaseTCFunction *pTCFunction, INT nStageID, CONST CTimeTag &tStageStart, CONST CTimeSpan &tUncertainty, CStringArray &szParameters);

	do
	{
		if (Lock())
		{
#ifndef UNICODE
			szProcedure[0] = STRING(IDS_EXPORTINTERFACE_ENUMTCPROCEDUREFUNCTIONEXECUTIONVERIFICATIONTIMEWINDOWS);
			szProcedure[1] = STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDUREFUNCTIONPREEXECUTIONCONDITION);
			szProcedure[2] = STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDUREFUNCTIONEXECUTIONCONDITION);
			dwTimeout[0] = INFINITE;
#else
			WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_ENUMTCPROCEDUREFUNCTIONEXECUTIONVERIFICATIONTIMEWINDOWS), -1, (LPSTR)szProcedure[0].GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_ENUMTCPROCEDUREFUNCTIONEXECUTIONVERIFICATIONTIMEWINDOWS))), lstrlen(STRING(IDS_EXPORTINTERFACE_ENUMTCPROCEDUREFUNCTIONEXECUTIONVERIFICATIONTIMEWINDOWS)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
			WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDUREFUNCTIONPREEXECUTIONCONDITION), -1, (LPSTR)szProcedure[1].GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDUREFUNCTIONPREEXECUTIONCONDITION))), lstrlen(STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDUREFUNCTIONPREEXECUTIONCONDITION)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
			WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDUREFUNCTIONEXECUTIONCONDITION), -1, (LPSTR)szProcedure[2].GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDUREFUNCTIONEXECUTIONCONDITION))), lstrlen(STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDUREFUNCTIONEXECUTIONCONDITION)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
			szProcedure[0].ReleaseBuffer();
			szProcedure[1].ReleaseBuffer();
			szProcedure[2].ReleaseBuffer();
			dwTimeout[0] = INFINITE;
#endif
			if ((pEnumThreadTCFunctionExecutionVerificationTimeWindows = (BOOL(__cdecl *)(INT nID, LPCTSTR pszThread, LPCTSTR pszStep, INT nEntry, CUIntArray &nStageIDs, CUIntArray &nStageTimeWindowOffsets, CUIntArray &nStageTimeWindowSizes, CUIntArray &nStageTimeWindowUncertainties)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure[0])))
			{
				if ((pCheckThreadTCFunctionPreexecutionExpression = (BOOL(__cdecl *)(INT nID, LPCTSTR pszThread, LPCTSTR pszStep, INT nEntry, CStringArray &szParameters)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure[1])))
				{
					if ((pCheckThreadTCFunctionExecutionExpression = (BOOL(__cdecl *)(INT nID, LPCTSTR pszThread, LPCTSTR pszStep, INT nEntry, CONST CDatabaseTCFunction *pTCFunction, INT nStageID, CONST CTimeTag &tStageStart, CONST CTimeSpan &tUncertainty, CStringArray &szParameters)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure[2])))
					{
						for (nItem = 0, nItems = (INT)m_pTCProcedureItems.GetSize(), tVerification = CTimeTag(), bChecks[0] = m_pTCProcedureWnd->GetPropertiesView()->IsTCStackPreexecutionVerificationEnabled(), bChecks[1] = m_pTCProcedureWnd->GetPropertiesView()->IsTCStackExecutionVerificationEnabled(); nItem < nItems; nItem++)
						{
							if ((pItem = m_pTCProcedureItems.GetAt(nItem)) && pItem->GetFunction(&cTCFunction))
							{
								for (; pItem->GetExecutionTime() > 0 && !pItem->GetVerificationFlag() && bChecks[0]; )
								{
									if ((dwTimeout[1] = (DWORD)min(max((pItem->GetExecutionTime().GetTime() - tVerification.GetTime()) / 1000, 0), 1000 * SECONDSPERDAY)) == 0)
									{
										if ((*pCheckThreadTCFunctionPreexecutionExpression)(m_nTCProcedureID, pItem->GetThread(), pItem->GetStep(), pItem->GetEntryID(), szParameters))
										{
											pItem->SetVerificationFlag(TRUE);
											break;
										}
										szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCFUNCTIONPREEXECUTIONVERIFICATION_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction());
										szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEQUENCEPREEXECUTIONVERIFICATION_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction(), (LPCTSTR)pItem->GetSequence(), pItem->GetEntryID());
										m_pTCEnvironment->AddMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_WARNING), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]);
										pItem->SetVerificationFlag(TRUE);
										break;
									}
									dwTimeout[0] = min(dwTimeout[0], dwTimeout[1]);
									break;
								}
								if ((bResult = (*pEnumThreadTCFunctionExecutionVerificationTimeWindows)(m_nTCProcedureID, pItem->GetThread(), pItem->GetStep(), pItem->GetEntryID(), nStageIDs, nStageTimeWindows[0], nStageTimeWindows[1], nStageTimeWindows[2])) && bChecks[1])
								{
									for (nStage[0] = 0, nStages[0] = ((pItem->GetVerificationStages() & (TCVERIFICATIONSTAGE_ACCEPTANCE | TCVERIFICATIONSTAGE_START | TCVERIFICATIONSTAGE_PROGRESS | TCVERIFICATIONSTAGE_COMPLETION)) == 0) ? (INT)nStageIDs.GetSize() : 0, bFailure = FALSE; nStage[0] < nStages[0]; nStage[0]++)
									{
										if (MAKETCEXEVERSTAGEFROMID(nStageIDs.GetAt(nStage[0])) == TCVERIFICATIONSTAGE_ACCEPTANCE)
										{
											if (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[0]) + nStageTimeWindows[1].GetAt(nStage[0]) + nStageTimeWindows[2].GetAt(nStage[0])) >= tVerification.GetTime())
											{
												if (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)nStageTimeWindows[0].GetAt(nStage[0]) <= tVerification.GetTime())
												{
													if ((*pCheckThreadTCFunctionExecutionExpression)(m_nTCProcedureID, pItem->GetThread(), pItem->GetStep(), pItem->GetEntryID(), &cTCFunction, nStageIDs.GetAt(nStage[0]), pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[0]) + nStageTimeWindows[2].GetAt(nStage[0])), nStageTimeWindows[2].GetAt(nStage[0]), szParameters))
													{
														for (pItem->SetVerificationStages(pItem->GetVerificationStages() | TCVERIFICATIONSTAGE_ACCEPTANCE); (pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCFUNCTION_ACKFLAG_ACCEPTANCE)) || (!pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCSEQUENCEENTRY_ACKFLAG_ACCEPTANCE)); )
														{
															szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTIONACCEPTANCESTAGE_SUCCESS), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction());
															szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCEACCEPTANCESTAGE_SUCCESS), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction(), (LPCTSTR)pItem->GetSequence(), pItem->GetEntryID());
															ShowVerificationMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_SUCCESS), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]);
															break;
														}
														nStage[0] = nStages[0];
														break;
													}
													if (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[0]) + nStageTimeWindows[2].GetAt(nStage[0])) < tVerification.GetTime() && szParameters.GetSize() > 0)
													{
														if ((pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCFUNCTION_ACKFLAG_ACCEPTANCE)) || (!pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCSEQUENCEENTRY_ACKFLAG_ACCEPTANCE)))
														{
															szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTIONACCEPTANCESTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction());
															szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCEACCEPTANCESTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction(), (LPCTSTR)pItem->GetSequence(), pItem->GetEntryID());
															ShowVerificationMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]);
														}
														bFailure = TRUE;
														break;
													}
													dwTimeout[1] = (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[0]) + nStageTimeWindows[2].GetAt(nStage[0])) >= tVerification.GetTime()) ? (DWORD)min((pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[0]) + nStageTimeWindows[2].GetAt(nStage[0])) - tVerification.GetTime()) / 1000, 1000 * SECONDSPERDAY) : (DWORD)min((pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[0]) + nStageTimeWindows[1].GetAt(nStage[0]) + nStageTimeWindows[2].GetAt(nStage[0])) - tVerification.GetTime()) / 1000, 1000 * SECONDSPERDAY);
													dwTimeout[0] = min(dwTimeout[0], dwTimeout[1]);
													break;
												}
												dwTimeout[1] = (DWORD)min((pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)nStageTimeWindows[0].GetAt(nStage[0]) - tVerification.GetTime()) / 1000, 1000 * SECONDSPERDAY);
												dwTimeout[0] = min(dwTimeout[0], dwTimeout[1]);
												break;
											}
											if ((pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCFUNCTION_ACKFLAG_ACCEPTANCE)) || (!pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCSEQUENCEENTRY_ACKFLAG_ACCEPTANCE)))
											{
												szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTIONACCEPTANCESTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction());
												szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCEACCEPTANCESTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction(), (LPCTSTR)pItem->GetSequence(), pItem->GetEntryID());
												ShowVerificationMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]);
											}
											bFailure = TRUE;
											break;
										}
									}
									for (nStage[1] = 0, nStages[1] = ((pItem->GetVerificationStages() & (TCVERIFICATIONSTAGE_START | TCVERIFICATIONSTAGE_PROGRESS | TCVERIFICATIONSTAGE_COMPLETION)) == 0 && nStage[0] == nStages[0]) ? (INT)nStageIDs.GetSize() : 0; nStage[1] < nStages[1]; nStage[1]++)
									{
										if (MAKETCEXEVERSTAGEFROMID(nStageIDs.GetAt(nStage[1])) == TCVERIFICATIONSTAGE_START)
										{
											if (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[1]) + nStageTimeWindows[1].GetAt(nStage[1]) + nStageTimeWindows[2].GetAt(nStage[1])) >= tVerification.GetTime())
											{
												if (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)nStageTimeWindows[0].GetAt(nStage[1]) <= tVerification.GetTime())
												{
													if ((*pCheckThreadTCFunctionExecutionExpression)(m_nTCProcedureID, pItem->GetThread(), pItem->GetStep(), pItem->GetEntryID(), &cTCFunction, nStageIDs.GetAt(nStage[1]), pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[1]) + nStageTimeWindows[2].GetAt(nStage[1])), nStageTimeWindows[2].GetAt(nStage[1]), szParameters))
													{
														for (pItem->SetVerificationStages(pItem->GetVerificationStages() | TCVERIFICATIONSTAGE_START); (pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCFUNCTION_ACKFLAG_START)) || (!pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCSEQUENCEENTRY_ACKFLAG_START)); )
														{
															szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTIONSTARTSTAGE_SUCCESS), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction());
															szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCESTARTSTAGE_SUCCESS), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction(), (LPCTSTR)pItem->GetSequence(), pItem->GetEntryID());
															ShowVerificationMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_SUCCESS), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]);
															break;
														}
														nStage[1] = nStages[1];
														break;
													}
													if (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[1]) + nStageTimeWindows[2].GetAt(nStage[1])) < tVerification.GetTime() && szParameters.GetSize() > 0)
													{
														if ((pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCFUNCTION_ACKFLAG_ACCEPTANCE)) || (!pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCSEQUENCEENTRY_ACKFLAG_ACCEPTANCE)))
														{
															szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTIONACCEPTANCESTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction());
															szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCEACCEPTANCESTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction(), (LPCTSTR)pItem->GetSequence(), pItem->GetEntryID());
															ShowVerificationMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]);
														}
														bFailure = TRUE;
														break;
													}
													dwTimeout[1] = (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[1]) + nStageTimeWindows[2].GetAt(nStage[1])) >= tVerification.GetTime()) ? (DWORD)min((pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[1]) + nStageTimeWindows[2].GetAt(nStage[1])) - tVerification.GetTime()) / 1000, 1000 * SECONDSPERDAY) : (DWORD)min((pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[1]) + nStageTimeWindows[1].GetAt(nStage[1]) + nStageTimeWindows[2].GetAt(nStage[1])) - tVerification.GetTime()) / 1000, 1000 * SECONDSPERDAY);
													dwTimeout[0] = min(dwTimeout[0], dwTimeout[1]);
													break;
												}
												dwTimeout[1] = (DWORD)min((pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)nStageTimeWindows[0].GetAt(nStage[1]) - tVerification.GetTime()) / 1000, 1000 * SECONDSPERDAY);
												dwTimeout[0] = min(dwTimeout[0], dwTimeout[1]);
												break;
											}
											if ((pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCFUNCTION_ACKFLAG_START)) || (!pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCSEQUENCEENTRY_ACKFLAG_START)))
											{
												szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTIONSTARTSTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction());
												szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCESTARTSTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction(), (LPCTSTR)pItem->GetSequence(), pItem->GetEntryID());
												ShowVerificationMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]);
											}
											bFailure = TRUE;
											break;
										}
									}
									for (nStage[2] = 0, nStages[2] = ((pItem->GetVerificationStages() & (TCVERIFICATIONSTAGE_PROGRESS | TCVERIFICATIONSTAGE_COMPLETION)) == 0 && nStage[0] == nStages[0] && nStage[1] == nStages[1]) ? (INT)nStageIDs.GetSize() : 0; nStage[2] < nStages[2]; nStage[2]++)
									{
										if (MAKETCEXEVERSTAGEFROMID(nStageIDs.GetAt(nStage[2])) == TCVERIFICATIONSTAGE_PROGRESS)
										{
											if (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[2]) + nStageTimeWindows[1].GetAt(nStage[2]) + nStageTimeWindows[2].GetAt(nStage[2])) >= tVerification.GetTime())
											{
												if (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)nStageTimeWindows[0].GetAt(nStage[2]) <= tVerification.GetTime())
												{
													if ((*pCheckThreadTCFunctionExecutionExpression)(m_nTCProcedureID, pItem->GetThread(), pItem->GetStep(), pItem->GetEntryID(), &cTCFunction, nStageIDs.GetAt(nStage[2]), pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[2]) + nStageTimeWindows[2].GetAt(nStage[2])), nStageTimeWindows[2].GetAt(nStage[2]), szParameters))
													{
														for (pItem->SetVerificationStages(pItem->GetVerificationStages() | TCVERIFICATIONSTAGE_PROGRESS); (pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCFUNCTION_ACKFLAG_PROGRESS)) || (!pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCSEQUENCEENTRY_ACKFLAG_PROGRESS)); )
														{
															szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTIONPROGRESSSTAGE_SUCCESS), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction());
															szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCEPROGRESSSTAGE_SUCCESS), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction(), (LPCTSTR)pItem->GetSequence(), pItem->GetEntryID());
															ShowVerificationMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_SUCCESS), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]);
															break;
														}
														nStage[2] = nStages[2];
														break;
													}
													if (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[2]) + nStageTimeWindows[2].GetAt(nStage[2])) < tVerification.GetTime() && szParameters.GetSize() > 0)
													{
														if ((pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCFUNCTION_ACKFLAG_ACCEPTANCE)) || (!pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCSEQUENCEENTRY_ACKFLAG_ACCEPTANCE)))
														{
															szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTIONACCEPTANCESTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction());
															szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCEACCEPTANCESTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction(), (LPCTSTR)pItem->GetSequence(), pItem->GetEntryID());
															ShowVerificationMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]);
														}
														bFailure = TRUE;
														break;
													}
													dwTimeout[1] = (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[2]) + nStageTimeWindows[2].GetAt(nStage[2])) >= tVerification.GetTime()) ? (DWORD)min((pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[2]) + nStageTimeWindows[2].GetAt(nStage[2])) - tVerification.GetTime()) / 1000, 1000 * SECONDSPERDAY) : (DWORD)min((pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[2]) + nStageTimeWindows[1].GetAt(nStage[2]) + nStageTimeWindows[2].GetAt(nStage[2])) - tVerification.GetTime()) / 1000, 1000 * SECONDSPERDAY);
													dwTimeout[0] = min(dwTimeout[0], dwTimeout[1]);
													break;
												}
												dwTimeout[1] = (DWORD)min((pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)nStageTimeWindows[0].GetAt(nStage[2]) - tVerification.GetTime()) / 1000, 1000 * SECONDSPERDAY);
												dwTimeout[0] = min(dwTimeout[0], dwTimeout[1]);
												break;
											}
											if ((pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCFUNCTION_ACKFLAG_PROGRESS)) || (!pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCSEQUENCEENTRY_ACKFLAG_PROGRESS)))
											{
												szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTIONPROGRESSSTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction());
												szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCEPROGRESSSTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction(), (LPCTSTR)pItem->GetSequence(), pItem->GetEntryID());
												ShowVerificationMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]);
											}
											bFailure = TRUE;
											break;
										}
									}
									for (nStage[3] = 0, nStages[3] = ((pItem->GetVerificationStages() & TCVERIFICATIONSTAGE_COMPLETION) == 0 && nStage[0] == nStages[0] && nStage[1] == nStages[1] && nStage[2] == nStages[2]) ? (INT)nStageIDs.GetSize() : 0; nStage[3] < nStages[3]; nStage[3]++)
									{
										if (MAKETCEXEVERSTAGEFROMID(nStageIDs.GetAt(nStage[3])) == TCVERIFICATIONSTAGE_COMPLETION)
										{
											if (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[3]) + nStageTimeWindows[1].GetAt(nStage[3]) + nStageTimeWindows[2].GetAt(nStage[3])) >= tVerification.GetTime())
											{
												if (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)nStageTimeWindows[0].GetAt(nStage[3]) <= tVerification.GetTime())
												{
													if ((*pCheckThreadTCFunctionExecutionExpression)(m_nTCProcedureID, pItem->GetThread(), pItem->GetStep(), pItem->GetEntryID(), &cTCFunction, nStageIDs.GetAt(nStage[3]), pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[3]) + nStageTimeWindows[2].GetAt(nStage[3])), nStageTimeWindows[2].GetAt(nStage[3]), szParameters))
													{
														for (pItem->SetVerificationStages(pItem->GetVerificationStages() | TCVERIFICATIONSTAGE_COMPLETION); (pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCFUNCTION_ACKFLAG_COMPLETION)) || (!pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCSEQUENCEENTRY_ACKFLAG_COMPLETION)); )
														{
															szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTIONCOMPLETIONSTAGE_SUCCESS), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction());
															szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCECOMPLETIONSTAGE_SUCCESS), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction(), (LPCTSTR)pItem->GetSequence(), pItem->GetEntryID());
															ShowVerificationMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_SUCCESS), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]);
															break;
														}
														nStage[3] = nStages[3];
														break;
													}
													if (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[3]) + nStageTimeWindows[2].GetAt(nStage[3])) < tVerification.GetTime() && szParameters.GetSize() > 0)
													{
														if ((pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCFUNCTION_ACKFLAG_ACCEPTANCE)) || (!pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCSEQUENCEENTRY_ACKFLAG_ACCEPTANCE)))
														{
															szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTIONACCEPTANCESTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction());
															szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCEACCEPTANCESTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction(), (LPCTSTR)pItem->GetSequence(), pItem->GetEntryID());
															ShowVerificationMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]);
														}
														bFailure = TRUE;
														break;
													}
													dwTimeout[1] = (pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[3]) + nStageTimeWindows[2].GetAt(nStage[3])) >= tVerification.GetTime()) ? (DWORD)min((pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[3]) + nStageTimeWindows[2].GetAt(nStage[3])) - tVerification.GetTime()) / 1000, 1000 * SECONDSPERDAY) : (DWORD)min((pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)(nStageTimeWindows[0].GetAt(nStage[3]) + nStageTimeWindows[1].GetAt(nStage[3]) + nStageTimeWindows[2].GetAt(nStage[3])) - tVerification.GetTime()) / 1000, 1000 * SECONDSPERDAY);
													dwTimeout[0] = min(dwTimeout[0], dwTimeout[1]);
													break;
												}
												dwTimeout[1] = (DWORD)min((pItem->GetVerificationTime().GetTime() + 1000000 * (TIMETAG)nStageTimeWindows[0].GetAt(nStage[3]) - tVerification.GetTime()) / 1000, 1000 * SECONDSPERDAY);
												dwTimeout[0] = min(dwTimeout[0], dwTimeout[1]);
												break;
											}
											if ((pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCFUNCTION_ACKFLAG_COMPLETION)) || (!pItem->GetSequence().IsEmpty() && (pItem->GetAckFlags() & TCSEQUENCEENTRY_ACKFLAG_COMPLETION)))
											{
												szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTIONCOMPLETIONSTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction());
												szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCECOMPLETIONSTAGE_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction(), (LPCTSTR)pItem->GetSequence(), pItem->GetEntryID());
												ShowVerificationMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]);
											}
											bFailure = TRUE;
											break;
										}
									}
									if (!bFailure)
									{
										for (nStage[0] = 0, nStages[0] = (INT)nStageIDs.GetSize(); nStage[0] < nStages[0]; nStage[0]++)
										{
											if ((MAKETCEXEVERSTAGEFROMID(nStageIDs.GetAt(nStage[0])) & pItem->GetVerificationStages()) == 0) break;
											continue;
										}
										if (nStage[0] == nStages[0])
										{
											for (; pItem->GetEntryID() == pItem->GetEntryCount() && pItem->GetHandles(hResult[0], hResult[1]); )
											{
												SetEvent(hResult[0]);
												break;
											}
											m_pTCProcedureWnd->GetPropertiesView()->UpdateTCStack(pItem, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_RELEASEDANDVERIFIED), STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKRESULT_SUCCESSFUL));
										}
										if (nStage[0] < nStages[0])
										{
											m_pTCProcedureWnd->GetPropertiesView()->UpdateTCStack(pItem, (pItem->GetVerificationTime() <= tVerification) ? STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_RELEASEDANDVERIFYING) : STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_RELEASED), EMPTYSTRING);
											continue;
										}
									}
									if (bFailure)
									{
										for (szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCFUNCTIONEXECUTIONVERIFICATION_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction()), szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSEQUENCEEXECUTIONVERIFICATION_FAILURE), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)pItem->GetFunction(), (LPCTSTR)pItem->GetSequence(), pItem->GetEntryID()), m_pTCEnvironment->AddMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : szMessage[1]); pItem->GetEntryID() == pItem->GetEntryCount() && pItem->GetHandles(hResult[0], hResult[1]); )
										{
											SetEvent(hResult[1]);
											break;
										}
										m_pTCProcedureWnd->GetPropertiesView()->UpdateTCStack(pItem, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_RELEASEDANDVERIFIED), STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKRESULT_FAILED));
									}
								}
								if (!bResult || !bChecks[1])
								{
									if (pItem->GetEntryID() == pItem->GetEntryCount() && pItem->GetHandles(hResult[0], hResult[1]) && bResult  &&  !bChecks[1]) SetEvent(hResult[0]);
									m_pTCProcedureWnd->GetPropertiesView()->UpdateTCStack(pItem, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_RELEASED), STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKRESULT_NONE));
								}
								if (pItem->GetExecutionTime() == 0 || pItem->GetVerificationFlag() || !bChecks[0])
								{
									m_bIdle = (m_pTCProcedureItems.GetSize() == 1);
									m_pTCProcedureItems.RemoveAt(nItem);
									delete pItem;
									nItems--;
									nItem--;
								}
							}
						}
						if (m_pTCProcedureWnd->TerminateTestingProcedure(FALSE))
						{
							Unlock();
							break;
						}
						Unlock();
						continue;
					}
				}
			}
			Unlock();
		}
		szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSTACKVERIFICATION_FAILURE), (LPCTSTR)m_szTCProcedureName);
		m_pTCEnvironment->AddMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), szMessage[0]);
		break;
	} while ((dwResult = Wait(m_bUpdate, FALSE, dwTimeout[0])) == WAIT_OBJECT_0 + 1 || dwResult == WAIT_TIMEOUT);
	for (nItem = 0, nItems = (dwResult == WAIT_OBJECT_0) ? (INT)m_pTCProcedureItems.GetSize() : 0; nItem < nItems; nItem++)
	{
		m_pTCProcedureWnd->GetPropertiesView()->UpdateTCStack(pItem, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_RELEASEDANDVERIFIED), STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKRESULT_FAILED));
		continue;
	}
	return 0;
}

BOOL CTCProcedureVerificationThread::Verify(CONST CTCProcedureItem *pItem)
{
	INT  nItem;
	INT  nItems;
	CTimeTag  tVerificationTime;
	CTCProcedureItem  *pVerifiedItem[2];

	if (Lock())
	{
		if ((pVerifiedItem[0] = (!pItem->GetProcedureFlag()) ? new CTCProcedureItem : (CTCProcedureItem *)NULL))
		{
			for (nItem = 0, nItems = (INT)m_pTCProcedureItems.GetSize(), pVerifiedItem[0]->Copy(pItem), pVerifiedItem[0]->SetVerificationTime(max(tVerificationTime, max(pItem->GetReleaseTime(), pItem->GetExecutionTime()))); nItem < nItems; nItem++)
			{
				if ((pVerifiedItem[1] = m_pTCProcedureItems.GetAt(nItem)) != (CTCProcedureItem *)NULL)
				{
					if (pVerifiedItem[0]->GetVerificationTime() < pVerifiedItem[1]->GetVerificationTime()) break;
					continue;
				}
			}
			m_pTCProcedureItems.InsertAt(nItem, pVerifiedItem[0], 1);
			m_bUpdate.SetEvent();
			m_bIdle = FALSE;
			Unlock();
			return TRUE;
		}
		Unlock();
	}
	return FALSE;
}

BOOL CTCProcedureVerificationThread::Update()
{
	return m_bUpdate.SetEvent();
}

BOOL CTCProcedureVerificationThread::IsIdle() CONST
{
	return m_bIdle;
}

VOID CTCProcedureVerificationThread::ShowVerificationMessage(LPCTSTR pszType, LPCTSTR pszMessage)
{
	CString  szMessage;

	for (ShowVerificationMessages(), szMessage = pszMessage; !lstrcmp(pszType, STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ALERT)); )
	{
		szMessage.Format(STRING(IDS_TCPROCEDURE_MESSAGE_ALERT), (LPCTSTR)m_szTCProcedureName, pszMessage);
		break;
	}
	AlertConsoleText(STRING(IDS_OUTPUTWINDOW_DEBUGTAB), szMessage, (!lstrcmp(pszType, STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_SUCCESS))) ? VGA_COLOR_BLACK : VGA_COLOR_LTRED);
}

VOID CTCProcedureVerificationThread::ShowVerificationMessages()
{
	CString  szMessage[3];

	while (m_pTCEnvironment->RemoveMessage(szMessage[0], szMessage[1]))
	{
		for (szMessage[2] = szMessage[1]; !lstrcmp(szMessage[0], STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ALERT)); )
		{
			szMessage[2].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ALERT), (LPCTSTR)m_szTCProcedureName, (LPCTSTR)szMessage[1]);
			break;
		}
		ShowConsoleText(STRING(IDS_OUTPUTWINDOW_DEBUGTAB), szMessage[2], TRUE, FALSE);
	}
}

BEGIN_MESSAGE_MAP(CTCProcedureVerificationThread, CThread)
	//{{AFX_MSG_MAP(CTCProcedureVerificationThread)
	// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureVerificationThread message handlers


/////////////////////////////////////////////////////////////////////////////
// CTCProcedureWnd

CTMEnvironment  CTCProcedureWnd::m_cTMEnvironment;
CTCEnvironment  CTCProcedureWnd::m_cTCEnvironment;
CTCProcessEngine  CTCProcedureWnd::m_cTCProcessEngine;

CByteArray  CTCProcedureWnd::m_cTCCommandQueueInfo;
CCriticalSection  CTCProcedureWnd::m_cCriticalTCCommandQueueInfoSection;

CTCProcedureCompileThread  CTCProcedureWnd::m_cCompileThread;

IMPLEMENT_DYNCREATE(CTCProcedureWnd, CDisplayWnd)

CTCProcedureWnd::CTCProcedureWnd() : CDisplayWnd()
{
	SetType(DISPLAY_TYPE_TCPROCEDURE);
	SetTitle(STRING(IDS_WINDOW_UNTITLED));
	SetMode(DISPLAY_MODE_EDIT);
}
CTCProcedureWnd::CTCProcedureWnd(LPCTSTR pszName) : CDisplayWnd()
{
	SetType(DISPLAY_TYPE_TCPROCEDURE);
	SetTitle(STRING(IDS_WINDOW_UNTITLED));
	SetMode(DISPLAY_MODE_EDIT);
	SetName(pszName);
}

BOOL CTCProcedureWnd::Create(CMDIFrameWnd *pParentWnd, UINT nShow)
{
	CRect  rPosition[2];

	for (rPosition[0] = m_rPosition; CDisplayWnd::Create(pParentWnd, EMPTYSTRING, (nShow == (UINT)-1) ? CRect(CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT) : CRect(0, 0, 0, 0), IDR_TCPROCEDUREFRAME, (nShow != SW_SHOWMINIMIZED || nShow != SW_SHOWMAXIMIZED) ? (WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_OVERLAPPEDWINDOW | WS_VISIBLE) : (WS_CHILD | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_OVERLAPPEDWINDOW)); )
	{
		for (GetWindowRect(rPosition[1]), GetParent()->ScreenToClient(rPosition[1]), MoveWindow(0, 0, 0, 0), MoveWindow((nShow != (UINT)-1) ? rPosition[0] : rPosition[1]), ShowWindow((nShow == SW_SHOWMAXIMIZED || nShow == SW_SHOWMINIMIZED || nShow == (UINT)-1) ? SW_SHOWNORMAL : nShow); nShow == SW_SHOWMAXIMIZED || nShow == SW_SHOWMINIMIZED; )
		{
			ShowWindow(nShow);
			break;
		}
		UpdateTitle();
		UpdateMenus();
		UpdateContents();
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

VOID CTCProcedureWnd::SetName(LPCTSTR pszName)
{
	CDatabaseTCProcedure  cDatabaseTCProcedure;

	for (m_szName = pszName; IsWindow(GetSafeHwnd()); )
	{
		for (m_cDatabaseTCProcedure.SetName(pszName); GetProcedure(&cDatabaseTCProcedure); )
		{
			cDatabaseTCProcedure.SetName(pszName);
			SetProcedure(&cDatabaseTCProcedure);
			break;
		}
		break;
	}
}

CString CTCProcedureWnd::GetName() CONST
{
	CDatabaseTCProcedure  cDatabaseTCProcedure;

	return((IsWindow(GetSafeHwnd()) && GetProcedure(&cDatabaseTCProcedure) && !cDatabaseTCProcedure.GetName().IsEmpty()) ? cDatabaseTCProcedure.GetName() : m_szName);
}

VOID CTCProcedureWnd::SetTitle(LPCTSTR pszTitle)
{
	CDatabaseTCProcedure  cDatabaseTCProcedure;

	for (m_szTitle = pszTitle; IsWindow(GetSafeHwnd()); )
	{
		for (m_cDatabaseTCProcedure.SetDescription(pszTitle); GetProcedure(&cDatabaseTCProcedure); )
		{
			cDatabaseTCProcedure.SetDescription(pszTitle);
			SetProcedure(&cDatabaseTCProcedure);
			break;
		}
		UpdateTitle();
		break;
	}
}

CString CTCProcedureWnd::GetTitle() CONST
{
	CDatabaseTCProcedure  cDatabaseTCProcedure;

	return((IsWindow(GetSafeHwnd()) && GetProcedure(&cDatabaseTCProcedure) && !cDatabaseTCProcedure.GetDescription().IsEmpty()) ? cDatabaseTCProcedure.GetDescription() : m_szTitle);
}

BOOL CTCProcedureWnd::SetProcedure(CONST CDatabaseTCProcedure *pDatabaseTCProcedure, INT nFlags)
{
	if (GetFlowchartView()->SetFlowcharts(pDatabaseTCProcedure, nFlags))
	{
		GetPropertiesView()->SetProperties(pDatabaseTCProcedure, nFlags);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureWnd::GetProcedure(CDatabaseTCProcedure *pDatabaseTCProcedure, INT nFlags) CONST
{
	return GetFlowchartView()->GetFlowcharts(pDatabaseTCProcedure, nFlags) && GetPropertiesView()->GetProperties(pDatabaseTCProcedure, nFlags);
}

VOID CTCProcedureWnd::SetProperties(CONST LOGFONT *plfStepsLabelFont, COLORREF nStepsLabelColor, COLORREF nBackgroundColor)
{
	GetFlowchartView()->SetStepsLabelFont(plfStepsLabelFont, -TRUE);
	GetFlowchartView()->SetStepsLabelColor(nStepsLabelColor, -TRUE);
	GetFlowchartView()->SetBackgroundColor(nBackgroundColor, -TRUE);
}

BOOL CTCProcedureWnd::GetProperties(LOGFONT *plfStepsLabelFont, COLORREF &nStepsLabelColor, COLORREF &nBackgroundColor) CONST
{
	nBackgroundColor = GetFlowchartView()->GetBackgroundColor();
	nStepsLabelColor = GetFlowchartView()->GetStepsLabelColor();
	return GetFlowchartView()->GetStepsLabelFont(plfStepsLabelFont);
}

VOID CTCProcedureWnd::SetMode(UINT nMode)
{
	m_nTCProcedureMode = nMode;
}

UINT CTCProcedureWnd::GetMode() CONST
{
	return m_nTCProcedureMode;
}

BOOL CTCProcedureWnd::GenerateSourceCode(CString &szSourceCode, INT nFlags) CONST
{
	CDatabaseTCProcedure  cDatabaseTCProcedure;

	return((GetProcedure(&cDatabaseTCProcedure)) ? m_cCompileThread.GenerateSourceCode(GetDatabase()->GetDatabaseEngine(), &cDatabaseTCProcedure, szSourceCode, nFlags) : FALSE);
}

BOOL CTCProcedureWnd::GotoSourceCode(LPCTSTR pszLine)
{
	return GetPropertiesView()->DoGoToCode(pszLine);
}

VOID CTCProcedureWnd::SetSelectedTCThreadID(UINT nThreadID)
{
	CTCProcedureFlowchartView  *pView;

	if ((pView = GetFlowchartView()))
	{
		pView->SetSelectedThreadID(nThreadID);
		return;
	}
}

UINT CTCProcedureWnd::GetSelectedTCThreadID() CONST
{
	CTCProcedureFlowchartView  *pView;

	return(((pView = GetFlowchartView())) ? pView->GetSelectedThreadID() : 0);
}

VOID CTCProcedureWnd::SetSelectedTCStepID(UINT nStepID)
{
	CTCProcedureFlowchartView  *pView;

	if ((pView = GetFlowchartView()))
	{
		pView->SetSelectedStepID(nStepID);
		return;
	}
}

UINT CTCProcedureWnd::GetSelectedTCStepID() CONST
{
	CTCProcedureFlowchartView  *pView;

	return(((pView = GetFlowchartView())) ? pView->GetSelectedStepID() : -1);
}

VOID CTCProcedureWnd::EnableGraphicalInterface(BOOL bEnable)
{
	CDatabaseTCProcedure  cDatabaseTCProcedure;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CDatabaseTCProcedureVariables  pDatabaseTCProcedureVariables;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;
	CDatabaseTCProcedureThreadTestProfiles  pTestProfiles;

	if (GetProcedure(&cDatabaseTCProcedure))
	{
		for (cDatabaseTCProcedure.SetAttributes((!bEnable) ? (cDatabaseTCProcedure.GetAttributes() | TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE | TCPROCEDURE_SOURCECODE_CUSTOM) : (cDatabaseTCProcedure.GetAttributes() & ~(TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE | TCPROCEDURE_SOURCECODE_CUSTOM))), cDatabaseTCProcedure.SetArguments(pDatabaseTCProcedureArguments), cDatabaseTCProcedure.SetVariables(pDatabaseTCProcedureVariables), cDatabaseTCProcedure.SetSourceCode(EMPTYSTRING), cDatabaseTCProcedure.SetPrecompiledCode(EMPTYSTRING), cDatabaseTCProcedure.RemoveAll(); (pDatabaseTCProcedureThread = (bEnable) ? new CDatabaseTCProcedureThread : (CDatabaseTCProcedureThread *)NULL); )
		{
			pDatabaseTCProcedureThread->SetName(STRING(IDS_TCPROCEDURE_DEFAULTTHREAD_NAME));
			pDatabaseTCProcedureThread->SetDescription(EMPTYSTRING);
			pDatabaseTCProcedureThread->SetComments(EMPTYSTRING);
			pDatabaseTCProcedureThread->SetActivationExpression(EMPTYSTRING);
			pDatabaseTCProcedureThread->SetBreakpoints(pDatabaseTCProcedureThreadBreakpoints);
			pDatabaseTCProcedureThread->SetProfiles(pTestProfiles);
			pDatabaseTCProcedureThread->SetAttributes(TCPROCEDURETHREAD_AUTHORITY_AUTOENABLED);
			pDatabaseTCProcedureThread->SetState(TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING | TCPROCEDURETHREAD_AUTHORITY_ENABLED);
			cDatabaseTCProcedure.InsertAt(0, pDatabaseTCProcedureThread, 1);
			break;
		}
		SetProcedure(&cDatabaseTCProcedure);
		m_wndSplitter.EnableGraphicalInterface(bEnable);
	}
}

BOOL CTCProcedureWnd::IsNew() CONST
{
	return m_szName.IsEmpty();
}

BOOL CTCProcedureWnd::IsModified() CONST
{
	return((GetFlowchartView()->Check(FALSE) && GetPropertiesView()->Check(FALSE)) ? (GetFlowchartView()->IsModified() || GetPropertiesView()->IsModified()) : FALSE);
}

BOOL CTCProcedureWnd::Save(INT nPosition) CONST
{
	UINT  nShowFlags;
	INT  nPaneWidth[2];
	LOGFONT  lfStepsFont;
	COLORREF  nStepsLabelColor;
	COLORREF  nBackgroundColor;
	CProfile  cProfile;

	cProfile.DeleteDisplayWindowInfo(nPosition);
	m_wndSplitter.GetPaneWidths(nPaneWidth[0], nPaneWidth[1]);
	return((GetProperties(&lfStepsFont, nStepsLabelColor, nBackgroundColor) && cProfile.SetDisplayWindowType(nPosition, GetType()) && cProfile.SetDisplayWindowName(nPosition, GetName()) && cProfile.SetDisplayWindowPlacement(nPosition, m_rPosition, &m_ptPosition, (nShowFlags = (!IsIconic()) ? ((!IsZoomed()) ? SW_SHOWNORMAL : SW_SHOWMAXIMIZED) : SW_SHOWMINIMIZED)) && cProfile.SetTCProcedureWindowPropertyInfo(nPosition, nPaneWidth[0], nPaneWidth[1], &lfStepsFont, nStepsLabelColor, nBackgroundColor)) ? TRUE : FALSE);
}

INT CTCProcedureWnd::Load(INT nPosition)
{
	UINT  nShowFlags;
	INT  nPaneWidth[2];
	LOGFONT  lfStepsFont;
	COLORREF  nStepsLabelColor;
	COLORREF  nBackgroundColor;
	CProfile  cProfile;

	if (cProfile.GetDisplayWindowName(nPosition, m_szName) && cProfile.GetDisplayWindowPlacement(nPosition, m_rPosition, &m_ptPosition, nShowFlags) && cProfile.GetTCProcedureWindowPropertyInfo(nPosition, nPaneWidth[0], nPaneWidth[1], &lfStepsFont, nStepsLabelColor, nBackgroundColor))
	{
		if (CTCProcedureWnd::Create(GetMainWnd(), nShowFlags))
		{
			SetProperties(&lfStepsFont, nStepsLabelColor, nBackgroundColor);
			m_wndSplitter.SetPaneWidths(nPaneWidth[0], nPaneWidth[1]);
			return TRUE;
		}
		return FALSE;
	}
	return -1;
}

BOOL CTCProcedureWnd::UpdateProperties()
{
	if (m_dlgProperties.Create(this) == IDOK)
	{
		UpdateBars();
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureWnd::IsUpdatingProperties() CONST
{
	return IsWindow(m_dlgProperties.GetSafeHwnd());
}

BOOL CTCProcedureWnd::HasProperties() CONST
{
	return TRUE;
}

BOOL CTCProcedureWnd::Print(PRINTDLG *pPrintInfo, UINT nFlags)
{
	CDC  cDC;
	INT  nThread;
	INT  nThreads;
	BOOL  bMetrics;
	RECT  rtMargin[2];
	SIZE  ptPaperSize;
	DEVMODE  *pDevMode;
	DEVNAMES  *pDevNames;
	CPtrArray  pThreadMetaDCs;
	CMetaFileDC  *pThreadMetaDC;
	CStringArray  szThreads;
	CRichEditCtrl  *pEditCtrl;
	CPrintProfileInfo  cPrintProfileInfo;

	if (GetPrintProperties(szThreads, pThreadMetaDCs, &pEditCtrl, nFlags))
	{
		if (GetPrintProfile(cPrintProfileInfo) && cPrintProfileInfo.GetPaperInfo(ptPaperSize, rtMargin[0], rtMargin[1], bMetrics))
		{
			if (!AfxIsValidAddress(pPrintInfo, sizeof(PRINTDLG)))
			{
				if (CreatePrinterDC(&cPrintProfileInfo, cDC))
				{
					if (PrintJob(cDC, cPrintProfileInfo.GetPrinterName(), rtMargin[0], bMetrics, nFlags, szThreads, pThreadMetaDCs, pEditCtrl))
					{
						cDC.DeleteDC();
						return TRUE;
					}
					cDC.DeleteDC();
				}
				for (nThread = 0, nThreads = (INT)pThreadMetaDCs.GetSize(); nThread < nThreads; nThread++)
				{
					if ((pThreadMetaDC = (CMetaFileDC *)pThreadMetaDCs.GetAt(nThread)))
					{
						DeleteEnhMetaFile(pThreadMetaDC->CloseEnhanced());
						delete pThreadMetaDC;
					}
				}
				return FALSE;
			}
			if ((pDevNames = (DEVNAMES *)GlobalLock(pPrintInfo->hDevNames)))
			{
				if ((pDevMode = (DEVMODE *)GlobalLock(pPrintInfo->hDevMode)))
				{
					if (CreatePrinterDC(pPrintInfo->hDevNames, pPrintInfo->hDevMode, cDC))
					{
						if (PrintJob(cDC, (LPCTSTR)pDevMode->dmDeviceName, rtMargin[0], bMetrics, nFlags, szThreads, pThreadMetaDCs, pEditCtrl, (pPrintInfo->Flags & PD_PAGENUMS) ? pPrintInfo->nFromPage : -1, (pPrintInfo->Flags & PD_PAGENUMS) ? pPrintInfo->nToPage : -1))
						{
							GlobalUnlock(pPrintInfo->hDevNames);
							GlobalUnlock(pPrintInfo->hDevMode);
							cDC.DeleteDC();
							return TRUE;
						}
						cDC.DeleteDC();
					}
					GlobalUnlock(pPrintInfo->hDevMode);
				}
				GlobalUnlock(pPrintInfo->hDevNames);
			}
		}
		for (nThread = 0, nThreads = (INT)pThreadMetaDCs.GetSize(); nThread < nThreads; nThread++)
		{
			if ((pThreadMetaDC = (CMetaFileDC *)pThreadMetaDCs.GetAt(nThread)))
			{
				DeleteEnhMetaFile(pThreadMetaDC->CloseEnhanced());
				delete pThreadMetaDC;
			}
		}
	}
	return FALSE;
}

VOID CTCProcedureWnd::DoSave()
{
	INT  nPosition;
	CString  szMessage;

	if (CanSave())
	{
		if ((nPosition = SaveToDatabase()) >= 0)
		{
			GetTopLevelFrame()->AddMRUMenuItem(GetName(), GetTitle(), DISPLAY_TYPE_TCPROCEDURE);
			UpdateDatabase(&m_cDatabaseTCProcedure, nPosition);
			UpdateTitle();
			return;
		}
		szMessage.Format(STRING(IDS_TCPROCEDURE_FAILURE_SAVE), (LPCTSTR)GetTitle());
		ShowMessage(szMessage);
	}
}

BOOL CTCProcedureWnd::CanSave() CONST
{
	return((IsModified() && !GetDatabase()->IsCompiling() && !IsCompilingProcedure() && !IsTesting()) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
}

VOID CTCProcedureWnd::DoSaveAs()
{
	INT  nIndex;
	INT  nResult;
	INT  nPosition;
	CString  szName;
	CString  szMessage;
	CTCProcedureSaveDialog  cSaveDialog;

	if (CanSaveAs())
	{
		if ((nResult = ((szName = GetName()).GetLength() >= 0) ? cSaveDialog.Create(this) : IDCANCEL) == IDOK && (nPosition = ((nIndex = GetDatabase()->GetTCProcedures()->Find(GetName())) >= 0 || nIndex < 0) ? SaveToDatabase() : -1) >= 0)
		{
			GetTopLevelFrame()->AddMRUMenuItem(GetName(), GetTitle(), DISPLAY_TYPE_TCPROCEDURE);
			UpdateDatabase(&m_cDatabaseTCProcedure, (nIndex < 0) ? -(nPosition + 1) : nPosition);
			UpdateTitle();
			UpdateMenus();
			return;
		}
		if (nResult == IDOK)
		{
			szMessage.Format(STRING(IDS_TCPROCEDURE_FAILURE_SAVE), (LPCTSTR)GetTitle());
			ShowMessage(szMessage);
		}
	}
}

BOOL CTCProcedureWnd::CanSaveAs() CONST
{
	return CanSave();
}

VOID CTCProcedureWnd::DoDelete()
{
	INT  nPosition;
	CString  szMessage;

	if (!IsNew())
	{
		for (szMessage.Format(STRING(IDS_TCPROCEDURE_QUESTION_DELETE), (LPCTSTR)GetTitle()); MessageBox(szMessage, GetAppTitle(), MB_ICONQUESTION | MB_YESNO) == IDYES; )
		{
			if ((nPosition = DeleteFromDatabase()) >= 0)
			{
				GetTopLevelFrame()->RemoveMRUMenuItem(GetName(), GetTitle(), DISPLAY_TYPE_TCPROCEDURE);
				UpdateDatabase(&m_cDatabaseTCProcedure, nPosition, TRUE);
				DestroyWindow();
				return;
			}
			szMessage.Format(STRING(IDS_TCPROCEDURE_FAILURE_DELETE), (LPCTSTR)GetTitle());
			ShowMessage(szMessage);
			break;
		}
	}
}

BOOL CTCProcedureWnd::CanDelete() CONST
{
	return((!IsNew()) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
}

VOID CTCProcedureWnd::DoUndo()
{
	m_wndSplitter.DoUndo();
}

BOOL CTCProcedureWnd::CanUndo() CONST
{
	return m_wndSplitter.CanUndo();
}

VOID CTCProcedureWnd::DoRedo()
{
	m_wndSplitter.DoRedo();
}

BOOL CTCProcedureWnd::CanRedo() CONST
{
	return m_wndSplitter.CanRedo();
}

VOID CTCProcedureWnd::DoFind()
{
	m_wndSplitter.DoFind();
}

BOOL CTCProcedureWnd::CanFind() CONST
{
	return m_wndSplitter.CanFind();
}

VOID CTCProcedureWnd::DoFindNext(BOOL bMatchCase, BOOL bMatchWord)
{
	m_wndSplitter.DoFindNext(bMatchCase, bMatchWord);
}
VOID CTCProcedureWnd::DoFindNext(LPCTSTR pszText, BOOL bSearchAll, BOOL bMatchCase, BOOL bMatchWord)
{
	m_wndSplitter.DoFindNext(pszText, bSearchAll, bMatchCase, bMatchWord);
}

BOOL CTCProcedureWnd::CanFindNext() CONST
{
	return m_wndSplitter.CanFindNext();
}

VOID CTCProcedureWnd::DoFindPrevious(BOOL bMatchCase, BOOL bMatchWord)
{
	m_wndSplitter.DoFindPrevious(bMatchCase, bMatchWord);
}
VOID CTCProcedureWnd::DoFindPrevious(LPCTSTR pszText, BOOL bSearchAll, BOOL bMatchCase, BOOL bMatchWord)
{
	m_wndSplitter.DoFindPrevious(pszText, bSearchAll, bMatchCase, bMatchWord);
}

BOOL CTCProcedureWnd::CanFindPrevious() CONST
{
	return m_wndSplitter.CanFindPrevious();
}

VOID CTCProcedureWnd::DoReplace()
{
	m_wndSplitter.DoReplace();
}

BOOL CTCProcedureWnd::CanReplace() CONST
{
	return m_wndSplitter.CanReplace();
}

VOID CTCProcedureWnd::DoGoTo()
{
	m_wndSplitter.DoGoTo();
}

BOOL CTCProcedureWnd::CanGoTo() CONST
{
	return m_wndSplitter.CanGoTo();
}

VOID CTCProcedureWnd::DoSelectAll()
{
	m_wndSplitter.DoSelectAll();
}

BOOL CTCProcedureWnd::CanSelectAll() CONST
{
	return m_wndSplitter.CanSelectAll();
}

VOID CTCProcedureWnd::DoCutSel()
{
	m_wndSplitter.DoCutSel();
}

BOOL CTCProcedureWnd::CanCutSel() CONST
{
	return m_wndSplitter.CanCutSel();
}

VOID CTCProcedureWnd::DoCopySel()
{
	m_wndSplitter.DoCopySel();
}

BOOL CTCProcedureWnd::CanCopySel() CONST
{
	return m_wndSplitter.CanCopySel();
}

VOID CTCProcedureWnd::DoPasteSel()
{
	m_wndSplitter.DoPasteSel();
}

BOOL CTCProcedureWnd::CanPasteSel() CONST
{
	return m_wndSplitter.CanPasteSel();
}

VOID CTCProcedureWnd::DoDeleteSel()
{
	m_wndSplitter.DoDeleteSel();
}

BOOL CTCProcedureWnd::CanDeleteSel() CONST
{
	return m_wndSplitter.CanDeleteSel();
}

BOOL CTCProcedureWnd::CanPrint(UINT nFlags) CONST
{
	return(((nFlags == DISPLAY_PRINTTYPE_IMAGE  &&  GetFlowchartView()->HasImage()) || (nFlags == DISPLAY_PRINTTYPE_CODE  &&  GetPropertiesView()->HasCode() > 0)) ? TRUE : FALSE);
}

BOOL CTCProcedureWnd::DoCompile()
{
	INT  nResult;
	INT  nPosition;
	CString  szName;
	CString  szMessage[3];
	CTCProcedureSaveDialog  cSaveDialog;

	if (IsNew())
	{
		for (szMessage[0].Format(STRING(IDS_TCPROCEDURE_QUESTION_SAVE), (LPCTSTR)GetTitle()); MessageBox(szMessage[0], GetAppTitle(), MB_ICONQUESTION | MB_YESNO) == IDYES; )
		{
			if ((nResult = cSaveDialog.Create(this)) == IDOK)
			{
				if ((nPosition = SaveToDatabase()) >= 0)
				{
					UpdateDatabase(&m_cDatabaseTCProcedure, -(nPosition + 1));
					UpdateTitle();
					UpdateMenus();
				}
			}
			if (nResult == IDOK  &&  nPosition < 0)
			{
				szMessage[1].Format(STRING(IDS_TCPROCEDURE_FAILURE_SAVE), (LPCTSTR)GetTitle());
				szMessage[2].Format(STRING(IDS_TCPROCEDURE_FAILURE_COMPILE), (LPCTSTR)GetTitle());
				ShowMessage(szMessage[1]);
				ShowMessage(szMessage[2]);
				return FALSE;
			}
			if (nResult == IDOK)
			{
				SetTimer(TCPROCEDURECOMPILETHREAD_UPDATE_TIMERID, TCPROCEDURECOMPILETHREAD_UPDATE_TIMEOUT, NULL);
				return StartCompilingProcedure(GetDatabase()->GetDatabaseEngine(), &m_cDatabaseTCProcedure);
			}
			break;
		}
		szMessage[1].Format(STRING(IDS_TCPROCEDURE_FAILURE_COMPILE), (LPCTSTR)GetTitle());
		ShowMessage(szMessage[1]);
		return FALSE;
	}
	if (IsModified())
	{
		if (SaveToDatabase() < 0)
		{
			szMessage[1].Format(STRING(IDS_TCPROCEDURE_FAILURE_SAVE), (LPCTSTR)GetTitle());
			szMessage[2].Format(STRING(IDS_TCPROCEDURE_FAILURE_COMPILE), (LPCTSTR)GetTitle());
			ShowMessage(szMessage[1]);
			ShowMessage(szMessage[2]);
			return FALSE;
		}
		UpdateTitle();
	}
	SetTimer(TCPROCEDURECOMPILETHREAD_UPDATE_TIMERID, TCPROCEDURECOMPILETHREAD_UPDATE_TIMEOUT, NULL);
	return StartCompilingProcedure(GetDatabase()->GetDatabaseEngine(), &m_cDatabaseTCProcedure);
}

BOOL CTCProcedureWnd::IsCompiling() CONST
{
	return IsCompilingProcedure();
}

BOOL CTCProcedureWnd::CanCompile() CONST
{
	return((GetFlowchartView()->HasImage() || GetPropertiesView()->HasCode()) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
}

BOOL CTCProcedureWnd::StopCompiling()
{
	if (IsCompilingProcedure())
	{
		StopCompilingProcedure();
		return TRUE;
	}
	return FALSE;
}

VOID CTCProcedureWnd::DoTest()
{
	CString  szMessage;

	if (!StartTestingProcedure())
	{
		szMessage.Format(STRING(IDS_TCPROCEDURE_FAILURE_TEST), (LPCTSTR)GetName());
		ShowMessage(szMessage);
	}
}

BOOL CTCProcedureWnd::IsTesting() CONST
{
	return(m_nTCProcedureID != (UINT)-1);
}

BOOL CTCProcedureWnd::CanTest() CONST
{
	CString  szCode[2];
	CString  szFileName[2];
	CFileFindEx  cFileFind[2];

	for (szFileName[0] = GetDatabase()->GetFileName(), szFileName[1] = GetDatabase()->GetUpdateFileName(); (cFileFind[0].FindFile(szFileName[0]) || cFileFind[0].FindFile(szFileName[1])) && !cFileFind[0].FindNextFile(); )
	{
		szCode[0].Format(STRING(IDS_TELECOMMANDPROCEDURECODE_NORMAL_FILENAME), (LPCTSTR)m_cDatabaseTCProcedure.GetName());
		szCode[1].Format(STRING(IDS_TELECOMMANDPROCEDURECODE_UPDATE_FILENAME), (LPCTSTR)m_cDatabaseTCProcedure.GetName());
		szCode[0] = cFileFind[0].GetFilePath().Left(cFileFind[0].GetFilePath().GetLength() - cFileFind[0].GetFileName().GetLength()) + szCode[0];
		szCode[1] = cFileFind[0].GetFilePath().Left(cFileFind[0].GetFilePath().GetLength() - cFileFind[0].GetFileName().GetLength()) + szCode[1];
		if ((cFileFind[1].FindFile(szCode[0]) || cFileFind[1].FindFile(szCode[1])) && !cFileFind[1].FindNextFile())
		{
			cFileFind[1].Close();
			cFileFind[0].Close();
			return((!IsTesting()) ? CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) : FALSE);
		}
		cFileFind[0].Close();
		break;
	}
	return FALSE;
}

VOID CTCProcedureWnd::DoTestBreak()
{
	SuspendTestingProcedure();
}

BOOL CTCProcedureWnd::CanBreakTesting() CONST
{
	return IsProcedureTestRunning();
}

VOID CTCProcedureWnd::DoTestContinue()
{
	m_szTCProcedureStep.Empty();
	m_nTCProcedureStepID = (UINT)-1;
	m_bTCProcedureStepInto = FALSE;
	m_bTCProcedureStepOver = FALSE;
	m_bTCProcedureStepOut = FALSE;
	ResumeTestingProcedure(FALSE);
}

BOOL CTCProcedureWnd::CanContinueTesting() CONST
{
	return IsProcedureTestSuspended();
}

VOID CTCProcedureWnd::DoTestStepInto()
{
	UINT  nLine;
	UINT  nState;
	CUIntArray  nStates;
	CStringArray  szSteps;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if ((pDatabaseTCProcedureThread = (m_bTCProcedureStepBreak) ? m_cDatabaseTCProcedure.GetAt(GetSelectedTCThreadID()) : (CDatabaseTCProcedureThread *)NULL) && CheckProcedureTestState(pDatabaseTCProcedureThread->GetName(), nState, szSteps, nStates, nLine))
	{
		m_szTCProcedureStep = (szSteps.GetSize() > 0) ? szSteps.GetAt(szSteps.GetUpperBound()) : EMPTYSTRING;
		m_nTCProcedureStepID = GetSelectedTCThreadID();
		m_bTCProcedureStepInto = TRUE;
		m_bTCProcedureStepOver = FALSE;
		m_bTCProcedureStepOut = FALSE;
		ResumeTestingProcedure();
	}
}

BOOL CTCProcedureWnd::CanTestStepInto() CONST
{
	INT  nStep;
	INT  nSteps;
	UINT  nLine;
	UINT  nState;
	CPtrArray  pSteps;
	CUIntArray  nStates;
	CStringArray  szSteps;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if (IsProcedureTestSuspended())
	{
		if ((pDocument = ((pDatabaseTCProcedureThread = (m_bTCProcedureStepBreak) ? m_cDatabaseTCProcedure.GetAt(GetSelectedTCThreadID()) : (CDatabaseTCProcedureThread *)NULL) && CheckProcedureTestState(pDatabaseTCProcedureThread->GetName(), nState, szSteps, nStates, nLine)) ? new CTCProcedureDocument : (CTCProcedureDocument *)NULL))
		{
			for (nStep = 0, nSteps = (pDocument->Unmap(pDatabaseTCProcedureThread)) ? pDocument->EnumSteps(pSteps, FALSE, TRUE) : 0; nStep < nSteps; nStep++)
			{
				if ((pStep = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)) && pStep->GetName() == szSteps.GetAt(szSteps.GetUpperBound()))
				{
					nStep = (!pStep->GetSubSteps()->GetStepCount()) ? nSteps : nStep;
					break;
				}
			}
			delete pDocument;
			return((nStep < nSteps) ? TRUE : FALSE);
		}
	}
	return FALSE;
}

VOID CTCProcedureWnd::DoTestStepOver()
{
	UINT  nLine;
	UINT  nState;
	CUIntArray  nStates;
	CStringArray  szSteps;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if ((pDatabaseTCProcedureThread = (m_bTCProcedureStepBreak) ? m_cDatabaseTCProcedure.GetAt(GetSelectedTCThreadID()) : (CDatabaseTCProcedureThread *)NULL) && CheckProcedureTestState(pDatabaseTCProcedureThread->GetName(), nState, szSteps, nStates, nLine))
	{
		m_szTCProcedureStep = (szSteps.GetSize() > 0) ? szSteps.GetAt(szSteps.GetUpperBound()) : EMPTYSTRING;
		m_nTCProcedureStepID = GetSelectedTCThreadID();
		m_bTCProcedureStepInto = FALSE;
		m_bTCProcedureStepOver = TRUE;
		m_bTCProcedureStepOut = FALSE;
		ResumeTestingProcedure();
		return;
	}
	if (m_bTCProcedureLineBreak)
	{
		m_bTCProcedureStepInto = FALSE;
		m_bTCProcedureStepOver = TRUE;
		m_bTCProcedureStepOut = FALSE;
		ResumeTestingProcedure();
		return;
	}
}

BOOL CTCProcedureWnd::CanTestStepOver() CONST
{
	INT  nStep;
	INT  nSteps;
	UINT  nLine;
	UINT  nState;
	CPtrArray  pSteps;
	CUIntArray  nStates;
	CStringArray  szSteps;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if (IsProcedureTestSuspended())
	{
		if ((pDocument = ((pDatabaseTCProcedureThread = (m_bTCProcedureStepBreak) ? m_cDatabaseTCProcedure.GetAt(GetSelectedTCThreadID()) : (CDatabaseTCProcedureThread *)NULL) && CheckProcedureTestState(pDatabaseTCProcedureThread->GetName(), nState, szSteps, nStates, nLine)) ? new CTCProcedureDocument : (CTCProcedureDocument *)NULL))
		{
			for (nStep = 0, nSteps = (pDocument->Unmap(pDatabaseTCProcedureThread)) ? pDocument->EnumSteps(pSteps, FALSE, TRUE) : 0; nStep < nSteps; nStep++)
			{
				if ((pStep = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)) && pStep->GetName() == szSteps.GetAt(szSteps.GetUpperBound()))
				{
					nStep = (!pDocument->GetNextStep(pStep)) ? nSteps : nStep;
					break;
				}
			}
			delete pDocument;
			return((nStep < nSteps) ? TRUE : FALSE);
		}
		return m_bTCProcedureLineBreak;
	}
	return FALSE;
}

VOID CTCProcedureWnd::DoTestStepOut()
{
	UINT  nLine;
	UINT  nState;
	CUIntArray  nStates;
	CStringArray  szSteps;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if ((pDatabaseTCProcedureThread = (m_bTCProcedureStepBreak) ? m_cDatabaseTCProcedure.GetAt(GetSelectedTCThreadID()) : (CDatabaseTCProcedureThread *)NULL) && CheckProcedureTestState(pDatabaseTCProcedureThread->GetName(), nState, szSteps, nStates, nLine))
	{
		m_szTCProcedureStep = (szSteps.GetSize() > 0) ? szSteps.GetAt(szSteps.GetUpperBound()) : EMPTYSTRING;
		m_nTCProcedureStepID = GetSelectedTCThreadID();
		m_bTCProcedureStepInto = FALSE;
		m_bTCProcedureStepOver = FALSE;
		m_bTCProcedureStepOut = TRUE;
		ResumeTestingProcedure();
	}
}

BOOL CTCProcedureWnd::CanTestStepOut() CONST
{
	INT  nStep;
	INT  nSteps;
	UINT  nLine;
	UINT  nState;
	CPtrArray  pSteps;
	CUIntArray  nStates;
	CStringArray  szSteps;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;

	if (IsProcedureTestSuspended())
	{
		if ((pDocument = ((pDatabaseTCProcedureThread = (m_bTCProcedureStepBreak) ? m_cDatabaseTCProcedure.GetAt(GetSelectedTCThreadID()) : (CDatabaseTCProcedureThread *)NULL) && CheckProcedureTestState(pDatabaseTCProcedureThread->GetName(), nState, szSteps, nStates, nLine)) ? new CTCProcedureDocument : (CTCProcedureDocument *)NULL))
		{
			for (nStep = 0, nSteps = (pDocument->Unmap(pDatabaseTCProcedureThread)) ? pDocument->EnumSteps(pSteps, FALSE, TRUE) : 0; nStep < nSteps; nStep = nStep + 1)
			{
				if ((pStep = (CTCProcedureDocumentItem *)pSteps.GetAt(nStep)) && pStep->GetName() == szSteps.GetAt(szSteps.GetUpperBound()))
				{
					nStep = (pDocument->FindStep(pStep, FALSE)) ? nSteps : nStep;
					break;
				}
			}
			delete pDocument;
			return((nStep < nSteps) ? TRUE : FALSE);
		}
	}
	return FALSE;
}

VOID CTCProcedureWnd::DoTestReset()
{
	INT  nView;
	INT  nViews;
	CPtrArray  pViews;
	CUIntArray   nStates;
	CStringArray  szSteps;
	CStringArray  szViews;
	CTCProcedureFlowchartThreadView  *pView;

	for (nView = 0, nViews = GetFlowchartView()->EnumFlowchartViews(szViews, pViews), m_bTCProcedureDirty = FALSE; nView < nViews; nView++)
	{
		if ((pView = (CTCProcedureFlowchartThreadView *)pViews.GetAt(nView)))
		{
			GetPropertiesView()->UpdateExecutionpoint(szViews.GetAt(nView));
			pView->UpdateAllSteps(0, szSteps, nStates);
		}
	}
}

BOOL CTCProcedureWnd::CanResetTesting() CONST
{
	return((!IsTesting()) ? m_bTCProcedureDirty : FALSE);
}

VOID CTCProcedureWnd::DoTestStop()
{
	StopTestingProcedure();
}

VOID CTCProcedureWnd::DoClose()
{
	INT  nResult;
	INT  nPosition;
	CString  szName;
	CString  szMessage[2];
	CTCProcedureSaveDialog  cSaveDialog;

	if (IsNew() || IsModified())
	{
		for (szMessage[0].Format(STRING(IDS_TCPROCEDURE_QUESTION_SAVEONCLOSE), (LPCTSTR)GetTitle()); CheckDatabasePrivilege(DATABASE_PRIVILEGE_TCPROCEDURE_CHANGE) && MessageBox(szMessage[0], GetAppTitle(), MB_ICONWARNING | MB_YESNO) == IDYES; )
		{
			if ((nResult = ((szName = GetName()).IsEmpty() || IsNew()) ? cSaveDialog.Create(this) : IDOK) == IDOK && (nPosition = SaveToDatabase()) >= 0)
			{
				GetTopLevelFrame()->AddMRUMenuItem(GetName(), GetTitle(), GetType());
				UpdateDatabase(&m_cDatabaseTCProcedure, (szName != GetName()) ? -(nPosition + 1) : nPosition);
				UpdateTitle();
			}
			if (nResult == IDOK  &&  nPosition < 0)
			{
				szMessage[1].Format(STRING(IDS_TCPROCEDURE_FAILURE_SAVE), (LPCTSTR)GetTitle());
				ShowMessage(szMessage[1]);
			}
			break;
		}
	}
}

BOOL CTCProcedureWnd::GetPrintProperties(CStringArray &szThreads, CPtrArray &pThreadMetaDCs, CRichEditCtrl **pEditCtrl, UINT nFlags) CONST
{
	return(((nFlags == DISPLAY_PRINTTYPE_IMAGE  &&  GetFlowchartView()->GetPrintProperties(szThreads, pThreadMetaDCs)) || (nFlags == DISPLAY_PRINTTYPE_CODE  &&  GetPropertiesView()->GetPrintProperties(pEditCtrl))) ? TRUE : FALSE);
}

VOID CTCProcedureWnd::UpdateBars()
{
	INT  nSteps;
	CString  szMessage;
	CStringTools  cStringTools;
	CTCProcedureDocumentItem  *pStep;
	CUpdateUI  cUpdateUI;

	szMessage.Format((!(nSteps = GetFlowchartView()->GetTotalSteps())) ? STRING(IDS_TCPROCEDURE_STATUSBAR_NOSTEPS) : ((nSteps == 1) ? STRING(IDS_TCPROCEDURE_STATUSBAR_STEP) : STRING(IDS_TCPROCEDURE_STATUSBAR_STEPS)), (LPCTSTR)cStringTools.ConvertIntToStructuredString(nSteps));
	m_wndStatusBar.SetPaneText(m_wndStatusBar.CommandToIndex(ID_TCPROCEDURE_STATUSBAR_STEPSPANE), szMessage);
	szMessage.Format(STRING(IDS_TCPROCEDURE_STATUSBAR_MODE), (GetMode() == DISPLAY_MODE_EDIT) ? STRING(IDS_TCPROCEDURE_STATUSBAR_EDITMODE) : STRING(IDS_TCPROCEDURE_STATUSBAR_DEBUGMODE));
	m_wndStatusBar.SetPaneText(m_wndStatusBar.CommandToIndex(ID_TCPROCEDURE_STATUSBAR_MODEPANE), szMessage);
	szMessage.Format(STRING(IDS_TCPROCEDURE_STATUSBAR_STEPTYPE), ((pStep = GetFlowchartView()->GetActiveStep())) ? STRING(MINTELECOMMANDPROCEDURESTEPTYPE + pStep->GetType() - 1) : STRING(IDS_TCPROCEDURE_STATUSBAR_STEPNATYPE));
	m_wndStatusBar.SetPaneText(m_wndStatusBar.CommandToIndex(ID_TCPROCEDURE_STATUSBAR_TYPEPANE), szMessage);
	szMessage.Format(STRING(IDS_TCPROCEDURE_STATUSBAR_STEPNAME), ((pStep = GetFlowchartView()->GetActiveStep())) ? ((!pStep->GetName().IsEmpty()) ? pStep->GetName() : STRING(IDS_TCPROCEDURE_STATUSBAR_STEPNONAME)) : STRING(IDS_TCPROCEDURE_STATUSBAR_STEPNANAME));
	m_wndStatusBar.SetPaneText(m_wndStatusBar.CommandToIndex(ID_TCPROCEDURE_STATUSBAR_NAMEPANE), szMessage);
}

CTCProcedureFlowchartView *CTCProcedureWnd::GetFlowchartView() CONST
{
	return m_pFlowchartView;
}

CTCProcedurePropertiesView *CTCProcedureWnd::GetPropertiesView() CONST
{
	return m_pPropertiesView;
}

VOID CTCProcedureWnd::UpdateTitle()
{
	INT  nPos;
	CString  szName;
	CString  szTitle[2];

	for (szName = GetName(), szTitle[0] = STRING(IDS_DISPLAY_TITLE_TCPROCEDURE); szName.IsEmpty(); )
	{
		szTitle[1].Format(STRING(IDS_WINDOW_FULLTITLE), STRING(IDS_WINDOW_UNTITLED), ((nPos = szTitle[0].ReverseFind(SPACE[0])) >= 0) ? (LPCTSTR)szTitle[0].Left(nPos) : (LPCTSTR)szTitle[0]);
		break;
	}
	for (szTitle[0] = GetTitle(); !szName.IsEmpty() && szTitle[0].IsEmpty(); )
	{
		szTitle[1].Format(STRING(IDS_DISPLAY_TITLE_TCPROCEDURE), (LPCTSTR)szName);
		szTitle[0].Empty();
		break;
	}
	if (!szName.IsEmpty() && !szTitle[0].IsEmpty())
	{
		szTitle[0].Format(STRING(IDS_DISPLAY_TITLE_TCPROCEDURE), (LPCTSTR)szName);
		szTitle[1].Format(STRING(IDS_WINDOW_FULLTITLE), (LPCTSTR)GetTitle(), (LPCTSTR)szTitle[0]);
	}
	SetWindowText(szTitle[1]);
}

VOID CTCProcedureWnd::UpdateMenus()
{
	GetTopLevelFrame()->AddMRUMenuItem(GetName(), GetTitle(), GetType());
}

VOID CTCProcedureWnd::UpdateContents()
{
	if (IsNew())
	{
		GetFlowchartView()->SetFlowcharts(&m_cDatabaseTCProcedure);
		GetPropertiesView()->SetProperties(&m_cDatabaseTCProcedure);
	}
}

INT CTCProcedureWnd::SaveToDatabase()
{
	INT  nIndex;

	return(((nIndex = (GetProcedure(&m_cDatabaseTCProcedure)) ? GetDatabase()->Save(&m_cDatabaseTCProcedure) : -1) >= 0 && SetProcedure(&m_cDatabaseTCProcedure, -TRUE)) ? nIndex : -1);
}

BOOL CTCProcedureWnd::LoadFromDatabase()
{
	CDatabaseTCProcedure  *pDatabaseTCProcedure;

	if ((pDatabaseTCProcedure = GetDatabase()->GetTCProcedures()->GetAt(GetDatabase()->GetTCProcedures()->Find(GetName()))) && m_cDatabaseTCProcedure.Copy(pDatabaseTCProcedure))
	{
		for (SetProcedure(&m_cDatabaseTCProcedure, -TRUE); pDatabaseTCProcedure->GetAttributes() & TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE; )
		{
			m_wndSplitter.EnableGraphicalInterface(FALSE);
			break;
		}
		return TRUE;
	}
	return FALSE;
}

INT CTCProcedureWnd::DeleteFromDatabase()
{
	return Delete(GetName());
}

BOOL CTCProcedureWnd::StartPrintJob(CDC &cDC)
{
	DOCINFO  sJobInfo;
	CString  szJobTitle;

	for (sJobInfo.fwType = 0, sJobInfo.cbSize = sizeof(DOCINFO), sJobInfo.lpszDocName = (LPTSTR)EMPTYSTRING, sJobInfo.lpszOutput = (LPCTSTR)NULL, sJobInfo.lpszDatatype = (LPCTSTR)NULL, szJobTitle.Format(STRING(IDS_PRINTDOCUMENT_TITLE), (LPCTSTR)GetAppTitle(), (LPCTSTR)GetTitle()); szJobTitle.GetLength() >= 0; )
	{
		sJobInfo.lpszDocName = (LPTSTR)(LPCTSTR)szJobTitle;
		break;
	}
	return((cDC.StartDoc(&sJobInfo) >= 0 && cDC.StartPage() >= 0) ? TRUE : FALSE);
}

BOOL CTCProcedureWnd::PrintJob(CDC &cDC, LPCTSTR pszPrinterName, CONST RECT &rtMargin, BOOL bMetric, UINT nFlags, CONST CStringArray &szThreads, CONST CPtrArray &pThreadMetaDCs, CRichEditCtrl *pEditCtrl, WORD wFromPage, WORD wToPage)
{
	INT  nPos;
	INT  nThread;
	INT  nThreads;
	INT  nPage[2];
	INT  nPages[2];
	INT  nOldMapMode;
	INT  nPrintLength;
	CRgn  rgClipArea;
	BOOL  bPrintOutput[2];
	CRect  rPrintArea[3];
	CFont  cFont[DISPLAY_PRINTFONTS];
	double  fPrintScale[2];
	CTimeKey  tPrintTime;
	CPtrArray  pFonts;
	CPtrArray  pMetaHandles;
	CUIntArray  nPrintPages;
	CMetaFileDC  *pMetaDC;
	FORMATRANGE  sFormatRange;
	ENHMETAHEADER  sMetaHeader;
	CClientDC  cClientDC(this);

	if (StartPrintJob(cDC))
	{
		if (nFlags == DISPLAY_PRINTTYPE_IMAGE)
		{
			if (CalcPrintDocRect(cDC, rtMargin, bMetric) && cDC.GetClipBox(rPrintArea[0]) != ERROR  &&  CalcPrintDocTitleFont(cDC, rPrintArea[0], cFont[DISPLAY_PRINTFONT_TITLE]) && CalcPrintDocInfoTitleFont(cDC, rPrintArea[0], cFont[DISPLAY_PRINTFONT_INFOTITLE]) && CalcPrintDocNoticeFont(cDC, rPrintArea[0], cFont[DISPLAY_PRINTFONT_NOTICE], cFont[DISPLAY_PRINTFONT_LOGO]) && CalcPrintDocFooterFont(cDC, rPrintArea[0], cFont[DISPLAY_PRINTFONT_FOOTER]))
			{
				for (nThread = 0, nThreads = (INT)szThreads.GetSize(), fPrintScale[0] = max(max((double)cDC.GetDeviceCaps(LOGPIXELSX) / (double)cClientDC.GetDeviceCaps(LOGPIXELSX), (double)cDC.GetDeviceCaps(LOGPIXELSY) / (double)cClientDC.GetDeviceCaps(LOGPIXELSY)) / 4.0, 1.0), pFonts.SetAtGrow(DISPLAY_PRINTFONT_TITLE, &cFont[DISPLAY_PRINTFONT_TITLE]), pFonts.SetAtGrow(DISPLAY_PRINTFONT_INFOTITLE, &cFont[DISPLAY_PRINTFONT_INFOTITLE]), pFonts.SetAtGrow(DISPLAY_PRINTFONT_FOOTER, &cFont[DISPLAY_PRINTFONT_FOOTER]), pFonts.SetAtGrow(DISPLAY_PRINTFONT_NOTICE, &cFont[DISPLAY_PRINTFONT_NOTICE]), pFonts.SetAtGrow(DISPLAY_PRINTFONT_LOGO, &cFont[DISPLAY_PRINTFONT_LOGO]); nThread < nThreads; nThread++)
				{
					if ((pMetaDC = (CMetaFileDC *)pThreadMetaDCs.GetAt(nThread)))
					{
						pMetaHandles.Add(pMetaDC->CloseEnhanced());
						continue;
					}
				}
				for (nThread = 0, nPage[0] = nPages[0] = 0; nThread < nThreads; nThread++)
				{
					if (GetEnhMetaFileHeader((HENHMETAFILE)pMetaHandles.GetAt(nThread), sizeof(sMetaHeader), &sMetaHeader) > 0)
					{
						if (DrawPrintDocPage(cDC, tPrintTime, pszPrinterName, szThreads.GetAt(nThread), pFonts, (rPrintArea[1] = rPrintArea[0]), -1, TRUE))
						{
							nPrintPages.SetAtGrow(nThread, (UINT)(((fPrintScale[0] * (sMetaHeader.rclBounds.right - sMetaHeader.rclBounds.left - 1)) / rPrintArea[1].Width() + 1)*((fPrintScale[0] * (sMetaHeader.rclBounds.bottom - sMetaHeader.rclBounds.top - 1)) / rPrintArea[1].Height() + 1)));
							nPages[0] += nPrintPages.GetAt(nThread);
							continue;
						}
					}
					nPages[0] = -1;
					break;
				}
				for (nThread = 0, nThreads = (nPages[0] >= 0) ? nThreads : 0, nPage[0] = 1; nThread < nThreads; nThread++)
				{
					if (GetEnhMetaFileHeader((HENHMETAFILE)pMetaHandles.GetAt(nThread), sizeof(sMetaHeader), &sMetaHeader) > 0)
					{
						for (nPage[1] = 0, nPages[1] = nPrintPages.GetAt(nThread); nPage[1] < nPages[1]; nPage[0]++, nPage[1]++)
						{
							if ((nPage[0] >= (INT)wFromPage  &&  nPage[0] <= (INT)wToPage) || (wFromPage == (WORD)-1 && wToPage == (WORD)-1))
							{
								if ((nPage[0] == (INT)wFromPage  &&  nPage[0] <= (INT)wToPage) || (wFromPage == (WORD)-1 && wToPage == (WORD)-1 && nPage[0] == 1) || cDC.StartPage() > 0)
								{
									if (DrawPrintDocPage(cDC, tPrintTime, pszPrinterName, szThreads.GetAt(nThread), pFonts, (rPrintArea[1] = rPrintArea[0]), nPage[0]))
									{
										if (rgClipArea.CreateRectRgn(rPrintArea[1].left, rPrintArea[1].top, rPrintArea[1].right, rPrintArea[1].bottom) && cDC.SelectClipRgn(&rgClipArea) != ERROR)
										{
											for (cDC.SetViewportOrg(-(nPage[1] % (INT)((fPrintScale[0] * (sMetaHeader.rclBounds.right - sMetaHeader.rclBounds.left - 1)) / rPrintArea[1].Width() + 1))*rPrintArea[1].Width(), -(nPage[1] / (INT)((fPrintScale[0] * (sMetaHeader.rclBounds.right - sMetaHeader.rclBounds.left - 1)) / rPrintArea[1].Width() + 1))*rPrintArea[1].Height()), fPrintScale[1] = (sMetaHeader.rclBounds.right - sMetaHeader.rclBounds.left > 0 && sMetaHeader.rclBounds.bottom - sMetaHeader.rclBounds.top > 0 && nPages[1] == 1) ? min((((double)rPrintArea[1].Width() / (double)(sMetaHeader.rclBounds.right - sMetaHeader.rclBounds.left)) <= (double)rPrintArea[1].Height() / (double)(sMetaHeader.rclBounds.bottom - sMetaHeader.rclBounds.top)) ? ((double)rPrintArea[1].Width() / (double)(sMetaHeader.rclBounds.right - sMetaHeader.rclBounds.left)) : ((double)rPrintArea[1].Height() / (double)(sMetaHeader.rclBounds.bottom - sMetaHeader.rclBounds.top)), 4.0*fPrintScale[0]) : fPrintScale[0], rPrintArea[2].SetRect(rPrintArea[1].left, rPrintArea[1].top, (INT)(rPrintArea[1].left + fPrintScale[1] * (sMetaHeader.rclBounds.right - sMetaHeader.rclBounds.left)), (INT)(rPrintArea[1].top + fPrintScale[1] * (sMetaHeader.rclBounds.bottom - sMetaHeader.rclBounds.top))), rPrintArea[2].OffsetRect((nPages[1] == 1) ? ((rPrintArea[1].Width() - rPrintArea[2].Width()) / 2) : 0, 0), cDC.PlayMetaFile((HENHMETAFILE)pMetaHandles.GetAt(nThread), rPrintArea[2]); (nPage[0] >= (INT)wFromPage && nPage[0] < (INT)wToPage) || (wFromPage == (WORD)-1 && wToPage == (WORD)-1 && nPage[0] < nPages[0]); )
											{
												cDC.EndPage();
												break;
											}
											cDC.SelectClipRgn((CRgn *)NULL);
											rgClipArea.DeleteObject();
											continue;
										}
										rgClipArea.DeleteObject();
									}
								}
								break;
							}
						}
						if (nPage[1] == nPages[1]) continue;
					}
					nPages[0] = -1;
					break;
				}
				if (nPages[0] >= 0)
				{
					for (nThread = 0, nThreads = (INT)pThreadMetaDCs.GetSize(); nThread < nThreads; nThread++)
					{
						if ((pMetaDC = (CMetaFileDC *)pThreadMetaDCs.GetAt(nThread)))
						{
							delete pMetaDC;
							continue;
						}
					}
					EndPrintJob(cDC);
					return TRUE;
				}
			}
		}
		if (nFlags == DISPLAY_PRINTTYPE_CODE)
		{
			if (CalcPrintDocRect(cDC, rtMargin, bMetric) && cDC.GetClipBox(rPrintArea[0]) != ERROR  &&  CalcPrintDocTitleFont(cDC, rPrintArea[0], cFont[DISPLAY_PRINTFONT_TITLE]) && CalcPrintDocInfoTitleFont(cDC, rPrintArea[0], cFont[DISPLAY_PRINTFONT_INFOTITLE]) && CalcPrintDocNoticeFont(cDC, rPrintArea[0], cFont[DISPLAY_PRINTFONT_NOTICE], cFont[DISPLAY_PRINTFONT_LOGO]) && CalcPrintDocFooterFont(cDC, rPrintArea[0], cFont[DISPLAY_PRINTFONT_FOOTER]))
			{
				for (nPos = 0, nPage[0] = 1, nPrintLength = pEditCtrl->GetTextLengthEx(GTL_PRECISE | GTL_NUMCHARS), pFonts.SetAtGrow(DISPLAY_PRINTFONT_TITLE, &cFont[DISPLAY_PRINTFONT_TITLE]), pFonts.SetAtGrow(DISPLAY_PRINTFONT_INFOTITLE, &cFont[DISPLAY_PRINTFONT_INFOTITLE]), pFonts.SetAtGrow(DISPLAY_PRINTFONT_FOOTER, &cFont[DISPLAY_PRINTFONT_FOOTER]), pFonts.SetAtGrow(DISPLAY_PRINTFONT_NOTICE, &cFont[DISPLAY_PRINTFONT_NOTICE]), pFonts.SetAtGrow(DISPLAY_PRINTFONT_LOGO, &cFont[DISPLAY_PRINTFONT_LOGO]), fPrintScale[0] = (rPrintArea[0].Height() > 0) ? min((double)rPrintArea[0].Width() / (double)rPrintArea[0].Height(), 1.0) : 1.0, bPrintOutput[0] = bPrintOutput[1] = FALSE; nPos < nPrintLength && wFromPage <= wToPage; nPage[0]++)
				{
					if (DrawPrintDocPage(cDC, tPrintTime, pszPrinterName, STRING(IDS_PRINTDOCUMENT_TITLE_SOURCECODE), pFonts, (rPrintArea[1] = rPrintArea[0]), nPage[0], !(bPrintOutput[0] = ((nPage[0] >= (INT)wFromPage  &&  nPage[0] <= (INT)wToPage) || wFromPage == (WORD)-1 || wToPage == (WORD)-1) ? TRUE : FALSE)))
					{
						for (nOldMapMode = cDC.SetMapMode(MM_ISOTROPIC), cDC.SetViewportExt((INT)(10000.0*fPrintScale[0]), (INT)(10000.0*fPrintScale[0])), cDC.SetWindowExt(10000, 10000), rPrintArea[2].left = (INT)(1440.0*(double)rPrintArea[1].left / ((double)cDC.GetDeviceCaps(LOGPIXELSX)*fPrintScale[0])), rPrintArea[2].top = (INT)(1440.0*(double)rPrintArea[1].top / ((double)cDC.GetDeviceCaps(LOGPIXELSY)*fPrintScale[0])), rPrintArea[2].right = (INT)(1440.0*(double)rPrintArea[1].right / ((double)cDC.GetDeviceCaps(LOGPIXELSX)*fPrintScale[0])), rPrintArea[2].bottom = (INT)(1440.0*(double)rPrintArea[1].bottom / ((double)cDC.GetDeviceCaps(LOGPIXELSY)*fPrintScale[0])), sFormatRange.hdc = cDC.m_hDC, sFormatRange.hdcTarget = cDC.m_hAttribDC, sFormatRange.rc = sFormatRange.rcPage = rPrintArea[2], sFormatRange.chrg.cpMin = nPos, sFormatRange.chrg.cpMax = -1; (nPos = pEditCtrl->FormatRange(&sFormatRange, bPrintOutput[0])) >= 0; )
						{
							bPrintOutput[1] = bPrintOutput[1] | bPrintOutput[0];
							break;
						}
						if ((!bPrintOutput[0] || nPage[0] == (INT)wToPage || nPos >= nPrintLength || cDC.EndPage() >= 0) && (nPos < nPrintLength && (((nPage[0] + 1 <= (INT)wFromPage || nPage[0] + 1 >(INT) wToPage) && wFromPage != (WORD)-1 && wToPage != (WORD)-1) || cDC.StartPage() >= 0)))
						{
							cDC.SetMapMode(nOldMapMode);
							cDC.SetViewportExt(1, 1);
							cDC.SetWindowExt(1, 1);
							continue;
						}
						cDC.SetMapMode(nOldMapMode);
						cDC.SetViewportExt(1, 1);
						cDC.SetWindowExt(1, 1);
					}
					break;
				}
				if (nPos >= nPrintLength  &&  bPrintOutput[1])
				{
					EndPrintJob(cDC);
					return TRUE;
				}
				if (!bPrintOutput[1])
				{
					cDC.AbortDoc();
					return TRUE;
				}
			}
		}
		cDC.AbortDoc();
	}
	return FALSE;
}

BOOL CTCProcedureWnd::EndPrintJob(CDC &cDC)
{
	return((cDC.EndPage() >= 0 && cDC.EndDoc() >= 0) ? TRUE : FALSE);
}

BOOL CTCProcedureWnd::DrawPrintDocPage(CDC &cDC, CONST CTimeKey &tTime, LPCTSTR pszPrinterName, LPCTSTR pszTitle, CONST CPtrArray &pFonts, LPRECT prClip, INT nPage, BOOL bCalc)
{
	return((DrawPrintDocTitle(cDC, prClip, GetPrintDocTitle(), (CFont *)pFonts.GetAt(DISPLAY_PRINTFONT_TITLE), bCalc) && DrawPrintDocInfoTitle(cDC, prClip, GetPrintDocInfoTitle(pszTitle), (CFont *)pFonts.GetAt(DISPLAY_PRINTFONT_INFOTITLE), bCalc) && DrawPrintDocNotice(cDC, prClip, GetPrintDocNotice(), (CFont *)pFonts.GetAt(DISPLAY_PRINTFONT_NOTICE), (CFont *)pFonts.GetAt(DISPLAY_PRINTFONT_LOGO), bCalc) && DrawPrintDocFooter(cDC, prClip, GetPrintDocFooter(tTime, pszPrinterName, nPage), (CFont *)pFonts.GetAt(DISPLAY_PRINTFONT_FOOTER), bCalc)) ? TRUE : FALSE);
}

BOOL CTCProcedureWnd::DrawPrintDocTitle(CDC &cDC, LPRECT prClip, LPCTSTR pszTitle, CFont *pFont, BOOL bCalc)
{
	CRect  rCalc;
	CFont  *pOldFont;

	if ((pOldFont = cDC.SelectObject(pFont)))
	{
		cDC.DrawText(pszTitle, (rCalc = CRect(0, 0, prClip->right - prClip->left, 0)), DT_CALCRECT | DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		cDC.DrawText(pszTitle, (!bCalc) ? prClip : CRect(0, 0, 0, 0), DT_CENTER | DT_NOPREFIX | DT_SINGLELINE);
		prClip->top += rCalc.Height();
		cDC.SelectObject(pOldFont);
		return TRUE;
	}
	return FALSE;
}

CString CTCProcedureWnd::GetPrintDocTitle() CONST
{
	return GetTitle();
}

CString CTCProcedureWnd::GetPrintDocInfoTitle(LPCTSTR pszTitle) CONST
{
	return pszTitle;
}

BOOL CTCProcedureWnd::StartCompilingProcedure(CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedure *pDatabaseTCProcedure)
{
	if (m_cCompileThread.StartCompiling(pDatabase, pDatabaseTCProcedure))
	{
		UpdateDatabase(DATABASE_COMPONENT_TCPROCEDURE, pDatabaseTCProcedure->GetName());
		return TRUE;
	}
	return FALSE;
}
BOOL CTCProcedureWnd::StartCompilingProcedure(CBinaryDatabase *pDatabase, CONST CDatabaseTCProcedure *pDatabaseTCProcedure, BOOL bSyntax, BOOL bBatch, INT &nErrors, INT &nWarnings, BOOL &bAbort)
{
	if (m_cCompileThread.StartCompiling(pDatabase, pDatabaseTCProcedure, bSyntax, bBatch, nErrors, nWarnings, bAbort))
	{
		UpdateDatabase(DATABASE_COMPONENT_TCPROCEDURE, pDatabaseTCProcedure->GetName());
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureWnd::IsCompilingProcedure()
{
	return m_cCompileThread.IsCompiling();
}

VOID CTCProcedureWnd::StopCompilingProcedure()
{
	CDatabaseTCProcedure  cDatabaseTCProcedure;

	for (m_cCompileThread.GetCompileTarget(&cDatabaseTCProcedure); IsCompilingProcedure(); )
	{
		UpdateDatabase(~DATABASE_COMPONENT_TCPROCEDURE, cDatabaseTCProcedure.GetName());
		break;
	}
	m_cCompileThread.StopCompiling();
}

BOOL CTCProcedureWnd::StartTestingProcedure()
{
	INT  nThread;
	INT  nThreads;
	INT  nProfile;
	INT  nProfiles;
	INT  nParameter;
	INT  nParameters;
	INT  nTCProcedureID;
	CString  szMessage;
	CString  szProcedure[2];
	HINSTANCE  hTCProcedureCode;
	CPtrArray  hTCProcedureEvents;
	CUIntArray  nThreadStepStates;
	CStringArray  szThreadStepNames;
	CStringArray  szErrorParameters;
	CTCProcedureFlowchartThreadView  *pView;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureArguments  pDatabaseTCProcedureArguments;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;
	CDatabaseTCProcedureThreadTestProfile  *pTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pTestProfiles;
	BOOL(__cdecl *pInitialize)(CONST CDatabaseEngine *pDatabase, CTCProcessEngine *pTCProcessEngine, CTCEnvironment *pTCEnvironment, LPCTSTR pszName, INT nProcedureID, INT nID, UINT nExecutionMode, BOOL bSynchronized, CONST CPtrArray &hEvents, CStringArray &szErrorParameters);
	BOOL(__cdecl *pStart)(INT nID, CONST CDatabaseTCProcedureArguments &pArguments, UINT nExecutionMode);

	if (PrepareProcedureForTesting())
	{
		if ((nTCProcedureID = m_cTCEnvironment.LoadTCProcedure(GetDatabase(), m_cDatabaseTCProcedure.GetName(), TRUE, hTCProcedureCode, hTCProcedureEvents)) >= 0)
		{
			for (GetFlowchartView()->EnumFlowchartViews(m_szTCProcedureViews, m_pTCProcedureViews), GetPropertiesView()->UpdateTCStack(TRUE, FALSE), GetPropertiesView()->ResetTCStack(), m_cTCProcessEngine.SetTimeCorrelation(&m_cTCEnvironment, CTimeTag(), 0), m_cTCProcessEngine.EnableDebugging(), m_nTCProcedureID = nTCProcedureID, m_nTCProcedureCount = 0, m_szTCProcedureStep.Empty(), m_nTCProcedureStepID = (UINT)-1, m_bTCProcedureStepInto = m_bTCProcedureStepOver = m_bTCProcedureStepOut = FALSE, m_bTCProcedureStepBreak = m_bTCProcedureLineBreak = FALSE, m_bTCProcedureBreak = FALSE, m_bTCProcedureDirty = FALSE, m_bTCProcedureExit = FALSE, m_hTCProcedureCode = hTCProcedureCode, m_hTCProcedureEvents.Copy(hTCProcedureEvents), m_nTCProcedureLines.RemoveAll(), m_nTCProcedureLines.SetSize(m_szTCProcedureViews.GetSize()), m_cDatabaseTCProcedure.GetArguments(pDatabaseTCProcedureArguments), m_hTCProcedureExit = (HANDLE)NULL, ResetConsoleContent(STRING(IDS_OUTPUTWINDOW_DEBUGTAB)); m_cTCTestThread.Start(this, m_cDatabaseTCProcedure.GetName(), &m_cTCEnvironment, hTCProcedureEvents) && m_cTCScheduleThread.Start(this, m_cDatabaseTCProcedure.GetName(), GetDatabase(), &m_cTCProcessEngine, &m_cTMEnvironment, &m_cTCEnvironment, nTCProcedureID, hTCProcedureCode) && m_cTCVerificationThread.Start(this, m_cDatabaseTCProcedure.GetName(), GetDatabase(), &m_cTCProcessEngine, &m_cTCEnvironment, nTCProcedureID, hTCProcedureCode); )
			{
				for (nThread = 0, nThreads = (INT)m_szTCProcedureViews.GetSize(); nThread < nThreads; nThread++)
				{
					if ((pView = (CTCProcedureFlowchartThreadView *)m_pTCProcedureViews.GetAt(nThread)))
					{
						GetPropertiesView()->UpdateExecutionpoint(m_szTCProcedureViews.GetAt(nThread));
						pView->UpdateAllSteps(0, szThreadStepNames, nThreadStepStates);
					}
				}
#ifndef UNICODE
				szProcedure[0] = STRING(IDS_EXPORTINTERFACE_INITIALIZETCPROCEDURE);
				szProcedure[1] = STRING(IDS_EXPORTINTERFACE_STARTTCPROCEDURE);
#else
				WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_INITIALIZETCPROCEDURE), -1, (LPSTR)szProcedure[0].GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_INITIALIZETCPROCEDURE))), lstrlen(STRING(IDS_EXPORTINTERFACE_INITIALIZETCPROCEDURE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
				WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_STARTTCPROCEDURE), -1, (LPSTR)szProcedure[1].GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_STARTTCPROCEDURE))), lstrlen(STRING(IDS_EXPORTINTERFACE_STARTTCPROCEDURE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
				szProcedure[0].ReleaseBuffer();
				szProcedure[1].ReleaseBuffer();
#endif
				for (nThread = 0, nThreads = (INT)m_cDatabaseTCProcedure.GetSize(); nThread < nThreads; nThread++)
				{
					if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(nThread)) && pDatabaseTCProcedureThread->GetProfiles(pTestProfiles) > 0)
					{
						for (nProfile = 0, nProfiles = (INT)pTestProfiles.GetSize(); nProfile < nProfiles; nProfile++)
						{
							if ((pTestProfile = pTestProfiles.GetAt(nProfile)) != (CDatabaseTCProcedureThreadTestProfile *)NULL)
							{
								if ((pTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_DISABLED) != TCPROCEDURETHREADTESTPROFILE_OPTION_DISABLED && (pTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART))
								{
									pTestProfile->SetRunningTime(CTime::GetCurrentTime().GetTime());
									pTestProfile->SetRunningTimeInterval(0);
									continue;
								}
								pTestProfile->SetRunningTime(0);
								pTestProfile->SetRunningTimeInterval(0);
							}
						}
						pDatabaseTCProcedureThread->SetProfiles(pTestProfiles);
					}
				}
				if ((pStart = ((pInitialize = (BOOL(__cdecl *)(CONST CDatabaseEngine *pDatabase, CTCProcessEngine *pTCProcessEngine, CTCEnvironment *pTCEnvironment, LPCTSTR pszName, INT nProcedureID, INT nID, UINT nExecutionMode, BOOL bSynchronized, CONST CPtrArray &hEvents, CStringArray &szErrorParameters)) GetProcAddress(hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure[0]))) ? (BOOL(__cdecl *)(INT nID, CONST CDatabaseTCProcedureArguments &pArguments, UINT nExecutionMode)) GetProcAddress(hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure[1]) : (BOOL(__cdecl *)(INT nID, CONST CDatabaseTCProcedureArguments &pArguments, UINT nExecutionMode)) NULL) && (*pInitialize)(GetDatabase(), &m_cTCProcessEngine, &m_cTCEnvironment, m_cDatabaseTCProcedure.GetName(), -1, nTCProcedureID, -1, TRUE, hTCProcedureEvents, szErrorParameters))
				{
					for (nThread = 0, nThreads = (INT)m_cDatabaseTCProcedure.GetSize(); nThread < nThreads; nThread++)
					{
						if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(nThread)) && pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) >= 0)
						{
							UpdateProcedureThreadBreakpoints(pDatabaseTCProcedureThread->GetName(), pDatabaseTCProcedureThreadBreakpoints);
							continue;
						}
					}
					if ((*pStart)(nTCProcedureID, pDatabaseTCProcedureArguments, m_cDatabaseTCProcedure.GetAttributes() & (TCPROCEDURE_EXECUTIONMODE_AUTOMATIC | TCPROCEDURE_EXECUTIONMODE_SINGLESTEP | TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS | TCPROCEDURE_EXECUTIONMODE_COMMANDS)))
					{
						SetMode(DISPLAY_MODE_DEBUG);
						UpdateBars();
						return TRUE;
					}
				}
				break;
			}
			for (nParameter = 0, nParameters = (INT)szErrorParameters.GetSize(), m_cTCTestThread.Stop(), m_cTCScheduleThread.Stop(), m_cTCVerificationThread.Stop(), m_nTCProcedureID = nTCProcedureID, m_hTCProcedureCode = hTCProcedureCode, StopTestingProcedure(); nParameter < nParameters; nParameter++)
			{
				szMessage.Format(STRING(IDS_TCPROCEDURE_FAILURE_LINKPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)szErrorParameters.GetAt(nParameter));
				ShowTestMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), szMessage, (nParameter == nParameters - 1) ? TRUE : FALSE);
			}
			return FALSE;
		}
		szMessage.Format(STRING(IDS_TCPROCEDURE_FAILURE_TEST), (LPCTSTR)m_cDatabaseTCProcedure.GetName());
		ShowTestMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), szMessage, TRUE);
	}
	return IsCompilingProcedure();
}
BOOL CTCProcedureWnd::StartTestingProcedure(va_list pArguments, CONST CPtrArray &pEvents)
{
	INT  nThread;
	INT  nThreads;
	INT  nProfile;
	INT  nProfiles;
	INT  nParameter;
	INT  nParameters;
	INT  nTCProcedureID;
	CString  szMessage;
	CString  szProcedure[2];
	HINSTANCE  hTCProcedureCode;
	CPtrArray  hTCProcedureEvents;
	CUIntArray  nThreadStepStates;
	CStringArray  szThreadStepNames;
	CStringArray  szErrorParameters;
	CTCProcedureFlowchartThreadView  *pView;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;
	CDatabaseTCProcedureThreadTestProfile  *pTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pTestProfiles;
	BOOL(__cdecl *pInitialize)(CONST CDatabaseEngine *pDatabase, CTCProcessEngine *pTCProcessEngine, CTCEnvironment *pTCEnvironment, LPCTSTR pszName, INT nProcedureID, INT nID, UINT nExecutionMode, BOOL bSynchronized, CONST CPtrArray &hEvents, CStringArray &szErrorParameters);
	BOOL(__cdecl *pRun)(INT nID, va_list pArguments, UINT nExecutionMode);

	if (PrepareProcedureForTesting())
	{
		if ((nTCProcedureID = m_cTCEnvironment.LoadTCProcedure(GetDatabase(), m_cDatabaseTCProcedure.GetName(), TRUE, hTCProcedureCode, hTCProcedureEvents)) >= 0)
		{
			for (GetFlowchartView()->EnumFlowchartViews(m_szTCProcedureViews, m_pTCProcedureViews), GetPropertiesView()->UpdateTCStack(TRUE, FALSE), GetPropertiesView()->ResetTCStack(), m_cTCProcessEngine.SetTimeCorrelation(&m_cTCEnvironment, CTimeTag(), 0), m_cTCProcessEngine.EnableDebugging(), m_nTCProcedureID = nTCProcedureID, m_nTCProcedureCount = 0, m_szTCProcedureStep.Empty(), m_nTCProcedureStepID = (UINT)-1, m_bTCProcedureStepInto = m_bTCProcedureStepOver = m_bTCProcedureStepOut = FALSE, m_bTCProcedureStepBreak = m_bTCProcedureLineBreak = FALSE, m_bTCProcedureBreak = FALSE, m_bTCProcedureDirty = FALSE, m_bTCProcedureExit = FALSE, m_hTCProcedureCode = hTCProcedureCode, m_hTCProcedureEvents.Copy(hTCProcedureEvents), m_nTCProcedureLines.RemoveAll(), m_nTCProcedureLines.SetSize(m_szTCProcedureViews.GetSize()), m_hTCProcedureExit = (HANDLE)NULL; m_cTCTestThread.Start(this, m_cDatabaseTCProcedure.GetName(), &m_cTCEnvironment, hTCProcedureEvents) && m_cTCScheduleThread.Start(this, m_cDatabaseTCProcedure.GetName(), GetDatabase(), &m_cTCProcessEngine, &m_cTMEnvironment, &m_cTCEnvironment, nTCProcedureID, hTCProcedureCode) && m_cTCVerificationThread.Start(this, m_cDatabaseTCProcedure.GetName(), GetDatabase(), &m_cTCProcessEngine, &m_cTCEnvironment, nTCProcedureID, hTCProcedureCode); )
			{
				for (nThread = 0, nThreads = (INT)m_szTCProcedureViews.GetSize(); nThread < nThreads; nThread++)
				{
					if ((pView = (CTCProcedureFlowchartThreadView *)m_pTCProcedureViews.GetAt(nThread)))
					{
						GetPropertiesView()->UpdateExecutionpoint(m_szTCProcedureViews.GetAt(nThread));
						pView->UpdateAllSteps(0, szThreadStepNames, nThreadStepStates);
					}
				}
#ifndef UNICODE
				szProcedure[0] = STRING(IDS_EXPORTINTERFACE_INITIALIZETCPROCEDURE);
				szProcedure[1] = STRING(IDS_EXPORTINTERFACE_RUNTCPROCEDURE);
#else
				WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_INITIALIZETCPROCEDURE), -1, (LPSTR)szProcedure[0].GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_INITIALIZETCPROCEDURE))), lstrlen(STRING(IDS_EXPORTINTERFACE_INITIALIZETCPROCEDURE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
				WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_RUNTCPROCEDURE), -1, (LPSTR)szProcedure[1].GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_RUNTCPROCEDURE))), lstrlen(STRING(IDS_EXPORTINTERFACE_RUNTCPROCEDURE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
				szProcedure[0].ReleaseBuffer();
				szProcedure[1].ReleaseBuffer();
#endif
				for (nThread = 0, nThreads = (INT)m_cDatabaseTCProcedure.GetSize(); nThread < nThreads; nThread++)
				{
					if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(nThread)) && pDatabaseTCProcedureThread->GetProfiles(pTestProfiles) > 0)
					{
						for (nProfile = 0, nProfiles = (INT)pTestProfiles.GetSize(); nProfile < nProfiles; nProfile++)
						{
							if ((pTestProfile = pTestProfiles.GetAt(nProfile)) != (CDatabaseTCProcedureThreadTestProfile *)NULL)
							{
								if ((pTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_DISABLED) != TCPROCEDURETHREADTESTPROFILE_OPTION_DISABLED && (pTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART))
								{
									pTestProfile->SetRunningTime(CTime::GetCurrentTime().GetTime());
									pTestProfile->SetRunningTimeInterval(0);
									continue;
								}
								pTestProfile->SetRunningTime(0);
								pTestProfile->SetRunningTimeInterval(0);
							}
						}
						pDatabaseTCProcedureThread->SetProfiles(pTestProfiles);
					}
				}
				if ((pRun = ((pInitialize = (BOOL(__cdecl *)(CONST CDatabaseEngine *pDatabase, CTCProcessEngine *pTCProcessEngine, CTCEnvironment *pTCEnvironment, LPCTSTR pszName, INT nProcedureID, INT nID, UINT nExecutionMode, BOOL bSynchronized, CONST CPtrArray &hEvents, CStringArray &szErrorParameters)) GetProcAddress(hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure[0]))) ? (BOOL(__cdecl *)(INT nID, va_list pArguments, UINT nExecutionMode)) GetProcAddress(hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure[1]) : (BOOL(__cdecl *)(INT nID, va_list pArguments, UINT nExecutionMode)) NULL) && (*pInitialize)(GetDatabase(), &m_cTCProcessEngine, &m_cTCEnvironment, m_cDatabaseTCProcedure.GetName(), -1, nTCProcedureID, -1, FALSE, hTCProcedureEvents, szErrorParameters))
				{
					for (nThread = 0, nThreads = (INT)m_cDatabaseTCProcedure.GetSize(); nThread < nThreads; nThread++)
					{
						if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(nThread)) && pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) >= 0)
						{
							UpdateProcedureThreadBreakpoints(pDatabaseTCProcedureThread->GetName(), pDatabaseTCProcedureThreadBreakpoints);
							continue;
						}
					}
					if ((*pRun)(nTCProcedureID, pArguments, m_cDatabaseTCProcedure.GetAttributes() & (TCPROCEDURE_EXECUTIONMODE_AUTOMATIC | TCPROCEDURE_EXECUTIONMODE_SINGLESTEP | TCPROCEDURE_EXECUTIONMODE_EXTERNALACTIONS | TCPROCEDURE_EXECUTIONMODE_COMMANDS)))
					{
						for (m_hTCProcedureExit = pEvents.GetAt(pEvents.GetUpperBound() - 1); pEvents.GetAt(0) != (HANDLE)NULL; )
						{
							SetEvent(pEvents.GetAt(0));
							break;
						}
						SetMode(DISPLAY_MODE_DEBUG);
						UpdateBars();
						return TRUE;
					}
				}
				break;
			}
			for (nParameter = 0, nParameters = (INT)szErrorParameters.GetSize(), m_cTCTestThread.Stop(), m_cTCScheduleThread.Stop(), m_cTCVerificationThread.Stop(), m_nTCProcedureID = nTCProcedureID, m_hTCProcedureCode = hTCProcedureCode, StopTestingProcedure(); nParameter < nParameters; nParameter++)
			{
				szMessage.Format(STRING(IDS_TCPROCEDURE_FAILURE_LINKPARAMETER), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)szErrorParameters.GetAt(nParameter));
				ShowTestMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), szMessage, (nParameter == nParameters - 1) ? TRUE : FALSE);
			}
			return FALSE;
		}
		szMessage.Format(STRING(IDS_TCPROCEDURE_FAILURE_TEST), (LPCTSTR)m_cDatabaseTCProcedure.GetName());
		ShowTestMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), szMessage, TRUE);
	}
	return IsCompilingProcedure();
}

BOOL CTCProcedureWnd::LaunchTestingProcedure()
{
	if (SetTimer(TCPROCEDURETESTTHREAD_LAUNCHDISPLAY_TIMERID, TCPROCEDURETESTTHREAD_LAUNCHDISPLAY_TIMEOUT, NULL))
	{
		m_nTCProcedureCount++;
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureWnd::SuspendTestingProcedure()
{
	CString  szProcedure;
	BOOL(__cdecl *pSuspend)(INT nID);

	if (IsProcedureTestRunning() && !HasTestDialogs())
	{
#ifndef UNICODE
		szProcedure = STRING(IDS_EXPORTINTERFACE_SUSPENDTCPROCEDURE);
#else
		WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_SUSPENDTCPROCEDURE), -1, (LPSTR)szProcedure.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_SUSPENDTCPROCEDURE))), lstrlen(STRING(IDS_EXPORTINTERFACE_SUSPENDTCPROCEDURE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
		szProcedure.ReleaseBuffer();
#endif
		if ((pSuspend = (BOOL(__cdecl *)(INT nID)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure)) && (*pSuspend)(-(INT)m_nTCProcedureID))
		{
			m_cTCScheduleThread.SuspendThread();
			m_cTCVerificationThread.SuspendThread();
			m_bTCProcedureBreak = TRUE;
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCProcedureWnd::ResumeTestingProcedure(BOOL bAuto)
{
	CString  szProcedure;
	BOOL(__cdecl *pResume)(INT nID, BOOL bAuto);

	if (IsProcedureTestSuspended())
	{
#ifndef UNICODE
		szProcedure = STRING(IDS_EXPORTINTERFACE_RESUMETCPROCEDURE);
#else
		WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_RESUMETCPROCEDURE), -1, (LPSTR)szProcedure.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_RESUMETCPROCEDURE))), lstrlen(STRING(IDS_EXPORTINTERFACE_RESUMETCPROCEDURE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
		szProcedure.ReleaseBuffer();
#endif
		if ((pResume = (BOOL(__cdecl *)(INT nID, BOOL bAuto)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure)) && (*pResume)(-(INT)m_nTCProcedureID, bAuto))
		{
			m_cTCScheduleThread.ResumeThread();
			m_cTCVerificationThread.ResumeThread();
			m_bTCProcedureBreak = FALSE;
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCProcedureWnd::IsProcedureTestRunning() CONST
{
	CString  szProcedure;
	BOOL(__cdecl *pIsRunning)(INT nID);

	if (IsTesting())
	{
#ifndef UNICODE
		szProcedure = STRING(IDS_EXPORTINTERFACE_ISRUNNINGTCPROCEDURE);
#else
		WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_ISRUNNINGTCPROCEDURE), -1, (LPSTR)szProcedure.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_ISRUNNINGTCPROCEDURE))), lstrlen(STRING(IDS_EXPORTINTERFACE_ISRUNNINGTCPROCEDURE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
		szProcedure.ReleaseBuffer();
#endif
		if ((pIsRunning = (BOOL(__cdecl *)(INT nID)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure))) return((*pIsRunning)(-(INT)m_nTCProcedureID));
	}
	return FALSE;
}

BOOL CTCProcedureWnd::IsProcedureTestSuspended() CONST
{
	CString  szProcedure;
	BOOL(__cdecl *pIsSuspended)(INT nID);

	if (IsTesting())
	{
#ifndef UNICODE
		szProcedure = STRING(IDS_EXPORTINTERFACE_ISSUSPENDEDTCPROCEDURE);
#else
		WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_ISSUSPENDEDTCPROCEDURE), -1, (LPSTR)szProcedure.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_ISSUSPENDEDTCPROCEDURE))), lstrlen(STRING(IDS_EXPORTINTERFACE_ISSUSPENDEDTCPROCEDURE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
		szProcedure.ReleaseBuffer();
#endif
		if ((pIsSuspended = (BOOL(__cdecl *)(INT nID)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure))) return((*pIsSuspended)(-(INT)m_nTCProcedureID));
	}
	return FALSE;
}

BOOL CTCProcedureWnd::IsProcedureTestStopping() CONST
{
	return m_bTCProcedureExit;
}

BOOL CTCProcedureWnd::PrepareProcedureForTesting(BOOL bFeedback)
{
	INT  nResult;
	INT  nTCProcedureID;
	CString  szMessage;
	CString  szProcedure;
	CString  szSourceCode;
	HINSTANCE  hTCProcedureCode;
	CPtrArray  hTCProcedureEvents;
	CPtrArray  hProcedures;
	CUIntArray  nProcedureIDs;
	CStringArray  szProcedures;
	BOOL(__cdecl *pCheckSourceCodeVersion)(LPCTSTR pszSourceCode);

	if (!IsTesting())
	{
		if (!m_cTCProcessEngine.IsOpen() || !m_cTCEnvironment.EnumTCProcedures(szProcedures, nProcedureIDs, hProcedures))
		{
			for (m_cTMEnvironment.Create(GetDatabase(), FALSE), m_cTCEnvironment.Create(GetDatabase(), TRUE); m_cTCProcessEngine.IsOpen(); )
			{
				m_cTCProcessEngine.Close();
				break;
			}
		}
		if (m_cTMEnvironment.GetType() != DATABASE_TYPE_NONE  &&  m_cTCEnvironment.GetType() != DATABASE_TYPE_NONE)
		{
			if (m_cTCProcessEngine.Open(GetDatabase(), GetAccountSpacecraftName(), &m_cTCEnvironment))
			{
#ifndef UNICODE
				szProcedure = STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDURESOURCECODEVERSION);
#else
				WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDURESOURCECODEVERSION), -1, (LPSTR)szProcedure.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDURESOURCECODEVERSION))), lstrlen(STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDURESOURCECODEVERSION)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
				szProcedure.ReleaseBuffer();
#endif
				if (GetProcedure(&m_cDatabaseTCProcedure))
				{
					if ((nTCProcedureID = m_cTCEnvironment.LoadTCProcedure(GetDatabase(), m_cDatabaseTCProcedure.GetName(), TRUE, hTCProcedureCode, hTCProcedureEvents)) >= 0)
					{
						if (GenerateSourceCode((szSourceCode = (m_cDatabaseTCProcedure.GetAttributes() & (TCPROCEDURE_SOURCECODE_NOGRAPHICALINTERFACE | TCPROCEDURE_SOURCECODE_CUSTOM)) ? m_cDatabaseTCProcedure.GetSourceCode() : EMPTYSTRING), -TRUE))
						{
							for (szMessage.Format(STRING(IDS_TCPROCEDURE_QUESTION_COMPILE), (LPCTSTR)m_cDatabaseTCProcedure.GetName()); (nResult = (!(pCheckSourceCodeVersion = (BOOL(__cdecl *)(LPCTSTR pszSourceCode)) GetProcAddress(hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure)) || !(*pCheckSourceCodeVersion)(szSourceCode)) ? ((bFeedback) ? MessageBox(szMessage, GetAppTitle(), MB_ICONQUESTION | MB_YESNOCANCEL) : IDCANCEL) : IDNO) == IDYES; )
							{
								if (StartCompilingProcedure(GetDatabase()->GetDatabaseEngine(), &m_cDatabaseTCProcedure) && SetTimer(TCPROCEDURETESTTHREAD_TESTDISPLAY_TIMERID, TCPROCEDURETESTTHREAD_TESTDISPLAY_TIMEOUT, NULL))
								{
									m_cTCEnvironment.FreeTCProcedure(nTCProcedureID);
									return FALSE;
								}
								break;
							}
							if (nResult == IDNO)
							{
								m_cTCEnvironment.FreeTCProcedure(nTCProcedureID);
								return TRUE;
							}
						}
						m_cTCEnvironment.FreeTCProcedure(nTCProcedureID);
					}
				}
			}
		}
	}
	return FALSE;
}

BOOL CTCProcedureWnd::CheckProcedureTestState(LPCTSTR pszThread, UINT &nState, CStringArray &szStepNames, CUIntArray &nStepStates, UINT &nLine) CONST
{
	CString  szProcedure;
	INT(__cdecl *pCheckThreadExecutionState)(INT nID, LPCTSTR pszThread, UINT &nState, CStringArray &szStepNames, CUIntArray &nStepStates, UINT &nLine);

	if (IsTesting())
	{
#ifndef UNICODE
		szProcedure = STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDURETHREADEXECUTIONSTATE);
#else
		WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDURETHREADEXECUTIONSTATE), -1, (LPSTR)szProcedure.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDURETHREADEXECUTIONSTATE))), lstrlen(STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDURETHREADEXECUTIONSTATE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
		szProcedure.ReleaseBuffer();
#endif
		return(((pCheckThreadExecutionState = (INT(__cdecl *)(INT nID, LPCTSTR pszThread, UINT &nState, CStringArray &szStepNames, CUIntArray &nStepStates, UINT &nLine)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure)) && (*pCheckThreadExecutionState)(m_nTCProcedureID, pszThread, nState, szStepNames, nStepStates, nLine)) ? TRUE : FALSE);
	}
	return FALSE;
}

BOOL CTCProcedureWnd::UpdateProcedureTestState()
{
	INT  nStep;
	INT  nSteps;
	INT  nThread;
	INT  nThreads;
	INT  nProfile;
	INT  nProfiles;
	INT  nTrigger;
	INT  nTriggers;
	INT  nBreakpoint;
	INT  nBreakpoints;
	BOOL  bSuspend[3];
	BOOL  bTestProfile;
	UINT  nThreadState;
	UINT  nThreadLine;
	UINT  nSubThreadID[2];
	CString  szMessage[1];
	CString  szProcedure[3];
	CTimeSpan  tTestProfile;
	CPtrArray  pIdentifiers;
	CPtrArray  pThreadSteps;
	CUIntArray  nThreadTriggers;
	CUIntArray  nThreadStepStates;
	CUIntArray  nIdentifierTypes;
	CStringArray  szIdentifiers;
	CStringArray  szThreadTriggers;
	CStringArray  szThreadStepNames;
	CLongUIntArray  nIdentifierAttributes;
	CTCProcedureDocument  *pDocument;
	CTCProcedureDocumentItem  *pStep;
	CTCProcedureFlowchartThreadView  *pView;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureThreadBreakpoint;
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureThreadBreakpoints;
	CDatabaseTCProcedureThreadTestProfile  *pTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pTestProfiles;
	INT(__cdecl *pEnumIdentifiers)(INT nID, CStringArray &szIdentifiers, CUIntArray &nIdentifierTypes, CLongUIntArray &nIdentifierAttributes, CPtrArray &pIdentifiers);
	INT(__cdecl *pCheckThreadExecutionState)(INT nID, LPCTSTR pszThread, UINT &nState, CStringArray &szStepNames, CUIntArray &nStepStates, UINT &nLine);
	BOOL(__cdecl *pAcknowledgeThreadExecutionState)(INT nID, LPCTSTR pszThread);

	if (IsTesting())
	{
		if (!IsProcedureTestStopping())
		{
#ifndef UNICODE
			szProcedure[0] = STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDURETHREADEXECUTIONSTATE);
			szProcedure[1] = STRING(IDS_EXPORTINTERFACE_ACKNOWLEDGETCPROCEDURETHREADEXECUTIONSTATE);
			szProcedure[2] = STRING(IDS_EXPORTINTERFACE_ENUMTCPROCEDUREIDENTIFIERS);
#else
			WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDURETHREADEXECUTIONSTATE), -1, (LPSTR)szProcedure[0].GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDURETHREADEXECUTIONSTATE))), lstrlen(STRING(IDS_EXPORTINTERFACE_CHECKTCPROCEDURETHREADEXECUTIONSTATE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
			WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_ACKNOWLEDGETCPROCEDURETHREADEXECUTIONSTATE), -1, (LPSTR)szProcedure[1].GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_ACKNOWLEDGETCPROCEDURETHREADEXECUTIONSTATE))), lstrlen(STRING(IDS_EXPORTINTERFACE_ACKNOWLEDGETCPROCEDURETHREADEXECUTIONSTATE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
			WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_ENUMTCPROCEDUREIDENTIFIERS), -1, (LPSTR)szProcedure[2].GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_ENUMTCPROCEDUREIDENTIFIERS))), lstrlen(STRING(IDS_EXPORTINTERFACE_ENUMTCPROCEDUREIDENTIFIERS)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
			szProcedure[0].ReleaseBuffer();
			szProcedure[1].ReleaseBuffer();
			szProcedure[2].ReleaseBuffer();
#endif
			if ((pCheckThreadExecutionState = (INT(__cdecl *)(INT nID, LPCTSTR pszThread, UINT &nState, CStringArray &szStepNames, CUIntArray &nStepStates, UINT &nLine)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure[0])))
			{
				if ((pAcknowledgeThreadExecutionState = (BOOL(__cdecl *)(INT nID, LPCTSTR pszThread)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure[1])))
				{
					for (nThread = 0, nThreads = (INT)m_szTCProcedureViews.GetSize(), nThreadTriggers.RemoveAll(), szThreadTriggers.RemoveAll(), bSuspend[0] = FALSE, bSuspend[1] = TRUE, bSuspend[2] = FALSE; nThread < nThreads; nThread++)
					{
						if ((pView = (CTCProcedureFlowchartThreadView *)m_pTCProcedureViews.GetAt(nThread)) != (CTCProcedureFlowchartThreadView *)NULL)
						{
							if ((*pCheckThreadExecutionState)(m_nTCProcedureID, m_szTCProcedureViews.GetAt(nThread), nThreadState, szThreadStepNames, nThreadStepStates, nThreadLine) >= 0)
							{
								for (pView->UpdateAllSteps(nThreadState, szThreadStepNames, nThreadStepStates), GetPropertiesView()->UpdateExecutionpoint(m_szTCProcedureViews.GetAt(nThread), nThreadState, nThreadLine); ((m_nTCProcedureStepID == nThread && szThreadStepNames.GetSize() > 0 && szThreadStepNames.GetAt(szThreadStepNames.GetUpperBound()) != m_szTCProcedureStep && m_bTCProcedureStepBreak) || (m_nTCProcedureLines.GetAt(nThread) != nThreadLine && m_bTCProcedureLineBreak)) && (nThreadState & TCPROCEDURETHREAD_RUNNINGSTATE_RUNNING); )
								{
									if ((pDocument = ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(m_cDatabaseTCProcedure.Find(m_szTCProcedureViews.GetAt(nThread))))) ? new CTCProcedureDocument : (CTCProcedureDocument *)NULL) != (CTCProcedureDocument *)NULL)
									{
										for (nStep = 0, nSteps = (!m_szTCProcedureStep.IsEmpty() && szThreadStepNames.GetSize() > 0 && pDocument->Unmap(pDatabaseTCProcedureThread)) ? pDocument->EnumSteps(pThreadSteps, FALSE, TRUE) : 0, nSubThreadID[0] = nSubThreadID[1] = (UINT)-1; nStep < nSteps; nStep++)
										{
											if ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)))
											{
												if (pStep->GetName() == m_szTCProcedureStep)
												{
													nSubThreadID[0] = pStep->GetSubThreadID();
													if (nSubThreadID[1] != (UINT)-1) break;
													continue;
												}
												if (pStep->GetName() == szThreadStepNames.GetAt(szThreadStepNames.GetUpperBound()))
												{
													nSubThreadID[1] = pStep->GetSubThreadID();
													if (nSubThreadID[0] != (UINT)-1) break;
													continue;
												}
											}
										}
										if ((m_bTCProcedureStepInto  &&  nSubThreadID[0] < nSubThreadID[1]) || (m_bTCProcedureStepOver  &&  nSubThreadID[0] == nSubThreadID[1]) || (m_bTCProcedureStepOut  &&  nSubThreadID[0] > nSubThreadID[1]))
										{
											if ((m_bTCProcedureLineBreak  &&  m_nTCProcedureLines.GetAt(nThread) != nThreadLine) || (m_bTCProcedureStepBreak  &&  nSubThreadID[0] != (UINT)-1 && nSubThreadID[1] != (UINT)-1))
											{
												m_nTCProcedureStepID = (UINT)-1;
												m_bTCProcedureStepInto = FALSE;
												m_bTCProcedureStepOver = FALSE;
												m_bTCProcedureStepOut = FALSE;
												m_szTCProcedureStep.Empty();
												bSuspend[0] = TRUE;
											}
										}
										delete pDocument;
									}
									break;
								}
								for (bSuspend[1] = (nThreadState & TCPROCEDURETHREAD_RUNNINGSTATE_RUNNING) ? FALSE : bSuspend[1], bSuspend[2] = (nThreadState & TCPROCEDURETHREAD_RUNNINGSTATE_STOPPED) ? TRUE : bSuspend[2]; szThreadStepNames.GetSize() > 0 && (nThreadStepStates.GetAt(nThreadStepStates.GetUpperBound()) & TCPROCEDURETHREADSTEP_STATE_TRIGGER_RUNNING); )
								{
									szThreadTriggers.Add(szThreadStepNames.GetAt(szThreadStepNames.GetUpperBound()));
									nThreadTriggers.Add(nThread);
									break;
								}
								for (m_nTCProcedureLines.SetAt(nThread, nThreadLine), m_bTCProcedureDirty = TRUE; !bSuspend[0]; )
								{
									(*pAcknowledgeThreadExecutionState)(m_nTCProcedureID, m_szTCProcedureViews.GetAt(nThread));
									break;
								}
							}
						}
					}
					for (nThread = 0, nThreads = (INT)nThreadTriggers.GetSize(); nThread < nThreads; nThread++)
					{
						if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(m_cDatabaseTCProcedure.Find(m_szTCProcedureViews.GetAt(nThreadTriggers.GetAt(nThread))))))
						{
							for (nProfile = 0, nProfiles = pDatabaseTCProcedureThread->GetProfiles(pTestProfiles); nProfile < nProfiles; nProfile++)
							{
								if ((pTestProfile = pTestProfiles.GetAt(nProfile)) && !pTestProfile->GetRunningTime().GetTime())
								{
									if (pTestProfile->GetLocation() == szThreadTriggers.GetAt(nThread))
									{
										if ((pTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_DISABLED) == 0)
										{
											if (pTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEIMMEDIATELY)
											{
												InjectProcedureThreadTestProfile(pDatabaseTCProcedureThread->GetName(), pTestProfile);
												pTestProfile->SetRunningTime(CTime::GetCurrentTime().GetTime());
												continue;
											}
											if (pTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTEP)
											{
												pTestProfile->SetRunningTime(CTime::GetCurrentTime().GetTime());
												pTestProfile->SetRunningTimeInterval(0);
											}
										}
									}
								}
							}
							pDatabaseTCProcedureThread->SetProfiles(pTestProfiles);
						}
					}
					for (; bSuspend[0]; )
					{
						SuspendTestingProcedure();
						break;
					}
					if (bSuspend[0] || (bSuspend[1] && bSuspend[2]))
					{
						for (nThread = 0, nThreads = (INT)m_cDatabaseTCProcedure.GetSize(); nThread < nThreads; nThread++)
						{
							if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(nThread)) && pDatabaseTCProcedureThread->GetProfiles(pTestProfiles) > 0)
							{
								for (nProfile = 0, nProfiles = (INT)pTestProfiles.GetSize(); nProfile < nProfiles; nProfile++)
								{
									if ((pTestProfile = pTestProfiles.GetAt(nProfile)) && (pTestProfile->GetOptions() & (TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART | TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTEP)) && pTestProfile->GetRunningTime() > 0)
									{
										pTestProfile->SetRunningTimeInterval(pTestProfile->GetRunningTimeInterval().GetTotalSeconds() + max(CTime::GetCurrentTime().GetTime() - pTestProfile->GetRunningTime().GetTime(), 0));
										pTestProfile->SetRunningTime(-pTestProfile->GetRunningTime().GetTime());
									}
								}
								pDatabaseTCProcedureThread->SetProfiles(pTestProfiles);
							}
						}
						for (KillTimer(TCPROCEDURETESTTHREAD_TESTPROFILE_TIMERID); (pEnumIdentifiers = (INT(__cdecl *)(INT nID, CStringArray &szIdentifiers, CUIntArray &nIdentifierTypes, CLongUIntArray &nIdentifierAttributes, CPtrArray &pIdentifiers)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure[2])) && (*pEnumIdentifiers)(m_nTCProcedureID, szIdentifiers, nIdentifierTypes, nIdentifierAttributes, pIdentifiers); )
						{
							GetPropertiesView()->UpdateIdentifiers(&m_cTMEnvironment, &m_cTCEnvironment, szIdentifiers, nIdentifierTypes, nIdentifierAttributes, pIdentifiers);
							break;
						}
						for (nThread = 0; nThread < nThreads; nThread++)
						{
							if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(nThread)) && pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureThreadBreakpoints) > 0)
							{
								for (nBreakpoint = 0, nBreakpoints = (INT)pDatabaseTCProcedureThreadBreakpoints.GetSize(); nBreakpoint < nBreakpoints; nBreakpoint++)
								{
									if ((pDatabaseTCProcedureThreadBreakpoint = pDatabaseTCProcedureThreadBreakpoints.GetAt(nBreakpoint)) && !pDatabaseTCProcedureThreadBreakpoint->GetLocation().IsEmpty())
									{
										for (nTrigger = 0, nTriggers = (INT)nThreadTriggers.GetSize(); nTrigger < nTriggers; nTrigger++)
										{
											if (nThreadTriggers.GetAt(nTrigger) == nThread) break;
											continue;
										}
										if (nTrigger < nTriggers  &&  pDatabaseTCProcedureThreadBreakpoint->GetLocation() == szThreadTriggers.GetAt(nTrigger)) break;
									}
								}
								if (nBreakpoint < nBreakpoints) break;
							}
						}
						if ((!m_bTCProcedureStepBreak  &&  !m_bTCProcedureLineBreak) || nThread < nThreads)
						{
							m_bTCProcedureStepBreak = (nThread < nThreads) ? TRUE : FALSE;
							m_bTCProcedureLineBreak = !m_bTCProcedureStepBreak;
						}
						m_bTCProcedureBreak = TRUE;
					}
					else
					{
						for (nThread = 0, nThreads = (INT)m_cDatabaseTCProcedure.GetSize(), tTestProfile = 0, bTestProfile = FALSE; nThread < nThreads; nThread++)
						{
							if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(nThread)) && pDatabaseTCProcedureThread->GetProfiles(pTestProfiles) > 0)
							{
								for (nProfile = 0, nProfiles = (INT)pTestProfiles.GetSize(); nProfile < nProfiles; nProfile++)
								{
									if ((pTestProfile = pTestProfiles.GetAt(nProfile)) && (pTestProfile->GetOptions() & (TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART | TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTEP)) && pTestProfile->GetRunningTime() != 0 && pTestProfile->GetRunningTimeInterval() < pTestProfile->GetDelay())
									{
										pTestProfile->SetRunningTime((pTestProfile->GetRunningTime().GetTime() < 0) ? CTime::GetCurrentTime().GetTime() : pTestProfile->GetRunningTime());
										tTestProfile = (tTestProfile > 0) ? min(max(pTestProfile->GetDelay().GetTotalSeconds() - max(CTime::GetCurrentTime().GetTime() - pTestProfile->GetRunningTime().GetTime(), 0) - pTestProfile->GetRunningTimeInterval().GetTotalSeconds(), 0), tTestProfile.GetTotalSeconds()) : max(pTestProfile->GetDelay().GetTotalSeconds() - max(CTime::GetCurrentTime().GetTime() - pTestProfile->GetRunningTime().GetTime(), 0) - pTestProfile->GetRunningTimeInterval().GetTotalSeconds(), 0);
										bTestProfile = TRUE;
									}
								}
								pDatabaseTCProcedureThread->SetProfiles(pTestProfiles);
							}
						}
						if (bTestProfile  &&  !SetTimer(TCPROCEDURETESTTHREAD_TESTPROFILE_TIMERID, (UINT)(1000 * tTestProfile.GetTotalSeconds()), NULL))
						{
							szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_SCHEDULETESTPROFILE_FAILURE), (LPCTSTR)m_cDatabaseTCProcedure.GetName());
							ShowTestMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), szMessage[0]);
						}
						m_bTCProcedureBreak = FALSE;
					}
					UpdateBars();
					return TRUE;
				}
			}
		}
	}
	return FALSE;
}

BOOL CTCProcedureWnd::TerminateTestingProcedure(BOOL bAuto)
{
	INT  nThread;
	INT  nThreads;
	CString  szProcedure;
	CUIntArray  nThreadStepStates;
	CStringArray  szThreadStepNames;
	CTCProcedureFlowchartThreadView  *pView;
	BOOL(__cdecl *pTerminate)(INT nID, BOOL bAuto);

	if (IsTesting())
	{
		if (!IsProcedureTestStopping())
		{
#ifndef UNICODE
			szProcedure = STRING(IDS_EXPORTINTERFACE_TERMINATETCPROCEDURE);
			m_bTCProcedureExit = TRUE;
#else
			WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_TERMINATETCPROCEDURE), -1, (LPSTR)szProcedure.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_TERMINATETCPROCEDURE))), lstrlen(STRING(IDS_EXPORTINTERFACE_TERMINATETCPROCEDURE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
			szProcedure.ReleaseBuffer();
			m_bTCProcedureExit = TRUE;
#endif
			if ((!bAuto  &&  m_cTCScheduleThread.IsIdle() && m_cTCVerificationThread.IsIdle()) || bAuto)
			{
				if ((pTerminate = (BOOL(__cdecl *)(INT nID, BOOL bAuto)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure)) && (*pTerminate)(-(INT)m_nTCProcedureID, (bAuto && (!m_cTCScheduleThread.IsIdle() || !m_cTCVerificationThread.IsIdle())) ? TRUE : FALSE))
				{
					for (nThread = 0, nThreads = (INT)m_szTCProcedureViews.GetSize(); nThread < nThreads; nThread++)
					{
						if ((pView = (CTCProcedureFlowchartThreadView *)m_pTCProcedureViews.GetAt(nThread)))
						{
							pView->UpdateAllSteps(TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING, szThreadStepNames, nThreadStepStates);
							GetPropertiesView()->UpdateExecutionpoint(m_szTCProcedureViews.GetAt(nThread), TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING, -1);
						}
					}
					for (GetPropertiesView()->UpdateTCStack(FALSE, FALSE), KillTimer(TCPROCEDURETESTTHREAD_TESTPROFILE_TIMERID), m_cTCTestThread.Stop(), m_cTCScheduleThread.Stop(), m_cTCVerificationThread.Stop(); m_cTCEnvironment.FreeTCProcedure(m_nTCProcedureID); )
					{
						for (ShowTestMessages(); m_hTCProcedureExit != (HANDLE)NULL; )
						{
							SetEvent(m_hTCProcedureExit);
							break;
						}
						m_nTCProcedureID = (UINT)-1;
						m_hTCProcedureCode = (HINSTANCE)NULL;
						m_hTCProcedureExit = (HANDLE)NULL;
						m_bTCProcedureExit = FALSE;
						m_szTCProcedureViews.RemoveAll();
						m_pTCProcedureViews.RemoveAll();
						m_nTCProcedureLines.RemoveAll();
						SetMode(DISPLAY_MODE_EDIT);
						UpdateBars();
						return TRUE;
					}
				}
			}
			m_bTCProcedureExit = FALSE;
		}
	}
	return FALSE;
}

BOOL CTCProcedureWnd::StopTestingProcedure()
{
	INT  nThread;
	INT  nThreads;
	CString  szProcedure;
	CUIntArray  nThreadStepStates;
	CStringArray  szThreadStepNames;
	CTCProcedureFlowchartThreadView  *pView;
	BOOL(__cdecl *pAbort)(INT nID);

	if (IsTesting())
	{
		if (!IsProcedureTestStopping())
		{
#ifndef UNICODE
			szProcedure = STRING(IDS_EXPORTINTERFACE_ABORTTCPROCEDURE);
			m_bTCProcedureExit = TRUE;
#else
			WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_ABORTTCPROCEDURE), -1, (LPSTR)szProcedure.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_ABORTTCPROCEDURE))), lstrlen(STRING(IDS_EXPORTINTERFACE_ABORTTCPROCEDURE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
			szProcedure.ReleaseBuffer();
			m_bTCProcedureExit = TRUE;
#endif
			if ((pAbort = (BOOL(__cdecl *)(INT nID)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure)) && (*pAbort)(-(INT)m_nTCProcedureID))
			{
				for (nThread = 0, nThreads = (INT)m_szTCProcedureViews.GetSize(); nThread < nThreads; nThread++)
				{
					if ((pView = (CTCProcedureFlowchartThreadView *)m_pTCProcedureViews.GetAt(nThread)))
					{
						pView->UpdateAllSteps(TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING | TCPROCEDURETHREAD_ACTIONSTATE_ABORT, szThreadStepNames, nThreadStepStates);
						GetPropertiesView()->UpdateExecutionpoint(m_szTCProcedureViews.GetAt(nThread), TCPROCEDURETHREAD_RUNNINGSTATE_NOTRUNNING | TCPROCEDURETHREAD_ACTIONSTATE_ABORT, -1);
					}
				}
				for (GetPropertiesView()->UpdateTCStack(FALSE, FALSE), KillTimer(TCPROCEDURETESTTHREAD_TESTPROFILE_TIMERID), m_cTCTestThread.Stop(), m_cTCScheduleThread.Stop(), m_cTCVerificationThread.Stop(); m_cTCEnvironment.FreeTCProcedure(m_nTCProcedureID); )
				{
					for (ShowTestMessages(); m_hTCProcedureExit != (HANDLE)NULL; )
					{
						SetEvent(m_hTCProcedureExit);
						break;
					}
					m_nTCProcedureID = (UINT)-1;
					m_hTCProcedureCode = (HINSTANCE)NULL;
					m_hTCProcedureExit = (HANDLE)NULL;
					m_bTCProcedureExit = FALSE;
					m_szTCProcedureViews.RemoveAll();
					m_pTCProcedureViews.RemoveAll();
					m_nTCProcedureLines.RemoveAll();
					SetMode(DISPLAY_MODE_EDIT);
					UpdateBars();
					return TRUE;
				}
			}
			m_bTCProcedureExit = FALSE;
		}
	}
	return FALSE;
}

BOOL CTCProcedureWnd::UpdateProcedureThreadBreakpoints(LPCTSTR pszThread, CONST CDatabaseTCProcedureThreadBreakpoints &pBreakpoints)
{
	INT  nThread;
	INT  nThreads;
	INT  nBreakpoint;
	INT  nBreakpoints;
	BOOL  bBreakpoints[2];
	CString  szProcedure;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadBreakpoint  *pDatabaseTCProcedureBreakpoint[2];
	CDatabaseTCProcedureThreadBreakpoints  pDatabaseTCProcedureBreakpoints;
	BOOL(__cdecl *pUpdateBreakpoints)(INT nID, LPCTSTR pszThread, CONST CDatabaseTCProcedureThreadBreakpoints &pBreakpoints);

	for (nThread = 0, nThreads = (!lstrlen(pszThread)) ? (INT)m_cDatabaseTCProcedure.GetSize() : 0; nThread < nThreads; nThread++)
	{
		if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(nThread)))
		{
			pDatabaseTCProcedureThread->SetBreakpoints(pBreakpoints);
			continue;
		}
	}
	if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(m_cDatabaseTCProcedure.Find(pszThread))))
	{
		for (nBreakpoint = 0, nBreakpoints = (INT)pBreakpoints.GetSize(), bBreakpoints[0] = bBreakpoints[1] = FALSE; nBreakpoint < nBreakpoints; nBreakpoint++)
		{
			if ((pDatabaseTCProcedureBreakpoint[0] = pBreakpoints.GetAt(nBreakpoint)) != (CDatabaseTCProcedureThreadBreakpoint *)NULL)
			{
				bBreakpoints[0] = (!pDatabaseTCProcedureBreakpoint[0]->GetLocation().IsEmpty()) ? TRUE : bBreakpoints[0];
				bBreakpoints[1] = (pDatabaseTCProcedureBreakpoint[0]->GetLine() > 0) ? TRUE : bBreakpoints[1];
			}
		}
		for (nBreakpoint = 0, nBreakpoints = pDatabaseTCProcedureThread->GetBreakpoints(pDatabaseTCProcedureBreakpoints); nBreakpoint < nBreakpoints; nBreakpoint++)
		{
			if ((pDatabaseTCProcedureBreakpoint[0] = pDatabaseTCProcedureBreakpoints.GetAt(nBreakpoint)) && ((bBreakpoints[0] && !pDatabaseTCProcedureBreakpoint[0]->GetLocation().IsEmpty()) || (bBreakpoints[1] && pDatabaseTCProcedureBreakpoint[0]->GetLine() > 0) || !pBreakpoints.GetSize()))
			{
				pDatabaseTCProcedureBreakpoints.RemoveAt(nBreakpoint);
				delete pDatabaseTCProcedureBreakpoint[0];
				nBreakpoints--;
				nBreakpoint--;
			}
		}
		for (nBreakpoint = 0, nBreakpoints = (INT)pBreakpoints.GetSize(); nBreakpoint < nBreakpoints; nBreakpoint++)
		{
			if ((pDatabaseTCProcedureBreakpoint[0] = pBreakpoints.GetAt(nBreakpoint)) != (CDatabaseTCProcedureThreadBreakpoint *)NULL)
			{
				if ((pDatabaseTCProcedureBreakpoint[1] = new CDatabaseTCProcedureThreadBreakpoint))
				{
					pDatabaseTCProcedureBreakpoint[1]->Copy(pDatabaseTCProcedureBreakpoint[0]);
					if (pDatabaseTCProcedureBreakpoints.Add(pDatabaseTCProcedureBreakpoint[1]) >= 0) continue;
					delete pDatabaseTCProcedureBreakpoint[1];
				}
			}
		}
		pDatabaseTCProcedureThread->SetBreakpoints(pDatabaseTCProcedureBreakpoints);
	}
	if (IsTesting())
	{
#ifndef UNICODE
		szProcedure = STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURETHREADBREAKPOINTS);
#else
		WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURETHREADBREAKPOINTS), -1, (LPSTR)szProcedure.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURETHREADBREAKPOINTS))), lstrlen(STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURETHREADBREAKPOINTS)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
		szProcedure.ReleaseBuffer();
#endif
		if ((pUpdateBreakpoints = (BOOL(__cdecl *)(INT nID, LPCTSTR pszThread, CONST CDatabaseTCProcedureThreadBreakpoints &pBreakpoints)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure)) && (*pUpdateBreakpoints)(m_nTCProcedureID, pszThread, pDatabaseTCProcedureBreakpoints)) return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureWnd::InjectProcedureThreadTestProfile(LPCTSTR pszThread, CONST CDatabaseTCProcedureThreadTestProfile *pTestProfile)
{
	INT  nParameter;
	INT  nParameters;
	CString  szMessage;
	CString  szProcedure;
	CDatabaseTMParameter  *pDatabaseTMParameter;
	BOOL(__cdecl *pUpdate)(INT nID, CONST CTMEnvironment *pTMEnvironment);

	if (IsTesting())
	{
		for (nParameter = 0, nParameters = (INT)pTestProfile->GetSize(); nParameter < nParameters; nParameter++)
		{
			if ((pDatabaseTMParameter = pTestProfile->GetAt(nParameter)))
			{
				UpdateParameterValue(pDatabaseTMParameter);
				continue;
			}
		}
#ifndef UNICODE
		szProcedure = STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURE);
#else
		WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURE), -1, (LPSTR)szProcedure.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURE))), lstrlen(STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
		szProcedure.ReleaseBuffer();
#endif
		if ((pUpdate = (BOOL(__cdecl *)(INT nID, CONST CTMEnvironment *pTMEnvironment)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure)) && (*pUpdate)(m_nTCProcedureID, &m_cTMEnvironment))
		{
			szMessage.Format(STRING(IDS_TCPROCEDURE_MESSAGE_INJECTTESTPROFILE_SUCCESS), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), pszThread, (LPCTSTR)pTestProfile->GetName());
			ShowTestMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_SUCCESS), szMessage);
			m_cTCScheduleThread.Update();
			m_cTCVerificationThread.Update();
			return TRUE;
		}
		szMessage.Format(STRING(IDS_TCPROCEDURE_MESSAGE_INJECTTESTPROFILE_FAILURE), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), pszThread, (LPCTSTR)pTestProfile->GetName());
		ShowTestMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), szMessage);
	}
	return FALSE;
}

BOOL CTCProcedureWnd::SetProcedureTestParameterValues(CONST CTMParameters &pTMParameters)
{
	CString  szProcedure;
	BOOL(__cdecl *pUpdate)(INT nID, CONST CTMEnvironment *pTMEnvironment);

	if (IsProcedureTestSuspended())
	{
		if (m_cTMEnvironment.Lock())
		{
			for (; !m_cTMEnvironment.GetTMParameters()->GetSize(); )
			{
				m_cTMEnvironment.GetTMParameters()->Copy(&pTMParameters);
				break;
			}
			m_cTMEnvironment.Unlock();
		}
		if (m_cTMEnvironment.Update(pTMParameters))
		{
#ifndef UNICODE
			szProcedure = STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURE);
#else
			WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURE), -1, (LPSTR)szProcedure.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURE))), lstrlen(STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
			szProcedure.ReleaseBuffer();
#endif
			if ((pUpdate = (BOOL(__cdecl *)(INT nID, CONST CTMEnvironment *pTMEnvironment)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure)) && (*pUpdate)(m_nTCProcedureID, &m_cTMEnvironment))
			{
				m_cTCVerificationThread.Update();
				return TRUE;
			}
		}
	}
	return FALSE;
}
BOOL CTCProcedureWnd::SetProcedureTestParameterValues(CONST CTCParameters &pTCParameters)
{
	CString  szProcedure;
	BOOL(__cdecl *pUpdate)(INT nID, CONST CTMEnvironment *pTMEnvironment);

	if (IsProcedureTestSuspended())
	{
		if (m_cTCEnvironment.Update(pTCParameters))
		{
#ifndef UNICODE
			szProcedure = STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURE);
#else
			WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURE), -1, (LPSTR)szProcedure.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURE))), lstrlen(STRING(IDS_EXPORTINTERFACE_UPDATETCPROCEDURE)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
			szProcedure.ReleaseBuffer();
#endif
			if ((pUpdate = (BOOL(__cdecl *)(INT nID, CONST CTMEnvironment *pTMEnvironment)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure)) && (*pUpdate)(m_nTCProcedureID, &m_cTMEnvironment))
			{
				m_cTCVerificationThread.Update();
				return TRUE;
			}
		}
	}
	return FALSE;
}

BOOL CTCProcedureWnd::GetProcedureTestParameterValues(CTMParameters &pTMParameters)
{
	return m_cTMEnvironment.Initialize(pTMParameters);
}
BOOL CTCProcedureWnd::GetProcedureTestParameterValues(CTCParameters &pTCParameters)
{
	return m_cTCEnvironment.Initialize(pTCParameters);
}

BOOL CTCProcedureWnd::ScheduleProcedureCommand()
{
	INT  nStep;
	INT  nSteps;
	INT  nID[2];
	INT  nEntry;
	INT  nEntries;
	INT  nBlockID;
	BOOL  bGrouped;
	BOOL  bCritical;
	BOOL  bProcedure;
	BOOL  bEarlierExecution;
	UINT  nExecutionMode;
	ULONGLONG  nAckFlags;
	DWORD  dwOffset[2];
	HANDLE  hSuccess;
	HANDLE  hFailure;
	CString  szStep;
	CString  szThread;
	CString  szSequence;
	CString  szFunction;
	CString  szMessage[2];
	CTimeTag  tScheduleTime;
	CTimeTag  tReleaseTime;
	CTimeTag  tExecutionTime;
	CPtrArray  pThreadSteps;
	CDatabaseTCPacket  *pDatabaseTCPacket;
	CDatabaseTCFunction  *pDatabaseTCFunction;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CTCProcedureDocumentSendTCFunctionItem  *pSendTCFunctionItem;
	CTCProcedureDocumentSendTCSequenceItem  *pSendTCSequenceItem;
	CTCProcedureDocumentItem  *pStep;
	CTCProcedureDocument  *pDocument;
	CTCProcedureItem  *pItem;

	if (IsTesting())
	{
		while (m_cTCEnvironment.RemoveTCFunction(nID[0], nID[1], szThread, szStep, szSequence, szFunction, bProcedure, nEntry, nEntries, tScheduleTime, tReleaseTime, dwOffset[0], tExecutionTime, dwOffset[1], bEarlierExecution, nBlockID, bGrouped, bCritical, nExecutionMode, nAckFlags, hSuccess, hFailure))
		{
			if ((pDocument = new CTCProcedureDocument))
			{
				if ((pDatabaseTCFunction = new CDatabaseTCFunction))
				{
					if ((pDatabaseTCPacket = new CDatabaseTCPacket))
					{
						for (nStep = 0, nSteps = (!bProcedure) ? (((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(m_cDatabaseTCProcedure.Find(szThread))) && pDocument->Unmap(pDatabaseTCProcedureThread) && pDocument->EnumSteps(pThreadSteps, FALSE, TRUE) > 0) ? (INT)pThreadSteps.GetSize() : -1) : 0, pDatabaseTCFunction->SetName(szFunction); nStep < nSteps; nStep++)
						{
							if ((pStep = (CTCProcedureDocumentItem *)pThreadSteps.GetAt(nStep)) && (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION || pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE) && pStep->GetName() == szStep)
							{
								if ((pSendTCFunctionItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCFUNCTION) ? (CTCProcedureDocumentSendTCFunctionItem *)pStep : (CTCProcedureDocumentSendTCFunctionItem *)NULL) && pSendTCFunctionItem->GetFunction(pDatabaseTCFunction, pDatabaseTCPacket))
								{
									nStep = nSteps;
									break;
								}
								if ((pSendTCSequenceItem = (pStep->GetType() == TCPROCEDURETHREADSTEP_ACTIONOBJECT_SENDTCSEQUENCE) ? (CTCProcedureDocumentSendTCSequenceItem *)pStep : (CTCProcedureDocumentSendTCSequenceItem *)NULL))
								{
									if ((pSendTCFunctionItem = pSendTCSequenceItem->GetAt(nEntry - 1)) && pSendTCFunctionItem->GetFunction(pDatabaseTCFunction, pDatabaseTCPacket))
									{
										nStep = nSteps;
										break;
									}
								}
								if (pStep->GetName() == szStep)
								{
									nSteps = -1;
									break;
								}
							}
						}
						if ((pItem = (nStep == nSteps) ? new CTCProcedureItem(szThread, szStep, szSequence, pDatabaseTCFunction, pDatabaseTCPacket, bProcedure, nEntry, nEntries, tScheduleTime, tReleaseTime, dwOffset[0], tExecutionTime, dwOffset[1], bEarlierExecution, nBlockID, bGrouped, bCritical, nAckFlags, hSuccess, hFailure) : (CTCProcedureItem *)NULL))
						{
							if (m_cTCScheduleThread.Schedule(pItem))
							{
								delete pDatabaseTCFunction;
								delete pDatabaseTCPacket;
								delete pDocument;
								delete pItem;
								continue;
							}
							delete pItem;
						}
						delete pDatabaseTCPacket;
					}
					delete pDatabaseTCFunction;
				}
				delete pDocument;
			}
			szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_SCHEDULETCFUNCTION_FAILURE), (LPCTSTR)GetName(), (LPCTSTR)szFunction);
			szMessage[1].Format(STRING(IDS_TCPROCEDURE_MESSAGE_SCHEDULETCSEQUENCE_FAILURE), (LPCTSTR)GetName(), (LPCTSTR)szFunction, (LPCTSTR)szSequence, nEntry);
			m_cTCEnvironment.AddMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (szSequence.IsEmpty()) ? szMessage[0] : szMessage[1]);
		}
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureWnd::UnscheduleProcedureCommand(CONST CTCProcedureItem *pItem)
{
	if (m_cTCScheduleThread.Unschedule(pItem))
	{
		TerminateTestingProcedure(FALSE);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureWnd::SendProcedureCommand(CONST CTCProcedureItem *pItem, CONST CTCPacket *pTCPacket, INT nSubEntryID)
{
	INT  nLine;
	BOOL  bKey[2];
	BOOL  bTCStack;
	BOOL  bLogging;
	CString  szMessage[3];

	if (pItem->GetCriticalFlag())
	{
		for (ShowTestMessages(), szMessage[0].Format(((pItem->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTION_REQUEST) : ((pItem->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTION1STEP_REQUEST) : STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTION2STEP_REQUEST)), (LPCTSTR)GetName(), pItem->GetFunction()), szMessage[1].Format(((pItem->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCE_REQUEST) : ((pItem->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCE1STEP_REQUEST) : STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCE2STEP_REQUEST)), (LPCTSTR)GetName(), pItem->GetFunction(), pItem->GetSequence(), pItem->GetEntryID()), szMessage[2].Format(((pItem->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEGSEQUENCE_REQUEST) : ((pItem->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEGSEQUENCE1STEP_REQUEST) : STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEGSEQUENCE2STEP_REQUEST)), (LPCTSTR)GetName(), pItem->GetFunction(), pItem->GetSequence(), pItem->GetEntryID(), nSubEntryID); (nLine = AlertConsoleText(STRING(IDS_OUTPUTWINDOW_DEBUGTAB), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : ((!nSubEntryID) ? szMessage[1] : szMessage[2]), VGA_COLOR_LTRED)) >= 0; )
		{
			for (CAudioDevice::AlertBySound(), bKey[0] = bKey[1] = FALSE; !bKey[0] && !bKey[1]; CAudioDevice::AlertBySound())
			{
				bKey[0] = (GetAsyncKeyState(VK_F4)) ? TRUE : FALSE;
				bKey[1] = (GetAsyncKeyState(VK_ESCAPE)) ? TRUE : FALSE;
				ShowTestMessages();
				Sleep(500);
			}
			if (bKey[0] && !bKey[1])
			{
				for (CAudioDevice::AlertBySound(), bKey[0] = bKey[1] = FALSE; !bKey[0] && !bKey[1]; CAudioDevice::AlertBySound())
				{
					bKey[0] = (GetAsyncKeyState(VK_F8)) ? TRUE : FALSE;
					bKey[1] = (GetAsyncKeyState(VK_ESCAPE)) ? TRUE : FALSE;
					ShowTestMessages();
					Sleep(500);
				}
			}
			if (bKey[1])
			{
				for (szMessage[0].Format(((pItem->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTION_ABORTED) : ((pItem->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTION1STEP_ABORTED) : STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTION2STEP_ABORTED)), (LPCTSTR)GetName(), pItem->GetFunction()), szMessage[1].Format(((pItem->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCE_ABORTED) : ((pItem->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCE1STEP_ABORTED) : STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCE2STEP_ABORTED)), (LPCTSTR)GetName(), pItem->GetFunction(), pItem->GetSequence(), pItem->GetEntryID()), szMessage[2].Format(((pItem->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEGSEQUENCE_ABORTED) : ((pItem->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEGSEQUENCE1STEP_ABORTED) : STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEGSEQUENCE2STEP_ABORTED)), (LPCTSTR)GetName(), pItem->GetFunction(), pItem->GetSequence(), pItem->GetEntryID(), nSubEntryID), ShowTestMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_WARNING), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : ((!nSubEntryID) ? szMessage[1] : szMessage[2])); TRUE; )
				{
					GetPropertiesView()->UpdateTCStack(pItem, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_ABORTED), EMPTYSTRING);
					break;
				}
			}
			AcknowledgeConsoleText(STRING(IDS_OUTPUTWINDOW_DEBUGTAB), nLine);
			if (bKey[0]) break;
			return FALSE;
		}
	}
	for (ShowTestMessages(); (pItem->GetReleaseTime() > 0 && pItem->GetReleaseTime().GetTimeInSeconds() < CTime::GetCurrentTime().GetTime() && !GetPropertiesView()->IsTCStackReleaseWaitModeEnabled()) || (pItem->GetExecutionTime() > 0 && pItem->GetExecutionTime().GetTimeInSeconds() < CTime::GetCurrentTime().GetTime()); )
	{
		for (szMessage[0].Format(((pItem->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTION_EXPIRED) : ((pItem->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTION1STEP_EXPIRED) : STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCFUNCTION2STEP_EXPIRED)), (LPCTSTR)GetName(), pItem->GetFunction()), szMessage[1].Format(((pItem->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCE_EXPIRED) : ((pItem->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCE1STEP_EXPIRED) : STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEQUENCE2STEP_EXPIRED)), (LPCTSTR)GetName(), pItem->GetFunction(), pItem->GetSequence(), pItem->GetEntryID()), szMessage[2].Format(((pItem->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEGSEQUENCE_EXPIRED) : ((pItem->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEGSEQUENCE1STEP_EXPIRED) : STRING(IDS_TCPROCEDURE_MESSAGE_ACKNOWLEDGETCSEGSEQUENCE2STEP_EXPIRED)), (LPCTSTR)GetName(), pItem->GetFunction(), pItem->GetSequence(), pItem->GetEntryID(), nSubEntryID), ShowTestMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : ((!nSubEntryID) ? szMessage[1] : szMessage[2])), szMessage[0].Format(((pItem->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCFUNCTION_FAILURE) : ((pItem->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCFUNCTION1STEP_FAILURE) : STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCFUNCTION2STEP_FAILURE)), (LPCTSTR)GetName(), pItem->GetFunction()), szMessage[1].Format(((pItem->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCSEQUENCE_FAILURE) : ((pItem->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCSEQUENCE1STEP_FAILURE) : STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCSEQUENCE2STEP_FAILURE)), (LPCTSTR)GetName(), pItem->GetFunction(), pItem->GetSequence(), pItem->GetEntryID()), szMessage[2].Format(((pItem->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCSEGSEQUENCE_FAILURE) : ((pItem->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCSEGSEQUENCE1STEP_FAILURE) : STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCSEGSEQUENCE2STEP_FAILURE)), (LPCTSTR)GetName(), pItem->GetFunction(), pItem->GetSequence(), pItem->GetEntryID(), nSubEntryID), ShowTestMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : ((!nSubEntryID) ? szMessage[1] : szMessage[2])); TRUE; )
		{
			GetPropertiesView()->UpdateTCStack(pItem, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_EXPIRED), EMPTYSTRING);
			break;
		}
		return FALSE;
	}
	for (szMessage[0].Format(((pItem->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCFUNCTION_SUCCESS) : ((pItem->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCFUNCTION1STEP_SUCCESS) : STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCFUNCTION2STEP_SUCCESS)), (LPCTSTR)GetName(), pItem->GetFunction()), szMessage[1].Format(((pItem->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCSEQUENCE_SUCCESS) : ((pItem->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCSEQUENCE1STEP_SUCCESS) : STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCSEQUENCE2STEP_SUCCESS)), (LPCTSTR)GetName(), pItem->GetFunction(), pItem->GetSequence(), pItem->GetEntryID()), szMessage[2].Format(((pItem->GetAckFlags() & (TCFUNCTION_EXETYPE_FIRSTSTEP | TCFUNCTION_EXETYPE_SECONDSTEP)) == 0) ? STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCSEGSEQUENCE_SUCCESS) : ((pItem->GetAckFlags() & TCFUNCTION_EXETYPE_FIRSTSTEP) ? STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCSEGSEQUENCE1STEP_SUCCESS) : STRING(IDS_TCPROCEDURE_MESSAGE_SENDTCSEGSEQUENCE2STEP_SUCCESS)), (LPCTSTR)GetName(), pItem->GetFunction(), pItem->GetSequence(), pItem->GetEntryID(), nSubEntryID), ShowTestMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_SUCCESS), (pItem->GetSequence().IsEmpty()) ? szMessage[0] : ((!nSubEntryID) ? szMessage[1] : szMessage[2])), bTCStack = GetPropertiesView()->UpdateTCStack(pItem, pTCPacket, bLogging); !bTCStack || !bLogging; )
	{
		for (szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSTACKUPDATE_FAILURE), (LPCTSTR)GetName()); !bTCStack; )
		{
			GetPropertiesView()->UpdateTCStack(pItem, STRING(IDS_TCPROCEDUREPROPERTIESDIALOG_TCSTACKSTATUS_ABORTED), EMPTYSTRING);
			ShowTestMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), szMessage[0]);
			break;
		}
		for (szMessage[0].Format(STRING(IDS_TCPROCEDURE_MESSAGE_TCSTACKLOGGING_FAILURE), (LPCTSTR)GetName()); !bLogging; )
		{
			ShowTestMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), szMessage[0]);
			break;
		}
		TerminateTestingProcedure(FALSE);
		break;
	}
	if (bTCStack)
	{
		if (!nSubEntryID) m_cTCVerificationThread.Verify(pItem);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureWnd::SuspendProcedureCommandScheduling(BOOL bSuspend)
{
	if (IsTesting())
	{
		if ((bSuspend  &&  m_cTCScheduleThread.SuspendThread() != (DWORD)-1) || (!bSuspend  &&  m_cTCScheduleThread.ResumeThread() != (DWORD)-1))
		{
			GetPropertiesView()->UpdateTCStack(TRUE, bSuspend);
			return TRUE;
		}
	}
	return FALSE;
}

BOOL CTCProcedureWnd::LockProcedureCommandQueue(CTCEnvironment *pTCEnvironment)
{
	if (m_cCriticalTCCommandQueueInfoSection.Lock())
	{
		if (m_cTCCommandQueueInfo.GetSize() > 0) return(pTCEnvironment->GetTCProcessInfo()->SetData(m_cTCCommandQueueInfo));
		pTCEnvironment->GetTCProcessInfo()->GetData(m_cTCCommandQueueInfo);
		return TRUE;
	}
	return FALSE;
}

BOOL CTCProcedureWnd::UnlockProcedureCommandQueue(CONST CTCEnvironment *pTCEnvironment)
{
	pTCEnvironment->GetTCProcessInfo()->GetData(m_cTCCommandQueueInfo);
	return m_cCriticalTCCommandQueueInfoSection.Unlock();
}

INT CTCProcedureWnd::Delete(LPCTSTR pszName)
{
	INT  nIndex;
	CString  szFilePath;
	CString  szFileName[3];
	CFileFindEx  cFileFind[2];

	for (szFileName[0] = GetDatabase()->GetFileName(), szFileName[1] = GetDatabase()->GetUpdateFileName(); (nIndex = GetDatabase()->DeleteTCProcedure(pszName)) >= 0; )
	{
		if ((cFileFind[0].FindFile(szFileName[0]) || cFileFind[0].FindFile(szFileName[1])) && cFileFind[0].FindNextFile() >= 0)
		{
			szFilePath = cFileFind[0].GetFilePath().Left(cFileFind[0].GetFilePath().GetLength() - cFileFind[0].GetFileName().GetLength());
			for (szFileName[2].Format(STRING(IDS_TELECOMMANDPROCEDURECODE_SEARCH_FILENAME), pszName), szFileName[2] = szFilePath + szFileName[2]; cFileFind[1].FindFile(szFileName[2]); )
			{
				while (cFileFind[1].FindNextFile())
				{
					CFileEx::SetAttributes(cFileFind[1].GetFilePath(), CFileEx::GetAttributes(cFileFind[1].GetFilePath()) & ~FILE_ATTRIBUTE_READONLY);
					CFileEx::Remove(cFileFind[1].GetFilePath());
				}
				CFileEx::SetAttributes(cFileFind[1].GetFilePath(), CFileEx::GetAttributes(cFileFind[1].GetFilePath()) & ~FILE_ATTRIBUTE_READONLY);
				CFileEx::Remove(cFileFind[1].GetFilePath());
				cFileFind[1].Close();
				break;
			}
			cFileFind[0].Close();
		}
		return nIndex;
	}
	return -1;
}

VOID CTCProcedureWnd::Clean()
{
	m_cTCProcessEngine.Close();
	m_cTCEnvironment.Destroy();
	m_cTMEnvironment.Destroy();
}

BOOL CTCProcedureWnd::UpdateParameterValue(CONST CDatabaseTMParameter *pDatabaseTMParameter)
{
	INT  nPos;
	INT  nPoint;
	INT  nPoints;
	INT  nSample;
	INT  nSamples;
	BOOL  bSample;
	double  fX[2];
	double  fValue;
	double  fRawValue;
	CString  szValues;
	CString  szValue[2];
	CTMUnit  cTMUnit;
	CTimeTag  tTMUnit;
	CTMParameter  *pTMParameter;
	CStringArray  szCalTables[2];
	CDatabaseTMNumCalTable  *pDatabaseTMNumCalTable;
	CDatabaseTMNumCalPoint  *pDatabaseTMNumCalPoint[2];
	CDatabaseTMTxtCalTable  *pDatabaseTMTxtCalTable;
	CDatabaseTMTxtCalPoint  *pDatabaseTMTxtCalPoint;

	if (m_cTMEnvironment.Lock())
	{
		if (m_cTMEnvironment.GetTMParameters()->Find(pDatabaseTMParameter->GetTag()) < 0)
		{
			for (; (pTMParameter = new CTMParameter) != (CTMParameter *)NULL; )
			{
				for (pTMParameter->SetTag(pDatabaseTMParameter->GetTag()), pTMParameter->SetAttributes(pDatabaseTMParameter->GetAttributes()); pDatabaseTMParameter->GetAttributes() & TMPARAMETER_NATURE_CONSTANT; )
				{
					pTMParameter->SetRawValue(&cTMUnit, 0, pDatabaseTMParameter->GetConstValue(), TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_NOLIMIT | TMPARAMETER_STATUS_VALID, (pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]) > 0) ? ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) ? (((pDatabaseTMNumCalTable = GetDatabase()->GetTMNumCalTables()->GetAt(GetDatabase()->GetTMNumCalTables()->Find(szCalTables[0].GetAt(0))))) ? (LPCTSTR)pDatabaseTMNumCalTable->GetName() : EMPTYSTRING) : (((pDatabaseTMTxtCalTable = GetDatabase()->GetTMTxtCalTables()->GetAt(GetDatabase()->GetTMTxtCalTables()->Find(szCalTables[0].GetAt(0))))) ? (LPCTSTR)pDatabaseTMTxtCalTable->GetName() : EMPTYSTRING)) : EMPTYSTRING);
					break;
				}
				if (m_cTMEnvironment.GetTMParameters()->Add(pTMParameter) >= 0) break;
				delete pTMParameter;
				break;
			}
		}
		for (cTMUnit.SetTag(STRING(IDS_TMUNIT_INTERACTIVE)), cTMUnit.SetTimeTag(tTMUnit); (pTMParameter = m_cTMEnvironment.GetTMParameters()->GetAt(m_cTMEnvironment.GetTMParameters()->Find(pDatabaseTMParameter->GetTag()))); )
		{
			if ((pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_NUMERICAL) == TMPARAMETER_CALIBRATION_NUMERICAL)
			{
				if ((pDatabaseTMNumCalTable = (pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]) > 0) ? GetDatabase()->GetTMNumCalTables()->GetAt(GetDatabase()->GetTMNumCalTables()->Find(szCalTables[0].GetAt(0))) : (CDatabaseTMNumCalTable *)NULL))
				{
					for (nSample = nSamples = 0, szValues = pDatabaseTMParameter->GetConstValueAsText(), pTMParameter->Reset(); (nPos = szValues.Find(TAB)) >= 0 || !szValues.IsEmpty(); szValues = (nPos >= 0) ? szValues.Mid(nPos + 1) : EMPTYSTRING, nSample++, nSamples++)
					{
						for (nPoint = 0, nPoints = (GetDatabase()->CheckTMParameterConstValue(pTMParameter->GetAttributes() | TMPARAMETER_NATURE_CONSTANT, (szValue[0] = (nPos >= 0) ? szValues.Left(nPos) : szValues))) ? (INT)(pDatabaseTMNumCalTable->GetSize() - 1) : -1, fValue = _tstof(szValue[0]); nPoint < nPoints && !szValue[0].IsEmpty(); nPoint++)
						{
							if ((pDatabaseTMNumCalPoint[0] = pDatabaseTMNumCalTable->GetAt(nPoint)))
							{
								if ((pDatabaseTMNumCalPoint[1] = pDatabaseTMNumCalTable->GetAt(nPoint + 1)))
								{
									if ((fValue >= pDatabaseTMNumCalPoint[0]->GetY() && fValue <= pDatabaseTMNumCalPoint[1]->GetY()) || (fValue <= pDatabaseTMNumCalPoint[0]->GetY() && fValue >= pDatabaseTMNumCalPoint[1]->GetY()))
									{
										fRawValue = pDatabaseTMNumCalPoint[0]->GetX() + ((fValue - pDatabaseTMNumCalPoint[0]->GetY()) / (pDatabaseTMNumCalPoint[1]->GetY() - pDatabaseTMNumCalPoint[0]->GetY()))*(pDatabaseTMNumCalPoint[1]->GetX() - pDatabaseTMNumCalPoint[0]->GetX());
										break;
									}
								}
							}
						}
						if (nPoint < nPoints)
						{
							for (; !szValue[0].IsEmpty(); )
							{
								pTMParameter->SetRawValue(&cTMUnit, nSample, (pTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT) ? CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pTMParameter->GetAttributes(), fRawValue, FALSE) : CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pTMParameter->GetAttributes(), pDatabaseTMParameter->GetWidth(), (UINT)fRawValue, FALSE), TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_NOLIMIT | TMPARAMETER_STATUS_VALID, pDatabaseTMNumCalTable->GetName());
								break;
							}
							continue;
						}
						if (nPoint == nPoints)
						{
							if ((pDatabaseTMParameter->GetAttributes() & TMPARAMETER_INTERPRETATION_FULL) != TMPARAMETER_INTERPRETATION_FULL)
							{
								if ((pDatabaseTMNumCalPoint[0] = pDatabaseTMNumCalTable->GetAt(0)))
								{
									if ((pDatabaseTMNumCalPoint[1] = pDatabaseTMNumCalTable->GetAt(1)))
									{
										if ((fRawValue = pDatabaseTMNumCalPoint[0]->GetX() + ((fValue - pDatabaseTMNumCalPoint[0]->GetY()) / (pDatabaseTMNumCalPoint[1]->GetY() - pDatabaseTMNumCalPoint[0]->GetY()))*(pDatabaseTMNumCalPoint[1]->GetX() - pDatabaseTMNumCalPoint[0]->GetX())) >= 0.0  &&  fRawValue < pow(2.0, pDatabaseTMParameter->GetWidth()))
										{
											pTMParameter->SetRawValue(&cTMUnit, nSample, (pTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT) ? CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pTMParameter->GetAttributes(), fRawValue, FALSE) : CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pTMParameter->GetAttributes(), pDatabaseTMParameter->GetWidth(), (UINT)fRawValue, FALSE), TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_NOLIMIT | TMPARAMETER_STATUS_VALID, pDatabaseTMNumCalTable->GetName());
											continue;
										}
									}
								}
								if ((pDatabaseTMNumCalPoint[0] = pDatabaseTMNumCalTable->GetAt((INT)pDatabaseTMNumCalTable->GetUpperBound() - 1)))
								{
									if ((pDatabaseTMNumCalPoint[1] = pDatabaseTMNumCalTable->GetAt((INT)pDatabaseTMNumCalTable->GetUpperBound())))
									{
										if ((fRawValue = pDatabaseTMNumCalPoint[0]->GetX() + ((fValue - pDatabaseTMNumCalPoint[0]->GetY()) / (pDatabaseTMNumCalPoint[1]->GetY() - pDatabaseTMNumCalPoint[0]->GetY()))*(pDatabaseTMNumCalPoint[1]->GetX() - pDatabaseTMNumCalPoint[0]->GetX())) >= 0.0  &&  fRawValue < pow(2.0, pDatabaseTMParameter->GetWidth()))
										{
											pTMParameter->SetRawValue(&cTMUnit, nSample, (pTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT) ? CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pTMParameter->GetAttributes(), fRawValue, FALSE) : CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pTMParameter->GetAttributes(), pDatabaseTMParameter->GetWidth(), (UINT)fRawValue, FALSE), TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_NOLIMIT | TMPARAMETER_STATUS_VALID, pDatabaseTMNumCalTable->GetName());
											continue;
										}
									}
								}
							}
						}
					}
					m_cTMEnvironment.Unlock();
					return szValues.IsEmpty();
				}
			}
			if (pTMParameter->GetAttributes() & TMPARAMETER_CALIBRATION_STATUS)
			{
				if ((pDatabaseTMTxtCalTable = (pDatabaseTMParameter->GetCalTables(szCalTables[0], szCalTables[1]) > 0) ? GetDatabase()->GetTMTxtCalTables()->GetAt(GetDatabase()->GetTMTxtCalTables()->Find(szCalTables[0].GetAt(0))) : (CDatabaseTMTxtCalTable *)NULL))
				{
					for (nSample = nSamples = 0, szValues = pDatabaseTMParameter->GetConstValueAsText(); (nPos = szValues.Find(TAB)) >= 0 || !szValues.IsEmpty(); szValues = (nPos >= 0) ? szValues.Mid(nPos + 1) : EMPTYSTRING, nSample++, nSamples++)
					{
						for (nPoint = 0, nPoints = (INT)pDatabaseTMTxtCalTable->GetSize(), szValue[0] = (nPos >= 0) ? szValues.Left(nPos) : szValues; nPoint < nPoints && !szValue[0].IsEmpty(); nPoint++)
						{
							if ((pDatabaseTMTxtCalPoint = (CDatabaseTMTxtCalPoint *)pDatabaseTMTxtCalTable->GetAt(nPoint)))
							{
								if ((pDatabaseTMTxtCalPoint->GetPoint(fX[0], szValue[1]) && szValue[0] == szValue[1]) || (pDatabaseTMTxtCalPoint->GetRange(fX[0], fX[1], szValue[1]) && szValue[0] == szValue[1])) break;
								continue;
							}
						}
						if (nPoint < nPoints)
						{
							for (; !szValue[0].IsEmpty(); )
							{
								pTMParameter->SetRawValue(&cTMUnit, nSample, (pTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT) ? CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pTMParameter->GetAttributes(), fX[0], FALSE) : CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pTMParameter->GetAttributes(), pDatabaseTMParameter->GetWidth(), (UINT)fX[0], FALSE), TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_NOLIMIT | TMPARAMETER_STATUS_VALID, pDatabaseTMTxtCalTable->GetName());
								break;
							}
						}
					}
					m_cTMEnvironment.Unlock();
					return szValues.IsEmpty();
				}
			}
			for (nSample = nSamples = 0, szValues = pDatabaseTMParameter->GetConstValueAsText(); (nPos = szValues.Find(TAB)) >= 0 || !szValues.IsEmpty(); szValues = (nPos >= 0) ? szValues.Mid(nPos + 1) : EMPTYSTRING, nSample++, nSamples++)
			{
				if (GetDatabase()->CheckTMParameterConstValue(pTMParameter->GetAttributes() | TMPARAMETER_NATURE_CONSTANT, (szValue[0] = (nPos >= 0) ? szValues.Left(nPos) : szValues)))
				{
					for (fValue = _tstof(szValue[0]), bSample = TRUE; (pTMParameter->GetAttributes() & (TMPARAMETER_CODING_BITPATTERN | TMPARAMETER_CODING_INVERSEBITPATTERN | TMPARAMETER_CODING_UNSIGNEDINTEGER)) && !szValue[0].IsEmpty(); )
					{
						for (; (pTMParameter->GetAttributes() & TMPARAMETER_RADIX_BINARY) || (pTMParameter->GetAttributes() & (TMPARAMETER_RADIX_BINARY | TMPARAMETER_RADIX_OCTAL | TMPARAMETER_RADIX_DECIMAL | TMPARAMETER_RADIX_HEXADECIMAL)) == 0; )
						{
							fValue = (double)CDatabaseEngine::ParseValue(szValue[0], 2);
							break;
						}
						for (; pTMParameter->GetAttributes() & TMPARAMETER_RADIX_OCTAL; )
						{
							fValue = (double)CDatabaseEngine::ParseValue(szValue[0], 8);
							break;
						}
						for (; pTMParameter->GetAttributes() & TMPARAMETER_RADIX_HEXADECIMAL; )
						{
							fValue = (double)CDatabaseEngine::ParseValue(szValue[0], 16);
							break;
						}
						bSample = pTMParameter->SetRawValue(&cTMUnit, nSample, CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pTMParameter->GetAttributes(), pDatabaseTMParameter->GetWidth(), (UINT)fValue, FALSE), TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_NOLIMIT | TMPARAMETER_STATUS_VALID);
						break;
					}
					for (; (pTMParameter->GetAttributes() & TMPARAMETER_CODING_SIGNEDINTEGER) && !szValue[0].IsEmpty(); )
					{
						bSample = pTMParameter->SetRawValue(&cTMUnit, nSample, CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pTMParameter->GetAttributes(), pDatabaseTMParameter->GetWidth(), (UINT)fValue, FALSE), TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_NOLIMIT | TMPARAMETER_STATUS_VALID);
						break;
					}
					for (; (pTMParameter->GetAttributes() & TMPARAMETER_CODING_FLOATINGPOINT) && !szValue[0].IsEmpty(); )
					{
						bSample = pTMParameter->SetRawValue(&cTMUnit, nSample, CDatabaseEngine::EncodeValue(GetDatabase()->GetType(), pTMParameter->GetAttributes(), fValue, FALSE), TMPARAMETER_STATUS_GOOD | TMPARAMETER_STATUS_NOLIMIT | TMPARAMETER_STATUS_VALID);
						break;
					}
					if (bSample) continue;
				}
				if (!szValue[0].IsEmpty()) break;
			}
			m_cTMEnvironment.Unlock();
			return szValues.IsEmpty();
		}
		m_cTMEnvironment.Unlock();
	}
	return FALSE;
}

VOID CTCProcedureWnd::ShowTestMessage(LPCTSTR pszType, LPCTSTR pszMessage, BOOL bAudition)
{
	CString  szMessage;

	for (ShowTestMessages(), szMessage = pszMessage; !lstrcmp(pszType, STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ALERT)); )
	{
		szMessage.Format(STRING(IDS_TCPROCEDURE_MESSAGE_ALERT), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), pszMessage);
		break;
	}
	for (; lstrlen(pszMessage) > 0; )
	{
		ShowConsoleText(STRING(IDS_OUTPUTWINDOW_DEBUGTAB), szMessage, TRUE, bAudition);
		break;
	}
}

VOID CTCProcedureWnd::ShowTestMessages()
{
	CString  szMessage[3];

	while (m_cTCEnvironment.RemoveMessage(szMessage[0], szMessage[1]))
	{
		for (szMessage[2] = szMessage[1]; !lstrcmp(szMessage[0], STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ALERT)); )
		{
			szMessage[2].Format(STRING(IDS_TCPROCEDURE_MESSAGE_ALERT), (LPCTSTR)m_cDatabaseTCProcedure.GetName(), (LPCTSTR)szMessage[1]);
			break;
		}
		ShowConsoleText(STRING(IDS_OUTPUTWINDOW_DEBUGTAB), szMessage[2], TRUE, FALSE);
	}
}

BOOL CTCProcedureWnd::HasTestDialogs() CONST
{
	INT  nThread;
	INT  nThreads;
	CString  szProcedure;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	BOOL(__cdecl *pHasThreadOpenDialogs)(INT nID, LPCTSTR pszThread);

	if (IsTesting())
	{
#ifndef UNICODE
		szProcedure = STRING(IDS_EXPORTINTERFACE_HASTCPROCEDURETHREADOPENDIALOGS);
#else
		WideCharToMultiByte(CP_ACP, 0, STRING(IDS_EXPORTINTERFACE_HASTCPROCEDURETHREADOPENDIALOGS), -1, (LPSTR)szProcedure.GetBufferSetLength(lstrlen(STRING(IDS_EXPORTINTERFACE_HASTCPROCEDURETHREADOPENDIALOGS))), lstrlen(STRING(IDS_EXPORTINTERFACE_HASTCPROCEDURETHREADOPENDIALOGS)) + 1, (LPCSTR)NULL, (LPBOOL)NULL);
		szProcedure.ReleaseBuffer();
#endif
		if ((pHasThreadOpenDialogs = (BOOL(__cdecl *)(INT nID, LPCTSTR pszThread)) GetProcAddress(m_hTCProcedureCode, (LPCSTR)(LPCTSTR)szProcedure)))
		{
			for (nThread = 0, nThreads = (INT)m_cDatabaseTCProcedure.GetSize(); nThread < nThreads; nThread++)
			{
				if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(nThread)))
				{
					if ((*pHasThreadOpenDialogs)(m_nTCProcedureID, pDatabaseTCProcedureThread->GetName())) break;
					continue;
				}
			}
			return((nThread < nThreads) ? TRUE : FALSE);
		}
	}
	return FALSE;
}

VOID CTCProcedureWnd::AdjustToPrivileges()
{
	m_wndSplitter.AdjustToPrivileges();
}

BEGIN_MESSAGE_MAP(CTCProcedureWnd, CDisplayWnd)
	//{{AFX_MSG_MAP(CTCProcedureWnd)
	ON_WM_CREATE()
	ON_WM_MDIACTIVATE()
	ON_WM_KEYDOWN()
	ON_WM_TIMER()
	ON_WM_CLOSE()
	ON_WM_DESTROY()
	ON_UPDATE_COMMAND_UI(ID_TCPROCEDURE_STATUSBAR_STEPSPANE, OnUpdateStatusBarStepsPane)
	ON_UPDATE_COMMAND_UI(ID_TCPROCEDURE_STATUSBAR_MODEPANE, OnUpdateStatusBarRunningModePane)
	ON_UPDATE_COMMAND_UI(ID_TCPROCEDURE_STATUSBAR_TYPEPANE, OnUpdateStatusBarStepTypePane)
	ON_UPDATE_COMMAND_UI(ID_TCPROCEDURE_STATUSBAR_NAMEPANE, OnUpdateStatusBarStepNamePane)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CTCProcedureWnd message handlers

int CTCProcedureWnd::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	m_nTCProcedureID = (UINT)-1;
	m_nTCProcedureStepID = (UINT)-1;
	m_bTCProcedureStepInto = FALSE;
	m_bTCProcedureStepOver = FALSE;
	m_bTCProcedureStepOut = FALSE;
	m_bTCProcedureStepBreak = FALSE;
	m_bTCProcedureLineBreak = FALSE;
	m_bTCProcedureBreak = FALSE;
	m_bTCProcedureDirty = FALSE;
	m_szTCProcedureStep.Empty();
	m_hTCProcedureExit = (HANDLE)NULL;
	m_hTCProcedureCode = (HINSTANCE)NULL;
	m_pFlowchartView = (CTCProcedureFlowchartView *)NULL;
	m_pPropertiesView = (CTCProcedurePropertiesView *)NULL;
	return((CDisplayWnd::OnCreate(lpCreateStruct) != -1) ? ((IsNew() || LoadFromDatabase()) ? 0 : -1) : -1);
}

BOOL CTCProcedureWnd::OnCreateClient(LPCREATESTRUCT lpcs, CCreateContext *pContext)
{
	if (m_wndSplitter.Create(this) && m_wndStatusBar.Create(this, CBRS_BOTTOM | WS_CHILD | WS_CLIPSIBLINGS | WS_VISIBLE) && m_wndStatusBar.SetIndicators(nStatusBarIndicators, sizeof(nStatusBarIndicators) / sizeof(UINT)))
	{
		m_pFlowchartView = m_wndSplitter.GetFlowchartView();
		m_pPropertiesView = m_wndSplitter.GetPropertiesView();
		return TRUE;
	}
	return FALSE;
}

void CTCProcedureWnd::OnMDIActivate(BOOL bActivate, CWnd *pActivateWnd, CWnd *pDeactivateWnd)
{
	CWnd  *pWnd;

	for (pWnd = CWnd::GetFocus(); GetPropertiesView()->HasDialogs(); )
	{
		for (GetPropertiesView()->ShowDialogs(bActivate); !bActivate; )
		{
			pWnd->SetFocus();
			break;
		}
		break;
	}
	m_wndSplitter.UpdateLayout(bActivate);
	CDisplayWnd::OnMDIActivate(bActivate, pActivateWnd, pDeactivateWnd);
}

void CTCProcedureWnd::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags)
{
	if (nChar == VK_DOWN)
	{
		m_wndSplitter.SetFocus();
		return;
	}
	CDisplayWnd::OnKeyDown(nChar, nRepCnt, nFlags);
}

void CTCProcedureWnd::OnTimer(UINT_PTR nEventID)
{
	INT  nThread;
	INT  nThreads;
	INT  nProfile;
	INT  nProfiles;
	BOOL  bProfile;
	CString  szName;
	CString  szMessage;
	va_list  pArguments;
	CPtrArray  pEvents;
	CTimeSpan  tTestProfile[2];
	CTCProcedureWnd  *pTCProcedureWnd;
	CDatabaseTCProcedureThread  *pDatabaseTCProcedureThread;
	CDatabaseTCProcedureThreadTestProfile  *pTestProfile;
	CDatabaseTCProcedureThreadTestProfiles  pTestProfiles;
	CDatabaseTCProcedure  *pDatabaseTCProcedure;

	if (nEventID == TCPROCEDURECOMPILETHREAD_UPDATE_TIMERID)
	{
		if ((pDatabaseTCProcedure = (!IsCompiling()) ? GetDatabase()->GetTCProcedures()->GetAt(GetDatabase()->GetTCProcedures()->Find(m_cDatabaseTCProcedure.GetName())) : (CDatabaseTCProcedure *)NULL))
		{
			for (m_cDatabaseTCProcedure.Copy(pDatabaseTCProcedure), SetProcedure(&m_cDatabaseTCProcedure), GetProcedure(&m_cDatabaseTCProcedure); !m_cDatabaseTCProcedure.Compare(pDatabaseTCProcedure); )
			{
				GetDatabase()->Save(&m_cDatabaseTCProcedure);
				break;
			}
			KillTimer(nEventID);
		}
		return;
	}
	if (nEventID == TCPROCEDURETESTTHREAD_TESTPROFILE_TIMERID)
	{
		for (nThread = 0, nThreads = (INT)m_cDatabaseTCProcedure.GetSize(), KillTimer(nEventID), tTestProfile[0] = 0, bProfile = FALSE; nThread < nThreads; nThread++)
		{
			if ((pDatabaseTCProcedureThread = m_cDatabaseTCProcedure.GetAt(nThread)) && pDatabaseTCProcedureThread->GetProfiles(pTestProfiles) > 0)
			{
				for (nProfile = 0, nProfiles = (INT)pTestProfiles.GetSize(); nProfile < nProfiles; nProfile++)
				{
					if ((pTestProfile = pTestProfiles.GetAt(nProfile)) && (pTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_DISABLED) != TCPROCEDURETHREADTESTPROFILE_OPTION_DISABLED && (pTestProfile->GetOptions() & (TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART | TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTEP)) && pTestProfile->GetRunningTime() > 0)
					{
						if ((tTestProfile[1] = max(pTestProfile->GetDelay().GetTotalSeconds() - max(CTime::GetCurrentTime().GetTime() - pTestProfile->GetRunningTime().GetTime(), 0) - pTestProfile->GetRunningTimeInterval().GetTotalSeconds(), 0)).GetTotalSeconds() == 0)
						{
							for (InjectProcedureThreadTestProfile(pDatabaseTCProcedureThread->GetName(), pTestProfile); pTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTART; )
							{
								pTestProfile->SetRunningTimeInterval(pTestProfile->GetDelay());
								pTestProfile->SetRunningTime(0);
								break;
							}
							if (pTestProfile->GetOptions() & TCPROCEDURETHREADTESTPROFILE_OPTION_EXECUTEDELAYEDAFTERSTEP)
							{
								pTestProfile->SetRunningTimeInterval(0);
								pTestProfile->SetRunningTime(0);
							}
							continue;
						}
						tTestProfile[0] = (tTestProfile[0] > 0) ? min(tTestProfile[0].GetTotalSeconds(), tTestProfile[1].GetTotalSeconds()) : tTestProfile[1];
						bProfile = TRUE;
					}
				}
				pDatabaseTCProcedureThread->SetProfiles(pTestProfiles);
			}
		}
		if (bProfile  &&  !SetTimer(TCPROCEDURETESTTHREAD_TESTPROFILE_TIMERID, (UINT)(1000 * tTestProfile[0].GetTotalSeconds()), NULL))
		{
			szMessage.Format(STRING(IDS_TCPROCEDURE_MESSAGE_SCHEDULETESTPROFILE_FAILURE), (LPCTSTR)m_cDatabaseTCProcedure.GetName());
			ShowTestMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), szMessage);
		}
		return;
	}
	if (nEventID == TCPROCEDURETESTTHREAD_TESTDISPLAY_TIMERID)
	{
		if (!IsCompiling() && PrepareProcedureForTesting(FALSE))
		{
			for (GetProcedure(&m_cDatabaseTCProcedure); (pDatabaseTCProcedure = GetDatabase()->GetTCProcedures()->GetAt(GetDatabase()->GetTCProcedures()->Find(m_cDatabaseTCProcedure.GetName()))); )
			{
				m_cDatabaseTCProcedure.SetPrecompiledCode(pDatabaseTCProcedure->GetPrecompiledCode());
				m_cDatabaseTCProcedure.SetSourceCode(pDatabaseTCProcedure->GetSourceCode());
				SetProcedure(&m_cDatabaseTCProcedure, -TRUE);
				break;
			}
			KillTimer(nEventID);
			StartTestingProcedure();
		}
		else
		{
			for (; !IsCompiling(); )
			{
				KillTimer(nEventID);
				break;
			}
		}
		return;
	}
	if (nEventID == TCPROCEDURETESTTHREAD_LAUNCHDISPLAY_TIMERID)
	{
		do
		{
			for (; m_cTCEnvironment.LoadTCProcedure(szName, pArguments, pEvents); )
			{
				if ((pTCProcedureWnd = new CTCProcedureWnd(szName)))
				{
					if (pTCProcedureWnd->Create((CMDIFrameWnd *)GetParentFrame()))
					{
						if (pTCProcedureWnd->StartTestingProcedure(pArguments, pEvents))
						{
							pTCProcedureWnd->MDIActivate();
							break;
						}
						pTCProcedureWnd->DestroyWindow();
						break;
					}
					delete pTCProcedureWnd;
				}
				for (szMessage.Format(STRING(IDS_TCPROCEDURE_FAILURE_LOAD), (LPCTSTR)szName); !szName.IsEmpty(); )
				{
					ShowTestMessage(STRING(IDS_TELECOMMANDPROCEDUREMESSAGE_TYPE_ERROR), szMessage, TRUE);
					SetEvent(pEvents.GetAt(pEvents.GetUpperBound()));
					break;
				}
			}
			if (!m_nTCProcedureCount) break;
		} while (--m_nTCProcedureCount > 0);
		KillTimer(nEventID);
		return;
	}
	CDisplayWnd::OnTimer(nEventID);
}

void CTCProcedureWnd::OnClose()
{
	CHourglassCursor  cCursor;

	DoClose();
	CDisplayWnd::OnClose();
}

void CTCProcedureWnd::OnDestroy()
{
	StopTestingProcedure();
	m_wndSplitter.UnSelectAll();
	CDisplayWnd::OnDestroy();
}

void CTCProcedureWnd::OnUpdateStatusBarStepsPane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCProcedureWnd::OnUpdateStatusBarRunningModePane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCProcedureWnd::OnUpdateStatusBarStepTypePane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}

void CTCProcedureWnd::OnUpdateStatusBarStepNamePane(CCmdUI *pCmdUI)
{
	pCmdUI->Enable();
}
